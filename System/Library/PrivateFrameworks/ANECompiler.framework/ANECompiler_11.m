void sub_206E62074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  if (__p)
    operator delete(__p);
  if (a49)
    operator delete(a49);
  if (a52)
    operator delete(a52);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::HoistPostReductionTranspose(ZinMirHoistLayersinPEEW *this, const ZinPattern *a2, ZinIrOpLayerGraph *a3)
{
  const ZinIrOpLayer *v6;
  ZinMirHoistLayersinPEEW *SingleMatch;
  uint64_t DimSet;
  uint64_t MatchGroupIndex;
  unint64_t v10;
  const ZinIrOpLayer *v11;
  ZinMirHoistLayersinPEEW **v12;
  ZinMirHoistLayersinPEEW **v13;
  ZinIrOpLayer *v14;
  uint64_t v15;
  unint64_t matched;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  void *__p;
  ZinMirHoistLayersinPEEW **v21;
  char v22;

  if (!ZinMirHoistLayersinPEEW::AnalyzePostReductionTranspose(this, a2))
    return 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_reduction_transpose");
  SingleMatch = (ZinMirHoistLayersinPEEW *)ZinPattern::GetSingleMatch((uint64_t)a2, (unsigned __int8 *)&__p);
  if (v22 < 0)
    operator delete(__p);
  DimSet = ZinMirHoistLayersinPEEW::CreateDimSet(SingleMatch, v6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_reduction_transpose");
  MatchGroupIndex = ZinPattern::GetMatchGroupIndex((uint64_t)a2, (unsigned __int8 *)&__p);
  if (v22 < 0)
    operator delete(__p);
  if (MatchGroupIndex != -1)
  {
    v10 = MatchGroupIndex + 1;
    if (v10 < ZinPattern::MatchGroupCount(a2))
    {
      while (1)
      {
        ZinPattern::GetMatch(a2, v10, &__p);
        v12 = (ZinMirHoistLayersinPEEW **)__p;
        v13 = v21;
        if (__p != v21)
          break;
LABEL_13:
        if (v12)
        {
          v21 = v12;
          operator delete(v12);
        }
        ++v10;
        matched = ZinPattern::MatchGroupCount(a2);
        result = 1;
        if (v10 >= matched)
          return result;
      }
      while (1)
      {
        v14 = *v12;
        v15 = ZinMirHoistLayersinPEEW::CreateDimSet(*v12, v11);
        v18 = 0;
        v19 = v15 & DimSet;
        if (std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,5ul>,true,true>(&v19, 0, (uint64_t)&v19, 5u, &v18))
        {
          if ((ZinMirHoist::SwapLayersAndUpdateTensorDims(this, a3, SingleMatch, v14, 0) & 1) == 0)
            break;
        }
        if (++v12 == v13)
        {
          v12 = (ZinMirHoistLayersinPEEW **)__p;
          goto LABEL_13;
        }
      }
      if (__p)
      {
        v21 = (ZinMirHoistLayersinPEEW **)__p;
        operator delete(__p);
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

void sub_206E62448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirHoistLayersinPEEW::HoistActivations(ZinPattern const*,ZinIrOpLayerGraph *)::$_0::operator()(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  ZinMirHoist *v6;
  ZinIrOpLayer *SingleMatch;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  int v10;
  ZinIrOpLayer **v12;
  ZinIrOpLayer **v13;

  v6 = *(ZinMirHoist **)(a1 + 8);
  if (!ZinPattern::HasMatched(**(_QWORD **)a1, a3))
    return 1;
  SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(**(_QWORD **)a1, a2);
  ZinPattern::GetMatch(**(_QWORD **)a1, a3, &v12);
  v8 = v12;
  v9 = v13;
  v10 = 1;
  if (v12 != v13)
  {
    do
    {
      if (SingleMatch)
        v10 &= ZinMirHoist::SwapLayersAndUpdateTensorDims(v6, **(ZinIrOpLayerGraph ***)(a1 + 16), SingleMatch, *v8, 1);
      ++v8;
    }
    while (v8 != v9);
    v8 = v12;
  }
  if (v8)
  {
    v13 = v8;
    operator delete(v8);
  }
  return v10 & 1;
}

void sub_206E62558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  if (*a3)
  {
    v6 = *a1;
    return std::__count_BOOL[abi:ne180100]<true,std::vector<BOOL>,false>((uint64_t)&v6, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(_QWORD *)a2 - v3));
  }
  else
  {
    v5 = *a1;
    return std::__count_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>((uint64_t)&v5, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(_QWORD *)a2 - v3));
  }
}

uint64_t std::__count_BOOL[abi:ne180100]<true,std::vector<BOOL>,false>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  int8x8_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2)
      v3 = a2;
    else
      v3 = (64 - v2);
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & **(_QWORD **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    v5 = v4.u32[0];
    a2 -= v3;
    *(_QWORD *)a1 += 8;
  }
  else
  {
    v5 = 0;
  }
  if (a2 >= 0x40)
  {
    v6 = *(int8x8_t **)a1;
    do
    {
      v7 = *v6++;
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(_QWORD *)a1 = v6;
  }
  if (a2)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)(**(_QWORD **)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2)));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

uint64_t std::__count_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2)
      v3 = a2;
    else
      v3 = (64 - v2);
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & ~**(_QWORD **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    v5 = v4.u32[0];
    a2 -= v3;
    *(_QWORD *)a1 += 8;
  }
  else
  {
    v5 = 0;
  }
  if (a2 >= 0x40)
  {
    v6 = *(uint64_t **)a1;
    do
    {
      v7 = *v6++;
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(_QWORD *)a1 = v6;
  }
  if (a2)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~**(_QWORD **)a1));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

void std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C058AB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C058AB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ZinIrOpLayer *v3;
  _BOOL4 v4;
  void *__p;
  void *v7;
  uint64_t v8;

  if (ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8))
    && (v3 = *(ZinIrOpLayer **)(a2 + 8), *(_DWORD *)(*((_QWORD *)v3 + 8) + 8) == 37))
  {
    __p = 0;
    v7 = 0;
    v8 = 0;
    if (ZinIrOpLayer::IsNoOp(v3, (uint64_t *)&__p))
      v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8), 0, 0)+ 104) == 0;
    else
      v4 = 0;
    if (__p)
    {
      v7 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 | 0x100u;
}

void sub_206E628C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<NoOpTransposeAtom::NoOpTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C058A58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C058A58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _BOOL4 v4;

  v4 = ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8))
    && (v3 = *(_QWORD **)(a2 + 8), *(_DWORD *)(v3[8] + 8) == 37)
    && *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v3 + 32))(v3, 0, 0) + 104) == 0;
  return v4 | 0x100u;
}

uint64_t std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<AllTransposeAtom::AllTransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C055E00;
  return result;
}

void std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C055E00;
}

uint64_t std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 4) | 0x100u;
}

uint64_t std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::__unordered_map_hasher<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::hash<ZinBroadcastLayer *>,std::equal_to<ZinBroadcastLayer *>,true>,std::__unordered_map_equal<ZinBroadcastLayer *,std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>,std::equal_to<ZinBroadcastLayer *>,std::hash<ZinBroadcastLayer *>,true>,std::allocator<std::__hash_value_type<ZinBroadcastLayer *,std::unordered_map<ZinIrDimension,unsigned long>>>>::__emplace_unique_key_args<ZinBroadcastLayer *,std::piecewise_construct_t const&,std::tuple<ZinBroadcastLayer * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_QWORD *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 14) = 1065353216;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v13 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_206E62D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void ZinMirHoistLayersinPEEW::Hoist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: HoistPostReductionTranspose() failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: HoistPreReductionTranspose() failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: HoistActivations() failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirHoistLayersinPEEW::HoistPreReductionTranspose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[HoistPreReductionTranspose] Swapping transpose with pre-op failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrPEPoolUnit::ZinIrPEPoolUnit(ZinIrPEPoolUnit *this, const ZinIrPEPoolUnitInfo *a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  ZinIrPEUnit::ZinIrPEUnit(this, a2);
  *v4 = &off_24C01AC50;
  ZinIrPEUnitInfo::ZinIrPEUnitInfo((ZinIrPEUnitInfo *)(v4 + 130), a2);
  *((_QWORD *)this + 130) = &unk_24C01F000;
  *((_QWORD *)this + 251) = off_24C017CA0;
  if (*((char *)a2 + 999) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 84, *((const std::string::value_type **)a2 + 122), *((_QWORD *)a2 + 123));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 61);
    *((_QWORD *)this + 254) = *((_QWORD *)a2 + 124);
    *((_OWORD *)this + 126) = v5;
  }
  *((_DWORD *)this + 510) = *((_DWORD *)a2 + 250);
  *((_QWORD *)this + 256) = 0;
  *((_QWORD *)this + 258) = 0;
  *((_QWORD *)this + 257) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 2048), *((__int128 **)a2 + 126), *((__int128 **)a2 + 127), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 127) - *((_QWORD *)a2 + 126)) >> 3));
  *(_OWORD *)((char *)this + 2072) = *(_OWORD *)((char *)a2 + 1032);
  *((_QWORD *)this + 251) = &unk_24C01CC78;
  v6 = *(_OWORD *)((char *)a2 + 1064);
  *(_OWORD *)((char *)this + 2088) = *(_OWORD *)((char *)a2 + 1048);
  *(_OWORD *)((char *)this + 2104) = v6;
  v7 = *(_OWORD *)((char *)a2 + 1080);
  v8 = *(_OWORD *)((char *)a2 + 1096);
  v9 = *(_OWORD *)((char *)a2 + 1112);
  *((_DWORD *)this + 542) = *((_DWORD *)a2 + 282);
  *(_OWORD *)((char *)this + 2136) = v8;
  *(_OWORD *)((char *)this + 2152) = v9;
  *(_OWORD *)((char *)this + 2120) = v7;
}

void sub_206E62F88(_Unwind_Exception *a1)
{
  ZinIrKernel **v1;
  void **v2;

  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);
  ZinIrPEUnit::~ZinIrPEUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPEPoolUnit::TensorDimensions(ZinIrPEPoolUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  void *__p;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];
  void *v16;

  __p = 0;
  v13 = 0;
  v14 = 0;
  ZinIrPoolUnit::ZinIrPoolUnit(v15, (char *)this + 2008, &__p, a5);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  ZinIrUnit::SetBottomInfo((uint64_t)v15, (uint64_t)this + 8);
  ZinIrPoolUnit::TensorDimensions((ZinIrPoolUnit *)v15, a2, a3, a4);
  v10 = v9;
  v15[0] = &off_24C0178C0;
  ZinIrUnitInfo::~ZinIrUnitInfo(&v16);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)v15);
  return v10;
}

void sub_206E63080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrPEPoolUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v22[3];
  uint64_t v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  ZinGOCLayer *v34;
  __int128 v35;

  v8 = a1 + 2008;
  v9 = operator new();
  v30 = 0;
  v31 = 0;
  v32 = 0;
  ZinIrPoolUnit::ZinIrPoolUnit(v9, v8, &v30, v10);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  ZinIrUnit::SetBottomInfo(v9, a1 + 8);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  ZinIrPEUnit::CreateCommonSubLayers(a1, a2, a3, (uint64_t)&v30);
  *(_QWORD *)&v29 = 0;
  *((_QWORD *)&v29 + 1) = v30;
  v26 = v32;
  v27 = v33;
  v28 = v35;
  ZinPELayer::GetPostScaleAndBiasFromGOC(v34, &v25);
  v12 = operator new();
  v13 = v12;
  v14 = *(_QWORD *)(a3 + 8);
  v23 = *(_QWORD *)(v14 - 16);
  v15 = *(std::__shared_weak_count **)(v14 - 8);
  v24 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v22, 0, sizeof(v22));
  ZinPEPoolLayer::ZinPEPoolLayer(v12, &v23, (__int128 *)(a1 + 1048), 0, &v29, (uint64_t)v22, v11, &v26, &v25);
  v18 = v24;
  if (v24)
  {
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return v13;
}

void sub_206E63280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x20BD002F8](v7, 0x10B3C40D0B38099);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  _Unwind_Resume(a1);
}

void sub_206E632D4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 - 120);
  if (v2)
  {
    *(_QWORD *)(v1 - 112) = v2;
    operator delete(v2);
  }
  MEMORY[0x20BD002F8](v0, 0x10B3C402A538098);
  JUMPOUT(0x206E632CCLL);
}

uint64_t ZinIrPEPoolUnit::CreateKernel(ZinIrPEUnit *a1, const ZinIrHalParameters *a2, ZinIrFileManager *a3, const ZinWeightFileInfo *a4, uint64_t a5, uint64_t a6, ZinIrUnitStatus *a7)
{
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a5)
    ZinAssertImpl("PEPool does not support Espresso scale & bias format", a2, a3, a4, a5, a6, a7, v7, v8);
  return ZinIrPEUnit::CreateCommonSubKernels(a1, a2, a3, a4, a7);
}

void ZinIrPEPoolUnit::~ZinIrPEPoolUnit(ZinIrPEPoolUnit *this)
{
  ZinIrPEPoolUnit::~ZinIrPEPoolUnit(this);
  JUMPOUT(0x20BD002F8);
}

{
  void **v2;

  *(_QWORD *)this = &off_24C01AC50;
  v2 = (void **)((char *)this + 1040);
  *((_QWORD *)this + 130) = &unk_24C01F000;
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 251);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);
  ZinIrPEUnit::~ZinIrPEUnit((ZinIrKernel **)this);
}

void ZinIrPEPoolUnitInfo::~ZinIrPEPoolUnitInfo(void **this)
{
  *this = &unk_24C01F000;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 121);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(this);
}

{
  *this = &unk_24C01F000;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 121);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(this);
  JUMPOUT(0x20BD002F8);
}

__CFArray *CreateSinglePlaneLinearLiveIOAttributes(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  BOOL v9;
  __CFArray *Mutable;
  void **v11;
  void **v12;
  char *v13;
  __CFDictionary *SinglePlaneLinearLiveIOAttributeDict;
  __CFDictionary *v15;
  void **v16;
  void **v17;

  v4 = (void **)(a1 + 1);
  v5 = (void **)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
  {
LABEL_10:
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v11 = (void **)*a1;
    if ((void **)*a1 != v4)
    {
      do
      {
        v12 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v11 + 4);
        v13 = (char *)(v12 + 7);
        if (*((char *)v12 + 79) < 0)
          v13 = *(char **)v13;
        SinglePlaneLinearLiveIOAttributeDict = CreateSinglePlaneLinearLiveIOAttributeDict((uint64_t)(v11 + 7), v13);
        if (!SinglePlaneLinearLiveIOAttributeDict)
          ZinAssertImpl("CreateSinglePlaneLinearLiveIOAttributeDict failed");
        v15 = SinglePlaneLinearLiveIOAttributeDict;
        CFArrayAppendValue(Mutable, SinglePlaneLinearLiveIOAttributeDict);
        CFRelease(v15);
        v16 = (void **)v11[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (void **)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (void **)v11[2];
            v9 = *v17 == v11;
            v11 = v17;
          }
          while (!v9);
        }
        v11 = v17;
      }
      while (v17 != v4);
    }
  }
  else
  {
    v6 = (void **)(a2 + 8);
    while (v6 != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v5 + 4))
    {
      v7 = (void **)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
      if (v8 == v4)
        goto LABEL_10;
    }
    return 0;
  }
  return Mutable;
}

__CFArray *CreateSinglePlaneCircularLiveIOAttributes(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  BOOL v9;
  __CFArray *Mutable;
  void **v11;
  void **v12;
  char *v13;
  __CFDictionary *SinglePlaneCircularLiveIOAttributeDict;
  void **v15;
  void **v16;

  v4 = (void **)(a1 + 1);
  v5 = (void **)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
  {
LABEL_10:
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v11 = (void **)*a1;
    if ((void **)*a1 != v4)
    {
      do
      {
        v12 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v11 + 4);
        v13 = (char *)(v12 + 7);
        if (*((char *)v12 + 79) < 0)
          v13 = *(char **)v13;
        SinglePlaneCircularLiveIOAttributeDict = CreateSinglePlaneCircularLiveIOAttributeDict((uint64_t)(v11 + 7), v13);
        CFArrayAppendValue(Mutable, SinglePlaneCircularLiveIOAttributeDict);
        CFRelease(SinglePlaneCircularLiveIOAttributeDict);
        v15 = (void **)v11[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (void **)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (void **)v11[2];
            v9 = *v16 == v11;
            v11 = v16;
          }
          while (!v9);
        }
        v11 = v16;
      }
      while (v16 != v4);
    }
  }
  else
  {
    v6 = (void **)(a2 + 8);
    while (v6 != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v5 + 4))
    {
      v7 = (void **)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
      if (v8 == v4)
        goto LABEL_10;
    }
    return 0;
  }
  return Mutable;
}

__CFDictionary *CreateSinglePlaneCircularLiveIOAttributeDict(uint64_t a1, char *a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFString *v7;
  CFNumberRef v8;
  void *__p[2];
  char v11;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!a2)
    ZinAssertImpl("name can't be null");
  v6 = Mutable;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  AddNameToLiveIOAttributeDictionary(v6, (const char *)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  AddPlaneDescriptorToLiveIOAttributeDictionary(v6, a1);
  v7 = ZinIrCoordinateToCFString((_DWORD *)(a1 + 240));
  CFDictionaryAddValue(v6, CFSTR("LiveIOCircularBufferWrapAxis"), v7);
  LODWORD(__p[0]) = *(_QWORD *)(a1 + 248);
  v8 = CFNumberCreate(v4, kCFNumberSInt32Type, __p);
  CFDictionaryAddValue(v6, CFSTR("LiveIOCircularBufferSize"), v8);
  CFRelease(v8);
  return v6;
}

void sub_206E637A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *CreateMultiPlaneLinearLiveIOAttributes(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  BOOL v9;
  __CFArray *Mutable;
  void **v11;
  void **v12;
  char *v13;
  __CFDictionary *MultiPlaneLinearLiveIOAttributeDict;
  void **v15;
  void **v16;

  v4 = (void **)(a1 + 1);
  v5 = (void **)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
  {
LABEL_10:
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v11 = (void **)*a1;
    if ((void **)*a1 != v4)
    {
      do
      {
        v12 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v11 + 4);
        v13 = (char *)(v12 + 7);
        if (*((char *)v12 + 79) < 0)
          v13 = *(char **)v13;
        MultiPlaneLinearLiveIOAttributeDict = CreateMultiPlaneLinearLiveIOAttributeDict((uint64_t)(v11 + 7), v13);
        CFArrayAppendValue(Mutable, MultiPlaneLinearLiveIOAttributeDict);
        CFRelease(MultiPlaneLinearLiveIOAttributeDict);
        v15 = (void **)v11[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (void **)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (void **)v11[2];
            v9 = *v16 == v11;
            v11 = v16;
          }
          while (!v9);
        }
        v11 = v16;
      }
      while (v16 != v4);
    }
  }
  else
  {
    v6 = (void **)(a2 + 8);
    while (v6 != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, v5 + 4))
    {
      v7 = (void **)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
      if (v8 == v4)
        goto LABEL_10;
    }
    return 0;
  }
  return Mutable;
}

__CFDictionary *CreateMultiPlaneLinearLiveIOAttributeDict(uint64_t a1, char *a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  __CFArray *v10;
  unint64_t v11;
  uint64_t v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  __CFDictionary *theDict;
  void *__p[2];
  char v19;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!a2)
    ZinAssertImpl("name can't be null");
  v6 = Mutable;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  AddNameToLiveIOAttributeDictionary(v6, (const char *)__p);
  if (v19 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = *(_DWORD *)(a1 + 16);
  v7 = CFNumberCreate(v4, kCFNumberSInt32Type, __p);
  CFDictionaryAddValue(v6, CFSTR("4CCFormat"), v7);
  CFRelease(v7);
  LODWORD(__p[0]) = *(_QWORD *)a1;
  v8 = CFNumberCreate(v4, kCFNumberSInt32Type, __p);
  CFDictionaryAddValue(v6, CFSTR("Width"), v8);
  CFRelease(v8);
  LODWORD(__p[0]) = *(_QWORD *)(a1 + 8);
  v9 = CFNumberCreate(v4, kCFNumberSInt32Type, __p);
  theDict = v6;
  CFDictionaryAddValue(v6, CFSTR("Height"), v9);
  CFRelease(v9);
  v10 = CFArrayCreateMutable(v4, 0, MEMORY[0x24BDBD690]);
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
  {
    v11 = 0;
    v12 = 104;
    do
    {
      v13 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      __p[0] = (void *)v11;
      v14 = CFNumberCreate(v4, kCFNumberSInt64Type, __p);
      CFDictionaryAddValue(v13, CFSTR("PlaneID"), v14);
      CFRelease(v14);
      LODWORD(__p[0]) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + v12);
      v15 = CFNumberCreate(v4, kCFNumberSInt32Type, __p);
      CFDictionaryAddValue(v13, CFSTR("RowStride"), v15);
      CFRelease(v15);
      CFArrayAppendValue(v10, v13);
      CFRelease(v13);
      ++v11;
      v12 += 240;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4) > v11);
  }
  CFDictionaryAddValue(theDict, CFSTR("PlaneDescriptor"), v10);
  CFRelease(v10);
  return theDict;
}

void sub_206E63B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *CreateLiveInputParamAttributes(_QWORD *a1, uint64_t a2)
{
  __CFArray *Mutable;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  char *v9;
  __CFDictionary *LiveInputParamAttributeDict;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v7 = (_QWORD *)*a1;
  v5 = a1 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      v8 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, (void **)v6 + 4);
      v9 = (char *)(v8 + 7);
      if (*((char *)v8 + 79) < 0)
        v9 = *(char **)v9;
      LiveInputParamAttributeDict = CreateLiveInputParamAttributeDict((int *)v6 + 14, v9);
      CFArrayAppendValue(Mutable, LiveInputParamAttributeDict);
      CFRelease(LiveInputParamAttributeDict);
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v13 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v13);
      }
      v6 = v12;
    }
    while (v12 != v5);
  }
  return Mutable;
}

__CFDictionary *CreateLiveInputParamAttributeDict(int *a1, char *a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  void **v6;
  CFStringRef v7;
  const void *v8;
  void *__p[2];
  char v11;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if (v11 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = CFStringCreateWithCString(v4, (const char *)v6, 0x8000100u);
  if (v11 < 0)
    operator delete(__p[0]);
  CFDictionaryAddValue(Mutable, CFSTR("Name"), v7);
  CFRelease(v7);
  v8 = (const void *)ZinTensorFormatToANECFormat(*a1);
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v8);
  return Mutable;
}

void sub_206E63D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinBondedAne::ZinDeploymentComponentAlgorithm::Create@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_24BFF2620;
  *a1 = result;
  return result;
}

uint64_t ZinIrOptOptimizeQuantizedConcat(uint64_t **a1, ZinIrOpLayer *a2)
{
  ZinQuantLayer **v2;
  ZinQuantLayer *v3;
  uint64_t *v5;
  uint64_t *v6;
  ZinQuantLayer *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  ZinIrOpLayer **v19;
  ZinDeQuantLayer *v20;
  int v21;
  ZinIrOpLayer *v22;
  uint64_t ScaleVectorSize;
  uint64_t ZeroPointVectorSize;
  unint64_t v25;
  uint64_t v26;
  ZinDeQuantLayer **v27;
  ZinDeQuantLayer *v28;
  uint64_t v29;
  uint64_t i;
  float ScalarScale;
  int ScalarZeroPoint;
  std::string::size_type size;
  std::string::size_type v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  float v43;
  std::string::size_type v44;
  std::string::size_type v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  float *v52;
  int v53;
  float *v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int128 v59;
  size_t v60;
  std::string *p_p;
  const void *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  ZinIrOpLayer *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char *v76;
  char *v77;
  uint64_t v78;
  int v80;
  _BOOL4 v81;
  int v82;
  ZinIrOpLayer **v83;
  ZinIrOpLayer **v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t **v90;
  ZinQuantLayer *v91;
  char *v93;
  _OWORD v94[2];
  int v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  std::string __p;
  uint64_t v99;
  int v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  _QWORD *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void *v106;
  void *v107;
  char v108;
  __int128 v109[2];
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  std::string v114;
  _QWORD v115[3];

  v115[1] = *MEMORY[0x24BDAC8D0];
  v112 = 0;
  v113 = 0;
  v111 = 0;
  if (*(_QWORD *)(*((_QWORD *)a2 + 8) + 8) != 7)
    goto LABEL_127;
  v2 = (ZinQuantLayer **)*((_QWORD *)a2 + 14);
  if (*((_QWORD *)a2 + 15) - (_QWORD)v2 != 8)
    goto LABEL_127;
  v3 = *v2;
  if (*(_DWORD *)(*((_QWORD *)*v2 + 8) + 8) != 103)
    goto LABEL_127;
  v5 = (uint64_t *)*((_QWORD *)a2 + 11);
  v6 = (uint64_t *)*((_QWORD *)a2 + 12);
  if (v5 != v6)
  {
    v7 = *v2;
    while (1)
    {
      v8 = *v5;
      if (*(_DWORD *)(*(_QWORD *)(*v5 + 64) + 8) != 104)
        goto LABEL_127;
      v9 = v112;
      if (v112 >= v113)
      {
        v11 = (v112 - v111) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v12 = (v113 - v111) >> 2;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if ((unint64_t)(v113 - v111) >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v113, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v11];
        *(_QWORD *)v15 = v8;
        v10 = v15 + 8;
        v17 = v111;
        v16 = v112;
        if (v112 != v111)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = v111;
        }
        v111 = v15;
        v112 = v10;
        v113 = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v112 = v8;
        v10 = v9 + 8;
      }
      v112 = v10;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
      if (++v5 == v6)
      {
        v19 = (ZinIrOpLayer **)v111;
        v3 = v7;
        if (v111 == v112)
          break;
        while (1)
        {
          v20 = *v19;
          v21 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(*v19, 0) + 88);
          if (v21 != *(_DWORD *)((*(uint64_t (**)(ZinQuantLayer *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0)+ 88)|| (ZinDeQuantLayer::IsPerCout(v20) & 1) != 0)
          {
            goto LABEL_127;
          }
          if (++v19 == (ZinIrOpLayer **)v112)
            goto LABEL_28;
        }
      }
    }
  }
LABEL_28:
  v91 = v3;
  v22 = a2;
  ScaleVectorSize = ZinQuantLayer::GetScaleVectorSize(v3);
  ZeroPointVectorSize = ZinQuantLayer::GetZeroPointVectorSize(v91);
  v25 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0, 0)
                  + 56);
  if (ScaleVectorSize != 1 && ScaleVectorSize != v25)
    goto LABEL_127;
  if (ZeroPointVectorSize != 1 && ZeroPointVectorSize != v25)
    goto LABEL_127;
  v26 = *((_QWORD *)v91 + 17);
  ZinIrVector::GetValuesAsVector<float>(*(_QWORD *)(v26 + 568), v25, 1, (uint64_t)v109);
  v90 = a1;
  ZinIrVector::GetValuesAsVector<float>(*(_QWORD *)(v26 + 592), v25, 1, (uint64_t)&v106);
  memset(&__p, 0, sizeof(__p));
  memset(&v114, 0, sizeof(v114));
  v27 = (ZinDeQuantLayer **)v111;
  v93 = v112;
  if (v111 == v112)
  {
    v54 = 0;
  }
  else
  {
    v89 = v25;
    do
    {
      v28 = *v27;
      v29 = *(_QWORD *)((*(uint64_t (**)(ZinDeQuantLayer *, _QWORD, _QWORD))(*(_QWORD *)*v27 + 32))(*v27, 0, 0)+ 56);
      if (v29)
      {
        for (i = 0; i != v29; ++i)
        {
          ScalarScale = ZinDeQuantLayer::GetScalarScale(v28);
          ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint(v28);
          size = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v35 = (void *)__p.__r_.__value_.__r.__words[0];
            v36 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 62)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v38 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v37)
              v37 = v38 >> 1;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
              v39 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
            {
              v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v39);
              size = __p.__r_.__value_.__l.__size_;
              v35 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              v40 = 0;
            }
            v41 = (float *)&v40[4 * v36];
            *v41 = ScalarScale;
            v34 = (std::string::size_type)(v41 + 1);
            while ((void *)size != v35)
            {
              v42 = *(_DWORD *)(size - 4);
              size -= 4;
              *((_DWORD *)v41-- - 1) = v42;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
            __p.__r_.__value_.__l.__size_ = v34;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40[4 * v39];
            if (v35)
              operator delete(v35);
          }
          else
          {
            *(float *)__p.__r_.__value_.__l.__size_ = ScalarScale;
            v34 = size + 4;
          }
          __p.__r_.__value_.__l.__size_ = v34;
          v43 = (float)ScalarZeroPoint;
          v44 = v114.__r_.__value_.__l.__size_;
          if (v114.__r_.__value_.__l.__size_ >= v114.__r_.__value_.__r.__words[2])
          {
            v46 = (void *)v114.__r_.__value_.__r.__words[0];
            v47 = (uint64_t)(v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0]) >> 2;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 62)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v49 = v114.__r_.__value_.__r.__words[2] - v114.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v114.__r_.__value_.__r.__words[2] - v114.__r_.__value_.__r.__words[0]) >> 1 > v48)
              v48 = v49 >> 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
              v50 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v114.__r_.__value_.__r.__words[2], v50);
              v44 = v114.__r_.__value_.__l.__size_;
              v46 = (void *)v114.__r_.__value_.__r.__words[0];
            }
            else
            {
              v51 = 0;
            }
            v52 = (float *)&v51[4 * v47];
            *v52 = v43;
            v45 = (std::string::size_type)(v52 + 1);
            while ((void *)v44 != v46)
            {
              v53 = *(_DWORD *)(v44 - 4);
              v44 -= 4;
              *((_DWORD *)v52-- - 1) = v53;
            }
            v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
            v114.__r_.__value_.__l.__size_ = v45;
            v114.__r_.__value_.__r.__words[2] = (std::string::size_type)&v51[4 * v50];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *(float *)v114.__r_.__value_.__l.__size_ = v43;
            v45 = v44 + 4;
          }
          v114.__r_.__value_.__l.__size_ = v45;
        }
      }
      ++v27;
    }
    while (v27 != (ZinDeQuantLayer **)v93);
    v54 = (float *)v114.__r_.__value_.__r.__words[0];
    v22 = a2;
    v25 = v89;
  }
  if (v25)
  {
    v55 = 0;
    v56 = 0;
    while (*(float *)(*(_QWORD *)&v109[0] + 4 * v56) == *(float *)(__p.__r_.__value_.__r.__words[0] + 4 * v56))
    {
      if (*((float *)v106 + v56) == v54[v56])
      {
        v55 = ++v56 >= v25;
        if (v25 != v56)
          continue;
      }
      goto LABEL_80;
    }
  }
  else
  {
    v55 = 1;
  }
  if (v54)
  {
LABEL_80:
    v114.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
    operator delete(v54);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  if (*(_QWORD *)&v109[0])
  {
    *((_QWORD *)&v109[0] + 1) = *(_QWORD *)&v109[0];
    operator delete(*(void **)&v109[0]);
  }
  if (!v55)
  {
LABEL_127:
    v78 = 0;
    goto LABEL_128;
  }
  v57 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)v22 + 14) + 32))(**((_QWORD **)v22 + 14), 0, 0)+ 88);
  v58 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)v22 + 14) + 32))(**((_QWORD **)v22 + 14), 0, 0);
  v59 = *(_OWORD *)(v58 + 64);
  v109[0] = *(_OWORD *)(v58 + 48);
  v109[1] = v59;
  v110 = *(_QWORD *)(v58 + 80);
  if (*((char *)v22 + 47) >= 0)
    v60 = *((unsigned __int8 *)v22 + 47);
  else
    v60 = *((_QWORD *)v22 + 4);
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v60 + 30);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v60)
  {
    if (*((char *)v22 + 47) >= 0)
      v62 = (char *)v22 + 24;
    else
      v62 = (const void *)*((_QWORD *)v22 + 3);
    memmove(p_p, v62, v60);
  }
  strcpy((char *)p_p + v60, "_opt_optimize_quantized_concat");
  ZinObjectNameFactory::ZinObjectNameFactory(&v106, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v63 = *((_QWORD *)v22 + 2);
  ZinObjectNameFactory::CreateName((uint64_t)&v106, 0, &v114);
  v102 = 0;
  v103 = 0;
  v101 = 0;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  v99 = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  v100 = 0;
  ZinIrTensor::CreateTensor(v63, v57, v109, (__int128 *)&v114, &v103, &v101, (unsigned int *)&__p, &v104);
  v64 = v102;
  if (v102)
  {
    p_shared_owners = (unint64_t *)&v102->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v103;
  v103 = 0;
  if (v67)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v103, v67);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  v68 = operator new();
  memset(&__p, 0, sizeof(__p));
  ZinIrConcatInfo::ZinIrConcatInfo(v68, 0, &__p);
  v101 = v68;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v69 = (ZinIrOpLayer *)operator new();
  v96 = v104;
  v97 = v105;
  if (v105)
  {
    v70 = (unint64_t *)&v105->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  ZinObjectNameFactory::CreateName((uint64_t)&v106, 1u, &__p);
  ZinConcatLayer::ZinConcatLayer(v69, &v101, &v96, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v72 = v97;
  if (v97)
  {
    v73 = (unint64_t *)&v97->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v115[0] = v22;
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
  v114.__r_.__value_.__l.__size_ = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v114);
  v75 = ZinIrOpLayerGraph::AddNode(v90, v69, (ZinIrOpLayer ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  if (__p.__r_.__value_.__l.__size_)
  {
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  v76 = v111;
  v77 = v112;
  while (v76 != v77)
  {
    v75 &= ZinIrOpLayerGraph::AddEdge((uint64_t)v90, **(_QWORD **)(*(_QWORD *)v76 + 88), (uint64_t)v69, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v76 += 8;
  }
  memset(v94, 0, sizeof(v94));
  v95 = 1065353216;
  v80 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v90, (uint64_t **)v91, v69, v94);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v94);
  v81 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v90, v22, 0);
  v82 = v75 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v90, v91, 0) & v80 & v81;
  v83 = (ZinIrOpLayer **)v111;
  v84 = (ZinIrOpLayer **)v112;
  while (v83 != v84)
    v82 &= ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v90, *v83++, 0);
  if (v82)
    v78 = 0;
  else
    v78 = 3;
  v85 = v101;
  v101 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = v105;
  if (v105)
  {
    v87 = (unint64_t *)&v105->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v106 = off_24C01FBB0;
  if (v108 < 0)
    operator delete(v107);
LABEL_128:
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  return v78;
}

void sub_206E64728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void (**a32)(ZinObjectNameFactory *__hidden this),void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v40;
  void *v41;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  v40 = a27;
  a27 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  a32 = off_24C01FBB0;
  if (a38 < 0)
    operator delete(__p);
  v41 = *(void **)(v38 - 168);
  if (v41)
  {
    *(_QWORD *)(v38 - 160) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

BOOL MirOpt::IsInvariantInputToTranspose(_QWORD *a1, uint64_t a2, int **a3)
{
  uint64_t v5;
  int v6;
  char v7;
  _BOOL8 v8;
  _DWORD *v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t DimensionValue;
  BOOL v25;
  int *__p;
  char *v28;

  if (*(_DWORD *)(a1[8] + 8) != 81)
    return 0;
  v5 = a1[11];
  if (a2 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 648))(a1))
      goto LABEL_5;
LABEL_11:
    v7 = 0;
    v28 = 0;
    v6 = **a3;
    goto LABEL_12;
  }
  if (a2 || ((*(uint64_t (**)(_QWORD *))(*a1 + 640))(a1) & 1) == 0)
    goto LABEL_11;
LABEL_5:
  v28 = 0;
  if (**a3 == 2)
    v6 = 4;
  else
    v6 = **a3;
  v7 = 1;
LABEL_12:
  v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v28, 1uLL);
  *v9 = v6;
  v11 = (char *)(v9 + 1);
  __p = v9;
  v28 = (char *)&v9[v10];
  if ((v7 & ((*a3)[1] == 2)) != 0)
    v12 = 4;
  else
    v12 = (*a3)[1];
  if (v11 >= v28)
  {
    v14 = (char *)v9;
    v15 = 2;
    v16 = v28 - (char *)v9;
    if ((unint64_t)((v28 - (char *)v9) >> 1) > 2)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v28, v17);
      v14 = (char *)v9;
      v11 = (char *)(v9 + 1);
    }
    else
    {
      v18 = 0;
    }
    v19 = (int *)(v18 + 4);
    v20 = &v18[4 * v17];
    *v19 = v12;
    v13 = (char *)(v19 + 1);
    while (v11 != v14)
    {
      v21 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *--v19 = v21;
    }
    __p = v19;
    v28 = v20;
    if (v14)
      operator delete(v14);
  }
  else
  {
    v9[1] = v12;
    v13 = (char *)(v9 + 2);
  }
  if (__p == (int *)v13)
  {
    v8 = 1;
LABEL_40:
    operator delete(v13);
    return v8;
  }
  v22 = (char *)(__p + 1);
  do
  {
    v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v5 + 8 * a2) + 32))(*(_QWORD *)(v5 + 8 * a2), 0, 0);
    DimensionValue = ZinIrTensor::GetDimensionValue(v23, *((_DWORD *)v22 - 1));
    v8 = DimensionValue == 1;
    v25 = DimensionValue != 1 || v22 == v13;
    v22 += 4;
  }
  while (!v25);
  v13 = (char *)__p;
  if (__p)
    goto LABEL_40;
  return v8;
}

void sub_206E64B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::PostFusionTransposeHoisting(_QWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  HIBYTE(v7) = a3;
  BYTE6(v7) = 0;
  LODWORD(v7) = ZinIrOpt::ReverseCSE(a1, a2, (_BYTE *)&v7 + 6, 2);
  if ((_DWORD)v7)
    ZinAssertImpl("PreOps failed", v7);
  v8[0] = &off_24C002308;
  v8[1] = (char *)&v7 + 7;
  v8[2] = &v7;
  v9 = v8;
  LODWORD(v7) = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v8, 1);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_6;
  }
  if (v9)
  {
    v5 = 5;
LABEL_6:
    (*(void (**)(_QWORD *))(*v4 + 8 * v5))(v4);
  }
  return 0;
}

void sub_206E64C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C002308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C002308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinTransposeLayer **a3)
{
  ZinReshapeLayer *v3;
  uint64_t **v5;
  ZinIrTensor *v6;
  unint64_t Interleave;
  char v8;
  uint64_t v9;
  void *v10;
  char *v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  uint64_t ReshapeInfo;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  ZinIrOpLayerGraphUtil *v25;
  unint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  ZinIrTensor *v30;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *size;
  std::string::size_type v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  std::string::size_type v54;
  uint64_t v55;
  _QWORD *i;
  ZinIrTensor *v57;
  unint64_t v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  void *v62;
  char *v63;
  int *v64;
  int v65;
  int v66;
  BOOL v67;
  BOOL v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  ZinIrOpLayer *v74;
  char IsNoOp;
  ZinIrOpLayer *v76;
  uint64_t v77;
  uint64_t Hal;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  ZinReshapeLayer *v85;
  unint64_t v86;
  std::string::__raw *v87;
  ZinIrOpLayer **v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  size_t v95;
  std::string *v96;
  const void *v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  std::string::size_type v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  __int128 v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  _QWORD *v113;
  unint64_t *v114;
  unint64_t v115;
  size_t v116;
  std::string *v117;
  const void *v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  std::string::size_type v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  std::string::size_type v128;
  std::string *v129;
  __int128 v130;
  ZinIrOpLayer *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  ZinIrOpLayer *v135;
  ZinIrOpLayer *v136;
  char inserted;
  ZinIrTensor *v138;
  ZinIrTensor *v139;
  uint64_t v140;
  char v141;
  char v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  int v146;
  ZinIrTensor *v147;
  ZinIrTensor *v148;
  void *v149;
  std::string::size_type v150;
  int *v151;
  int v152;
  int v153;
  _BOOL4 v154;
  BOOL v155;
  ZinIrTensor *v156;
  ZinIrTensor *v157;
  int v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::string *v162;
  std::string *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  __int128 v168;
  _QWORD *v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  size_t v174;
  std::string *v175;
  const void *v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  std::string::size_type v180;
  std::string *v181;
  __int128 v182;
  ZinIrTensor *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  size_t v192;
  std::string *v193;
  const void *v194;
  std::string *v195;
  std::string *v196;
  __int128 v197;
  std::string *v198;
  std::string::size_type v199;
  std::string *v200;
  __int128 v201;
  ZinIrOpLayer *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  ZinIrOpLayer *v206;
  char v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t *v211;
  uint64_t *v212;
  ZinIrOpLayer *v213;
  int v214;
  _BOOL4 v215;
  int v216;
  _QWORD *v218;
  const char *v219;
  const char *v220;
  char *v221;
  char *__format;
  uint64_t v223;
  int64x2_t v224;
  ZinReshapeLayer *v225;
  uint64_t **v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t *v230;
  _QWORD *v231[2];
  std::string v232;
  ZinIrTensor *v233;
  std::__shared_weak_count *v234;
  void *v235[2];
  void *v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  _QWORD *v241;
  std::string v242;
  std::string v243;
  std::string v244;
  std::string v245;
  std::string v246;
  ZinIrTensor *v247;
  std::__shared_weak_count *v248;
  void *__p[2];
  int64x2_t v250;
  uint64_t v251;
  std::string v252;
  int *v253;
  int *v254;
  uint64_t v255;
  uint8_t buf[16];
  __int128 v257;
  __int128 v258;
  std::string v259;
  uint64_t v260;

  v260 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  if (*(_DWORD *)(*((_QWORD *)*a3 + 8) + 8) != 37)
    return 0;
  v5 = *a2;
  if (!ZinTransposeLayer::IsCHTranspose(*a3))
    return 0;
  v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0);
  Interleave = ZinIrTensor::GetInterleave(v6);
  if (v8)
  {
    if (Interleave < 2)
      return 0;
  }
  else
  {
    v9 = *(_QWORD *)((*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0)
                   + 104);
    if (v9)
    {
      if (*(_DWORD *)(v9 + 96))
        return 0;
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v257 = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(buf, *(const void **)(v9 + 104), *(_QWORD *)(v9 + 112), (uint64_t)(*(_QWORD *)(v9 + 112) - *(_QWORD *)(v9 + 104)) >> 2);
      DWORD2(v257) = *(_DWORD *)(v9 + 128);
      DimensionOrderHint::DimensionOrderHint(&v227, 0);
      v10 = *(void **)buf;
      if (v228 - v227 == *(_QWORD *)&buf[8] - *(_QWORD *)buf)
      {
        if (v227 == v228)
        {
          v15 = 0;
        }
        else
        {
          v11 = v227 + 4;
          v12 = *(int **)buf;
          do
          {
            v13 = *v12++;
            v14 = *((_DWORD *)v11 - 1);
            v15 = v14 != v13;
            v16 = v14 != v13 || v11 == v228;
            v11 += 4;
          }
          while (!v16);
        }
      }
      else
      {
        v15 = 1;
      }
      if (v227)
      {
        v228 = v227;
        operator delete(v227);
        v10 = *(void **)buf;
      }
      if (v10)
      {
        *(_QWORD *)&buf[8] = v10;
        operator delete(v10);
      }
      if (v15 || ZinIrTensor::MirInfo::HasCustomStrides((ZinIrTensor::MirInfo *)v9))
        return 0;
    }
  }
  ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v3);
  v254 = 0;
  v255 = 0;
  v253 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v253, *(const void **)(ReshapeInfo + 16), *(_QWORD *)(ReshapeInfo + 24), (uint64_t)(*(_QWORD *)(ReshapeInfo + 24) - *(_QWORD *)(ReshapeInfo + 16)) >> 3);
  v223 = a1;
  v227 = (char *)&v228;
  v228 = 0;
  v226 = v5;
  v231[0] = 0;
  v231[1] = 0;
  v229 = 0;
  v230 = (uint64_t *)v231;
  v257 = 0u;
  v258 = 0u;
  *(_OWORD *)buf = 0u;
  v225 = v3;
  __p[0] = v3;
  std::deque<ZinIrOpLayer *>::push_back(buf, __p);
  v18 = *((_QWORD *)&v258 + 1);
  if (!*((_QWORD *)&v258 + 1))
    goto LABEL_114;
  do
  {
    v19 = v258;
    v20 = *(_QWORD *)(*(_QWORD *)&buf[8] + (((unint64_t)v258 >> 6) & 0x3FFFFFFFFFFFFF8));
    *(_QWORD *)&v258 = v258 + 1;
    *((_QWORD *)&v258 + 1) = v18 - 1;
    if ((unint64_t)(v19 + 1) >= 0x400)
    {
      operator delete(**(void ***)&buf[8]);
      *(_QWORD *)&buf[8] += 8;
      *(_QWORD *)&v258 = v258 - 512;
    }
    v21 = v19 & 0x1FF;
    v22 = *(_QWORD *)(v20 + 8 * v21);
    v23 = *(uint64_t **)(v22 + 88);
    v24 = *(uint64_t **)(v22 + 96);
    while (v23 != v24)
    {
      v252.__r_.__value_.__r.__words[0] = 0;
      v25 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v23 + 32))(*v23, 0, 0);
      if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v25, *(const ZinIrTensor **)(v20 + 8 * v21), (const ZinIrOpLayer *)&v252, v26) & 1) == 0)ZinAssertImpl("incoming and current should be connected");
      if (MirOpt::IsInvariantInputToTranspose(*(_QWORD **)(v20 + 8 * v21), (uint64_t)v252.__r_.__value_.__l.__data_, &v253))
      {
        std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(&v230, v23, v23);
        goto LABEL_110;
      }
      v27 = (_QWORD *)*v23;
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)*v23) && v27[15] - v27[14] == 8)
      {
        v28 = (_QWORD *)v27[11];
        v29 = (_QWORD *)v27[12];
        if (v28 == v29)
        {
          v46 = 0;
          v35 = 0;
          v44 = 0;
          memset(&v232, 0, sizeof(v232));
        }
        else
        {
          do
          {
            v30 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v28 + 32))(*v28, 0, 0);
            RootTensor = ZinIrTensor::GetRootTensor(v30);
            if (!*((_QWORD *)RootTensor + 14) && ZinIrTensor::IsLiveInLiveStateOrConstTensor(RootTensor))
              goto LABEL_110;
            v32 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v28 + 32))(*v28, 0, 0);
            if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(v32) + 12) + 64) + 8) == 29)
              goto LABEL_110;
            ++v28;
          }
          while (v28 != v29);
          v34 = (_QWORD *)v27[11];
          v33 = (_QWORD *)v27[12];
          memset(&v232, 0, sizeof(v232));
          if (v34 == v33)
          {
            v46 = 0;
            v35 = 0;
            v44 = 0;
          }
          else
          {
            v35 = 0;
            do
            {
              if ((unint64_t)v35 >= v232.__r_.__value_.__r.__words[2])
              {
                v36 = (uint64_t)((uint64_t)v35 - v232.__r_.__value_.__r.__words[0]) >> 3;
                if ((unint64_t)(v36 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v37 = (uint64_t)(v232.__r_.__value_.__r.__words[2] - v232.__r_.__value_.__r.__words[0]) >> 2;
                if (v37 <= v36 + 1)
                  v37 = v36 + 1;
                if (v232.__r_.__value_.__r.__words[2] - v232.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
                  v38 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v38 = v37;
                if (v38)
                  v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v232.__r_.__value_.__r.__words[2], v38);
                else
                  v39 = 0;
                v40 = &v39[8 * v36];
                *(_QWORD *)v40 = *v34;
                v35 = v40 + 8;
                size = (char *)v232.__r_.__value_.__l.__size_;
                v42 = v232.__r_.__value_.__r.__words[0];
                if (v232.__r_.__value_.__l.__size_ != v232.__r_.__value_.__r.__words[0])
                {
                  do
                  {
                    v43 = *((_QWORD *)size - 1);
                    size -= 8;
                    *((_QWORD *)v40 - 1) = v43;
                    v40 -= 8;
                  }
                  while (size != (char *)v42);
                  size = (char *)v232.__r_.__value_.__r.__words[0];
                }
                v232.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                v232.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
                v232.__r_.__value_.__r.__words[2] = (std::string::size_type)&v39[8 * v38];
                if (size)
                  operator delete(size);
              }
              else
              {
                *v35++ = *v34;
              }
              v232.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
              ++v34;
            }
            while (v34 != v33);
            v44 = v232.__r_.__value_.__r.__words[2];
            if ((unint64_t)v35 < v232.__r_.__value_.__r.__words[2])
            {
              *v35 = v27;
              v45 = (std::string::size_type)(v35 + 1);
LABEL_78:
              v232.__r_.__value_.__l.__size_ = v45;
              for (i = (_QWORD *)v232.__r_.__value_.__r.__words[0]; i != (_QWORD *)v45; ++i)
              {
                v57 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*i + 32))(*i, 0, 0);
                v58 = ZinIrTensor::GetInterleave(v57);
                if (v59)
                  v60 = v58 > 1;
                else
                  v60 = 0;
                if (v60)
                  goto LABEL_103;
              }
              v61 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v27 + 32))(v27, 0, 0) + 104);
              if (v61)
              {
                if (*(_DWORD *)(v61 + 96))
                  goto LABEL_103;
                __p[0] = 0;
                __p[1] = 0;
                v250.i64[0] = 0;
                std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(__p, *(const void **)(v61 + 104), *(_QWORD *)(v61 + 112), (uint64_t)(*(_QWORD *)(v61 + 112) - *(_QWORD *)(v61 + 104)) >> 2);
                v250.i32[2] = *(_DWORD *)(v61 + 128);
                DimensionOrderHint::DimensionOrderHint(v235, 0);
                v62 = __p[0];
                if ((char *)v235[1] - (char *)v235[0] != (char *)__p[1] - (char *)__p[0])
                {
                  v67 = 1;
                  goto LABEL_97;
                }
                if (v235[0] == v235[1])
                {
                  v67 = 0;
                  if (v235[0])
                    goto LABEL_98;
                }
                else
                {
                  v63 = (char *)v235[0] + 4;
                  v64 = (int *)__p[0];
                  do
                  {
                    v65 = *v64++;
                    v66 = *((_DWORD *)v63 - 1);
                    v67 = v66 != v65;
                    v68 = v66 != v65 || v63 == v235[1];
                    v63 += 4;
                  }
                  while (!v68);
LABEL_97:
                  if (v235[0])
                  {
LABEL_98:
                    v235[1] = v235[0];
                    operator delete(v235[0]);
                    v62 = __p[0];
                  }
                }
                if (v62)
                {
                  __p[1] = v62;
                  operator delete(v62);
                }
                if (v67 || ZinIrTensor::MirInfo::HasCustomStrides((ZinIrTensor::MirInfo *)v61))
                {
LABEL_103:
                  v69 = 0;
                  goto LABEL_105;
                }
              }
              v69 = 1;
LABEL_105:
              if (v232.__r_.__value_.__r.__words[0])
              {
                v232.__r_.__value_.__l.__size_ = v232.__r_.__value_.__r.__words[0];
                operator delete(v232.__r_.__value_.__l.__data_);
              }
              if (v69 && (*(unsigned int (**)(uint64_t, int **))(*(_QWORD *)*v23 + 424))(*v23, &v253))
              {
                std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)&v227, v23, v23);
                std::deque<ZinIrOpLayer *>::push_back(buf, v23);
              }
              goto LABEL_110;
            }
            v46 = v232.__r_.__value_.__r.__words[0];
          }
        }
        v47 = (uint64_t)((uint64_t)v35 - v46) >> 3;
        if ((unint64_t)(v47 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v48 = v44 - v46;
        v49 = v48 >> 2;
        if (v48 >> 2 <= (unint64_t)(v47 + 1))
          v49 = v47 + 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50)
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v232.__r_.__value_.__r.__words[2], v50);
        else
          v51 = 0;
        v52 = &v51[8 * v47];
        *(_QWORD *)v52 = v27;
        v45 = (std::string::size_type)(v52 + 8);
        v53 = (char *)v232.__r_.__value_.__l.__size_;
        v54 = v232.__r_.__value_.__r.__words[0];
        if (v232.__r_.__value_.__l.__size_ != v232.__r_.__value_.__r.__words[0])
        {
          do
          {
            v55 = *((_QWORD *)v53 - 1);
            v53 -= 8;
            *((_QWORD *)v52 - 1) = v55;
            v52 -= 8;
          }
          while (v53 != (char *)v54);
          v53 = (char *)v232.__r_.__value_.__r.__words[0];
        }
        v232.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
        v232.__r_.__value_.__l.__size_ = v45;
        v232.__r_.__value_.__r.__words[2] = (std::string::size_type)&v51[8 * v50];
        if (v53)
          operator delete(v53);
        goto LABEL_78;
      }
LABEL_110:
      ++v23;
    }
    v18 = *((_QWORD *)&v258 + 1);
  }
  while (*((_QWORD *)&v258 + 1));
LABEL_114:
  std::deque<unsigned long>::~deque[abi:ne180100](buf);
  if (v253)
  {
    v254 = v253;
    operator delete(v253);
  }
  if (v229)
  {
    v70 = (uint64_t *)v227;
    if (v227 == (char *)&v228)
      goto LABEL_138;
    while (2)
    {
      v71 = v70[4];
      v72 = *(uint64_t **)(v71 + 88);
      v73 = *(uint64_t **)(v71 + 96);
      while (2)
      {
        if (v72 != v73)
        {
          if (!std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v227, v72)&& !std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v230, v72))
          {
            v74 = (ZinIrOpLayer *)*v72;
            memset(buf, 0, sizeof(buf));
            *(_QWORD *)&v257 = 0;
            IsNoOp = ZinIrOpLayer::IsNoOp(v74, (uint64_t *)buf);
            if (*(_QWORD *)buf)
            {
              *(_QWORD *)&buf[8] = *(_QWORD *)buf;
              operator delete(*(void **)buf);
            }
            if ((IsNoOp & 1) == 0)
            {
              v76 = (ZinIrOpLayer *)*v72;
              if (*(_DWORD *)(*(_QWORD *)(*v72 + 64) + 8) == 92)
              {
                if (((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v76 + 408))(v76) & 1) == 0)
                {
                  v76 = (ZinIrOpLayer *)*v72;
                  goto LABEL_128;
                }
              }
              else
              {
LABEL_128:
                if (!ZinIrOpLayer::IsANELayer(v76)
                  || (v77 = *v72,
                      Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(*v72 + 16) + 160)),
                      v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal),
                      (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 440))(v77, v79)))
                {
                  if ((*(_DWORD *)(*(_QWORD *)(*v72 + 64) + 8) - 28) > 2)
                  {
                    if (**(_BYTE **)(v223 + 8) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
                    {
                      v218 = (_QWORD *)((char *)v225 + 24);
                      if (*((char *)v225 + 47) < 0)
                        v218 = (_QWORD *)*v218;
                      *(_DWORD *)buf = 136315138;
                      *(_QWORD *)&buf[4] = v218;
                      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Skipped hoist transpose: %s", buf, 0xCu);
                    }
                    goto LABEL_374;
                  }
                }
              }
            }
          }
          ++v72;
          continue;
        }
        break;
      }
      v80 = (uint64_t *)v70[1];
      if (v80)
      {
        do
        {
          v81 = v80;
          v80 = (uint64_t *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          v81 = (uint64_t *)v70[2];
          v16 = *v81 == (_QWORD)v70;
          v70 = v81;
        }
        while (!v16);
      }
      v70 = v81;
      if (v81 != (uint64_t *)&v228)
        continue;
      break;
    }
LABEL_138:
    if (**(_BYTE **)(v223 + 8) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v82 = (_QWORD *)((char *)v225 + 24);
      if (*((char *)v225 + 47) < 0)
        v82 = (_QWORD *)*v82;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v82;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Hoist transpose: %s", buf, 0xCu);
    }
    v83 = ZinReshapeLayer::GetReshapeInfo(v225);
    v254 = 0;
    v255 = 0;
    v253 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v253, *(const void **)(v83 + 16), *(_QWORD *)(v83 + 24), (uint64_t)(*(_QWORD *)(v83 + 24) - *(_QWORD *)(v83 + 16)) >> 3);
    v84 = (uint64_t *)v227;
    if (v227 != (char *)&v228)
    {
      v85 = v225;
      v86 = 1;
      v221 = "Propagating interleave should be successful";
      __format = "Moving CH transpose must be successful";
      do
      {
        std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]<std::__wrap_iter<ZinIrOpLayer **>>((uint64_t)&v252, *(uint64_t **)(v84[4] + 88), *(uint64_t **)(v84[4] + 96));
        v87 = (std::string::__raw *)v252.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v252.__r_.__value_.__l.__data_ != &v252.__r_.__value_.__r.__words[1])
        {
          do
          {
            v88 = (ZinIrOpLayer **)&v87[1].__words[1];
            v89 = (*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)v87[1].__words[1] + 32))(v87[1].__words[1], 0, 0);
            v90 = *(_OWORD *)(v89 + 64);
            *(_OWORD *)buf = *(_OWORD *)(v89 + 48);
            v257 = v90;
            *(_QWORD *)&v258 = *(_QWORD *)(v89 + 80);
            if (&v228 != std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)&v227, (uint64_t *)&v87[1].__words[1])|| std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)&v230, (uint64_t *)&v87[1].__words[1]))
            {
              goto LABEL_271;
            }
            *(int64x2_t *)__p = vdupq_n_s64(1uLL);
            v250 = *(int64x2_t *)__p;
            v251 = 1;
            ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(buf, (uint64_t)&v253, __p);
            v91 = *((_QWORD *)v85 + 2);
            v92 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*v88 + 32))(*v88, 0, 0)+ 88);
            v93 = (*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0, 0);
            v94 = v93;
            if (*(char *)(v93 + 47) >= 0)
              v95 = *(unsigned __int8 *)(v93 + 47);
            else
              v95 = *(_QWORD *)(v93 + 32);
            std::string::basic_string[abi:ne180100]((uint64_t)&v245, v95 + 1);
            if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v96 = &v245;
            else
              v96 = (std::string *)v245.__r_.__value_.__r.__words[0];
            if (v95)
            {
              if (*(char *)(v94 + 47) >= 0)
                v97 = (const void *)(v94 + 24);
              else
                v97 = *(const void **)(v94 + 24);
              memmove(v96, v97, v95);
            }
            *(_WORD *)((char *)&v96->__r_.__value_.__l.__data_ + v95) = 95;
            std::string::basic_string[abi:ne180100]<0>(&v243, "hoist_tr");
            v98 = std::string::append(&v243, "_xfm", 4uLL);
            v85 = v225;
            v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
            v244.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v99;
            v98->__r_.__value_.__l.__size_ = 0;
            v98->__r_.__value_.__r.__words[2] = 0;
            v98->__r_.__value_.__r.__words[0] = 0;
            if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v100 = &v244;
            else
              v100 = (std::string *)v244.__r_.__value_.__r.__words[0];
            if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v101 = HIBYTE(v244.__r_.__value_.__r.__words[2]);
            else
              v101 = v244.__r_.__value_.__l.__size_;
            v102 = std::string::append(&v245, (const std::string::value_type *)v100, v101);
            v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
            v246.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v103;
            v102->__r_.__value_.__l.__size_ = 0;
            v102->__r_.__value_.__r.__words[2] = 0;
            v102->__r_.__value_.__r.__words[0] = 0;
            v104 = std::string::append(&v246, "_", 1uLL);
            v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
            v259.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v105;
            v104->__r_.__value_.__l.__size_ = 0;
            v104->__r_.__value_.__r.__words[2] = 0;
            v104->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v242, v86);
            if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = &v242;
            else
              v106 = (std::string *)v242.__r_.__value_.__r.__words[0];
            if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v107 = HIBYTE(v242.__r_.__value_.__r.__words[2]);
            else
              v107 = v242.__r_.__value_.__l.__size_;
            v108 = std::string::append(&v259, (const std::string::value_type *)v106, v107);
            v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
            v232.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v109;
            v108->__r_.__value_.__l.__size_ = 0;
            v108->__r_.__value_.__r.__words[2] = 0;
            v108->__r_.__value_.__r.__words[0] = 0;
            v240 = 0;
            v241 = 0;
            v239 = 0;
            LODWORD(v235[0]) = 0;
            v236 = 0;
            v237 = 0;
            v235[1] = 0;
            v238 = 0;
            ZinIrTensor::CreateTensor(v91, v92, (__int128 *)__p, (__int128 *)&v232, &v241, &v239, (unsigned int *)v235, (uint64_t *)&v247);
            v110 = v240;
            if (v240)
            {
              p_shared_owners = (unint64_t *)&v240->__shared_owners_;
              do
                v112 = __ldaxr(p_shared_owners);
              while (__stlxr(v112 - 1, p_shared_owners));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v113 = v241;
            v241 = 0;
            if (v113)
              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v241, v113);
            if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v232.__r_.__value_.__l.__data_);
            if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v242.__r_.__value_.__l.__data_);
            if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v259.__r_.__value_.__l.__data_);
            if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v246.__r_.__value_.__l.__data_);
            if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v244.__r_.__value_.__l.__data_);
            if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v243.__r_.__value_.__l.__data_);
            if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v245.__r_.__value_.__l.__data_);
            v233 = v247;
            v234 = v248;
            if (v248)
            {
              v114 = (unint64_t *)&v248->__shared_owners_;
              do
                v115 = __ldxr(v114);
              while (__stxr(v115 + 1, v114));
            }
            if (*((char *)v225 + 47) >= 0)
              v116 = *((unsigned __int8 *)v225 + 47);
            else
              v116 = *((_QWORD *)v225 + 4);
            std::string::basic_string[abi:ne180100]((uint64_t)&v246, v116 + 1);
            if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v117 = &v246;
            else
              v117 = (std::string *)v246.__r_.__value_.__r.__words[0];
            if (v116)
            {
              if (*((char *)v225 + 47) >= 0)
                v118 = (char *)v225 + 24;
              else
                v118 = (const void *)*((_QWORD *)v225 + 3);
              memmove(v117, v118, v116);
            }
            *(_WORD *)((char *)&v117->__r_.__value_.__l.__data_ + v116) = 95;
            std::string::basic_string[abi:ne180100]<0>(&v244, "hoist_tr");
            v119 = std::string::append(&v244, "_xfm", 4uLL);
            v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
            v245.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v120;
            v119->__r_.__value_.__l.__size_ = 0;
            v119->__r_.__value_.__r.__words[2] = 0;
            v119->__r_.__value_.__r.__words[0] = 0;
            if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v121 = &v245;
            else
              v121 = (std::string *)v245.__r_.__value_.__r.__words[0];
            if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v122 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
            else
              v122 = v245.__r_.__value_.__l.__size_;
            v123 = std::string::append(&v246, (const std::string::value_type *)v121, v122);
            v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
            v259.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v124;
            v123->__r_.__value_.__l.__size_ = 0;
            v123->__r_.__value_.__r.__words[2] = 0;
            v123->__r_.__value_.__r.__words[0] = 0;
            v125 = std::string::append(&v259, "_", 1uLL);
            v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
            v232.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v126;
            v125->__r_.__value_.__l.__size_ = 0;
            v125->__r_.__value_.__r.__words[2] = 0;
            v125->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v243, v86);
            if ((v243.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v127 = &v243;
            else
              v127 = (std::string *)v243.__r_.__value_.__r.__words[0];
            if ((v243.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v128 = HIBYTE(v243.__r_.__value_.__r.__words[2]);
            else
              v128 = v243.__r_.__value_.__l.__size_;
            v129 = std::string::append(&v232, (const std::string::value_type *)v127, v128);
            v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
            v236 = (void *)v129->__r_.__value_.__r.__words[2];
            *(_OWORD *)v235 = v130;
            v129->__r_.__value_.__l.__size_ = 0;
            v129->__r_.__value_.__r.__words[2] = 0;
            v129->__r_.__value_.__r.__words[0] = 0;
            v131 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinReshapeLayer *, ZinIrTensor **, void **))(*(_QWORD *)v225 + 176))(v225, &v233, v235);
            if (SHIBYTE(v236) < 0)
              operator delete(v235[0]);
            if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v243.__r_.__value_.__l.__data_);
            if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v232.__r_.__value_.__l.__data_);
            if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v259.__r_.__value_.__l.__data_);
            if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v245.__r_.__value_.__l.__data_);
            if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v244.__r_.__value_.__l.__data_);
            if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v246.__r_.__value_.__l.__data_);
            v132 = v234;
            if (v234)
            {
              v133 = (unint64_t *)&v234->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            v135 = *v88;
            v136 = (ZinIrOpLayer *)v84[4];
            v259.__r_.__value_.__r.__words[0] = (std::string::size_type)v225;
            v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&v259;
            v232.__r_.__value_.__l.__size_ = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(v235, &v232);
            inserted = ZinIrOpLayerGraph::InsertNodeBetween(v226, v131, v135, v136, (ZinIrOpLayer ***)v235);
            v235[0] = &unk_24C02BB18;
            if (v235[1])
            {
              v236 = v235[1];
              operator delete(v235[1]);
            }
            if ((inserted & 1) == 0)
              goto LABEL_387;
            if (*((_QWORD *)v131 + 12) - *((_QWORD *)v131 + 11) != 8)
            {
              v219 = "Transpose must have single input";
              goto LABEL_386;
            }
            v138 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v131 + 32))(v131, 0, 0);
            if (v138 != v247)
            {
              v219 = "Transpose's tensor should be set to cloned tensor";
LABEL_386:
              __format = (char *)v219;
LABEL_387:
              ZinAssertImpl(__format);
            }
            v139 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)v131 + 11) + 32))(**((_QWORD **)v131 + 11), 0, 0);
            v140 = ZinIrTensor::GetInterleave(v139);
            v142 = v141;
            if (v141)
            {
              v143 = v140;
              v144 = (uint64_t *)ZinIrTensor::GetRootTensor(v247);
              if (ZinIrTensor::SetInterleave(v144, v143, v142, 1))
                goto LABEL_391;
            }
            v145 = *((_QWORD *)v139 + 13);
            if (v145)
            {
              v146 = *(_DWORD *)(v145 + 96);
              if (v146)
              {
                v147 = ZinIrTensor::GetRootTensor(v247);
                if (ZinIrTensor::SetAllocationHint(v147, v146, 1))
                {
                  v220 = "Propagating allocation hint should be successful";
                  goto LABEL_390;
                }
              }
            }
            v148 = ZinIrTensor::GetRootTensor(v139);
            ZinIrTensor::GetDimensionOrderHint(v148, (uint64_t)v235);
            DimensionOrderHint::DimensionOrderHint(&v232, 0);
            v149 = v235[0];
            if (v232.__r_.__value_.__l.__size_ - v232.__r_.__value_.__r.__words[0] == (char *)v235[1] - (char *)v235[0])
            {
              if (v232.__r_.__value_.__r.__words[0] == v232.__r_.__value_.__l.__size_)
              {
                v154 = 0;
                if (!v232.__r_.__value_.__r.__words[0])
                  goto LABEL_259;
LABEL_258:
                v232.__r_.__value_.__l.__size_ = v232.__r_.__value_.__r.__words[0];
                operator delete(v232.__r_.__value_.__l.__data_);
                v149 = v235[0];
                goto LABEL_259;
              }
              v150 = v232.__r_.__value_.__r.__words[0] + 4;
              v151 = (int *)v235[0];
              do
              {
                v152 = *v151++;
                v153 = *(_DWORD *)(v150 - 4);
                v154 = v153 != v152;
                v155 = v153 != v152 || v150 == v232.__r_.__value_.__l.__size_;
                v150 += 4;
              }
              while (!v155);
            }
            else
            {
              v154 = 1;
            }
            if (v232.__r_.__value_.__r.__words[0])
              goto LABEL_258;
LABEL_259:
            if (v149)
            {
              v235[1] = v149;
              operator delete(v149);
            }
            if (v154)
            {
              v156 = ZinIrTensor::GetRootTensor(v139);
              ZinIrTensor::GetDimensionOrderHint(v156, (uint64_t)v235);
              v157 = ZinIrTensor::GetRootTensor(v247);
              v158 = ZinIrTensor::SetDimensionOrderHint(v157, (const DimensionOrderHint *)v235, 1);
              if (v235[0])
              {
                v235[1] = v235[0];
                operator delete(v235[0]);
              }
              if (v158)
              {
                v220 = "Propagating (transposed) dimension order hint should be successful";
LABEL_390:
                v221 = (char *)v220;
LABEL_391:
                ZinAssertImpl(v221);
              }
            }
            v159 = v248;
            if (v248)
            {
              v160 = (unint64_t *)&v248->__shared_owners_;
              do
                v161 = __ldaxr(v160);
              while (__stlxr(v161 - 1, v160));
              if (!v161)
              {
                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                std::__shared_weak_count::__release_weak(v159);
              }
            }
            ++v86;
LABEL_271:
            v162 = (std::string *)v87->__words[1];
            if (v162)
            {
              do
              {
                v163 = v162;
                v162 = (std::string *)v162->__r_.__value_.__r.__words[0];
              }
              while (v162);
            }
            else
            {
              do
              {
                v163 = (std::string *)v87->__words[2];
                v16 = v163->__r_.__value_.__r.__words[0] == (_QWORD)v87;
                v87 = (std::string::__raw *)v163;
              }
              while (!v16);
            }
            v87 = (std::string::__raw *)v163;
          }
          while (v163 != (std::string *)&v252.__r_.__value_.__r.__words[1]);
        }
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v252, (_QWORD *)v252.__r_.__value_.__l.__size_);
        v164 = (uint64_t *)v84[1];
        if (v164)
        {
          do
          {
            v165 = v164;
            v164 = (uint64_t *)*v164;
          }
          while (v164);
        }
        else
        {
          do
          {
            v165 = (uint64_t *)v84[2];
            v16 = *v165 == (_QWORD)v84;
            v84 = v165;
          }
          while (!v16);
        }
        v84 = v165;
      }
      while (v165 != (uint64_t *)&v228);
      v166 = (uint64_t *)v227;
      if (v227 != (char *)&v228)
      {
        v224 = vdupq_n_s64(1uLL);
        do
        {
          v167 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v166[4] + 32))(v166[4], 0, 0);
          v168 = *(_OWORD *)(v167 + 64);
          *(_OWORD *)buf = *(_OWORD *)(v167 + 48);
          v257 = v168;
          *(_QWORD *)&v258 = *(_QWORD *)(v167 + 80);
          *(int64x2_t *)__p = v224;
          v250 = v224;
          v251 = 1;
          ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(buf, (uint64_t)&v253, __p);
          v169 = (_QWORD *)v166[4];
          v170 = v169[2];
          v171 = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v169 + 32))(v169, 0, 0) + 88);
          v172 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v166[4] + 32))(v166[4], 0, 0);
          v173 = v172;
          if (*(char *)(v172 + 47) >= 0)
            v174 = *(unsigned __int8 *)(v172 + 47);
          else
            v174 = *(_QWORD *)(v172 + 32);
          std::string::basic_string[abi:ne180100]((uint64_t)&v252, v174 + 1);
          if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v175 = &v252;
          else
            v175 = (std::string *)v252.__r_.__value_.__r.__words[0];
          if (v174)
          {
            if (*(char *)(v173 + 47) >= 0)
              v176 = (const void *)(v173 + 24);
            else
              v176 = *(const void **)(v173 + 24);
            memmove(v175, v176, v174);
          }
          *(_WORD *)((char *)&v175->__r_.__value_.__l.__data_ + v174) = 95;
          std::string::basic_string[abi:ne180100]<0>(&v246, "hoist_tr");
          v177 = std::string::append(&v246, "_xfm", 4uLL);
          v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
          v259.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v178;
          v177->__r_.__value_.__l.__size_ = 0;
          v177->__r_.__value_.__r.__words[2] = 0;
          v177->__r_.__value_.__r.__words[0] = 0;
          if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v179 = &v259;
          else
            v179 = (std::string *)v259.__r_.__value_.__r.__words[0];
          if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v180 = HIBYTE(v259.__r_.__value_.__r.__words[2]);
          else
            v180 = v259.__r_.__value_.__l.__size_;
          v181 = std::string::append(&v252, (const std::string::value_type *)v179, v180);
          v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
          v232.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v182;
          v181->__r_.__value_.__l.__size_ = 0;
          v181->__r_.__value_.__r.__words[2] = 0;
          v181->__r_.__value_.__r.__words[0] = 0;
          v183 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v166[4] + 32))(v166[4], 0, 0);
          ZinIrTensor::CopyTensorMirInfo(v183, (ZinIrTensor::MirInfo **)&v242);
          *(_OWORD *)&v244.__r_.__value_.__l.__data_ = 0uLL;
          LODWORD(v235[0]) = 0;
          v236 = 0;
          v237 = 0;
          v235[1] = 0;
          v238 = 0;
          ZinIrTensor::CreateTensor(v170, v171, (__int128 *)__p, (__int128 *)&v232, &v242, (uint64_t *)&v244, (unsigned int *)v235, (uint64_t *)&v245);
          v184 = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
          if (v244.__r_.__value_.__l.__size_)
          {
            v185 = (unint64_t *)(v244.__r_.__value_.__l.__size_ + 8);
            do
              v186 = __ldaxr(v185);
            while (__stlxr(v186 - 1, v185));
            if (!v186)
            {
              ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
              std::__shared_weak_count::__release_weak(v184);
            }
          }
          v187 = (_QWORD *)v242.__r_.__value_.__r.__words[0];
          v242.__r_.__value_.__r.__words[0] = 0;
          if (v187)
            std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v242, v187);
          if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v232.__r_.__value_.__l.__data_);
          if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v259.__r_.__value_.__l.__data_);
          if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v246.__r_.__value_.__l.__data_);
          if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v252.__r_.__value_.__l.__data_);
          v188 = v166[4];
          *(_OWORD *)&v243.__r_.__value_.__l.__data_ = *(_OWORD *)&v245.__r_.__value_.__l.__data_;
          v189 = v188;
          if (v245.__r_.__value_.__l.__size_)
          {
            v190 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
            do
              v191 = __ldxr(v190);
            while (__stxr(v191 + 1, v190));
            v189 = v166[4];
          }
          if (*(char *)(v189 + 47) >= 0)
            v192 = *(unsigned __int8 *)(v189 + 47);
          else
            v192 = *(_QWORD *)(v189 + 32);
          std::string::basic_string[abi:ne180100]((uint64_t)&v232, v192 + 1);
          if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v193 = &v232;
          else
            v193 = (std::string *)v232.__r_.__value_.__r.__words[0];
          if (v192)
          {
            if (*(char *)(v189 + 47) >= 0)
              v194 = (const void *)(v189 + 24);
            else
              v194 = *(const void **)(v189 + 24);
            memmove(v193, v194, v192);
          }
          *(_WORD *)((char *)&v193->__r_.__value_.__l.__data_ + v192) = 95;
          v195 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v259, "hoist_tr");
          v196 = std::string::append(v195, "_xfm", 4uLL);
          v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
          v252.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v197;
          v196->__r_.__value_.__l.__size_ = 0;
          v196->__r_.__value_.__r.__words[2] = 0;
          v196->__r_.__value_.__r.__words[0] = 0;
          if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v198 = &v252;
          else
            v198 = (std::string *)v252.__r_.__value_.__r.__words[0];
          if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v199 = HIBYTE(v252.__r_.__value_.__r.__words[2]);
          else
            v199 = v252.__r_.__value_.__l.__size_;
          v200 = std::string::append(&v232, (const std::string::value_type *)v198, v199);
          v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
          v236 = (void *)v200->__r_.__value_.__r.__words[2];
          *(_OWORD *)v235 = v201;
          v200->__r_.__value_.__l.__size_ = 0;
          v200->__r_.__value_.__r.__words[2] = 0;
          v200->__r_.__value_.__r.__words[0] = 0;
          v202 = (ZinIrOpLayer *)(*(uint64_t (**)(uint64_t, int **, std::string *, void **))(*(_QWORD *)v188 + 432))(v188, &v253, &v243, v235);
          if (SHIBYTE(v236) < 0)
            operator delete(v235[0]);
          if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v252.__r_.__value_.__l.__data_);
          if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v259.__r_.__value_.__l.__data_);
          if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v232.__r_.__value_.__l.__data_);
          v203 = (std::__shared_weak_count *)v243.__r_.__value_.__l.__size_;
          if (v243.__r_.__value_.__l.__size_)
          {
            v204 = (unint64_t *)(v243.__r_.__value_.__l.__size_ + 8);
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
            }
          }
          v206 = (ZinIrOpLayer *)v166[4];
          v235[0] = &unk_24C02BB18;
          v236 = 0;
          v237 = 0;
          v235[1] = 0;
          v207 = ZinIrOpLayerGraph::ReplaceNode(v226, v206, v202, (const Layer2TDMapper::SourceLayer *)v235);
          v235[0] = &unk_24C02BB18;
          if (v235[1])
          {
            v236 = v235[1];
            operator delete(v235[1]);
          }
          if ((v207 & 1) == 0)
            ZinAssertImpl("Transposing invariant layers must be successful");
          v208 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
          if (v245.__r_.__value_.__l.__size_)
          {
            v209 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
            do
              v210 = __ldaxr(v209);
            while (__stlxr(v210 - 1, v209));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
              std::__shared_weak_count::__release_weak(v208);
            }
          }
          v211 = (uint64_t *)v166[1];
          if (v211)
          {
            do
            {
              v212 = v211;
              v211 = (uint64_t *)*v211;
            }
            while (v211);
          }
          else
          {
            do
            {
              v212 = (uint64_t *)v166[2];
              v16 = *v212 == (_QWORD)v166;
              v166 = v212;
            }
            while (!v16);
          }
          v166 = v212;
        }
        while (v212 != (uint64_t *)&v228);
      }
    }
    v213 = (ZinIrOpLayer *)**((_QWORD **)v225 + 11);
    *(_OWORD *)buf = 0u;
    v257 = 0u;
    LODWORD(v258) = 1065353216;
    v214 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v226, (uint64_t **)v225, v213, buf);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)buf);
    v215 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v226, v225, 1);
    if (v253)
    {
      v254 = v253;
      operator delete(v253);
    }
    if ((v214 & v215) != 0)
      v216 = 0;
    else
      v216 = 3;
    **(_DWORD **)(v223 + 16) = v216;
    if ((v214 & v215 & 1) == 0)
      ZinAssertImpl("Transpose hoisting failed");
  }
LABEL_374:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v230, v231[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v227, v228);
  return 0;
}

void sub_206E66414(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(_QWORD *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::PostFusionTransposeHoisting(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

_QWORD *NormalizationUtils::GetBroadcastMap@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *i;
  __int128 v6;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  for (i = (uint64_t *)result[2]; i; i = (uint64_t *)*i)
  {
    switch(*((_DWORD *)i + 4))
    {
      case 0:
        LODWORD(v6) = 0;
        *((_QWORD *)&v6 + 1) = *a2;
        result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>(a3, (int *)&v6, &v6);
        break;
      case 1:
        LODWORD(v6) = 1;
        *((_QWORD *)&v6 + 1) = a2[4];
        result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>(a3, (int *)&v6, &v6);
        break;
      case 2:
        LODWORD(v6) = 2;
        *((_QWORD *)&v6 + 1) = a2[1];
        result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>(a3, (int *)&v6, &v6);
        break;
      case 3:
        LODWORD(v6) = 3;
        *((_QWORD *)&v6 + 1) = a2[2];
        result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>(a3, (int *)&v6, &v6);
        break;
      case 4:
        LODWORD(v6) = 4;
        *((_QWORD *)&v6 + 1) = a2[3];
        result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>(a3, (int *)&v6, &v6);
        break;
      default:
        continue;
    }
  }
  return result;
}

void sub_206E66AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t NormalizationUtils::GetReductionDimensions(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  unsigned int v3;

  v1 = *(uint64_t **)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  do
  {
    v3 = *((_DWORD *)v1 + 4);
    if (v3 >= 5)
      std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
    result |= 1 << v3;
    v1 = (uint64_t *)*v1;
  }
  while (v1);
  return result;
}

double ZinCompilerCore::ZinCompilerCore(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double result;

  *(_QWORD *)a1 = off_24C01A0C0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = a6;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a3;
  result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  return result;
}

uint64_t ZinCompilerCore::GetComputeProgram@<X0>(ZinCompilerCore *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 30);
  if (result)
    return ZinObjectGeneration::GetComputeMutableProgramWithOwnership(result, a2);
  *a2 = 0;
  return result;
}

uint64_t ZinCompilerCore::GetBarUsage(ZinCompilerCore *this)
{
  return (uint64_t)this + 64;
}

uint64_t ZinCompilerCore::PreProcessOpLayerGraph(ZinCompilerCore *this)
{
  ZinIrPreprocess **v2;
  ZinIrControlFlowGraph *v3;
  uint64_t v4;
  std::string v6;
  void *v7[2];
  char v8;

  kdebug_trace();
  v2 = *(ZinIrPreprocess ***)(*((_QWORD *)this + 17) + 992);
  ZinIrPreprocess::ZinIrIOInsertTypeCastForDmaConversions(v2, v3);
  ZinIrPreprocess::InsertExplicitBroadcasts(v2, *((_QWORD *)this + 1));
  v4 = *(_QWORD *)(*((_QWORD *)this + 17) + 992);
  std::string::basic_string[abi:ne180100]<0>(v7, "after_typecast_insertion");
  ZinIrCompilerParameters::ZinIrCompilerParameters(&v6, *(const ZinIrCompilerParameters **)(*((_QWORD *)this + 1) + 8));
  ZinVisualization::CreateDotGraphAndLogConditionally(v4, (std::string::size_type)v7, (ZinIrCompilerParameters *)&v6, *((_QWORD *)this + 17) + 24, 1);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v6);
  if (v8 < 0)
    operator delete(v7[0]);
  kdebug_trace();
  return 0;
}

void sub_206E66CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)va);
  if (*(char *)(v2 - 33) < 0)
    operator delete(*(void **)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::ValidateOpLayerGraph(ZinCompilerCore *this)
{
  uint64_t v2;
  ZinIrControlFlowGraph *v3;
  uint64_t Hal;
  const ZinIrHalParameters *v5;
  uint64_t result;

  v2 = *((_QWORD *)this + 17);
  v3 = *(ZinIrControlFlowGraph **)(v2 + 992);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v2 + 160));
  v5 = (const ZinIrHalParameters *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  result = ZinIrValidate(v3, v5, *((ZinIrNetworkStatus **)this + 32));
  if ((_DWORD)result)
  {
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    return 3;
  }
  return result;
}

uint64_t ZinCompilerCore::OptimizeOpLayerGraph(CFArrayRef **this)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  std::string v12;
  void *v13[2];
  char v14;

  kdebug_trace();
  if (ZinIrOptimize(this[17][124], this[1]))
  {
    v2 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v2)
      ZinCompilerCore::OptimizeOpLayerGraph(v2, v3, v4, v5, v6, v7, v8, v9);
    ZinIrUnitStatus::SetError(this[7], CFSTR("CompilationFailure"));
    return 3;
  }
  else
  {
    v11 = (uint64_t)this[17][124];
    std::string::basic_string[abi:ne180100]<0>(v13, "after_optimizer");
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v12, this[1][1]);
    ZinVisualization::CreateDotGraphAndLogConditionally(v11, (std::string::size_type)v13, (ZinIrCompilerParameters *)&v12, (uint64_t)(this[17] + 3), 2);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v12);
    if (v14 < 0)
      operator delete(v13[0]);
    kdebug_trace();
    return 0;
  }
}

void sub_206E66E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)va);
  if (*(char *)(v2 - 33) < 0)
    operator delete(*(void **)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunMirPrepareIr(ZinCompilerCore *this)
{
  uint64_t Hal;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v17;
  void *v18[2];
  char v19;
  _QWORD v20[2];
  std::string v21;
  int v22;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 17) + 160));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v4 = *((_QWORD *)this + 17);
  v20[0] = v3;
  v20[1] = v4 + 176;
  if (*(char *)(v4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(v4 + 24), *(_QWORD *)(v4 + 32));
    v4 = *((_QWORD *)this + 17);
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 24);
    v21.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 40);
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
  }
  v22 = *(_DWORD *)(v4 + 52);
  if (ZinMirPrepareIr(*(ZinTensorMirInfoPropogator ***)(v4 + 992), (uint64_t)v20, *((CFArrayRef **)this + 32)))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinCompilerCore::RunMirPrepareIr(v6, v7, v8, v9, v10, v11, v12, v13);
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    v14 = 3;
  }
  else
  {
    v15 = *(_QWORD *)(*((_QWORD *)this + 17) + 992);
    std::string::basic_string[abi:ne180100]<0>(v18, "after_prepare_ir_builder");
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v17, *(const ZinIrCompilerParameters **)(*((_QWORD *)this + 1) + 8));
    ZinVisualization::CreateDotGraphAndLogConditionally(v15, (std::string::size_type)v18, (ZinIrCompilerParameters *)&v17, *((_QWORD *)this + 17) + 24, 8);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v17);
    if (v19 < 0)
      operator delete(v18[0]);
    v14 = 0;
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v14;
}

void sub_206E66FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)va);
  if (*(char *)(v2 - 81) < 0)
    operator delete(*(void **)(v2 - 104));
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunBondedNetworkSplit(ZinCompilerCore *this)
{
  uint64_t v1;
  uint64_t v4;

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 158))
    return 0;
  ZinBondedAne::ZinMirBondedAneSplit::ZinMirBondedAneSplit(&v4);
  v1 = ZinBondedAne::ZinMirBondedAneSplit::Run((ZinBondedAne::ZinMirBondedAneSplit *)&v4, *(ZinIrControlFlowGraph **)(*((_QWORD *)this + 17) + 992));
  ZinBondedAne::ZinMirBondedAneSplit::~ZinMirBondedAneSplit((ZinBondedAne::ZinMirBondedAneSplit *)&v4);
  return v1;
}

void sub_206E6706C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZinBondedAne::ZinMirBondedAneSplit::~ZinMirBondedAneSplit((ZinBondedAne::ZinMirBondedAneSplit *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunMirBuilder(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  uint64_t KernelSparsityCache;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v16;
  void *v17[2];
  char v18;
  _BYTE v19[16];
  void *v20;
  char v21;

  ZinIrContext::GetParameters(*((ZinIrContext **)this + 17), (uint64_t)v19);
  KernelSparsityCache = ZinIrContext::GetKernelSparsityCache(*((ZinIrContext **)this + 17));
  if (ZinMirBuilder((uint64_t)a2, (uint64_t)v19, KernelSparsityCache, *((_QWORD *)this + 32), v5))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinCompilerCore::RunMirBuilder(v6, v7, v8, v9, v10, v11, v12, v13);
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    v14 = 3;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "after_mir_builder");
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v16, *(const ZinIrCompilerParameters **)(*((_QWORD *)this + 1) + 8));
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a2, (std::string::size_type)v17, (ZinIrCompilerParameters *)&v16, *((_QWORD *)this + 17) + 24, 8);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v16);
    if (v18 < 0)
      operator delete(v17[0]);
    v14 = 0;
  }
  if (v21 < 0)
    operator delete(v20);
  return v14;
}

void sub_206E6717C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)va);
  if (*(char *)(v2 - 81) < 0)
    operator delete(*(void **)(v2 - 104));
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunTaskScheduler(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  void **v7;
  const void *v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  char v29;
  uint64_t *v30;
  _QWORD *v31[2];

  kdebug_trace();
  v31[0] = 0;
  v31[1] = 0;
  v30 = (uint64_t *)v31;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  if (*(char *)(v5 + 47) >= 0)
    v6 = *(unsigned __int8 *)(v5 + 47);
  else
    v6 = *(_QWORD *)(v5 + 32);
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 20);
  if (v29 < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if (*(char *)(v5 + 47) >= 0)
      v8 = (const void *)(v5 + 24);
    else
      v8 = *(const void **)(v5 + 24);
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".Scheduler.debug.txt");
  ScheduleControlFlowGraph(a2, v4, &v30, (__int128 *)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(*((_QWORD *)this + 3) + 1126))
  {
    ZinMirPEReductionAccumulationRetention::ZinMirPEReductionAccumulationRetention(__p, *((_QWORD *)this + 1), a2, &v30);
    v9 = ZinMirPEReductionAccumulationRetention::Run((ZinMirPEReductionAccumulationRetention *)__p);
    if ((_DWORD)v9)
    {
      v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v10)
        ZinCompilerCore::RunTaskScheduler(v10, v11, v12, v13, v14, v15, v16, v17);
      ZinMirPEReductionAccumulationRetention::~ZinMirPEReductionAccumulationRetention((ZinMirPEReductionAccumulationRetention *)__p);
      goto LABEL_27;
    }
    ZinIrControlFlowGraph::SetScheduleMap(a2, &v30);
    ZinMirPEReductionAccumulationRetention::~ZinMirPEReductionAccumulationRetention((ZinMirPEReductionAccumulationRetention *)__p);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 130) || (v18 = *((_QWORD *)this + 3), !*(_BYTE *)(v18 + 2032)))
  {
LABEL_26:
    kdebug_trace();
    v9 = 0;
    goto LABEL_27;
  }
  if (!ZinMirAppendSecureFlushLayers(*((_QWORD *)this + 17), (uint64_t)&v30, *(unsigned __int8 *)(v18 + 2033)))
  {
    ZinIrControlFlowGraph::SetScheduleMap(a2, &v30);
    goto LABEL_26;
  }
  v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v19)
    ZinCompilerCore::RunTaskScheduler(v19, v20, v21, v22, v23, v24, v25, v26);
  ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
  v9 = 3;
LABEL_27:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v30, v31[0]);
  return v9;
}

void sub_206E673D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v15 - 80, *(_QWORD **)(v15 - 72));
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::ValidateMirInfo(CFArrayRef **this, ZinIrControlFlowGraph *a2)
{
  uint64_t result;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v12, (uint64_t)a2);
  result = ZinMirValidateMirInfo::Execute((ZinMirValidateMirInfo *)&v12);
  if ((_DWORD)result)
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      ZinCompilerCore::ValidateMirInfo(v4, v5, v6, v7, v8, v9, v10, v11);
    ZinIrUnitStatus::SetError(this[7], CFSTR("CompilationFailure"));
    return 3;
  }
  return result;
}

uint64_t ZinCompilerCore::RunPieceGeneration(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  int8x16_t v14;
  void *__p;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v14 = vextq_s8(*((int8x16_t *)this + 1), *((int8x16_t *)this + 1), 8uLL);
  v16 = 0;
  v17 = 0;
  __p = 0;
  v18 = 0;
  ZinMirCacheTensors::ZinMirCacheTensors(v13, (uint64_t)a2, (uint64_t)&v14);
  if (ZinBondedAne::ZinPieceGeneration::Execute((ZinBondedAne::ZinPieceGeneration *)v13))
  {
    v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v3)
      ZinCompilerCore::RunPieceGeneration(v3, v4, v5, v6, v7, v8, v9, v10);
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    v11 = 3;
  }
  else
  {
    v11 = 0;
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  return v11;
}

void sub_206E6752C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinCompilerCore::RunCPAllocator(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string v24[32];
  uint8_t v25[4];
  const char *v26;
  _BYTE buf[12];
  char v28;
  _BYTE v29[1088];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v4 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v4 + 158))
  {
    v5 = *((_QWORD *)this + 1);
    if (*(_BYTE *)(*(_QWORD *)v5 + 1105))
    {
      if (*(_BYTE *)(v4 + 367))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "ZinCpBasedAllocator is disabled by a compile flag";
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s\n", buf, 0xCu);
        }
      }
      else
      {
        ZinCpBasedAllocator::ZinCpBasedAllocator(buf, a2, v5, v4 + 24, 0);
        if (ZinCpBasedAllocator::Execute((ZinCpBasedAllocator *)buf))
        {
          v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v6)
            ZinCompilerCore::RunCPAllocator(v6, v7, v8, v9, v10, v11, v12, v13);
          ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
          ZinCpBasedAllocator::~ZinCpBasedAllocator((ZinCpBasedAllocator *)buf);
          return 3;
        }
        std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType>::unordered_map((uint64_t)v25, (uint64_t)v29);
        std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)this + 160, (uint64_t *)v25);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v25);
        if (!v29[896])
        {
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((_QWORD *)this + 20);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v25 = 136315138;
            v26 = "ZinCpBasedAllocator has failed. This generally happens when the constructed CP-model problem is not solvable.";
            _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s\n", v25, 0xCu);
          }
        }
        ZinCpBasedAllocator::~ZinCpBasedAllocator((ZinCpBasedAllocator *)buf);
      }
      v14 = *((_QWORD *)this + 2);
      if (!*(_BYTE *)(v14 + 367) && *(_BYTE *)(v14 + 530))
      {
        ZinCPAllocatorDRAMPostProcessing::ZinCPAllocatorDRAMPostProcessing(buf, *(_QWORD *)(*((_QWORD *)this + 17) + 992), *((_QWORD *)this + 1), (char *)this + 160);
        if (ZinCPAllocatorDRAMPostProcessing::Execute((ZinCPAllocatorDRAMPostProcessing *)buf))
        {
          v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v16)
            ZinCompilerCore::RunCPAllocator(v16, v17, v18, v19, v20, v21, v22, v23);
          ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
          ZinCPAllocatorDRAMPostProcessing::~ZinCPAllocatorDRAMPostProcessing((ZinCPAllocatorDRAMPostProcessing *)buf);
          return 3;
        }
        ZinCPAllocatorDRAMPostProcessing::~ZinCPAllocatorDRAMPostProcessing((ZinCPAllocatorDRAMPostProcessing *)buf);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "after_cp_based_alloc");
      ZinIrCompilerParameters::ZinIrCompilerParameters(v24, *(const ZinIrCompilerParameters **)(*((_QWORD *)this + 1) + 8));
      ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a2, (std::string::size_type)buf, (ZinIrCompilerParameters *)v24, *((_QWORD *)this + 17) + 24, 16);
      ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v24);
      if (v28 < 0)
        operator delete(*(void **)buf);
      kdebug_trace();
    }
  }
  return 0;
}

void sub_206E67824(_Unwind_Exception *a1)
{
  ZinCpBasedAllocator::~ZinCpBasedAllocator((ZinCpBasedAllocator *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunRegisterSpilling(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  const ZinIrCompilerParameters *v4;
  uint64_t v5;
  uint64_t v6;
  char IsStressTestMode;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18[3];
  ZinIrLocalRegAlloc *v19[3];
  _QWORD *v20[3];
  uint64_t v21;

  if (!*(_QWORD *)(*((_QWORD *)this + 19) + 360)
    && !ZinIrRegSpill::IsStressTestMode(*((ZinIrRegSpill **)this + 2), a2))
  {
    return 0;
  }
  kdebug_trace();
  if (*((_QWORD *)a2 + 45) == *((_QWORD *)a2 + 44))
    ZinAssertImpl("Must run scheduler first");
  v5 = *((_QWORD *)this + 19);
  v6 = *((_QWORD *)this + 3);
  IsStressTestMode = ZinIrRegSpill::IsStressTestMode(*((ZinIrRegSpill **)this + 2), v4);
  ZinIrRegSpill::ZinIrRegSpill((uint64_t)v19, (uint64_t)a2, (uint64_t)a2 + 352, v5 + 344, v5, v6, IsStressTestMode);
  if (ZinIrRegSpill::Run(v19))
  {
    v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v8)
      ZinCompilerCore::RunRegisterSpilling(v8, v9, v10, v11, v12, v13, v14, v15);
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    v16 = 3;
  }
  else
  {
    ZinIrScheduleUtil::GetOrderedLayersMap((ZinIrScheduleUtil **)a2, (uint64_t)v18);
    ZinIrControlFlowGraph::SetScheduleMap(a2, v18);
    kdebug_trace();
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v18, v18[1]);
    v16 = 0;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v21);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v20, v20[1]);
  return v16;
}

void sub_206E679DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ZinIrRegSpill::~ZinIrRegSpill((ZinIrRegSpill *)va);
  _Unwind_Resume(a1);
}

void ZinIrRegSpill::~ZinIrRegSpill(ZinIrRegSpill *this)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 48);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
}

uint64_t ZinCompilerCore::RunMultiSegmentSpilling(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  char *v4;
  ZinIrMultiSegmentSpill *v5;
  const ZinIrCompilerParameters *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char IsStressTestMode;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v22[3];
  void **v23[3];
  _QWORD *v24[3];
  uint64_t v25;
  void *__p;
  _BYTE *v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD *v30[2];
  uint64_t (**v31)(ZinIrMultiSegmentSpill *);
  uint64_t v32;
  _QWORD *v33;

  if (*((_QWORD *)a2 + 45) == *((_QWORD *)a2 + 44))
    ZinAssertImpl("Must run scheduler first");
  v4 = (char *)a2 + 352;
  v5 = (ZinIrMultiSegmentSpill *)ZinIrMultiSegmentSpill::ZinIrMultiSegmentSpill(&v31, (char *)a2 + 352, *((_QWORD *)this + 3), *((_QWORD *)this + 2));
  v30[0] = 0;
  v30[1] = 0;
  v29 = v30;
  __p = 0;
  v27 = 0;
  v28 = 0;
  if (ZinIrMultiSegmentSpill::Run(v5, &__p, (uint64_t)&v29))
  {
    v7 = 3;
  }
  else
  {
    if (*((_QWORD *)a2 + 45) == *((_QWORD *)a2 + 44))
      ZinAssertImpl("Must run scheduler first");
    v8 = *((_QWORD *)this + 19);
    v9 = *((_QWORD *)this + 3);
    IsStressTestMode = ZinIrRegSpill::IsStressTestMode(*((ZinIrRegSpill **)this + 2), v6);
    ZinIrRegSpill::ZinIrRegSpill((uint64_t)v23, (uint64_t)a2, (uint64_t)v4, (uint64_t)&v29, v8, v9, IsStressTestMode);
    if (ZinIrRegSpill::Run((ZinIrLocalRegAlloc **)v23))
    {
      v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v11)
        ZinCompilerCore::RunMultiSegmentSpilling(v11, v12, v13, v14, v15, v16, v17, v18);
      ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
      v7 = 3;
    }
    else
    {
      if ((void **)((char *)this + 264) != &__p)
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)this + 264, (char *)__p, (uint64_t)v27, (v27 - (_BYTE *)__p) >> 3);
      ZinIrScheduleUtil::GetOrderedLayersMap((ZinIrScheduleUtil **)a2, (uint64_t)v22);
      ZinIrControlFlowGraph::SetScheduleMap(a2, v22);
      std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v22, v22[1]);
      v7 = 0;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v25);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v24, v24[1]);
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v29, v30[0]);
  v19 = v33;
  v31 = &off_24BFFE058;
  v33 = 0;
  if (v19)
  {
    v20 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::~ZinIntervalTree(v19);
    MEMORY[0x20BD002F8](v20, 0x20C4093837F09);
  }
  v23[0] = (void **)&v32;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](v23);
  return v7;
}

void sub_206E67C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;

  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a10, a11);
  ZinIrRegSpill::~ZinIrRegSpill((ZinIrRegSpill *)&a13);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v27 - 128, *(_QWORD **)(v27 - 120));
  ZinIrMultiSegmentSpill::~ZinIrMultiSegmentSpill((ZinIrMultiSegmentSpill *)(v27 - 104));
  _Unwind_Resume(a1);
}

void ZinIrMultiSegmentSpill::~ZinIrMultiSegmentSpill(ZinIrMultiSegmentSpill *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &off_24BFFE058;
  v1 = (void **)((char *)this + 16);
  std::unique_ptr<ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>>::reset[abi:ne180100]((_QWORD **)this + 5, 0);
  v2 = v1;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t ZinCompilerCore::RunMemCacheAllocation(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v4;
  size_t v5;
  void **v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v21;

  kdebug_trace();
  v4 = *((_QWORD *)this + 2);
  if (!*(_BYTE *)(v4 + 158))
    return 0;
  if ((*(_BYTE *)(*((_QWORD *)this + 17) + 275) & 2) != 0)
  {
    if (*(char *)(v4 + 47) >= 0)
      v5 = *(unsigned __int8 *)(v4 + 47);
    else
      v5 = *(_QWORD *)(v4 + 32);
    v6 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 10);
    if (v21 < 0)
      v6 = (void **)__p[0];
    if (v5)
    {
      v9 = *(char **)(v4 + 24);
      v8 = (char *)(v4 + 24);
      v7 = v9;
      if (v8[23] >= 0)
        v10 = v8;
      else
        v10 = v7;
      memmove(v6, v10, v5);
    }
    strcpy((char *)v6 + v5, ".reg-alloc");
    ZinMemoryHeatMap::CreateMemoryHeatFile(*((ZinMemoryHeatMap **)this + 17), (ZinIrContext *)__p);
    ZinMemoryHeatMap::PrintPerSchedulePressure(*((_QWORD *)this + 17), 1);
    ZinMemoryHeatMap::PrintPerSchedulePressure(*((_QWORD *)this + 17), 0);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  if (!(***((unsigned int (****)(_QWORD, ZinIrControlFlowGraph *))this + 25))(*((_QWORD *)this + 25), a2))
  {
    kdebug_trace();
    return 0;
  }
  v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v11)
    ZinCompilerCore::RunMemCacheAllocation(v11, v12, v13, v14, v15, v16, v17, v18);
  ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
  return 3;
}

void sub_206E67E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinCompilerCore::RunHazardAnalysis(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  void **v8[3];
  _BYTE v9[32];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  void *v14;
  _QWORD v15[56];
  void ***v16;

  if (*(_BYTE *)(**((_QWORD **)this + 1) + 1246))
  {
    kdebug_trace();
    v4 = (_QWORD *)(*((_QWORD *)this + 19) + 104);
    LODWORD(v15[0]) = 2;
    v5 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v4, (int *)v15);
    if (!v5)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    ZinIrMemoryPool::GetSections(v5[3], 4, v15);
    v6 = *(_QWORD *)(v15[1] + 16);
    std::__list_imp<ZinIrSection *>::clear(v15);
    ZinMirL2HazardAnalysis::ZinMirL2HazardAnalysis(v15, *(_QWORD *)(*((_QWORD *)this + 17) + 992), v6, *((_QWORD *)this + 1));
    ZinMirL2HazardAnalysis::Run((ZinMirL2HazardAnalysis *)v15);
    ZinIrScheduleUtil::GetEngineScheduledLayerGroups(a2, v8);
    ZinMirDramHazardAnalysis::ZinMirDramHazardAnalysis(v9, a2, v8, *((_QWORD *)this + 3), (char *)this + 264, (*(_DWORD *)(*((_QWORD *)this + 2) + 96) >> 25) & 1);
    v16 = v8;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    ZinMirDramHazardAnalysis::Run((ZinMirDramHazardAnalysis *)v9);
    kdebug_trace();
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v12);
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)&v11);
    v8[0] = (void **)&v10;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](v8);
    v8[0] = (void **)v9;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](v8);
    ZinMirL2HazardAnalysis::~ZinMirL2HazardAnalysis((ZinMirL2HazardAnalysis *)v15);
  }
  return 0;
}

void sub_206E67FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v35 - 40) = v34;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 40));
  ZinMirL2HazardAnalysis::~ZinMirL2HazardAnalysis((ZinMirL2HazardAnalysis *)&a34);
  _Unwind_Resume(a1);
}

void ZinMirDramHazardAnalysis::~ZinMirDramHazardAnalysis(ZinMirDramHazardAnalysis *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 56);
  v3 = (void **)((char *)this + 32);
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)this;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t ZinCompilerCore::UpdateFinalKernelSHA(const ZinIrHalParameters **this, ZinIrControlFlowGraph *a2)
{
  _QWORD **v3;
  _QWORD *v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer **v6;
  ZinIrOpLayer *v7;
  MirInfoChannelAssignment *ChannelAssignment;
  char v9;
  _QWORD *v10;
  _QWORD **v11;
  BOOL v12;
  unint64_t OCGChannelCountAfterPaddingFromKernel;
  ZinIrCodegenKernelUtil *data[2];
  ZinIrOpLayer **v16;
  ZinIrOpLayer **v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20[2];

  if (!*((_QWORD *)a2 + 43))
    ZinAssertImpl("Must run scheduler first");
  std::map<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>,ScheduleComparator,std::allocator<std::pair<ZinIrBasicBlock * const,std::vector<ZinIrOpLayer *>>>>::map[abi:ne180100]((uint64_t *)&v19, (uint64_t)a2 + 328);
  v3 = v19;
  if (v19 != v20)
  {
    do
    {
      v4 = v3[5];
      data[1] = (ZinIrCodegenKernelUtil *)v3[4];
      v17 = 0;
      v18 = 0;
      v16 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v16, v4, (uint64_t)v3[6], v3[6] - v4);
      v5 = v16;
      v6 = v17;
      if (v16 != v17)
      {
        do
        {
          v7 = *v5;
          if (ZinIrOpLayer::IsNELayer(*v5) && *((_QWORD *)v7 + 17))
          {
            ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)v7 + 33));
            data[0] = (ZinIrCodegenKernelUtil *)MirInfoChannelAssignment::GetOCGSize(ChannelAssignment);
            CC_SHA256_Update((CC_SHA256_CTX *)(*((_QWORD *)v7 + 17) + 52), data, 8u);
            v9 = *(_BYTE *)(*((_QWORD *)v7 + 33) + 2);
            OCGChannelCountAfterPaddingFromKernel = 0;
            OCGChannelCountAfterPaddingFromKernel = ZinIrKernel::GetOCGChannelCountAfterPaddingFromKernel(*((ZinIrKernel **)v7 + 17), data[0], this[3], v9);
            CC_SHA256_Update((CC_SHA256_CTX *)(*((_QWORD *)v7 + 17) + 52), &OCGChannelCountAfterPaddingFromKernel, 8u);
          }
          ++v5;
        }
        while (v5 != v6);
        v5 = v16;
      }
      if (v5)
      {
        v17 = v5;
        operator delete(v5);
      }
      v10 = v3[1];
      if (v10)
      {
        do
        {
          v11 = (_QWORD **)v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD **)v3[2];
          v12 = *v11 == v3;
          v3 = v11;
        }
        while (!v12);
      }
      v3 = v11;
    }
    while (v11 != v20);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v19, v20[0]);
  return 0;
}

void sub_206E68204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::SetBinaryPoint(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  int v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;

  kdebug_trace();
  v4 = *(_DWORD *)(*((_QWORD *)this + 17) + 80);
  v14 = *((_QWORD *)this + 1);
  v15 = v4;
  if (ZinMirPrepareBinaryPoint::Run((ZinMirPrepareBinaryPoint *)&v14, a2))
  {
    v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v5)
      ZinCompilerCore::SetBinaryPoint(v5, v6, v7, v8, v9, v10, v11, v12);
    return 3;
  }
  else
  {
    kdebug_trace();
    return 0;
  }
}

uint64_t ZinCompilerCore::SetSplitRowCompute(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  uint64_t result;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  if (!*(_BYTE *)(*((_QWORD *)this + 3) + 1238))
    return 0;
  ZinMirCacheTensors::ZinMirCacheTensors(v12, (uint64_t)a2, *((_QWORD *)this + 1));
  result = ZinSetSplitRowCompute::Execute((ZinSetSplitRowCompute *)v12);
  if ((_DWORD)result)
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      ZinCompilerCore::SetSplitRowCompute(v4, v5, v6, v7, v8, v9, v10, v11);
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    return 3;
  }
  return result;
}

uint64_t ZinCompilerCore::DumpDebugProfilingInfo(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  int v4;
  ZinComputePerfMetricsWithQuantization *v5;
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  std::string *v22;
  const void *v23;
  std::string *p_p;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  uint64_t v31;
  size_t v32;
  std::string *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  std::string *v48;
  const void *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string v56[32];
  std::string __p;
  std::string v58;
  std::string v59;
  std::string v60;
  void *v61[2];
  std::string::size_type v62;
  std::string v63;
  std::string v64;
  _QWORD *v65[5];

  v4 = *(_DWORD *)(*((_QWORD *)this + 2) + 96);
  if ((v4 & 0x4000) != 0)
  {
    if (*((_QWORD *)a2 + 45) == *((_QWORD *)a2 + 44))
      ZinAssertImpl("Must run scheduler first");
    v5 = (ZinComputePerfMetricsWithQuantization *)ZinComputePerfMetricsWithQuantization::ZinComputePerfMetricsWithQuantization(&v64, (uint64_t)a2 + 352, *((_QWORD *)this + 1));
    v6 = ZinComputePerfMetricsWithQuantization::Execute(v5);
    if (v6)
    {
      v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v7)
        ZinCompilerCore::DumpDebugProfilingInfo(v7, v8, v9, v10, v11, v12, v13, v14);
      ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    }
    else
    {
      v15 = (_QWORD *)(*((_QWORD *)this + 19) + 104);
      LODWORD(v61[0]) = 0;
      v16 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v15, (int *)v61);
      if (!v16)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v17 = v16[3];
      ZinIrHalParameters::GetOperationCondition(*((ZinIrHalParameters **)this + 3), *(double *)(*((_QWORD *)this + 2) + 104), 0xFFFFFFFF, 0xFFFFFFFF, (uint64_t)&v63);
      v18 = *(int *)(*((_QWORD *)this + 17) + 52);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v64);
      ZinVisualization::ZinOpLayerGraphDumpInJson::ZinOpLayerGraphDumpInJson((uint64_t)v61, (uint64_t)a2, v18, (uint64_t)&v63, v17, v19);
      v20 = *((_QWORD *)this + 2);
      if (*(char *)(v20 + 47) >= 0)
        v21 = *(unsigned __int8 *)(v20 + 47);
      else
        v21 = *(_QWORD *)(v20 + 32);
      v22 = &v58;
      std::string::basic_string[abi:ne180100]((uint64_t)&v58, v21 + 29);
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)v58.__r_.__value_.__r.__words[0];
      if (v21)
      {
        if (*(char *)(v20 + 47) >= 0)
          v23 = (const void *)(v20 + 24);
        else
          v23 = *(const void **)(v20 + 24);
        memmove(v22, v23, v21);
      }
      strcpy((char *)v22 + v21, ".zinir_graph_after_reg_spill_");
      ReplaceUnsupportedCharWithUnderscore(*((_QWORD *)this + 17) + 24, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v58, (const std::string::value_type *)p_p, size);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v28 = std::string::append(&v59, ".json", 5uLL);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v61);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      ZinVisualization::ZinOpLayerGraphDumpInJson::~ZinOpLayerGraphDumpInJson((ZinVisualization::ZinOpLayerGraphDumpInJson *)v61);
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v65, v65[1]);
    std::__tree<std::__value_type<long,ZinQuantizationPerfMetrics>,std::__map_value_compare<long,std::__value_type<long,ZinQuantizationPerfMetrics>,std::less<long>,true>,std::allocator<std::__value_type<long,ZinQuantizationPerfMetrics>>>::destroy((uint64_t)&v64, (char *)v64.__r_.__value_.__l.__size_);
    if (v6)
      return 3;
    v4 = *(_DWORD *)(*((_QWORD *)this + 2) + 96);
  }
  if ((v4 & 0x10) != 0)
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v59, (uint64_t)a2);
    v31 = *((_QWORD *)this + 2);
    if (*(char *)(v31 + 47) >= 0)
      v32 = *(unsigned __int8 *)(v31 + 47);
    else
      v32 = *(_QWORD *)(v31 + 32);
    v33 = &v63;
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v32 + 9);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if (v32)
    {
      v36 = *(char **)(v31 + 24);
      v35 = (char *)(v31 + 24);
      v34 = v36;
      if (v35[23] >= 0)
        v37 = v35;
      else
        v37 = v34;
      memmove(v33, v37, v32);
    }
    strcpy((char *)v33 + v32, ".tensors_");
    ReplaceUnsupportedCharWithUnderscore(*((_QWORD *)this + 17) + 24, &v60);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &v60;
    else
      v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      v39 = v60.__r_.__value_.__l.__size_;
    v40 = std::string::append(&v63, (const std::string::value_type *)v38, v39);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    v42 = std::string::append(&v64, ".json", 5uLL);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v62 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)v61 = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v59);
    if (SHIBYTE(v62) < 0)
      operator delete(v61[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "after_reg_spill");
  ZinIrCompilerParameters::ZinIrCompilerParameters(v56, *((const ZinIrCompilerParameters **)this + 2));
  ZinVisualization::CreateLimitedSizeDotGraphsAndLogConditionally((uint64_t)a2, (std::string::size_type)v61, (ZinIrCompilerParameters *)v56, *((_QWORD *)this + 17) + 24, 16);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v56);
  if (SHIBYTE(v62) < 0)
    operator delete(v61[0]);
  v44 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v44 + 121))
  {
    ZinIrHalParameters::GetOperationCondition(*((ZinIrHalParameters **)this + 3), *(double *)(v44 + 104), 0xFFFFFFFF, 0xFFFFFFFF, (uint64_t)&v64);
    v45 = *(int *)(*((_QWORD *)this + 17) + 52);
    *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = 0uLL;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63.__r_.__value_.__l.__size_;
    ZinVisualization::ZinOpLayerGraphDumpInJson::ZinOpLayerGraphDumpInJson((uint64_t)v61, (uint64_t)a2, v45, (uint64_t)&v64, 0, (uint64_t)&v63);
    std::__tree<std::__value_type<long,ZinQuantizationPerfMetrics>,std::__map_value_compare<long,std::__value_type<long,ZinQuantizationPerfMetrics>,std::less<long>,true>,std::allocator<std::__value_type<long,ZinQuantizationPerfMetrics>>>::destroy((uint64_t)&v63, (char *)v63.__r_.__value_.__l.__size_);
    v46 = *((_QWORD *)this + 2);
    if (*(char *)(v46 + 47) >= 0)
      v47 = *(unsigned __int8 *)(v46 + 47);
    else
      v47 = *(_QWORD *)(v46 + 32);
    v48 = &v59;
    std::string::basic_string[abi:ne180100]((uint64_t)&v59, v47 + 31);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v48 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if (v47)
    {
      if (*(char *)(v46 + 47) >= 0)
        v49 = (const void *)(v46 + 24);
      else
        v49 = *(const void **)(v46 + 24);
      memmove(v48, v49, v47);
    }
    strcpy((char *)v48 + v47, ".zinir_graph_final_fusion_info_");
    ReplaceUnsupportedCharWithUnderscore(*((_QWORD *)this + 17) + 24, &v58);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &v58;
    else
      v50 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    else
      v51 = v58.__r_.__value_.__l.__size_;
    v52 = std::string::append(&v59, (const std::string::value_type *)v50, v51);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append(&v60, ".json", 5uLL);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v61);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LOWORD(v60.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Dumped fusion boundaries after Reg Spill to JSON\n", (uint8_t *)&v60, 2u);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    ZinVisualization::ZinOpLayerGraphDumpInJson::~ZinOpLayerGraphDumpInJson((ZinVisualization::ZinOpLayerGraphDumpInJson *)v61);
    v44 = *((_QWORD *)this + 2);
  }
  if ((*(_BYTE *)(v44 + 97) & 8) != 0)
    ZinPerfUtil::ZinDebugPrintPerfEstimateParams((uint64_t)a2, *((_QWORD *)this + 1));
  return 0;
}

void sub_206E689C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  ZinVisualization::ZinOpLayerGraphDumpInJson::~ZinOpLayerGraphDumpInJson((ZinVisualization::ZinOpLayerGraphDumpInJson *)&STACK[0x370]);
  ZinComputePerfMetricsWithQuantization::~ZinComputePerfMetricsWithQuantization((ZinComputePerfMetricsWithQuantization *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ZinComputePerfMetricsWithQuantization::~ZinComputePerfMetricsWithQuantization(ZinComputePerfMetricsWithQuantization *this)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::__tree<std::__value_type<long,ZinQuantizationPerfMetrics>,std::__map_value_compare<long,std::__value_type<long,ZinQuantizationPerfMetrics>,std::less<long>,true>,std::allocator<std::__value_type<long,ZinQuantizationPerfMetrics>>>::destroy((uint64_t)this, *((char **)this + 1));
}

uint64_t ZinCompilerCore::SetTDExecutionTime(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  kdebug_trace();
  if (*(_BYTE *)(*((_QWORD *)this + 3) + 1113)
    && (ZinAnnotateTDExecutionTime::ZinAnnotateTDExecutionTime((uint64_t)v13, (uint64_t)a2, *((_QWORD *)this + 1), 0),
        ZinAnnotateTDExecutionTime::Execute((ZinAnnotateTDExecutionTime *)v13)))
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      ZinCompilerCore::SetTDExecutionTime(v4, v5, v6, v7, v8, v9, v10, v11);
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    return 3;
  }
  else
  {
    kdebug_trace();
    return 0;
  }
}

uint64_t ZinCompilerCore::RunCachePrefetch(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  ZinIrControlFlowGraph *v4;
  ZinIrControlFlowGraph *v5;
  ZinIrControlFlowGraph *v6;
  BOOL v7;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  kdebug_trace();
  if (!*((_BYTE *)this + 232))
  {
    *((_QWORD *)this + 28) = 0;
    *((_BYTE *)this + 232) = 1;
  }
  *((_QWORD *)this + 27) = 0;
  if (!*((_QWORD *)a2 + 43))
    ZinAssertImpl("Must run scheduler first");
  v4 = (ZinIrControlFlowGraph *)*((_QWORD *)a2 + 41);
  if (v4 == (ZinIrControlFlowGraph *)((char *)a2 + 336))
  {
LABEL_12:
    kdebug_trace();
    return 0;
  }
  else
  {
    while (!ZinCachePrefetchDma::Run(*((_QWORD *)this + 26), (unint64_t *)this + 27, (ZinIrOpLayer ***)v4 + 5, (uint64_t *)this + 33))
    {
      v5 = (ZinIrControlFlowGraph *)*((_QWORD *)v4 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(ZinIrControlFlowGraph **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (ZinIrControlFlowGraph *)*((_QWORD *)v4 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
      if (v6 == (ZinIrControlFlowGraph *)((char *)a2 + 336))
        goto LABEL_12;
    }
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinCompilerCore::RunCachePrefetch(v9, v10, v11, v12, v13, v14, v15, v16);
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    return 3;
  }
}

uint64_t ZinCompilerCore::RunKernelBufferControl(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v2;
  uint64_t result;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v2 = **((_QWORD **)this + 1);
  if (!*(_BYTE *)(v2 + 1241))
    return 0;
  if (*((_QWORD *)a2 + 45) == *((_QWORD *)a2 + 44))
    ZinAssertImpl("Must run scheduler first");
  ZinKernelBufferControl::ZinKernelBufferControl(v13, (uint64_t)a2 + 352, v2);
  result = ZinKernelBufferControl::Run((ZinKernelBufferControl *)v13);
  if ((_DWORD)result)
  {
    v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v5)
      ZinCompilerCore::RunKernelBufferControl(v5, v6, v7, v8, v9, v10, v11, v12);
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    return 3;
  }
  return result;
}

uint64_t ZinCompilerCore::RunContextSwitch(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  const ZinIrControlFlowGraph *NumAnesUsed;
  std::string v11[32];
  _QWORD v12[3];
  void **v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  kdebug_trace();
  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 128) && *(_BYTE *)(*((_QWORD *)this + 3) + 1262))
  {
    v4 = (_QWORD *)(*((_QWORD *)this + 19) + 104);
    LODWORD(v13[0]) = 0;
    v5 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v4, (int *)v13);
    if (!v5
      || (v6 = v5[3],
          LODWORD(v13[0]) = 2,
          (v7 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v4, (int *)v13)) == 0))
    {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    v8 = v7[3];
    NumAnesUsed = (const ZinIrControlFlowGraph *)ZinBondedUtils::GetNumAnesUsed(a2, *((_QWORD **)this + 1));
    ZinIrScheduleUtil::GetPerAneEngineScheduledLayerGroups(a2, NumAnesUsed, v17);
    ZinIrMemoryPool::GetSections(v8, 4, v12);
    ZinMirContextSwitch::ZinMirContextSwitch(v13, a2, v17, v6, *(_QWORD *)(v12[1] + 16), *((_QWORD *)this + 1));
    std::__list_imp<ZinIrSection *>::clear(v12);
    ZinMirContextSwitch::Execute((ZinMirContextSwitch *)v13);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v16);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v15);
    v13[0] = (void **)v17;
    std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100](v13);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "after_context_switch_set");
  ZinIrCompilerParameters::ZinIrCompilerParameters(v11, *(const ZinIrCompilerParameters **)(*((_QWORD *)this + 1) + 8));
  ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a2, (std::string::size_type)v13, (ZinIrCompilerParameters *)v11, *((_QWORD *)this + 17) + 24, 0x2000);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v11);
  if (v14 < 0)
    operator delete(v13[0]);
  kdebug_trace();
  return 0;
}

void sub_206E68FC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1 + 88);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1 + 48);
  *(_QWORD *)(v2 - 200) = v2 - 72;
  std::vector<std::vector<std::vector<ZinKernelPosition>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 200));
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::RunComputeAddressTranslationRegisters(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v2;
  uint64_t result;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ZinIrOpLayer ***v13[2];

  v2 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(*(_QWORD *)v2 + 1240))
    return 0;
  if (*((_QWORD *)a2 + 45) == *((_QWORD *)a2 + 44))
    ZinAssertImpl("Must run scheduler first");
  ZinMirCacheTensors::ZinMirCacheTensors(v13, (uint64_t)a2 + 352, v2);
  result = ZinComputeAddressTranslationRegisters::Execute(v13);
  if ((_DWORD)result)
  {
    v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v5)
      ZinCompilerCore::RunComputeAddressTranslationRegisters(v5, v6, v7, v8, v9, v10, v11, v12);
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    return 3;
  }
  return result;
}

uint64_t ZinCompilerCore::BuildComputeProgram(ZinCompilerCore *this)
{
  int CPUSubtype;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  ZinIrTarget *v14;
  std::__shared_weak_count *v15;

  kdebug_trace();
  ZinIrTargetCreator::CreateTargetFromString(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 72, (uint64_t)&v14);
  CPUSubtype = ZinIrTarget::GetCPUSubtype(v14);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_DWORD *)(v3[1] + 332))
    v4 = -17958193;
  else
    v4 = -1091568946;
  ZinObjectGeneration::Make(v3, v4, CPUSubtype, *(unsigned __int8 *)(*((_QWORD *)this + 2) + 532), &v13);
  v5 = v13;
  v13 = 0;
  v6 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v13;
    v13 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  ZinObjectGeneration::SetMemoryPools(*((_QWORD **)this + 30), (_QWORD *)(*((_QWORD *)this + 19) + 104));
  if ((*(unsigned int (**)(_QWORD, char *, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 30) + 16))(*((_QWORD *)this + 30), (char *)this + 144, *((_QWORD *)this + 6), *(unsigned int *)(*((_QWORD *)this + 17) + 52), *(unsigned __int8 *)(*((_QWORD *)this + 17) + 48)))
  {
    ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
    v8 = 3;
  }
  else
  {
    kdebug_trace();
    v8 = 0;
  }
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_206E69244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCore::QualifyOnImbalanceRatio(ZinIrHalParameters ***this, ZinIrControlFlowGraph *a2)
{
  kdebug_trace();
  QualifyNetworkBasedOnImbalanceRatio((uint64_t)a2, this[1]);
  kdebug_trace();
  return 0;
}

uint64_t ZinCompilerCore::DumpLayerStats(ZinCompilerCore *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  float64x2_t v24;
  double v25;
  double v26;
  size_t v27;
  void **v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  std::ios_base *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v55[4];
  void *__p[2];
  char v57;
  __int128 v58;
  uint64x2_t v59;
  __int128 v60;
  float64x2_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65[19];
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int8 *)(v4 + 95);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(v4 + 80);
  if (v5 == 9)
  {
    v7 = v6 >= 0 ? v4 + 72 : *(_QWORD *)(v4 + 72);
    v8 = *(_QWORD *)v7;
    v9 = *(unsigned __int8 *)(v7 + 8);
    if (v8 == 0x30336E2E67343168 && v9 == 49)
    {
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v66[0] = &off_24C000B08;
      v66[1] = &v58;
      v67 = v66;
      v11 = ZinIrControlFlowGraph::TraverseForward(a2, (uint64_t)v66, 1);
      v12 = v67;
      if (v67 == v66)
      {
        v13 = 4;
        v12 = v66;
      }
      else
      {
        if (!v67)
        {
LABEL_17:
          if (v11)
          {
            v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v14)
              ZinCompilerCore::DumpLayerStats(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            v22 = v58;
            v23 = 0.0;
            if ((_QWORD)v58)
            {
              v24 = vdivq_f64(vcvtq_f64_u64(v59), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(unint64_t)v58), 0));
              v25 = (double)(unint64_t)v60 / (double)(unint64_t)v58;
            }
            else
            {
              v24 = 0uLL;
              v25 = 0.0;
            }
            v61 = v24;
            *(double *)&v62 = v25;
            v26 = 0.0;
            if (*((_QWORD *)&v58 + 1))
            {
              v23 = (double)*((unint64_t *)&v58 + 1);
              v26 = (double)*((unint64_t *)&v60 + 1) / (double)*((unint64_t *)&v58 + 1);
            }
            *((double *)&v62 + 1) = v26;
            *(_QWORD *)&v63 = log2(v23);
            *((_QWORD *)&v63 + 1) = log2((double)v22);
            ZinGenerateCoreAnalyticsNetworkStatsV1();
            if ((*(_BYTE *)(*((_QWORD *)this + 2) + 99) & 4) != 0)
            {
              printf("kernel_elements=%llu\n", (_QWORD)v58);
              printf("tensor_elements=%llu\n", *((_QWORD *)&v58 + 1));
              printf("palettized_kernel_elements=%llu\n", v59.i64[0]);
              printf("sparse_kernel_elements=%llu\n", v59.i64[1]);
              printf("quant_kernel_elements=%llu\n", (_QWORD)v60);
              printf("quant_tensor_elements=%llu\n", *((_QWORD *)&v60 + 1));
              printf("PalletizedKernelRatio=%f\n", v61.f64[0]);
              printf("SparseKernelRatio=%f\n", v61.f64[1]);
              printf("QuantKernelRatio=%f\n", *(double *)&v62);
              printf("QuantTensorRatio=%f\n", *((double *)&v62 + 1));
              printf("TensorElementSizeLog2=%f\n", *(double *)&v63);
              printf("KernelElementSizeLog2=%f\n", *((double *)&v63 + 1));
            }
          }
          v4 = *((_QWORD *)this + 2);
          goto LABEL_28;
        }
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
      goto LABEL_17;
    }
  }
LABEL_28:
  if ((*(_BYTE *)(v4 + 99) & 4) == 0)
    goto LABEL_47;
  if (*(char *)(v4 + 47) >= 0)
    v27 = *(unsigned __int8 *)(v4 + 47);
  else
    v27 = *(_QWORD *)(v4 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v27 + 11);
  if (v57 >= 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if (v27)
  {
    v31 = *(char **)(v4 + 24);
    v30 = (char *)(v4 + 24);
    v29 = v31;
    if (v30[23] >= 0)
      v32 = v30;
    else
      v32 = v29;
    memmove(v28, v32, v27);
  }
  strcpy((char *)v28 + v27, "-layers.txt");
  v33 = MEMORY[0x24BEDB840];
  v34 = MEMORY[0x24BEDB840] + 64;
  v35 = (_QWORD *)MEMORY[0x24BEDB7E8];
  v36 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v37 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v65[0] = MEMORY[0x24BEDB840] + 64;
  *(_QWORD *)&v58 = v36;
  *(_QWORD *)((char *)&v58 + *(_QWORD *)(v36 - 24)) = v37;
  v38 = (std::ios_base *)((char *)&v58 + *(_QWORD *)(v58 - 24));
  std::ios_base::init(v38, (char *)&v58 + 8);
  v38[1].__vftable = 0;
  v38[1].__fmtflags_ = -1;
  *(_QWORD *)&v58 = v33 + 24;
  v65[0] = v34;
  MEMORY[0x20BCFFEA8]((char *)&v58 + 8);
  std::ofstream::open();
  v39 = v64;
  if (v64)
  {
    ZinIrGraphReportLayerStructure::ZinIrGraphReportLayerStructure(v55, (uint64_t)a2, (uint64_t)&v58);
    ZinIrGraphReportLayerStructure::Execute((ZinIrGraphReportLayerStructure *)v55);
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    ZinCompilerCore::DumpLayerStats((uint64_t)&v57, (uint64_t)__p, v40, v41, v42, v43, v44, v45);
  }
  *(_QWORD *)&v58 = *v35;
  *(_QWORD *)((char *)&v58 + *(_QWORD *)(v58 - 24)) = v35[3];
  MEMORY[0x20BCFFEB4]((char *)&v58 + 8);
  std::ostream::~ostream();
  MEMORY[0x20BD0022C](v65);
  if (v57 < 0)
  {
    operator delete(__p[0]);
    if (v39)
      goto LABEL_46;
    return 3;
  }
  if (!v39)
    return 3;
LABEL_46:
  v4 = *((_QWORD *)this + 2);
LABEL_47:
  if (*(_BYTE *)(v4 + 100)
    && !ANEDebugInfo::GenerateAndSerializeDebugInfo(*((_QWORD *)this + 1), *(_QWORD *)(*((_QWORD *)this + 30) + 56), *((_QWORD *)this + 17) + 24, a2, *((_QWORD *)this + 6), *((_QWORD *)this + 4)))
  {
    v46 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v46)
      ZinCompilerCore::DumpLayerStats(v46, v47, v48, v49, v50, v51, v52, v53);
    if (*(_BYTE *)(*((_QWORD *)this + 2) + 120))
      ZinIrUnitStatus::SetError(*((CFArrayRef **)this + 7), CFSTR("CompilationFailure"));
  }
  return 0;
}

void sub_206E697B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  v23 = *(_QWORD **)(v21 - 96);
  if (v23 == v20)
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 120);
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinCompilerCore::RunCodeGenObjectGen(ZinCompilerCore *this)
{
  ZinCompilerCore *v1;
  __int128 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  ZinIrContext *v14;
  _QWORD *MemoryPools;
  _QWORD *PrivatePool;
  int32x2_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t Hal;
  _QWORD *v21;
  ZinIrTensor *v22;
  int32x2_t *v23;
  void **v24;
  _QWORD *v25;
  uint64_t v26;
  ZinIrOpLayer **v27;
  ZinIrOpLayer **v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  void **v34;
  void *v35;
  MirInfoChannelAssignment *ChannelAssignment;
  unint64_t NumNeededNEs;
  _BYTE *v38;
  _BYTE *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  ZinIrControlFlowGraph **v53;
  ZinIrContext *v54;
  uint64_t v55;
  int v56;
  int v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  ZinComputeMutableProgramWrapper *ComputeMutableProgram;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int32x2_t v76;
  ZinCompilerCore *v77;
  uint64_t *v78;
  _QWORD *v79;
  ZinIrMemoryPool *v80;
  _QWORD *v81;
  _QWORD *v82;
  int32x2_t *v83;
  int32x2_t *v84;
  uint64_t *v85;
  ZinIrTensor **v86;
  std::string v87;
  uint64_t ShapeDependentTransformMap;
  uint64_t v89;
  uint64_t *v90;
  uint64_t **v91;
  uint64_t *v92;
  int v93;
  void *__p[2];
  std::string::size_type v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  ZinIrTensor *v99;
  std::__shared_weak_count *v100;
  uint64_t *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104[3];
  uint64_t v105;
  uint64_t v106[3];
  uint64_t v107;
  std::string *v108;
  unint64_t v109;
  int32x2_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char v114;
  uint64_t v115;
  __int16 BarIdForBarIdType;
  char v117;
  uint64_t v118;
  __int16 v119;
  char v120;
  unint64_t v121;
  char v122;
  int v123;
  char v124;
  int v125;
  char v126;
  int v127;
  char v128;
  __int128 v129;
  __int128 v130;
  void *v131[6];

  v1 = this;
  LOBYTE(v115) = 0;
  v117 = 0;
  LOBYTE(v118) = 0;
  v120 = 0;
  LOBYTE(v121) = 0;
  v122 = 0;
  LOBYTE(v123) = 0;
  v124 = 0;
  LOBYTE(v125) = 0;
  v126 = 0;
  LOBYTE(v127) = 0;
  v128 = 0;
  v129 = 0u;
  v130 = 0u;
  memset(v131, 0, 24);
  v2 = *(_OWORD *)((char *)this + 216);
  v114 = *((_BYTE *)this + 232);
  v3 = (uint64_t *)((char *)this + 64);
  v113 = v2;
  if (ZinBarUsage::HasBarIdForBarIdType((uint64_t)this + 64, 5))
  {
    v117 = 1;
    v115 = 0;
    BarIdForBarIdType = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 5);
  }
  if (ZinBarUsage::HasBarIdForBarIdType((uint64_t)v3, 6))
  {
    v120 = 1;
    v118 = 0;
    v119 = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 6);
  }
  v4 = *((_QWORD *)v1 + 2);
  v5 = *(unsigned __int8 *)(v4 + 471);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(v4 + 456);
  if (v5 == 7)
  {
    v7 = v6 >= 0 ? (int *)(v4 + 448) : *(int **)(v4 + 448);
    v8 = *v7;
    v9 = *(int *)((char *)v7 + 3);
    v10 = v8 == 1634629956 && v9 == 1667853665;
    if (v10)
    {
      v11 = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 8);
      v12 = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 9);
      v122 = 1;
      v13 = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 10);
      v121 = (v13 << 32) | (ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 11) << 48) | ((unint64_t)v12 << 16) | v11;
      v4 = *((_QWORD *)v1 + 2);
    }
  }
  if (*(float *)(v4 + 388) > 0.0)
  {
    v123 = *(_DWORD *)(v4 + 388);
    v124 = 1;
  }
  if (&v129 != (__int128 *)((char *)v1 + 112))
    std::vector<ZinDynamicOffsetCustomBarCmd>::__assign_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>((uint64_t)&v129, *((_QWORD *)v1 + 14), *((_QWORD *)v1 + 15), (uint64_t)(*((_QWORD *)v1 + 15) - *((_QWORD *)v1 + 14)) >> 6);
  v128 = 1;
  v127 = 0;
  v14 = (ZinIrContext *)*((_QWORD *)v1 + 17);
  v125 = *((_DWORD *)v14 + 21);
  v126 = 1;
  v110.i32[0] = 0;
  v111 = 0u;
  v112 = 0u;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v106[0] = (uint64_t)v106;
  v106[1] = (uint64_t)v106;
  v106[2] = 0;
  MemoryPools = (_QWORD *)ZinIrContext::GetMemoryPools(v14);
  PrivatePool = ZinIrMemoryPools::GetPrivatePool(MemoryPools, 2, 0);
  v80 = (ZinIrMemoryPool *)ZinIrMemoryPools::GetPrivatePool(MemoryPools, 0, 0);
  v105 = 0;
  if (*(_DWORD *)(*((_QWORD *)v1 + 17) + 84) == 1)
  {
    kdebug_trace();
    if (ZinIrContext::AppendShapeDependentTransformMap(*((ZinIrTarget ***)v1 + 17)))
    {
LABEL_94:
      ZinIrUnitStatus::SetError(*((CFArrayRef **)v1 + 7), CFSTR("CompilationFailure"));
LABEL_95:
      v65 = 3;
      goto LABEL_96;
    }
    ZinIrMemoryPool::GetSections((uint64_t)PrivatePool, 4, &v83);
    v76 = v84[2];
    v77 = v1;
    std::__list_imp<ZinIrSection *>::clear(&v83);
    ZinIrMemoryPool::GetSections((uint64_t)v80, 4, &v83);
    v17 = v84[2];
    std::__list_imp<ZinIrSection *>::clear(&v83);
    std::set<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::set[abi:ne180100](v104, *(_QWORD *)&v17 + 64);
    v102 = 0;
    v103 = 0;
    v101 = (uint64_t *)&v102;
    v18 = *(_QWORD **)(*((_QWORD *)v77 + 17) + 992);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v101, 0);
    v102 = 0;
    v103 = 0;
    v101 = (uint64_t *)&v102;
    v19 = (_QWORD *)*v18;
    v79 = v18 + 1;
    if ((_QWORD *)*v18 != v18 + 1)
    {
      v78 = v3;
      do
      {
        v81 = v19;
        Hal = ZinIrTarget::GetHal((ZinIrTarget *)v19[4]);
        v21 = *(_QWORD **)(Hal + 464);
        v82 = (_QWORD *)(Hal + 472);
        if (v21 != (_QWORD *)(Hal + 472))
        {
          do
          {
            v22 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v21[4] + 32))(v21[4], 0, 0);
            ZinIrTensor::GetTensorFamily(v22, (uint64_t)&v83);
            v24 = (void **)v83;
            v23 = v84;
            if (v83 != v84)
            {
              do
              {
                v25 = *v24;
                if (!*v24)
                  ZinAssertImpl("Const tensor nullptr \n");
                v26 = v25[12];
                v27 = *(ZinIrOpLayer ***)(v26 + 112);
                v28 = *(ZinIrOpLayer ***)(v26 + 120);
                while (v27 != v28)
                {
                  if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)*v27 + 120))(*v27))
                    goto LABEL_37;
                  (*(void (**)(void **__return_ptr))(*(_QWORD *)*v27 + 128))(__p);
                  v29 = __p[0];
                  v30 = (std::__shared_weak_count *)__p[1];
                  if (__p[1])
                  {
                    v31 = (unint64_t *)((char *)__p[1] + 8);
                    do
                      v32 = __ldaxr(v31);
                    while (__stlxr(v32 - 1, v31));
                    if (!v32)
                    {
                      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                      std::__shared_weak_count::__release_weak(v30);
                    }
                  }
                  if (v29 == v25)
                  {
                    if (!ZinIrOpLayer::IsNELayer(*v27))
                      ZinAssertImpl("Only an NE layer can have a kernel.");
                    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)*v27 + 33));
                    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
                    (*(void (**)(ZinIrTensor **__return_ptr))(*(_QWORD *)*v27 + 128))(&v99);
                    ZinIrTensor::GetTensorKernelNESymbols(v99, __p);
                    v39 = __p[0];
                    v38 = __p[1];
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    v40 = v100;
                    if (v100)
                    {
                      p_shared_owners = (unint64_t *)&v100->__shared_owners_;
                      do
                        v42 = __ldaxr(p_shared_owners);
                      while (__stlxr(v42 - 1, p_shared_owners));
                      if (!v42)
                      {
                        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                        std::__shared_weak_count::__release_weak(v40);
                      }
                    }
                    if (NumNeededNEs > (v38 - v39) >> 3)
                      ZinAssertImpl("Each enabled consumer core must have symbol");
                    (*(void (**)(ZinIrTensor **__return_ptr))(*(_QWORD *)*v27 + 128))(&v99);
                    ZinIrTensor::GetTensorKernelNESymbols(v99, __p);
                    v43 = v100;
                    if (v100)
                    {
                      v44 = (unint64_t *)&v100->__shared_owners_;
                      do
                        v45 = __ldaxr(v44);
                      while (__stlxr(v45 - 1, v44));
                      if (!v45)
                      {
                        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                        std::__shared_weak_count::__release_weak(v43);
                      }
                    }
                    v47 = (uint64_t *)__p[0];
                    v46 = (uint64_t *)__p[1];
                    if (__p[0] != __p[1])
                    {
                      do
                      {
                        std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(&v101, v47, v47);
                        ++v47;
                      }
                      while (v47 != v46);
                      v47 = (uint64_t *)__p[0];
                    }
                    if (v47)
                    {
                      __p[1] = v47;
                      operator delete(v47);
                    }
                  }
                  else
                  {
LABEL_37:
                    v33 = v25[13];
                    if (!v33 || (v34 = *(void ***)(v33 + 40), v34 == *(void ***)(v33 + 48)))
                      v35 = 0;
                    else
                      v35 = *v34;
                    __p[0] = v35;
                    std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(&v101, (uint64_t *)__p, (uint64_t *)__p);
                  }
                  ++v27;
                }
                ++v24;
              }
              while (v24 != (void **)v23);
              v24 = (void **)v83;
            }
            if (v24)
            {
              v84 = (int32x2_t *)v24;
              operator delete(v24);
            }
            v48 = (_QWORD *)v21[1];
            if (v48)
            {
              do
              {
                v49 = v48;
                v48 = (_QWORD *)*v48;
              }
              while (v48);
            }
            else
            {
              do
              {
                v49 = (_QWORD *)v21[2];
                v10 = *v49 == (_QWORD)v21;
                v21 = v49;
              }
              while (!v10);
            }
            v21 = v49;
          }
          while (v49 != v82);
        }
        v50 = v81;
        v51 = (_QWORD *)v81[1];
        v3 = v78;
        if (v51)
        {
          do
          {
            v52 = v51;
            v51 = (_QWORD *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            v52 = (_QWORD *)v50[2];
            v10 = *v52 == (_QWORD)v50;
            v50 = v52;
          }
          while (!v10);
        }
        v19 = v52;
      }
      while (v52 != v79);
    }
    v53 = *(ZinIrControlFlowGraph ***)(*((_QWORD *)v77 + 17) + 992);
    v83 = (int32x2_t *)*((_QWORD *)v77 + 6);
    v84 = (int32x2_t *)v53;
    v85 = v3;
    ZinIrControlFlowGraph::GetLiveOutLayers(v53, (uint64_t)&v99);
    v86 = &v99;
    v1 = v77;
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)ZinIrBindings::GetLiveIOInfoMap(*((_QWORD *)v77 + 18), 1);
    v87.__r_.__value_.__l.__size_ = (std::string::size_type)ZinIrBindings::GetLiveIOInfoMap(*((_QWORD *)v77 + 18), 0);
    v54 = (ZinIrContext *)*((_QWORD *)v77 + 17);
    if (*((_DWORD *)v54 + 21) == 1)
    {
      v55 = (*(uint64_t (**)(ZinCompilerCore *))(*(_QWORD *)v77 + 40))(v77);
      v54 = (ZinIrContext *)*((_QWORD *)v77 + 17);
    }
    else
    {
      v55 = 0;
    }
    v87.__r_.__value_.__r.__words[2] = v55;
    ShapeDependentTransformMap = ZinIrContext::GetShapeDependentTransformMap(v54);
    v89 = *(_QWORD *)&v76 + 64;
    v90 = v104;
    v91 = &v101;
    __p[0] = 0;
    __p[1] = 0;
    v95 = 0;
    AOTMetadataGen::ZinAneAOTMetadataGen((uint64_t)v80, (uint64_t)&v83, (uint64_t)__p, &v105);
    v57 = v56;
    if (v56)
    {
      ZinIrUnitStatus::SetError(*((CFArrayRef **)v77 + 7), CFSTR("CompilationFailure"));
    }
    else
    {
      v58 = v108;
      if ((unint64_t)v108 >= v109)
      {
        v60 = (std::string *)std::vector<ZinIrSymbolData>::__push_back_slow_path<ZinIrSymbolData const&>(&v107, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v95) < 0)
        {
          std::string::__init_copy_ctor_external(v108, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v59 = *(_OWORD *)__p;
          v108->__r_.__value_.__r.__words[2] = v95;
          *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
        }
        v61 = v96;
        v62 = v97;
        *(_OWORD *)&v58[2].__r_.__value_.__r.__words[1] = v98;
        *(_OWORD *)&v58[1].__r_.__value_.__r.__words[2] = v62;
        *(_OWORD *)&v58[1].__r_.__value_.__l.__data_ = v61;
        v60 = v58 + 3;
      }
      v108 = v60;
      kdebug_trace();
    }
    if (SHIBYTE(v95) < 0)
      operator delete(__p[0]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v99, v100);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v101, v102);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v104, (_QWORD *)v104[1]);
    if (v57)
      goto LABEL_95;
  }
  kdebug_trace();
  v63 = *((_QWORD *)v1 + 17);
  ComputeMutableProgram = (ZinComputeMutableProgramWrapper *)ZinObjectGeneration::GetComputeMutableProgram(*((ZinObjectGeneration **)v1 + 30));
  if (ZinCodeGeneration(v63, ComputeMutableProgram, v80, *(_DWORD *)(*((_QWORD *)v1 + 2) + 96), (uint64_t)v1 + 264, *((CFArrayRef **)v1 + 32), (uint16x4_t *)&v113, &v110, (uint64_t)&v107, v106))goto LABEL_94;
  if (HIDWORD(v112))
    ZinGenerateCoreAnalyticsTdLatencyOverflow();
  kdebug_trace();
  kdebug_trace();
  if (*(_BYTE *)(*((_QWORD *)v1 + 2) + 532))
  {
    if (v114)
      v114 = 0;
    if (v117)
      v117 = 0;
    if (v120)
      v120 = 0;
    if (v122)
      v122 = 0;
    if (v124)
      v124 = 0;
    if (v128)
      v128 = 0;
    std::vector<ZinDynamicOffsetCustomBarCmd>::__assign_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd const*>((uint64_t)&v129, 0, 0, 0);
    *((_QWORD *)&v130 + 1) = 0;
    std::vector<ThreadModeledPerformance>::__assign_with_size[abi:ne180100]<ThreadModeledPerformance const*,ThreadModeledPerformance const*>((char *)v131, 0, 0, 0);
  }
  v83 = &v110;
  v84 = (int32x2_t *)&v113;
  v85 = &v107;
  v67 = *((_QWORD *)v1 + 17);
  v68 = *(_QWORD *)(v67 + 992);
  if (*(_QWORD *)(v68 + 360) == *(_QWORD *)(v68 + 352))
    ZinAssertImpl("Must run scheduler first");
  v86 = (ZinIrTensor **)(v68 + 352);
  if (*(char *)(v67 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)(v67 + 24), *(_QWORD *)(v67 + 32));
    v67 = *((_QWORD *)v1 + 17);
  }
  else
  {
    v69 = *(_OWORD *)(v67 + 24);
    v87.__r_.__value_.__r.__words[2] = *(_QWORD *)(v67 + 40);
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v69;
  }
  LOBYTE(ShapeDependentTransformMap) = *(_BYTE *)(v67 + 48);
  v89 = v105;
  v70 = ZinIrTarget::GetHal(*(ZinIrTarget **)(v67 + 160));
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
  v72 = *((_QWORD *)v1 + 17);
  v90 = (uint64_t *)v71;
  v91 = (uint64_t **)(v72 + 176);
  v92 = v106;
  v93 = *(_DWORD *)(v72 + 52);
  if ((*(unsigned int (**)(_QWORD, int32x2_t **, uint64_t, _QWORD, _QWORD))(**((_QWORD **)v1 + 30) + 24))(*((_QWORD *)v1 + 30), &v83, (uint64_t)v1 + 144, *((_QWORD *)v1 + 6), *((_QWORD *)v1 + 32)))
  {
    ZinIrUnitStatus::SetError(*((CFArrayRef **)v1 + 7), CFSTR("CompilationFailure"));
    v65 = 3;
  }
  else
  {
    if (ZinBarUsage::HasBarIdForBarIdType((uint64_t)v3, 2))
    {
      v73 = *(_QWORD *)(*((_QWORD *)v1 + 17) + 72);
      v74 = ZinBarUsage::GetBarIdForBarIdType((uint64_t)v3, 2);
      ZinIrConstManager::SetMutableBarId(v73, v74);
    }
    v75 = *((_QWORD *)v1 + 2);
    if (*(_BYTE *)(v75 + 102)
      && !ANEAnalytics::DumpAnalyticsBufferToFile(*(_QWORD *)(*((_QWORD *)v1 + 30) + 56), *((_QWORD *)v1 + 17) + 24, v75 + 24))
    {
      ZinIrUnitStatus::SetError(*((CFArrayRef **)v1 + 7), CFSTR("CompilationFailure"));
    }
    kdebug_trace();
    v65 = 0;
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
LABEL_96:
  std::__list_imp<std::unique_ptr<ZinOperation>>::clear(v106);
  v83 = (int32x2_t *)&v107;
  std::vector<ZinIrSymbolData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  if (v131[0])
  {
    v131[1] = v131[0];
    operator delete(v131[0]);
  }
  v83 = (int32x2_t *)&v129;
  std::vector<ZinDynamicOffsetCustomBarCmd>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  return v65;
}

void sub_206E6A33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  if (a38 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a45, (_QWORD *)a46);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a48, (_QWORD *)a49);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a51, (_QWORD *)a52);
  std::__list_imp<std::unique_ptr<ZinOperation>>::clear(&a55);
  a55 = (uint64_t)&a58;
  std::vector<ZinIrSymbolData>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  ThreadArgumentInfo::~ThreadArgumentInfo((ThreadArgumentInfo *)&a66);
  _Unwind_Resume(a1);
}

void ThreadArgumentInfo::~ThreadArgumentInfo(ThreadArgumentInfo *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 112);
  std::vector<ZinDynamicOffsetCustomBarCmd>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t ZinCompilerCore::SetLiveIOAttributes(ZinCompilerCore *this)
{
  uint64_t v2;
  int SinglePlaneUncompressedDescriptor;
  uint64_t v4;
  int MultiPlaneUncompressedDescriptor;
  int CompressedDescriptor;
  const __CFString *v7;
  uint64_t v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int LiveInParamDescriptor;
  _QWORD **v15;
  _QWORD *v16[2];
  _QWORD **v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD *v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v26 = &v27;
  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = (uint64_t *)&v24;
  v20 = &v21;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  v16[1] = 0;
  v17 = &v18;
  v15 = v16;
  v16[0] = 0;
  v2 = *((_QWORD *)this + 6);
  SinglePlaneUncompressedDescriptor = ZinIrBindings::GetSinglePlaneUncompressedDescriptor(*((_QWORD *)this + 18), 0, (uint64_t)&v26, &v23);
  v4 = *((_QWORD *)this + 7);
  if (SinglePlaneUncompressedDescriptor)
    goto LABEL_4;
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneLinearIODescriptor>(*(_QWORD *)(v4 + 40), 0, &v26, v2);
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneCircularIODescriptor>(*(_QWORD *)(*((_QWORD *)this + 7) + 40), 0, &v23, v2);
  MultiPlaneUncompressedDescriptor = ZinIrBindings::GetMultiPlaneUncompressedDescriptor(*((_QWORD *)this + 18), 0, (uint64_t)&v20);
  v4 = *((_QWORD *)this + 7);
  if (MultiPlaneUncompressedDescriptor)
    goto LABEL_4;
  ZinIrNetworkStatus::AddLiveIO<ZinMultiPlaneLinearIODescriptor>(*(_QWORD *)(v4 + 40), 0, &v20, v2);
  CompressedDescriptor = ZinIrBindings::GetCompressedDescriptor(*((_QWORD *)this + 18), 0, (uint64_t)&v17);
  v4 = *((_QWORD *)this + 7);
  if (CompressedDescriptor)
    goto LABEL_4;
  ZinIrNetworkStatus::AddLiveIO<ZinTiledCompressedIODescriptor>(*(_QWORD *)(v4 + 40), 0, &v17, v2);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v26, v27);
  v27 = 0;
  v28 = 0;
  v26 = &v27;
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v23, v24);
  v24 = 0;
  v25 = 0;
  v23 = (uint64_t *)&v24;
  v10 = ZinIrBindings::GetSinglePlaneUncompressedDescriptor(*((_QWORD *)this + 18), 2, (uint64_t)&v26, &v23);
  v4 = *((_QWORD *)this + 7);
  if (v10)
  {
    v7 = CFSTR("InvalidState");
    goto LABEL_5;
  }
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneLinearIODescriptor>(*(_QWORD *)(v4 + 40), 2, &v26, v2);
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneCircularIODescriptor>(*(_QWORD *)(*((_QWORD *)this + 7) + 40), 2, &v23, v2);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v26, v27);
  v27 = 0;
  v28 = 0;
  v26 = &v27;
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v23, v24);
  v24 = 0;
  v25 = 0;
  v23 = (uint64_t *)&v24;
  v11 = ZinIrBindings::GetSinglePlaneUncompressedDescriptor(*((_QWORD *)this + 18), 1, (uint64_t)&v26, &v23);
  v4 = *((_QWORD *)this + 7);
  if (v11)
    goto LABEL_11;
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneLinearIODescriptor>(*(_QWORD *)(v4 + 40), 1, &v26, v2 + 24);
  ZinIrNetworkStatus::AddLiveIO<ZinSinglePlaneCircularIODescriptor>(*(_QWORD *)(*((_QWORD *)this + 7) + 40), 1, &v23, v2 + 24);
  std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy((uint64_t)&v20, v21);
  v21 = 0;
  v22 = 0;
  v20 = &v21;
  v12 = ZinIrBindings::GetMultiPlaneUncompressedDescriptor(*((_QWORD *)this + 18), 1, (uint64_t)&v20);
  v4 = *((_QWORD *)this + 7);
  if (v12)
  {
LABEL_11:
    v7 = CFSTR("InvalidOutput");
    goto LABEL_5;
  }
  ZinIrNetworkStatus::AddLiveIO<ZinMultiPlaneLinearIODescriptor>(*(_QWORD *)(v4 + 40), 1, &v20, v2 + 24);
  std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy((uint64_t)&v17, v18);
  v18 = 0;
  v19 = 0;
  v17 = &v18;
  v13 = ZinIrBindings::GetCompressedDescriptor(*((_QWORD *)this + 18), 1, (uint64_t)&v17);
  v4 = *((_QWORD *)this + 7);
  if (v13)
  {
LABEL_4:
    v7 = CFSTR("InvalidInput");
  }
  else
  {
    ZinIrNetworkStatus::AddLiveIO<ZinTiledCompressedIODescriptor>(*(_QWORD *)(v4 + 40), 1, &v17, v2 + 24);
    LiveInParamDescriptor = ZinIrBindings::GetLiveInParamDescriptor(*((_QWORD *)this + 18), (uint64_t)&v15);
    v4 = *((_QWORD *)this + 7);
    if (!LiveInParamDescriptor)
    {
      ZinIrNetworkStatus::AddLiveInputParam(*(_QWORD *)(v4 + 40), &v15, v2);
      v8 = 0;
      goto LABEL_6;
    }
    v7 = CFSTR("InvalidInputParam");
  }
LABEL_5:
  ZinIrUnitStatus::SetError((CFArrayRef *)v4, v7);
  v8 = 3;
LABEL_6:
  std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::destroy((uint64_t)&v15, v16[0]);
  std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy((uint64_t)&v17, v18);
  std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy((uint64_t)&v20, v21);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v23, v24);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v26, v27);
  return v8;
}

void sub_206E6A858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, char a19, _QWORD *a20)
{
  uint64_t v20;

  std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy((uint64_t)&a16, a17);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy(v20 - 72, *(_QWORD **)(v20 - 64));
  _Unwind_Resume(a1);
}

void ZinMirPEReductionAccumulationRetention::~ZinMirPEReductionAccumulationRetention(ZinMirPEReductionAccumulationRetention *this)
{
  void **v2;

  v2 = (void **)((char *)this + 64);
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((_QWORD *)this + 3) = off_24C01FBB0;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

uint64_t std::vector<ZinDynamicOffsetCustomBarCmd>::__assign_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    std::vector<ZinDynamicOffsetCustomBarCmd>::__vdeallocate((void **)a1);
    if (a4 >> 58)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 5;
    if (v10 >> 5 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<ZinDynamicOffsetCustomBarCmd>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6;
  if (v14 < a4)
  {
    v15 = a2 + (v14 << 6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *>((uint64_t)&v20, a2, v15, (uint64_t)v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *>((uint64_t)&v21, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v19 = v18 - 64;
      result = std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table(v18 - 56);
      v18 = v19;
    }
    while (v19 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_206E6AA38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206E6AA40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 24;
  do
  {
    v7 = v6 - 24;
    *(_QWORD *)a4 = *(_QWORD *)(v6 - 24);
    if (a4 != v6 - 24)
    {
      *(_DWORD *)(a4 + 40) = *(_DWORD *)(v6 + 16);
      std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,void *> *>>((_QWORD *)(a4 + 8), *(uint64_t **)v6, 0);
    }
    v8 = *(_QWORD *)(v6 + 24);
    *(_BYTE *)(a4 + 56) = *(_BYTE *)(v6 + 32);
    *(_QWORD *)(a4 + 48) = v8;
    a4 += 64;
    v6 += 64;
  }
  while (v7 + 64 != v5);
  return v5;
}

void std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  BOOL v9;
  void **v10;
  unint64_t v11;
  _QWORD *inserted;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        *((_DWORD *)v8 + 4) = *((_DWORD *)v4 + 4);
        *((_DWORD *)v8 + 6) = *((_DWORD *)v4 + 6);
        std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
        v8[7] = (void *)v4[7];
        v10 = (void **)*v8;
        v11 = *((int *)v8 + 4);
        v8[1] = (void *)v11;
        inserted = (_QWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v11, (_DWORD *)v8 + 4);
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_perform(a1, v8, inserted);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__emplace_multi<std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor> const&>(a1, (uint64_t)(v4 + 2));
    v4 = (uint64_t *)*v4;
  }
}

void sub_206E6ABD8(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_206E6ABF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__emplace_multi<std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor> const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  _DWORD *v5;
  _QWORD *inserted;
  _QWORD v8[3];

  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__construct_node<std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor> const&>((uint64_t)a1, a2, (uint64_t)v8);
  v3 = (_QWORD *)v8[0];
  v5 = (_DWORD *)(v8[0] + 16);
  v4 = *(int *)(v8[0] + 16);
  *(_QWORD *)(v8[0] + 8) = v4;
  inserted = (_QWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v4, v5);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__node_insert_multi_perform(a1, v3, inserted);
  return v3;
}

void sub_206E6AC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::__construct_node<std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 16;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  result = std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor>::pair[abi:ne180100]((uint64_t)(v6 + 2), a2);
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = *((int *)v6 + 4);
  return result;
}

void sub_206E6ACF4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinIrSymbolData>::__push_back_slow_path<ZinIrSymbolData const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[2];
  std::string *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v21 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::TD>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[72 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v19 = v11;
  v20 = &v10[72 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v19;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v13 = &v10[72 * v4];
  v14 = *(__int128 *)((char *)a2 + 56);
  v15 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)(v13 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(v13 + 24) = v15;
  *(_OWORD *)(v13 + 56) = v14;
  v19 = v11 + 3;
  std::vector<ZinIrSymbolData>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<ZinIrSymbolData>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_206E6AE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinIrSymbolData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinIrSymbolData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>,std::reverse_iterator<ZinIrSymbolData*>,std::reverse_iterator<ZinIrSymbolData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>,std::reverse_iterator<ZinIrSymbolData*>,std::reverse_iterator<ZinIrSymbolData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      v11 = *(_OWORD *)(a3 - 48);
      v12 = *(_OWORD *)(a3 - 16);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v12;
      *(_OWORD *)(v9 - 48) = v11;
      v9 -= 72;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ZinIrSymbolData>,std::reverse_iterator<ZinIrSymbolData*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 72;
  }
}

uint64_t std::__split_buffer<ZinIrSymbolData>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<ZinIrSymbolData>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<ZinIrSymbolData>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 9;
      *(_QWORD *)(a1 + 16) = v2 - 9;
      if (*((char *)v2 - 49) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<ZinDynamicOffsetCustomBarCmd>::__assign_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6)
  {
    std::vector<ZinDynamicOffsetCustomBarCmd>::__vdeallocate((void **)a1);
    if (a4 >> 58)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 5;
    if (v10 >> 5 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<ZinDynamicOffsetCustomBarCmd>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 6;
  if (v14 < a4)
  {
    v15 = a2 + (v14 << 6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *>((uint64_t)&v20, a2, v15, (uint64_t)v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd*>(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *,ZinDynamicOffsetCustomBarCmd *>((uint64_t)&v21, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v19 = v18 - 64;
      result = std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table(v18 - 56);
      v18 = v19;
    }
    while (v19 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_206E6B1C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206E6B1D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinDynamicOffsetCustomBarCmd>,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd const*,ZinDynamicOffsetCustomBarCmd*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = a2 + v7;
      *(_QWORD *)(a4 + v7) = *(_QWORD *)(a2 + v7);
      std::unordered_map<ZinIrDimension,ZinLiveInputParamDescriptor>::unordered_map(a4 + v7 + 8, a2 + v7 + 8);
      v10 = *(_QWORD *)(a2 + v7 + 48);
      *(_BYTE *)(v8 + 56) = *(_BYTE *)(a2 + v7 + 56);
      *(_QWORD *)(v8 + 48) = v10;
      v7 += 64;
    }
    while (v9 + 64 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206E6B25C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table(v4 + v2);
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<ThreadModeledPerformance>::__assign_with_size[abi:ne180100]<ThreadModeledPerformance const*,ThreadModeledPerformance const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(_QWORD *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x249249249249249)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x124924924924924)
      v12 = 0x249249249249249;
    else
      v12 = v11;
    result = std::vector<ThreadModeledPerformance>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 4) >= a4)
    goto LABEL_16;
  v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<ThreadModeledPerformance>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinRtProcedure>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void std::__list_imp<std::unique_ptr<ZinOperation>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v5 = v3[2];
        v3[2] = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
}

void std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C000B08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C000B08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrKernel ***a3)
{
  ZinIrKernel **v4;
  char v5;
  uint64_t v6;
  uint64_t ElementCount;
  ZinIrKernel *v8;
  uint64_t v9;
  int WeightFormat;
  uint64_t v11;
  void *__p;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a3;
  __p = 0;
  v14 = 0;
  v15 = 0;
  if ((ZinIrOpLayer::IsNoOp((ZinIrOpLayer *)v4, (uint64_t *)&__p) & 1) != 0)
  {
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v5 = (*((uint64_t (**)(ZinIrKernel **))*v4 + 14))(v4);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
    if ((v5 & 1) == 0)
    {
      v6 = (*((uint64_t (**)(ZinIrKernel **, _QWORD, _QWORD))*v4 + 4))(v4, 0, 0);
      ElementCount = ZinTensorDimensions::GetElementCount((ZinTensorDimensions *)(v6 + 48));
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) += ElementCount;
      if (ZinIrOpLayer::IsTensorFmtQuantized((ZinIrOpLayer *)v4))
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) += ElementCount;
      v8 = v4[17];
      if (v8)
      {
        ZinIrKernel::GetBiasDimensions(v8, (uint64_t)&__p);
        v9 = (_QWORD)v14 * (_QWORD)__p * v15 * v16 * v17;
        **(_QWORD **)(a1 + 8) += v9;
        WeightFormat = ZinIrKernel::GetWeightFormat(v4[17]);
        if ((WeightFormat - 1) <= 1)
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) += v9;
        if (ZinKernelFormatIsPalette(WeightFormat))
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) += v9;
        v11 = *((_QWORD *)v4[17] + 73);
        if (v11 && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v11 + 136) + 184))(*(_QWORD *)(v11 + 136)))
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) += v9;
      }
    }
  }
  return 0;
}

void sub_206E6B690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinCompilerCore::DumpLayerStats(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t *std::set<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_206E6B730(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrSymbol *,std::__tree_node<ZinIrSymbol *,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_hint_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_hint_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__find_equal<ZinIrSymbol *>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__find_equal<ZinIrSymbol *>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  char v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;

  v9 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_18;
  v11 = *a5;
  v12 = a2[4];
  if (*a5)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13)
  {
    v15 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v11 + 160), (void **)(v12 + 160));
    if ((v15 & 0x80) == 0)
    {
      v12 = a2[4];
      v11 = *a5;
      if (!v12)
        goto LABEL_25;
      goto LABEL_15;
    }
LABEL_18:
    v16 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v18 = a2;
      if (v16)
        goto LABEL_45;
    }
    else
    {
      if (v16)
      {
        v17 = (_QWORD *)*a2;
        do
        {
          v18 = v17;
          v17 = (_QWORD *)v17[1];
        }
        while (v17);
      }
      else
      {
        v22 = a2;
        do
        {
          v18 = (_QWORD *)v22[2];
          v13 = *v18 == (_QWORD)v22;
          v22 = v18;
        }
        while (v13);
      }
      v23 = v18[4];
      v24 = *a5;
      if (v23)
        v25 = v24 == 0;
      else
        v25 = 1;
      if (!v25)
      {
        v27 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v23 + 160), (void **)(v24 + 160));
        if ((v27 & 0x80) == 0)
          return std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__find_equal<ZinIrSymbol *>((uint64_t)a1, a3, a5);
        if (!*a2)
          goto LABEL_49;
LABEL_45:
        *a3 = v18;
        return v18 + 1;
      }
      if (v23)
        v26 = v24 == 0;
      else
        v26 = 0;
      if (!v26)
        return std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__find_equal<ZinIrSymbol *>((uint64_t)a1, a3, a5);
      if (v16)
        goto LABEL_45;
    }
LABEL_49:
    *a3 = a2;
    return a2;
  }
  if (v11)
    v14 = v12 == 0;
  else
    v14 = 0;
  if (v14)
    goto LABEL_18;
  if (!v12)
    goto LABEL_25;
LABEL_15:
  if (v11)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v12 + 160), (void **)(v11 + 160)) & 0x80) != 0)
    {
LABEL_27:
      a4 = a2 + 1;
      v19 = a2[1];
      if (v19)
      {
        v20 = (_QWORD *)a2[1];
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        v29 = a2;
        do
        {
          v21 = (_QWORD *)v29[2];
          v13 = *v21 == (_QWORD)v29;
          v29 = v21;
        }
        while (!v13);
      }
      if (v21 == v9)
        goto LABEL_64;
      v30 = *a5;
      v31 = v21[4];
      if (*a5)
        v32 = v31 == 0;
      else
        v32 = 1;
      if (v32)
      {
        if (v30 && !v31)
          goto LABEL_64;
      }
      else
      {
        v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v30 + 160), (void **)(v31 + 160));
        if (v33 < 0)
        {
          v19 = *a4;
LABEL_64:
          if (v19)
          {
            *a3 = v21;
            return v21;
          }
          else
          {
            *a3 = a2;
          }
          return a4;
        }
      }
      return std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__find_equal<ZinIrSymbol *>((uint64_t)a1, a3, a5);
    }
    goto LABEL_31;
  }
LABEL_25:
  if (v12 && !v11)
    goto LABEL_27;
LABEL_31:
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinSinglePlaneLinearIODescriptor>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinSinglePlaneLinearIODescriptor>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinMultiPlaneLinearIODescriptor>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinMultiPlaneLinearIODescriptor>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  std::vector<ZinPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinTiledCompressedIODescriptor>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinTiledCompressedIODescriptor>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  std::vector<ZinTiledCompressedPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<ZinTiledCompressedPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,WeightFileProperties>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ZinCompilerCore::OptimizeOpLayerGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunMirPrepareIr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunMirBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunTaskScheduler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::ValidateMirInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunPieceGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunCPAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunRegisterSpilling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunMultiSegmentSpilling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunMemCacheAllocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::SetBinaryPoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ZinCompilerCore::SetBinaryPoint(): Internal Error - Failed to propagate binary point values to NE layers!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinCompilerCore::SetSplitRowCompute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::DumpDebugProfilingInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Generating perf metrics with quantization configurations failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinCompilerCore::SetTDExecutionTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunCachePrefetch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunKernelBufferControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::RunComputeAddressTranslationRegisters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinCompilerCore::DumpLayerStats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Layer2TD mapping is incorrect.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s file creation is failed!\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "CoreAnalytics data collection failed.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

BOOL ZinIrOptTreeCollapser::IsTreeRoot(ZinIrOptTreeCollapser *this, ZinIrOpLayer *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  if (*(_QWORD *)(*((_QWORD *)this + 8) + 8) != 0x100000005)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v5, *((const void **)this + 14), *((_QWORD *)this + 15), (uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 3);
  if (v6 - v5 == 8)
  {
    v2 = *(_QWORD *)(*(_QWORD *)v5 + 64);
    v3 = *(_DWORD *)(v2 + 8) != 5 || *(_DWORD *)(v2 + 12) != 1;
  }
  else
  {
    v3 = 1;
    if (!v5)
      return v3;
  }
  v6 = v5;
  operator delete(v5);
  return v3;
}

void ZinIrOptTreeCollapser::GetTreeNodes(ZinIrOptTreeCollapser *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD **v10;
  _QWORD *v11;
  _QWORD **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD **v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD **v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v35[2];
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  uint64_t *v39;
  _QWORD *v40[2];
  uint64_t v41[2];

  v41[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v40[0] = 0;
  v40[1] = 0;
  v39 = (uint64_t *)v40;
  v38 = 0u;
  memset(v37, 0, sizeof(v37));
  v41[0] = (uint64_t)this;
  std::list<ZinIrOpLayer *>::list(v35, (uint64_t)v41, 1);
  std::deque<std::list<ZinIrOpLayer *>>::push_back(v37, v35);
  std::__list_imp<ZinIrSection *>::clear(v35);
  for (i = *((_QWORD *)&v38 + 1); *((_QWORD *)&v38 + 1); i = *((_QWORD *)&v38 + 1))
  {
    v41[0] = 0;
    v4 = *((_QWORD *)&v37[0] + 1);
    v5 = i + v38 - 1;
    v6 = v5 / 0xAA;
    v7 = v5 % 0xAA;
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v37[0] + 1) + 8 * v6) + 24 * v7 + 8) + 16);
    v41[0] = v8;
    v9 = v40[0];
    if (!v40[0])
      goto LABEL_12;
    v10 = v40;
    do
    {
      v11 = v9;
      v12 = v10;
      v13 = v9[4];
      if (v13 >= v8)
        v10 = (_QWORD **)v9;
      else
        ++v9;
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    if (v10 == v40)
      goto LABEL_12;
    if (v13 < v8)
      v11 = v12;
    if (v8 >= v11[4])
    {
      if (*((_DWORD *)v10 + 10) == 1)
      {
        *((_DWORD *)v10 + 10) = 2;
        std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)a2, v41, v41);
        v4 = *((_QWORD *)&v37[0] + 1);
        v30 = *((_QWORD *)&v38 + 1) + v38 - 1;
        v6 = v30 / 0xAA;
        v7 = v30 % 0xAA;
      }
      v31 = *(_QWORD *)(v4 + 8 * v6) + 24 * v7;
      v32 = *(uint64_t **)(v31 + 8);
      v33 = *v32;
      *(_QWORD *)(v33 + 8) = v32[1];
      *(_QWORD *)v32[1] = v33;
      --*(_QWORD *)(v31 + 16);
      operator delete(v32);
      if (!*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v37[0] + 1)
                                  + 8 * ((*((_QWORD *)&v38 + 1) + (_QWORD)v38 - 1) / 0xAAuLL))
                      + 24 * ((*((_QWORD *)&v38 + 1) + (_QWORD)v38 - 1) % 0xAAuLL)
                      + 16))
        std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>::pop_back(v37);
    }
    else
    {
LABEL_12:
      v35[0] = v41;
      *((_DWORD *)std::__tree<std::__value_type<ZinIrOpLayer *,int>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,int>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,int>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(&v39, (unint64_t *)v41, (uint64_t)&std::piecewise_construct, v35)+ 10) = 1;
      v35[0] = v35;
      v35[1] = v35;
      v36 = 0;
      v15 = *(_QWORD *)(v41[0] + 88);
      v14 = *(_QWORD *)(v41[0] + 96);
      if (v15 != v14)
      {
        v16 = 0;
        v17 = v35;
        v18 = v40[0];
        do
        {
          v19 = *(_QWORD **)v15;
          v20 = *(_QWORD *)(*(_QWORD *)v15 + 120) - *(_QWORD *)(*(_QWORD *)v15 + 112);
          if (v20 <= 8 && v19[12] != v19[11])
          {
            v21 = v19[8];
            if (*(_DWORD *)(v21 + 8) == 5)
            {
              v22 = *(_DWORD *)(v21 + 12);
              if (v20 == 8 && v22 == 1)
              {
                if (!v18)
                  goto LABEL_32;
                v24 = v40;
                v25 = v18;
                do
                {
                  v26 = v25;
                  v27 = v24;
                  v28 = v25[4];
                  if (v28 >= (unint64_t)v19)
                    v24 = (_QWORD **)v25;
                  else
                    ++v25;
                  v25 = (_QWORD *)*v25;
                }
                while (v25);
                if (v24 == v40)
                  goto LABEL_32;
                if (v28 < (unint64_t)v19)
                  v26 = v27;
                if ((unint64_t)v19 < v26[4])
                {
LABEL_32:
                  v29 = operator new(0x18uLL);
                  v29[1] = v35;
                  v29[2] = v19;
                  *v29 = v17;
                  v17[1] = v29;
                  ++v16;
                  v17 = (_QWORD **)v29;
                  v35[0] = v29;
                  v36 = v16;
                }
              }
            }
          }
          v15 += 8;
        }
        while (v15 != v14);
        if (v16)
          std::deque<std::list<ZinIrOpLayer *>>::push_back(v37, (uint64_t)v35);
      }
      std::__list_imp<ZinIrSection *>::clear(v35);
    }
  }
  std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>::~deque[abi:ne180100](v37);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v39, v40[0]);
}

void sub_206E6C974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20)
{
  std::__list_imp<ZinIrSection *>::clear(&a10);
  std::deque<std::list<std::reference_wrapper<std::shared_ptr<ZinMirUnit> const>>>::~deque[abi:ne180100](&a13);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a9, *(_QWORD **)(a9 + 8));
  _Unwind_Resume(a1);
}

uint64_t ZinIrOptTreeCollapser::CollapseTreeTransform(ZinIrOptTreeCollapser *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  uint64_t v5;
  _QWORD v7[3];

  if (!ZinIrOptTreeCollapser::IsTreeRoot(a2, a2))
    return 0;
  ZinIrOptTreeCollapser::GetTreeNodes(a2, (uint64_t)v7);
  if (v7[2] == 1)
    v5 = 0;
  else
    v5 = ZinIrOptTreeCollapser::CollapseTree((uint64_t)this, (uint64_t **)a2, v7);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v7, (_QWORD *)v7[1]);
  return v5;
}

void sub_206E6CA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOptTreeCollapser::CollapseTree(uint64_t a1, uint64_t **a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void **v27;
  void **v28;
  BOOL v29;
  uint64_t *v30;
  _BYTE *v31;
  uint64_t Hal;
  uint64_t v33;
  ZinIrTensor *v34;
  ZinIrOpLayer *ElementWiseLayer;
  uint64_t *v36;
  ZinIrTensor::MirInfo *v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  void **v41;
  void **v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t **v48;
  uint64_t **v49;
  void **v50;
  _OWORD v51[2];
  int v52;
  void **v53;
  void *__p;
  void *v55;
  ZinIrTensor::MirInfo *v56;
  void *v57[3];
  void *v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD v61[3];
  char v62;
  _QWORD **v63;
  _QWORD *v64[2];
  uint64_t v65;
  std::__shared_weak_count *v66;

  v6 = (uint64_t)a2[2];
  v7 = (uint64_t *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a2)[5])(a2, 0, 0);
  v8 = (std::__shared_weak_count *)v7[1];
  v65 = *v7;
  v66 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v64[0] = 0;
  v64[1] = 0;
  v63 = v64;
  v48 = a2;
  ZinObjectNameFactory::ZinObjectNameFactory(v61, a2 + 3);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v11 = (void **)*a3;
  v50 = (void **)(a3 + 1);
  v49 = (uint64_t **)a1;
  if ((_QWORD *)*a3 == a3 + 1)
  {
    v31 = 0;
    v30 = 0;
  }
  else
  {
    do
    {
      v57[0] = v11[4];
      v53 = v57;
      v12 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 64), (unint64_t **)&v53);
      v13 = v12 + 3;
      if (!v12)
        v13 = (uint64_t **)(a1 + 104);
      v15 = (uint64_t **)*v13;
      v14 = (uint64_t **)v13[1];
      while (v15 != v14)
      {
        v16 = *v15;
        if (!std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3, *v15))
        {
          v17 = v59;
          if (v59 >= v60)
          {
            v19 = ((char *)v59 - (_BYTE *)v58) >> 3;
            if ((unint64_t)(v19 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v20 = ((char *)v60 - (_BYTE *)v58) >> 2;
            if (v20 <= v19 + 1)
              v20 = v19 + 1;
            if ((unint64_t)((char *)v60 - (_BYTE *)v58) >= 0x7FFFFFFFFFFFFFF8)
              v21 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v21 = v20;
            if (v21)
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v60, v21);
            else
              v22 = 0;
            v23 = (uint64_t *)&v22[8 * v19];
            *v23 = *v16;
            v18 = v23 + 1;
            v25 = (char *)v58;
            v24 = (char *)v59;
            if (v59 != v58)
            {
              do
              {
                v26 = *((_QWORD *)v24 - 1);
                v24 -= 8;
                *--v23 = v26;
              }
              while (v24 != v25);
              v24 = (char *)v58;
            }
            v58 = v23;
            v59 = v18;
            v60 = (uint64_t *)&v22[8 * v21];
            if (v24)
              operator delete(v24);
          }
          else
          {
            *v59 = *v16;
            v18 = v17 + 1;
          }
          v59 = v18;
        }
        ++v15;
      }
      v27 = (void **)v11[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (void **)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (void **)v11[2];
          v29 = *v28 == v11;
          v11 = v28;
        }
        while (!v29);
      }
      v11 = v28;
    }
    while (v28 != v50);
    v31 = v58;
    v30 = v59;
  }
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v6 + 160));
  if ((unint64_t)(((char *)v30 - v31) >> 3) <= *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal)
                                                                 + 752))
  {
    ZinOpLayerUtils::GetTensorInfoFromLayers(&v58, (uint64_t)v57);
    v34 = (ZinIrTensor *)v65;
    ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v6, (uint64_t)v61, 1, (uint64_t)v57, (__int128 *)(v65 + 48), *(_DWORD *)(v65 + 88));
    v36 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ElementWiseLayer + 32))(ElementWiseLayer, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v34, &v56);
    ZinIrTensor::SetTensorMirInfo(v36, &v56);
    v37 = v56;
    v56 = 0;
    if (v37)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v56, v37);
    Layer2TDMapper::SourceLayer::SourceLayer<std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>>(&v53, a3);
    ZinIrOpLayerGraph::AddNode(v49, ElementWiseLayer, (ZinIrOpLayer ***)&v53);
    v53 = (void **)&unk_24C02BB18;
    if (__p)
    {
      v55 = __p;
      operator delete(__p);
    }
    memset(v51, 0, sizeof(v51));
    v52 = 1065353216;
    v38 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v49, v48, ElementWiseLayer, v51);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v51);
    if ((v38 & 1) != 0)
    {
      v39 = (uint64_t *)v58;
      v40 = v59;
      while (v39 != v40)
        ZinIrOpLayerGraph::AddEdge((uint64_t)v49, *v39++, (uint64_t)ElementWiseLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v41 = (void **)*a3;
      if ((void **)*a3 != v50)
      {
        do
        {
          ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v49, (ZinIrOpLayer *)v41[4], 0);
          v42 = (void **)v41[1];
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = (void **)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (void **)v41[2];
              v29 = *v43 == v41;
              v41 = v43;
            }
            while (!v29);
          }
          v41 = v43;
        }
        while (v43 != v50);
      }
      v33 = 0;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinUnflattenCompositeLayer::MakeUnflattenCompositeLayer();
      v33 = 3;
    }
    if (v57[0])
    {
      v57[1] = v57[0];
      operator delete(v57[0]);
    }
  }
  else
  {
    v33 = 0;
  }
  if (v58)
  {
    v59 = (uint64_t *)v58;
    operator delete(v58);
  }
  v61[0] = off_24C01FBB0;
  if (v62 < 0)
    operator delete((void *)v61[1]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v63, v64[0]);
  v44 = v66;
  if (v66)
  {
    v45 = (unint64_t *)&v66->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  return v33;
}

void sub_206E6CEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  *(_QWORD *)(v30 - 168) = off_24C01FBB0;
  if (*(char *)(v30 - 137) < 0)
    operator delete(*(void **)(v30 - 160));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v30 - 128, *(_QWORD **)(v30 - 120));
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v30 - 104);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOptTreeCollapser::Transform(ZinIrOptTreeCollapser *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &unk_24C053830;
  v6[1] = ZinIrOptTreeCollapser::CollapseTreeTransform;
  v7 = v6;
  v2 = ZinIrControlFlowGraph::TraverseForward(this, (uint64_t)v6, 1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_206E6D078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t *std::construct_at[abi:ne180100]<std::list<ZinIrOpLayer *>,std::list<ZinIrOpLayer *>,std::list<ZinIrOpLayer *>*>(uint64_t *a1, _QWORD *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  std::list<ZinIrOpLayer *>::splice((uint64_t)a1, a1, a2);
  return a1;
}

_QWORD *Layer2TDMapper::SourceLayer::SourceLayer<std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>>(_QWORD *a1, _QWORD *a2)
{
  char **v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;

  a1[1] = 0;
  v3 = (char **)(a1 + 1);
  *a1 = &unk_24C02BB18;
  a1[2] = 0;
  a1[3] = 0;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = 0;
    v7 = a1 + 3;
    do
    {
      v8 = v5[4];
      if (v8)
      {
        if ((unint64_t)v6 >= *v7)
        {
          v9 = (v6 - *v3) >> 3;
          if ((unint64_t)(v9 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v10 = *v7 - (_QWORD)*v3;
          v11 = v10 >> 2;
          if (v10 >> 2 <= (unint64_t)(v9 + 1))
            v11 = v9 + 1;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v12);
          else
            v13 = 0;
          v14 = &v13[8 * v9];
          *(_QWORD *)v14 = v8;
          v6 = v14 + 8;
          v16 = (char *)a1[1];
          v15 = (char *)a1[2];
          if (v15 != v16)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            v15 = *v3;
          }
          a1[1] = v14;
          a1[2] = v6;
          a1[3] = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v6 = v8;
          v6 += 8;
        }
        a1[2] = v6;
      }
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v20 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v20);
      }
      v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

void sub_206E6D250(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinCodegen::SetSecondarySourceDMA<10u>(ZinIrTensor *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, char a8, char a9, char a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t BarIdFromDynamicOffsetInfoOrSection;
  int v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  _BOOL8 result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int IsCompressed;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v80;
  __int128 __p;
  uint64_t v82;
  int v83;
  uint64_t v84;

  v84 = a2;
  v11 = *(_QWORD *)(a3 + 96 * a4 + 752);
  if (*(_DWORD *)(v11 + 156) == 1)
  {
    BarIdFromDynamicOffsetInfoOrSection = ZinIrSymbol::GetBarIdFromDynamicOffsetInfoOrSection((ZinIrSymbol *)v11);
    v19 = *(_DWORD *)(v11 + 208);
    ZinAneTd<10u>::SetL2Src2DmaFormat(a2, v19);
    if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v11)
      && ZinIrSymbol::GetMemType((ZinIrSymbol *)v11) != 1)
    {
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinCodegen::SetPrimarySourceDMA<7u>(result, v38, v39, v40, v41, v42, v43, v44);
        return 0;
      }
    }
    else
    {
      if (ZinIrSection::HasValidBarId(*(ZinIrSection **)(v11 + 8)))
      {
        v78 = a7;
        ZinAneRelocInfo::ZinAneRelocInfo(&v80, v11 + 160, 4938, BarIdFromDynamicOffsetInfoOrSection, 1, 1, 0, 0);
        v20 = *(_QWORD *)(a2 + 968);
        if (v20 >= *(_QWORD *)(a2 + 976))
        {
          v45 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a2 + 960), (uint64_t)&v80);
        }
        else
        {
          *(_WORD *)v20 = v80;
          v21 = (std::string *)(v20 + 8);
          if (SHIBYTE(v82) < 0)
          {
            std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
          }
          else
          {
            v22 = __p;
            *(_QWORD *)(v20 + 24) = v82;
            *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          }
          *(_DWORD *)(v20 + 32) = v83;
          v45 = v20 + 40;
          *(_QWORD *)(a2 + 968) = v20 + 40;
        }
        *(_QWORD *)(a2 + 968) = v45;
        if (SHIBYTE(v82) < 0)
          operator delete((void *)__p);
        *(_DWORD *)(a2 + 340) = *(_DWORD *)(a2 + 340) & 0xFFFFFF0F | (16
                                                                    * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 1, *(_DWORD *)(a3 + 1420)) & 0xF));
        *(_DWORD *)(a2 + 348) = *(_DWORD *)(a2 + 348) & 0xFFFFFFF0 | ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 2, *(_DWORD *)(a3 + 1424)) & 0xF;
        *(_DWORD *)(a2 + 348) = *(_DWORD *)(a2 + 348) & 0xFFFFFF0F | (16
                                                                    * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 3, *(_DWORD *)(a3 + 1428)) & 0xF));
        switch(v19)
        {
          case 1:
            v46 = *(_DWORD *)(a2 + 444) & 0xFFFFCFFC | 0x1000;
            goto LABEL_38;
          case 2:
            v46 = *(_DWORD *)(a2 + 444) & 0xFFFFCFFC;
            goto LABEL_38;
          case 3:
            v47 = *(_DWORD *)(a2 + 444) & 0xFFFFCFCC;
            v48 = 8241;
            goto LABEL_37;
          case 4:
            v46 = *(_DWORD *)(a2 + 444) & 0xFFFFCECC | 1;
            goto LABEL_38;
          case 5:
            v47 = *(_DWORD *)(a2 + 444) & 0xFFFFCECC;
            v48 = 257;
            goto LABEL_37;
          case 6:
            v47 = *(_DWORD *)(a2 + 444) & 0xFFFFCECC;
            v48 = 17;
            goto LABEL_37;
          case 7:
            v47 = *(_DWORD *)(a2 + 444) & 0xFFFFCECC;
            v48 = 273;
            goto LABEL_37;
          case 8:
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!result)
              return result;
            ZinCodegen::SetSecondarySourceDMA<7u>(result, v49, v50, v51, v52, v53, v54, v55);
            return 0;
          case 9:
            v56 = *(_DWORD *)(a2 + 444) & 0xFFFFFECC | 0x131;
            *(_DWORD *)(a2 + 444) = v56;
            v57 = v56 & 0xFFFFCFFF;
            if (!a11 && !a10)
              goto LABEL_35;
            v46 = v57 | 0x1000;
            goto LABEL_38;
          case 10:
            v58 = *(_DWORD *)(a2 + 444) & 0xFFFFFECC | 0x131;
            *(_DWORD *)(a2 + 444) = v58;
            v57 = v58 & 0xFFFFCFFF;
            if (a11 || a10)
            {
              *(_DWORD *)(a2 + 444) = v57;
            }
            else
            {
LABEL_35:
              v46 = v57 | 0x2000;
LABEL_38:
              *(_DWORD *)(a2 + 444) = v46;
            }
            v59 = ZinTensorDescriptorDmaInterleave(v11 + 208);
            *(_DWORD *)(a2 + 444) = *(_DWORD *)(a2 + 444) & 0xF0FFFFFF | ((v59 & 0xF) << 24);
            result = CheckRegValueRange(v59, (unsigned int *)(*(_QWORD *)(a2 + 992) + 584));
            if (!result)
              return result;
            v60 = *(_QWORD *)(a3 + 840);
            v61 = *(_QWORD *)(a3 + 832);
            v62 = *(_QWORD *)(a3 + 824);
            v63 = *(_QWORD *)(a3 + 816) / a6;
            *(_DWORD *)(a2 + 384) = *(_DWORD *)(a2 + 384) & 0x3F | ((_DWORD)v63 << 6);
            result = CheckRegValueRange(v63, (unsigned int *)(*(_QWORD *)(a2 + 992) + 432));
            if (!result)
              return result;
            *(_DWORD *)(a2 + 388) = *(_DWORD *)(a2 + 388) & 0x3F | ((v62 / a6) << 6);
            result = CheckRegValueRange(v62 / a6, (unsigned int *)(*(_QWORD *)(a2 + 992) + 440));
            if (!result)
              return result;
            *(_DWORD *)(a2 + 392) = *(_DWORD *)(a2 + 392) & 0x3F | ((v61 / a6) << 6);
            result = CheckRegValueRange(v61 / a6, (unsigned int *)(*(_QWORD *)(a2 + 992) + 448));
            if (!result)
              return result;
            *(_DWORD *)(a2 + 396) = *(_DWORD *)(a2 + 396) & 0x3F | ((v60 / a6) << 6);
            result = CheckRegValueRange(v60 / a6, (unsigned int *)(*(_QWORD *)(a2 + 992) + 456));
            if (!result)
              return result;
            v64 = *(_QWORD *)(a3 + 848);
            ZinCodegen::SetDmaWrap<10u>((uint64_t *)a2, v64);
            ZinIrSymbol::GetWrapInfo(v64, &v80);
            if (BYTE8(__p))
              ZinAneTd<10u>::SetTileDmaSrc2WrapCfg(a2, v80);
            if ((a8 & 1) == 0)
            {
              *(_DWORD *)(a2 + 340) |= 1u;
              if ((a9 & 1) == 0)
              {
                *(_DWORD *)(a2 + 628) = *(_DWORD *)(a2 + 628) & 0xFFFFF0FF | ((v59 & 0xF) << 8);
                result = CheckRegValueRange(v59, (unsigned int *)(*(_QWORD *)(a2 + 992) + 584));
                if (!result)
                  return result;
              }
            }
            if (!ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808)))
              return 1;
            v65 = (char *)ZinIrTensor::GetRootTensor(a1) + 48;
            v66 = *(_DWORD *)(a3 + 888);
            v67 = *(_DWORD *)(a3 + 892);
            v68 = *(_DWORD *)(v11 + 232);
            v69 = *(_DWORD *)(a3 + 896);
            IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808));
            if (ZinCodegen::SetUniversalCompressionForSecondarySource<10u>((_QWORD *)a3, (uint64_t)v65, v66, v67, &v84, v69, IsCompressed, v68, v78))
            {
              ZinAneTd<10u>::SetL2Src2CfgForCompression(v84, v67);
              ZinAneTd<10u>::SetL2Src2OffsetYlsbsFromCropOffsetY(v84);
              return 1;
            }
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!result)
              return result;
            ZinCodegen::SetSecondarySourceDMA<10u>(result, v71, v72, v73, v74, v75, v76, v77);
            break;
          case 11:
            v47 = *(_DWORD *)(a2 + 444) & 0xFFFFFFCF;
            v48 = 12547;
LABEL_37:
            v46 = v47 | v48;
            goto LABEL_38;
          default:
            return 0;
        }
        return 0;
      }
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinCodegen::SetUniversalCompressionForSecondarySource<7u>(result, v31, v32, v33, v34, v35, v36, v37);
        return 0;
      }
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinCodegen::SetResultDMA<7u>(result, v24, v25, v26, v27, v28, v29, v30);
      return 0;
    }
  }
  return result;
}

void sub_206E6D7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 + 968) = v19;
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinCodegen::SetSecondarySourceDMA<10u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to set UC registers properly\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

__CFString *ANECCreateCompilerOptionsCFString(const __CFDictionary *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFTypeID v4;
  const __CFString *v5;
  CFTypeID v6;
  const __CFString *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeID v16;
  char **v17;
  const __CFString *v18;
  const __CFString *v19;
  CFTypeID v20;
  const __CFString *v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CFTypeID v46;
  CFTypeID v47;
  CFTypeID v48;
  const __CFString *v49;
  CFTypeID v50;
  CFStringRef v51;
  const __CFString *v52;
  CFTypeID v53;
  CFStringRef v54;
  const __CFString *v55;
  CFTypeID v56;
  CFTypeID v57;
  CFStringRef v58;
  const __CFString *v59;
  CFTypeID v60;
  CFStringRef v61;
  const __CFString *v62;
  CFTypeID v63;
  CFTypeID v64;
  CFTypeID v65;
  CFTypeID v66;
  CFTypeID v67;
  CFStringRef v68;
  const __CFString *v69;
  CFTypeID v70;
  CFTypeID v71;
  CFTypeID v72;
  CFTypeID v73;
  CFTypeID v74;
  CFTypeID v75;
  const char *v76;
  CFTypeID v77;
  const char *v78;
  CFTypeID v79;
  CFTypeID v80;
  CFTypeID v81;
  CFTypeID v82;
  CFTypeID v83;
  CFTypeID v84;
  CFTypeID v85;
  CFTypeID v86;
  CFTypeID v87;
  CFStringRef v88;
  const __CFString *v89;
  CFTypeID v90;
  CFTypeID v91;
  CFTypeID v92;
  CFTypeID v93;
  CFTypeID v94;
  const __CFString *v95;
  CFTypeID v96;
  const char *p_valuePtr;
  CFTypeID v98;
  CFTypeID v99;
  CFTypeID v100;
  CFTypeID v101;
  CFTypeID v102;
  const __CFString *v103;
  _BOOL8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  CFTypeID v112;
  const __CFString *v113;
  _BOOL8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  CFTypeID v122;
  CFStringRef v123;
  const __CFString *v124;
  CFTypeID v125;
  CFTypeID v126;
  _BOOL4 v127;
  const __CFString *v128;
  CFTypeID v129;
  CFTypeID v130;
  CFTypeID v131;
  CFTypeID v132;
  CFTypeID v133;
  CFTypeID v134;
  CFTypeID v135;
  CFTypeID v136;
  CFTypeID v137;
  CFTypeID v138;
  CFTypeID v139;
  CFStringRef v140;
  const __CFString *v141;
  CFTypeID v142;
  CFStringRef v143;
  const __CFString *v144;
  CFTypeID v145;
  CFStringRef v146;
  const __CFString *v147;
  CFTypeID v148;
  CFTypeID v149;
  CFTypeID v150;
  const __CFString *v151;
  CFTypeID v152;
  CFTypeID v153;
  CFTypeID v154;
  void *v155;
  const __CFString *v156;
  CFTypeID v157;
  const __CFString *v158;
  CFTypeID v159;
  const __CFString *v160;
  CFTypeID v161;
  CFStringRef v162;
  const __CFString *v163;
  CFTypeID v164;
  const char *v165;
  CFTypeID v166;
  CFTypeID v167;
  CFTypeID v168;
  CFTypeID v169;
  CFStringRef v170;
  const __CFString *v171;
  CFTypeID v172;
  CFTypeID v173;
  CFTypeID v174;
  CFStringRef v175;
  const __CFString *v176;
  CFTypeID v177;
  CFTypeID v178;
  const __CFString *v179;
  CFTypeID v180;
  CFStringRef v181;
  const __CFString *v182;
  CFTypeID v183;
  CFStringRef v184;
  const __CFString *v185;
  CFTypeID v186;
  const __CFString *v187;
  CFTypeID v188;
  const __CFString *v189;
  CFTypeID v190;
  const __CFString *v191;
  CFTypeID v192;
  const __CFString *v193;
  CFTypeID v194;
  const __CFString *v195;
  _BOOL8 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t valuePtr;
  uint64_t v206;
  uint64_t v207;
  void *value;

  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  if (!Mutable)
    return Mutable;
  value = 0;
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DramAllocatorType"), (const void **)&value))
  {
    v4 = CFGetTypeID(value);
    if (v4 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("NoReuse")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518B90[0], 0x8000100u);
        v5 = CFSTR(" noreuse ");
LABEL_10:
        CFStringAppend(Mutable, v5);
        goto LABEL_11;
      }
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("FirstFitReuse")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518B90[0], 0x8000100u);
        v5 = CFSTR(" ffreuse ");
        goto LABEL_10;
      }
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("BestFitReuse")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518B90[0], 0x8000100u);
        v5 = CFSTR(" bfreuse ");
        goto LABEL_10;
      }
      v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v8)
        ANECCreateCompilerOptionsCFString_cold_6(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
LABEL_11:
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DramTensorPriorityType"), (const void **)&value))
  {
    v6 = CFGetTypeID(value);
    if (v6 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("orderofcreation")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518B98[0], 0x8000100u);
        v7 = CFSTR(" orderofcreation ");
LABEL_23:
        CFStringAppend(Mutable, v7);
        goto LABEL_24;
      }
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("costofreads")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518B98[0], 0x8000100u);
        v7 = CFSTR(" costofreads ");
        goto LABEL_23;
      }
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("sizethenliverange")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518B98[0], 0x8000100u);
        v7 = CFSTR(" sizethenliverange ");
        goto LABEL_23;
      }
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("sizebyliverange")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518B98[0], 0x8000100u);
        v7 = CFSTR(" sizebyliverange ");
        goto LABEL_23;
      }
      v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v22)
        ANECCreateCompilerOptionsCFString_cold_6(v22, v23, v24, v25, v26, v27, v28, v29);
    }
  }
LABEL_24:
  if (!CFDictionaryGetValueIfPresent(a1, CFSTR("L2CacheMode"), (const void **)&value))
    goto LABEL_56;
  v16 = CFGetTypeID(value);
  if (v16 != CFStringGetTypeID())
    goto LABEL_56;
  if (ZinCFStringEquals((const __CFString *)value, CFSTR("L2DisableResident")))
  {
    v17 = off_254518BD8;
    v18 = CFSTR(" nonresident ");
LABEL_28:
    CFStringAppend(Mutable, CFSTR("--"));
    CFStringAppendCString(Mutable, *v17, 0x8000100u);
    CFStringAppend(Mutable, v18);
    goto LABEL_56;
  }
  if (ZinCFStringEquals((const __CFString *)value, CFSTR("L2EnableResident")))
  {
    CFStringAppend(Mutable, CFSTR("--"));
    CFStringAppendCString(Mutable, off_254518BD8[0], 0x8000100u);
    v19 = CFSTR(" resident ");
LABEL_35:
    CFStringAppend(Mutable, v19);
    goto LABEL_36;
  }
  if (ZinCFStringEquals((const __CFString *)value, CFSTR("L2EnableCachedWrite")))
  {
    CFStringAppend(Mutable, CFSTR("--"));
    CFStringAppendCString(Mutable, off_254518BD8[0], 0x8000100u);
    v19 = CFSTR(" cachedwrite ");
    goto LABEL_35;
  }
  if (ZinCFStringEquals((const __CFString *)value, CFSTR("L2EnabledCachedReadWrite")))
  {
    CFStringAppend(Mutable, CFSTR("--"));
    CFStringAppendCString(Mutable, off_254518BD8[0], 0x8000100u);
    v19 = CFSTR(" cachedreadwrite ");
    goto LABEL_35;
  }
  v30 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v30)
    ANECCreateCompilerOptionsCFString_cold_5(v30, v31, v32, v33, v34, v35, v36, v37);
LABEL_36:
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("L2AllocatorType"), (const void **)&value))
  {
    v20 = CFGetTypeID(value);
    if (v20 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("FirstFitReuse")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518BA8[0], 0x8000100u);
        v21 = CFSTR(" ffreuse ");
LABEL_42:
        CFStringAppend(Mutable, v21);
        goto LABEL_49;
      }
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("BestFitReuse")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518BA8[0], 0x8000100u);
        v21 = CFSTR(" bfreuse ");
        goto LABEL_42;
      }
      v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v38)
        ANECCreateCompilerOptionsCFString_cold_4(v38, v39, v40, v41, v42, v43, v44, v45);
    }
  }
LABEL_49:
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableL2Wraparound"), (const void **)&value))
  {
    v46 = CFGetTypeID(value);
    if (v46 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518BE0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableL2BankConflictOpt"), (const void **)&value))
  {
    v47 = CFGetTypeID(value);
    if (v47 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      v17 = off_254518C08;
      v18 = CFSTR(" ");
      goto LABEL_28;
    }
  }
LABEL_56:
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("L3AllocatorType"), (const void **)&value))
  {
    v48 = CFGetTypeID(value);
    if (v48 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("NoReuse")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518BB0[0], 0x8000100u);
        v49 = CFSTR(" noreuse ");
LABEL_64:
        CFStringAppend(Mutable, v49);
        goto LABEL_65;
      }
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("FirstFitReuse")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518BB0[0], 0x8000100u);
        v49 = CFSTR(" ffreuse ");
        goto LABEL_64;
      }
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("BestFitReuse")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518BB0[0], 0x8000100u);
        v49 = CFSTR(" bfreuse ");
        goto LABEL_64;
      }
      v114 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v114)
        ANECCreateCompilerOptionsCFString_cold_3(v114, v115, v116, v117, v118, v119, v120, v121);
    }
  }
LABEL_65:
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("L2Size"), (const void **)&value))
  {
    v50 = CFGetTypeID(value);
    if (v50 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      v51 = CFStringCreateWithFormat(v2, 0, CFSTR("%d "), valuePtr);
      if (v51)
      {
        v52 = v51;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518BB8[0], 0x600u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v52);
        CFRelease(v52);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("L3Size"), (const void **)&value))
  {
    v53 = CFGetTypeID(value);
    if (v53 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      v54 = CFStringCreateWithFormat(v2, 0, CFSTR("%d "), valuePtr);
      if (v54)
      {
        v55 = v54;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518BC0[0], 0x600u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v55);
        CFRelease(v55);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("FoldScale"), (const void **)&value))
  {
    v56 = CFGetTypeID(value);
    if (v56 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD268])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, ANEC_options[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("ForceHazardStallsBegin"), (const void **)&value))
  {
    v57 = CFGetTypeID(value);
    if (v57 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &valuePtr);
      v58 = CFStringCreateWithFormat(v2, 0, CFSTR("%lld "), valuePtr);
      if (v58)
      {
        v59 = v58;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518B58[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v59);
        CFRelease(v59);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("ForceHazardStallsEnd"), (const void **)&value))
  {
    v60 = CFGetTypeID(value);
    if (v60 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &valuePtr);
      v61 = CFStringCreateWithFormat(v2, 0, CFSTR("%lld "), valuePtr);
      if (v61)
      {
        v62 = v61;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518B60[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v62);
        CFRelease(v62);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableContextSwitching"), (const void **)&value))
  {
    v63 = CFGetTypeID(value);
    if (v63 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518B70[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DebugContextSwitchingDma"), (const void **)&value))
  {
    v64 = CFGetTypeID(value);
    if (v64 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518B78[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("SetIsSecureNetwork"), (const void **)&value))
  {
    v65 = CFGetTypeID(value);
    if (v65 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518B80[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableMergeConstants"), (const void **)&value))
  {
    v66 = CFGetTypeID(value);
    if (v66 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518B88[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DebugMask"), (const void **)&value))
  {
    v67 = CFGetTypeID(value);
    if (v67 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      v68 = CFStringCreateWithFormat(v2, 0, CFSTR("0x%08x "), valuePtr);
      if (v68)
      {
        v69 = v68;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518BE8[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v69);
        CFRelease(v69);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("CompressSparseKernels"), (const void **)&value))
  {
    v70 = CFGetTypeID(value);
    if (v70 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518BF8[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableOnTheFlySparseEncoding"), (const void **)&value))
  {
    v71 = CFGetTypeID(value);
    if (v71 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DC0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableWinograd"), (const void **)&value))
  {
    v72 = CFGetTypeID(value);
    if (v72 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DC8[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableDramLogEventsOnly"), (const void **)&value))
  {
    v73 = CFGetTypeID(value);
    if (v73 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DD0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableMulticastBruteforceSearch"), (const void **)&value))
  {
    v74 = CFGetTypeID(value);
    if (v74 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DD8[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("PerfTracer1Config"), (const void **)&value))
  {
    v75 = CFGetTypeID(value);
    if (v75 == CFStringGetTypeID())
    {
      valuePtr = 0;
      v206 = 0;
      v207 = 0;
      ZinGetString((CFStringRef)value, (uint64_t)&valuePtr);
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DE0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR("="));
      v76 = v207 >= 0 ? (const char *)&valuePtr : (const char *)valuePtr;
      CFStringAppendCString(Mutable, v76, 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
      if (SHIBYTE(v207) < 0)
        operator delete((void *)valuePtr);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("PerfTracer2Config"), (const void **)&value))
  {
    v77 = CFGetTypeID(value);
    if (v77 == CFStringGetTypeID())
    {
      valuePtr = 0;
      v206 = 0;
      v207 = 0;
      ZinGetString((CFStringRef)value, (uint64_t)&valuePtr);
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DE8[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR("="));
      v78 = v207 >= 0 ? (const char *)&valuePtr : (const char *)valuePtr;
      CFStringAppendCString(Mutable, v78, 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
      if (SHIBYTE(v207) < 0)
        operator delete((void *)valuePtr);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableDRAMInputFIFO"), (const void **)&value))
  {
    v79 = CFGetTypeID(value);
    if (v79 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DF0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("AggressiveScaleFusion"), (const void **)&value))
  {
    v80 = CFGetTypeID(value);
    if (v80 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E00[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableTaskSchedulerExp"), (const void **)&value))
  {
    v81 = CFGetTypeID(value);
    if (v81 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E08[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableAggressiveNETransposeFusion"), (const void **)&value))
  {
    v82 = CFGetTypeID(value);
    if (v82 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E28[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableControlFlowOps"), (const void **)&value))
  {
    v83 = CFGetTypeID(value);
    if (v83 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E30[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableDartThrashingOptimizer"), (const void **)&value))
  {
    v84 = CFGetTypeID(value);
    if (v84 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E50[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableDramInplaceAllocation"), (const void **)&value))
  {
    v85 = CFGetTypeID(value);
    if (v85 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E58[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableGlobalChannelSplitting"), (const void **)&value))
  {
    v86 = CFGetTypeID(value);
    if (v86 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E60[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DramFragmentationFactor"), (const void **)&value))
  {
    v87 = CFGetTypeID(value);
    if (v87 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 88;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      v88 = CFStringCreateWithFormat(v2, 0, CFSTR("%d "), valuePtr);
      if (v88)
      {
        v89 = v88;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518BA0[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v89);
        CFStringAppend(Mutable, CFSTR(" "));
        CFRelease(v89);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("UseExtendedMachoFormat"), (const void **)&value))
  {
    v90 = CFGetTypeID(value);
    if (v90 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E68[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableAdvancedKernelRefinement"), (const void **)&value))
  {
    v91 = CFGetTypeID(value);
    if (v91 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E70[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableL2BatchSplitting"), (const void **)&value))
  {
    v92 = CFGetTypeID(value);
    if (v92 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E80[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableGlobalCWOptimization"), (const void **)&value))
  {
    v93 = CFGetTypeID(value);
    if (v93 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E88[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableL2CachedBuffer"), (const void **)&value))
  {
    v94 = CFGetTypeID(value);
    if (v94 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E90[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x24BDBD270])
        v95 = CFSTR("=true ");
      else
        v95 = CFSTR("=false ");
      CFStringAppend(Mutable, v95);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("E4M3Overflow"), (const void **)&value))
  {
    v96 = CFGetTypeID(value);
    if (v96 == CFStringGetTypeID())
    {
      valuePtr = 0;
      v206 = 0;
      v207 = 0;
      if (ZinGetString((CFStringRef)value, (uint64_t)&valuePtr))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518E38[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        if (v207 >= 0)
          p_valuePtr = (const char *)&valuePtr;
        else
          p_valuePtr = (const char *)valuePtr;
        CFStringAppendCString(Mutable, p_valuePtr, 0x8000100u);
        CFStringAppend(Mutable, CFSTR(" "));
      }
      if (SHIBYTE(v207) < 0)
        operator delete((void *)valuePtr);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("UndefinedSymbolsBehaviorUseFVMLibs"), (const void **)&value))
  {
    v98 = CFGetTypeID(value);
    if (v98 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
      CFStringAppend(Mutable, CFSTR("--Wl-undefined=fvmlib "));
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("ForceCoalescedExternSections"), (const void **)&value))
  {
    v99 = CFGetTypeID(value);
    if (v99 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
      CFStringAppend(Mutable, CFSTR("--Wl-force-coalesce-externs "));
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableInputsSectionsCoalesce"), (const void **)&value))
  {
    v100 = CFGetTypeID(value);
    if (v100 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518CA8[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("TargetArchitecture"), (const void **)&value))
  {
    v101 = CFGetTypeID(value);
    if (v101 == CFStringGetTypeID())
      CFStringAppendFormat(Mutable, 0, CFSTR("-t %@ "), value);
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("Signature"), (const void **)&value))
  {
    v102 = CFGetTypeID(value);
    if (v102 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("Ident")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518C00[0], 0x8000100u);
        v103 = CFSTR(" ident ");
LABEL_225:
        CFStringAppend(Mutable, v103);
        goto LABEL_228;
      }
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("Disabled")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518C00[0], 0x8000100u);
        v103 = CFSTR(" disabled ");
        goto LABEL_225;
      }
      v104 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v104)
        ANECCreateCompilerOptionsCFString_cold_2(v104, v105, v106, v107, v108, v109, v110, v111);
    }
  }
LABEL_228:
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("SpatialSplit"), (const void **)&value))
  {
    v112 = CFGetTypeID(value);
    if (v112 == CFStringGetTypeID())
    {
      if (ZinCFStringEquals((const __CFString *)value, CFSTR("Disabled")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518C60[0], 0x8000100u);
        v113 = CFSTR("=disabled ");
      }
      else if (ZinCFStringEquals((const __CFString *)value, CFSTR("Memory")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518C60[0], 0x8000100u);
        v113 = CFSTR("=memory ");
      }
      else if (ZinCFStringEquals((const __CFString *)value, CFSTR("GenericDAG")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518C60[0], 0x8000100u);
        v113 = CFSTR("=generic-dag ");
      }
      else if (ZinCFStringEquals((const __CFString *)value, CFSTR("GenericDAGExperimental")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518C60[0], 0x8000100u);
        v113 = CFSTR("=generic-dag-exp ");
      }
      else if (ZinCFStringEquals((const __CFString *)value, CFSTR("GenericDAGMemory")))
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518C60[0], 0x8000100u);
        v113 = CFSTR("=generic-dag-memory ");
      }
      else
      {
        if (!ZinCFStringEquals((const __CFString *)value, CFSTR("Auto")))
        {
          v197 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v197)
            ANECCreateCompilerOptionsCFString_cold_1(v197, v198, v199, v200, v201, v202, v203, v204);
          goto LABEL_246;
        }
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518C60[0], 0x8000100u);
        v113 = CFSTR("=auto ");
      }
      CFStringAppend(Mutable, v113);
    }
  }
LABEL_246:
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableCircularBufferInSpatialSplit"), (const void **)&value))
  {
    v122 = CFGetTypeID(value);
    if (v122 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &valuePtr);
      v123 = CFStringCreateWithFormat(v2, 0, CFSTR("%lld "), valuePtr);
      if (v123)
      {
        v124 = v123;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518C68[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v124);
        CFRelease(v124);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableSpatialSplitInX"), (const void **)&value))
  {
    v125 = CFGetTypeID(value);
    if (v125 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DB0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  v127 = CFDictionaryGetValueIfPresent(a1, CFSTR("EnableKernelRewind"), (const void **)&value)
      && (v126 = CFGetTypeID(value), v126 == CFBooleanGetTypeID())
      && value == (void *)*MEMORY[0x24BDBD270];
  CFStringAppend(Mutable, CFSTR("--"));
  CFStringAppendCString(Mutable, off_254518C70[0], 0x8000100u);
  if (v127)
    v128 = CFSTR("=enabled ");
  else
    v128 = CFSTR("=disabled ");
  CFStringAppend(Mutable, v128);
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableOptimizations"), (const void **)&value))
  {
    v129 = CFGetTypeID(value);
    if (v129 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518BC8[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("CompileANEProgramForDebugging"), (const void **)&value))
  {
    v130 = CFGetTypeID(value);
    if (v130 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518BF0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("OptLvlOne"), (const void **)&value))
  {
    v131 = CFGetTypeID(value);
    if (v131 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518BD0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableSingleChannelElementwiseOpCopyRemoval"), (const void **)&value))
  {
    v132 = CFGetTypeID(value);
    if (v132 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518C80[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableNetworkImbalanceAnalysis"), (const void **)&value))
  {
    v133 = CFGetTypeID(value);
    if (v133 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518CB0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableCpAllocation"), (const void **)&value))
  {
    v134 = CFGetTypeID(value);
    if (v134 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518CA0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DumpStatusDictionaryToFile"), (const void **)&value))
  {
    v135 = CFGetTypeID(value);
    if (v135 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518CB8[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("GenerateStaticPerfAnalytics"), (const void **)&value))
  {
    v136 = CFGetTypeID(value);
    if (v136 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518CC8[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("GenerateAnalyticsBuffer"), (const void **)&value))
  {
    v137 = CFGetTypeID(value);
    if (v137 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518CD0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("AbortOnLayerTrackerError"), (const void **)&value))
  {
    v138 = CFGetTypeID(value);
    if (v138 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518CF0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("NeFrequency"), (const void **)&value))
  {
    v139 = CFGetTypeID(value);
    if (v139 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberDoubleType, &valuePtr);
      v140 = CFStringCreateWithFormat(v2, 0, CFSTR("%f "), valuePtr);
      if (v140)
      {
        v141 = v140;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518CD8[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v141);
        CFRelease(v141);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("PstateDCSLevel"), (const void **)&value))
  {
    v142 = CFGetTypeID(value);
    if (v142 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = -1;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      v143 = CFStringCreateWithFormat(v2, 0, CFSTR("%d "), valuePtr);
      if (v143)
      {
        v144 = v143;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518CE0[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v144);
        CFRelease(v144);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("PstateSOCLevel"), (const void **)&value))
  {
    v145 = CFGetTypeID(value);
    if (v145 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = -1;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      v146 = CFStringCreateWithFormat(v2, 0, CFSTR("%d "), valuePtr);
      if (v146)
      {
        v147 = v146;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518CE8[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v147);
        CFRelease(v147);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableSSM"), (const void **)&value))
  {
    v148 = CFGetTypeID(value);
    if (v148 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518D28[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableKernelStreaming"), (const void **)&value))
  {
    v149 = CFGetTypeID(value);
    if (v149 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518D30[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("CompilerMultithreading"), (const void **)&value))
  {
    v150 = CFGetTypeID(value);
    if (v150 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DF8[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x24BDBD270])
        v151 = CFSTR("=true ");
      else
        v151 = CFSTR("=false ");
      CFStringAppend(Mutable, v151);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("OptimizeKernelCoalescing"), (const void **)&value))
  {
    v152 = CFGetTypeID(value);
    if (v152 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518D30[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518D38[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("OptimizeKernelCoalescingWithKernelStreaming"), (const void **)&value))
  {
    v153 = CFGetTypeID(value);
    if (v153 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518D38[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("OptimizeMutableKernelSection"), (const void **)&value))
  {
    v154 = CFGetTypeID(value);
    if (v154 == CFBooleanGetTypeID())
    {
      v155 = value;
      if (value == (void *)*MEMORY[0x24BDBD270])
      {
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518D48[0], 0x8000100u);
        if (value == v155)
          v156 = CFSTR("=true");
        else
          v156 = CFSTR("=false");
        CFStringAppend(Mutable, v156);
        CFStringAppend(Mutable, CFSTR(" "));
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableSummaryPerformanceStats"), (const void **)&value))
  {
    v157 = CFGetTypeID(value);
    if (v157 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518D50[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x24BDBD270])
        v158 = CFSTR("=true");
      else
        v158 = CFSTR("=false");
      CFStringAppend(Mutable, v158);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("SplitKernelSection"), (const void **)&value))
  {
    v159 = CFGetTypeID(value);
    if (v159 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518D58[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x24BDBD270])
        v160 = CFSTR("=true");
      else
        v160 = CFSTR("=false");
      CFStringAppend(Mutable, v160);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("MaxKernelSectionSize"), (const void **)&value))
  {
    v161 = CFGetTypeID(value);
    if (v161 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      v162 = CFStringCreateWithFormat(v2, 0, CFSTR("%d "), valuePtr);
      if (v162)
      {
        v163 = v162;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518D60[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v163);
        CFRelease(v163);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("SeedEncoding"), (const void **)&value))
  {
    v164 = CFGetTypeID(value);
    if (v164 == CFStringGetTypeID())
    {
      valuePtr = 0;
      v206 = 0;
      v207 = 0;
      ZinGetString((CFStringRef)value, (uint64_t)&valuePtr);
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518D70[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR("="));
      v165 = v207 >= 0 ? (const char *)&valuePtr : (const char *)valuePtr;
      CFStringAppendCString(Mutable, v165, 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
      if (SHIBYTE(v207) < 0)
        operator delete((void *)valuePtr);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableNEWidthSlicing"), (const void **)&value))
  {
    v166 = CFGetTypeID(value);
    if (v166 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518D80[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableHardSwishOpt"), (const void **)&value))
  {
    v167 = CFGetTypeID(value);
    if (v167 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518D88[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableAggressiveTensorCaching"), (const void **)&value))
  {
    v168 = CFGetTypeID(value);
    if (v168 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518C88[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("DisableCachePrefetchMask"), (const void **)&value))
  {
    v169 = CFGetTypeID(value);
    if (v169 == CFNumberGetTypeID())
    {
      LOWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt16Type, &valuePtr);
      v170 = CFStringCreateWithFormat(v2, 0, CFSTR("%d "), (__int16)valuePtr);
      if (v170)
      {
        v171 = v170;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518D08[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v171);
        CFRelease(v171);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableDynamicShapes"), (const void **)&value))
  {
    v172 = CFGetTypeID(value);
    if (v172 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DA0[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("ForceDynamicShapesMil"), (const void **)&value))
  {
    v173 = CFGetTypeID(value);
    if (v173 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E20[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("BSSLimit"), (const void **)&value))
  {
    v174 = CFGetTypeID(value);
    if (v174 == CFNumberGetTypeID())
    {
      valuePtr = -1;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &valuePtr);
      v175 = CFStringCreateWithFormat(v2, 0, CFSTR("%zd "), valuePtr);
      if (v175)
      {
        v176 = v175;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518CF8[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v176);
        CFStringAppend(Mutable, CFSTR(" "));
        CFRelease(v176);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableIntermediateCompression"), (const void **)&value))
  {
    v177 = CFGetTypeID(value);
    if (v177 == CFBooleanGetTypeID() && value == (void *)*MEMORY[0x24BDBD270])
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DA8[0], 0x8000100u);
      CFStringAppend(Mutable, CFSTR(" "));
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("PreserveTextureFraction"), (const void **)&value))
  {
    v178 = CFGetTypeID(value);
    if (v178 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518DB8[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x24BDBD270])
        v179 = CFSTR("=true ");
      else
        v179 = CFSTR("=false ");
      CFStringAppend(Mutable, v179);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("MaxTdCount"), (const void **)&value))
  {
    v180 = CFGetTypeID(value);
    if (v180 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      v181 = CFStringCreateWithFormat(v2, 0, CFSTR("%d "), valuePtr);
      if (v181)
      {
        v182 = v181;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518E10[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v182);
        CFRelease(v182);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("MaxSegmentSize"), (const void **)&value))
  {
    v183 = CFGetTypeID(value);
    if (v183 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
      v184 = CFStringCreateWithFormat(v2, 0, CFSTR("%d "), valuePtr);
      if (v184)
      {
        v185 = v184;
        CFStringAppend(Mutable, CFSTR("--"));
        CFStringAppendCString(Mutable, off_254518E18[0], 0x8000100u);
        CFStringAppend(Mutable, CFSTR("="));
        CFStringAppend(Mutable, v185);
        CFRelease(v185);
      }
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("GlobalRefinementInSpatialSplit"), (const void **)&value))
  {
    v186 = CFGetTypeID(value);
    if (v186 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E40[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x24BDBD270])
        v187 = CFSTR("=true ");
      else
        v187 = CFSTR("=false ");
      CFStringAppend(Mutable, v187);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableSegmentAwareKernelSectionSplit"), (const void **)&value))
  {
    v188 = CFGetTypeID(value);
    if (v188 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E48[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x24BDBD270])
        v189 = CFSTR("=true ");
      else
        v189 = CFSTR("=false ");
      CFStringAppend(Mutable, v189);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableMILConstantCoalescing"), (const void **)&value))
  {
    v190 = CFGetTypeID(value);
    if (v190 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E78[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x24BDBD270])
        v191 = CFSTR("=true ");
      else
        v191 = CFSTR("=false ");
      CFStringAppend(Mutable, v191);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableL2BatchSplitting"), (const void **)&value))
  {
    v192 = CFGetTypeID(value);
    if (v192 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E80[0], 0x8000100u);
      if (value == (void *)*MEMORY[0x24BDBD270])
        v193 = CFSTR("=true ");
      else
        v193 = CFSTR("=false ");
      CFStringAppend(Mutable, v193);
    }
  }
  if (CFDictionaryGetValueIfPresent(a1, CFSTR("EnableLowEffortCPAllocation"), (const void **)&value))
  {
    v194 = CFGetTypeID(value);
    if (v194 == CFBooleanGetTypeID())
    {
      CFStringAppend(Mutable, CFSTR("--"));
      CFStringAppendCString(Mutable, off_254518E98, 0x8000100u);
      if (value == (void *)*MEMORY[0x24BDBD270])
        v195 = CFSTR("=true ");
      else
        v195 = CFSTR("=false ");
      CFStringAppend(Mutable, v195);
    }
  }
  return Mutable;
}

void sub_206E70B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFString *ANECCreateCompilerInputCFString(const __CFDictionary *a1)
{
  const __CFAllocator *v2;
  CFMutableStringRef Mutable;
  __CFString *v4;
  CFTypeID v5;
  const __CFArray *v6;
  CFIndex v7;
  CFTypeID v8;
  const __CFDictionary *v9;
  int v10;
  void **v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  const __CFString *v19;
  int v20;
  void **v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  const __CFString *v29;
  std::string v31;
  void *__p[2];
  int64_t v33;
  std::string v34;
  void *v35[2];
  uint64_t v36;
  void *value;

  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v4 = Mutable;
  if (a1)
  {
    if (Mutable)
    {
      value = 0;
      if (CFDictionaryGetValueIfPresent(a1, CFSTR("InputNetworks"), (const void **)&value))
      {
        v5 = CFGetTypeID(value);
        if (v5 == CFArrayGetTypeID())
        {
          v6 = (const __CFArray *)value;
          if (CFArrayGetCount((CFArrayRef)value) >= 1)
          {
            v7 = 0;
            do
            {
              value = (void *)CFArrayGetValueAtIndex(v6, v7);
              v8 = CFGetTypeID(value);
              if (v8 == CFDictionaryGetTypeID())
              {
                v9 = (const __CFDictionary *)value;
                v35[0] = 0;
                v35[1] = 0;
                v36 = 0;
                if (!ANECGetFileName((const __CFDictionary *)value, CFSTR("NetworkSourceFileName"), CFSTR("NetworkSourcePath"), v35))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v34, "-i ");
                  v10 = SHIBYTE(v36);
                  v11 = (void **)v35[0];
                  std::string::basic_string[abi:ne180100]<0>(&v31, " ");
                  if (v10 >= 0)
                    v12 = v35;
                  else
                    v12 = v11;
                  v13 = strlen((const char *)v12);
                  v14 = std::string::insert(&v31, 0, (const std::string::value_type *)v12, v13);
                  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
                  v33 = v14->__r_.__value_.__r.__words[2];
                  *(_OWORD *)__p = v15;
                  v14->__r_.__value_.__l.__size_ = 0;
                  v14->__r_.__value_.__r.__words[2] = 0;
                  v14->__r_.__value_.__r.__words[0] = 0;
                  if (v33 >= 0)
                    v16 = __p;
                  else
                    v16 = (void **)__p[0];
                  if (v33 >= 0)
                    v17 = HIBYTE(v33);
                  else
                    v17 = (std::string::size_type)__p[1];
                  std::string::append(&v34, (const std::string::value_type *)v16, v17);
                  if (SHIBYTE(v33) < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v31.__r_.__value_.__l.__data_);
                  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v18 = &v34;
                  else
                    v18 = (std::string *)v34.__r_.__value_.__r.__words[0];
                  v19 = CFStringCreateWithCString(v2, (const char *)v18, 0x8000100u);
                  CFStringAppend(v4, v19);
                  CFRelease(v19);
                  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v34.__r_.__value_.__l.__data_);
                }
                if (!ANECGetFileName(v9, CFSTR("NetworkJITShapesName"), CFSTR("NetworkJITShapesPath"), v35))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v34, "-s ");
                  v20 = SHIBYTE(v36);
                  v21 = (void **)v35[0];
                  std::string::basic_string[abi:ne180100]<0>(&v31, " ");
                  if (v20 >= 0)
                    v22 = v35;
                  else
                    v22 = v21;
                  v23 = strlen((const char *)v22);
                  v24 = std::string::insert(&v31, 0, (const std::string::value_type *)v22, v23);
                  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
                  v33 = v24->__r_.__value_.__r.__words[2];
                  *(_OWORD *)__p = v25;
                  v24->__r_.__value_.__l.__size_ = 0;
                  v24->__r_.__value_.__r.__words[2] = 0;
                  v24->__r_.__value_.__r.__words[0] = 0;
                  if (v33 >= 0)
                    v26 = __p;
                  else
                    v26 = (void **)__p[0];
                  if (v33 >= 0)
                    v27 = HIBYTE(v33);
                  else
                    v27 = (std::string::size_type)__p[1];
                  std::string::append(&v34, (const std::string::value_type *)v26, v27);
                  if (SHIBYTE(v33) < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v31.__r_.__value_.__l.__data_);
                  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v28 = &v34;
                  else
                    v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
                  v29 = CFStringCreateWithCString(v2, (const char *)v28, 0x8000100u);
                  CFStringAppend(v4, v29);
                  CFRelease(v29);
                  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v34.__r_.__value_.__l.__data_);
                }
                CFDictionaryGetValueIfPresent(v9, CFSTR("OutputBinary"), (const void **)&value);
                if (SHIBYTE(v36) < 0)
                  operator delete(v35[0]);
              }
              ++v7;
            }
            while (v7 < CFArrayGetCount(v6));
          }
        }
      }
    }
  }
  return v4;
}

void sub_206E70EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

__CFString *ANECCreateCompilerInputsCFString(const __CFDictionary *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  __CFString *v5;
  void *p_p;
  const __CFString *v7;
  uint64_t v8;
  void *__p;
  uint64_t v11;
  uint64_t v12;

  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v4 = Mutable;
  if (Mutable)
  {
    CFStringAppend(Mutable, CFSTR("zin_ane_compiler "));
    if (a1)
    {
      v5 = ANECCreateCompilerInputCFString(a1);
      CFStringAppend(v4, v5);
      CFRelease(v5);
      __p = 0;
      v11 = 0;
      v12 = 0;
      if (!ANECGetFileName(a1, CFSTR("OutputFileName"), CFSTR("OutputFilePath"), &__p))
      {
        p_p = &__p;
        if (v12 < 0)
          p_p = __p;
        v7 = CFStringCreateWithFormat(v2, 0, CFSTR("-o %s "), p_p);
        v8 = HIBYTE(v12);
        if (v12 < 0)
          v8 = v11;
        if (v8)
          CFStringAppend(v4, v7);
        CFRelease(v7);
      }
      if (SHIBYTE(v12) < 0)
        operator delete(__p);
    }
  }
  return v4;
}

void sub_206E71060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFDictionary *ANECCreateCompilerInputDictionary(uint64_t a1)
{
  const __CFAllocator *v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *Mutable;
  __CFArray *v6;
  __CFDictionary *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  CFStringRef v11;
  CFStringRef v12;
  uint64_t v13;
  int v14;
  const char *v15;
  CFStringRef v16;
  CFStringRef v17;
  uint64_t v18;
  int v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  CFStringRef v24;
  CFStringRef v25;
  _OWORD v27[8];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v6 = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
  v7 = CFDictionaryCreateMutable(v2, 0, v3, v4);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    if (v9 >= 0)
      v10 = (const char *)a1;
    else
      v10 = *(const char **)a1;
    v11 = CFStringCreateWithCString(0, v10, 0x8000100u);
    v12 = CFStringCreateWithCString(0, (const char *)v27, 0x8000100u);
    CFDictionaryAddValue(v7, CFSTR("NetworkSourceFileName"), v11);
    CFDictionaryAddValue(v7, CFSTR("NetworkSourcePath"), v12);
    CFRelease(v12);
    CFRelease(v11);
  }
  v13 = *(unsigned __int8 *)(a1 + 71);
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a1 + 56);
  if (v13)
  {
    if (v14 >= 0)
      v15 = (const char *)(a1 + 48);
    else
      v15 = *(const char **)(a1 + 48);
    v16 = CFStringCreateWithCString(0, v15, 0x8000100u);
    v17 = CFStringCreateWithCString(0, (const char *)v27, 0x8000100u);
    CFDictionaryAddValue(v7, CFSTR("NetworkJITShapesName"), v16);
    CFDictionaryAddValue(v7, CFSTR("NetworkJITShapesPath"), v17);
    CFRelease(v17);
    CFRelease(v16);
  }
  CFArrayAppendValue(v6, v7);
  CFRelease(v7);
  CFDictionaryAddValue(Mutable, CFSTR("InputNetworks"), v6);
  CFRelease(v6);
  v18 = *(unsigned __int8 *)(a1 + 47);
  v19 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a1 + 32);
  if (v18)
  {
    v22 = *(const char **)(a1 + 24);
    v21 = (const char *)(a1 + 24);
    v20 = v22;
    if (v19 >= 0)
      v23 = v21;
    else
      v23 = v20;
    v24 = CFStringCreateWithCString(0, v23, 0x8000100u);
    v25 = CFStringCreateWithCString(0, &byte_207AF6795, 0x8000100u);
    CFDictionaryAddValue(Mutable, CFSTR("OutputFileName"), v24);
    CFDictionaryAddValue(Mutable, CFSTR("OutputFilePath"), v25);
    CFRelease(v24);
    CFRelease(v25);
  }
  return Mutable;
}

__CFDictionary *ANECCreateCompilerOptionDictionary(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void **v5;
  const char *v6;
  CFStringRef v7;
  const void **v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  uint64_t v13;
  int v14;
  const char *v15;
  CFStringRef v16;
  uint64_t v17;
  int v18;
  int *v19;
  int v22;
  int v23;
  const void **v25;
  const void **v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  const void **v31;
  const void *v32;
  const void *v33;
  uint64_t v34;
  int v35;
  int *v36;
  int v37;
  int v38;
  uint64_t v40;
  int v41;
  int *v42;
  int v45;
  int v46;
  const void **v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  int v52;
  const void **v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  const void *v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  const void **v61;
  _QWORD *v62;
  CFNumberRef v63;
  const __CFString *v64;
  const __CFString *v65;
  __CFDictionary *v66;
  _QWORD *v67;
  _BOOL8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  const void *v78;
  const void *v79;
  const void *v80;
  const void *v81;
  const void *v82;
  const void *v83;
  std::string *p_valuePtr;
  CFStringRef v85;
  std::string *v86;
  CFStringRef v87;
  CFNumberRef v88;
  const void *v89;
  const void *v90;
  const void *v91;
  uint64_t v92;
  std::string *v93;
  CFStringRef v94;
  const void **v95;
  const void *v96;
  const void **v97;
  int v98;
  uint64_t v99;
  const void **v100;
  const void *v101;
  const void *v102;
  _BOOL8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  CFNumberRef v111;
  std::string::size_type size;
  std::string *v113;
  _BOOL4 v114;
  const __CFString *v115;
  std::string::size_type v116;
  std::string *v117;
  _BOOL4 v118;
  std::string::size_type v119;
  std::string *v120;
  int data;
  int v122;
  _BOOL4 v124;
  std::string::size_type v125;
  std::string *v126;
  _BOOL4 v127;
  std::string::size_type v128;
  std::string *v129;
  std::string::size_type v130;
  uint64_t v131;
  _BOOL4 v133;
  std::string::size_type v134;
  std::string *v135;
  std::string::size_type v136;
  uint64_t v137;
  _BOOL4 v139;
  _BOOL4 v140;
  CFNumberRef v141;
  CFNumberRef v142;
  CFNumberRef v143;
  const void *v144;
  CFNumberRef v145;
  const void **v146;
  int v147;
  uint64_t v148;
  const __CFString *v149;
  const void *v150;
  const void *v151;
  const void *v152;
  _BOOL8 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const void *v161;
  const void *v162;
  const void *v163;
  CFNumberRef v164;
  const void *v165;
  const char *v166;
  CFStringRef v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  BOOL v171;
  CFStringRef v172;
  const void *v173;
  const void *v174;
  _BOOL4 v176;
  uint64_t v177;
  unint64_t v178;
  __CFDictionary *v179;
  CFNumberRef v180;
  __CFArray *v181;
  __CFArray *v182;
  _BOOL8 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  CFMutableArrayRef theArray;
  std::string valuePtr;
  std::string *v193;

  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v4 = Mutable;
  v5 = (const void **)MEMORY[0x24BDBD270];
  if (*(_DWORD *)(a1 + 316))
    CFDictionaryAddValue(Mutable, CFSTR("UndefinedSymbolsBehaviorUseFVMLibs"), (const void *)*MEMORY[0x24BDBD270]);
  if (*(_DWORD *)(a1 + 320))
    CFDictionaryAddValue(v4, CFSTR("ForceCoalescedExternSections"), *v5);
  if (*(_DWORD *)(a1 + 324))
    CFDictionaryAddValue(v4, CFSTR("DisableInputsSectionsCoalesce"), *v5);
  if (*(_BYTE *)(a1 + 369))
    CFDictionaryAddValue(v4, CFSTR("DisableNetworkImbalanceAnalysis"), *v5);
  if (*(_BYTE *)(a1 + 370))
    CFDictionaryAddValue(v4, CFSTR("DumpStatusDictionaryToFile"), *v5);
  if (*(char *)(a1 + 95) >= 0)
    v6 = (const char *)(a1 + 72);
  else
    v6 = *(const char **)(a1 + 72);
  v7 = CFStringCreateWithCString(v2, v6, 0x8000100u);
  CFDictionaryAddValue(v4, CFSTR("TargetArchitecture"), v7);
  CFRelease(v7);
  if (*(_BYTE *)(a1 + 128))
    CFDictionaryAddValue(v4, CFSTR("DisableContextSwitching"), *v5);
  if (*(_BYTE *)(a1 + 129))
    CFDictionaryAddValue(v4, CFSTR("DebugContextSwitchingDma"), *v5);
  if (*(_BYTE *)(a1 + 130))
    CFDictionaryAddValue(v4, CFSTR("SetIsSecureNetwork"), *v5);
  if (*(_BYTE *)(a1 + 132))
    CFDictionaryAddValue(v4, CFSTR("DisableMergeConstants"), *v5);
  v8 = (const void **)MEMORY[0x24BDBD268];
  if (!*(_DWORD *)(a1 + 124))
    CFDictionaryAddValue(v4, CFSTR("FoldScale"), (const void *)*MEMORY[0x24BDBD268]);
  if ((*(_QWORD *)(a1 + 136) & 0x8000000000000000) == 0)
  {
    v9 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 136));
    CFDictionaryAddValue(v4, CFSTR("ForceHazardStallsBegin"), v9);
    CFRelease(v9);
  }
  if ((*(_QWORD *)(a1 + 144) & 0x8000000000000000) == 0)
  {
    v10 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 144));
    CFDictionaryAddValue(v4, CFSTR("ForceHazardStallsEnd"), v10);
    CFRelease(v10);
  }
  if ((*(_DWORD *)(a1 + 540) & 0x80000000) == 0)
  {
    v11 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 540));
    CFDictionaryAddValue(v4, CFSTR("MaxTdCount"), v11);
    CFRelease(v11);
  }
  if ((*(_DWORD *)(a1 + 544) & 0x80000000) == 0)
  {
    v12 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 544));
    CFDictionaryAddValue(v4, CFSTR("MaxSegmentSize"), v12);
    CFRelease(v12);
  }
  if (*(_BYTE *)(a1 + 152))
    CFDictionaryAddValue(v4, CFSTR("ProduceRelocatableObjects"), *v5);
  v13 = *(unsigned __int8 *)(a1 + 447);
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a1 + 432);
  if (v13)
  {
    if (v14 >= 0)
      v15 = (const char *)(a1 + 424);
    else
      v15 = *(const char **)(a1 + 424);
    v16 = CFStringCreateWithCString(v2, v15, 0x8000100u);
    CFDictionaryAddValue(v4, CFSTR("ProcedureName"), v16);
    CFRelease(v16);
  }
  v17 = *(unsigned __int8 *)(a1 + 183);
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a1 + 168);
  if (v17 == 7)
  {
    if (v18 >= 0)
      v19 = (int *)(a1 + 160);
    else
      v19 = *(int **)(a1 + 160);
    if (*v19 == 1701996134 && *(int *)((char *)v19 + 3) == 1702065509)
    {
      v25 = (const void **)&kANECDramAllocatorTypeFirstFitReuse;
    }
    else if (*v19 == 1701996130 && *(int *)((char *)v19 + 3) == 1702065509)
    {
      v25 = (const void **)&kANECDramAllocatorTypeBestFitReuse;
    }
    else
    {
      v22 = *v19;
      v23 = *(int *)((char *)v19 + 3);
      if (v22 != 1701998446 || v23 != 1702065509)
        goto LABEL_64;
      v25 = (const void **)&kANECDramAllocatorTypeNoReuse;
    }
    CFDictionaryAddValue(v4, CFSTR("DramAllocatorType"), *v25);
  }
LABEL_64:
  v26 = (const void **)(a1 + 184);
  v27 = *(char *)(a1 + 207);
  if (v27 >= 0)
    v28 = *(unsigned __int8 *)(a1 + 207);
  else
    v28 = *(_QWORD *)(a1 + 192);
  switch(v28)
  {
    case 11:
      if (v27 >= 0)
        v32 = (const void *)(a1 + 184);
      else
        v32 = *v26;
      if (!memcmp(v32, "costofreads", 0xBuLL))
      {
        v31 = (const void **)&kANECDramTensorPriorityTypeCostOfRead;
LABEL_90:
        CFDictionaryAddValue(v4, CFSTR("DramTensorPriorityType"), *v31);
      }
      break;
    case 17:
      if (v27 >= 0)
        v33 = (const void *)(a1 + 184);
      else
        v33 = *v26;
      if (!memcmp(v33, "sizethenliverange", 0x11uLL))
      {
        v31 = (const void **)&kANECDramTensorPriorityTypeSizeThenLiveRange;
        goto LABEL_90;
      }
      break;
    case 15:
      if (v27 >= 0)
        v29 = (_QWORD *)(a1 + 184);
      else
        v29 = *v26;
      if (*v29 == 0x63666F726564726FLL && *(_QWORD *)((char *)v29 + 7) == 0x6E6F697461657263)
      {
        v31 = (const void **)&kANECDramTensorPriorityTypeOrderOfCreation;
      }
      else
      {
        if (memcmp(v29, "sizebyliverange", 0xFuLL))
          break;
        v31 = (const void **)&kANECDramTensorPriorityTypeSizeByLiveRange;
      }
      goto LABEL_90;
    default:
      break;
  }
  v34 = *(unsigned __int8 *)(a1 + 263);
  v35 = (char)v34;
  if ((v34 & 0x80u) != 0)
    v34 = *(_QWORD *)(a1 + 248);
  if (v34 == 7)
  {
    v36 = v35 >= 0 ? (int *)(a1 + 240) : *(int **)(a1 + 240);
    v37 = *v36;
    v38 = *(int *)((char *)v36 + 3);
    if (v37 == 1701996130 && v38 == 1702065509)
      CFDictionaryAddValue(v4, CFSTR("L2AllocatorType"), CFSTR("BestFitReuse"));
  }
  v40 = *(unsigned __int8 *)(a1 + 295);
  v41 = (char)v40;
  if ((v40 & 0x80u) != 0)
    v40 = *(_QWORD *)(a1 + 280);
  if (v40 == 7)
  {
    if (v41 >= 0)
      v42 = (int *)(a1 + 272);
    else
      v42 = *(int **)(a1 + 272);
    if (*v42 == 1701996134 && *(int *)((char *)v42 + 3) == 1702065509)
    {
      v48 = (const void **)&kANECL3AllocatorTypeFirstFitReuse;
    }
    else if (*v42 == 1701996130 && *(int *)((char *)v42 + 3) == 1702065509)
    {
      v48 = (const void **)&kANECL3AllocatorTypeBestFitReuse;
    }
    else
    {
      v45 = *v42;
      v46 = *(int *)((char *)v42 + 3);
      if (v45 != 1701998446 || v46 != 1702065509)
        goto LABEL_126;
      v48 = (const void **)&kANECL3AllocatorTypeNoReuse;
    }
    CFDictionaryAddValue(v4, CFSTR("L3AllocatorType"), *v48);
  }
LABEL_126:
  if (*(_DWORD *)(a1 + 96))
  {
    v49 = CFNumberCreate(v2, kCFNumberSInt32Type, (const void *)(a1 + 96));
    CFDictionaryAddValue(v4, CFSTR("DebugMask"), v49);
    CFRelease(v49);
  }
  if ((*(_QWORD *)(a1 + 296) & 0x8000000000000000) == 0)
  {
    v50 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 296));
    CFDictionaryAddValue(v4, CFSTR("L2Size"), v50);
    CFRelease(v50);
  }
  if ((*(_QWORD *)(a1 + 304) & 0x8000000000000000) == 0)
  {
    v51 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 304));
    CFDictionaryAddValue(v4, CFSTR("L3Size"), v51);
    CFRelease(v51);
  }
  v52 = *(_DWORD *)(a1 + 328);
  if (!v52)
  {
    CFDictionaryAddValue(v4, CFSTR("DisableOptimizations"), *v5);
    v52 = *(_DWORD *)(a1 + 328);
  }
  if (v52 == 1)
    CFDictionaryAddValue(v4, CFSTR("OptLvlOne"), *v5);
  if (ZinIrCompilerParameters::getDisableMergeScaleBias((ZinIrCompilerParameters *)a1))
    CFDictionaryAddValue(v4, CFSTR("DisableMergeScaleBias"), *v5);
  if (*(_BYTE *)(a1 + 153))
    CFDictionaryAddValue(v4, CFSTR("DisableMergeActivation"), *v5);
  if (*(_BYTE *)(a1 + 154))
    CFDictionaryAddValue(v4, CFSTR("DisableDeadCodeElimination"), *v5);
  if (*(_BYTE *)(a1 + 155))
    CFDictionaryAddValue(v4, CFSTR("DisableStrideUnitarization"), *v5);
  if (*(_BYTE *)(a1 + 156))
    CFDictionaryAddValue(v4, CFSTR("DisableAdjustInterleaveFactor"), *v5);
  if (*(_BYTE *)(a1 + 157))
    CFDictionaryAddValue(v4, CFSTR("DisableCompression"), *v5);
  if (*(_BYTE *)(a1 + 158))
    CFDictionaryAddValue(v4, CFSTR("DisableBondedNetworks"), *v5);
  if (ZinIrCompilerParameters::getEnableKernelRewind((ZinIrCompilerParameters *)a1))
    v53 = v5;
  else
    v53 = v8;
  CFDictionaryAddValue(v4, CFSTR("EnableKernelRewind"), *v53);
  if (*(_BYTE *)(a1 + 121))
    CFDictionaryAddValue(v4, CFSTR("DumpFusionBoundaryInfo"), *v5);
  if (*(double *)(a1 + 104) > 0.0)
  {
    v54 = CFNumberCreate(v2, kCFNumberDoubleType, (const void *)(a1 + 104));
    CFDictionaryAddValue(v4, CFSTR("NeFrequency"), v54);
    CFRelease(v54);
  }
  if ((*(_DWORD *)(a1 + 112) & 0x80000000) == 0)
  {
    v55 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 112));
    CFDictionaryAddValue(v4, CFSTR("PstateDCSLevel"), v55);
    CFRelease(v55);
  }
  if ((*(_DWORD *)(a1 + 116) & 0x80000000) == 0)
  {
    v56 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 116));
    CFDictionaryAddValue(v4, CFSTR("PstateSOCLevel"), v56);
    CFRelease(v56);
  }
  if (*(_BYTE *)(a1 + 100))
  {
    v57 = *v5;
    CFDictionaryAddValue(v4, CFSTR("CompileANEProgramForDebugging"), *v5);
    if (*(_BYTE *)(a1 + 101))
      CFDictionaryAddValue(v4, CFSTR("GenerateStaticPerfAnalytics"), v57);
    if (*(_BYTE *)(a1 + 102))
      CFDictionaryAddValue(v4, CFSTR("GenerateAnalyticsBuffer"), v57);
    if (*(_BYTE *)(a1 + 120))
      CFDictionaryAddValue(v4, CFSTR("AbortOnLayerTrackerError"), v57);
  }
  v58 = (_QWORD *)(a1 + 216);
  v59 = *(char *)(a1 + 239);
  if (v59 >= 0)
    v60 = *(unsigned __int8 *)(a1 + 239);
  else
    v60 = *(_QWORD *)(a1 + 224);
  if (v60 != 15)
  {
    if (v60 != 11)
    {
      if (v60 == 8)
      {
        if (v59 < 0)
          v58 = (_QWORD *)*v58;
        if (*v58 == 0x746E656469736572)
        {
          v61 = (const void **)&kANECL2CacheModeEnableResident;
LABEL_194:
          CFDictionaryAddValue(v4, CFSTR("L2CacheMode"), *v61);
          goto LABEL_197;
        }
      }
      goto LABEL_191;
    }
    if (v59 >= 0)
      v67 = (_QWORD *)(a1 + 216);
    else
      v67 = (_QWORD *)*v58;
    if (!memcmp(v67, "nonresident", 0xBuLL))
    {
      v61 = (const void **)&kANECL2CacheModeDisableResident;
      goto LABEL_194;
    }
    if (*v67 != 0x7277646568636163 || *(_QWORD *)((char *)v67 + 3) != 0x6574697277646568)
      goto LABEL_191;
    CFDictionaryAddValue(v4, CFSTR("L2CacheMode"), CFSTR("L2EnableCachedWrite"));
    valuePtr.__r_.__value_.__r.__words[0] = 0;
    v63 = CFNumberCreate(v2, kCFNumberSInt64Type, &valuePtr);
    v64 = CFSTR("ForceHazardStallsBegin");
    v66 = v4;
    v65 = (const __CFString *)v63;
LABEL_196:
    CFDictionaryAddValue(v66, v64, v65);
    CFRelease(v63);
    goto LABEL_197;
  }
  if (v59 >= 0)
    v62 = (_QWORD *)(a1 + 216);
  else
    v62 = (_QWORD *)*v58;
  if (!memcmp(v62, "cachedreadwrite", 0xFuLL))
  {
    valuePtr.__r_.__value_.__r.__words[0] = 0;
    v63 = CFNumberCreate(v2, kCFNumberSInt64Type, &valuePtr);
    CFDictionaryAddValue(v4, CFSTR("ForceHazardStallsBegin"), v63);
    v64 = CFSTR("L2CacheMode");
    v65 = CFSTR("L2EnabledCachedReadWrite");
    v66 = v4;
    goto LABEL_196;
  }
LABEL_191:
  v69 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v69)
    ANECCreateCompilerOptionDictionary_cold_4(v69, v70, v71, v72, v73, v74, v75, v76);
LABEL_197:
  v77 = *v5;
  v78 = *v8;
  if (*(_DWORD *)(a1 + 264))
    v79 = *v8;
  else
    v79 = v77;
  CFDictionaryAddValue(v4, CFSTR("DisableL2Wraparound"), v79);
  if (*(_DWORD *)(a1 + 312))
    v80 = v78;
  else
    v80 = v77;
  CFDictionaryAddValue(v4, CFSTR("DisableL2BankConflictOpt"), v80);
  if (*(_BYTE *)(a1 + 364))
    v81 = v78;
  else
    v81 = v77;
  CFDictionaryAddValue(v4, CFSTR("InputAndConstantCaching"), v81);
  if (ZinIrCompilerParameters::getSingleChannelEWOpCopyRemoval((ZinIrCompilerParameters *)a1))
    v82 = v77;
  else
    v82 = v78;
  CFDictionaryAddValue(v4, CFSTR("EnableSingleChannelElementwiseOpCopyRemoval"), v82);
  if (ZinIrCompilerParameters::getAggressiveTensorCaching((ZinIrCompilerParameters *)a1))
    v83 = v77;
  else
    v83 = v78;
  CFDictionaryAddValue(v4, CFSTR("EnableAggressiveTensorCaching"), v83);
  if (ZinIrCompilerParameters::getScanWeightsForCompression((ZinIrCompilerParameters *)a1))
    CFDictionaryAddValue(v4, CFSTR("CompressSparseKernels"), v77);
  if (*(_BYTE *)(a1 + 495))
    CFDictionaryAddValue(v4, CFSTR("DisableOnTheFlySparseEncoding"), v77);
  if (*(_BYTE *)(a1 + 496))
    CFDictionaryAddValue(v4, CFSTR("DisableWinograd"), v77);
  if (*(_BYTE *)(a1 + 498))
    CFDictionaryAddValue(v4, CFSTR("EnableDramLogEventsOnly"), v77);
  if (*(_BYTE *)(a1 + 499))
    CFDictionaryAddValue(v4, CFSTR("EnableMulticastBruteforceSearch"), v77);
  if (*(_DWORD *)(a1 + 500))
  {
    ZinIrCompilerParamsUtils::PerfTracerConfigToString((int *)(a1 + 500), &valuePtr);
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_valuePtr = &valuePtr;
    else
      p_valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    v85 = CFStringCreateWithCString(v2, (const char *)p_valuePtr, 0x8000100u);
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    CFDictionaryAddValue(v4, CFSTR("PerfTracer1Config"), v85);
    CFRelease(v85);
  }
  if (*(_DWORD *)(a1 + 512))
  {
    ZinIrCompilerParamsUtils::PerfTracerConfigToString((int *)(a1 + 512), &valuePtr);
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = &valuePtr;
    else
      v86 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    v87 = CFStringCreateWithCString(v2, (const char *)v86, 0x8000100u);
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    CFDictionaryAddValue(v4, CFSTR("PerfTracer2Config"), v87);
    CFRelease(v87);
  }
  if (*(_BYTE *)(a1 + 524))
    CFDictionaryAddValue(v4, CFSTR("DisableDRAMInputFIFO"), v77);
  if (*(_BYTE *)(a1 + 525))
    CFDictionaryAddValue(v4, CFSTR("AggressiveScaleFusion"), v77);
  if (*(_BYTE *)(a1 + 526))
    CFDictionaryAddValue(v4, CFSTR("EnableTaskSchedulerExp"), v77);
  if (*(_BYTE *)(a1 + 527))
    CFDictionaryAddValue(v4, CFSTR("EnableAggressiveNETransposeFusion"), v77);
  if (*(_BYTE *)(a1 + 528))
    CFDictionaryAddValue(v4, CFSTR("EnableControlFlowOps"), v77);
  if (*(_BYTE *)(a1 + 529))
    CFDictionaryAddValue(v4, CFSTR("DisableDartThrashingOptimizer"), v77);
  if (*(_BYTE *)(a1 + 530))
    CFDictionaryAddValue(v4, CFSTR("EnableDramInplaceAllocation"), v77);
  if (*(_BYTE *)(a1 + 531))
    CFDictionaryAddValue(v4, CFSTR("EnableGlobalChannelSplitting"), v77);
  if (*(_DWORD *)(a1 + 208) != 88)
  {
    v88 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 208));
    CFDictionaryAddValue(v4, CFSTR("DramFragmentationFactor"), v88);
    CFRelease(v88);
  }
  if (*(_BYTE *)(a1 + 532))
    CFDictionaryAddValue(v4, CFSTR("UseExtendedMachoFormat"), v77);
  if (*(_BYTE *)(a1 + 533))
    CFDictionaryAddValue(v4, CFSTR("EnableAdvancedKernelRefinement"), v77);
  if (*(_BYTE *)(a1 + 534))
    v89 = v77;
  else
    v89 = v78;
  CFDictionaryAddValue(v4, CFSTR("EnableL2BatchSplitting"), v89);
  if (*(_BYTE *)(a1 + 535))
    v90 = v77;
  else
    v90 = v78;
  CFDictionaryAddValue(v4, CFSTR("EnableGlobalCWOptimization"), v90);
  if (*(_BYTE *)(a1 + 536))
    v91 = v77;
  else
    v91 = v78;
  CFDictionaryAddValue(v4, CFSTR("EnableL2CachedBuffer"), v91);
  v92 = *(_QWORD *)(a1 + 548);
  if ((v92 & 0xFF00000000) != 0)
  {
    E4M3OverflowToString(v92, &valuePtr);
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v93 = &valuePtr;
    else
      v93 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    v94 = CFStringCreateWithCString(v2, (const char *)v93, 0x8000100u);
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    CFDictionaryAddValue(v4, CFSTR("E4M3Overflow"), v94);
    CFRelease(v94);
  }
  if (*(_BYTE *)(a1 + 131))
    v95 = (const void **)&kANECSignatureDisabled;
  else
    v95 = (const void **)&kANECSignatureIdent;
  CFDictionaryAddValue(v4, CFSTR("Signature"), *v95);
  if (*(_DWORD *)(a1 + 332))
    v96 = v77;
  else
    v96 = v78;
  CFDictionaryAddValue(v4, CFSTR("UseNewMachoMagicNumber"), v96);
  v97 = (const void **)(a1 + 336);
  v98 = *(char *)(a1 + 359);
  if (v98 >= 0)
    v99 = *(unsigned __int8 *)(a1 + 359);
  else
    v99 = *(_QWORD *)(a1 + 344);
  if (v99)
  {
    if (v99 == 6)
    {
      if (v98 >= 0)
        v102 = (const void *)(a1 + 336);
      else
        v102 = *v97;
      if (!memcmp(v102, "Simple", 6uLL))
      {
        v100 = (const void **)&kANECMemCacheStrategySimple;
        goto LABEL_302;
      }
    }
    else if (v99 == 4)
    {
      if (v98 < 0)
        v97 = (const void **)*v97;
      if (*(_DWORD *)v97 == 1701736270)
      {
        v100 = (const void **)&kANECMemCacheStrategyNone;
LABEL_302:
        CFDictionaryAddValue(v4, CFSTR("MemCacheStrategy"), *v100);
        goto LABEL_303;
      }
    }
  }
  else
  {
    if (v98 >= 0)
      v101 = (const void *)(a1 + 336);
    else
      v101 = *v97;
    if (!memcmp(v101, &byte_207AF6795, 0))
      goto LABEL_303;
  }
  v103 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v103)
    ANECCreateCompilerOptionDictionary_cold_3(v103, v104, v105, v106, v107, v108, v109, v110);
LABEL_303:
  if ((*(_DWORD *)(a1 + 360) & 0x80000000) == 0)
  {
    v111 = CFNumberCreate(v2, kCFNumberSInt32Type, (const void *)(a1 + 360));
    CFDictionaryAddValue(v4, CFSTR("MemCacheSize"), v111);
    CFRelease(v111);
  }
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  size = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = valuePtr.__r_.__value_.__l.__size_;
  if (size != 8)
  {
    v114 = 0;
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_315;
LABEL_313:
    if (!v114)
      goto LABEL_316;
LABEL_314:
    v115 = CFSTR("Disabled");
LABEL_391:
    CFDictionaryAddValue(v4, CFSTR("SpatialSplit"), v115);
    goto LABEL_392;
  }
  v113 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v113 = &valuePtr;
  v114 = v113->__r_.__value_.__r.__words[0] == 0x64656C6261736964;
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_313;
LABEL_315:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
  if (v114)
    goto LABEL_314;
LABEL_316:
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  v116 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v116 = valuePtr.__r_.__value_.__l.__size_;
  if (v116 != 4)
  {
    v118 = 0;
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_326;
LABEL_324:
    if (!v118)
      goto LABEL_327;
    goto LABEL_325;
  }
  v117 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v117 = &valuePtr;
  v118 = LODWORD(v117->__r_.__value_.__l.__data_) == 1953719668;
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_324;
LABEL_326:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
  if (v118)
  {
LABEL_325:
    v115 = CFSTR("Test");
    goto LABEL_391;
  }
LABEL_327:
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  v119 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v119 = valuePtr.__r_.__value_.__l.__size_;
  if (v119 != 6)
  {
    v124 = 0;
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_343;
LABEL_341:
    if (!v124)
      goto LABEL_344;
    goto LABEL_342;
  }
  v120 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v120 = &valuePtr;
  data = (int)v120->__r_.__value_.__l.__data_;
  v122 = WORD2(v120->__r_.__value_.__r.__words[0]);
  v124 = data == 1869440365 && v122 == 31090;
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_341;
LABEL_343:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
  if (v124)
  {
LABEL_342:
    v115 = CFSTR("Memory");
    goto LABEL_391;
  }
LABEL_344:
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  v125 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v125 = valuePtr.__r_.__value_.__l.__size_;
  if (v125 != 4)
  {
    v127 = 0;
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_353;
    goto LABEL_352;
  }
  v126 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v126 = &valuePtr;
  v127 = LODWORD(v126->__r_.__value_.__l.__data_) == 1869903201;
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
LABEL_352:
    operator delete(valuePtr.__r_.__value_.__l.__data_);
LABEL_353:
  if (v127)
  {
    v115 = CFSTR("Auto");
    goto LABEL_391;
  }
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  v128 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v128 = valuePtr.__r_.__value_.__l.__size_;
  if (v128 == 11)
  {
    v129 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v129 = &valuePtr;
    v130 = v129->__r_.__value_.__r.__words[0];
    v131 = *(std::string::size_type *)((char *)v129->__r_.__value_.__r.__words + 3);
    v133 = v130 == 0x2D636972656E6567 && v131 == 0x6761642D63697265;
  }
  else
  {
    v133 = 0;
  }
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
    operator delete(valuePtr.__r_.__value_.__l.__data_);
  if (v133)
  {
    v115 = CFSTR("GenericDAG");
    goto LABEL_391;
  }
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  v134 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
  if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v134 = valuePtr.__r_.__value_.__l.__size_;
  if (v134 == 15)
  {
    v135 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v135 = &valuePtr;
    v136 = v135->__r_.__value_.__r.__words[0];
    v137 = *(std::string::size_type *)((char *)v135->__r_.__value_.__r.__words + 7);
    v139 = v136 == 0x2D636972656E6567 && v137 == 0x7078652D6761642DLL;
  }
  else
  {
    v139 = 0;
  }
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
    operator delete(valuePtr.__r_.__value_.__l.__data_);
  if (v139)
  {
    v115 = CFSTR("GenericDAGExperimental");
    goto LABEL_391;
  }
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  v140 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&valuePtr.__r_.__value_.__l.__data_, "generic-dag-memory");
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
    operator delete(valuePtr.__r_.__value_.__l.__data_);
  if (v140)
  {
    v115 = CFSTR("GenericDAGMemory");
    goto LABEL_391;
  }
  ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)a1, &valuePtr);
  v176 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&valuePtr.__r_.__value_.__l.__data_, "manual");
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
    operator delete(valuePtr.__r_.__value_.__l.__data_);
  if (v176)
  {
    CFDictionaryAddValue(v4, CFSTR("SpatialSplit"), CFSTR("Manual"));
    theArray = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
    CFDictionaryAddValue(v4, CFSTR("SpatialSplitSubgraphs"), theArray);
    ZinIrCompilerParameters::getSubgraph((ZinIrCompilerParameters *)a1, &valuePtr);
    if (valuePtr.__r_.__value_.__l.__size_ != valuePtr.__r_.__value_.__r.__words[0])
    {
      v177 = 0;
      v178 = 0;
      do
      {
        v179 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        LODWORD(v193) = *(_QWORD *)(valuePtr.__r_.__value_.__r.__words[0] + v177);
        v180 = CFNumberCreate(v2, kCFNumberSInt32Type, &v193);
        CFDictionaryAddValue(v179, CFSTR("HTileCount"), v180);
        CFRelease(v180);
        v181 = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
        ANECCreateCompilerOptionDictionary::$_0::operator()((__int128 **)(valuePtr.__r_.__value_.__r.__words[0] + v177 + 24), v181);
        CFDictionaryAddValue(v179, CFSTR("InputNodes"), v181);
        CFRelease(v181);
        v182 = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
        ANECCreateCompilerOptionDictionary::$_0::operator()((__int128 **)(valuePtr.__r_.__value_.__r.__words[0] + v177 + 48), v182);
        CFDictionaryAddValue(v179, CFSTR("OutputNodes"), v182);
        CFRelease(v182);
        CFArrayAppendValue(theArray, v179);
        CFRelease(v179);
        ++v178;
        v177 += 96;
      }
      while (v178 < 0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(valuePtr.__r_.__value_.__l.__size_ - valuePtr.__r_.__value_.__r.__words[0]) >> 5));
    }
    CFDictionaryAddValue(v4, CFSTR("SpatialSplitSubgraphs"), theArray);
    CFRelease(theArray);
    v193 = &valuePtr;
    std::vector<ZinIrCompilerParameters::SubGraphSpec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
  }
  else
  {
    v183 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v183)
      ANECCreateCompilerOptionDictionary_cold_2(v183, v184, v185, v186, v187, v188, v189, v190);
  }
LABEL_392:
  if ((*(_QWORD *)(a1 + 480) & 0x8000000000000000) == 0)
  {
    v141 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 480));
    CFDictionaryAddValue(v4, CFSTR("EnableCircularBufferInSpatialSplit"), v141);
    CFRelease(v141);
  }
  if (*(_BYTE *)(a1 + 494))
    CFDictionaryAddValue(v4, CFSTR("EnableSpatialSplitInX"), v77);
  if (*(_BYTE *)(a1 + 365))
    CFDictionaryAddValue(v4, CFSTR("UseWideWorkUnits"), v77);
  if (*(_BYTE *)(a1 + 366))
    CFDictionaryAddValue(v4, CFSTR("DisableRegisterPacking"), v77);
  if (*(_BYTE *)(a1 + 367))
    CFDictionaryAddValue(v4, CFSTR("DisableCpAllocation"), v77);
  if (*(float *)(a1 + 388) > 0.0)
  {
    v142 = CFNumberCreate(v2, kCFNumberFloatType, (const void *)(a1 + 388));
    CFDictionaryAddValue(v4, CFSTR("MaxTDLatencyMicroSec"), v142);
    CFRelease(v142);
  }
  if ((*(_QWORD *)(a1 + 392) & 0x8000000000000000) == 0)
  {
    v143 = CFNumberCreate(v2, kCFNumberSInt64Type, (const void *)(a1 + 392));
    CFDictionaryAddValue(v4, CFSTR("BSSLimit"), v143);
    CFRelease(v143);
  }
  if (*(_BYTE *)(a1 + 371))
    v144 = v77;
  else
    v144 = v78;
  CFDictionaryAddValue(v4, CFSTR("OptimizeNEUtilization"), v144);
  v145 = CFNumberCreate(v2, kCFNumberSInt16Type, (const void *)(a1 + 372));
  CFDictionaryAddValue(v4, CFSTR("DisableCachePrefetchMask"), v145);
  CFRelease(v145);
  if (*(_BYTE *)(a1 + 374))
    CFDictionaryAddValue(v4, CFSTR("DisablePerCoutGOCToSingularGOC"), v77);
  v146 = (const void **)(a1 + 400);
  v147 = *(char *)(a1 + 423);
  if (v147 >= 0)
    v148 = *(unsigned __int8 *)(a1 + 423);
  else
    v148 = *(_QWORD *)(a1 + 408);
  if (v148 > 6)
  {
    if (v148 == 7)
    {
      if (v147 >= 0)
        v152 = (const void *)(a1 + 400);
      else
        v152 = *v146;
      if (!memcmp(v152, "ew-perf", 7uLL))
      {
        v149 = CFSTR("EWPerf");
        goto LABEL_440;
      }
    }
    else if (v148 == 14)
    {
      v150 = v147 >= 0 ? (const void *)(a1 + 400) : *v146;
      if (!memcmp(v150, "reduction-perf", 0xEuLL))
      {
        v149 = CFSTR("ReductionPerf");
        goto LABEL_440;
      }
    }
  }
  else if (v148)
  {
    if (v148 == 4)
    {
      if (v147 < 0)
        v146 = (const void **)*v146;
      if (*(_DWORD *)v146 == 1701736302)
      {
        v149 = CFSTR("None");
LABEL_440:
        CFDictionaryAddValue(v4, CFSTR("Optimize"), v149);
        goto LABEL_441;
      }
    }
  }
  else
  {
    if (v147 >= 0)
      v151 = (const void *)(a1 + 400);
    else
      v151 = *v146;
    if (!memcmp(v151, &byte_207AF6795, 0))
      goto LABEL_441;
  }
  v153 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v153)
    ANECCreateCompilerOptionDictionary_cold_1(v153, v154, v155, v156, v157, v158, v159, v160);
LABEL_441:
  if (*(_BYTE *)(a1 + 375))
    CFDictionaryAddValue(v4, CFSTR("DisableSSM"), v77);
  if (*(_BYTE *)(a1 + 384))
    CFDictionaryAddValue(v4, CFSTR("DisableKernelStreaming"), v77);
  if (*(_BYTE *)(a1 + 387))
    CFDictionaryAddValue(v4, CFSTR("EnableSummaryPerformanceStats"), v77);
  if (*(_BYTE *)(a1 + 376))
    v161 = v77;
  else
    v161 = v78;
  CFDictionaryAddValue(v4, CFSTR("OptimizeKernelCoalescing"), v161);
  if (*(_BYTE *)(a1 + 377))
    v162 = v77;
  else
    v162 = v78;
  CFDictionaryAddValue(v4, CFSTR("OptimizeMutableKernelSection"), v162);
  if (*(_BYTE *)(a1 + 378))
    v163 = v77;
  else
    v163 = v78;
  CFDictionaryAddValue(v4, CFSTR("SplitKernelSection"), v163);
  if ((*(_DWORD *)(a1 + 380) & 0x80000000) == 0)
  {
    v164 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 380));
    CFDictionaryAddValue(v4, CFSTR("MaxKernelSectionSize"), v164);
    CFRelease(v164);
  }
  if (*(_BYTE *)(a1 + 386))
  {
    if (*(_BYTE *)(a1 + 385))
      v165 = v77;
    else
      v165 = v78;
    CFDictionaryAddValue(v4, CFSTR("CompilerMultithreading"), v165);
  }
  if (*(_BYTE *)(a1 + 736))
  {
    if (*(char *)(a1 + 767) >= 0)
      v166 = (const char *)(a1 + 744);
    else
      v166 = *(const char **)(a1 + 744);
    v167 = CFStringCreateWithCString(v2, v166, 0x8000100u);
    CFDictionaryAddValue(v4, CFSTR("OptionsFilePath"), v167);
    CFRelease(v167);
  }
  v168 = *(unsigned __int8 *)(a1 + 471);
  v169 = (v168 & 0x80u) != 0;
  if ((v168 & 0x80u) != 0)
    v168 = *(_QWORD *)(a1 + 456);
  if (v169)
    v170 = *(_QWORD *)(a1 + 448);
  else
    v170 = a1 + 448;
  if (v168 != 6
    || (*(_DWORD *)v170 == 1952543827 ? (v171 = *(unsigned __int16 *)(v170 + 4) == 25449) : (v171 = 0), !v171))
  {
    v172 = CFStringCreateWithCString(v2, (const char *)v170, 0x8000100u);
    CFDictionaryAddValue(v4, CFSTR("SeedEncoding"), v172);
    CFRelease(v172);
  }
  if (*(_BYTE *)(a1 + 488))
    CFDictionaryAddValue(v4, CFSTR("DisableNEWidthSlicing"), v77);
  if (*(_BYTE *)(a1 + 489))
    CFDictionaryAddValue(v4, CFSTR("DisableHardSwishOpt"), v77);
  if (*(_BYTE *)(a1 + 490))
    CFDictionaryAddValue(v4, CFSTR("DisableHighPrecisionSigmoid"), v77);
  if (*(_BYTE *)(a1 + 491))
    CFDictionaryAddValue(v4, CFSTR("DisableLayernormOpt"), v77);
  if (*(_BYTE *)(a1 + 492))
    CFDictionaryAddValue(v4, CFSTR("EnableDynamicShapes"), v77);
  if (*(_BYTE *)(a1 + 538))
    CFDictionaryAddValue(v4, CFSTR("ForceDynamicShapesMil"), v77);
  if (*(_BYTE *)(a1 + 493))
    CFDictionaryAddValue(v4, CFSTR("EnableIntermediateCompression"), v77);
  if (*(_BYTE *)(a1 + 497))
    v173 = v77;
  else
    v173 = v78;
  CFDictionaryAddValue(v4, CFSTR("PreserveTextureFraction"), v173);
  if (*(_BYTE *)(a1 + 498))
    CFDictionaryAddValue(v4, CFSTR("EnableDramLogEventsOnly"), v77);
  if (*(_BYTE *)(a1 + 557))
  {
    if (*(_BYTE *)(a1 + 556))
      v174 = v77;
    else
      v174 = v78;
    CFDictionaryAddValue(v4, CFSTR("GlobalRefinementInSpatialSplit"), v174);
  }
  if (!*(_BYTE *)(a1 + 558))
    CFDictionaryAddValue(v4, CFSTR("EnableSegmentAwareKernelSectionSplit"), v78);
  if (*(_BYTE *)(a1 + 559))
    CFDictionaryAddValue(v4, CFSTR("EnableMILConstantCoalescing"), v77);
  if (!*(_BYTE *)(a1 + 534))
    CFDictionaryAddValue(v4, CFSTR("EnableL2BatchSplitting"), v78);
  if (*(_BYTE *)(a1 + 368))
    CFDictionaryAddValue(v4, CFSTR("EnableLowEffortCPAllocation"), v77);
  return v4;
}

void sub_206E72CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void **p_p)
{
  p_p = &__p;
  std::vector<ZinIrCompilerParameters::SubGraphSpec>::__destroy_vector::operator()[abi:ne180100](&p_p);
  _Unwind_Resume(a1);
}

void ANECCreateCompilerOptionDictionary::$_0::operator()(__int128 **a1, __CFArray *a2)
{
  __int128 *v2;
  __int128 *v3;
  const __CFAllocator *v5;
  __int128 v6;
  std::string *p_p;
  CFStringRef v8;
  std::string __p;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
      }
      else
      {
        v6 = *v2;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v8 = CFStringCreateWithCString(v5, (const char *)p_p, 0x8000100u);
      CFArrayAppendValue(a2, v8);
      CFRelease(v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v2 = (__int128 *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
}

void sub_206E72DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ANECGetCompilerFileFormat(uint64_t a1)
{
  std::string *v1;
  std::string *p_p;
  uint64_t v3;
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
  else
    v1 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  while (p_p != v1)
  {
    p_p->__r_.__value_.__s.__data_[0] = __tolower(p_p->__r_.__value_.__s.__data_[0]);
    p_p = (std::string *)((char *)p_p + 1);
  }
  if (std::string::ends_with[abi:ne180100]((uint64_t *)&__p, ".hwx"))
  {
    v3 = 4;
  }
  else if (std::string::ends_with[abi:ne180100]((uint64_t *)&__p, ".plist"))
  {
    v3 = 1;
  }
  else if (std::string::ends_with[abi:ne180100]((uint64_t *)&__p, ".mil"))
  {
    v3 = 2;
  }
  else if (std::string::ends_with[abi:ne180100]((uint64_t *)&__p, ".mlir"))
  {
    v3 = 3;
  }
  else
  {
    v3 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_206E72F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::string::ends_with[abi:ne180100](uint64_t *a1, char *__s)
{
  size_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD v8[2];

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    v6 = a1;
    a1 = (uint64_t *)*a1;
    v5 = v6[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)a1 + 23);
  }
  v8[0] = a1;
  v8[1] = v5;
  return std::string_view::ends_with[abi:ne180100](v8, __s, v4);
}

BOOL std::string_view::ends_with[abi:ne180100](_QWORD *a1, void *__s2, size_t a3)
{
  size_t v3;

  v3 = a1[1];
  return v3 >= a3
      && std::string_view::compare[abi:ne180100](a1, v3 - a3, 0xFFFFFFFFFFFFFFFFLL, __s2, a3) == 0;
}

uint64_t std::string_view::compare[abi:ne180100](_QWORD *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5;
  BOOL v6;
  size_t v7;
  const void *v9;
  size_t v10;
  size_t v11;
  uint64_t result;
  unsigned int v13;

  v5 = a1[1];
  v6 = v5 >= a2;
  v7 = v5 - a2;
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  v9 = (const void *)(*a1 + a2);
  if (v7 >= a3)
    v10 = a3;
  else
    v10 = v7;
  if (a5 >= v10)
    v11 = v10;
  else
    v11 = a5;
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5)
    v13 = -1;
  else
    v13 = 1;
  if (v10 == a5)
    v13 = 0;
  if ((_DWORD)result)
    return result;
  else
    return v13;
}

void ANECCreateCompilerOptionsCFString_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid spatial splitting mode in compiler options dictionary \n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateCompilerOptionsCFString_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid signature mode in compiler options dictionary \n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateCompilerOptionsCFString_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid L3 allocator in compiler options dictionary \n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateCompilerOptionsCFString_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid L2 allocator in compiler options dictionary\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateCompilerOptionsCFString_cold_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid L2 cache mode in compiler options dictionary\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateCompilerOptionsCFString_cold_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid DRAM allocator in compiler options dictionary \n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateCompilerOptionDictionary_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid Optimization mode\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateCompilerOptionDictionary_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid Spatial Split option value\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateCompilerOptionDictionary_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid MemCache strategy option value\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ANECCreateCompilerOptionDictionary_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid L2CacheMode option value\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinIrBroadcastUnit::ZinIrBroadcastUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C01DE38;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = off_24C021950;
  std::unordered_map<ZinIrDimension,unsigned long>::unordered_map(a1 + 136, a2 + 80);
  return a1;
}

void sub_206E73320(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrBroadcastUnit::TensorDimensions(ZinIrBroadcastUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  v4 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - v4 == 120)
  {
    v7 = *(_OWORD *)(v4 + 8);
    v8 = *(_OWORD *)(v4 + 24);
    *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
    *(_OWORD *)a3 = v7;
    *((_OWORD *)a3 + 1) = v8;
    ZinIrBroadcastInfo::ZinIrBroadcastInfo(v11, (char *)this + 136);
    v9 = ZinIrBroadcastInfo::TensorDimensions((ZinIrBroadcastInfo *)v11, (const ZinTensorDimensions *)(*((_QWORD *)this + 1) + 8), a3);
    v11[0] = &unk_24C01DE18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v12);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v11);
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, CFSTR("InvalidBottomCount"));
    return 3;
  }
  return v9;
}

void sub_206E73418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;

  a10 = &unk_24C01DE18;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v10 + 16);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a10);
  _Unwind_Resume(a1);
}

uint64_t ZinIrBroadcastUnit::CreateOpcode@<X0>(ZinIrBroadcastUnit *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t result;

  v4 = (char *)this + 136;
  v5 = operator new();
  result = ZinIrBroadcastInfo::ZinIrBroadcastInfo(v5, v4);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

void sub_206E73498(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10A1C407AA052A5);
  _Unwind_Resume(a1);
}

uint64_t ZinIrBroadcastUnit::GetBroadcastDimensions(ZinIrBroadcastUnit *this, const ZinTensorDimensions *a2, ZinTensorDimensions *a3, ZinIrBroadcastUnitInfo *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  int *v23;

  v7 = *((_QWORD *)a2 + 3);
  v8 = *((_QWORD *)this + 3);
  if (v7 != v8)
  {
    if (v7 != 1)
      ZinAssertImpl("Broadcast output tensor width must be 1 or match input_width size %ld, but %ld is given", *((_QWORD *)this + 3), v7);
    *((_QWORD *)a2 + 3) = v8;
    v9 = *((_QWORD *)this + 3);
    v22 = 4;
    v23 = &v22;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)a3 + 80, &v22, (uint64_t)&std::piecewise_construct, &v23)[3] = v9;
  }
  v10 = *((_QWORD *)a2 + 2);
  v11 = *((_QWORD *)this + 2);
  if (v10 != v11)
  {
    if (v10 != 1)
      ZinAssertImpl("Broadcast output tensor height must be 1 or match input_height size %ld, but %ld is given", *((_QWORD *)this + 2), v10);
    *((_QWORD *)a2 + 2) = v11;
    v12 = *((_QWORD *)this + 2);
    v22 = 3;
    v23 = &v22;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)a3 + 80, &v22, (uint64_t)&std::piecewise_construct, &v23)[3] = v12;
  }
  v13 = *((_QWORD *)a2 + 1);
  v14 = *((_QWORD *)this + 1);
  if (v13 != v14)
  {
    if (v13 != 1)
      ZinAssertImpl("Broadcast output tensor channel must be 1 or match input_channel size %ld, but %ld is given", *((_QWORD *)this + 1), v13);
    *((_QWORD *)a2 + 1) = v14;
    v15 = *((_QWORD *)this + 1);
    v22 = 2;
    v23 = &v22;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)a3 + 80, &v22, (uint64_t)&std::piecewise_construct, &v23)[3] = v15;
  }
  v16 = *((_QWORD *)a2 + 4);
  v17 = *((_QWORD *)this + 4);
  if (v16 != v17)
  {
    if (v16 != 1)
      ZinAssertImpl("Broadcast output tensor depth must be 1 or match input_depth size %ld, but %ld is given", *((_QWORD *)this + 4), v16);
    *((_QWORD *)a2 + 4) = v17;
    v18 = *((_QWORD *)this + 4);
    v22 = 1;
    v23 = &v22;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)a3 + 80, &v22, (uint64_t)&std::piecewise_construct, &v23)[3] = v18;
  }
  v19 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)this)
  {
    if (v19 != 1)
      ZinAssertImpl("Broadcast output tensor batch must be 1 or match input_batch size %ld, but %ld is given", *(_QWORD *)this, v19);
    *(_QWORD *)a2 = *(_QWORD *)this;
    v20 = *(_QWORD *)this;
    v22 = 0;
    v23 = &v22;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)a3 + 80, &v22, (uint64_t)&std::piecewise_construct, &v23)[3] = v20;
  }
  return 0;
}

uint64_t ZinIrBroadcastUnit::CreateLayer(ZinIrBroadcastUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  int v28;
  uint64_t v29;

  ZinIrBroadcastUnit::CreateOpcode(a1, (uint64_t)&v28);
  if (v28)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v26 = **a3;
    v27 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinBroadcastLayer::ZinBroadcastLayer(v6, &v29, &v26, (char *)a1 + 64);
    v10 = v27;
    if (v27)
    {
      v11 = (unint64_t *)&v27->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (__int128 *)*((_QWORD *)a1 + 1);
    v21 = v13[4];
    v22 = v13[5];
    v23 = v13[6];
    v24 = *((_DWORD *)v13 + 28);
    v17 = *v13;
    v18 = v13[1];
    v19 = v13[2];
    v20 = v13[3];
    v14 = operator new(0x78uLL);
    v14[4] = v21;
    v14[5] = v22;
    v14[6] = v23;
    *((_DWORD *)v14 + 28) = v24;
    *v14 = v17;
    v14[1] = v18;
    v14[2] = v19;
    v14[3] = v20;
    v25 = v14;
    ZinIrOpLayer::ValidateSemantics(v5);
    if (v25)
      operator delete(v25);
  }
  v15 = v29;
  v29 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v5;
}

void sub_206E73858(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

uint64_t ZinRtProcedure::AddOperation(ZinRtProcedure *this, ZinRtOperation *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int64x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  uint64_t v27;

  v6 = *((_QWORD *)this + 10);
  result = (uint64_t)this + 80;
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (int64x2_t *)(result - 16);
    v10 = *(_QWORD *)(result - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v27 = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    v26 = v17;
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v25.i64[1] = (uint64_t)(v16 + 8);
    v19 = (_QWORD *)*((_QWORD *)this + 8);
    v18 = (_QWORD *)*((_QWORD *)this + 9);
    if (v18 == v19)
    {
      v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        v20 = *--v18;
        *v18 = 0;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v21 = *v9;
      v8 = (_QWORD *)v25.i64[1];
      v17 = v26;
    }
    *((_QWORD *)this + 8) = v16;
    *((_QWORD *)this + 9) = v8;
    v25 = v21;
    v22 = (char *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v17;
    v26 = v22;
    v24 = v21.i64[0];
    result = std::__split_buffer<std::unique_ptr<ZinIrUnit>>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 9) = v8;
  v23 = (unint64_t)v8 - *((_QWORD *)this + 8);
  if (v23 >> 35)
    ZinAssertImpl("Too many operations in the procedure");
  *((_DWORD *)this + 2) = (v23 >> 3) & 0x7FFFFFFF | ((*((int *)this + 2) < 0) << 31);
  return result;
}

void sub_206E73A28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

unint64_t ZinRtProcedure::SerializeHelper(uint64_t *a1, int a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned int *v10;
  uint64_t PointerAtOffset;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *i;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  void *__p;
  void *v30;
  uint64_t v31;
  _OWORD v32[2];
  int v33;
  _OWORD v34[2];
  int v35;

  if ((a2 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    PointerAtOffset = GetPointerAtOffset(a3, a4, 3uLL);
    if (!PointerAtOffset)
      ZinAssertImpl("Procedure header overran buffer");
    v12 = *a1;
    *(_DWORD *)(PointerAtOffset + 8) = *((_DWORD *)a1 + 2);
    *(_QWORD *)PointerAtOffset = v12;
    v10 = (unsigned int *)GetPointerAtOffset(a3, a4 + 3, 6uLL);
  }
  memset(v34, 0, sizeof(v34));
  v35 = 1065353216;
  memset(v32, 0, sizeof(v32));
  v33 = 1065353216;
  __p = 0;
  v30 = 0;
  v31 = 0;
  v13 = ZinRegisterPacking::ProcessRegisters((uint64_t)a1 + 12, 6uLL, 2112, v10, a2 ^ 1u, 0, v34, v32, 0, (__int32 **)&__p);
  v14 = v13 + 3;
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v34);
  v15 = a1[11];
  v16 = a1[12];
  v26 = a1;
  if (v15 != v16)
  {
    v17 = 0;
    v18 = 4 * v13 + 4 * a4;
    do
    {
      if ((a2 & 1) == 0)
      {
        *(_QWORD *)&v34[0] = &off_24C0243D0;
        DWORD2(v34[0]) = 0;
        ZinAneSequentialCommand_v11::SetAddress((uint64_t)v34, 0x800u);
        DWORD2(v34[0]) = DWORD2(v34[0]) & 0xFFE07FFF | 0x10000;
        v19 = v18 + v17 + *a3;
        *(_DWORD *)(v19 + 12) = DWORD2(v34[0]);
        *(_DWORD *)(v19 + 16) = *(_DWORD *)(v15 + v17 + 8);
        AddRelocation(*(_QWORD *)(v15 + v17) + 40, a5, v18 + v17 + 20, 1, a6);
        v20 = v18 + v17 + *a3;
        *(_DWORD *)(v20 + 20) = 0;
        *(_DWORD *)(v20 + 24) = 0;
      }
      v14 += 4;
      v17 += 16;
    }
    while (v15 + v17 != v16);
  }
  if ((a2 & 1) != 0)
    *((_DWORD *)v26 + 1) = v14;
  v21 = (uint64_t *)v26[8];
  for (i = (uint64_t *)v26[9]; v21 != i; ++v21)
  {
    v23 = *v21;
    if (a2)
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    else
      v24 = (*(uint64_t (**)(uint64_t, _QWORD *, unint64_t, uint64_t, uint64_t *))(*(_QWORD *)v23 + 24))(v23, a3, v14 + a4, a5, a6);
    v14 += v24;
  }
  if ((a2 & 1) != 0)
  {
    if (v14 >= 0xFFFFFFFF)
      ZinAssertImpl("Procedure is too big");
    *(_DWORD *)v26 = v14;
  }
  return v14;
}

void sub_206E73C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
    operator delete(__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a19);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a25);
  _Unwind_Resume(a1);
}

unint64_t ZinRtProcedure::GetSerializedSize(ZinRtProcedure *this)
{
  unint64_t v1;
  uint64_t v3[3];
  _QWORD v4[2];
  void **v5;

  v4[0] = 0;
  v4[1] = 0;
  memset(v3, 0, sizeof(v3));
  v1 = ZinRtProcedure::SerializeHelper((uint64_t *)this, 1, v4, 0, 0, v3);
  v5 = (void **)v3;
  std::vector<ZinIrSymbolData>::__destroy_vector::operator()[abi:ne180100](&v5);
  return v1;
}

void sub_206E73D14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<ZinIrSymbolData>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

unint64_t ZinRtProcedure::Serialize(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9;

  v9 = ZinRtProcedure::SerializeHelper((uint64_t *)a1, 0, a2, a3, a4, a5);
  AddSymbol(a1 + 40, a4, 4 * a3, 4 * *(unsigned int *)(a1 + 4), a5);
  return v9;
}

uint64_t ZinIrShapeUnit::ZinIrShapeUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C018C80;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = &unk_24C01E1D0;
  return a1;
}

void sub_206E73E68(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrShapeUnit::TensorDimensions(ZinIrShapeUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  *(int64x2_t *)a3 = vdupq_n_s64(1uLL);
  *((_OWORD *)a3 + 1) = xmmword_207A8DF80;
  *((_QWORD *)a3 + 4) = 1;
  return 0;
}

uint64_t ZinIrShapeUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v5 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v5, 29);
  v18 = v5;
  v6 = operator new();
  v7 = v6;
  v8 = (std::__shared_weak_count *)(*a3)[1];
  v16 = **a3;
  v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  ZinConstInLayer::ZinConstInLayer(v6, &v18, &v16, a1 + 64);
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  v18 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return v7;
}

void sub_206E73FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinIrShapeUnit::PropagateConstValue(ZinIrShapeUnit *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  float *v5;
  uint64_t v6;
  unint64_t v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  int v18;
  float v19;
  float *v20;
  float *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  float *v27;
  int v28;
  float v29;
  float *v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  float *v37;
  int v38;
  float v39;
  float *v40;
  float *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  float *v47;
  char *v48;
  int v49;
  __int128 v50;
  void *__p;
  float *v52;
  unint64_t v53;

  __p = 0;
  v52 = 0;
  v53 = 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v5 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v53, 1uLL);
  v7 = (unint64_t)&v5[v6];
  *v5 = (float)v4;
  v8 = v5 + 1;
  __p = v5;
  v53 = v7;
  v52 = v5 + 1;
  v9 = (float)*(uint64_t *)(*((_QWORD *)this + 1) + 24);
  if ((unint64_t)(v5 + 1) >= v7)
  {
    v11 = (float *)__p;
    v12 = ((char *)v8 - (_BYTE *)__p) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v14 = v7 - (_QWORD)__p;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v53, v15);
      v11 = (float *)__p;
      v8 = v52;
    }
    else
    {
      v16 = 0;
    }
    v17 = (float *)&v16[4 * v12];
    v7 = (unint64_t)&v16[4 * v15];
    *v17 = v9;
    v10 = v17 + 1;
    while (v8 != v11)
    {
      v18 = *((_DWORD *)v8-- - 1);
      *((_DWORD *)v17-- - 1) = v18;
    }
    __p = v17;
    v52 = v10;
    v53 = v7;
    if (v11)
    {
      operator delete(v11);
      v7 = v53;
    }
  }
  else
  {
    v5[1] = v9;
    v10 = v5 + 2;
  }
  v52 = v10;
  v19 = (float)*(uint64_t *)(*((_QWORD *)this + 1) + 16);
  if ((unint64_t)v10 >= v7)
  {
    v21 = (float *)__p;
    v22 = ((char *)v10 - (_BYTE *)__p) >> 2;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v24 = v7 - (_QWORD)__p;
    if (v24 >> 1 > v23)
      v23 = v24 >> 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v53, v25);
      v21 = (float *)__p;
      v10 = v52;
    }
    else
    {
      v26 = 0;
    }
    v27 = (float *)&v26[4 * v22];
    v7 = (unint64_t)&v26[4 * v25];
    *v27 = v19;
    v20 = v27 + 1;
    while (v10 != v21)
    {
      v28 = *((_DWORD *)v10-- - 1);
      *((_DWORD *)v27-- - 1) = v28;
    }
    __p = v27;
    v52 = v20;
    v53 = v7;
    if (v21)
    {
      operator delete(v21);
      v7 = v53;
    }
  }
  else
  {
    *v10 = v19;
    v20 = v10 + 1;
  }
  v52 = v20;
  v29 = (float)*(uint64_t *)(*((_QWORD *)this + 1) + 40);
  if ((unint64_t)v20 >= v7)
  {
    v31 = (float *)__p;
    v32 = ((char *)v20 - (_BYTE *)__p) >> 2;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v34 = v7 - (_QWORD)__p;
    if (v34 >> 1 > v33)
      v33 = v34 >> 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
      v35 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v53, v35);
      v31 = (float *)__p;
      v20 = v52;
    }
    else
    {
      v36 = 0;
    }
    v37 = (float *)&v36[4 * v32];
    v7 = (unint64_t)&v36[4 * v35];
    *v37 = v29;
    v30 = v37 + 1;
    while (v20 != v31)
    {
      v38 = *((_DWORD *)v20-- - 1);
      *((_DWORD *)v37-- - 1) = v38;
    }
    __p = v37;
    v52 = v30;
    v53 = v7;
    if (v31)
    {
      operator delete(v31);
      v7 = v53;
    }
  }
  else
  {
    *v20 = v29;
    v30 = v20 + 1;
  }
  v52 = v30;
  v39 = (float)*(uint64_t *)(*((_QWORD *)this + 1) + 8);
  if ((unint64_t)v30 >= v7)
  {
    v41 = (float *)__p;
    v42 = ((char *)v30 - (_BYTE *)__p) >> 2;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v44 = v7 - (_QWORD)__p;
    if (v44 >> 1 > v43)
      v43 = v44 >> 1;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
      v45 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    if (v45)
    {
      v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v53, v45);
      v41 = (float *)__p;
      v30 = v52;
    }
    else
    {
      v46 = 0;
    }
    v47 = (float *)&v46[4 * v42];
    v48 = &v46[4 * v45];
    *v47 = v39;
    v40 = v47 + 1;
    while (v30 != v41)
    {
      v49 = *((_DWORD *)v30-- - 1);
      *((_DWORD *)v47-- - 1) = v49;
    }
    __p = v47;
    v52 = v40;
    v53 = (unint64_t)v48;
    if (v41)
      operator delete(v41);
  }
  else
  {
    *v30 = v39;
    v40 = v30 + 1;
  }
  v52 = v40;
  std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<float>,std::allocator<ZinIrConstData_specialization<float>>,std::vector<float>,void>((uint64_t)&__p, &v50);
  *a2 = v50;
  if (__p)
  {
    v52 = (float *)__p;
    operator delete(__p);
  }
}

void sub_206E743EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrShapeUnit::~ZinIrShapeUnit(void **this)
{
  *this = &off_24C018C80;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C018C80;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrShapeUnitInfo::~ZinIrShapeUnitInfo(void **this)
{
  ZinIrUnitInfo::~ZinIrUnitInfo(this);
  JUMPOUT(0x20BD002F8);
}

void ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::ZinMatrixDecompositionMatrixMultiplicationCompositeLayer(ZinMatrixDecompositionMatrixMultiplicationCompositeLayer *this, size_t *a2, ZinMatrixMultLayer *a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  size_t v11;
  std::string *v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  ZinIrKernel *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  ZinIrKernel *v26;
  std::string v27;
  void *v28[2];
  int64_t v29;
  std::string v30;
  void *__p[2];
  std::string::size_type v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD *v35;

  v6 = (_QWORD *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)v6, 25);
  *v6 = &unk_24C0271F0;
  v35 = v6;
  v7 = (uint64_t *)(*(uint64_t (**)(size_t *, _QWORD, _QWORD))(*a2 + 40))(a2, 0, 0);
  v8 = v7[1];
  v33 = *v7;
  v34 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (*((char *)a2 + 47) >= 0)
    v11 = *((unsigned __int8 *)a2 + 47);
  else
    v11 = a2[4];
  v12 = &v30;
  std::string::basic_string[abi:ne180100]((uint64_t)&v30, v11 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*((char *)a2 + 47) >= 0)
      v13 = (char *)(a2 + 3);
    else
      v13 = (char *)a2[3];
    memmove(v12, v13, v11);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v27, "comp_matrix");
  v14 = std::string::append(&v27, "_xfm", 4uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v29 >= 0)
    v16 = v28;
  else
    v16 = (void **)v28[0];
  if (v29 >= 0)
    v17 = HIBYTE(v29);
  else
    v17 = (std::string::size_type)v28[1];
  v18 = std::string::append(&v30, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v32 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v26 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)this, (uint64_t *)&v35, &v33, (__int128 *)__p, &v26);
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    ZinIrKernel::~ZinIrKernel(v20);
    MEMORY[0x20BD002F8](v21);
  }
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v22 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (uint64_t)v35;
  v35 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  *(_QWORD *)this = &off_24C0270B8;
  *((_BYTE *)this + 192) = 1;
  *((_QWORD *)this + 25) = a2;
  *((_QWORD *)this + 26) = a3;
}

void sub_206E74728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v35;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&a9, 0);
  if (a33 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v33 - 72);
  v35 = *(_QWORD *)(v33 - 56);
  *(_QWORD *)(v33 - 56) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  _Unwind_Resume(a1);
}

uint64_t ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  __n128 v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  _BOOL4 HasAllRotationAlongAxisDisabled;
  _BOOL4 v14;
  BOOL v15;
  _BYTE *v16;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  int v29;
  int v30;
  size_t v31;
  std::string *v32;
  const void *v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type size;
  std::string *v44;
  __int128 v45;
  ZinIrOpLayer *v46;
  ZinIrOpLayer *v47;
  ZinIrOpLayer *v48;
  _BOOL4 v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  ZinIrOpLayer *MatMulLayer;
  _BOOL4 v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  ZinIrOpLayer *v72;
  _BOOL4 v73;
  _QWORD *v74;
  int v75;
  unint64_t v76;
  int v77;
  ZinIrOpLayer *v78;
  ZinIrOpLayer *v79;
  uint64_t v80;
  ZinIrOpLayer *v81;
  _BOOL4 v82;
  _BOOL4 v83;
  int v84;
  _BOOL4 v85;
  int v86;
  int v87;
  uint64_t **v88;
  ZinIrOpLayer *v89;
  _BOOL4 v90;
  int v91;
  _BOOL4 v92;
  int v93;
  uint64_t v94;
  int v95;
  ZinIrOpLayer *v96;
  _QWORD *v97;
  _BOOL4 v98;
  int v99;
  char *v100;
  void *v101;
  int64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  ZinIrOpLayer *v107;
  ZinIrOpLayer *v108;
  uint64_t v109;
  _BOOL4 v110;
  _BOOL4 v111;
  int v112;
  int v113;
  ZinIrOpLayer *v114;
  ZinIrOpLayer *v115;
  uint64_t v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _BOOL4 v125;
  _BOOL4 v126;
  _QWORD *v127;
  ZinIrOpLayer **v128;
  char *v129;
  char *v130;
  ZinIrOpLayer *v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char *v136;
  char *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  char *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  char *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t i;
  ZinIrOpLayer *v154;
  _BOOL4 v155;
  _QWORD *v156;
  _QWORD *v157;
  int64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  void *v162;
  int64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  ZinIrOpLayer *v171;
  _BOOL4 v172;
  int v173;
  int v174;
  int v175;
  _BOOL4 v176;
  int v177;
  _BOOL4 v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  int v190;
  ZinIrOpLayer *View;
  uint64_t **v192;
  uint64_t v193;
  unint64_t __val;
  _OWORD v195[2];
  int v196;
  _QWORD *v197;
  _QWORD *v198;
  _OWORD v199[5];
  std::string v200;
  std::string v201;
  void *v202[2];
  int64_t v203;
  uint64_t *v204;
  uint64_t v205;
  _BYTE *v206;
  _BYTE v207[80];
  void *v208[2];
  int64x2_t v209;
  uint64_t v210;
  void *v211;
  char *v212;
  char *v213;
  void *v214;
  void *v215;
  unint64_t v216;
  int64x2_t v217;
  int64x2_t v218;
  uint64_t v219;
  void *v220;
  _BYTE *v221;
  uint64_t v222;
  uint64_t *v223;
  _QWORD v224[3];
  char v225;
  _BYTE v226[32];
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _OWORD v238[2];
  std::string v239;
  std::string v240;
  __int128 v241;
  std::string::size_type v242;
  uint64_t v243;

  v243 = *MEMORY[0x24BDAC8D0];
  v6 = ZinObjectNameFactory::ZinObjectNameFactory(v224, a1 + 3);
  v223 = a1[2];
  v7 = *(_QWORD *)(((uint64_t (*)(uint64_t **, _QWORD, _QWORD, __n128))(*a1)[4])(a1, 0, 0, v6) + 48);
  v8 = (uint64_t *)a1[25][8];
  if (v8[14] != v7 || v8[17] != v7 || v8[20] != v7)
  {
LABEL_7:
    v9 = 3;
    goto LABEL_8;
  }
  if (ZinMatrixDecompositionLayer::HasAllXYZRotationDisabled(a1[25][8]))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower();
    goto LABEL_7;
  }
  v11 = a1[11];
  v12 = *v11;
  v188 = v8 + 19;
  v189 = v11[1];
  v221 = 0;
  v220 = 0;
  v222 = 0;
  HasAllRotationAlongAxisDisabled = ZinMatrixDecompositionLayer::HasAllRotationAlongAxisDisabled((uint64_t)(v8 + 19));
  v187 = v8 + 16;
  v14 = ZinMatrixDecompositionLayer::HasAllRotationAlongAxisDisabled((uint64_t)(v8 + 16));
  v186 = v8 + 13;
  v15 = ZinMatrixDecompositionLayer::HasAllRotationAlongAxisDisabled((uint64_t)(v8 + 13));
  v217 = vdupq_n_s64(1uLL);
  v218 = v217;
  v219 = 1;
  v9 = ZinMatrixDecompositionLayer::CreateR1R2R3Decomposition((uint64_t)a1[25], (uint64_t)v223, (uint64_t)v224, a3, a2, v12, !HasAllRotationAlongAxisDisabled, !v14, !v15, &v220, (uint64_t)&v217);
  v16 = v220;
  if ((_DWORD)v9 || v221 == v220 || v221 - (_BYTE *)v220 != 24)
    goto LABEL_12;
  v17 = v220;
  while (!*v17)
  {
    if (++v17 == (_QWORD *)v221)
    {
      v9 = 0;
      goto LABEL_12;
    }
  }
  v183 = *(_QWORD *)v220;
  v184 = *((_QWORD *)v220 + 1);
  v185 = *((_QWORD *)v220 + 2);
  v193 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v189 + 32))(v189, 0, 0);
  v215 = 0;
  v214 = 0;
  v216 = 0;
  v212 = 0;
  v211 = 0;
  v213 = 0;
  std::vector<ZinIrOpLayer *>::reserve(&v214, v7);
  std::vector<ZinIrTensor::ViewOriginAndStep>::reserve(&v211, v7);
  v192 = a2;
  if (v7 >= 1)
  {
    v18 = 0;
    v19 = 1;
    while (1)
    {
      v190 = v19;
      v20 = *v188;
      v21 = v18;
      v22 = v18 >> 6;
      v23 = 1 << v21;
      v24 = *v187;
      v25 = *(_QWORD *)(*v188 + 8 * v22);
      v26 = *v186;
      v27 = (v25 & (1 << v21)) == 0;
      v28 = (v25 & (1 << v21)) != 0;
      if (v27)
        v29 = 1;
      else
        v29 = 2;
      if ((*(_QWORD *)(*v187 + 8 * v22) & v23) != 0)
        v28 = v29;
      if ((*(_QWORD *)(v26 + 8 * v22) & v23) != 0)
        v30 = v28 + 1;
      else
        v30 = v28;
      v208[1] = (void *)v217.i64[1];
      v209 = v218;
      v210 = v219;
      *(_QWORD *)&v207[72] = 1;
      v208[0] = (void *)1;
      memset(&v207[8], 0, 32);
      *(int64x2_t *)&v207[40] = vdupq_n_s64(1uLL);
      *(_OWORD *)&v207[56] = *(_OWORD *)&v207[40];
      __val = v21;
      v204 = (uint64_t *)&v223;
      v205 = (uint64_t)v208;
      v206 = v207;
      *(_QWORD *)v207 = v21;
      if (*(char *)(v193 + 47) >= 0)
        v31 = *(unsigned __int8 *)(v193 + 47);
      else
        v31 = *(_QWORD *)(v193 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&v239, v31 + 1);
      if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v239;
      else
        v32 = (std::string *)v239.__r_.__value_.__r.__words[0];
      if (v31)
      {
        if (*(char *)(v193 + 47) >= 0)
          v33 = (const void *)(v193 + 24);
        else
          v33 = *(const void **)(v193 + 24);
        memmove(v32, v33, v31);
      }
      *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v31) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v201, "matdcmp_matmul_src_vw");
      v34 = std::string::append(&v201, "_xfm", 4uLL);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v203 = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)v202 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (v203 >= 0)
        v36 = v202;
      else
        v36 = (void **)v202[0];
      if (v203 >= 0)
        v37 = HIBYTE(v203);
      else
        v37 = (std::string::size_type)v202[1];
      v38 = std::string::append(&v239, (const std::string::value_type *)v36, v37);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v240.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      v40 = std::string::append(&v240, "_", 1uLL);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      *(_QWORD *)&v226[16] = *((_QWORD *)&v40->__r_.__value_.__l + 2);
      *(_OWORD *)v226 = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v200, __val);
      if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v200;
      else
        v42 = (std::string *)v200.__r_.__value_.__r.__words[0];
      if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v200.__r_.__value_.__r.__words[2]);
      else
        size = v200.__r_.__value_.__l.__size_;
      v44 = std::string::append((std::string *)v226, (const std::string::value_type *)v42, size);
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v242 = v44->__r_.__value_.__r.__words[2];
      v241 = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v200.__r_.__value_.__l.__data_);
      if ((v226[23] & 0x80000000) != 0)
        operator delete(*(void **)v226);
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      if (SHIBYTE(v203) < 0)
        operator delete(v202[0]);
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v201.__r_.__value_.__l.__data_);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      v199[2] = *(_OWORD *)&v207[32];
      v199[3] = *(_OWORD *)&v207[48];
      v199[4] = *(_OWORD *)&v207[64];
      v199[0] = *(_OWORD *)v207;
      v199[1] = *(_OWORD *)&v207[16];
      View = (ZinIrOpLayer *)ZinBuilder::CreateView((uint64_t)v223, (uint64_t)&v241, v193, (__int128 *)v208, (uint64_t)v199);
      if (v30 == 1)
      {
        if ((*(_QWORD *)(v26 + 8 * v22) & v23) != 0)
        {
          v88 = v192;
          v89 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v185, __val);
          v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
          v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
          v240.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
          v90 = ZinIrOpLayerGraph::AddNode(v192, v89, (ZinIrOpLayer ***)v226);
          *(_QWORD *)v226 = &unk_24C02BB18;
          if (*(_QWORD *)&v226[8])
          {
            *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
            operator delete(*(void **)&v226[8]);
          }
          v91 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v185, (uint64_t)v89, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        }
        else
        {
          v106 = *(_QWORD *)(v24 + 8 * v22);
          v88 = v192;
          if ((v106 & v23) != 0)
          {
            v89 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v184, __val);
            v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
            v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
            v240.__r_.__value_.__l.__size_ = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
            v90 = ZinIrOpLayerGraph::AddNode(v192, v89, (ZinIrOpLayer ***)v226);
            *(_QWORD *)v226 = &unk_24C02BB18;
            if (*(_QWORD *)&v226[8])
            {
              *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
              operator delete(*(void **)&v226[8]);
            }
            v91 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v184, (uint64_t)v89, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          }
          else
          {
            v89 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v183, __val);
            v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
            v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
            v240.__r_.__value_.__l.__size_ = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
            v90 = ZinIrOpLayerGraph::AddNode(v192, v89, (ZinIrOpLayer ***)v226);
            *(_QWORD *)v226 = &unk_24C02BB18;
            if (*(_QWORD *)&v226[8])
            {
              *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
              operator delete(*(void **)&v226[8]);
            }
            v91 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v183, (uint64_t)v89, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          }
        }
        v77 = v90 & v91 & AddMatrixMultiplicationForBatchN((uint64_t)v223, (uint64_t)v224, v88, v189, (uint64_t)a1[26], View, (uint64_t)v89, *((unsigned __int8 *)a1 + 192), &v214);
LABEL_160:
        v76 = __val;
        goto LABEL_161;
      }
      if (v30 != 2)
      {
        if (v30 == 3)
        {
          v46 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v185, __val);
          v47 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v184, __val);
          v48 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v183, __val);
          v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1[25];
          v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
          v240.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
          v49 = ZinIrOpLayerGraph::AddNode(v192, v48, (ZinIrOpLayer ***)v226);
          *(_QWORD *)v226 = &unk_24C02BB18;
          if (*(_QWORD *)&v226[8])
          {
            *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
            operator delete(*(void **)&v226[8]);
          }
          v179 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v183, (uint64_t)v48, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1[25];
          v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
          v240.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
          v178 = ZinIrOpLayerGraph::AddNode(v192, v47, (ZinIrOpLayer ***)v226);
          *(_QWORD *)v226 = &unk_24C02BB18;
          if (*(_QWORD *)&v226[8])
          {
            *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
            operator delete(*(void **)&v226[8]);
          }
          v177 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v184, (uint64_t)v47, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1[25];
          v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
          v240.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
          v176 = ZinIrOpLayerGraph::AddNode(v192, v46, (ZinIrOpLayer ***)v226);
          *(_QWORD *)v226 = &unk_24C02BB18;
          if (*(_QWORD *)&v226[8])
          {
            *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
            operator delete(*(void **)&v226[8]);
          }
          v175 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v185, (uint64_t)v46, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v50 = (uint64_t)v223;
          (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v47 + 80))(v226, v47, 0, 0);
          (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v46 + 80))(v46, 0, 0);
          v51 = operator new(0xF0uLL);
          v240.__r_.__value_.__r.__words[2] = (std::string::size_type)(v51 + 15);
          v52 = v238[0];
          v51[12] = v237;
          v51[13] = v52;
          *(_OWORD *)((char *)v51 + 220) = *(_OWORD *)((char *)v238 + 12);
          v53 = v234;
          v51[8] = v233;
          v51[9] = v53;
          v54 = v236;
          v51[10] = v235;
          v51[11] = v54;
          v55 = v230;
          v51[4] = v229;
          v51[5] = v55;
          v56 = v232;
          v51[6] = v231;
          v51[7] = v56;
          v57 = *(_OWORD *)&v226[16];
          *v51 = *(_OWORD *)v226;
          v51[1] = v57;
          v58 = v228;
          v51[2] = v227;
          v51[3] = v58;
          v240.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
          v240.__r_.__value_.__l.__size_ = (std::string::size_type)(v51 + 15);
          MatMulLayer = (ZinIrOpLayer *)ZinBuilder::CreateMatMulLayer(v50, (uint64_t)v224, (uint64_t *)&v240, 0.0);
          if (v240.__r_.__value_.__r.__words[0])
          {
            v240.__r_.__value_.__l.__size_ = v240.__r_.__value_.__r.__words[0];
            operator delete(v240.__r_.__value_.__l.__data_);
          }
          v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1[25];
          v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
          v240.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
          v60 = ZinIrOpLayerGraph::AddNode(v192, MatMulLayer, (ZinIrOpLayer ***)v226);
          *(_QWORD *)v226 = &unk_24C02BB18;
          if (*(_QWORD *)&v226[8])
          {
            *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
            operator delete(*(void **)&v226[8]);
          }
          v61 = operator new(0x10uLL);
          *(_QWORD *)&v226[16] = v61 + 2;
          *v61 = v47;
          v61[1] = v46;
          *(_QWORD *)v226 = v61;
          *(_QWORD *)&v226[8] = v61 + 2;
          v62 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v192, (uint64_t *)v226, (uint64_t)MatMulLayer);
          if (*(_QWORD *)v226)
          {
            *(_QWORD *)&v226[8] = *(_QWORD *)v226;
            operator delete(*(void **)v226);
          }
          v63 = (uint64_t)v223;
          (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v48 + 80))(v226, v48, 0, 0);
          (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)MatMulLayer + 80))(MatMulLayer, 0, 0);
          v64 = operator new(0xF0uLL);
          v240.__r_.__value_.__r.__words[2] = (std::string::size_type)(v64 + 15);
          v65 = v238[0];
          v64[12] = v237;
          v64[13] = v65;
          *(_OWORD *)((char *)v64 + 220) = *(_OWORD *)((char *)v238 + 12);
          v66 = v234;
          v64[8] = v233;
          v64[9] = v66;
          v67 = v236;
          v64[10] = v235;
          v64[11] = v67;
          v68 = v230;
          v64[4] = v229;
          v64[5] = v68;
          v69 = v232;
          v64[6] = v231;
          v64[7] = v69;
          v70 = *(_OWORD *)&v226[16];
          *v64 = *(_OWORD *)v226;
          v64[1] = v70;
          v71 = v228;
          v64[2] = v227;
          v64[3] = v71;
          v240.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          v240.__r_.__value_.__l.__size_ = (std::string::size_type)(v64 + 15);
          v72 = (ZinIrOpLayer *)ZinBuilder::CreateMatMulLayer(v63, (uint64_t)v224, (uint64_t *)&v240, 0.0);
          if (v240.__r_.__value_.__r.__words[0])
          {
            v240.__r_.__value_.__l.__size_ = v240.__r_.__value_.__r.__words[0];
            operator delete(v240.__r_.__value_.__l.__data_);
          }
          v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1[25];
          v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
          v240.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
          v73 = ZinIrOpLayerGraph::AddNode(v192, v72, (ZinIrOpLayer ***)v226);
          *(_QWORD *)v226 = &unk_24C02BB18;
          if (*(_QWORD *)&v226[8])
          {
            *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
            operator delete(*(void **)&v226[8]);
          }
          v74 = operator new(0x10uLL);
          *(_QWORD *)&v226[16] = v74 + 2;
          *v74 = v48;
          v74[1] = MatMulLayer;
          *(_QWORD *)v226 = v74;
          *(_QWORD *)&v226[8] = v74 + 2;
          v75 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v192, (uint64_t *)v226, (uint64_t)v72);
          v76 = __val;
          if (*(_QWORD *)v226)
          {
            *(_QWORD *)&v226[8] = *(_QWORD *)v226;
            operator delete(*(void **)v226);
          }
          v77 = v49 & v179 & v178 & v177 & v176 & v175 & v60 & v62 & v73 & v75 & AddMatrixMultiplicationForBatchN((uint64_t)v223, (uint64_t)v224, v192, v189, (uint64_t)a1[26], View, (uint64_t)v72, *((unsigned __int8 *)a1 + 192), &v214);
          goto LABEL_161;
        }
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1[26];
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v92 = ZinIrOpLayerGraph::AddNode(v192, View, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v93 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v189, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v94 = (uint64_t)v223;
        v95 = *(_DWORD *)(((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a1)[4])(a1, 0, 0) + 88);
        v198 = 0;
        v96 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v94, (uint64_t)View, (uint64_t)v224, v95, &v198);
        v97 = v198;
        v198 = 0;
        if (v97)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v198, v97);
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v98 = ZinIrOpLayerGraph::AddNode(v192, v96, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v99 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, (uint64_t)View, (uint64_t)v96, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v100 = (char *)v215;
        if ((unint64_t)v215 >= v216)
        {
          v102 = ((_BYTE *)v215 - (_BYTE *)v214) >> 3;
          if ((unint64_t)(v102 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v103 = (uint64_t)(v216 - (_QWORD)v214) >> 2;
          if (v103 <= v102 + 1)
            v103 = v102 + 1;
          if (v216 - (unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8)
            v104 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v104 = v103;
          if (v104)
            v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v216, v104);
          else
            v105 = 0;
          v128 = (ZinIrOpLayer **)&v105[8 * v102];
          *v128 = v96;
          v101 = v128 + 1;
          v129 = (char *)v215;
          v130 = (char *)v214;
          if (v215 != v214)
          {
            do
            {
              v131 = (ZinIrOpLayer *)*((_QWORD *)v129 - 1);
              v129 -= 8;
              *--v128 = v131;
            }
            while (v129 != v130);
            v129 = (char *)v214;
          }
          v214 = v128;
          v215 = v101;
          v216 = (unint64_t)&v105[8 * v104];
          if (v129)
            operator delete(v129);
        }
        else
        {
          *(_QWORD *)v215 = v96;
          v101 = v100 + 8;
        }
        v215 = v101;
        v77 = v92 & v93 & v98 & v99;
        goto LABEL_160;
      }
      if ((*(_QWORD *)(v26 + 8 * v22) & v23) == 0)
        goto LABEL_136;
      if ((*(_QWORD *)(v24 + 8 * v22) & v23) != 0)
      {
        v78 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v185, __val);
        v79 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v184, __val);
        v80 = (uint64_t)v223;
        (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v79 + 80))(v226, v79, 0, 0);
        (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v78 + 80))(v78, 0, 0);
        std::vector<ZinIrTensorInfo>::vector[abi:ne180100](&v240, v226, 2uLL);
        v81 = (ZinIrOpLayer *)ZinBuilder::CreateMatMulLayer(v80, (uint64_t)v224, (uint64_t *)&v240, 0.0);
        if (v240.__r_.__value_.__r.__words[0])
        {
          v240.__r_.__value_.__l.__size_ = v240.__r_.__value_.__r.__words[0];
          operator delete(v240.__r_.__value_.__l.__data_);
        }
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v82 = ZinIrOpLayerGraph::AddNode(v192, v79, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v180 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v184, (uint64_t)v79, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v83 = ZinIrOpLayerGraph::AddNode(v192, v78, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v84 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v185, (uint64_t)v78, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v85 = ZinIrOpLayerGraph::AddNode(v192, v81, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
        v240.__r_.__value_.__l.__size_ = (std::string::size_type)v78;
        std::vector<ZinIrOpLayer *>::vector[abi:ne180100](v226, &v240, 2uLL);
        v76 = __val;
        v86 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v192, (uint64_t *)v226, (uint64_t)v81);
        if (*(_QWORD *)v226)
        {
          *(_QWORD *)&v226[8] = *(_QWORD *)v226;
          operator delete(*(void **)v226);
        }
        v87 = v82 & v180 & v83 & v84;
        goto LABEL_148;
      }
      if ((*(_QWORD *)(v20 + 8 * v22) & v23) != 0)
      {
        v107 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v183, __val);
        v108 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v185, __val);
        v109 = (uint64_t)v223;
        (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v107 + 80))(v226, v107, 0, 0);
        (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v108 + 80))(v108, 0, 0);
        std::vector<ZinIrTensorInfo>::vector[abi:ne180100](&v240, v226, 2uLL);
        v81 = (ZinIrOpLayer *)ZinBuilder::CreateMatMulLayer(v109, (uint64_t)v224, (uint64_t *)&v240, 0.0);
        if (v240.__r_.__value_.__r.__words[0])
        {
          v240.__r_.__value_.__l.__size_ = v240.__r_.__value_.__r.__words[0];
          operator delete(v240.__r_.__value_.__l.__data_);
        }
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v110 = ZinIrOpLayerGraph::AddNode(v192, v107, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v181 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v183, (uint64_t)v107, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v111 = ZinIrOpLayerGraph::AddNode(v192, v108, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v112 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v185, (uint64_t)v108, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v85 = ZinIrOpLayerGraph::AddNode(v192, v81, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
        v240.__r_.__value_.__l.__size_ = (std::string::size_type)v108;
        std::vector<ZinIrOpLayer *>::vector[abi:ne180100](v226, &v240, 2uLL);
        v76 = __val;
        v86 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v192, (uint64_t *)v226, (uint64_t)v81);
        if (*(_QWORD *)v226)
        {
          *(_QWORD *)&v226[8] = *(_QWORD *)v226;
          operator delete(*(void **)v226);
        }
        v113 = v110 & v181 & v111;
      }
      else
      {
LABEL_136:
        v114 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v183, __val);
        v115 = (ZinIrOpLayer *)ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()((uint64_t)&v204, v184, __val);
        v116 = (uint64_t)v223;
        (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v114 + 80))(v226, v114, 0, 0);
        (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v115 + 80))(v115, 0, 0);
        v117 = operator new(0xF0uLL);
        v240.__r_.__value_.__r.__words[2] = (std::string::size_type)(v117 + 15);
        v118 = v238[0];
        v117[12] = v237;
        v117[13] = v118;
        *(_OWORD *)((char *)v117 + 220) = *(_OWORD *)((char *)v238 + 12);
        v119 = v234;
        v117[8] = v233;
        v117[9] = v119;
        v120 = v236;
        v117[10] = v235;
        v117[11] = v120;
        v121 = v230;
        v117[4] = v229;
        v117[5] = v121;
        v122 = v232;
        v117[6] = v231;
        v117[7] = v122;
        v123 = *(_OWORD *)&v226[16];
        *v117 = *(_OWORD *)v226;
        v117[1] = v123;
        v124 = v228;
        v117[2] = v227;
        v117[3] = v124;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
        v240.__r_.__value_.__l.__size_ = (std::string::size_type)(v117 + 15);
        v81 = (ZinIrOpLayer *)ZinBuilder::CreateMatMulLayer(v116, (uint64_t)v224, (uint64_t *)&v240, 0.0);
        if (v240.__r_.__value_.__r.__words[0])
        {
          v240.__r_.__value_.__l.__size_ = v240.__r_.__value_.__r.__words[0];
          operator delete(v240.__r_.__value_.__l.__data_);
        }
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v125 = ZinIrOpLayerGraph::AddNode(v192, v114, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v182 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v183, (uint64_t)v114, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v126 = ZinIrOpLayerGraph::AddNode(v192, v115, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v112 = ZinIrOpLayerGraph::AddEdge((uint64_t)v192, v184, (uint64_t)v115, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
        v240.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v240);
        v85 = ZinIrOpLayerGraph::AddNode(v192, v81, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v127 = operator new(0x10uLL);
        *(_QWORD *)&v226[16] = v127 + 2;
        *v127 = v114;
        v127[1] = v115;
        *(_QWORD *)v226 = v127;
        *(_QWORD *)&v226[8] = v127 + 2;
        v86 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v192, (uint64_t *)v226, (uint64_t)v81);
        v76 = __val;
        if (*(_QWORD *)v226)
        {
          *(_QWORD *)&v226[8] = *(_QWORD *)v226;
          operator delete(*(void **)v226);
        }
        v113 = v125 & v182 & v126;
      }
      v87 = v113 & v112;
LABEL_148:
      v77 = v87 & v85 & v86 & AddMatrixMultiplicationForBatchN((uint64_t)v223, (uint64_t)v224, v192, v189, (uint64_t)a1[26], View, (uint64_t)v81, *((unsigned __int8 *)a1 + 192), &v214);
LABEL_161:
      v132 = v212;
      if (v212 >= v213)
      {
        v137 = (char *)v211;
        v138 = 0xCCCCCCCCCCCCCCCDLL * ((v212 - (_BYTE *)v211) >> 4);
        v139 = v138 + 1;
        if (v138 + 1 > 0x333333333333333)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v213 - (_BYTE *)v211) >> 4) > v139)
          v139 = 0x999999999999999ALL * ((v213 - (_BYTE *)v211) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((v213 - (_BYTE *)v211) >> 4) >= 0x199999999999999)
          v140 = 0x333333333333333;
        else
          v140 = v139;
        if (v140)
        {
          v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v213, v140);
          v132 = v212;
          v137 = (char *)v211;
          v76 = __val;
        }
        else
        {
          v141 = 0;
        }
        v142 = &v141[80 * v138];
        *(_OWORD *)v142 = *(_OWORD *)v207;
        v143 = *(_OWORD *)&v207[16];
        v144 = *(_OWORD *)&v207[32];
        v145 = *(_OWORD *)&v207[64];
        *((_OWORD *)v142 + 3) = *(_OWORD *)&v207[48];
        *((_OWORD *)v142 + 4) = v145;
        *((_OWORD *)v142 + 1) = v143;
        *((_OWORD *)v142 + 2) = v144;
        if (v132 == v137)
        {
          v150 = &v141[80 * v138];
        }
        else
        {
          v146 = &v141[80 * v138];
          do
          {
            *((_OWORD *)v146 - 5) = *((_OWORD *)v132 - 5);
            v147 = *((_OWORD *)v132 - 4);
            v148 = *((_OWORD *)v132 - 3);
            v149 = *((_OWORD *)v132 - 1);
            v150 = v146 - 80;
            *((_OWORD *)v146 - 2) = *((_OWORD *)v132 - 2);
            *((_OWORD *)v146 - 1) = v149;
            *((_OWORD *)v146 - 4) = v147;
            *((_OWORD *)v146 - 3) = v148;
            v132 -= 80;
            v146 -= 80;
          }
          while (v132 != v137);
        }
        v136 = v142 + 80;
        v211 = v150;
        v212 = v142 + 80;
        v213 = &v141[80 * v140];
        if (v137)
          operator delete(v137);
      }
      else
      {
        *(_OWORD *)v212 = *(_OWORD *)v207;
        v133 = *(_OWORD *)&v207[16];
        v134 = *(_OWORD *)&v207[32];
        v135 = *(_OWORD *)&v207[64];
        *((_OWORD *)v132 + 3) = *(_OWORD *)&v207[48];
        *((_OWORD *)v132 + 4) = v135;
        *((_OWORD *)v132 + 1) = v133;
        *((_OWORD *)v132 + 2) = v134;
        v136 = v132 + 80;
      }
      v212 = v136;
      if (SHIBYTE(v242) < 0)
        operator delete((void *)v241);
      v19 = v190 & v77;
      v18 = v76 + 1;
      if (v18 == v7)
        goto LABEL_184;
    }
  }
  v19 = 1;
LABEL_184:
  v151 = (*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*a1[26] + 32))(a1[26], 0, 0);
  v197 = 0;
  ZinBuilder::CreateConcat((uint64_t)v223, (uint64_t)v224, (__int128 *)(v151 + 48), (_QWORD **)&v214, (uint64_t)&v211, 5, 1, &v197, (void **)v207, 0);
  v152 = v197;
  v197 = 0;
  if (v152)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v197, v152);
  v208[1] = 0;
  v208[0] = 0;
  v209.i64[0] = 0;
  std::vector<ZinIrOpLayer *>::reserve(v208, v7);
  if (v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
    {
      v154 = *(ZinIrOpLayer **)(*(_QWORD *)v207 + 8 * i);
      if (v154)
      {
        *(_QWORD *)&v241 = a1;
        v204 = (uint64_t *)&v241;
        v205 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v226, &v204);
        v155 = ZinIrOpLayerGraph::AddNode(v192, v154, (ZinIrOpLayer ***)v226);
        *(_QWORD *)v226 = &unk_24C02BB18;
        if (*(_QWORD *)&v226[8])
        {
          *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
          operator delete(*(void **)&v226[8]);
        }
        v19 &= v155 & ZinIrOpLayerGraph::AddEdge((uint64_t)v192, *((_QWORD *)v214 + i), *(_QWORD *)(*(_QWORD *)v207 + 8 * i), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v156 = *(_QWORD **)v207;
        v157 = v208[1];
        if (v208[1] >= (void *)v209.i64[0])
        {
          v158 = ((char *)v208[1] - (char *)v208[0]) >> 3;
          if ((unint64_t)(v158 + 1) >> 61)
            goto LABEL_235;
          v159 = (uint64_t)(v209.i64[0] - (unint64_t)v208[0]) >> 2;
          if (v159 <= v158 + 1)
            v159 = v158 + 1;
          if (v209.i64[0] - (unint64_t)v208[0] >= 0x7FFFFFFFFFFFFFF8)
            v160 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v160 = v159;
          if (v160)
            v161 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v209, v160);
          else
            v161 = 0;
          v165 = &v161[8 * v158];
          *(_QWORD *)v165 = v156[i];
          v162 = v165 + 8;
          v166 = (char *)v208[1];
          v167 = (char *)v208[0];
          if (v208[1] != v208[0])
          {
            do
            {
              v168 = *((_QWORD *)v166 - 1);
              v166 -= 8;
              *((_QWORD *)v165 - 1) = v168;
              v165 -= 8;
            }
            while (v166 != v167);
            goto LABEL_217;
          }
          goto LABEL_218;
        }
      }
      else
      {
        v156 = v214;
        v157 = v208[1];
        if (v208[1] >= (void *)v209.i64[0])
        {
          v163 = ((char *)v208[1] - (char *)v208[0]) >> 3;
          if ((unint64_t)(v163 + 1) >> 61)
LABEL_235:
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v164 = (uint64_t)(v209.i64[0] - (unint64_t)v208[0]) >> 2;
          if (v164 <= v163 + 1)
            v164 = v163 + 1;
          if (v209.i64[0] - (unint64_t)v208[0] >= 0x7FFFFFFFFFFFFFF8)
            v160 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v160 = v164;
          if (v160)
            v161 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v209, v160);
          else
            v161 = 0;
          v165 = &v161[8 * v163];
          *(_QWORD *)v165 = v156[i];
          v162 = v165 + 8;
          v166 = (char *)v208[1];
          v169 = (char *)v208[0];
          if (v208[1] != v208[0])
          {
            do
            {
              v170 = *((_QWORD *)v166 - 1);
              v166 -= 8;
              *((_QWORD *)v165 - 1) = v170;
              v165 -= 8;
            }
            while (v166 != v169);
LABEL_217:
            v166 = (char *)v208[0];
          }
LABEL_218:
          v208[0] = v165;
          v208[1] = v162;
          v209.i64[0] = (uint64_t)&v161[8 * v160];
          if (v166)
            operator delete(v166);
          goto LABEL_220;
        }
      }
      *v157 = v156[i];
      v162 = v157 + 1;
LABEL_220:
      v208[1] = v162;
    }
  }
  v171 = *(ZinIrOpLayer **)(*(_QWORD *)&v207[8] - 8);
  *(_QWORD *)&v241 = a1;
  v204 = (uint64_t *)&v241;
  v205 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v226, &v204);
  v172 = ZinIrOpLayerGraph::AddNode(v192, v171, (ZinIrOpLayer ***)v226);
  *(_QWORD *)v226 = &unk_24C02BB18;
  if (*(_QWORD *)&v226[8])
  {
    *(_QWORD *)&v226[16] = *(_QWORD *)&v226[8];
    operator delete(*(void **)&v226[8]);
  }
  v173 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v192, (uint64_t *)v208, (uint64_t)v171);
  memset(v195, 0, sizeof(v195));
  v196 = 1065353216;
  v174 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v192, a1, v171, v195);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v195);
  if ((v19 & v172 & v173 & v174 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v192, (ZinIrOpLayer *)a1, 0)) != 0)
    v9 = 0;
  else
    v9 = 3;
  if (v208[0])
  {
    v208[1] = v208[0];
    operator delete(v208[0]);
  }
  if (*(_QWORD *)v207)
  {
    *(_QWORD *)&v207[8] = *(_QWORD *)v207;
    operator delete(*(void **)v207);
  }
  if (v211)
  {
    v212 = (char *)v211;
    operator delete(v211);
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  v16 = v220;
LABEL_12:
  if (v16)
  {
    v221 = v16;
    operator delete(v16);
  }
LABEL_8:
  v224[0] = off_24C01FBB0;
  if (v225 < 0)
    operator delete((void *)v224[1]);
  return v9;
}

void sub_206E7627C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  STACK[0x2D0] = (unint64_t)&unk_24C02BB18;
  v3 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v3;
    operator delete(v3);
  }
  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  v4 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v4;
    operator delete(v4);
  }
  v5 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v6;
    operator delete(v6);
  }
  STACK[0x2A8] = (unint64_t)off_24C01FBB0;
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  _Unwind_Resume(a1);
}

uint64_t ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower(ZinIrOpLayerGraph *,ZinTransformInfo *)::$_1::operator()(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  __int128 *v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t View;
  _OWORD v30[5];
  std::string v31;
  std::string v32;
  void *__p[2];
  int64_t v34;
  std::string v35;
  std::string v36;
  std::string v37;
  __int128 v38;
  std::string::size_type v39;

  v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v6 = v5;
  if (*(char *)(v5 + 47) >= 0)
    v7 = *(unsigned __int8 *)(v5 + 47);
  else
    v7 = *(_QWORD *)(v5 + 32);
  v8 = &v35;
  std::string::basic_string[abi:ne180100]((uint64_t)&v35, v7 + 1);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*(char *)(v6 + 47) >= 0)
      v9 = (const void *)(v6 + 24);
    else
      v9 = *(const void **)(v6 + 24);
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v32, "matdcmp_matmul_vw");
  v10 = std::string::append(&v32, "_xfm", 4uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v34 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v34 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v34 >= 0)
    v13 = HIBYTE(v34);
  else
    v13 = (std::string::size_type)__p[1];
  v14 = std::string::append(&v35, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v36, "_", 1uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v31, a3);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v31;
  else
    v18 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  v20 = std::string::append(&v37, (const std::string::value_type *)v18, size);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v39 = v20->__r_.__value_.__r.__words[2];
  v38 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v22 = *(__int128 **)(a1 + 8);
  v23 = **(_QWORD **)a1;
  v24 = *(_OWORD **)(a1 + 16);
  v30[0] = *v24;
  v25 = v24[4];
  v27 = v24[1];
  v26 = v24[2];
  v30[3] = v24[3];
  v30[4] = v25;
  v30[1] = v27;
  v30[2] = v26;
  View = ZinBuilder::CreateView(v23, (uint64_t)&v38, v6, v22, (uint64_t)v30);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  return View;
}

void sub_206E76830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 57) < 0)
    operator delete(*(void **)(v42 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t AddMatrixMultiplicationForBatchN(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, ZinIrOpLayer *a6, uint64_t a7, int a8, void **a9)
{
  int v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  ZinIrOpLayer *MatMulLayer;
  _BOOL4 v28;
  _QWORD *v29;
  int v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  int v41;
  unint64_t v42;
  ZinIrOpLayer **v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  ZinIrOpLayer **v50;
  char *v51;
  char *v52;
  char *v53;
  ZinIrOpLayer *v54;
  _BOOL4 v56;
  void *v57;
  uint64_t v58;
  _OWORD *v59;
  void *__p[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  _QWORD v74[3];

  v74[1] = *MEMORY[0x24BDAC8D0];
  v74[0] = a5;
  v57 = v74;
  v58 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v57);
  v56 = ZinIrOpLayerGraph::AddNode(a3, a6, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v61 = __p[1];
    operator delete(__p[1]);
  }
  v17 = ZinIrOpLayerGraph::AddEdge((uint64_t)a3, a4, (uint64_t)a6, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (a8)
  {
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a7 + 80))(__p, a7, 0, 0);
    (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a6 + 80))((_QWORD *)&v67 + 1, a6, 0, 0);
    v18 = operator new(0xF0uLL);
    v19 = v71;
    v20 = v73[0];
    v18[12] = v72;
    v18[13] = v20;
    *(_OWORD *)((char *)v18 + 220) = *(_OWORD *)((char *)v73 + 12);
    v21 = v67;
    v22 = v69;
    v23 = v70;
    v18[8] = v68;
    v18[9] = v22;
    v57 = v18;
    v59 = v18 + 15;
    v18[10] = v23;
    v18[11] = v19;
    v24 = v65;
    v18[4] = v64;
    v18[5] = v24;
    v18[6] = v66;
    v18[7] = v21;
    v25 = v61;
    *v18 = *(_OWORD *)__p;
    v18[1] = v25;
    v26 = v63;
    v18[2] = v62;
    v18[3] = v26;
    v58 = (uint64_t)(v18 + 15);
    MatMulLayer = (ZinIrOpLayer *)ZinBuilder::CreateMatMulLayer(a1, a2, (uint64_t *)&v57, 0.0);
    if (v57)
    {
      v58 = (uint64_t)v57;
      operator delete(v57);
    }
    v74[0] = a5;
    v57 = v74;
    v58 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v57);
    v28 = ZinIrOpLayerGraph::AddNode(a3, MatMulLayer, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      *(void **)&v61 = __p[1];
      operator delete(__p[1]);
    }
    v29 = operator new(0x10uLL);
    __p[0] = v29;
    *(_QWORD *)&v61 = v29 + 2;
    *v29 = a7;
    v29[1] = a6;
    __p[1] = v29 + 2;
    v30 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a3, (uint64_t *)__p, (uint64_t)MatMulLayer);
  }
  else
  {
    (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a6 + 80))(__p, a6, 0, 0);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a7 + 80))((_QWORD *)&v67 + 1, a7, 0, 0);
    v31 = operator new(0xF0uLL);
    v32 = v71;
    v33 = v73[0];
    v31[12] = v72;
    v31[13] = v33;
    *(_OWORD *)((char *)v31 + 220) = *(_OWORD *)((char *)v73 + 12);
    v34 = v67;
    v35 = v69;
    v36 = v70;
    v31[8] = v68;
    v31[9] = v35;
    v57 = v31;
    v59 = v31 + 15;
    v31[10] = v36;
    v31[11] = v32;
    v37 = v65;
    v31[4] = v64;
    v31[5] = v37;
    v31[6] = v66;
    v31[7] = v34;
    v38 = v61;
    *v31 = *(_OWORD *)__p;
    v31[1] = v38;
    v39 = v63;
    v31[2] = v62;
    v31[3] = v39;
    v58 = (uint64_t)(v31 + 15);
    MatMulLayer = (ZinIrOpLayer *)ZinBuilder::CreateMatMulLayer(a1, a2, (uint64_t *)&v57, 0.0);
    if (v57)
    {
      v58 = (uint64_t)v57;
      operator delete(v57);
    }
    v74[0] = a5;
    v57 = v74;
    v58 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v57);
    v28 = ZinIrOpLayerGraph::AddNode(a3, MatMulLayer, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      *(void **)&v61 = __p[1];
      operator delete(__p[1]);
    }
    v40 = operator new(0x10uLL);
    __p[0] = v40;
    *(_QWORD *)&v61 = v40 + 2;
    *v40 = a6;
    v40[1] = a7;
    __p[1] = v40 + 2;
    v30 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a3, (uint64_t *)__p, (uint64_t)MatMulLayer);
  }
  v41 = v28 & v30;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v42 = (unint64_t)a9[2];
  v43 = (ZinIrOpLayer **)a9[1];
  if ((unint64_t)v43 >= v42)
  {
    v45 = ((char *)v43 - (_BYTE *)*a9) >> 3;
    if ((unint64_t)(v45 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v46 = v42 - (_QWORD)*a9;
    v47 = v46 >> 2;
    if (v46 >> 2 <= (unint64_t)(v45 + 1))
      v47 = v45 + 1;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v47;
    if (v48)
      v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a9 + 2), v48);
    else
      v49 = 0;
    v50 = (ZinIrOpLayer **)&v49[8 * v45];
    v51 = &v49[8 * v48];
    *v50 = MatMulLayer;
    v44 = v50 + 1;
    v53 = (char *)*a9;
    v52 = (char *)a9[1];
    if (v52 != *a9)
    {
      do
      {
        v54 = (ZinIrOpLayer *)*((_QWORD *)v52 - 1);
        v52 -= 8;
        *--v50 = v54;
      }
      while (v52 != v53);
      v52 = (char *)*a9;
    }
    *a9 = v50;
    a9[1] = v44;
    a9[2] = v51;
    if (v52)
      operator delete(v52);
  }
  else
  {
    *v43 = MatMulLayer;
    v44 = v43 + 1;
  }
  a9[1] = v44;
  return v56 & v17 & v41;
}

void sub_206E76D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Clone()
{
  return 0;
}

void ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::~ZinMatrixDecompositionMatrixMultiplicationCompositeLayer(ZinMatrixDecompositionMatrixMultiplicationCompositeLayer *this)
{
  ZinIrOpLayer::~ZinIrOpLayer(this);
  JUMPOUT(0x20BD002F8);
}

void std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C05A600;
  return result;
}

void std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C05A600;
}

uint64_t std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 17) | 0x100u;
}

uint64_t std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0,std::allocator<ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::MakeComposite(ZinIrOpLayerGraph *,ZinIrParameters const&,ZinIrOpLayer *)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void ZinMatrixDecompositionMatrixMultiplicationCompositeLayer::Lower()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ZinMatrixDecompositionMatrixMultiplication: current configuration (all rotation axis disabled) is not supported", v0, 2u);
}

__CFDictionary *ZinCreateTopKUnit(uint64_t a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  const __CFString *v5;
  CFNumberRef v6;
  const __CFString *v7;
  const __CFString *v8;
  __CFArray *v9;
  _QWORD *v10;
  CFNumberRef v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  const void **v15;
  char v17;
  int valuePtr;

  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = ZinIrTopKTypeToCFString(*(_DWORD *)(a1 + 80));
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v5);
  valuePtr = *(_QWORD *)(a1 + 88);
  v6 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("K"), v6);
  CFRelease(v6);
  v7 = ZinIrCoordinateToCFString((_DWORD *)(a1 + 96));
  CFDictionaryAddValue(Mutable, CFSTR("SortDimension"), v7);
  if (*(_DWORD *)(a1 + 100) != 5)
  {
    v8 = ZinIrCoordinateToCFString((_DWORD *)(a1 + 100));
    CFDictionaryAddValue(Mutable, CFSTR("VectorDimension"), v8);
  }
  v9 = CFArrayCreateMutable(v3, 0, MEMORY[0x24BDBD690]);
  v10 = *(_QWORD **)(a1 + 104);
  if (v10 != (_QWORD *)(a1 + 112))
  {
    do
    {
      v17 = v10[4];
      v11 = CFNumberCreate(v3, kCFNumberSInt8Type, &v17);
      CFArrayAppendValue(v9, v11);
      CFRelease(v11);
      v12 = (_QWORD *)v10[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v10[2];
          v14 = *v13 == (_QWORD)v10;
          v10 = v13;
        }
        while (!v14);
      }
      v10 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 112));
  }
  v15 = (const void **)MEMORY[0x24BDBD270];
  if (!*(_BYTE *)(a1 + 128))
    v15 = (const void **)MEMORY[0x24BDBD268];
  CFDictionaryAddValue(Mutable, CFSTR("Indices"), *v15);
  CFDictionaryAddValue(Mutable, CFSTR("SortIndices"), v9);
  CFRelease(v9);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

uint64_t ZinIrSoftmaxUnit::ZinIrSoftmaxUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C01BBF8;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = off_24C01FAD8;
  std::unordered_set<ZinIrDimension>::unordered_set(a1 + 136, a2 + 80);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 120);
  return a1;
}

void sub_206E771C8(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSoftmaxUnit::TensorDimensions(ZinIrSoftmaxUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)this + 1);
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  return 0;
}

uint64_t ZinIrSoftmaxUnit::CreateOpcode@<X0>(ZinIrSoftmaxUnit *this@<X0>, uint64_t a2@<X8>)
{
  char *v5;
  uint64_t v6;
  uint64_t result;

  v5 = (char *)this + 136;
  v6 = operator new();
  result = ZinIrSoftmaxInfo::ZinIrSoftmaxInfo(v6, v5, *((unsigned __int8 *)this + 176));
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v6;
  return result;
}

void sub_206E77284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10A1C4062464E7FLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSoftmaxUnit::CreateLayer(ZinIrSoftmaxUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  int v28;
  uint64_t v29;

  ZinIrSoftmaxUnit::CreateOpcode(a1, (uint64_t)&v28);
  if (v28)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v26 = **a3;
    v27 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinSoftmaxLayer::ZinSoftmaxLayer(v6, &v29, &v26, (char *)a1 + 64);
    v10 = v27;
    if (v27)
    {
      v11 = (unint64_t *)&v27->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (__int128 *)*((_QWORD *)a1 + 1);
    v21 = v13[4];
    v22 = v13[5];
    v23 = v13[6];
    v24 = *((_DWORD *)v13 + 28);
    v17 = *v13;
    v18 = v13[1];
    v19 = v13[2];
    v20 = v13[3];
    v14 = operator new(0x78uLL);
    v14[4] = v21;
    v14[5] = v22;
    v14[6] = v23;
    *((_DWORD *)v14 + 28) = v24;
    *v14 = v17;
    v14[1] = v18;
    v14[2] = v19;
    v14[3] = v20;
    v25 = v14;
    ZinIrOpLayer::ValidateSemantics(v5);
    if (v25)
      operator delete(v25);
  }
  v15 = v29;
  v29 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v5;
}

void sub_206E77430(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrSoftmaxUnit::ValidateForDynamicShapes(ZinIrSoftmaxUnit *this, ZinIrUnitStatus *a2)
{
  return 0;
}

uint64_t ZinParseMode(ZinIrArgMinMaxUnitInfo *a1, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *v4;
  CFTypeID v5;

  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("Mode"));
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFStringGetTypeID())
      Value = v4;
    else
      Value = 0;
  }
  CFStringToZinArgMode(Value, (int *)a1 + 30);
  return 0;
}

double ZinParseKernelInfo(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  const __CFNumber *v5;
  CFTypeID v6;
  const __CFNumber *v7;
  double result;
  const __CFNumber *v9;
  CFTypeID v10;
  const __CFArray *v11;
  const __CFArray *v12;
  CFTypeID v13;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v15;
  CFTypeID v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  CFTypeID v19;
  CFTypeID TypeID;

  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("KernelWidth"));
  v5 = Value;
  if (Value)
  {
    v6 = CFGetTypeID(Value);
    if (v6 != CFNumberGetTypeID())
      v5 = 0;
  }
  v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("KernelHeight"));
  if (v7)
  {
    v9 = v7;
    v10 = CFGetTypeID(v7);
    if (v10 != CFNumberGetTypeID())
      v9 = 0;
    if (v5 && v9)
    {
      ZinGetCFObject((void *)(a1 + 84), v5);
      ZinGetCFObject((void *)(a1 + 80), v9);
      v11 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("Step"));
      if (v11 && (v12 = v11, v13 = CFGetTypeID(v11), v13 == CFArrayGetTypeID()))
      {
        if (CFArrayGetCount(v12) == 2)
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 0);
          v15 = ValueAtIndex;
          if (ValueAtIndex)
          {
            v16 = CFGetTypeID(ValueAtIndex);
            if (v16 != CFNumberGetTypeID())
              v15 = 0;
          }
          v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 1);
          if (v17)
          {
            v18 = v17;
            v19 = CFGetTypeID(v17);
            TypeID = CFNumberGetTypeID();
            if (v15)
            {
              if (v19 == TypeID)
              {
                ZinGetCFObject((void *)(a1 + 92), v15);
                ZinGetCFObject((void *)(a1 + 88), v18);
              }
            }
          }
        }
      }
      else
      {
        *(_QWORD *)&result = 0x100000001;
        *(_QWORD *)(a1 + 88) = 0x100000001;
      }
    }
  }
  return result;
}

uint64_t ZinParseArgMinMaxUnit(const __CFDictionary *a1, ZinIrArgMinMaxUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  int v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFString *v17;
  uint64_t result;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    v17 = CFSTR("InvalidParamSyntax");
LABEL_9:
    ZinIrUnitStatus::SetError(a3, v17);
    return 3;
  }
  ZinParseMode(a2, v6);
  if ((*((_DWORD *)a2 + 30) | 2) != 3)
    return 0;
  ZinParseKernelInfo((uint64_t)a2, v6);
  if (v8)
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinParseArgMinMaxUnit(v9, v10, v11, v12, v13, v14, v15, v16);
    v17 = CFSTR("InvalidKernelSizeSyntax");
    goto LABEL_9;
  }
  result = ZinParsePadding(v6, (ZinIrArgMinMaxUnitInfo *)((char *)a2 + 96), a3);
  if ((_DWORD)result)
  {
    v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v19)
      ZinParseArgMinMaxUnit(v19, v20, v21, v22, v23, v24, v25, v26);
    v17 = CFSTR("InvalidPadding");
    goto LABEL_9;
  }
  return result;
}

uint64_t ZinArgMinMaxHWCapable(uint64_t a1, int a2, int a3, int a4, int a5, char a6, unsigned int a7)
{
  unint64_t MaxSmallKernelWidth;

  if (!*(_BYTE *)(a1 + 1210))
    return 0;
  if (*(_BYTE *)(a1 + 1124) && (a6 & 1) != 0)
    return 1;
  if (a2 == 1)
  {
    MaxSmallKernelWidth = ZinIrHalParameters::GetMaxSmallKernelWidth(a1, a7);
LABEL_9:
    if (MaxSmallKernelWidth < a4)
      return 0;
    goto LABEL_10;
  }
  if (a2 == 2)
  {
    MaxSmallKernelWidth = GetMaxLogicalKernelWidthForLargeKernelMode(a1, a7);
    goto LABEL_9;
  }
LABEL_10:
  if (a3 != 1)
    return a3 != 2 || GetMaxLogicalKernelHeightForLargeKernelMode(a1) >= a5;
  return *(_QWORD *)(a1 + 112) >= (unint64_t)a5;
}

uint64_t ZinArgMinMaxCanBeDecomposed(const ZinIrHalParameters *a1, int a2, int a3, int a4, const ZinTensorDimensions *a5)
{
  int v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v16;
  unsigned int v17;

  if (a2)
    return a3 == 1 && a4 == 1;
  v7 = *((unsigned __int8 *)a1 + 1880);
  if (*((_BYTE *)a1 + 1881))
    v8 = v7 == 0;
  else
    v8 = 1;
  v9 = !v8;
  v11 = *((_QWORD *)a5 + 2);
  v10 = *((_QWORD *)a5 + 3);
  v12 = v11 != 1 && v10 == 1;
  if (v12 && (v9 & 1) == 0)
    ZinAssertImpl("Column vector ArgMinMax lacks necessary reshape and transpose support.");
  v16 = (a3 == 1 || a4 == 1) && *((_QWORD *)a5 + 1) == 1 && v7 != 0;
  v17 = v11 == a4 || v16;
  if (v10 == a3)
    return v17;
  else
    return v16;
}

uint64_t ZinArgMinMaxLargeKernelUpdate(uint64_t a1, unsigned int a2, int a3, int a4, _DWORD *a5, _DWORD *a6)
{
  unint64_t MaxLogicalKernelWidthForLargeKernelMode;
  uint64_t v13;

  if (ZinIrHalParameters::GetMaxSmallKernelWidth(a1, a2) >= (unint64_t)a3)
  {
    v13 = 0;
  }
  else
  {
    MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(a1, a2);
    v13 = 0;
    if (MaxLogicalKernelWidthForLargeKernelMode >= a3 && *a5 == 1)
    {
      *a5 = 2;
      v13 = 1;
    }
  }
  if (*(_QWORD *)(a1 + 112) < (unint64_t)a4 && GetMaxLogicalKernelHeightForLargeKernelMode(a1) >= a4 && *a6 == 1)
  {
    *a6 = 2;
    return 1;
  }
  return v13;
}

uint64_t IsGlobalSpatialArgMinMaxOp(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  _BOOL4 v10;
  _BOOL4 v12;
  unsigned int v13;

  if ((_DWORD)result)
  {
    v10 = a6 == 1 && a7 == a9;
    v12 = a7 == 1 && a6 == a8;
    v13 = v12 ^ v10;
    if (a3 | a2 | a4 | a5)
      return 0;
    else
      return v13;
  }
  return result;
}

void ZinParseArgMinMaxUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Fail to get padding information!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Fail to get kernel size!\n", a5, a6, a7, a8, 0);
}

uint64_t ZinIrPixelShuffleInfo::ZinIrPixelShuffleInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 49);
  *(_QWORD *)result = &unk_24C0208B8;
  v4 = *a2;
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(result + 12) = v4;
  return result;
}

_QWORD *ZinPixelShuffleLayer::ZinPixelShuffleLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C01FD38;
  return a1;
}

void sub_206E77BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinPixelShuffleLayer::DecomposeStandalone(ZinPixelShuffleLayer *this, uint64_t **a2, const ZinIrHalParameters *a3, ZinObjectNameFactory *a4)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  ZinIrOpLayer *v16;
  _QWORD *v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  std::string *v21;
  uint64_t v22;
  _DWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  ZinIrOpLayer *Alias;
  _QWORD *v31;
  ZinPixelShuffleLayer *v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int64x2_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t Hal;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  ZinIrTensor *v66;
  uint64_t Interleave;
  char v68;
  char v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  char *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  ZinPixelShuffleLayer *v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  ZinPixelShuffleLayer *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  ZinIrOpLayer *View;
  int v96;
  _BOOL4 v97;
  unint64_t v98;
  char v99;
  ZinIrOpLayer *v100;
  char v101;
  uint64_t *GroupId;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  const char *v112;
  char *__format;
  void *v114;
  int v115;
  ZinPixelShuffleLayer *v116;
  int *v117;
  unint64_t v118;
  ZinIrOpLayer *v119;
  int v121;
  int64x2_t v123;
  _QWORD *v124;
  int *v125;
  uint64_t v126;
  _OWORD v127[2];
  int v128;
  __int128 __p;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  _QWORD *v134;
  __int128 v135[2];
  _QWORD v136[7];
  int64x2_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  void *v141;
  uint64_t *v142;
  _QWORD *v143;
  _QWORD *v144;
  int64x2_t v145[2];
  void *v146[4];
  _BYTE v147[172];
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  uint64_t v155;
  _OWORD v156[2];
  uint64_t v157;
  _BYTE v158[48];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  int v163;
  _BYTE v164[23];
  ZinPixelShuffleLayer *v165;
  char *v166;
  char *v167;
  ZinPixelShuffleLayer *v168;
  char *v169;
  char *v170;
  __int128 v171[2];
  __int128 v172[2];
  uint64_t v173;

  v173 = *MEMORY[0x24BDAC8D0];
  v125 = (int *)*((_QWORD *)this + 8);
  v6 = (_QWORD *)**((_QWORD **)this + 11);
  v7 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0);
  v157 = *(_QWORD *)(v7 + 80);
  v8 = *(_OWORD *)(v7 + 64);
  v156[0] = *(_OWORD *)(v7 + 48);
  v156[1] = v8;
  v116 = this;
  v9 = *(_DWORD *)((*(uint64_t (**)(ZinPixelShuffleLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 88);
  v154 = 0;
  v153 = 0;
  v155 = 0;
  v151 = 0;
  v150 = 0;
  v152 = 0;
  v117 = v125 + 3;
  if ((ZinPixelShuffleUtils::DecomposePixelShuffle((uint64_t *)v156, v125 + 3, v9, (uint64_t)a3, (uint64_t **)&v153, &v150) & 1) == 0)ZinAssertImpl("Invalid PixelShuffle layer");
  if (v125[3] <= 2 && v125[4] <= 2 && v125[5] == 1)
  {
    ZinPixelShuffleLayer::CreateDecomposedDeconv((uint64_t)this, a2, (uint64_t)a3, (uint64_t)a4, v10, &v150);
  }
  else
  {
    DimensionOrderHint::DimensionOrderHint(&__p, 0);
    v11 = operator new();
    v12 = *v117;
    memset(v158, 0, 40);
    ZinIrTensor::MirInfo::MirInfo(v11, 2, v12, 1, &__p, v158);
    v149 = (_QWORD *)v11;
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    v13 = v6[2];
    v14 = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0) + 88);
    v15 = v149;
    v149 = 0;
    v148 = v15;
    v147[0] = 0;
    v147[168] = 0;
    v16 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v13, (uint64_t)a4, (uint64_t)v6, v14, &v148, 0, (uint64_t)v147, 1.0);
    v17 = v148;
    v148 = 0;
    if (v17)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v148, v17);
    *(_QWORD *)&v172[0] = v116;
    *(_QWORD *)&__p = v172;
    *((_QWORD *)&__p + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v158, &__p);
    v18 = ZinIrOpLayerGraph::AddNode(a2, v16, (ZinIrOpLayer ***)v158);
    *(_QWORD *)v158 = &unk_24C02BB18;
    if (*(_QWORD *)&v158[8])
    {
      *(_QWORD *)&v158[16] = *(_QWORD *)&v158[8];
      operator delete(*(void **)&v158[8]);
    }
    v19 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v6, (uint64_t)v16, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    ZinPixelShuffleUtils::GetAliasDims((uint64_t)v156, v117, (uint64_t)v172);
    DimensionOrderHint::DimensionOrderHint(v146, 2);
    ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)v172, *(_DWORD *)(v7 + 88), 2, (uint64_t)v146, *((_QWORD *)a3 + 66), 1, 1, v145);
    v20 = operator new();
    ZinIrTensor::MirInfo::MirInfo(v20, 2, 1, 1, v146, v145);
    v144 = (_QWORD *)v20;
    (*(void (**)(_BYTE *__return_ptr, ZinObjectNameFactory *, uint64_t))(*(_QWORD *)a4 + 16))(v158, a4, 1);
    v21 = std::string::append((std::string *)v158, "_interleave", 0xBuLL);
    v114 = (void *)v21->__r_.__value_.__r.__words[0];
    v115 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__r.__words[0] = 0;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    if ((v158[23] & 0x80000000) != 0)
      operator delete(*(void **)v158);
    v22 = *((_QWORD *)v16 + 2);
    (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v16 + 80))(v158, v16, 0, 0);
    v23 = operator new(0x78uLL);
    *((_QWORD *)&__p + 1) = v23 + 30;
    v130 = v23 + 30;
    v23[28] = v163;
    v24 = v162;
    v25 = v160;
    *((_OWORD *)v23 + 5) = v161;
    *((_OWORD *)v23 + 6) = v24;
    v26 = *(_OWORD *)&v158[16];
    *(_OWORD *)v23 = *(_OWORD *)v158;
    *((_OWORD *)v23 + 1) = v26;
    v27 = v159;
    *((_OWORD *)v23 + 2) = *(_OWORD *)&v158[32];
    *((_OWORD *)v23 + 3) = v27;
    *((_OWORD *)v23 + 4) = v25;
    *(_QWORD *)&__p = v23;
    v28 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0)
                    + 104);
    if (v28)
      v29 = *(_DWORD *)(v28 + 96);
    else
      v29 = 0;
    v143 = v144;
    v144 = 0;
    Alias = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v22, (uint64_t)a4, (uint64_t)&__p, v29, v172, (uint64_t)&v143);
    v31 = v143;
    v143 = 0;
    v32 = v116;
    if (v31)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v143, v31);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    *(_QWORD *)&v171[0] = v116;
    *(_QWORD *)&__p = v171;
    *((_QWORD *)&__p + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v158, &__p);
    v33 = ZinIrOpLayerGraph::AddNode(a2, Alias, (ZinIrOpLayer ***)v158);
    *(_QWORD *)v158 = &unk_24C02BB18;
    if (*(_QWORD *)&v158[8])
    {
      *(_QWORD *)&v158[16] = *(_QWORD *)&v158[8];
      operator delete(*(void **)&v158[8]);
    }
    v34 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v16, (uint64_t)Alias, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    ZinPixelShuffleUtils::GetViewDims((uint64_t)v172, (uint64_t)v117, (uint64_t)v171);
    v119 = Alias;
    std::vector<ZinIrOpLayer *>::vector(&v141, v125[4]);
    v139 = 0uLL;
    v140 = 0;
    v35 = v150;
    if (v151 != v150)
    {
      v124 = v6;
      v36 = 0;
      v121 = 0;
      v123 = vdupq_n_s64(1uLL);
      __format = "Could not add concat to graph";
      v37 = v18 & v19 & v33 & v34;
      while (1)
      {
        v38 = *(_DWORD *)(v35 + 344 * v36);
        if (v38 == 3)
        {
          v118 = v36;
          ZinPixelShuffleUtils::GetConcatDims((uint64_t)v171, (uint64_t)v117, (uint64_t)v135);
          v169 = 0;
          v170 = 0;
          v168 = 0;
          LODWORD(v43) = v125[4];
          if ((int)v43 >= 1)
          {
            v44 = 0;
            v45 = 0;
            do
            {
              *(_OWORD *)v158 = 0uLL;
              v46 = (int)v43;
              if (v44 >= v170)
              {
                v47 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - (char *)v168) >> 4);
                v48 = v47 + 1;
                if (v47 + 1 > 0x333333333333333)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                if (0x999999999999999ALL * ((v170 - (char *)v168) >> 4) > v48)
                  v48 = 0x999999999999999ALL * ((v170 - (char *)v168) >> 4);
                if (0xCCCCCCCCCCCCCCCDLL * ((v170 - (char *)v168) >> 4) >= 0x199999999999999)
                  v49 = 0x333333333333333;
                else
                  v49 = v48;
                if (v49)
                  v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v170, v49);
                else
                  v50 = 0;
                v51 = &v50[80 * v47];
                *(_QWORD *)v51 = 0;
                *((_QWORD *)v51 + 1) = 0;
                *((_QWORD *)v51 + 3) = 0;
                *((_QWORD *)v51 + 4) = 0;
                *((_QWORD *)v51 + 2) = v45;
                v52 = vdupq_n_s64(1uLL);
                *(int64x2_t *)(v51 + 40) = v52;
                *((_QWORD *)v51 + 7) = v46;
                *((int64x2_t *)v51 + 4) = v52;
                v54 = (char *)v168;
                v53 = v169;
                v55 = v51;
                if (v169 != (char *)v168)
                {
                  do
                  {
                    *((_OWORD *)v55 - 5) = *((_OWORD *)v53 - 5);
                    v56 = *((_OWORD *)v53 - 4);
                    v57 = *((_OWORD *)v53 - 3);
                    v58 = *((_OWORD *)v53 - 1);
                    *((_OWORD *)v55 - 2) = *((_OWORD *)v53 - 2);
                    *((_OWORD *)v55 - 1) = v58;
                    *((_OWORD *)v55 - 4) = v56;
                    *((_OWORD *)v55 - 3) = v57;
                    v55 -= 80;
                    v53 -= 80;
                  }
                  while (v53 != v54);
                  v53 = v54;
                }
                v44 = v51 + 80;
                v168 = (ZinPixelShuffleLayer *)v55;
                v169 = v51 + 80;
                v170 = &v50[80 * v49];
                if (v53)
                  operator delete(v53);
              }
              else
              {
                *(_QWORD *)v44 = 0;
                *((_QWORD *)v44 + 1) = 0;
                *((_QWORD *)v44 + 2) = v45;
                *(_OWORD *)(v44 + 24) = *(_OWORD *)v158;
                *(int64x2_t *)(v44 + 40) = v123;
                *((_QWORD *)v44 + 7) = (int)v43;
                *((int64x2_t *)v44 + 4) = v123;
                v44 += 80;
              }
              v169 = v44;
              ++v45;
              v43 = v125[4];
            }
            while (v45 < v43);
          }
          v59 = *((_QWORD *)v32 + 2);
          v134 = 0;
          ZinBuilder::CreateConcat(v59, (uint64_t)a4, v135, (_QWORD **)&v141, (uint64_t)&v168, 2, 1, &v134, (void **)v158, 0);
          if ((_QWORD)v139)
          {
            *((_QWORD *)&v139 + 1) = v139;
            operator delete((void *)v139);
          }
          v139 = *(_OWORD *)v158;
          v140 = *(_QWORD *)&v158[16];
          memset(v158, 0, 24);
          v60 = v134;
          v134 = 0;
          if (v60)
            std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v134, v60);
          v61 = v124[2];
          Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v61 + 160));
          *(_QWORD *)&__p = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
          *((_QWORD *)&__p + 1) = v61 + 176;
          v131 = 0;
          v132 = 0;
          v130 = 0;
          v133 = 0;
          v165 = 0;
          v166 = 0;
          v167 = 0;
          v63 = (uint64_t *)v141;
          v64 = v142;
          if (v141 == v142)
          {
            v75 = 0;
            v90 = 0;
          }
          else
          {
            do
            {
              v65 = *v63;
              v66 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v124 + 32))(v124, 0, 0);
              Interleave = ZinIrTensor::GetInterleave(v66);
              v69 = v68;
              v70 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0, 0)+ 88);
              v71 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0, 0);
              if (v69)
                v72 = Interleave;
              else
                v72 = 1;
              v73 = *(_OWORD *)(v71 + 64);
              *(_OWORD *)&v158[4] = *(_OWORD *)(v71 + 48);
              *(_OWORD *)&v158[20] = v73;
              *(_QWORD *)&v158[36] = *(_QWORD *)(v71 + 80);
              memset(&v164[3], 0, 20);
              v74 = v166;
              if (v166 >= v167)
              {
                v76 = 0xEEEEEEEEEEEEEEEFLL * ((v166 - (char *)v165) >> 3);
                v77 = v76 + 1;
                if (v76 + 1 > 0x222222222222222)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                if (0xDDDDDDDDDDDDDDDELL * ((v167 - (char *)v165) >> 3) > v77)
                  v77 = 0xDDDDDDDDDDDDDDDELL * ((v167 - (char *)v165) >> 3);
                if (0xEEEEEEEEEEEEEEEFLL * ((v167 - (char *)v165) >> 3) >= 0x111111111111111)
                  v78 = 0x222222222222222;
                else
                  v78 = v77;
                if (v78)
                  v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>((uint64_t)&v167, v78);
                else
                  v79 = 0;
                v80 = &v79[120 * v76];
                *(_DWORD *)v80 = v70;
                *(_OWORD *)(v80 + 4) = *(_OWORD *)v158;
                *(_OWORD *)(v80 + 20) = *(_OWORD *)&v158[16];
                *((_OWORD *)v80 + 2) = *(_OWORD *)&v158[28];
                *((_WORD *)v80 + 24) = 0;
                *((_QWORD *)v80 + 7) = v72;
                *((_QWORD *)v80 + 8) = 1;
                v80[72] = 0;
                v80[92] = 0;
                *(_OWORD *)(v80 + 93) = *(_OWORD *)v164;
                *(_QWORD *)(v80 + 108) = *(_QWORD *)&v164[15];
                v82 = v165;
                v81 = v166;
                v83 = v80;
                if (v166 != (char *)v165)
                {
                  do
                  {
                    v84 = *(_OWORD *)(v81 - 120);
                    v85 = *(_OWORD *)(v81 - 104);
                    v86 = *(_OWORD *)(v81 - 88);
                    *(_OWORD *)(v83 - 72) = *(_OWORD *)(v81 - 72);
                    *(_OWORD *)(v83 - 88) = v86;
                    *(_OWORD *)(v83 - 104) = v85;
                    *(_OWORD *)(v83 - 120) = v84;
                    v87 = *(_OWORD *)(v81 - 56);
                    v88 = *(_OWORD *)(v81 - 40);
                    v89 = *(_OWORD *)(v81 - 24);
                    *((_DWORD *)v83 - 2) = *((_DWORD *)v81 - 2);
                    *(_OWORD *)(v83 - 24) = v89;
                    *(_OWORD *)(v83 - 40) = v88;
                    *(_OWORD *)(v83 - 56) = v87;
                    v83 -= 120;
                    v81 -= 120;
                  }
                  while (v81 != (char *)v82);
                  v81 = (char *)v82;
                }
                v75 = v80 + 120;
                v165 = (ZinPixelShuffleLayer *)v83;
                v166 = v80 + 120;
                v167 = &v79[120 * v78];
                if (v81)
                  operator delete(v81);
              }
              else
              {
                *(_DWORD *)v166 = v70;
                *(_OWORD *)(v74 + 4) = *(_OWORD *)v158;
                *(_OWORD *)(v74 + 20) = *(_OWORD *)&v158[16];
                *((_OWORD *)v74 + 2) = *(_OWORD *)&v158[28];
                *((_WORD *)v74 + 24) = 0;
                *((_QWORD *)v74 + 7) = v72;
                *((_QWORD *)v74 + 8) = 1;
                v74[72] = 0;
                v74[92] = 0;
                *(_OWORD *)(v74 + 93) = *(_OWORD *)v164;
                *(_QWORD *)(v74 + 108) = *(_QWORD *)&v164[15];
                v75 = v74 + 120;
              }
              v166 = v75;
              ++v63;
            }
            while (v63 != v64);
            v90 = v165;
          }
          v98 = v118;
          ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)v158, (uint64_t)&__p, v150 + 344 * v118 + 8, v90, 0xEEEEEEEEEEEEEEEFLL * ((v75 - (char *)v90) >> 3));
          v32 = v116;
          ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)v158);
          if (*(_QWORD *)&v158[24])
            ZinAssertImpl("Concat validation failed.");
          ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)v158);
          if (v165)
          {
            v166 = (char *)v165;
            operator delete(v165);
          }
          if (SHIBYTE(v132) < 0)
            operator delete(v130);
          v165 = v116;
          *(_QWORD *)&__p = &v165;
          *((_QWORD *)&__p + 1) = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(v158, &__p);
          v99 = ZinBuilder::AddConcatToGraph(a2, (uint64_t *)&v141, &v139, (ZinIrOpLayer ***)v158);
          *(_QWORD *)v158 = &unk_24C02BB18;
          if (*(_QWORD *)&v158[8])
          {
            *(_QWORD *)&v158[16] = *(_QWORD *)&v158[8];
            operator delete(*(void **)&v158[8]);
          }
          if ((v99 & 1) == 0)
            goto LABEL_119;
          v100 = *(ZinIrOpLayer **)(*((_QWORD *)&v139 + 1) - 8);
          memset(v127, 0, sizeof(v127));
          v128 = 1065353216;
          v101 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)v116, v100, v127);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v127);
          if ((v101 & 1) == 0)
          {
            __format = "Failed in moving outgoing edges in Pixel Shuffle decomposition.";
LABEL_119:
            ZinAssertImpl(__format);
          }
          if (v168)
          {
            v169 = (char *)v168;
            operator delete(v168);
          }
          v37 = 1;
        }
        else
        {
          if (v38 != 17)
            ZinAssertImpl("Pixel Shuffle decomposition does not match with lower.");
          v39 = v36;
          v40 = v35 + 344 * v36;
          v41 = v40 + 8;
          *(_QWORD *)v158 = off_24C017CA0;
          if (*(char *)(v40 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v158[8], *(const std::string::value_type **)(v40 + 16), *(_QWORD *)(v40 + 24));
          }
          else
          {
            v42 = *(_OWORD *)(v40 + 16);
            *(_QWORD *)&v158[24] = *(_QWORD *)(v40 + 32);
            *(_OWORD *)&v158[8] = v42;
          }
          v91 = v37;
          *(_DWORD *)&v158[32] = *(_DWORD *)(v41 + 32);
          v159 = 0uLL;
          *(_QWORD *)&v158[40] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v158[40], *(__int128 **)(v41 + 40), *(__int128 **)(v41 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v41 + 48) - *(_QWORD *)(v41 + 40)) >> 3));
          v160 = *(_OWORD *)(v41 + 64);
          *(_QWORD *)v158 = off_24C021970;
          v161 = *(_OWORD *)(v41 + 80);
          v92 = v125[4];
          v93 = *((_QWORD *)v119 + 2);
          (*(void (**)(__int128 *__return_ptr, ZinObjectNameFactory *, _QWORD))(*(_QWORD *)a4 + 16))(&__p, a4, 0);
          v94 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v119 + 32))(v119, 0, 0);
          v136[0] = 0;
          v136[1] = v121;
          memset(&v136[2], 0, 24);
          v136[5] = 1;
          v136[6] = v92;
          v137 = vdupq_n_s64(1uLL);
          v138 = 1;
          View = (ZinIrOpLayer *)ZinBuilder::CreateView(v93, (uint64_t)&__p, v94, v171, (uint64_t)v136);
          if (SHIBYTE(v130) < 0)
            operator delete((void *)__p);
          v168 = v32;
          *(_QWORD *)&v135[0] = &v168;
          *((_QWORD *)&v135[0] + 1) = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(&__p, v135);
          v96 = v91;
          v97 = ZinIrOpLayerGraph::AddNode(a2, View, (ZinIrOpLayer ***)&__p);
          *(_QWORD *)&__p = &unk_24C02BB18;
          if (*((_QWORD *)&__p + 1))
          {
            v130 = (void *)*((_QWORD *)&__p + 1);
            operator delete(*((void **)&__p + 1));
          }
          v37 = v96 & v97 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v119, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          *((_QWORD *)v141 + v121++) = View;
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)v158);
          v98 = v39;
        }
        v36 = v98 + 1;
        v35 = v150;
        if (0x82FA0BE82FA0BE83 * ((v151 - v150) >> 3) <= v36)
          goto LABEL_96;
      }
    }
    v37 = v18 & v19 & v33 & v34;
LABEL_96:
    if ((v37 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v32, 0) & 1) == 0)
    {
      v112 = (char *)v32 + 24;
      if (*((char *)v32 + 47) < 0)
        v112 = *(const char **)v112;
      ZinAssertImpl("Could not complete decomposition of layer:%s", v112);
    }
    if (*(_BYTE *)(*((_QWORD *)v32 + 2) + 668))
    {
      GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(v119);
      LODWORD(__p) = 0;
      v103 = *(_QWORD *)v117;
      HIDWORD(__p) = v125[5];
      *(_QWORD *)((char *)&__p + 4) = v103;
      v104 = operator new();
      v105 = *GroupId;
      *(_OWORD *)&v158[8] = 0uLL;
      *(_QWORD *)v158 = &v158[8];
      ZinPixelShuffleUnshuffleTransform::ZinPixelShuffleUnshuffleTransform(v104, v105, &__p, v158);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v158, *(_QWORD **)&v158[8]);
      v106 = *((_QWORD *)v32 + 2);
      v107 = *(_QWORD *)ZinIrOpLayer::GetGroupId(v119);
      v126 = v104;
      ZinIrContext::InsertShapeDependentTransform(v106, v107, &v126);
      v108 = v126;
      v126 = 0;
      if (v108)
        (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
    }
    if ((_QWORD)v139)
    {
      *((_QWORD *)&v139 + 1) = v139;
      operator delete((void *)v139);
    }
    if (v141)
    {
      v142 = (uint64_t *)v141;
      operator delete(v141);
    }
    if (v115 < 0)
      operator delete(v114);
    v109 = v144;
    v144 = 0;
    if (v109)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v144, v109);
    if (v146[0])
    {
      v146[1] = v146[0];
      operator delete(v146[0]);
    }
    v110 = v149;
    v149 = 0;
    if (v110)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v149, v110);
  }
  *(_QWORD *)v158 = &v150;
  std::vector<PixelShuffleDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  return 0;
}

void sub_206E78B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *a70;
  _QWORD *v71;
  void *v72;
  _QWORD *v73;
  void *v74;

  if (a37)
    (*(void (**)(uint64_t))(*(_QWORD *)a37 + 8))(a37);
  if (__p)
    operator delete(__p);
  if (a70)
    operator delete(a70);
  if (a13 < 0)
    operator delete(a11);
  v71 = (_QWORD *)STACK[0x200];
  STACK[0x200] = 0;
  if (v71)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&STACK[0x200], v71);
  v72 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v72;
    operator delete(v72);
  }
  v73 = (_QWORD *)STACK[0x308];
  STACK[0x308] = 0;
  if (v73)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&STACK[0x308], v73);
  STACK[0x370] = (unint64_t)&STACK[0x310];
  std::vector<PixelShuffleDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x370]);
  v74 = (void *)STACK[0x328];
  if (STACK[0x328])
  {
    STACK[0x330] = (unint64_t)v74;
    operator delete(v74);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinPixelShuffleLayer::CreateDecomposedDeconv(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t InputTensor;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int *v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  ZinIrKernel *v32;
  ZinIrOpLayer *v33;
  ZinIrKernel *v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  ZinIrOpLayer *FusedDeconv;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  ZinIrKernel *v45;
  _OWORD v47[2];
  int v48;
  _QWORD *v49;
  uint64_t v50;
  ZinIrOpLayer **v51;
  void *__p;
  void *v53;
  ZinIrKernel *v54;
  _BYTE v55[32];
  uint64_t v56;
  ZinIrKernel *v57;
  void *v58[3];
  void *v59[2];
  std::string::size_type v60;
  int64x2_t v61;
  int64x2_t v62;
  uint64_t v63;
  int64x2_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  char v74;
  int v75;
  void *v76[16];
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[2];
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[4];

  v88[1] = *MEMORY[0x24BDAC8D0];
  if (a6[1] - *a6 != 688)
    ZinAssertImpl("Invalid pixelShuffle decomposition: the number of decomposed layers is not equal to 2");
  InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a1, 0);
  v12 = (_DWORD *)*a6;
  if (*(_DWORD *)*a6 != 1)
    ZinAssertImpl("Invalid pixelShuffle decomposition: the first decomposed unit type is not equal to Convolution operator");
  v13 = InputTensor;
  v14 = **(_QWORD **)(a1 + 88);
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)v76, (const ZinIrKernelUnitInfo *)(v12 + 2));
  v76[0] = off_24C01CAD8;
  v16 = *(_OWORD *)(v12 + 74);
  v15 = *(_OWORD *)(v12 + 78);
  v17 = *(_OWORD *)(v12 + 70);
  *(_OWORD *)((char *)v85 + 12) = *(_OWORD *)(v12 + 81);
  v18 = *(_OWORD *)(v12 + 66);
  v81 = *(_OWORD *)(v12 + 62);
  v82 = v18;
  v84 = v16;
  v85[0] = v15;
  v83 = v17;
  v64 = vdupq_n_s64(1uLL);
  v65 = 1;
  *(_QWORD *)&v16 = 0x100000001;
  *((_QWORD *)&v16 + 1) = 0x100000001;
  v66 = v16;
  v67 = 0x100000001;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  v71 = v16;
  v74 = 0;
  v75 = 0;
  v19 = *(int **)(a1 + 64);
  v20 = v19[4] * (uint64_t)v19[3] * v19[5];
  v72 = *((_QWORD *)&v81 + 1);
  v73 = BYTE4(v81);
  v61.i64[0] = v20;
  v61.i64[1] = v20;
  v62 = v64;
  v63 = 1;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(v55, a4, 2);
  v21 = std::string::append((std::string *)v55, "_onehot_conv_kernel_", 0x14uLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v60 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)v59 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v55[23] & 0x80000000) != 0)
    operator delete(*(void **)v55);
  v23 = *(_DWORD *)(v13 + 88);
  if (v23 == 2)
    v24 = 2;
  else
    v24 = 4;
  if (v23 == 1)
    v25 = 1;
  else
    v25 = v24;
  *(_DWORD *)v55 = 0;
  std::vector<float>::vector(v58, v61.i64[1] * v61.i64[0] * v62.i64[0] * v62.i64[1] * v63, v55);
  v26 = v61.i64[0];
  if (v61.i64[0] >= 1)
  {
    v27 = v58[0];
    v28 = 4 * v61.i64[0] + 4;
    do
    {
      *v27 = 1065353216;
      v27 = (_DWORD *)((char *)v27 + v28);
      --v26;
    }
    while (v26);
  }
  ZinIrKernel::CreateDynamicKernel((__int128 *)v59, (uint64_t)&v64, (float **)v58, v25, &v61, 2uLL, a3, 0, (uint64_t *)&v57);
  v29 = *(_OWORD *)(v13 + 64);
  *(_OWORD *)v55 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)&v55[16] = v29;
  v56 = *(_QWORD *)(v13 + 80);
  *(_QWORD *)&v55[8] = v61.i64[0] * v72;
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_DWORD *)(v13 + 88);
  v32 = v57;
  v57 = 0;
  v54 = v32;
  v33 = (ZinIrOpLayer *)ZinBuilder::CreateConv(v30, a4, (uint64_t)v55, v31, v31, &v54);
  v34 = v54;
  v54 = 0;
  if (v34)
  {
    ZinIrKernel::~ZinIrKernel(v34);
    MEMORY[0x20BD002F8]();
  }
  v88[0] = a1;
  v49 = v88;
  v50 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v51, &v49);
  if (!ZinIrOpLayerGraph::AddNode(a2, v33, &v51))
  {
    v51 = (ZinIrOpLayer **)&unk_24C02BB18;
    if (__p)
    {
      v53 = __p;
      operator delete(__p);
    }
LABEL_52:
    ZinAssertImpl("Failed to update graph while decomposing PixelShuffle");
  }
  v35 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v14, (uint64_t)v33, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v51 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  if ((v35 & 1) == 0)
    goto LABEL_52;
  if (*(_DWORD *)(*a6 + 344) != 1)
    ZinAssertImpl("Invalid pixelShuffle decomposition: the second decomposed unit type is not equal to Convolution operator");
  v36 = *(_QWORD *)(v19 + 3);
  v37 = v19[5];
  v38 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v39 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 88);
  v40 = *(_DWORD *)(v13 + 88);
  v86[0] = &unk_24C0538E0;
  v86[1] = ZinPixelShuffleUtils::Standalone2x2Transform;
  v87 = v86;
  FusedDeconv = (ZinIrOpLayer *)ZinPixelShuffleUtils::CreateFusedDeconv(a4, (uint64_t *)v33, v36, v37, (__int128 *)(v38 + 48), v39, v40, v13 + 48, a3, 0, (uint64_t)v86);
  v42 = v87;
  if (v87 == v86)
  {
    v43 = 4;
    v42 = v86;
    goto LABEL_25;
  }
  if (v87)
  {
    v43 = 5;
LABEL_25:
    (*(void (**)(void))(*v42 + 8 * v43))();
  }
  v88[0] = a1;
  v49 = v88;
  v50 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v51, &v49);
  if (ZinIrOpLayerGraph::AddNode(a2, FusedDeconv, &v51)
    && ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v14, (uint64_t)FusedDeconv, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0))
  {
    memset(v47, 0, sizeof(v47));
    v48 = 1065353216;
    v44 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, FusedDeconv, v47)
       && ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0)
       && ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v33, 0);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v47);
  }
  else
  {
    v44 = 0;
  }
  v51 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  if (!v44)
    ZinAssertImpl("Failed to update graph while decomposing PixelShuffle");
  v45 = v57;
  v57 = 0;
  if (v45)
  {
    ZinIrKernel::~ZinIrKernel(v45);
    MEMORY[0x20BD002F8]();
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
  v76[0] = off_24C01ED88;
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v76);
  return 0;
}

void sub_206E79474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,ZinIrKernel *a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  a20 = &unk_24C02BB18;
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a34, 0);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  if (a43 < 0)
    operator delete(a38);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&a63);
  _Unwind_Resume(a1);
}

_QWORD *ZinPixelShuffleLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t InputTensor;
  int v17;
  __int128 v18;
  char *v19;
  __int128 v20;
  uint64_t Hal;
  uint64_t *GroupId;
  _BYTE v24[44];
  void *__p;
  void *v26;
  char *v27;
  uint64_t v28[2];
  _BYTE v29[23];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C0208B8;
  v9 = *(_QWORD *)(v7 + 12);
  *(_DWORD *)(v8 + 20) = *(_DWORD *)(v7 + 20);
  *(_QWORD *)(v8 + 12) = v9;
  *(_QWORD *)v24 = v8;
  v10 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  v28[0] = v10;
  v28[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  ZinPixelShuffleLayer::ZinPixelShuffleLayer(v6, (uint64_t *)v24, v28, a3);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (*(_QWORD *)v24)
    (*(void (**)(_QWORD))(**(_QWORD **)v24 + 8))(*(_QWORD *)v24);
  InputTensor = ZinIrOpLayer::GetInputTensor(a1, 0);
  v17 = *(_DWORD *)(InputTensor + 88);
  v18 = *(_OWORD *)(InputTensor + 64);
  *(_OWORD *)&v24[4] = *(_OWORD *)(InputTensor + 48);
  *(_OWORD *)&v24[20] = v18;
  *(_QWORD *)&v24[36] = *(_QWORD *)(InputTensor + 80);
  memset(&v29[3], 0, 20);
  v19 = (char *)operator new(0x78uLL);
  *((_OWORD *)v19 + 2) = *(_OWORD *)&v24[28];
  v20 = *(_OWORD *)v24;
  *(_OWORD *)(v19 + 20) = *(_OWORD *)&v24[16];
  v26 = v19 + 120;
  v27 = v19 + 120;
  *(_DWORD *)v19 = v17;
  *(_OWORD *)(v19 + 4) = v20;
  *((_WORD *)v19 + 24) = 0;
  *(int64x2_t *)(v19 + 56) = vdupq_n_s64(1uLL);
  v19[72] = 0;
  v19[92] = 0;
  *(_OWORD *)(v19 + 93) = *(_OWORD *)v29;
  *(_QWORD *)(v19 + 108) = *(_QWORD *)&v29[15];
  __p = v19;
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a1 + 2) + 160));
  (*(void (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  ZinIrOpLayer::ValidateSemantics((uint64_t)v6);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206E7979C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  MEMORY[0x20BD002F8](v19, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinPixelShuffleLayer::LowerEngine(uint64_t a1, uint64_t **a2, const ZinIrHalParameters ***a3)
{
  const ZinIrHalParameters *v5;
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string v16;
  void *v17[2];
  int64_t v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;
  _QWORD v22[3];
  char v23;

  v5 = **a3;
  if (*(char *)(a1 + 47) >= 0)
    v6 = *(unsigned __int8 *)(a1 + 47);
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, v6 + 1);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a1 + 47) >= 0)
      v8 = (const void *)(a1 + 24);
    else
      v8 = *(const void **)(a1 + 24);
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v16, "pix_shuf");
  v9 = std::string::append(&v16, "_xfm", 4uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v18 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v17 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v18 >= 0)
    v11 = v17;
  else
    v11 = (void **)v17[0];
  if (v18 >= 0)
    v12 = HIBYTE(v18);
  else
    v12 = (std::string::size_type)v17[1];
  v13 = std::string::append(&v19, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v21 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v22, __p);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  ZinPixelShuffleLayer::DecomposeStandalone((ZinPixelShuffleLayer *)a1, a2, v5, (ZinObjectNameFactory *)v22);
  v22[0] = off_24C01FBB0;
  if (v23 < 0)
    operator delete((void *)v22[1]);
  return 0;
}

void sub_206E799C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  *(_QWORD *)(v33 - 88) = off_24C01FBB0;
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(exception_object);
}

_QWORD *ZinPixelShuffleLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "PIXEL_SHUFFLE");
}

uint64_t ZinPixelShuffleLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206E79B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL ZinPixelShuffleLayer::IsRedundant(ZinPixelShuffleLayer *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 8) + 16)
       * *(_DWORD *)(*((_QWORD *)this + 8) + 12)
       * *(_DWORD *)(*((_QWORD *)this + 8) + 20) == 1;
}

void ZinPixelShuffleLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  const char **v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v3 = a2[1];
  if (v3 - *a2 != 120)
    ZinAssertImpl("PixelShuffle layer can only have one bottom");
  v5 = (_DWORD *)*((_QWORD *)a1 + 8);
  if (v5[5] != 1)
    ZinAssertImpl("Unsupported Depth expansion value:%d. PixelShuffle currently supports only expansion factors on Width and Height dimensions.", v5[5]);
  v6 = 0;
  v12 = "width_axis";
  v7 = v5[3];
  v8 = v5[4];
  v13 = v7;
  v14 = "height_axis";
  v15 = v8;
  v16 = "depth_axis";
  v17 = 1;
  v9 = &v12;
  do
  {
    v10 = 1648;
    while (*(_QWORD *)&a3[v10] != *((_DWORD *)v9 + 2))
    {
      v10 += 8;
      if (v10 == 1688)
        ZinAssertImpl("Invalid PixelShuffle factor value(%d) in %s, it must be {1, 2, 3, 4, 8}.", *((_DWORD *)v9 + 2), *v9);
    }
    ++v6;
    v9 = &(&v12)[2 * v6];
  }
  while (v6 != 3);
  for (; v4 != v3; v4 += 120)
  {
    v11 = *(_QWORD *)(v4 + 16);
    if (v11 % (v8 * v7))
      ZinAssertImpl("PixelShuffle's Channel dimension:%ld must be divisible by the product of its factors: (width:%d, height:%d, depth:%d)", v11, v7, v8, 1);
  }
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
}

BOOL ZinConvLayerUtils::IsDilatedConv(int *a1)
{
  return *a1 > 1 || a1[1] > 1 || a1[2] > 1;
}

BOOL ZinConvLayerUtils::IsLargeKernelStep(uint64_t a1, __int32 *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  _BOOL8 result;

  v2.i64[0] = *(_QWORD *)a1;
  v2.i32[2] = *(_DWORD *)(a1 + 8);
  v2.i32[3] = *a2;
  v3.i64[0] = 0x200000002;
  v3.i64[1] = 0x200000002;
  result = 1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v2, v3))) & 1) == 0 && a2[1] <= 2)
    return a2[2] > 2;
  return result;
}

BOOL ZinConvLayerUtils::IsLargeKernelSize(int64_t *a1, int a2, uint64_t a3)
{
  int64_t MaxLogicalKernelWidthForLargeKernelMode;
  int64_t MaxLogicalKernelHeightForLargeKernelMode;

  MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(a3, a2);
  MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode(a3);
  return *a1 > MaxLogicalKernelWidthForLargeKernelMode || a1[1] > MaxLogicalKernelHeightForLargeKernelMode;
}

uint64_t ZinConvLayerUtils::IsDecompositionNeeded(uint64_t a1, int a2, uint64_t a3)
{
  int32x4_t v5;
  BOOL v6;
  int64_t v7;
  int64_t v8;
  int64_t MaxLogicalKernelWidthForLargeKernelMode;
  int64_t MaxLogicalKernelHeightForLargeKernelMode;
  int v12;
  int v13;
  int v14;
  _BOOL4 v19;
  unsigned int v20;

  v5.i64[0] = 0x200000002;
  v5.i64[1] = 0x200000002;
  v6 = 1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(*(int32x4_t *)(a1 + 152), v5))) & 1) == 0 && *(int *)(a1 + 168) <= 2)
    v6 = *(_DWORD *)(a1 + 172) > 2;
  v8 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(a3, a2);
  MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode(a3);
  if (v6)
    return 1;
  v12 = *(_DWORD *)(a1 + 208);
  v13 = *(_DWORD *)(a1 + 212);
  v14 = *(_DWORD *)(a1 + 216);
  v19 = (v7 > MaxLogicalKernelWidthForLargeKernelMode || v8 > MaxLogicalKernelHeightForLargeKernelMode)
     && v12 < 2
     && v13 < 2
     && v14 < 2;
  if ((*(_BYTE *)(a1 + 272) & 0x40) != 0)
    v19 = 0;
  v20 = v12 > 1 || v19;
  if (v13 > 1)
    v20 = 1;
  if (v14 > 1)
    return 1;
  else
    return v20;
}

void ZinConvLayerUtils::ValidateConvKernelInfoSemantics(ZinIrKernel **a1)
{
  ZinIrKernel *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  void **v33;
  void **v34;
  void **v35;
  void **v36;
  void **v37;
  void **v38;
  void **v39;
  void **v40;
  void **v41;
  void **v42;
  void *v43[2];
  char v44;
  void *__p[2];
  char v46;

  v2 = *a1;
  v3 = *((_QWORD *)*a1 + 33);
  v4 = *((_QWORD *)*a1 + 34);
  v5 = *((_QWORD *)*a1 + 35);
  std::string::basic_string[abi:ne180100]<0>(__p, "width");
  if (v4 <= 0)
  {
    if (v46 >= 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    ZinAssertImpl("Error: invalid conv kernel %s = %zd. It should be a positive number", (const char *)v20, v4);
  }
  if (v46 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "height");
  if (v3 <= 0)
  {
    if (v46 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    ZinAssertImpl("Error: invalid conv kernel %s = %zd. It should be a positive number", (const char *)v21, v3);
  }
  if (v46 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "depth");
  if (v5 <= 0)
  {
    if (v46 >= 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    ZinAssertImpl("Error: invalid conv kernel %s = %zd. It should be a positive number", (const char *)v22, v5);
  }
  if (v46 < 0)
    operator delete(__p[0]);
  v6 = *((_DWORD *)v2 + 82);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  std::string::basic_string[abi:ne180100]<0>(v43, "x");
  if (v6 <= 0)
  {
    v23 = __p;
    if (v46 < 0)
      v23 = (void **)__p[0];
    v24 = v43;
    if (v44 < 0)
      v24 = (void **)v43[0];
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v23, (const char *)v24, v6);
  }
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(__p[0]);
  v7 = *((_DWORD *)v2 + 83);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  std::string::basic_string[abi:ne180100]<0>(v43, "y");
  if (v7 <= 0)
  {
    v25 = __p;
    if (v46 < 0)
      v25 = (void **)__p[0];
    v26 = v43;
    if (v44 < 0)
      v26 = (void **)v43[0];
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v25, (const char *)v26, v7);
  }
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(__p[0]);
  v8 = *((_DWORD *)v2 + 84);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  std::string::basic_string[abi:ne180100]<0>(v43, "z");
  if (v8 <= 0)
  {
    v27 = __p;
    if (v46 < 0)
      v27 = (void **)__p[0];
    v28 = v43;
    if (v44 < 0)
      v28 = (void **)v43[0];
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v27, (const char *)v28, v8);
  }
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(__p[0]);
  v9 = *((_DWORD *)v2 + 85);
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  std::string::basic_string[abi:ne180100]<0>(v43, "x");
  if (v9 <= 0)
  {
    v29 = __p;
    if (v46 < 0)
      v29 = (void **)__p[0];
    v30 = v43;
    if (v44 < 0)
      v30 = (void **)v43[0];
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v29, (const char *)v30, v9);
  }
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(__p[0]);
  v10 = *((_DWORD *)v2 + 86);
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  std::string::basic_string[abi:ne180100]<0>(v43, "y");
  if (v10 <= 0)
  {
    v31 = __p;
    if (v46 < 0)
      v31 = (void **)__p[0];
    v32 = v43;
    if (v44 < 0)
      v32 = (void **)v43[0];
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v31, (const char *)v32, v10);
  }
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(__p[0]);
  v11 = *((_DWORD *)v2 + 87);
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  std::string::basic_string[abi:ne180100]<0>(v43, "z");
  if (v11 <= 0)
  {
    v33 = __p;
    if (v46 < 0)
      v33 = (void **)__p[0];
    v34 = v43;
    if (v44 < 0)
      v34 = (void **)v43[0];
    ZinAssertImpl("Error: invalid conv %s stride %s = %d. It should be a positive number", (const char *)v33, (const char *)v34, v11);
  }
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(__p[0]);
  v12 = *((_DWORD *)v2 + 96);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  if (v12 <= 0)
  {
    if (v46 >= 0)
      v35 = __p;
    else
      v35 = (void **)__p[0];
    ZinAssertImpl("Error: invalid %s dilation factor = %d. It should be a positive number", (const char *)v35, v12);
  }
  if (v46 < 0)
    operator delete(__p[0]);
  v13 = *((_DWORD *)v2 + 97);
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  if (v13 <= 0)
  {
    if (v46 >= 0)
      v36 = __p;
    else
      v36 = (void **)__p[0];
    ZinAssertImpl("Error: invalid %s dilation factor = %d. It should be a positive number", (const char *)v36, v13);
  }
  if (v46 < 0)
    operator delete(__p[0]);
  if (*((_DWORD *)v2 + 98) != 1)
    ZinAssertImpl("Error: dilation factor z = %d is invalid as dilation along Z dimension is not supported", *((_DWORD *)v2 + 98));
  ValidateKernelFormatSemantics(a1);
  v14 = *((int *)v2 + 90);
  std::string::basic_string[abi:ne180100]<0>(__p, "top");
  if ((v14 & 0x80000000) != 0)
  {
    if (v46 >= 0)
      v37 = __p;
    else
      v37 = (void **)__p[0];
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v37, v14);
  }
  if (v46 < 0)
    operator delete(__p[0]);
  v15 = *((int *)v2 + 91);
  std::string::basic_string[abi:ne180100]<0>(__p, "bottom");
  if ((v15 & 0x80000000) != 0)
  {
    if (v46 >= 0)
      v38 = __p;
    else
      v38 = (void **)__p[0];
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v38, v15);
  }
  if (v46 < 0)
    operator delete(__p[0]);
  v16 = *((int *)v2 + 88);
  std::string::basic_string[abi:ne180100]<0>(__p, "left");
  if ((v16 & 0x80000000) != 0)
  {
    if (v46 >= 0)
      v39 = __p;
    else
      v39 = (void **)__p[0];
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v39, v16);
  }
  if (v46 < 0)
    operator delete(__p[0]);
  v17 = *((int *)v2 + 89);
  std::string::basic_string[abi:ne180100]<0>(__p, "right");
  if ((v17 & 0x80000000) != 0)
  {
    if (v46 >= 0)
      v40 = __p;
    else
      v40 = (void **)__p[0];
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v40, v17);
  }
  if (v46 < 0)
    operator delete(__p[0]);
  v18 = *((int *)v2 + 92);
  std::string::basic_string[abi:ne180100]<0>(__p, "front");
  if ((v18 & 0x80000000) != 0)
  {
    if (v46 >= 0)
      v41 = __p;
    else
      v41 = (void **)__p[0];
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v41, v18);
  }
  if (v46 < 0)
    operator delete(__p[0]);
  v19 = *((int *)v2 + 93);
  std::string::basic_string[abi:ne180100]<0>(__p, "back");
  if ((v19 & 0x80000000) != 0)
  {
    if (v46 >= 0)
      v42 = __p;
    else
      v42 = (void **)__p[0];
    ZinAssertImpl("Error: invalid %s padding value %zd", (const char *)v42, v19);
  }
  if (v46 < 0)
    operator delete(__p[0]);
}

void sub_206E7A528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinConvLayerUtils::ValidateConvKernelInfo(ZinIrKernel **a1, int *a2, _QWORD *a3)
{
  ZinIrKernel *v5;
  unsigned int v6;
  int64_t MaxLogicalKernelWidthForLargeKernelMode;
  int64_t MaxLogicalKernelHeightForLargeKernelMode;
  int64_t MaxLogicalKernelDepthForLargeKernelMode;
  uint64_t MaxSmallKernelWidth;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t result;
  _DWORD *v23;
  _DWORD *v24;
  const char *v25;
  const char *v26;
  void **v27;
  const __CFString *v28;
  const char *v29;
  void **v30;
  void **v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  uint64_t v47;

  v5 = *a1;
  v6 = *a2;
  MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode((uint64_t)a3, *a2);
  MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode((uint64_t)a3);
  MaxLogicalKernelDepthForLargeKernelMode = GetMaxLogicalKernelDepthForLargeKernelMode((uint64_t)a3);
  MaxSmallKernelWidth = ZinIrHalParameters::GetMaxSmallKernelWidth((uint64_t)a3, v6);
  v34 = a3[14];
  v35 = MaxSmallKernelWidth;
  v33 = a3[16];
  v12 = *((_QWORD *)v5 + 33);
  v11 = *((_QWORD *)v5 + 34);
  v13 = *((_QWORD *)v5 + 35);
  std::string::basic_string[abi:ne180100]<0>(v46, "width");
  if (v11 < 1 || v11 > MaxLogicalKernelWidthForLargeKernelMode)
  {
    if (v47 >= 0)
      v25 = (const char *)v46;
    else
      v25 = (const char *)v46[0];
    ZinAssertImpl("Invalid conv kernel %s = %zd, It should be in [%zd, %zd]", v25, v11, 1uLL, MaxLogicalKernelWidthForLargeKernelMode);
  }
  if (SHIBYTE(v47) < 0)
    operator delete(v46[0]);
  std::string::basic_string[abi:ne180100]<0>(v44, "height");
  if (v12 < 1 || v12 > MaxLogicalKernelHeightForLargeKernelMode)
  {
    if (v45 >= 0)
      v26 = (const char *)v44;
    else
      v26 = (const char *)v44[0];
    ZinAssertImpl("Invalid conv kernel %s = %zd, It should be in [%zd, %zd]", v26, v12, 1uLL, MaxLogicalKernelHeightForLargeKernelMode);
  }
  if (v45 < 0)
    operator delete(v44[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "depth");
  if (v13 < 1 || v13 > MaxLogicalKernelDepthForLargeKernelMode)
  {
    if (v43 >= 0)
      v27 = __p;
    else
      v27 = (void **)__p[0];
    ZinAssertImpl("Invalid conv kernel %s = %zd, It should be in [%zd, %zd]", (const char *)v27, v13, 1uLL, MaxLogicalKernelDepthForLargeKernelMode);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  if ((*((_BYTE *)v5 + 448) & 0x40) != 0)
  {
    v16 = *((unsigned int *)v5 + 85);
    std::string::basic_string[abi:ne180100]<0>(v40, "width");
    if ((int)v16 >= 2 && v11 > v35)
    {
      v30 = v40;
      if (v41 < 0)
        v30 = (void **)v40[0];
      ZinAssertImpl("Invalid deconv kernel %s = %zd, It should be in [%zd, %zd] when stride = %zd", (const char *)v30, v11, 1uLL, v35, v16);
    }
    if (v41 < 0)
      operator delete(v40[0]);
    v17 = *((unsigned int *)v5 + 86);
    std::string::basic_string[abi:ne180100]<0>(v38, "height");
    if ((int)v17 >= 2 && v12 > v34)
    {
      v31 = v38;
      if (v39 < 0)
        v31 = (void **)v38[0];
      ZinAssertImpl("Invalid deconv kernel %s = %zd, It should be in [%zd, %zd] when stride = %zd", (const char *)v31, v12, 1uLL, v34, v17);
    }
    if (v39 < 0)
      operator delete(v38[0]);
    v18 = *((unsigned int *)v5 + 87);
    std::string::basic_string[abi:ne180100]<0>(v36, "depth");
    if ((int)v18 >= 2 && v13 > v33)
    {
      v32 = v36;
      if (v37 < 0)
        v32 = (void **)v36[0];
      ZinAssertImpl("Invalid deconv kernel %s = %zd, It should be in [%zd, %zd] when stride = %zd", (const char *)v32, v13, 1uLL, v33, v18);
    }
    if (v37 < 0)
      operator delete(v36[0]);
  }
  v19 = *((_DWORD *)v5 + 82);
  if (v19 < 1 || v19 > (int)a3[23])
    ZinAssertImpl("Error: invalid x stride = %d. It should be in [%d, %zu]", v19, 1, a3[23]);
  v20 = *((_DWORD *)v5 + 83);
  if (v20 < 1 || v20 > (int)a3[24])
    ZinAssertImpl("Error: invalid y stride = %d. It should be in [%d, %zu]", v20, 1, a3[24]);
  v21 = *((_DWORD *)v5 + 84);
  if (v21 < 1 || v21 > (int)a3[25])
    ZinAssertImpl("Error: invalid z stride = %d. It should be in [%d, %zu]", v21, 1, a3[25]);
  ValidateKernelFormat(a1, (uint64_t)a3);
  result = *((unsigned int *)v5 + 94);
  v23 = (_DWORD *)a3[183];
  v24 = (_DWORD *)a3[184];
  if (v23 != v24)
  {
    while (*v23 != (_DWORD)result)
    {
      if (++v23 == v24)
      {
        v23 = (_DWORD *)a3[184];
        break;
      }
    }
  }
  if (v23 == v24)
  {
    v46[0] = 0;
    v46[1] = 0;
    v47 = 0;
    v28 = ZinIrPaddingModeToCFString(result);
    ZinGetString(v28, (uint64_t)v46);
    if (v47 >= 0)
      v29 = (const char *)v46;
    else
      v29 = (const char *)v46[0];
    ZinAssertImpl("Invalid padding mode: %s for conv layer.", v29);
  }
  return result;
}

void sub_206E7A9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

ZinIrKernel *ZinConvLayerUtils::ValidateConvSemantics(ZinIrKernel **a1, uint64_t a2, uint64_t a3)
{
  ZinIrKernel *v6;
  unint64_t v7;

  v6 = *a1;
  ZinConvLayerUtils::ValidateConvKernelInfoSemantics(a1);
  v7 = *((_QWORD *)v6 + 50);
  if (v7 != 1)
  {
    if (!v7)
      ZinAssertImpl("Error: invalid number of groups = %zd for conv layer. It should be a positive number", 0);
    if (*(_QWORD *)(a2 + 16) % v7)
      ZinAssertImpl("Error: invalid input channel dim = %zu and num groups = %zu. The input channels should be divisible by num group", *(_QWORD *)(a2 + 16), v7);
    if (*(_QWORD *)(a3 + 16) % v7)
      ZinAssertImpl("Error: invalid output channel dim = %zu and num groups = %zu. The output channels should be divisible by num group", *(_QWORD *)(a3 + 16), v7);
  }
  return ValidateKernelQuantizationSemantics(a1);
}

uint64_t ZinConvLayerUtils::ValidateConv(ZinIrKernel **a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  ZinIrKernel *v10;
  unint64_t v11;
  unint64_t v12;
  ZinIrKernel *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unsigned int v35;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int WeightFormat;
  uint64_t result;
  const char *v43;
  const char *v44;
  _QWORD *v45;
  uint64_t v46;
  void *__p;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  void *v53;
  int v54;
  void *v55;
  int v56;
  uint64_t v57;
  int v58;
  int8x16_t v59;
  uint64_t v60;

  v10 = *a1;
  ZinConvLayerUtils::ValidateConvKernelInfo(a1, (int *)a2, a5);
  v11 = *((_QWORD *)v10 + 50);
  v12 = a5[48];
  if (v11 < a5[47] || v11 > v12)
    ZinAssertImpl("Error: invalid number of groups = %zd for conv layer. It should be in [%zd, %zd]", v11, a5[47], v12);
  ValidateKernelFootprint(a1, a2, a3, a4, a5);
  v14 = *a1;
  v15 = *((_QWORD *)*a1 + 33);
  v59.i64[0] = *((_QWORD *)*a1 + 34);
  v59.i64[1] = v15;
  v16 = *((_QWORD *)v14 + 35);
  v60 = v16;
  if (ZinIrKernel::HasUnityWeight(v14))
  {
    if (v16 == 1)
      goto LABEL_28;
  }
  else
  {
    if (*((_QWORD *)*a1 + 73))
      v17 = v16 == 1;
    else
      v17 = 1;
    if (v17)
      goto LABEL_28;
  }
  if ((*((_BYTE *)v14 + 448) & 0x40) != 0)
    v18 = (int *)((char *)v14 + 340);
  else
    v18 = (int *)((char *)v14 + 328);
  ZinKernelComputeStrideExpansion(a5, v18, (unint64_t *)&v59, *(_DWORD *)a2, (*((_BYTE *)v14 + 448) & 0x40) >> 6, (int *)&v55);
  v53 = v55;
  v54 = v56;
  v51 = v57;
  v52 = v58;
  if (ZinIrKernel::HasUnityWeight(*a1))
  {
    v19 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(*((_QWORD *)*a1 + 73) + 136);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 184))(v20);
  }
  v21 = ZinIrKernel::HasUnityWeight(*a1) || *(_BYTE *)(*((_QWORD *)*a1 + 73) + 152) == 0;
  v22 = *(_BYTE *)(a4 + 375);
  v23 = *(_DWORD *)a2;
  v24 = *((_QWORD *)v14 + 50);
  v45 = a5;
  v46 = a4;
  v48 = 0;
  v49 = 0;
  __p = 0;
  v50 = 0;
  v25 = ZinMirConvUtils::CheckForHWLimits(a2 + 8, (uint64_t)(a3 + 1), v23, &v59, (uint64_t)&v53, (int *)&v51, (uint64_t)v14 + 352, (int *)v14 + 94, v24, (uint64_t *)&v45, v19, v22, 0, 0);
  if (SHIBYTE(v49) < 0)
    operator delete(__p);
  if ((*((_BYTE *)v14 + 448) & 0x40) != 0)
  {
    v26 = v21 & (v19 ^ 1);
    if (!v25)
      goto LABEL_28;
  }
  else
  {
    v26 = 0;
    if (!v25)
      goto LABEL_28;
  }
  if ((v26 & 1) == 0)
    ZinAssertImpl("illegal kernel dimension configuration");
LABEL_28:
  v27 = *((_BYTE *)v10 + 448);
  v28 = (*((_QWORD *)v10 + 34) - 1) * *((int *)v10 + 96);
  v29 = (*(_QWORD *)(a2 + 32) << ((v27 & 0x40) != 0)) + *((int *)v10 + 88) + (uint64_t)*((int *)v10 + 89);
  if (v29 <= v28)
    ZinAssertImpl("Error: invalid conv config: kernel width = %zd, padded input width = %zd. Kernel width should not exceed the input width", v28 + 1, v29);
  v30 = *((_QWORD *)v10 + 33);
  v31 = (v30 - 1) * *((int *)v10 + 97);
  v32 = (*(_QWORD *)(a2 + 24) << ((v27 & 0x40) != 0)) + *((int *)v10 + 90) + (uint64_t)*((int *)v10 + 91);
  if (v32 <= v31)
    ZinAssertImpl("Error: invalid conv config: kernel height = %zd, padded input height = %zd. Kernel height should not exceed the input height", v31 + 1, v32);
  v33 = (void *)*((_QWORD *)v10 + 35);
  v34 = (*(_QWORD *)(a2 + 40) << ((v27 & 0x40) != 0)) + *((int *)v10 + 92) + (uint64_t)*((int *)v10 + 93);
  if (v34 < (uint64_t)v33)
    ZinAssertImpl("Error: invalid conv config: kernel depth = %zd, padded input depth = %zd. Kernel depth should not exceed the input depth", *((_QWORD *)v10 + 35), v34);
  v35 = v27 & 0x40;
  if (v35)
    v36 = (int *)((char *)v10 + 340);
  else
    v36 = (int *)((char *)v10 + 328);
  v45 = (_QWORD *)*((_QWORD *)v10 + 34);
  v46 = v30;
  __p = v33;
  ZinKernelComputeStrideExpansion(a5, v36, (unint64_t *)&v45, *(_DWORD *)a2, v35 >> 6, v59.i32);
  v37 = *(_QWORD *)(a2 + 16) / *((_QWORD *)v10 + 50) * v59.i32[1] * (uint64_t)v59.i32[0] * v59.i32[2];
  std::string::basic_string[abi:ne180100]<0>(&v55, "input");
  v38 = a5[46];
  if (v37 - 1 >= v38)
  {
    if (v58 >= 0)
      v43 = (const char *)&v55;
    else
      v43 = (const char *)v55;
    ZinAssertImpl("Invalid production of sx, sy, sz = %zd for %s channel. It should be in [%d, %zu]", v37, v43, 1, v38);
  }
  if (SHIBYTE(v58) < 0)
    operator delete(v55);
  v39 = a3[2] * (int)v60 * (uint64_t)v59.i32[3] * SHIDWORD(v60);
  std::string::basic_string[abi:ne180100]<0>(&v55, "output");
  v40 = a5[46];
  if (v39 - 1 >= v40)
  {
    if (v58 >= 0)
      v44 = (const char *)&v55;
    else
      v44 = (const char *)v55;
    ZinAssertImpl("Invalid production of sx, sy, sz = %zd for %s channel. It should be in [%d, %zu]", v39, v44, 1, v40);
  }
  if (SHIBYTE(v58) < 0)
    operator delete(v55);
  WeightFormat = ZinIrKernel::GetWeightFormat(*a1);
  result = ZinKernelFormatIsPalette(WeightFormat);
  if ((_DWORD)result)
    return ValidatePaletteVectorSize((uint64_t *)a1, a2, (uint64_t)a3, (uint64_t)a5);
  return result;
}

void sub_206E7AF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinConvLayerUtils::CheckDecomposabilityForKernelWithLargeStrides(ZinConvLayerUtils *this, const ZinIrConvUnitInfo *a2)
{
  __int128 v2;
  int64x2_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int16 v13;
  int v14;

  v4 = vdupq_n_s64(1uLL);
  v5 = 1;
  *(_QWORD *)&v2 = 0x100000001;
  *((_QWORD *)&v2 + 1) = 0x100000001;
  v6 = v2;
  v7 = 0x100000001;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v11 = v2;
  v12 = 1;
  v13 = 0;
  v14 = 0;
  ZinIrConvUnit::CreateConvInfo((uint64_t)this, (uint64_t)&v4);
  return ZinConvLayerUtils::CheckDecomposabilityForKernelWithLargeStrides((uint64_t)&v4);
}

uint64_t ZinConvLayerUtils::CheckDecomposabilityForKernelWithLargeStrides(uint64_t result)
{
  int v1;
  int v2;

  if (*(int *)(result + 32) >= 3)
    ZinAssertImpl("Error: decomposition failed. Conv with stride = %d > 2 is not supported along depth axis", *(_DWORD *)(result + 32));
  if (*(_QWORD *)(result + 16) != 1)
    ZinAssertImpl("Error: decomposition failed. Conv kernel depth = %zd > 1 is not supported along depth axis", *(_QWORD *)(result + 16));
  v1 = *(_DWORD *)(result + 72);
  v2 = *(_DWORD *)(result + 80);
  if (v1 != 1 || *(_DWORD *)(result + 76) != 1 || v2 != 1)
    ZinAssertImpl("Error: decomposition failed. Dilation factor should be 1 at all axes for Conv with stride > 2 but are x = %d, y = %d, z = %d", v1, *(_DWORD *)(result + 76), v2);
  return result;
}

_QWORD *ZinIrDummyWeight::ZinIrDummyWeight(_QWORD *a1, uint64_t *a2, uint64_t **a3, int a4, int64x2_t *a5, uint64_t a6, int a7, char a8)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v9 = a2[1];
  v16 = *a2;
  v17 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  ZinIrWeight::ZinIrWeight((uint64_t)a1, &v16, a3, a4, a5, a6, a7, a8);
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *a1 = &off_24C01B8D0;
  return a1;
}

void sub_206E7B0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrDummyWeight::CreateAlias@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t **v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21[2];

  result = ZinIrWeight::CreateAlias(a1, a2, &v20);
  v6 = v20;
  if (v20)
  {
    v7 = *(_DWORD *)(v20 + 8);
    v8 = *(_QWORD *)(v20 + 304);
    v9 = *(_DWORD *)(v20 + 156);
    v10 = *(unsigned __int8 *)(v20 + 152);
    v11 = (_QWORD *)operator new();
    v12 = v11;
    v13 = (uint64_t **)(a1 + 280);
    v14 = *(_QWORD *)(a1 + 136);
    v15 = *(std::__shared_weak_count **)(a1 + 144);
    v21[0] = v14;
    v21[1] = (uint64_t)v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    ZinIrDummyWeight::ZinIrDummyWeight(v11, v21, v13, v7, (int64x2_t *)(v6 + 56), v8, v9, v10 != 0);
    if (v15)
    {
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    *a3 = v12;
    result = v20;
    v20 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_206E7B200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x20BD002F8](v3, 0x10B3C400FFB447ELL);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  _Unwind_Resume(a1);
}

void ZinIrDummyWeight::Dilate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[2];

  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = (*(_QWORD *)(a1 + 80) - 1) * a2 + 1;
  v17 = *(int64x2_t *)(a1 + 56);
  v19 = v8;
  v20 = v6;
  v18 = (v7 - 1) * a3 + 1;
  v9 = (uint64_t **)(a1 + 280);
  v10 = (_QWORD *)operator new();
  v11 = v10;
  v12 = *(std::__shared_weak_count **)(a1 + 144);
  v21[0] = *(_QWORD *)(a1 + 136);
  v21[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ZinIrDummyWeight::ZinIrDummyWeight(v10, v21, v9, *(_DWORD *)(a1 + 8), &v17, 1, 1262703187, 0);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *a4 = v11;
}

void sub_206E7B354(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  if (v2)
    ZinIrDummyWeight::Dilate(v2);
  MEMORY[0x20BD002F8](v1, 0x10B3C400FFB447ELL);
  _Unwind_Resume(a1);
}

void ZinIrDummyWeight::PadWeight(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[2];

  v7 = *(_QWORD *)(a1 + 80) + *a2 + a2[1];
  v8 = *(_QWORD *)(a1 + 72) + a2[2] + a2[3];
  v17 = *(int64x2_t *)(a1 + 56);
  v18 = v8;
  v19 = v7;
  v20 = *(_QWORD *)(a1 + 88) + a2[4] + a2[5];
  v9 = (uint64_t **)(a1 + 280);
  v10 = (_QWORD *)operator new();
  v11 = v10;
  v12 = *(std::__shared_weak_count **)(a1 + 144);
  v21[0] = *(_QWORD *)(a1 + 136);
  v21[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ZinIrDummyWeight::ZinIrDummyWeight(v10, v21, v9, *(_DWORD *)(a1 + 8), &v17, 0, a3, 0);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *a4 = v11;
}

void sub_206E7B498(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  if (v2)
    ZinIrDummyWeight::Dilate(v2);
  MEMORY[0x20BD002F8](v1, 0x10B3C400FFB447ELL);
  _Unwind_Resume(a1);
}

void ZinIrDummyWeight::ShuffleByType(uint64_t a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X2>, const ZinIrVector *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23[2];

  if (ZinKernelFormatIsPalette(*(_DWORD *)(a1 + 8)) && *(_QWORD *)(a1 + 304) >= 2uLL)
  {
    ZinIrWeight::CreateDePalettizedWeight((ZinIrWeight *)a1, a4, v23);
    (*(void (**)(uint64_t, uint64_t, int64x2_t *, const ZinIrVector *))(*(_QWORD *)v23[0] + 56))(v23[0], a2, a3, a4);
    v10 = v23[0];
    v23[0] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 136);
    v11 = *(std::__shared_weak_count **)(a1 + 144);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = (_QWORD *)operator new();
    v16 = v15;
    v23[0] = v12;
    v23[1] = (uint64_t)v11;
    if (v11)
    {
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    ZinIrDummyWeight::ZinIrDummyWeight(v15, v23, (uint64_t **)(a1 + 280), *(_DWORD *)(a1 + 8), a3, *(_QWORD *)(a1 + 304), 1262703187, 0);
    if (v11)
    {
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *a5 = v16;
    if (v11)
    {
      v21 = (unint64_t *)&v11->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_206E7B660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  _Unwind_Resume(exception_object);
}

void ZinIrDummyWeight::ShuffleChannelsByType(uint64_t a1@<X0>, uint64_t *a2@<X1>, const ZinIrVector *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int64x2_t v18[2];
  uint64_t v19;
  uint64_t v20[2];

  if (ZinIrWeight::RequiresDePalettizationForShuffleChannelsByType(a1, a2))
  {
    ZinIrWeight::CreateDePalettizedWeight((ZinIrWeight *)a1, a3, v18[0].i64);
    (*(void (**)(uint64_t, uint64_t *, const ZinIrVector *))(*(_QWORD *)v18[0].i64[0] + 48))(v18[0].i64[0], a2, a3);
    v8 = v18[0].i64[0];
    v18[0].i64[0] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  else
  {
    v9 = *(int64x2_t *)(a1 + 72);
    v18[0] = *(int64x2_t *)(a1 + 56);
    v18[1] = v9;
    v10 = (a2[1] - *a2) >> 3;
    v19 = *(_QWORD *)(a1 + 88);
    v18[0].i64[0] = v10;
    v11 = (_QWORD *)operator new();
    v12 = v11;
    v13 = *(std::__shared_weak_count **)(a1 + 144);
    v20[0] = *(_QWORD *)(a1 + 136);
    v20[1] = (uint64_t)v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    ZinIrDummyWeight::ZinIrDummyWeight(v11, v20, (uint64_t **)(a1 + 280), *(_DWORD *)(a1 + 8), v18, *(_QWORD *)(a1 + 304), 1262703187, 0);
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *a4 = v12;
  }
}

void sub_206E7B810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x20BD002F8](v7, 0x10B3C400FFB447ELL);
  _Unwind_Resume(a1);
}

void ZinIrDummyWeight::RemapByType(ZinIrDummyWeight *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v5;
  int64x2_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[2];

  v5 = (uint64_t **)((char *)this + 280);
  v6 = (int64x2_t *)((char *)this + 56);
  v7 = (_QWORD *)operator new();
  v8 = v7;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  v14[0] = *((_QWORD *)this + 17);
  v14[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ZinIrDummyWeight::ZinIrDummyWeight(v7, v14, v5, *((_DWORD *)this + 2), v6, *((_QWORD *)this + 38), 1262703187, 0);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a2 = v8;
}

void sub_206E7B938(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  if (v2)
    ZinIrDummyWeight::RemapByType(v2);
  MEMORY[0x20BD002F8](v1, 0x10B3C400FFB447ELL);
  _Unwind_Resume(a1);
}

void ZinIrDummyWeightUtils::CreateUncompressedDummyWeight(int64x2_t *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  void **v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void **v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t SerializedWeightElementCount;
  void **v30[3];

  v11 = a3;
  v28 = 0;
  SerializedWeightElementCount = GetSerializedWeightElementCount(a2, (unint64_t *)a1, a3);
  v27 = 0;
  switch(a2)
  {
    case 1:
      std::allocate_shared[abi:ne180100]<ZinIrConstData_dummy<signed char>,std::allocator<ZinIrConstData_dummy<signed char>>,unsigned long &,void>((uint64_t *)&SerializedWeightElementCount, &v24);
      break;
    case 2:
      goto LABEL_6;
    case 4:
      std::allocate_shared[abi:ne180100]<ZinIrConstData_dummy<half>,std::allocator<ZinIrConstData_dummy<half>>,unsigned long &,void>((uint64_t *)&SerializedWeightElementCount, &v24);
      break;
    case 6:
      std::allocate_shared[abi:ne180100]<ZinIrConstData_dummy<float>,std::allocator<ZinIrConstData_dummy<float>>,unsigned long &,void>((uint64_t *)&SerializedWeightElementCount, &v24);
      break;
    default:
      if (!ZinKernelFormatIsPalette(a2))
        ZinAssertImpl("Error: unrecognized kernel format");
LABEL_6:
      std::allocate_shared[abi:ne180100]<ZinIrConstData_dummy<unsigned char>,std::allocator<ZinIrConstData_dummy<unsigned char>>,unsigned long &,void>((uint64_t *)&SerializedWeightElementCount, &v24);
      break;
  }
  v13 = v24;
  v12 = v25;
  v27 = (uint64_t *)v24;
  v28 = v25;
  (*((void (**)(void **))*v24 + 2))(v24);
  if (a4)
    v14 = 1145261902;
  else
    v14 = 1262703187;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v15 = (_QWORD *)operator new();
  v16 = v15;
  v30[0] = v13;
  v30[1] = (void **)&v12->__vftable;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  ZinIrDummyWeight::ZinIrDummyWeight(v15, (uint64_t *)v30, (uint64_t **)&v24, a2, a1, v11, v14, a5);
  *a6 = v16;
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v30[0] = (void **)&v24;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v30);
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_206E7BB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinIrDummyWeight::Dilate(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  uint64_t v3;
  int v4;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    OUTLINED_FUNCTION_2_7(p_shared_owners);
  while (v4);
  if (!v3)
  {
    OUTLINED_FUNCTION_0_3();
    std::__shared_weak_count::__release_weak(a1);
  }
  OUTLINED_FUNCTION_4_0();
}

void ZinIrDummyWeight::RemapByType(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  uint64_t v3;
  int v4;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    OUTLINED_FUNCTION_2_7(p_shared_owners);
  while (v4);
  if (v3)
  {
    OUTLINED_FUNCTION_4_0();
  }
  else
  {
    OUTLINED_FUNCTION_0_3();
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t ZinTextureValidator::ValidateBackgroundPadding(uint64_t a1, unsigned int a2, float a3)
{
  int v6;
  float v7;
  BOOL v9;
  float v10;
  const __CFString *v12;

  if (IsFormatDMAConvertibleToFP16(a2))
    v6 = 3;
  else
    v6 = a2;
  switch(v6)
  {
    case 1:
      v9 = a3 < -128.0;
      v10 = 127.0;
      goto LABEL_13;
    case 2:
      if (a3 < 0.0)
        goto LABEL_18;
      v7 = 255.0;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 13:
      if (a3 < -65504.0)
        goto LABEL_18;
      v7 = 65504.0;
      break;
    case 12:
      v9 = a3 < -448.0;
      v10 = 448.0;
LABEL_13:
      if (!v9 && a3 <= v10)
        return 1;
      goto LABEL_18;
    default:
      goto LABEL_18;
  }
  if (a3 <= v7)
    return 1;
LABEL_18:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinTextureValidator::ValidateBackgroundPadding(a3);
  v12 = CFSTR("InvalidPaddingInfo");
  std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v12, (uint64_t *)&v12);
  return 0;
}

void ZinTextureValidator::ValidateBackgroundPadding(float a1)
{
  int v1;
  double v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v1 = 134217984;
  v2 = a1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Background padding (%f) is beyond ANE limits.", (uint8_t *)&v1, 0xCu);
}

uint64_t ZinTELayer::ZinTELayer(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a3[1];
  v12 = *a3;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ZinDMALayer::ZinDMALayer((_QWORD *)a1, a2, &v12, a4);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &unk_24C0155F8;
  *(_OWORD *)(a1 + 196) = xmmword_207A8D110;
  *(_DWORD *)(a1 + 212) = 0;
  *(_WORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 232) = 0;
  return a1;
}

void sub_206E7BEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL ZinTELayer::ConfigurePaddingInfo(ZinTELayer *this, const ZinIrTextureUnitInfo *a2)
{
  int v2;
  int v3;
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;

  if (!*((_BYTE *)this + 215) && ((v3 = *((_DWORD *)a2 + 16), v3 == 2) || v3 == 1))
  {
    _H0 = *((_WORD *)a2 + 76);
    __asm { FCVT            S0, H0 }
    v2 = (int)_S0;
  }
  else
  {
    LOWORD(v2) = *((_WORD *)a2 + 76);
  }
  *((_WORD *)this + 108) = v2;
  v10 = (_DWORD *)*((_QWORD *)a2 + 13);
  v11 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v10 == v11)
    return 1;
  v12 = 7;
  v13 = 7;
  do
  {
    if (*v10 == 3)
    {
      v12 = v10[1];
      if ((v12 - 5) < 2)
      {
        *((_BYTE *)this + 213) = 1;
      }
      else if (v12 == 7)
      {
        *(_WORD *)((char *)this + 213) = 256;
      }
      else
      {
        if (v12 != 3)
          return 0;
        *((_BYTE *)this + 213) = 0;
      }
    }
    else
    {
      if (*v10 != 4)
      {
        v14 = v10[1];
        if (v14 == 3)
          goto LABEL_26;
        if (v14 != 7)
          return 0;
        goto LABEL_24;
      }
      v13 = v10[1];
      if ((v13 - 5) < 2)
      {
        *((_BYTE *)this + 212) = 1;
        goto LABEL_26;
      }
      if (v13 == 7)
      {
        *((_BYTE *)this + 212) = 0;
LABEL_24:
        *((_BYTE *)this + 214) = 1;
        goto LABEL_26;
      }
      if (v13 != 3)
        return 0;
      *((_BYTE *)this + 212) = 0;
    }
LABEL_26:
    v10 += 2;
  }
  while (v10 != v11);
  if (v13 == 5)
  {
    if (*((_DWORD *)this + 49) == 1)
      goto LABEL_32;
    return 0;
  }
  if (v13 == 6 && *((_DWORD *)this + 49) != 2)
    return 0;
LABEL_32:
  if (v12 == 5)
    return *((_DWORD *)this + 50) == 1;
  return v12 != 6 || *((_DWORD *)this + 50) == 2;
}

BOOL ZinTELayer::Configure(uint64_t a1, int a2, ZinIrTextureUnitInfo *a3, uint64_t a4)
{
  _DWORD *v4;
  _DWORD *i;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  int v10;

  *(_DWORD *)(a1 + 192) = a2;
  *(_QWORD *)(a1 + 224) = a4;
  v4 = (_DWORD *)*((_QWORD *)a3 + 16);
  for (i = (_DWORD *)*((_QWORD *)a3 + 17); v4 != i; v4 += 2)
  {
    v6 = (_DWORD *)(a1 + 204);
    if (*v4 == 4 || (v6 = (_DWORD *)(a1 + 208), *v4 == 3))
    {
      *v6 = v4[1];
    }
    else if (v4[1] != 1)
    {
      return 0;
    }
  }
  v7 = (_DWORD *)*((_QWORD *)a3 + 10);
  v8 = (_DWORD *)*((_QWORD *)a3 + 11);
  while (v7 != v8)
  {
    if (*v7 == 3)
    {
      v10 = v7[1];
      *(_DWORD *)(a1 + 200) = v7[2];
      *(_DWORD *)(a1 + 236) = v10;
    }
    else if (*v7 == 4)
    {
      v9 = v7[1];
      *(_DWORD *)(a1 + 196) = v7[2];
      *(_DWORD *)(a1 + 232) = v9;
    }
    else if (v7[2])
    {
      return 0;
    }
    v7 += 3;
  }
  return ZinTELayer::ConfigurePaddingInfo((ZinTELayer *)a1, a3);
}

void ZinTELayer::~ZinTELayer(ZinTELayer *this)
{
  ZinIrOpLayer::~ZinIrOpLayer(this);
  JUMPOUT(0x20BD002F8);
}

__int128 *ZinIrHalH14::GetParams(ZinIrHalH14 *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  void *v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  void *v11;
  _BYTE *v12;
  void *v13;
  _BYTE *v14;
  void *v15;
  _BYTE *v16;
  void *v17;
  _BYTE *v18;
  void *v19;
  _BYTE *v20;
  void *v21;
  _BYTE *v22;
  void *v23;
  _BYTE *v24;
  void *v25;
  _BYTE *v26;
  void *v27;
  _BYTE *v28;
  void *v29;
  _BYTE *v30;
  _OWORD v31[3];
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[4];
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  int v62;
  int64x2_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int64x2_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int64x2_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int64x2_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int64x2_t v79;
  uint64_t v80;
  int v81;
  int v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  int v93;
  int v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  int64x2_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  _QWORD v103[3];
  int v104;
  _QWORD v105[3];
  int v106;
  _QWORD v107[3];
  int v108;
  _QWORD v109[3];
  int v110;
  _QWORD v111[3];
  int v112;
  _QWORD v113[3];
  int v114;
  _QWORD v115[3];
  int v116;
  _QWORD v117[3];
  int v118;
  _QWORD v119[3];
  int v120;
  _QWORD v121[3];
  int v122;
  _QWORD v123[3];
  _OWORD v124[10];
  int v125;
  _OWORD v126[7];
  int v127;
  _OWORD v128[2];
  _OWORD v129[2];
  __int128 v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  {
    ZinIrHalH14::GetParams(void)const::ZinIrHalH14Parameters = xmmword_207A988B0;
    dword_254526410 = 8;
    unk_254526418 = xmmword_207A7D320;
    unk_254526428 = xmmword_207A7E070;
    unk_254526438 = xmmword_207A7E080;
    unk_254526448 = xmmword_207A7D4C0;
    unk_254526458 = xmmword_207A7E090;
    unk_254526468 = xmmword_207A7E080;
    unk_254526478 = xmmword_207A7D370;
    unk_254526488 = xmmword_207A7E0A0;
    unk_254526498 = xmmword_207A7E0B0;
    unk_2545264A8 = xmmword_207A7D3A0;
    unk_2545264B8 = vdupq_n_s64(4uLL);
    qword_2545264C8 = 4;
    xmmword_2545264D0 = xmmword_207AA2230;
    unk_2545264E0 = unk_207AA2240;
    xmmword_2545264F0 = xmmword_207AA2230;
    unk_254526500 = unk_207AA2240;
    qword_254526520 = 4;
    xmmword_254526510 = xmmword_207AA2250;
    xmmword_254526528 = xmmword_207A7D3B0;
    xmmword_254526538 = xmmword_207A7D3C0;
    xmmword_254526548 = xmmword_207A7D3C0;
    xmmword_254526558 = xmmword_207A7D3C0;
    xmmword_254526568 = xmmword_207A7D3D0;
    xmmword_254526578 = xmmword_207A7D3E0;
    xmmword_254526588 = xmmword_207A7D3F0;
    xmmword_254526598 = xmmword_207A7D400;
    xmmword_2545265A8 = xmmword_207A7D410;
    xmmword_2545265B8 = xmmword_207A7D4E0;
    xmmword_2545265C8 = xmmword_207A7D430;
    xmmword_2545265D8 = xmmword_207A7D440;
    xmmword_2545265E8 = xmmword_207A7D450;
    xmmword_2545265F8 = xmmword_207A7E0D0;
    xmmword_254526608 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_254526618 = xmmword_207A7D550;
    xmmword_254526628 = xmmword_207A7D480;
    xmmword_254526638 = xmmword_207A7D490;
    xmmword_254526648 = xmmword_207A7D4A0;
    xmmword_254526658 = xmmword_207A7E0E0;
    xmmword_254526668 = xmmword_207A7E0F0;
    qword_254526678 = 0;
    word_254526680 = 256;
    xmmword_254526688 = xmmword_207A7D4C0;
    xmmword_254526698 = xmmword_207A7D4D0;
    xmmword_2545266A8 = xmmword_207A7D4E0;
    qword_2545266B8 = 0x10000;
    byte_2545266C0 = 122;
    xmmword_2545266C8 = xmmword_207A7E100;
    dword_2545266D8 = 520097776;
    qword_2545266DC = 0xFFFFFFEB0000000BLL;
    xmmword_2545266E8 = xmmword_207A7D500;
    xmmword_2545266F8 = xmmword_207A7D510;
    xmmword_254526708 = xmmword_207A7D520;
    v98 = vdupq_n_s64(8uLL);
    v99 = xmmword_207A7E110;
    v100 = xmmword_207A7E120;
    v101 = xmmword_207A7D490;
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_254526718, (uint64_t)&v98, 4uLL);
    xmmword_254526730 = xmmword_207A7E130;
    unk_254526740 = xmmword_207A7D540;
    xmmword_254526750 = (__int128)vdupq_n_s64(0x20uLL);
    unk_254526760 = xmmword_207A7D370;
    unk_254526770 = vdupq_n_s64(8uLL);
    unk_254526780 = xmmword_207A7D550;
    unk_254526790 = xmmword_207A7D560;
    unk_2545267A0 = vdupq_n_s64(0x100uLL);
    unk_2545267B0 = vdupq_n_s64(0x80uLL);
    unk_2545267C0 = xmmword_207A7D570;
    unk_2545267D0 = xmmword_207A7D580;
    unk_2545267E0 = xmmword_207A7D590;
    unk_2545267F0 = xmmword_207A7D5A0;
    unk_254526800 = xmmword_207A7D5B0;
    unk_254526810 = vdupq_n_s64(2uLL);
    unk_254526820 = xmmword_207A7D3C0;
    unk_254526830 = vdupq_n_s64(0x4000uLL);
    unk_254526840 = xmmword_207A7D5C0;
    unk_254526850 = 257;
    byte_254526856 = 0;
    unk_254526852 = 0;
    unk_254526857 = 1;
    unk_254526859 = 16843009;
    byte_25452685D = 1;
    dword_25452685E = 16842752;
    byte_254526862 = 1;
    *(_QWORD *)&algn_254526863[5] = 0;
    *(_QWORD *)algn_254526863 = 0;
    byte_254526870 = 1;
    byte_254526875 = 0;
    unk_254526871 = 0;
    qword_254526876 = 0x101010101010101;
    word_25452687E = 0;
    unk_254526880 = xmmword_207A7D4C0;
    unk_254526890 = xmmword_207A7D5E0;
    unk_2545268A0 = 40;
    unk_2545268B0 = 0;
    unk_2545268A8 = 0;
    word_2545268B8 = 1;
    dword_2545268BA = 16843009;
    word_2545268BE = 257;
    byte_2545268C0 = 0;
    *(_QWORD *)&algn_2545268C1[7] = 0;
    byte_2545268D0 = 0;
    unk_2545268D1 = 16843009;
    unk_2545268D9 = 0;
    unk_2545268DB = 16842753;
    unk_2545268DF = 0;
    byte_2545268EB = 1;
    unk_2545268E7 = 16843009;
    unk_2545268EC = 0x100000100010000;
    word_2545268F4 = 256;
    dword_2545268F6 = 0;
    unk_254526900 = 128;
    unk_254526908 = -1;
    unk_254526910 = -1;
    word_254526918 = 0;
    unk_25452691C = 1;
    unk_254526920 = 0x10000;
    byte_254526924 = 1;
    unk_25452692D = 0;
    unk_254526925 = 0;
    unk_254526931 = 1542;
    byte_254526935 = 1;
    dword_254526936 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_254526940, "Simple");
    qword_254526958 = 0x1000000;
    dword_254526960 = 1071225242;
    unk_254526964 = 14;
    unk_254526970 = xmmword_207A7D5F0;
    unk_254526980 = vdupq_n_s64(0x40uLL);
    unk_254526990 = xmmword_207A7D530;
    qword_2545269A0 = 8;
    byte_2545269A8 = 0;
    unk_2545269AC = 0xF3E800000;
    byte_2545269B4 = 1;
    v130 = xmmword_207A7D610;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_2545269B8, &v130, 4uLL);
    v128[0] = xmmword_207AA2268;
    v128[1] = unk_207AA2278;
    v129[0] = xmmword_207AA2288;
    *(_OWORD *)((char *)v129 + 12) = *(__int128 *)((char *)&xmmword_207AA2288 + 12);
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_2545269D0, v128, 0xFuLL);
    v127 = 25;
    v126[4] = xmmword_207AA22E4;
    v126[5] = unk_207AA22F4;
    v126[6] = xmmword_207AA2304;
    v126[0] = xmmword_207AA22A4;
    v126[1] = unk_207AA22B4;
    v126[2] = xmmword_207AA22C4;
    v126[3] = unk_207AA22D4;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_2545269E8, v126, 0x1DuLL);
    v125 = 42;
    v124[6] = xmmword_207AA2378;
    v124[7] = unk_207AA2388;
    v124[8] = xmmword_207AA2398;
    v124[9] = unk_207AA23A8;
    v124[2] = xmmword_207AA2338;
    v124[3] = unk_207AA2348;
    v124[4] = xmmword_207AA2358;
    v124[5] = unk_207AA2368;
    v124[0] = xmmword_207AA2318;
    v124[1] = unk_207AA2328;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_254526A00, v124, 0x29uLL);
    v94 = 2;
    v95 = xmmword_207A7D620;
    v96 = 0x1100000002;
    v97 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v29, &v94, 1uLL);
    v98.i32[0] = 641877825;
    v99 = 0uLL;
    v98.i64[1] = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v98.i64[1], v29, (uint64_t)v30, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (_BYTE *)v29) >> 3));
    v90 = 2;
    v91 = xmmword_207A7D620;
    v92 = 0x1100000002;
    v93 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v27, &v90, 1uLL);
    LODWORD(v100) = 759318337;
    v101 = 0uLL;
    *((_QWORD *)&v100 + 1) = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>((_QWORD *)&v100 + 1, v27, (uint64_t)v28, 0xCCCCCCCCCCCCCCCDLL * ((v28 - (_BYTE *)v27) >> 3));
    v86 = 2;
    v87 = xmmword_207A7D620;
    v88 = 0x1100000002;
    v89 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v25, &v86, 1uLL);
    v102 = 792872769;
    memset(v103, 0, sizeof(v103));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v103, v25, (uint64_t)v26, 0xCCCCCCCCCCCCCCCDLL * ((v26 - (_BYTE *)v25) >> 3));
    v82 = 2;
    v83 = xmmword_207A7D620;
    v84 = 0x1100000002;
    v85 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v23, &v82, 1uLL);
    v104 = 2084718401;
    memset(v105, 0, sizeof(v105));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v105, v23, (uint64_t)v24, 0xCCCCCCCCCCCCCCCDLL * ((v24 - (_BYTE *)v23) >> 3));
    v78 = 10;
    v79 = vdupq_n_s64(1uLL);
    v80 = 0x800000001;
    v81 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v21, &v78, 1uLL);
    v106 = 642527542;
    memset(v107, 0, sizeof(v107));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v107, v21, (uint64_t)v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (_BYTE *)v21) >> 3));
    v74 = 3;
    v75 = vdupq_n_s64(1uLL);
    v76 = 0x700000002;
    v77 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v19, &v74, 1uLL);
    v108 = 642527336;
    memset(v109, 0, sizeof(v109));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v109, v19, (uint64_t)v20, 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)v19) >> 3));
    v70 = 3;
    v71 = vdupq_n_s64(1uLL);
    v72 = 0x700000002;
    v73 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v17, &v70, 1uLL);
    v110 = 759967848;
    memset(v111, 0, sizeof(v111));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v111, v17, (uint64_t)v18, 0xCCCCCCCCCCCCCCCDLL * ((v18 - (_BYTE *)v17) >> 3));
    v66 = 3;
    v67 = vdupq_n_s64(1uLL);
    v68 = 0x700000002;
    v69 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v15, &v66, 1uLL);
    v112 = 793522280;
    memset(v113, 0, sizeof(v113));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v113, v15, (uint64_t)v16, 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)v15) >> 3));
    v62 = 3;
    v63 = vdupq_n_s64(1uLL);
    v64 = 0x700000002;
    v65 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v13, &v62, 1uLL);
    v114 = 2085367912;
    memset(v115, 0, sizeof(v115));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v115, v13, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * ((v14 - (_BYTE *)v13) >> 3));
    v58 = 3;
    v59 = xmmword_207A7D620;
    v60 = 0x1300000002;
    v61 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v11, &v58, 1uLL);
    v116 = 642934849;
    memset(v117, 0, sizeof(v117));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v117, v11, (uint64_t)v12, 0xCCCCCCCCCCCCCCCDLL * ((v12 - (_BYTE *)v11) >> 3));
    v54 = 3;
    v55 = xmmword_207A7D620;
    v56 = 0x1300000002;
    v57 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v9, &v54, 1uLL);
    v118 = 760375361;
    memset(v119, 0, sizeof(v119));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v119, v9, (uint64_t)v10, 0xCCCCCCCCCCCCCCCDLL * ((v10 - (_BYTE *)v9) >> 3));
    v50 = 3;
    v51 = xmmword_207A7D620;
    v52 = 0x1300000002;
    v53 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v7, &v50, 1uLL);
    v120 = 793929793;
    memset(v121, 0, sizeof(v121));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v121, v7, (uint64_t)v8, 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)v7) >> 3));
    v46 = 3;
    v47 = xmmword_207A7D620;
    v48 = 0x1300000002;
    v49 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v46, 1uLL);
    v122 = 2085775425;
    memset(v123, 0, sizeof(v123));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v123, __p, (uint64_t)v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_254526A18, (unsigned int *)&v98, 13);
    word_254526A30 = 0;
    byte_254526A32 = 1;
    *(_DWORD *)algn_254526A33 = 0;
    qword_254526A38 = 0;
    dword_254526A40 = 0;
    unk_254526A48 = 0u;
    unk_254526A58 = 0u;
    word_254526A68 = 257;
    qword_254526A90 = 8;
    xmmword_254526A70 = xmmword_207AA23C0;
    unk_254526A80 = unk_207AA23D0;
    unk_254526A98 = xmmword_207A988C0;
    v44[2] = xmmword_207AA2408;
    v44[3] = unk_207AA2418;
    v45 = 0x41DCE0E220000000;
    v44[0] = xmmword_207AA23E8;
    v44[1] = unk_207AA23F8;
    std::vector<double>::vector[abi:ne180100](&qword_254526AA8, v44, 9uLL);
    v33 = xmmword_207AA2430;
    *(_QWORD *)&v34 = 0x41CAD27480000000;
    std::vector<double>::vector[abi:ne180100](&qword_254526AC0, &v33, 3uLL);
    v42 = xmmword_207AA2448;
    v43 = 0x41DFC8BFD0000000;
    std::vector<double>::vector[abi:ne180100](&qword_254526AD8, &v42, 3uLL);
    v39 = xmmword_207AA24C0;
    v40 = unk_207AA24D0;
    v41 = xmmword_207AA24E0;
    v35 = xmmword_207AA2480;
    v36 = unk_207AA2490;
    v37 = xmmword_207AA24A0;
    v38 = unk_207AA24B0;
    v33 = xmmword_207AA2460;
    v34 = unk_207AA2470;
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_254526AF0, (double *)&v33, 9);
    xmmword_254526B08 = xmmword_207A7D640;
    v31[0] = xmmword_207AA24F0;
    v31[1] = unk_207AA2500;
    v31[2] = xmmword_207AA2510;
    v32 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_254526B18, v31, 0xDuLL);
    xmmword_254526B30 = (__int128)vdupq_n_s64(6uLL);
    unk_254526B40 = xmmword_207A7D650;
    qword_254526B50 = 64;
    unk_254526B58 = 0x101010101010101;
    unk_254526B5E = 0x101010101010101;
    dword_254526B68 = 16777473;
    xmmword_254526B70 = xmmword_207AA2528;
    unk_254526B80 = unk_207AA2538;
    xmmword_254526B90 = xmmword_207AA2548;
    unk_254526BA0 = unk_207AA2558;
    xmmword_254526BD0 = xmmword_207AA2588;
    unk_254526BE0 = unk_207AA2598;
    xmmword_254526BB0 = xmmword_207AA2568;
    unk_254526BC0 = unk_207AA2578;
    word_254526BF0 = 1;
    byte_254526BF2 = 0;
    byte_254526BF8 = 0;
    byte_254526C00 = 0;
    dword_254526C08 = 65792;
    dword_254526C10 = 1056899072;
    word_254526C14 = 1;
    unk_254526C18 = xmmword_207A7F3E0;
    byte_254526C28 = 1;
    qword_254526C30 = 0xFFFFLL;
    byte_254526C38 = 0;
    word_254526C48 = 256;
    byte_254526C4A = 1;
    v3 = 416;
    qword_254526C40 = 0;
    do
    {
      v4 = *(void **)((char *)&v95 + v3 + 8);
      if (v4)
      {
        *(uint64_t *)((char *)&v96 + v3) = (uint64_t)v4;
        operator delete(v4);
      }
      v3 -= 32;
    }
    while (v3);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalH14::GetParams(void)const::ZinIrHalH14Parameters, &dword_2069AB000);
  }
  return &ZinIrHalH14::GetParams(void)const::ZinIrHalH14Parameters;
}

void sub_206E7D080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33)
{
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v34, *(_QWORD **)(v34 + 8));
  if (qword_254526AD8)
  {
    qword_254526AE0 = qword_254526AD8;
    operator delete((void *)qword_254526AD8);
  }
  if (qword_254526AC0)
  {
    qword_254526AC8 = qword_254526AC0;
    operator delete((void *)qword_254526AC0);
  }
  if (qword_254526AA8)
  {
    qword_254526AB0 = qword_254526AA8;
    operator delete((void *)qword_254526AA8);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v33, *(_QWORD **)(v33 + 8));
  v37 = 416;
  while (1)
  {
    v38 = *(void **)((char *)&STACK[0x4C0] + v37 - 24);
    if (v38)
    {
      *(unint64_t *)((char *)&STACK[0x4C0] + v37 - 16) = (unint64_t)v38;
      operator delete(v38);
    }
    v37 -= 32;
    if (!v37)
    {
      if (__p)
        operator delete(__p);
      if (a21)
        operator delete(a21);
      if (a24)
        operator delete(a24);
      if (a27)
        operator delete(a27);
      if (a30)
        operator delete(a30);
      if (a33)
      {
        v35[1] = a33;
        operator delete(a33);
      }
      v39 = (void *)v35[3];
      if (v39)
      {
        v35[4] = v39;
        operator delete(v39);
      }
      v40 = (void *)v35[6];
      if (v40)
      {
        v35[7] = v40;
        operator delete(v40);
      }
      v41 = (void *)v35[9];
      if (v41)
      {
        v35[10] = v41;
        operator delete(v41);
      }
      v42 = (void *)v35[12];
      if (v42)
      {
        v35[13] = v42;
        operator delete(v42);
      }
      v43 = (void *)v35[15];
      if (v43)
      {
        v35[16] = v43;
        operator delete(v43);
      }
      v44 = (void *)v35[18];
      if (v44)
      {
        v35[19] = v44;
        operator delete(v44);
      }
      v45 = (void *)v35[21];
      if (v45)
      {
        v35[22] = v45;
        operator delete(v45);
      }
      if (qword_254526A00)
      {
        qword_254526A08 = qword_254526A00;
        operator delete((void *)qword_254526A00);
      }
      if (qword_2545269E8)
      {
        qword_2545269F0 = qword_2545269E8;
        operator delete((void *)qword_2545269E8);
      }
      if (qword_2545269D0)
      {
        qword_2545269D8 = qword_2545269D0;
        operator delete((void *)qword_2545269D0);
      }
      if (qword_2545269B8)
      {
        qword_2545269C0 = qword_2545269B8;
        operator delete((void *)qword_2545269B8);
      }
      if (byte_254526957 < 0)
        operator delete((void *)qword_254526940);
      if (qword_254526718)
      {
        qword_254526720 = qword_254526718;
        operator delete((void *)qword_254526718);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_206E7D340()
{
  JUMPOUT(0x206E7D1FCLL);
}

void sub_206E7D350()
{
  JUMPOUT(0x206E7D20CLL);
}

void sub_206E7D360()
{
  JUMPOUT(0x206E7D21CLL);
}

void sub_206E7D370()
{
  JUMPOUT(0x206E7D22CLL);
}

void sub_206E7D380()
{
  JUMPOUT(0x206E7D23CLL);
}

void sub_206E7D390()
{
  JUMPOUT(0x206E7D24CLL);
}

void sub_206E7D3A0()
{
  JUMPOUT(0x206E7D25CLL);
}

void sub_206E7D3B8()
{
  JUMPOUT(0x206E7D29CLL);
}

void sub_206E7D3C0()
{
  JUMPOUT(0x206E7D2B4);
}

void sub_206E7D3C8()
{
  JUMPOUT(0x206E7D2CCLL);
}

void sub_206E7D3D0()
{
  JUMPOUT(0x206E7D2E4);
}

void sub_206E7D3D8()
{
  JUMPOUT(0x206E7D2FCLL);
}

void sub_206E7D3E0()
{
  JUMPOUT(0x206E7D314);
}

void sub_206E7D3E8()
{
  JUMPOUT(0x206E7D32CLL);
}

uint64_t ZinIrOpt::ApplyConvHoistings(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[23];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  ZinIrOpt::ConvHoistings::ConvHoistings((uint64_t)v10, a2);
  v8[0] = &off_24C003070;
  v8[1] = v10;
  v9 = v8;
  v3 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v8, 1);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v10[0] = &off_24C01BCC8;
  v7 = (void **)v11;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v7);
  ZinPattern::~ZinPattern((ZinPattern *)v10);
  return v3;
}

void sub_206E7D4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, va_list);
  v4 = v10;
  if (v10 == v2)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  ZinLinearPattern::~ZinLinearPattern((ZinLinearPattern *)va1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::ConvHoistings::ConvHoistings(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char **v16;
  _BYTE v17[8];
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD v22[4];
  uint64_t v23;
  _QWORD v24[3];
  _QWORD v25[4];
  uint64_t v26;
  _QWORD v27[3];
  _QWORD v28[4];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v21, "conv");
  v22[0] = &unk_24C0537D8;
  v22[1] = ZinIrOpt::ConvHoistings::MatchConv;
  v22[3] = v22;
  v12 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v23, &v12, 1);
  std::string::basic_string[abi:ne180100]<0>(v24, "transpose_hw");
  v25[0] = &unk_24C0537D8;
  v25[1] = ZinIrOpt::ConvHoistings::MatchTranspose;
  v25[3] = v25;
  v11 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v26, &v11, 1);
  std::string::basic_string[abi:ne180100]<0>(v27, "goc");
  v28[0] = &unk_24C0537D8;
  v28[1] = ZinIrOpt::ConvHoistings::MatchGOC;
  v28[3] = v28;
  v20 = 0x200000001;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v29, (int *)&v20, 2);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = &v13;
  v17[0] = 0;
  v13 = (char *)operator new(0x120uLL);
  v14 = (uint64_t)v13;
  v15 = v13 + 288;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v15, (uint64_t)v21, (uint64_t)&v30, (uint64_t)v13);
  v19 = 0;
  ZinLinearPattern::ZinLinearPattern(a1, &v13, a2, 0, v18, 0);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
    goto LABEL_5;
  }
  if (v19)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v16 = &v13;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  v6 = 288;
  do
  {
    v7 = &v21[v6 / 8];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v18[v6]);
    v8 = *(_QWORD **)&v17[v6];
    if ((uint64_t *)((char *)&v14 + v6) == v8)
    {
      v8 = v7 - 9;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_12;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
    if (*((char *)&v13 + v6 + 7) < 0)
      operator delete((void *)*(v7 - 12));
    v6 -= 96;
  }
  while (v6);
  return a1;
}

void sub_206E7D76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, char a20)
{
  char *v20;
  char *v22;
  uint64_t v23;
  uint64_t i;

  v22 = a18;
  if (a18 == v20)
  {
    v23 = 4;
    v22 = &a15;
  }
  else
  {
    if (!a18)
    {
LABEL_6:
      a13 = (void **)&a10;
      std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&a13);
      for (i = 192; i != -96; i -= 96)
        ZinLinearPattern::AtomItemDesc::~AtomItemDesc((ZinLinearPattern::AtomItemDesc *)(&a20 + i));
      _Unwind_Resume(a1);
    }
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  goto LABEL_6;
}

uint64_t ZinIrOpt::ConvHoistings::MatchConv(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8) == 0) | 0x100u;
}

uint64_t ZinIrOpt::ConvHoistings::MatchTranspose(uint64_t a1)
{
  ZinTransposeLayer *v1;
  _BOOL4 v2;

  v1 = *(ZinTransposeLayer **)(a1 + 8);
  v2 = *(_DWORD *)(*((_QWORD *)v1 + 8) + 8) == 37 && ZinTransposeLayer::IsHWTranspose(v1);
  return v2 | 0x100u;
}

uint64_t ZinIrOpt::ConvHoistings::MatchGOC(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8) == 2) | 0x100u;
}

void std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C003070;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C003070;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinIrOpLayer **a3)
{
  ZinIrOpt::ConvHoistings::MatchAndReplace(*(ZinIrOpt::ConvHoistings **)(a1 + 8), *a2, *a3);
  return 0;
}

uint64_t std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::ApplyConvHoistings(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void ZinIrOpt::ConvHoistings::MatchAndReplace(ZinIrOpt::ConvHoistings *this, uint64_t **a2, ZinIrOpLayer *a3)
{
  size_t v6;
  void *p_p;
  char *v8;
  ZinIrOpLayer *SingleMatch;
  ZinIrOpLayer *v10;
  ZinGOCLayer **v11;
  ZinGOCLayer **v12;
  ZinGOCLayer *v13;
  uint64_t v14;
  unint64_t v15;
  _BOOL4 IsPerCout;
  uint64_t (*v17)(ZinIrOpLayer *, _QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  ZinIrTensor *v20;
  float v21;
  uint64_t v22;
  ZinIrOpLayer *ConstScaleAndBiasGOC;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  int inserted;
  int v32;
  uint64_t v33;
  _OWORD v34[2];
  int v35;
  void *__p;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  signed __int8 v42[2];
  float v43;
  float v44;
  ZinGOCLayer **v45;
  ZinGOCLayer **v46;
  _QWORD v47[3];
  char v48;
  _QWORD v49[3];

  v49[1] = *MEMORY[0x24BDAC8D0];
  if (ZinLinearPattern::Match(this, (const ZinIrOpLayerGraph *)a2, a3))
  {
    if (*((char *)a3 + 47) >= 0)
      v6 = *((unsigned __int8 *)a3 + 47);
    else
      v6 = *((_QWORD *)a3 + 4);
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 10);
    if (SHIBYTE(v38) < 0)
      p_p = __p;
    if (v6)
    {
      if (*((char *)a3 + 47) >= 0)
        v8 = (char *)a3 + 24;
      else
        v8 = (char *)*((_QWORD *)a3 + 3);
      memmove(p_p, v8, v6);
    }
    strcpy((char *)p_p + v6, "_hoist_goc");
    ZinObjectNameFactory::ZinObjectNameFactory(v47, &__p);
    if (SHIBYTE(v38) < 0)
      operator delete(__p);
    v33 = *((_QWORD *)a3 + 2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
    SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)&__p);
    if (SHIBYTE(v38) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_hw");
    v10 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)&__p);
    if (SHIBYTE(v38) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "goc");
    ZinPattern::GetMatch((uint64_t)this, (unsigned __int8 *)&__p, &v45);
    if (SHIBYTE(v38) < 0)
      operator delete(__p);
    v11 = v45;
    v12 = v46;
    if (v45 != v46)
    {
      while (1)
      {
        v13 = *v11;
        v43 = 0.0;
        v44 = 1.0;
        *(_WORD *)v42 = 0;
        v14 = *((_QWORD *)v13 + 17);
        v15 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0)+ 56);
        ZinGOCLayer::GetSingularScale(v13, &v44, &v42[1]);
        ZinGOCLayer::GetSingularBias(v13, &v43, v42);
        IsPerCout = ZinGOCLayer::IsPerCout((ZinIrKernel **)v13);
        v17 = *(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32);
        if (IsPerCout)
          break;
        v20 = (ZinIrTensor *)v17(SingleMatch, 0, 0);
        v21 = v44;
        v22 = (*(uint64_t (**)(ZinGOCLayer *, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0, 0);
        ConstScaleAndBiasGOC = (ZinIrOpLayer *)ZinBuilder::CreateConstScaleAndBiasGOC(v33, (uint64_t)v47, v20, *(_DWORD *)(v22 + 88), 0, 0, 1, v21, 0.0);
LABEL_43:
        v49[0] = v13;
        v39 = v49;
        v40 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v39);
        inserted = ZinIrOpLayerGraph::InsertNodeBetween(a2, ConstScaleAndBiasGOC, SingleMatch, v10, (ZinIrOpLayer ***)&__p);
        __p = &unk_24C02BB18;
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
        memset(v34, 0, sizeof(v34));
        v35 = 1065353216;
        v32 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)v13, v10, v34);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v34);
        if ((inserted & v32 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v13, 0) & 1) == 0)
          ZinAssertImpl("Could not swap transpose and bias.");
        if (++v11 == v12)
        {
          v11 = v45;
          goto LABEL_48;
        }
      }
      v18 = v17(SingleMatch, 0, 0);
      v19 = *(_QWORD *)(v14 + 568);
      if (v19)
      {
        ZinIrVector::GetValuesAsVector<float>(v19, v15, 1, (uint64_t)&__p);
      }
      else
      {
        __p = 0;
        v37 = 0;
        v38 = 0;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, 0, 0, 0);
      }
      v24 = *(_QWORD *)(v14 + 576);
      if (v24)
      {
        ZinIrVector::GetValuesAsVector<float>(v24, v15, 1, (uint64_t)&v39);
      }
      else
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v39, 0, 0, 0);
      }
      v25 = *(_QWORD *)(v14 + 568);
      if (v25)
        v26 = *(_BYTE *)(v25 + 280);
      else
        v26 = 0;
      v27 = *(_QWORD *)(v14 + 576);
      if (v27)
      {
        v28 = *(_BYTE *)(v27 + 280);
        if (v25)
          goto LABEL_34;
      }
      else
      {
        v28 = 0;
        if (v25)
        {
LABEL_34:
          v29 = *(unsigned int *)(v25 + 8);
          if (v27)
          {
LABEL_35:
            v30 = *(_DWORD *)(v27 + 8);
LABEL_39:
            ConstScaleAndBiasGOC = (ZinIrOpLayer *)ZinBuilder::CreatePerCoutGOC(v33, (uint64_t)v47, v18, (uint64_t)&__p, (const void **)&v39, v26, v28, v29, v30);
            if (v39)
            {
              v40 = (uint64_t)v39;
              operator delete(v39);
            }
            if (__p)
            {
              v37 = __p;
              operator delete(__p);
            }
            goto LABEL_43;
          }
LABEL_38:
          v30 = 4;
          goto LABEL_39;
        }
      }
      v29 = 4;
      if (v27)
        goto LABEL_35;
      goto LABEL_38;
    }
LABEL_48:
    if (v11)
    {
      v46 = v11;
      operator delete(v11);
    }
    v47[0] = off_24C01FBB0;
    if (v48 < 0)
      operator delete((void *)v47[1]);
  }
}

void sub_206E7DE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a22 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(exception_object);
}

void ZinIrMemoryUtils::ComputeElementaryIntervals(uint64_t **a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t *v41;
  __int128 v42;
  void *__p;
  uint64_t *v44;
  char *v45;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v5 = 0;
    __p = 0;
    v44 = 0;
    v45 = 0;
    do
    {
      v6 = (uint64_t *)v45;
      if (v5 >= (uint64_t *)v45)
      {
        v8 = (uint64_t *)__p;
        v9 = ((char *)v5 - (_BYTE *)__p) >> 3;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61)
          goto LABEL_61;
        v11 = v45 - (_BYTE *)__p;
        if ((v45 - (_BYTE *)__p) >> 2 > v10)
          v10 = v11 >> 2;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v45, v12);
          v8 = (uint64_t *)__p;
          v5 = v44;
        }
        else
        {
          v13 = 0;
        }
        v14 = (uint64_t *)&v13[8 * v9];
        *v14 = *v3;
        v7 = v14 + 1;
        while (v5 != v8)
        {
          v15 = *--v5;
          *--v14 = v15;
        }
        v6 = (uint64_t *)&v13[8 * v12];
        __p = v14;
        v44 = v7;
        v45 = (char *)v6;
        if (v8)
        {
          operator delete(v8);
          v6 = (uint64_t *)v45;
        }
      }
      else
      {
        *v5 = *v3;
        v7 = v5 + 1;
      }
      v44 = v7;
      if (v7 >= v6)
      {
        v16 = (uint64_t *)__p;
        v17 = ((char *)v7 - (_BYTE *)__p) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
LABEL_61:
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v19 = (char *)v6 - (_BYTE *)__p;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v45, v20);
          v16 = (uint64_t *)__p;
          v7 = v44;
        }
        else
        {
          v21 = 0;
        }
        v22 = (uint64_t *)&v21[8 * v17];
        *v22 = v3[1];
        v5 = v22 + 1;
        while (v7 != v16)
        {
          v23 = *--v7;
          *--v22 = v23;
        }
        __p = v22;
        v44 = v5;
        v45 = &v21[8 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v7 = v3[1];
        v5 = v7 + 1;
      }
      v44 = v5;
      v3 += 3;
    }
    while (v3 != v4);
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    v24 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__equal_to &>((uint64_t *)__p, v44);
    std::vector<long>::resize((uint64_t)&__p, ((char *)v24 - (_BYTE *)__p) >> 3);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v25 = (uint64_t *)__p;
    if ((char *)v44 - (_BYTE *)__p != 8)
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = ((char *)v44 - (_BYTE *)__p) >> 3;
      v30 = a2 + 2;
      do
      {
        if (v29 <= v27 || (v31 = v27, v27 = (v28 + 1), v29 <= v27))
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        v32 = v25[v31];
        v33 = v25[v27];
        v34 = v33 - v32;
        if ((unint64_t)v26 >= *v30)
        {
          v35 = *a2;
          v36 = 0xAAAAAAAAAAAAAAABLL * (v26 - *a2);
          v37 = v36 + 1;
          if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*v30 - (_QWORD)v35) >> 3) > v37)
            v37 = 0x5555555555555556 * ((uint64_t)(*v30 - (_QWORD)v35) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v30 - (_QWORD)v35) >> 3) >= 0x555555555555555)
            v38 = 0xAAAAAAAAAAAAAAALL;
          else
            v38 = v37;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a2 + 2), v38);
            v35 = *a2;
            v26 = a2[1];
          }
          else
          {
            v39 = 0;
          }
          v40 = (uint64_t *)&v39[24 * v36];
          *v40 = v32;
          v40[1] = v33;
          v40[2] = v34;
          v41 = v40;
          if (v26 != v35)
          {
            do
            {
              v42 = *(_OWORD *)(v26 - 3);
              *(v41 - 1) = *(v26 - 1);
              *(_OWORD *)(v41 - 3) = v42;
              v41 -= 3;
              v26 -= 3;
            }
            while (v26 != v35);
            v35 = *a2;
          }
          v26 = v40 + 3;
          *a2 = v41;
          a2[1] = v40 + 3;
          a2[2] = (uint64_t *)&v39[24 * v38];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *v26 = v32;
          v26[1] = v33;
          v26[2] = v34;
          v26 += 3;
        }
        a2[1] = v26;
        v25 = (uint64_t *)__p;
        v29 = ((char *)v44 - (_BYTE *)__p) >> 3;
        v28 = v27;
      }
      while (v29 - 1 > v27);
    }
    if (v25)
    {
      v44 = v25;
      operator delete(v25);
    }
  }
}

void sub_206E7E29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree@<X0>(ZinIrTensor *a1@<X0>, const ZinIrTensor *a2@<X1>, unint64_t **a3@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  const ZinIrTensor *v5;
  uint64_t *v6;
  _QWORD *v7;
  const ZinIrTensor *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  void **v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int64x2_t v23;
  _QWORD *v24;
  void **v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  const ZinIrTensor *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t (***v36)();
  uint64_t v37;
  _QWORD ***v38;
  _QWORD ***v39;
  unsigned int v40;
  _QWORD **v41;
  uint64_t (***v42)();
  uint64_t v43;
  void *v46;
  _BYTE *v47;
  uint64_t *v48;
  uint64_t *v49;
  int64x2_t v50;
  _QWORD v51[2];
  uint64_t *v52;
  _QWORD *v53[2];
  void *v54;
  uint64_t *v55;
  unint64_t *v56;
  ZinIrTensor *v57;
  void *__p;
  __int128 *v59;
  uint64_t (**v60)();
  int64x2_t v61;
  void **v62;
  _QWORD *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v56 = 0;
  v57 = a1;
  ZinIrMemoryUtils::GetSpaceRanges(a1, a2, (char *)&v60);
  v4 = (__int128 *)v60;
  v3 = (__int128 *)v61.i64[0];
  if (v60 != (uint64_t (**)())v61.i64[0])
  {
    do
    {
      ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::Insert(&v56, 0, v4);
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != v3);
    v4 = (__int128 *)v60;
  }
  if (v4)
  {
    v61.i64[0] = (uint64_t)v4;
    operator delete(v4);
  }
  ZinIrTensor::GetTensorFamily(v57, (uint64_t)&v54);
  std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::set[abi:ne180100]<std::__wrap_iter<ZinIrTensor* const*>>((uint64_t)&v52, (uint64_t *)v54, v55);
  std::__tree<std::__value_type<ZinIrOpLayer *,float>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,float>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,float>>>::__erase_unique<ZinIrOpLayer *>(&v52, (uint64_t *)&v57);
  v50 = 0uLL;
  v51[0] = 0;
  v6 = v52;
  if (v52 != (uint64_t *)v53)
  {
    do
    {
      v7 = (_QWORD *)operator new();
      *v7 = 0;
      __p = v7;
      ZinIrMemoryUtils::GetSpaceRanges((ZinIrMemoryUtils *)v6[4], v8, (char *)&v60);
      v10 = (__int128 *)v60;
      v9 = (__int128 *)v61.i64[0];
      if (v60 != (uint64_t (**)())v61.i64[0])
      {
        do
        {
          ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::Insert((unint64_t **)v7, 0, v10);
          v10 = (__int128 *)((char *)v10 + 24);
        }
        while (v10 != v9);
        v10 = (__int128 *)v60;
      }
      if (v10)
      {
        v61.i64[0] = (uint64_t)v10;
        operator delete(v10);
      }
      v11 = v50.i64[1];
      if (v50.i64[1] >= v51[0])
      {
        v12 = (v50.i64[1] - v50.i64[0]) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v14 = v51[0] - v50.i64[0];
        if ((v51[0] - v50.i64[0]) >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        v63 = v51;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v51, v15);
        else
          v16 = 0;
        v17 = &v16[8 * v12];
        v18 = (void **)&v16[8 * v15];
        v62 = v18;
        __p = 0;
        *(_QWORD *)v17 = v7;
        v19 = v17 + 8;
        v61.i64[1] = (uint64_t)(v17 + 8);
        v20 = (_QWORD *)v50.i64[1];
        v21 = (_QWORD *)v50.i64[0];
        if (v50.i64[1] == v50.i64[0])
        {
          v24 = 0;
          v23 = vdupq_n_s64(v50.u64[1]);
        }
        else
        {
          do
          {
            v22 = *--v20;
            *v20 = 0;
            *((_QWORD *)v17 - 1) = v22;
            v17 -= 8;
          }
          while (v20 != v21);
          v23 = v50;
          v19 = (_QWORD *)v61.i64[1];
          v18 = v62;
          v24 = __p;
        }
        v50.i64[0] = (uint64_t)v17;
        v61 = v23;
        v25 = (void **)v51[0];
        v51[0] = v18;
        v62 = v25;
        v60 = (uint64_t (**)())v23.i64[0];
        std::__split_buffer<std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>>::~__split_buffer((uint64_t)&v60);
        v50.i64[1] = (uint64_t)v19;
        if (v24)
        {
          v26 = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::~ZinIntervalTree(v24);
          MEMORY[0x20BD002F8](v26, 0x20C4093837F09);
        }
      }
      else
      {
        *(_QWORD *)v50.i64[1] = v7;
        v50.i64[1] = v11 + 8;
      }
      v27 = (uint64_t *)v6[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (uint64_t *)v6[2];
          v29 = *v28 == (_QWORD)v6;
          v6 = v28;
        }
        while (!v29);
      }
      v6 = v28;
    }
    while (v28 != (uint64_t *)v53);
  }
  ZinIrMemoryUtils::GetSpaceRanges(v57, v5, (char *)&v46);
  v60 = 0;
  v61 = 0uLL;
  std::vector<ZinSpaceRange>::__init_with_size[abi:ne180100]<ZinSpaceRange*,ZinSpaceRange*>(&v60, v46, (uint64_t)v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - (_BYTE *)v46) >> 3));
  v31 = v52;
  if (v52 != (uint64_t *)v53)
  {
    do
    {
      ZinIrMemoryUtils::GetSpaceRanges((ZinIrMemoryUtils *)v31[4], v30, (char *)&__p);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<ZinSpaceRange const*>,std::__wrap_iter<ZinSpaceRange const*>,std::back_insert_iterator<std::vector<ZinSpaceRange>>,0>((__int128 *)__p, v59, (void **)&v60);
      if (__p)
      {
        v59 = (__int128 *)__p;
        operator delete(__p);
      }
      v32 = (uint64_t *)v31[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (uint64_t *)v31[2];
          v29 = *v33 == (_QWORD)v31;
          v31 = v33;
        }
        while (!v29);
      }
      v31 = v33;
    }
    while (v33 != (uint64_t *)v53);
  }
  ZinIrMemoryUtils::ComputeElementaryIntervals((uint64_t **)&v60, &v48);
  if (v60)
  {
    v61.i64[0] = (uint64_t)v60;
    operator delete(v60);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  *a3 = 0;
  v34 = (unint64_t *)v48;
  v35 = v49;
  if (v48 != v49)
  {
    while (1)
    {
      LOBYTE(__p) = 1;
      v60 = &off_24C000CC0;
      v61.i64[0] = (uint64_t)&__p;
      v62 = (void **)&v60;
      ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::TraverseIntersectNodeVisitor((uint64_t)&v56, v56, v34, (uint64_t)&v60);
      v36 = (uint64_t (***)())v62;
      if (v62 == (void **)&v60)
      {
        v36 = &v60;
        v37 = 4;
      }
      else
      {
        if (!v62)
          goto LABEL_54;
        v37 = 5;
      }
      (*v36)[v37]();
LABEL_54:
      if (!(_BYTE)__p)
      {
        v39 = (_QWORD ***)v50.i64[1];
        v38 = (_QWORD ***)v50.i64[0];
        if (v50.i64[0] != v50.i64[1])
        {
          v40 = 0;
          while (1)
          {
            LOBYTE(__p) = 1;
            v41 = *v38;
            v60 = &off_24C000D18;
            v61.i64[0] = (uint64_t)&__p;
            v62 = (void **)&v60;
            ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::TraverseIntersectNodeVisitor((uint64_t)v41, *v41, v34, (uint64_t)&v60);
            v42 = (uint64_t (***)())v62;
            if (v62 == (void **)&v60)
              break;
            if (v62)
            {
              v43 = 5;
LABEL_61:
              (*v42)[v43]();
            }
            if (!(_BYTE)__p)
              ++v40;
            if (++v38 == v39)
              goto LABEL_67;
          }
          v42 = &v60;
          v43 = 4;
          goto LABEL_61;
        }
        v40 = 0;
LABEL_67:
        ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::Insert(a3, v40, (__int128 *)v34);
      }
      v34 += 3;
      if (v34 == (unint64_t *)v35)
      {
        v34 = (unint64_t *)v48;
        break;
      }
    }
  }
  if (v34)
  {
    v49 = (uint64_t *)v34;
    operator delete(v34);
  }
  v60 = (uint64_t (**)())&v50;
  std::vector<std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v52, v53[0]);
  if (v54)
  {
    v55 = (uint64_t *)v54;
    operator delete(v54);
  }
  return ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::~ZinIntervalTree(&v56);
}

void sub_206E7E7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  v32 = *(void **)(v30 - 136);
  if (v32)
  {
    *(_QWORD *)(v30 - 128) = v32;
    operator delete(v32);
  }
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  __p = &a17;
  std::vector<std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a21, a22);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::~ZinIntervalTree(&a27);
  _Unwind_Resume(a1);
}

void ZinIrMemoryUtils::GetSpaceRanges(ZinIrMemoryUtils *this@<X0>, const ZinIrTensor *a2@<X1>, char *a3@<X8>)
{
  ZinIrOpLayer *v5;
  uint64_t InputTensor;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  ZinIrSymbol **v14;
  void **v15;
  unint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p;
  void **v27;

  if (!this)
    ZinAssertImpl("tensor is empty", a2);
  v5 = (ZinIrOpLayer *)*((_QWORD *)this + 12);
  if (v5 && *(_DWORD *)(*((_QWORD *)v5 + 8) + 8) == 36)
  {
    if (!ZinIrOpLayer::GetInputTensor(*((ZinIrOpLayer **)this + 12), 0))
      ZinAssertImpl("view or view's input tensor is empty");
    InputTensor = ZinIrOpLayer::GetInputTensor(v5, 0);
    ZinViewLayerUtils::GetAxesOfView((ZinViewLayerUtils *)(InputTensor + 48), (ZinIrMemoryUtils *)((char *)this + 48), (char **)&__p);
    if (v27 == __p)
      ZinAssertImpl("input dimension and output dimension are same in view");
    v7 = *((_QWORD *)this + 13);
    if (!v7 || (v8 = *(uint64_t **)(v7 + 40), v8 == *(uint64_t **)(v7 + 48)) || (v9 = *v8) == 0 || !*(_QWORD *)(v9 + 512))
      ZinAssertImpl("Tensor do not have symbol or parent symbol");
    ZinIrTensor::GetParentTensor(this, &v24);
    v10 = *(_QWORD *)(v24 + 104);
    if (!v10 || (v11 = *(uint64_t **)(v10 + 40), v11 == *(uint64_t **)(v10 + 48)))
      v12 = 0;
    else
      v12 = *v11;
    v18 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0)
                    + 104);
    if (!v18 || (v19 = *(uint64_t **)(v18 + 40), v19 == *(uint64_t **)(v18 + 48)))
      v20 = 0;
    else
      v20 = *v19;
    ZinViewLayerUtils::ComputeViewSpanSpaceRanges(this, (_QWORD *)(v12 + 208), (__int128 *)(v20 + 296), 0, a3);
    v21 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (__p)
    {
      v27 = (void **)__p;
      operator delete(__p);
    }
  }
  else
  {
    v13 = *((_QWORD *)this + 13);
    if (!v13 || (v14 = *(ZinIrSymbol ***)(v13 + 40), v14 == *(ZinIrSymbol ***)(v13 + 48)) || !*v14)
      ZinAssertImpl("Tensor do not have symbol", a2);
    ZinIrSymbol::GetSpaceRanges(*v14, 1, (uint64_t *)&__p);
    v15 = v27;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    if (v15 == &__p)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      v17 = v15;
      do
      {
        ++v16;
        v17 = (void **)v17[1];
      }
      while (v17 != &__p);
    }
    std::vector<ZinSpaceRange>::__init_with_size[abi:ne180100]<std::__list_const_iterator<ZinSpaceRange,void *>,std::__list_const_iterator<ZinSpaceRange,void *>>(a3, (uint64_t)v15, (uint64_t)&__p, v16);
    std::__list_imp<ZinIrSection *>::clear(&__p);
  }
}

void sub_206E7EB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::Insert(unint64_t **a1, unint64_t a2, __int128 *a3)
{
  uint64_t result;
  int v5;

  v5 = 0;
  result = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::InsertNodeVisitor((uint64_t)a1, *a1, a2, a3, &v5);
  *a1 = (unint64_t *)result;
  if (result)
  {
    *(_QWORD *)(result + 64) = 0;
    *(_BYTE *)(result + 56) = 1;
  }
  return result;
}

uint64_t *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__equal_to &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = v5;
      v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

char *std::vector<ZinSpaceRange>::__init_with_size[abi:ne180100]<std::__list_const_iterator<ZinSpaceRange,void *>,std::__list_const_iterator<ZinSpaceRange,void *>>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = *(_QWORD *)(a2 + 8);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_206E7ECA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>::reset[abi:ne180100]((_QWORD **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>::reset[abi:ne180100](_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::~ZinIntervalTree(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

_QWORD *std::vector<ZinSpaceRange>::__init_with_size[abi:ne180100]<ZinSpaceRange*,ZinSpaceRange*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_206E7EDA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<ZinSpaceRange const*>,std::__wrap_iter<ZinSpaceRange const*>,std::back_insert_iterator<std::vector<ZinSpaceRange>>,0>(__int128 *a1, __int128 *a2, void **a3)
{
  __int128 *v3;
  __int128 *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<ZinSpaceRange>>::operator=[abi:ne180100](&v6, v3);
    v3 = (__int128 *)((char *)v3 + 24);
  }
  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<ZinSpaceRange>>::operator=[abi:ne180100](void ***a1, __int128 *a2)
{
  void **v4;
  char *v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = *a1;
  v9 = (char *)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*v4) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v15);
    else
      v16 = 0;
    v17 = &v16[24 * v12];
    v18 = &v16[24 * v15];
    v19 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v19;
    v11 = v17 + 24;
    v21 = (char *)*v4;
    v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v17 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*v4;
    }
    *v4 = v17;
    v4[1] = v11;
    v4[2] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v10 = *a2;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v10;
    v11 = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void std::vector<std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD **v2;
  _QWORD **v4;
  void *v5;

  v1 = *a1;
  v2 = (_QWORD **)**a1;
  if (v2)
  {
    v4 = (_QWORD **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::InsertNodeVisitor(uint64_t a1, unint64_t *a2, unint64_t a3, __int128 *a4, int *a5)
{
  uint64_t v8;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t inserted;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *a5 = 0;
  if (!a2)
  {
    v8 = operator new();
    *(_QWORD *)v8 = a3;
    *(_OWORD *)(v8 + 8) = *a4;
    *(_QWORD *)(v8 + 24) = *((_QWORD *)a4 + 2);
    v20 = *a4;
    *(_OWORD *)(v8 + 32) = *a4;
    *(_QWORD *)(v8 + 48) = v20;
    *(_BYTE *)(v8 + 56) = 0;
    *(_QWORD *)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 80) = 0;
    *(_QWORD *)(v8 + 64) = 0;
    return v8;
  }
  v8 = (uint64_t)a2;
  v10 = a2[1];
  v11 = *(_QWORD *)a4 >= v10;
  if (*(_QWORD *)a4 != v10 || (v12 = *((_QWORD *)a4 + 1), v13 = a2[2], v11 = v12 >= v13, v12 != v13))
  {
    if (v11)
      goto LABEL_5;
LABEL_9:
    inserted = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::InsertNodeVisitor(a1, a2[9], a3, a4, a5);
    if (inserted)
      *(_QWORD *)(inserted + 64) = v8;
    *(_QWORD *)(v8 + 72) = inserted;
    goto LABEL_12;
  }
  if (*a2 > a3)
    goto LABEL_9;
LABEL_5:
  v14 = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::InsertNodeVisitor(a1, a2[10], a3, a4, a5);
  if (v14)
    *(_QWORD *)(v14 + 64) = v8;
  *(_QWORD *)(v8 + 80) = v14;
LABEL_12:
  ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax((_QWORD *)v8);
  switch(*a5)
  {
    case 1:
      goto LABEL_16;
    case 2:
      v16 = *(_QWORD **)(v8 + 72);
      v17 = (_QWORD *)v16[10];
      v18 = v17[9];
      if (v18)
        *(_QWORD *)(v18 + 64) = v16;
      v16[10] = v18;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v16);
      v16[8] = v17;
      v17[9] = v16;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v17);
      v17[8] = v8;
      *(_QWORD *)(v8 + 72) = v17;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax((_QWORD *)v8);
LABEL_16:
      v19 = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::RotateClockwise(a1, (_QWORD *)v8);
      goto LABEL_22;
    case 3:
      v21 = *(_QWORD **)(v8 + 80);
      v22 = (_QWORD *)v21[9];
      v23 = v22[10];
      if (v23)
        *(_QWORD *)(v23 + 64) = v21;
      v21[9] = v23;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v21);
      v21[8] = v22;
      v22[10] = v21;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v22);
      v22[8] = v8;
      *(_QWORD *)(v8 + 80) = v22;
      ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax((_QWORD *)v8);
      goto LABEL_21;
    case 4:
LABEL_21:
      v19 = ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::RotateCounterClockwise(a1, (_QWORD *)v8);
LABEL_22:
      *(_BYTE *)(v8 + 56) = 0;
      *((_BYTE *)v19 + 56) = 1;
      v8 = (uint64_t)v19;
      break;
    default:
      break;
  }
  if (ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::HasDoubleRed(v8, a5))
  {
    v24 = *(_QWORD *)(v8 + 64);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 72);
      v26 = v25;
      if (v25 == v8)
        v26 = *(_QWORD *)(v24 + 80);
      if (v26 && !*(_BYTE *)(v26 + 56))
      {
        *(_BYTE *)(v24 + 56) = 0;
        v27 = *(_QWORD *)(v24 + 80);
        if (v25)
          *(_BYTE *)(v25 + 56) = 1;
        if (v27)
          *(_BYTE *)(v27 + 56) = 1;
        *a5 = 0;
      }
    }
  }
  return v8;
}

uint64_t ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::HasDoubleRed(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = 0;
  *a2 = 0;
  if (*(_BYTE *)(a1 + 56) != 1)
  {
    v3 = *(_QWORD *)(a1 + 72);
    if (v3 && !*(_BYTE *)(v3 + 56))
    {
      v4 = *(_QWORD *)(a1 + 64);
      if (v4 && *(_QWORD *)(v4 + 72) == a1)
        v5 = 1;
      else
        v5 = 3;
      goto LABEL_15;
    }
    v2 = *(_QWORD *)(a1 + 80);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 56))
        return 0;
      v6 = *(_QWORD *)(a1 + 64);
      if (v6 && *(_QWORD *)(v6 + 72) == a1)
        v5 = 2;
      else
        v5 = 4;
LABEL_15:
      *a2 = v5;
      return 1;
    }
  }
  return v2;
}

_QWORD *ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = result[9];
  if (v1)
    v2 = *(_QWORD *)(v1 + 40);
  else
    v2 = 0;
  v3 = result[10];
  if (v3)
    v4 = *(_QWORD *)(v3 + 40);
  else
    v4 = 0;
  if (v2 <= v4)
    v2 = v4;
  if (v2 <= result[2])
    v2 = result[2];
  result[5] = v2;
  if (v1)
  {
    v5 = *(_QWORD *)(v1 + 48);
    if (v3)
    {
LABEL_13:
      v6 = *(_QWORD *)(v3 + 48);
      goto LABEL_16;
    }
  }
  else
  {
    v5 = -1;
    if (v3)
      goto LABEL_13;
  }
  v6 = -1;
LABEL_16:
  if (v6 < v5)
    v5 = v6;
  if (result[1] < v5)
    v5 = result[1];
  result[6] = v5;
  return result;
}

_QWORD *ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::RotateClockwise(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)a2[9];
  if (!v3)
    return a2;
  v4 = v3[10];
  if (v4)
    *(_QWORD *)(v4 + 64) = a2;
  a2[9] = v4;
  ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(a2);
  a2[8] = v3;
  v3[10] = a2;
  ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v3);
  return v3;
}

_QWORD *ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::RotateCounterClockwise(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)a2[10];
  if (!v3)
    return a2;
  v4 = v3[9];
  if (v4)
    *(_QWORD *)(v4 + 64) = a2;
  a2[10] = v4;
  ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(a2);
  a2[8] = v3;
  v3[9] = a2;
  ZinIntervalTreeNode<unsigned long,ZinSpaceRange>::SetMinMax(v3);
  return v3;
}

uint64_t std::set<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::set[abi:ne180100]<std::__wrap_iter<ZinIrTensor* const*>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
      std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_hint_unique_impl<ZinIrTensor* const&>((uint64_t **)a1, v4, v6++);
    while (v6 != a3);
  }
  return a1;
}

void sub_206E7F430(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_hint_unique_impl<ZinIrTensor* const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t *)operator new(0x28uLL);
  v6[4] = *a3;
  v7 = (uint64_t **)std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__find_equal<ZinIrTensor *>(a1, a2, &v11, &v10, v6 + 4);
  v8 = *v7;
  if (*v7)
  {
    operator delete(v6);
    return v8;
  }
  else
  {
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v7, v6);
  }
  return v6;
}

void sub_206E7F4D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::TraverseIntersectNodeVisitor(uint64_t result, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v15;
  _QWORD *v16;

  if (a2)
  {
    v6 = *a3;
    if (a2[5] >= *a3)
    {
      v7 = a3[1];
      if (a2[6] <= v7)
      {
        v9 = result;
        v10 = a2[1];
        v11 = a2[2];
        v12 = v10 > v11 || v6 >= v11;
        v13 = v12 || v6 > v7;
        if (v13 || v10 >= v7)
          goto LABEL_15;
        v16 = a2;
        v15 = *(_QWORD *)(a4 + 24);
        if (!v15)
          std::__throw_bad_function_call[abi:ne180100]();
        result = (*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v15 + 48))(v15, &v16);
        if ((_DWORD)result)
        {
LABEL_15:
          ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::TraverseIntersectNodeVisitor(v9, a2[9], a3, a4);
          return ZinIntervalTree<unsigned long,std::less<unsigned long>,ZinSpaceRange>::TraverseIntersectNodeVisitor(v9, a2[10], a3, a4);
        }
      }
    }
  }
  return result;
}

void std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C000CC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C000CC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::operator()(uint64_t a1)
{
  **(_BYTE **)(a1 + 8) = 0;
  return 0;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_0>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::target_type()
{
}

void std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C000D18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C000D18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::operator()(uint64_t a1)
{
  **(_BYTE **)(a1 + 8) = 0;
  return 0;
}

uint64_t std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1,std::allocator<ZinIrMemoryUtils::ComputeSymbolSpaceOverlapTree(ZinIrTensor const*,std::unique_ptr<ZinIntervalTree<ZinIrTensor*,ZinIrIdComparator<ZinIrTensor*>,ZinLiveRange>> const&)::$_1>,BOOL ()(ZinIntervalTreeNode<unsigned long,ZinSpaceRange> const*)>::target_type()
{
}

uint64_t ZinParseNMSUnit(CFDictionaryRef *a1, uint64_t a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  uint64_t result;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const __CFString *v74;
  const __CFString *v75;
  CFTypeID v76;
  int v77;
  _BOOL8 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  float v87;
  uint8_t buf[16];

  Value = (const __CFDictionary *)CFDictionaryGetValue(*a1, CFSTR("Params"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v16)
      ZinParseNMSUnit(v16, v17, v18, v19, v20, v21, v22, v23);
    v24 = CFSTR("InvalidParamSyntax");
    goto LABEL_9;
  }
  v86 = 0;
  if (ZinParseCFNumberToken<(CFNumberType)3,int>(v6, CFSTR("NMSRounds"), CFSTR("InvalidNMSRounds"), &v86, a3, 0))
  {
    v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v8)
      ZinParseNMSUnit(v8, v9, v10, v11, v12, v13, v14, v15);
    return 3;
  }
  if (v86 <= 0)
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidNMSRounds"));
    v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v34)
      ZinParseNMSUnit(v34, v35, v36, v37, v38, v39, v40, v41);
    return 3;
  }
  *(_QWORD *)(a2 + 80) = v86;
  v87 = -1.0;
  if (ZinParseCFNumberToken<(CFNumberType)5,float>(v6, CFSTR("IoUThreshold"), CFSTR("InvalidNMSIoUThreshold"), &v87, a3, 0))
  {
    v26 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v26)
      ZinParseNMSUnit(v26, v27, v28, v29, v30, v31, v32, v33);
    return 3;
  }
  if (v87 < 0.0 || v87 > 1.0)
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidNMSIoUThreshold"));
    v50 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v50)
      ZinParseNMSUnit(v50, v51, v52, v53, v54, v55, v56, v57);
    return 3;
  }
  *(float *)(a2 + 88) = v87;
  if (ZinParseBooleanToken(v6, CFSTR("PerClassSuppression"), (BOOL *)(a2 + 92)))
  {
    v42 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v42)
      ZinParseNMSUnit(v42, v43, v44, v45, v46, v47, v48, v49);
    return 3;
  }
  if (ZinParseBooleanToken(v6, CFSTR("ReturnPerClassResults"), (BOOL *)(a2 + 93)))
  {
    v58 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v58)
      ZinParseNMSUnit(v58, v59, v60, v61, v62, v63, v64, v65);
    return 3;
  }
  if (*(_BYTE *)(a2 + 93) && !*(_BYTE *)(a2 + 92))
  {
    v66 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v66)
      ZinParseNMSUnit(v66, v67, v68, v69, v70, v71, v72, v73);
    v24 = CFSTR("InvalidNMSReturnMode");
LABEL_9:
    ZinIrUnitStatus::SetError(a3, v24);
    return 3;
  }
  v74 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("Type"));
  if (v74 && (v75 = v74, v76 = CFGetTypeID(v74), v76 == CFStringGetTypeID()))
  {
    v77 = CFStringToZinIrNMSType(v75);
    *(_DWORD *)(a2 + 96) = v77;
    if (v77 == 3)
    {
      ZinIrUnitStatus::SetError(a3, CFSTR("InvalidNMSType"));
      v78 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v78)
        ZinParseNMSUnit(v78, v79, v80, v81, v82, v83, v84, v85);
      return 3;
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Missing NMS type, use kIndices by default\n", buf, 2u);
    }
    result = 0;
    *(_DWORD *)(a2 + 96) = 0;
  }
  return result;
}

void ZinParseNMSUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing NMS params.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid NMS Threshold specified.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "NMS can only return per-class results if per-class suppression is enabled.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unrecognized NMS output type\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing NMS parameter: ReturnPerClassResults \n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing NMS parameter: PerClassSuppression \n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing NMS IoU Threshold\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "NMSRounds must be strictly greater than 0.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing NMS parameter: NMSRounds \n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

BOOL ZinNEAtoms::PreScaleAtom::IsFusable(ZinIrKernel **a1, uint64_t a2)
{
  _BOOL8 result;

  result = ZinIrKernel::HasNoBiasNoWeightButSingularScale(a1[17], *(unsigned __int8 *)(*(_QWORD *)a2 + 1244));
  if (result)
    return !ZinGOCLayer::HasShift(a1);
  return result;
}

uint64_t ZinNEAtoms::ConvAtom::IsFusableToDequant(ZinNEAtoms::ConvAtom *this, const ZinConvLayer *a2, const ZinDeQuantLayer *a3, const ZinIrHalParameters *a4)
{
  uint64_t v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int v10;
  int *v11;
  int v13;
  int v14;
  int v15;

  v6 = *((_QWORD *)this + 17);
  if (ZinKernelDescriptor::HasPadding((ZinKernelDescriptor *)(v6 + 176)))
  {
    v7 = *(_DWORD *)(v6 + 376);
    if ((v7 & 0xFFFFFFFD) != 1)
    {
      v15 = 2;
      v11 = &v15;
      goto LABEL_12;
    }
    v8 = (_DWORD *)*((_QWORD *)a3 + 183);
    v9 = (_DWORD *)*((_QWORD *)a3 + 184);
    if (v8 != v9)
    {
      while (*v8 != 9)
      {
        if (++v8 == v9)
        {
          v8 = v9;
          break;
        }
      }
    }
    v10 = ZinDeQuantLayer::HasZeroPoint(a2);
    if (v7 == 1 && v10 && v8 == v9)
    {
      v14 = 7;
      v11 = &v14;
LABEL_12:
      ZinQuantizationLog::Log((uint64_t)a2, v11);
      return 0;
    }
    if (v7 == 3 && ZinDeQuantLayer::HasZeroPoint(a2))
    {
      v13 = 2;
      v11 = &v13;
      goto LABEL_12;
    }
  }
  return 1;
}

std::string *ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string __p;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v11[0] = &off_24BFFF5B8;
  v11[1] = a3;
  v12 = v11;
  ZinPatternAtom::ZinPatternAtom(this, (const ZinPatternAtomDesc *)&__p);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v7 + 8 * v8))(v7, v5, v6);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return this;
}

void sub_206E7FE2C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ZinNEAtoms::DeQuantAtom::IsFusableWithInputRelu(ZinNEAtoms::DeQuantAtom *this, const ZinIrOpLayer *a2)
{
  int v4;

  if (!this)
    return 1;
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) != 104
    || (ZinDeQuantLayer::HasZeroPoint(this) & 1) == 0 && ZinDeQuantLayer::GetScalarScale(this) >= 0.0)
  {
    return 1;
  }
  v4 = 10;
  ZinQuantizationLog::Log((uint64_t)this, &v4);
  return 0;
}

BOOL ZinNEAtoms::DeQuantAtom::IsFusableAsGOC(uint64_t **a1, uint64_t a2, ZinNEAtoms::ConvAtom *this, const ZinIrHalParameters *a4, uint64_t a5, int a6, ZinDeQuantLayer *a7, int a8)
{
  char **v12;
  uint64_t v16;
  _BOOL8 IsFusable;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  float *v21;
  ZinMirConvUtils *v22;
  ZinMirConvUtils *v23;
  ZinMirConvUtils *v24;
  int v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  ZinPatternUtils **v32;
  ZinPatternUtils **v33;
  ZinPatternUtils *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t InputTensor;
  uint64_t v49;
  uint64_t v50;
  int v52;
  ZinDeQuantLayer *v53;
  uint64_t v54;
  char **v55;
  char **v56;
  std::string v57;
  void *v58[2];
  int64_t v59;
  std::string v60;
  void *v61[2];
  std::string::size_type v62;
  void *__p;
  void *v64;
  char v65;
  std::string v66;
  char *v67;
  char *v68;
  char *v69;

  if (*a1 == a1[1])
    return 1;
  v12 = (char **)a4;
  if (a8 == 89)
  {
    if (ZinDeQuantLayer::IsPerCout((ZinDeQuantLayer *)**a1))
      goto LABEL_4;
    v18 = *((_QWORD *)this + 8);
    if (*(_DWORD *)(v18 + 8) != 1)
      goto LABEL_80;
    v19 = *(_DWORD *)(v18 + 104);
    if (v19 > 0xE)
      ZinAssertImpl("Code never reaches here");
    if (((1 << v19) & 0x6FF3) == 0 || !ZinDeQuantLayer::HasScale((ZinDeQuantLayer *)**a1))
    {
      v54 = a2;
      v25 = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      goto LABEL_26;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(**a1 + 136) + 568);
    ZinIrVector::GetValuesAsVector<float>(v20, *(_QWORD *)(v20 + 56), 1, (uint64_t)&__p);
    if (__p != v64)
    {
      v21 = (float *)__p;
      while (*v21 >= 0.0)
      {
        if (++v21 == v64)
          goto LABEL_14;
      }
      v50 = **a1;
      LODWORD(v67) = 4;
      ZinQuantizationLog::Log(v50, (int *)&v67);
      if (__p)
      {
        v64 = __p;
        operator delete(__p);
      }
      return 0;
    }
LABEL_14:
    if (__p)
    {
      v64 = __p;
      operator delete(__p);
    }
  }
  if (this && a8 == 85)
  {
    if (!*(_DWORD *)(*((_QWORD *)this + 8) + 8))
    {
      if (!ZinNEAtoms::ConvAtom::IsFusableToDequant(this, (const ZinConvLayer *)**a1, a7, a4))
        return 0;
      v55 = v12;
      ZinIrOpLayer::GetInputTensorDimensions(this, &__p);
      v22 = (ZinMirConvUtils *)*((_QWORD *)__p + 1);
      v64 = __p;
      operator delete(__p);
      v23 = *(ZinMirConvUtils **)((*(uint64_t (**)(ZinNEAtoms::ConvAtom *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 56);
      v24 = (ZinMirConvUtils *)(*(uint64_t (**)(ZinNEAtoms::ConvAtom *))(*(_QWORD *)this + 88))(this);
      if (ZinDeQuantLayer::IsPerCout((ZinDeQuantLayer *)**a1)
        && !ZinMirConvUtils::IsChannelwiseConvolution(v22, v23, v24))
      {
LABEL_4:
        v16 = **a1;
        LODWORD(__p) = 1;
        ZinQuantizationLog::Log(v16, (int *)&__p);
        return 0;
      }
      v54 = a2;
      v67 = 0;
      v68 = 0;
      v25 = 1;
      v69 = 0;
      v12 = v55;
      goto LABEL_26;
    }
LABEL_80:
    ZinAssertImpl("Inconsistent Opcode");
  }
  v54 = a2;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  if (!this)
  {
    std::string::basic_string[abi:ne180100]<0>(&v66, &byte_207AF6795);
    v25 = 0;
    goto LABEL_30;
  }
  v25 = 0;
LABEL_26:
  if (*((char *)this + 47) < 0)
    std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  else
    v66 = *(std::string *)((_BYTE *)this + 1);
LABEL_30:
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(**a1 + 24), (const void **)&v66.__r_.__value_.__l.__data_, (uint64_t)&v60);
  std::string::basic_string[abi:ne180100]<0>(&v57, "dequant_to_goc");
  v26 = std::string::append(&v57, "_xfm", 4uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v59 = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)v58 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v59 >= 0)
    v28 = v58;
  else
    v28 = (void **)v58[0];
  if (v59 >= 0)
    v29 = HIBYTE(v59);
  else
    v29 = (std::string::size_type)v58[1];
  v30 = std::string::append(&v60, (const std::string::value_type *)v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v62 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)v61 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(&__p, v61);
  if (SHIBYTE(v62) < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v59) < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v52 = a6;
  v53 = a7;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  v56 = v12;
  v33 = (ZinPatternUtils **)*a1;
  v32 = (ZinPatternUtils **)a1[1];
  if (*a1 == (uint64_t *)v32)
  {
    v38 = (uint64_t)v68;
  }
  else
  {
    do
    {
      v34 = *v33;
      if (v25)
        v35 = ZinPatternUtils::ConvertDequantToPostConvGOC(v34, this, (const ZinConvLayer *)&__p, 0);
      else
        v35 = ZinPatternUtils::ConvertDequantToGOC(v34, 0);
      v36 = v35;
      v37 = v68;
      if (v68 >= v69)
      {
        v39 = (v68 - v67) >> 3;
        if ((unint64_t)(v39 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v40 = (v69 - v67) >> 2;
        if (v40 <= v39 + 1)
          v40 = v39 + 1;
        if ((unint64_t)(v69 - v67) >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v69, v41);
        else
          v42 = 0;
        v43 = &v42[8 * v39];
        *(_QWORD *)v43 = v36;
        v38 = (uint64_t)(v43 + 8);
        v45 = v67;
        v44 = v68;
        if (v68 != v67)
        {
          do
          {
            v46 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v43 - 1) = v46;
            v43 -= 8;
          }
          while (v44 != v45);
          v44 = v67;
        }
        v67 = v43;
        v68 = (char *)v38;
        v69 = &v42[8 * v41];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_QWORD *)v68 = v35;
        v38 = (uint64_t)(v37 + 8);
      }
      v68 = (char *)v38;
      ++v33;
    }
    while (v33 != v32);
  }
  std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>((uint64_t)&v67, v38, *v56, v56[1], (v56[1] - *v56) >> 3);
  v47 = ZinMergeGOCSequence(v54, (uint64_t)&__p, (uint64_t)&v67);
  InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)**a1, 0);
  IsFusable = ZinNEAtoms::GOCAtom::IsFusable((uint64_t)v47, this, a5, v52, *(_DWORD *)(InputTensor + 88), a8, (uint64_t)v53);
  if (!IsFusable)
  {
    v49 = **a1;
    LODWORD(v61[0]) = 3;
    ZinQuantizationLog::Log(v49, (int *)v61);
  }
  __p = off_24C01FBB0;
  if (v65 < 0)
    operator delete(v64);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  return IsFusable;
}

void sub_206E80434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinNEAtoms::GOCAtom::IsFusable(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, unsigned int a5, int a6, uint64_t a7)
{
  ZinIrKernel *v12;
  _BOOL8 v13;
  std::string v15;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v18 = a5;
  v17 = a6;
  if (!a1)
    return 0;
  if (a6 == 92)
  {
    v12 = *(ZinIrKernel **)(a1 + 136);
    if (v12)
    {
      if (!ZinIrKernel::HasNoBiasNoWeightButSingularScale(v12, *(unsigned __int8 *)(a7 + 1244)))
        return 0;
    }
  }
  v16 = 0;
  v13 = 0;
  if (!GetL2FmtFromNEFusePattern(a2, a3, &v18, (int *)&v16 + 1))
  {
    if (*(char *)(a1 + 47) < 0)
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    else
      v15 = *(std::string *)(a1 + 24);
    v13 = !GetKernelCfgKernelFmtFromNEFusePatternOps(a2, a4, a3, (unsigned int *)&v16 + 1, (int)&v15, &v17, (ZinGOCLayer *)a1, a7, (int *)&v16)&& (!a2 || (*(unsigned int (**)(_QWORD *, uint64_t))(*a2 + 272))(a2, a1))&& MergeScaleBiasNEHWLimits((uint64_t)a2, a1, v16, SHIDWORD(v16), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80));
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_206E80654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinNEAtoms::GOCAtom::GetMatchStatus(uint64_t a1)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8)))
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  else
    return ZinPatternUtils::FusionStatus(1u, a1, 1);
}

uint64_t ZinNEAtoms::ConvGOCAtom::GetMatchStatus(uint64_t a1)
{
  int v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t SingleMatch;
  int v6;
  void *__p[2];
  char v9;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
  if (v2)
    v3 = ZinPattern::State::MatchCount(*(ZinPattern::State **)(a1 + 24)) == 0;
  else
    v3 = 1;
  v4 = *(_QWORD **)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "round");
  SingleMatch = ZinPattern::State::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  v6 = v2 ^ 1;
  if (SingleMatch)
  {
    v3 = ZinIrKernel::HasBias(*(ZinIrKernel **)(*(_QWORD *)(a1 + 8) + 136)) ^ 1;
    v6 &= v3;
  }
  return ZinPatternUtils::FusionStatus(v3, a1, v6);
}

void sub_206E80778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *ZinNEAtoms::NEConvAtom::NEConvAtom(std::string *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string __p;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v11[0] = &off_24C054750;
  v11[1] = a3;
  v12 = v11;
  ZinPatternAtom::ZinPatternAtom(this, (const ZinPatternAtomDesc *)&__p);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v7 + 8 * v8))(v7, v5, v6);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return this;
}

void sub_206E80880(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

std::string *ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string __p;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v11[0] = &off_24C055040;
  v11[1] = a3;
  v12 = v11;
  ZinPatternAtom::ZinPatternAtom(this, (const ZinPatternAtomDesc *)&__p);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v7 + 8 * v8))(v7, v5, v6);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return this;
}

void sub_206E8098C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054AC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::InputReLUAtom::InputReLUAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0549B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0549B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int IsFusable;

  if (!ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8)))
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v3 + 64) + 8) != 2)
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  IsFusable = ZinNEAtoms::PreScaleAtom::IsFusable((ZinIrKernel **)v3, *(_QWORD *)(a2 + 16));
  return ZinPatternUtils::FusionStatus(IsFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PreScaleAtom::PreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054EE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054EE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  unsigned int v8;

  if (!ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8)))
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (*(_DWORD *)(v4 + 8) != 1 || *(_BYTE *)(v4 + 116) || *(float *)(v4 + 112) != 1.0)
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  if (*(_BYTE *)(v4 + 108) && *(_DWORD *)(v4 + 104) == 2)
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  v6 = (__int128 *)(v4 + 16);
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v3 + 88) + 32))(**(_QWORD **)(v3 + 88), 0, 0);
  v8 = ZinMirPoolingLayer::ValidateKernelDimensions(v6, (__int128 *)(v7 + 48), *(_DWORD *)(v7 + 88), *(_QWORD *)(a2 + 16), 0);
  return ZinPatternUtils::FusionStatus(v8, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolAtom::PoolAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054E30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054E30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  const ZinConvLayer *SingleMatch;
  _QWORD *v6;
  const ZinIrHalParameters *v7;
  char IsFusableToDequant;
  char v9;
  void *__p[2];
  char v11;

  if (!ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8))
    || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8))
  {
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
  v4 = *(_QWORD **)(a2 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "dequant");
  SingleMatch = (const ZinConvLayer *)ZinPattern::State::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = *(_QWORD **)(a2 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "dequant");
  if (!ZinPattern::State::HasMatched(v6, (unsigned __int8 *)__p))
  {
    if (v11 < 0)
      operator delete(__p[0]);
    return ZinPatternUtils::FusionStatus(1u, a2, 1);
  }
  IsFusableToDequant = ZinNEAtoms::ConvAtom::IsFusableToDequant(*(ZinNEAtoms::ConvAtom **)(a2 + 8), SingleMatch, **(const ZinDeQuantLayer ***)(a2 + 16), v7);
  v9 = IsFusableToDequant;
  if ((v11 & 0x80000000) == 0)
  {
    if ((IsFusableToDequant & 1) == 0)
      return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    return ZinPatternUtils::FusionStatus(1u, a2, 1);
  }
  operator delete(__p[0]);
  if ((v9 & 1) != 0)
    return ZinPatternUtils::FusionStatus(1u, a2, 1);
  return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
}

void sub_206E80E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvAtom::ConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054DD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054DD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsFusable;

  IsFusable = ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (IsFusable)
    IsFusable = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 14;
  return ZinPatternUtils::FusionStatus(IsFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::KernelRasterizerAtom::KernelRasterizerAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054D80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054D80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsFusable;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  void *v11;
  _QWORD *v12;

  IsFusable = ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (IsFusable)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 12)
    {
      ZinPattern::State::GetMatchList(*(ZinPattern::State **)(a2 + 24), &v11);
      v4 = v11;
      v5 = v12;
      if (v11)
      {
        v12 = v11;
        operator delete(v11);
      }
      if (v5 != v4)
      {
        ZinPattern::State::GetMatchList(*(ZinPattern::State **)(a2 + 24), &v11);
        v6 = *(v12 - 1);
        if (v11)
        {
          v12 = v11;
          operator delete(v11);
        }
        v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 88);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) - v7) >= 9 && v6 == *(_QWORD *)(v7 + 8))
        {
          LOBYTE(v8) = 0;
          v9 = 0;
          return v8 | (v9 << 8);
        }
      }
      IsFusable = 1;
    }
    else
    {
      IsFusable = 0;
    }
  }
  v8 = ZinPatternUtils::FusionStatus(IsFusable, a2, 1);
  v9 = HIBYTE(v8);
  return v8 | (v9 << 8);
}

uint64_t std::__function::__func<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CrossCorrelationAtom::CrossCorrelationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0546F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0546F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsFusable;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  __int16 v8;
  int v9;
  void *v11;
  _QWORD *v12;

  IsFusable = ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (IsFusable)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 17)
    {
      ZinPattern::State::GetMatchList(*(ZinPattern::State **)(a2 + 24), &v11);
      v4 = v11;
      v5 = v12;
      if (v11)
      {
        v12 = v11;
        operator delete(v11);
      }
      if (v5 != v4)
      {
        ZinPattern::State::GetMatchList(*(ZinPattern::State **)(a2 + 24), &v11);
        v6 = *(v12 - 1);
        if (v11)
        {
          v12 = v11;
          operator delete(v11);
        }
        v7 = *(_QWORD **)(*(_QWORD *)(a2 + 8) + 88);
        if (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) - (_QWORD)v7 >= 9uLL
          && v6 == *v7
          && *(_DWORD *)(*(_QWORD *)(v6 + 64) + 8) != 104)
        {
          LOBYTE(v8) = 0;
          v9 = 0;
          return v8 | (v9 << 8);
        }
      }
      IsFusable = 1;
    }
    else
    {
      IsFusable = 0;
    }
  }
  v8 = ZinPatternUtils::FusionStatus(IsFusable, a2, 1);
  v9 = HIBYTE(v8);
  return v8 | (v9 << 8);
}

uint64_t std::__function::__func<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatMulAtom::MatMulAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054800;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054800;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsFusable;

  IsFusable = ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (IsFusable)
    IsFusable = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 104;
  return ZinPatternUtils::FusionStatus(IsFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantAtom::DeQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24BFFF5B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24BFFF5B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  ZinNEAtoms::DeQuantAtom *v3;
  _QWORD *v4;
  const ZinIrOpLayer *v5;
  char IsFusableWithInputRelu;
  char v7;
  ZinIrKernel **v9;
  unsigned int IsFusable;
  void *__p[2];
  char v12;

  if (!ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), a2[1]))
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  v3 = (ZinNEAtoms::DeQuantAtom *)a2[1];
  if (*(_DWORD *)(*((_QWORD *)v3 + 8) + 8) != 104)
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  v4 = (_QWORD *)a2[3];
  std::string::basic_string[abi:ne180100]<0>(__p, "relu");
  if (!ZinPattern::State::HasMatched(v4, (unsigned __int8 *)__p))
  {
    if (v12 < 0)
      operator delete(__p[0]);
    goto LABEL_11;
  }
  IsFusableWithInputRelu = ZinNEAtoms::DeQuantAtom::IsFusableWithInputRelu(v3, v5);
  v7 = IsFusableWithInputRelu;
  if ((v12 & 0x80000000) == 0)
  {
    if ((IsFusableWithInputRelu & 1) == 0)
      return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
LABEL_11:
    v9 = (ZinIrKernel **)ZinPatternUtils::ConvertDequantToGOC(v3, 0);
    IsFusable = ZinNEAtoms::PreScaleAtom::IsFusable(v9, a2[2]);
    return ZinPatternUtils::FusionStatus(IsFusable, (uint64_t)a2, 1);
  }
  operator delete(__p[0]);
  if ((v7 & 1) != 0)
    goto LABEL_11;
  return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
}

void sub_206E81538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::DeQuantPreScaleAtom::DeQuantPreScaleAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054CD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054CD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t Hal;
  uint64_t v5;
  unsigned int IsFusable;
  _QWORD *v7;
  uint64_t v8;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 160));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  IsFusable = ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8));
  v7 = *(_QWORD **)(a2 + 8);
  if (IsFusable)
  {
    v8 = v7[8];
    IsFusable = *(_DWORD *)(v8 + 8) == 5 && *(_DWORD *)(v8 + 12) != 9;
  }
  if (*(_BYTE *)(v5 + 1135) && v7[12] - v7[11] != 16)
    IsFusable = 0;
  if (!*(_BYTE *)(v5 + 1136) && (*(_DWORD *)(v7[8] + 12) & 0xFFFFFFFE) == 2)
    IsFusable = 0;
  return ZinPatternUtils::FusionStatus(IsFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ElementWiseAtom::ElementWiseAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054B18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054B18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t InputTensor;

  v3 = *(_QWORD **)(a1 + 8);
  InputTensor = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(a2 + 8), 0);
  if (ZinNEAtoms::GOCAtom::IsFusable(v3, a2, 88, *(_DWORD *)(InputTensor + 88)))
    return ZinNEAtoms::GOCAtom::GetMatchStatus(a2);
  else
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
}

uint64_t std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulGOCAtom::MatmulGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054D28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054D28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsQuantFusable;

  IsQuantFusable = ZinNEAtoms::IsQuantFusable(a2, *(_QWORD **)(a1 + 8), 88);
  return ZinPatternUtils::FusionStatus(IsQuantFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::MatmulQuantAtom::MatmulQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0548B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0548B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t InputTensor;

  v3 = *(_QWORD **)(a1 + 8);
  InputTensor = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(a2 + 8), 0);
  if (ZinNEAtoms::GOCAtom::IsFusable(v3, a2, 89, *(_DWORD *)(InputTensor + 88)))
    return ZinNEAtoms::GOCAtom::GetMatchStatus(a2);
  else
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
}

uint64_t std::__function::__func<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolGOCAtom::PoolGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054908;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054908;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t InputTensor;

  v3 = *(_QWORD **)(a1 + 8);
  InputTensor = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(a2 + 8), 0);
  if (ZinNEAtoms::GOCAtom::IsFusable(v3, a2, 93, *(_DWORD *)(InputTensor + 88)))
    return ZinNEAtoms::GOCAtom::GetMatchStatus(a2);
  else
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
}

uint64_t std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RcasGOCAtom::RcasGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0547A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0547A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t InputTensor;

  v3 = *(_QWORD **)(a1 + 8);
  InputTensor = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(a2 + 8), 0);
  if (ZinNEAtoms::GOCAtom::IsFusable(v3, a2, 85, *(_DWORD *)(InputTensor + 88)))
    return ZinNEAtoms::ConvGOCAtom::GetMatchStatus(a2);
  else
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
}

uint64_t std::__function::__func<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvGOCAtom::ConvGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054A68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054A68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsQuantFusable;

  IsQuantFusable = ZinNEAtoms::IsQuantFusable(a2, *(_QWORD **)(a1 + 8), 85);
  return ZinPatternUtils::FusionStatus(IsQuantFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ConvQuantAtom::ConvQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054FE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054FE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t InputTensor;
  _QWORD *v5;
  uint64_t SingleMatch;
  uint64_t v7;
  int v8;
  void *__p[2];
  char v11;

  v3 = *(_QWORD **)(a1 + 8);
  InputTensor = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(a2 + 8), 0);
  if (!ZinNEAtoms::GOCAtom::IsFusable(v3, a2, 90, *(_DWORD *)(InputTensor + 88)))
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  v5 = *(_QWORD **)(a2 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "round");
  SingleMatch = ZinPattern::State::GetSingleMatch(v5, (unsigned __int8 *)__p);
  v7 = SingleMatch;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (v7)
      goto LABEL_4;
LABEL_7:
    v8 = 1;
    return ZinPatternUtils::FusionStatus(v8, a2, v8);
  }
  if (!SingleMatch)
    goto LABEL_7;
LABEL_4:
  v8 = ZinIrKernel::HasBias(*(ZinIrKernel **)(*(_QWORD *)(a2 + 8) + 136)) ^ 1;
  return ZinPatternUtils::FusionStatus(v8, a2, v8);
}

void sub_206E81E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWGOCAtom::EWGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054858;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054858;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsQuantFusable;

  IsQuantFusable = ZinNEAtoms::IsQuantFusable(a2, *(_QWORD **)(a1 + 8), 90);
  return ZinPatternUtils::FusionStatus(IsQuantFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWQuantAtom::EWQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054A10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054A10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t InputTensor;
  unsigned int IsFusable;

  v3 = *(_QWORD **)(a1 + 8);
  InputTensor = ZinIrOpLayer::GetInputTensor(*(ZinIrOpLayer **)(a2 + 8), 0);
  IsFusable = ZinNEAtoms::GOCAtom::IsFusable(v3, a2, 92, *(_DWORD *)(InputTensor + 88));
  return ZinPatternUtils::FusionStatus(IsFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassGOCAtom::BypassGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054C78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054C78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsQuantFusable;

  IsQuantFusable = ZinNEAtoms::IsQuantFusable(a2, *(_QWORD **)(a1 + 8), 92);
  return ZinPatternUtils::FusionStatus(IsQuantFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::BypassQuantAtom::BypassQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054C20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054C20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *SingleMatch;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t Hal;
  const ZinIrHalParameters *v10;
  unsigned int v11;
  void *__p[2];
  char v13;
  char v14;
  char v15;

  if (!ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8))
    || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) != 4)
  {
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
  v3 = *(_QWORD **)(a2 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  SingleMatch = (_QWORD *)ZinPattern::State::GetSingleMatch(v3, (unsigned __int8 *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  v5 = *(_QWORD **)(a2 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "goc");
  v6 = ZinPattern::State::GetSingleMatch(v5, (unsigned __int8 *)__p);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (!SingleMatch)
      goto LABEL_12;
  }
  else if (!SingleMatch)
  {
    goto LABEL_12;
  }
  if (((*(uint64_t (**)(_QWORD *))(*SingleMatch + 120))(SingleMatch) & 1) != 0
    || *(_DWORD *)(SingleMatch[8] + 8) == 17)
  {
    goto LABEL_14;
  }
LABEL_12:
  if (v6 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6))
  {
LABEL_14:
    v8 = *(_QWORD *)(a2 + 8);
    Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(v8 + 16) + 160));
    v10 = (const ZinIrHalParameters *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
    ZinIrHalParameters::ZinIrHalParameters((ZinIrHalParameters *)__p, v10);
    v11 = v14 && !v15 || *(_DWORD *)(v8 + 192) < 2u;
    ZinIrHalParameters::~ZinIrHalParameters((ZinIrHalParameters *)__p);
    return ZinPatternUtils::FusionStatus(v11, a2, 1);
  }
  v11 = 1;
  return ZinPatternUtils::FusionStatus(v11, a2, 1);
}

void sub_206E82328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::ActivationAtom::ActivationAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054F90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054F90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unsigned int v4;
  unsigned int v5;
  void *__p[2];
  char v8;

  if (!ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8))
    || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) != 5
    || !*(_BYTE *)(**(_QWORD **)(a2 + 16) + 1212))
  {
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
  v3 = *(_QWORD **)(a2 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  v4 = ZinPattern::State::HasMatched(v3, (unsigned __int8 *)__p);
  v5 = v4;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
  else if (v4)
  {
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
  return ZinPatternUtils::FusionStatus(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 12) == 9, a2, 1);
}

void sub_206E824CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::EWAbsAtom::EWAbsAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054E88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054E88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v8;
  void *v9;

  v3 = ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8))
    && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 9;
  ZinPattern::State::GetMatchList(*(ZinPattern::State **)(a2 + 24), &v8);
  v4 = v8;
  v5 = v9;
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  v6 = v5 == v4 && v3;
  return ZinPatternUtils::FusionStatus(v6, a2, v6 ^ 1);
}

uint64_t std::__function::__func<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::CopyAtom::CopyAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054BC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054BC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsFusable;
  ZinTransposeLayer *v4;
  uint64_t v5;

  IsFusable = ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (IsFusable)
  {
    v4 = *(ZinTransposeLayer **)(a2 + 8);
    IsFusable = *(_DWORD *)(*((_QWORD *)v4 + 8) + 8) == 37
             && ((v5 = **(_QWORD **)(a2 + 16), *(_BYTE *)(v5 + 1880)) || *(_BYTE *)(v5 + 1108))
             && ZinTransposeLayer::IsCWTranspose(v4);
  }
  return ZinPatternUtils::FusionStatus(IsFusable, a2, IsFusable ^ 1);
}

uint64_t std::__function::__func<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TransposeAtom::TransposeAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054F38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054F38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsFusable;

  IsFusable = ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8));
  if (IsFusable)
    IsFusable = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 67;
  if (*(_BYTE *)(**(_QWORD **)(a2 + 16) + 1128))
    return ZinPatternUtils::FusionStatus(IsFusable, a2, 1);
  else
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
}

uint64_t std::__function::__func<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RCASAtom::RCASAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C055098;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C055098;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  void *__p[2];
  char v9;

  v3 = ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8))
    && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 72;
  v4 = *(_QWORD **)(a2 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "dequant");
  v5 = ZinPattern::State::HasMatched(v4, (unsigned __int8 *)__p);
  v6 = v5;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
  else if (v5)
  {
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  }
  if (*(_BYTE *)(**(_QWORD **)(a2 + 16) + 1139))
    return ZinPatternUtils::FusionStatus(v3, a2, 1);
  return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
}

void sub_206E829CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::RoundAtom::RoundAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054750;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054750;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *__p;
  char *v10;

  if (!ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8)))
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  v3 = *(_QWORD **)(a2 + 8);
  if (*(_DWORD *)(v3[8] + 8) != 85 || !v3[54])
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  (*(void (**)(void **__return_ptr, _QWORD))(*v3 + 312))(&__p, *(_QWORD *)(a2 + 8));
  v4 = v10;
  while (v4 != __p)
  {
    v6 = *((_QWORD *)v4 - 1);
    v4 -= 8;
    v5 = v6;
    if (v6)
      goto LABEL_10;
  }
  v5 = *((_QWORD *)__p - 1);
LABEL_10:
  v8 = ZinPatternUtils::FusionStatus(v5 == v3[54], a2, 1);
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_206E82B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEConvAtom::NEConvAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C055040;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C055040;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *SingleMatch;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Hal;
  uint64_t v20;
  ZinIrKernel **v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  ZinIrKernel *v27;
  int v28;
  uint64_t v29;
  void *v30;
  char *v31;
  char v32;
  void *__p;
  char *v34;

  if (!ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8)))
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  v3 = *(_QWORD **)(a2 + 8);
  v4 = *(_DWORD *)(v3[8] + 8);
  if (v4 != 85 && v4 != 92)
    return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
  (*(void (**)(void **__return_ptr, _QWORD))(*v3 + 312))(&__p, *(_QWORD *)(a2 + 8));
  v5 = v34;
  v6 = (uint64_t *)__p;
  if (__p != v34)
  {
    v6 = (uint64_t *)__p;
    while (!*v6)
    {
      if (++v6 == (uint64_t *)v34)
      {
        v6 = (uint64_t *)v34;
        break;
      }
    }
  }
  v7 = *v6;
  while (v5 != __p)
  {
    v9 = *((_QWORD *)v5 - 1);
    v5 -= 8;
    v8 = v9;
    if (v9)
      goto LABEL_15;
  }
  v8 = *((_QWORD *)__p - 1);
LABEL_15:
  v11 = v3[48];
  if ((v7 == v11 || v7 == v3[49]) && (v8 == v11 || v8 == v3[49]))
  {
    v14 = *(_QWORD **)(a2 + 24);
    std::string::basic_string[abi:ne180100]<0>(&v30, "neconv");
    SingleMatch = (_QWORD *)ZinPattern::State::GetSingleMatch(v14, (unsigned __int8 *)&v30);
    if (v32 < 0)
      operator delete(v30);
    if (!SingleMatch[54])
    {
      v12 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
      goto LABEL_20;
    }
    (*(void (**)(void **__return_ptr, _QWORD *))(*SingleMatch + 312))(&v30, SingleMatch);
    v16 = v31;
    while (v16 != v30)
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      v17 = v18;
      if (v18)
        goto LABEL_33;
    }
    v17 = *((_QWORD *)v30 - 1);
LABEL_33:
    if (v17 != SingleMatch[54])
      ZinAssertImpl("producer's last layer must be Conv to fuse with consumer\n");
    Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 160));
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
    v23 = v3 + 48;
    v21 = (ZinIrKernel **)v3[48];
    v22 = v23[1];
    if (!(*(unsigned int (**)(_QWORD *))(*SingleMatch + 120))(SingleMatch))
    {
      if (v21)
      {
        if ((*((unsigned int (**)(ZinIrKernel **))*v21 + 15))(v21))
          goto LABEL_57;
        goto LABEL_44;
      }
LABEL_56:
      v26 = ZinPatternUtils::FusionStatus(1u, a2, 1);
      goto LABEL_58;
    }
    if (*(_BYTE *)(v20 + 1208))
    {
      if (*(_BYTE *)(v20 + 1209))
        v24 = v22 == 0;
      else
        v24 = 1;
      if (v24)
        goto LABEL_51;
    }
    else if (!v22)
    {
      goto LABEL_51;
    }
    if (*(_DWORD *)(v22 + 192) > 1u)
      goto LABEL_57;
LABEL_51:
    if (v21)
    {
      v27 = v21[17];
      if (*((_QWORD *)v27 + 73) || *((_QWORD *)v27 + 75) || ZinGOCLayer::IsPerCout(v21))
        goto LABEL_57;
LABEL_44:
      v25 = (_QWORD *)SingleMatch[54];
      if (((*(uint64_t (**)(_QWORD *, ZinIrKernel **))(*v25 + 272))(v25, v21) & 1) != 0)
      {
        v29 = 0;
        v28 = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v25 + 32))(v25, 0, 0) + 88);
        if (GetL2FmtFromNEFusePattern(v25, 0, (unsigned int *)&v28, (int *)&v29 + 1)
          || (v28 = 85,
              GetKernelCfgKernelFmtFromNEFusePatternOps(v25, 0, 0, (unsigned int *)&v29 + 1, (int)v21 + 24, &v28, (ZinGOCLayer *)v21, v20, (int *)&v29))|| !MergeScaleBiasNEHWLimits((uint64_t)v25, (uint64_t)v21, v29, SHIDWORD(v29), *((_DWORD *)v21[2] + 20)))
        {
          v26 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
          goto LABEL_58;
        }
        goto LABEL_56;
      }
LABEL_57:
      v26 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
LABEL_58:
      v13 = v26;
      if (v30)
      {
        v31 = (char *)v30;
        operator delete(v30);
      }
      goto LABEL_21;
    }
    goto LABEL_56;
  }
  v12 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
LABEL_20:
  v13 = v12;
LABEL_21:
  if (__p)
  {
    v34 = (char *)__p;
    operator delete(__p);
  }
  return v13;
}

void sub_206E82F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::NEGOCAtom::NEGOCAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054B70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054B70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int IsQuantFusable;

  IsQuantFusable = ZinNEAtoms::IsQuantFusable(a2, *(_QWORD **)(a1 + 8), 89);
  return ZinPatternUtils::FusionStatus(IsQuantFusable, a2, 1);
}

uint64_t std::__function::__func<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::PoolQuantAtom::PoolQuantAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C054960;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C054960;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const ZinIrOpLayer *v4;
  unsigned int v5;
  _QWORD *v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  if (*(_BYTE *)(**(_QWORD **)(a2 + 16) + 1893)
    && ZinPatternUtils::IsFusable(*(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8))
    && ZinIrOpLayer::IsTELayer(*(ZinIrOpLayer **)(a2 + 8)))
  {
    v3 = *(_QWORD **)(a2 + 24);
    std::string::basic_string[abi:ne180100]<0>(v10, "texture1");
    if ((ZinPattern::State::HasMatched(v3, (unsigned __int8 *)v10) & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      v7 = *(_QWORD **)(a2 + 24);
      std::string::basic_string[abi:ne180100]<0>(__p, "texture2");
      v5 = ZinPattern::State::HasMatched(v7, (unsigned __int8 *)__p) ^ 1;
      if (v9 < 0)
        operator delete(__p[0]);
    }
    if (v11 < 0)
      operator delete(v10[0]);
    if (v5)
    {
      if (ZinPatternUtils::CanUsePEIndex(*(ZinPatternUtils **)(a2 + 8), v4))
        return ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
      v5 = 1;
    }
  }
  else
  {
    v5 = 0;
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 55)
    v5 &= ZinCommonAtoms::CheckGatherTextureConstraints(a2);
  return ZinPatternUtils::FusionStatus(v5, a2, 1);
}

void sub_206E83290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinNEAtoms::TextureAtom::TextureAtom(std::string const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

uint64_t MirOpt::CollapseSymmetricTranspose(MirOpt *a1, ZinIrControlFlowGraph **a2, char a3)
{
  _QWORD *v5;
  BOOL *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  ZinIrOpLayer **v15;
  uint64_t v16;
  ZinIrOpLayer *v17;
  ZinIrTensor *InputTensor;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  ZinIrOpLayer **v25;
  char *v26;
  char *v27;
  ZinIrOpLayer *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD **v46;
  uint64_t ***v47;
  char *v48;
  uint64_t **v49;
  ZinIrOpLayer *v50;
  uint64_t **v51;
  ZinIrTensor *v52;
  ZinIrTensor *v53;
  size_t v54;
  std::string *v55;
  uint64_t *v56;
  std::string *v57;
  __int128 v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  ZinIrOpLayer *Reshape;
  _BOOL4 v68;
  int v69;
  int v70;
  ZinIrTensor *v71;
  int v72;
  _BOOL4 v73;
  _BOOL4 v74;
  int v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  uint64_t **v79;
  ZinReshapeLayer *v80;
  ZinIrTensor *v81;
  ZinIrTensor *v82;
  uint64_t ReshapeInfo;
  uint64_t v84;
  ZinIrTensor *v85;
  ZinIrTensor *v86;
  int *v87;
  char *v88;
  int v89;
  BOOL v90;
  BOOL v91;
  size_t v92;
  std::string *v93;
  const void *v94;
  std::string *v95;
  __int128 v96;
  const std::string::value_type *v97;
  std::string::size_type v98;
  std::string *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  ZinIrOpLayer *v105;
  _BOOL4 v106;
  int v107;
  int v108;
  ZinIrTensor *v109;
  int v110;
  _BOOL4 v111;
  _BOOL4 v112;
  int v113;
  char *__format;
  _QWORD **v116;
  _QWORD *v117[2];
  _OWORD v118[2];
  int v119;
  char v120;
  char v121;
  char v122;
  void *v123[2];
  __int128 v124;
  int v125;
  std::string v126;
  std::string v127;
  _QWORD v128[4];
  int v129;
  __int128 __p;
  std::string::size_type v131;
  int v132;
  std::string v133;
  void *v134;
  void *v135;
  char v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  _BYTE v143[24];
  _BYTE *v144;
  __int128 v145;
  int64_t v146;
  __int128 v147;
  int64_t v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v122 = a3;
  v121 = 0;
  v120 = 0;
  if (ZinIrOpt::ReverseCSE(a1, (uint64_t)a2, &v121, 2))
    ZinAssertImpl("PreOps failed");
  memset(v118, 0, sizeof(v118));
  v119 = 1065353216;
  v117[0] = 0;
  v117[1] = 0;
  v116 = v117;
  v144 = 0;
  v5 = operator new(0x28uLL);
  *v5 = &off_24C0022B0;
  v5[1] = a2;
  v5[2] = v118;
  v5[3] = &v116;
  v5[4] = &v122;
  v144 = v5;
  v7 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v143, 1);
  v8 = v144;
  if (v144 == v143)
  {
    v9 = 4;
    v8 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_7;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_7:
  if (v7)
    ZinAssertImpl("Collapse symmetric transpose failed");
  if (MirOpt::CSE(a1, *a2, (const ZinIrHalParameters *)&v120, v6))
    ZinAssertImpl("CSE must be successful");
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v10 = v116;
  if (v116 != v117)
  {
    do
    {
      v11 = (_QWORD *)v10[4];
      v12 = (uint64_t *)v11[11];
      v13 = (uint64_t *)v11[12];
      while (v12 != v13)
      {
        v14 = *v12;
        if (*(_DWORD *)(*(_QWORD *)(*v12 + 64) + 8) == 37)
        {
          v16 = v14 + 88;
          v15 = *(ZinIrOpLayer ***)(v14 + 88);
          if (*(_QWORD *)(v16 + 8) - (_QWORD)v15 == 8)
          {
            v17 = *v15;
            if (*(_DWORD *)(*((_QWORD *)*v15 + 8) + 8) == 35 && *((_QWORD *)v17 + 15) - *((_QWORD *)v17 + 14) == 8)
            {
              InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v17, 0);
              if (!ZinIrTensor::IsLiveInLiveStateOrConstTensor(InputTensor))
              {
                v19 = v141;
                if (v141 >= v142)
                {
                  v21 = (v141 - v140) >> 3;
                  if ((unint64_t)(v21 + 1) >> 61)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  v22 = (v142 - v140) >> 2;
                  if (v22 <= v21 + 1)
                    v22 = v21 + 1;
                  if ((unint64_t)(v142 - v140) >= 0x7FFFFFFFFFFFFFF8)
                    v23 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v23 = v22;
                  if (v23)
                    v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v142, v23);
                  else
                    v24 = 0;
                  v25 = (ZinIrOpLayer **)&v24[8 * v21];
                  *v25 = v17;
                  v20 = (char *)(v25 + 1);
                  v27 = v140;
                  v26 = v141;
                  if (v141 != v140)
                  {
                    do
                    {
                      v28 = (ZinIrOpLayer *)*((_QWORD *)v26 - 1);
                      v26 -= 8;
                      *--v25 = v28;
                    }
                    while (v26 != v27);
                    v26 = v140;
                  }
                  v140 = (char *)v25;
                  v141 = v20;
                  v142 = &v24[8 * v23];
                  if (v26)
                    operator delete(v26);
                }
                else
                {
                  *(_QWORD *)v141 = v17;
                  v20 = v19 + 8;
                }
                v141 = v20;
              }
            }
          }
        }
        ++v12;
      }
      v29 = (uint64_t *)v11[14];
      v30 = (uint64_t *)v11[15];
      while (v29 != v30)
      {
        v31 = *v29;
        if (*(_DWORD *)(*(_QWORD *)(*v29 + 64) + 8) == 37)
        {
          v33 = v31 + 112;
          v32 = *(uint64_t **)(v31 + 112);
          if (*(_QWORD *)(v33 + 8) - (_QWORD)v32 == 8)
          {
            v34 = *v32;
            if (*(_DWORD *)(*(_QWORD *)(*v32 + 64) + 8) == 35 && *(_QWORD *)(v34 + 96) - *(_QWORD *)(v34 + 88) == 8)
            {
              v35 = v138;
              if (v138 >= v139)
              {
                v37 = (v138 - v137) >> 3;
                if ((unint64_t)(v37 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v38 = (v139 - v137) >> 2;
                if (v38 <= v37 + 1)
                  v38 = v37 + 1;
                if ((unint64_t)(v139 - v137) >= 0x7FFFFFFFFFFFFFF8)
                  v39 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v39 = v38;
                if (v39)
                  v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v139, v39);
                else
                  v40 = 0;
                v41 = &v40[8 * v37];
                *(_QWORD *)v41 = v34;
                v36 = v41 + 8;
                v43 = v137;
                v42 = v138;
                if (v138 != v137)
                {
                  do
                  {
                    v44 = *((_QWORD *)v42 - 1);
                    v42 -= 8;
                    *((_QWORD *)v41 - 1) = v44;
                    v41 -= 8;
                  }
                  while (v42 != v43);
                  v42 = v137;
                }
                v137 = v41;
                v138 = v36;
                v139 = &v40[8 * v39];
                if (v42)
                  operator delete(v42);
              }
              else
              {
                *(_QWORD *)v138 = v34;
                v36 = v35 + 8;
              }
              v138 = v36;
            }
          }
        }
        ++v29;
      }
      v45 = (_QWORD *)v10[1];
      if (v45)
      {
        do
        {
          v46 = (_QWORD **)v45;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (_QWORD **)v10[2];
          v91 = *v46 == v10;
          v10 = v46;
        }
        while (!v91);
      }
      v10 = v46;
    }
    while (v46 != v117);
    v47 = (uint64_t ***)v137;
    v48 = v138;
    if (v137 != v138)
    {
      __format = "Reshape must have 1-1 relation with pre-transpose";
      while (1)
      {
        v49 = *v47;
        v50 = (ZinIrOpLayer *)*(*v47)[11];
        if (*((_QWORD *)v50 + 15) - *((_QWORD *)v50 + 14) != 8)
          goto LABEL_172;
        v51 = (uint64_t **)v49[19];
        v52 = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)*(*v47)[11], 0);
        if (ZinIrTensor::HasFlexDimensionOrderHint(v52))
          break;
        v53 = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v50, 0);
        ZinIrTensor::GetDimensionOrderHint(v53, (uint64_t)v123);
        if (*((char *)v49 + 47) >= 0)
          v54 = *((unsigned __int8 *)v49 + 47);
        else
          v54 = (size_t)v49[4];
        std::string::basic_string[abi:ne180100]((uint64_t)&v127, v54 + 1);
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = &v127;
        else
          v55 = (std::string *)v127.__r_.__value_.__r.__words[0];
        if (v54)
        {
          if (*((char *)v49 + 47) >= 0)
            v56 = (uint64_t *)(v49 + 3);
          else
            v56 = v49[3];
          memmove(v55, v56, v54);
        }
        *(_WORD *)((char *)&v55->__r_.__value_.__l.__data_ + v54) = 95;
        std::string::basic_string[abi:ne180100]<0>(&v133, "cancel_tr_postop");
        v57 = std::string::append(&v133, "_xfm", 4uLL);
        v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v146 = v57->__r_.__value_.__r.__words[2];
        v145 = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        if (v146 >= 0)
          v59 = (const std::string::value_type *)&v145;
        else
          v59 = (const std::string::value_type *)v145;
        if (v146 >= 0)
          v60 = HIBYTE(v146);
        else
          v60 = *((_QWORD *)&v145 + 1);
        v61 = std::string::append(&v127, v59, v60);
        v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v131 = v61->__r_.__value_.__r.__words[2];
        __p = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        ZinObjectNameFactory::ZinObjectNameFactory(&v134, &__p);
        if (SHIBYTE(v131) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v146) < 0)
          operator delete((void *)v145);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v127.__r_.__value_.__l.__data_);
        v63 = (uint64_t)v49[2];
        v64 = ZinIrOpLayer::GetInputTensor(v50, 0);
        v65 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(v50, 0) + 88);
        v66 = ((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v49)[4])(v49, 0, 0);
        Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v63, (uint64_t)&v134, v64 + 48, v65, (__int128 *)(v66 + 48), (const DimensionOrderHint *)v123);
        *(_QWORD *)&v145 = v49;
        v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
        v127.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v127);
        v68 = ZinIrOpLayerGraph::AddNode(v51, Reshape, (ZinIrOpLayer ***)&__p);
        *(_QWORD *)&__p = &unk_24C02BB18;
        if (*((_QWORD *)&__p + 1))
        {
          v131 = *((_QWORD *)&__p + 1);
          operator delete(*((void **)&__p + 1));
        }
        v69 = ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)v51, v50, Reshape);
        memset(v128, 0, sizeof(v128));
        v129 = 1065353216;
        v70 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v51, v49, Reshape, v128);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v128);
        v71 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
        v72 = ZinIrTensor::SetDimensionOrderHint(v71, (const DimensionOrderHint *)v123, 1);
        v73 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v51, (ZinIrOpLayer *)v49, 0);
        v74 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v51, v50, 0);
        v75 = v68 & v69 & v70;
        if (v72)
          v75 = 0;
        if ((v75 & (v73 && v74) & 1) == 0)
          ZinAssertImpl("Collapse transpose-reshape must be successful");
        v134 = off_24C01FBB0;
        if (v136 < 0)
          operator delete(v135);
        if (v123[0])
        {
          v123[1] = v123[0];
          operator delete(v123[0]);
        }
        if (++v47 == (uint64_t ***)v48)
          goto LABEL_104;
      }
      __format = "Dimorder must be set";
LABEL_172:
      ZinAssertImpl(__format);
    }
  }
LABEL_104:
  v77 = v140;
  v76 = v141;
  if (v140 != v141)
  {
    while (1)
    {
      v78 = *(_QWORD **)v77;
      v79 = *(uint64_t ***)(*(_QWORD *)v77 + 152);
      v80 = **(ZinReshapeLayer ***)(*(_QWORD *)v77 + 112);
      v81 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v77 + 32))(*(_QWORD *)v77, 0, 0);
      ZinIrTensor::GetDimensionOrderHint(v81, (uint64_t)&v134);
      if (DimensionOrderHint::IsSet((DimensionOrderHint *)&v134))
      {
        v82 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v78 + 32))(v78, 0, 0);
        ZinIrTensor::GetDimensionOrderHint(v82, (uint64_t)&__p);
      }
      else
      {
        ReshapeInfo = ZinReshapeLayer::GetReshapeInfo((ZinReshapeLayer *)v78);
        v131 = 0;
        __p = 0uLL;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, *(const void **)(ReshapeInfo + 16), *(_QWORD *)(ReshapeInfo + 24), (uint64_t)(*(_QWORD *)(ReshapeInfo + 24) - *(_QWORD *)(ReshapeInfo + 16)) >> 2);
        v132 = *(_DWORD *)(ReshapeInfo + 40);
      }
      if (v134)
      {
        v135 = v134;
        operator delete(v134);
      }
      v84 = ZinReshapeLayer::GetReshapeInfo(v80);
      DimensionOrderHint::TransposeDimensionOrder((const void **)&__p, v84 + 16, (uint64_t)&v127);
      v85 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0, 0);
      if (ZinIrTensor::HasFlexDimensionOrderHint(v85))
        goto LABEL_124;
      v86 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0, 0);
      ZinIrTensor::GetDimensionOrderHint(v86, (uint64_t)&v134);
      v87 = (int *)v127.__r_.__value_.__r.__words[0];
      if ((_BYTE *)v135 - (_BYTE *)v134 != v127.__r_.__value_.__l.__size_ - v127.__r_.__value_.__r.__words[0])
        break;
      if (v134 != v135)
      {
        v88 = (char *)v134 + 4;
        do
        {
          v89 = *v87++;
          v90 = *((_DWORD *)v88 - 1) == v89;
          v91 = *((_DWORD *)v88 - 1) != v89 || v88 == v135;
          v88 += 4;
        }
        while (!v91);
LABEL_121:
        if (!v134)
          goto LABEL_123;
LABEL_122:
        v135 = v134;
        operator delete(v134);
        goto LABEL_123;
      }
      v90 = 1;
      if (v134)
        goto LABEL_122;
LABEL_123:
      if (!v90)
        ZinAssertImpl("New reshape dimension order must match post-transpose");
LABEL_124:
      if (*((char *)v78 + 47) >= 0)
        v92 = *((unsigned __int8 *)v78 + 47);
      else
        v92 = v78[4];
      std::string::basic_string[abi:ne180100]((uint64_t)&v133, v92 + 1);
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v93 = &v133;
      else
        v93 = (std::string *)v133.__r_.__value_.__r.__words[0];
      if (v92)
      {
        if (*((char *)v78 + 47) >= 0)
          v94 = v78 + 3;
        else
          v94 = (const void *)v78[3];
        memmove(v93, v94, v92);
      }
      *(_WORD *)((char *)&v93->__r_.__value_.__l.__data_ + v92) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v126, "cancel_tr_postop");
      v95 = std::string::append(&v126, "_xfm", 4uLL);
      v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
      v148 = v95->__r_.__value_.__r.__words[2];
      v147 = v96;
      v95->__r_.__value_.__l.__size_ = 0;
      v95->__r_.__value_.__r.__words[2] = 0;
      v95->__r_.__value_.__r.__words[0] = 0;
      if (v148 >= 0)
        v97 = (const std::string::value_type *)&v147;
      else
        v97 = (const std::string::value_type *)v147;
      if (v148 >= 0)
        v98 = HIBYTE(v148);
      else
        v98 = *((_QWORD *)&v147 + 1);
      v99 = std::string::append(&v133, v97, v98);
      v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
      v146 = v99->__r_.__value_.__r.__words[2];
      v145 = v100;
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(&v134, &v145);
      if (SHIBYTE(v146) < 0)
        operator delete((void *)v145);
      if (SHIBYTE(v148) < 0)
        operator delete((void *)v147);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      v101 = v78[2];
      v102 = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)v78, 0);
      v103 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)v78, 0) + 88);
      v104 = (*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0, 0);
      v105 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v101, (uint64_t)&v134, v102 + 48, v103, (__int128 *)(v104 + 48), (const DimensionOrderHint *)&v127);
      *(_QWORD *)&v147 = v78;
      v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v147;
      v133.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v145, &v133);
      v106 = ZinIrOpLayerGraph::AddNode(v79, v105, (ZinIrOpLayer ***)&v145);
      *(_QWORD *)&v145 = &unk_24C02BB18;
      if (*((_QWORD *)&v145 + 1))
      {
        v146 = *((_QWORD *)&v145 + 1);
        operator delete(*((void **)&v145 + 1));
      }
      v107 = ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)v79, (ZinIrOpLayer *)v78, v105);
      *(_OWORD *)v123 = 0u;
      v124 = 0u;
      v125 = 1065353216;
      v108 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v79, (uint64_t **)v80, v105, v123);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v123);
      v109 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v105 + 32))(v105, 0, 0);
      v110 = ZinIrTensor::SetDimensionOrderHint(v109, (const DimensionOrderHint *)&v127, 1);
      v111 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v79, (ZinIrOpLayer *)v78, 0);
      v112 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v79, v80, 0);
      v113 = v106 & v107 & v108;
      if (v110)
        v113 = 0;
      if ((v113 & (v111 && v112) & 1) == 0)
        ZinAssertImpl("Collapse reshape-transpose must be successful");
      v134 = off_24C01FBB0;
      if (v136 < 0)
        operator delete(v135);
      if (v127.__r_.__value_.__r.__words[0])
      {
        v127.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
        operator delete(v127.__r_.__value_.__l.__data_);
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v77 += 8;
      if (v77 == v76)
        goto LABEL_164;
    }
    v90 = 0;
    goto LABEL_121;
  }
LABEL_164:
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v116, v117[0]);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)v118);
  return 0;
}

void sub_206E83F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v7 = *(_QWORD **)(v5 - 168);
  if (v7 == v4)
  {
    v8 = 4;
    v7 = (_QWORD *)(v5 - 192);
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va, (_QWORD *)v11);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C0022B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0022B0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayerGraph *v4;
  ZinIrOpLayer *v5;
  ZinIrTensor *v6;
  unint64_t Interleave;
  char v8;
  ZinIrTensor::MirInfo *v9;
  uint64_t v10;
  const ZinIrTensor **v12;
  _QWORD *v13;
  void *v14;
  uint64_t ReshapeInfo;
  int **v16;
  ZinReshapeLayer **v17;
  ZinReshapeLayer **v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t i;
  ZinIrOpLayer *v22;
  _QWORD *v23;
  _QWORD *v24;
  ZinIrRegAllocUtil *v25;
  const ZinIrTensor *v26;
  char v27;
  ZinIrRegAllocUtil *v28;
  const ZinIrTensor *v29;
  char IsPipelinable;
  uint64_t j;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  ZinIrOpLayer *v36;
  uint64_t *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  size_t v61;
  std::string *v62;
  const void *v63;
  std::string *v64;
  __int128 v65;
  void **v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  ZinReshapeLayer **v70;
  ZinReshapeLayer **v71;
  ZinReshapeLayer *v72;
  _BOOL4 v73;
  ZinIrOpLayerGraphUtil *v74;
  unint64_t *v75;
  ZinReshapeLayer **v76;
  ZinReshapeLayer **v77;
  const ZinIrTensor *v78;
  _BOOL4 v79;
  ZinIrOpLayerGraphUtil *v80;
  unint64_t *v81;
  char *v82;
  ZinReshapeLayer **v83;
  ZinReshapeLayer **v84;
  uint64_t v85;
  int **v86;
  ZinIrOpLayer *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  ZinReshapeLayer **v115;
  ZinReshapeLayer **v116;
  int v117;
  int v118;
  _BOOL4 v119;
  ZinIrOpLayerGraphUtil *v120;
  unint64_t *v121;
  ZinReshapeLayer **v122;
  ZinReshapeLayer **v123;
  _BOOL4 v124;
  ZinIrOpLayerGraphUtil *v125;
  unint64_t *v126;
  void *v127;
  uint64_t v128;
  _QWORD *v129;
  ZinIrOpLayer *v130;
  uint64_t *v131;
  uint64_t *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *size;
  std::string::size_type v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  ZinIrOpLayer **v155;
  int v156;
  ZinIrOpLayerGraph *v157;
  uint64_t **v158;
  ZinIrOpLayer *v159;
  int v160;
  ZinIrOpLayerGraphUtil *v161;
  unint64_t *v162;
  ZinIrOpLayer **v163;
  ZinIrOpLayer **k;
  uint64_t **v165;
  ZinIrOpLayer *v166;
  int v167;
  ZinIrOpLayerGraphUtil *v168;
  unint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  size_t v175;
  std::string *v176;
  const void *v177;
  std::string *v178;
  __int128 v179;
  std::string *v180;
  std::string::size_type v181;
  std::string *v182;
  __int128 v183;
  ZinIrTensor *v184;
  std::__shared_weak_count *v185;
  unint64_t *p_shared_owners;
  unint64_t v187;
  ZinIrTensor::MirInfo *v188;
  ZinIrOpLayer *v189;
  unint64_t *v190;
  unint64_t v191;
  size_t v192;
  std::string *v193;
  const void *v194;
  std::string *v195;
  __int128 v196;
  std::string *v197;
  std::string::size_type v198;
  std::string *v199;
  __int128 v200;
  ZinIrOpLayer *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  ZinIrTensor *v205;
  ZinIrTensor *v206;
  ZinIrTensor *v207;
  uint64_t v208;
  BOOL v209;
  char v210;
  char *v211;
  char *v212;
  char v213;
  ZinReshapeLayer **v214;
  ZinReshapeLayer **v215;
  const char *v216;
  ZinReshapeLayer *v217;
  ZinReshapeLayer **v218;
  ZinReshapeLayer *v219;
  ZinIrTensor *v220;
  ZinIrTensor *v221;
  uint64_t v222;
  ZinIrTensor::MirInfo *v223;
  ZinIrTensor *v224;
  BOOL v225;
  std::__shared_weak_count *v226;
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  ZinIrOpLayerGraph *v232;
  uint64_t v233;
  ZinReshapeLayer **v234;
  void *v235;
  void *v236;
  uint64_t v237;
  ZinIrOpLayer *v238;
  std::string v239;
  void *v240[2];
  char *v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  ZinIrTensor::MirInfo *v246;
  std::string v247;
  std::string v248;
  std::string v249;
  __int128 v250;
  void *v251[2];
  __int128 v252;
  uint64_t v253;
  void *v254[2];
  void *__p[2];
  int v256;
  void *v257[2];
  char *v258;
  std::string v259;
  uint8_t buf[16];
  __int128 v261;
  int v262;
  char v263;
  uint64_t v264;

  v264 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  v238 = v5;
  if (!ZinIrOpLayer::IsANELayer(v5))
    return 0;
  v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
  Interleave = ZinIrTensor::GetInterleave(v6);
  if (v8)
  {
    if (Interleave >= 2)
      goto LABEL_10;
    return 0;
  }
  v9 = *(ZinIrTensor::MirInfo **)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0)+ 104);
  if (v9 && (*((_DWORD *)v9 + 24) || ZinIrTensor::MirInfo::HasCustomStrides(v9)))
    return 0;
LABEL_10:
  v12 = *(const ZinIrTensor ***)(a1 + 8);
  v13 = *(_QWORD **)(a1 + 16);
  v233 = a1;
  MirOpt::FindSurroundingTransposes(v5, (char **)v251);
  v14 = v251[0];
  v232 = v4;
  if ((void *)((char *)v251[1] - (char *)v251[0]) >= (void *)0x10)
  {
    ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*(ZinReshapeLayer **)v251[0]);
    v16 = (int **)(ReshapeInfo + 16);
    v17 = (ZinReshapeLayer **)v251[0];
    v18 = (ZinReshapeLayer **)v251[1];
    while (v17 != v18)
    {
      if (!MirOpt::IsMatchingDimensionTranspose(*v17, (uint64_t)v16))
        goto LABEL_138;
      ++v17;
    }
    if ((!ZinIrOpLayer::IsANELayer(v238)
       || (*(unsigned int (**)(ZinIrOpLayer *, int **))(*(_QWORD *)v238 + 424))(v238, v16))
      && (int)((double)(unint64_t)(((uint64_t)(*((_QWORD *)v238 + 15) - *((_QWORD *)v238 + 14)) >> 3)
                                        + ((uint64_t)(*((_QWORD *)v238 + 12) - *((_QWORD *)v238 + 11)) >> 3))
             * 0.5) <= (unint64_t)(((char *)v251[1] - (char *)v251[0]) >> 3))
    {
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v13, &v238))goto LABEL_25;
      v19 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v13, &v238);
      if (!v19)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)buf, (uint64_t)(v19 + 3));
      ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)v254, (uint64_t)v16);
      v20 = ZinIrTransposeInfo::operator==((uint64_t)buf, (uint64_t)v254);
      v254[0] = &unk_24C01E1F0;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v254);
      *(_QWORD *)buf = &unk_24C01E1F0;
      if ((_QWORD)v261)
      {
        *((_QWORD *)&v261 + 1) = v261;
        operator delete((void *)v261);
      }
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)buf);
      if (!v20)
      {
LABEL_25:
        for (i = *((_QWORD *)v238 + 11); i != *((_QWORD *)v238 + 12); i += 8)
        {
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 64) + 8) == 37
            && *(_QWORD *)(*(_QWORD *)i + 120) - *(_QWORD *)(*(_QWORD *)i + 112) > 8uLL)
          {
            goto LABEL_138;
          }
        }
        if (!ZinIrTransposeUnit::IsCWTranspose(v16))
        {
          v22 = v238;
          v23 = (_QWORD *)*((_QWORD *)v238 + 11);
          v24 = (_QWORD *)*((_QWORD *)v238 + 12);
          if (v23 == v24)
          {
LABEL_35:
            v28 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0, 0);
            v29 = *v12;
            buf[0] = 0;
            v263 = 0;
            IsPipelinable = ZinIrRegAllocUtil::IsPipelinable(v28, v29, (ZinTensorFamilyUtil *)buf);
            std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
            if ((IsPipelinable & 1) == 0)
            {
              for (j = *((_QWORD *)v238 + 14); j != *((_QWORD *)v238 + 15); j += 8)
              {
                if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)j + 64) + 8) == 7)
                  goto LABEL_138;
              }
              if (!ZinIrOpLayer::IsPELayer(v238)
                || !ZinIrTransposeUnit::HasDimension((uint64_t)v16, 3)
                || ((*(void (**)(void **__return_ptr))(*(_QWORD *)v238 + 400))(v254),
                    TransposeLayerUtils::GetTransposedDims(v254, (uint64_t)v16, (int64x2_t *)buf),
                    (_QWORD)v261 != 1))
              {
                v32 = *(int **)(ReshapeInfo + 16);
                v33 = *(int **)(ReshapeInfo + 24);
                while (v32 != v33)
                {
                  v34 = *v32;
                  v35 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v238 + 32))(v238, 0, 0);
                  if (ZinIrTensor::GetDimensionValue(v35, v34) == 1)
                    goto LABEL_138;
                  v32 += 2;
                }
                v254[0] = 0;
                v254[1] = 0;
                __p[0] = 0;
                v240[0] = 0;
                v240[1] = 0;
                v241 = 0;
                v36 = v238;
                v37 = (uint64_t *)*((_QWORD *)v238 + 11);
                v38 = (uint64_t *)*((_QWORD *)v238 + 12);
                if (v37 != v38)
                {
                  v39 = 0;
                  do
                  {
                    v40 = *v37;
                    if (v39 >= __p[0])
                    {
                      v41 = (v39 - (char *)v254[0]) >> 3;
                      if ((unint64_t)(v41 + 1) >> 61)
LABEL_421:
                        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                      v42 = ((char *)__p[0] - (char *)v254[0]) >> 2;
                      if (v42 <= v41 + 1)
                        v42 = v41 + 1;
                      if ((void *)((char *)__p[0] - (char *)v254[0]) >= (void *)0x7FFFFFFFFFFFFFF8)
                        v43 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v43 = v42;
                      if (v43)
                        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)__p, v43);
                      else
                        v44 = 0;
                      v45 = &v44[8 * v41];
                      *(_QWORD *)v45 = v40;
                      v39 = v45 + 8;
                      v47 = (char *)v254[0];
                      v46 = (char *)v254[1];
                      if (v254[1] != v254[0])
                      {
                        do
                        {
                          v48 = *((_QWORD *)v46 - 1);
                          v46 -= 8;
                          *((_QWORD *)v45 - 1) = v48;
                          v45 -= 8;
                        }
                        while (v46 != v47);
                        v46 = (char *)v254[0];
                      }
                      v254[0] = v45;
                      v254[1] = v39;
                      __p[0] = &v44[8 * v43];
                      if (v46)
                        operator delete(v46);
                    }
                    else
                    {
                      *(_QWORD *)v39 = v40;
                      v39 += 8;
                    }
                    v254[1] = v39;
                    ++v37;
                  }
                  while (v37 != v38);
                  v36 = v238;
                }
                v49 = (uint64_t *)*((_QWORD *)v36 + 14);
                v50 = (uint64_t *)*((_QWORD *)v36 + 15);
                if (v49 != v50)
                {
                  v51 = (char *)v240[1];
                  do
                  {
                    v52 = *v49;
                    if (v51 >= v241)
                    {
                      v53 = (v51 - (char *)v240[0]) >> 3;
                      if ((unint64_t)(v53 + 1) >> 61)
                        goto LABEL_421;
                      v54 = (v241 - (char *)v240[0]) >> 2;
                      if (v54 <= v53 + 1)
                        v54 = v53 + 1;
                      if ((unint64_t)(v241 - (char *)v240[0]) >= 0x7FFFFFFFFFFFFFF8)
                        v55 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v55 = v54;
                      if (v55)
                        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v241, v55);
                      else
                        v56 = 0;
                      v57 = &v56[8 * v53];
                      *(_QWORD *)v57 = v52;
                      v51 = v57 + 8;
                      v59 = (char *)v240[0];
                      v58 = (char *)v240[1];
                      if (v240[1] != v240[0])
                      {
                        do
                        {
                          v60 = *((_QWORD *)v58 - 1);
                          v58 -= 8;
                          *((_QWORD *)v57 - 1) = v60;
                          v57 -= 8;
                        }
                        while (v58 != v59);
                        v58 = (char *)v240[0];
                      }
                      v240[0] = v57;
                      v240[1] = v51;
                      v241 = &v56[8 * v55];
                      if (v58)
                        operator delete(v58);
                    }
                    else
                    {
                      *(_QWORD *)v51 = v52;
                      v51 += 8;
                    }
                    v240[1] = v51;
                    ++v49;
                  }
                  while (v49 != v50);
                  v36 = v238;
                }
                if (*((char *)v36 + 47) >= 0)
                  v61 = *((unsigned __int8 *)v36 + 47);
                else
                  v61 = *((_QWORD *)v36 + 4);
                std::string::basic_string[abi:ne180100]((uint64_t)&v259, v61 + 1);
                if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v62 = &v259;
                else
                  v62 = (std::string *)v259.__r_.__value_.__r.__words[0];
                if (v61)
                {
                  if (*((char *)v36 + 47) >= 0)
                    v63 = (char *)v36 + 24;
                  else
                    v63 = (const void *)*((_QWORD *)v36 + 3);
                  memmove(v62, v63, v61);
                }
                *(_WORD *)((char *)&v62->__r_.__value_.__l.__data_ + v61) = 95;
                std::string::basic_string[abi:ne180100]<0>(&v249, "cancel_tr_insert");
                v64 = std::string::append(&v249, "_xfm", 4uLL);
                v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
                v258 = (char *)v64->__r_.__value_.__r.__words[2];
                *(_OWORD *)v257 = v65;
                v64->__r_.__value_.__l.__size_ = 0;
                v64->__r_.__value_.__r.__words[2] = 0;
                v64->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v258) >= 0)
                  v66 = v257;
                else
                  v66 = (void **)v257[0];
                if (SHIBYTE(v258) >= 0)
                  v67 = HIBYTE(v258);
                else
                  v67 = (std::string::size_type)v257[1];
                v68 = std::string::append(&v259, (const std::string::value_type *)v66, v67);
                v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
                v239.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v69;
                v68->__r_.__value_.__l.__size_ = 0;
                v68->__r_.__value_.__r.__words[2] = 0;
                v68->__r_.__value_.__r.__words[0] = 0;
                ZinObjectNameFactory::ZinObjectNameFactory(buf, &v239);
                if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v239.__r_.__value_.__l.__data_);
                if (SHIBYTE(v258) < 0)
                  operator delete(v257[0]);
                if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v249.__r_.__value_.__l.__data_);
                if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v259.__r_.__value_.__l.__data_);
                v70 = (ZinReshapeLayer **)v254[0];
                v71 = (ZinReshapeLayer **)v254[1];
                while (v70 != v71)
                {
                  v72 = *v70;
                  v73 = *(_DWORD *)(*((_QWORD *)*v70 + 8) + 8) == 37
                     && MirOpt::IsMatchingDimensionTranspose(*v70, (uint64_t)v16);
                  v239.__r_.__value_.__r.__words[0] = 0;
                  v74 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0, 0);
                  if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v74, v238, (const ZinIrOpLayer *)&v239, v75) & 1) == 0)
                    ZinAssertImpl("Incoming and current should be connected");
                  if (((v73 | MirOpt::IsInvariantInputToTranspose(v238, (uint64_t)v239.__r_.__value_.__l.__data_, v16)) & 1) == 0
                    && (MirOpt::InsertSymmetricTransposes(*((uint64_t ***)v238 + 19), v238, (uint64_t)v239.__r_.__value_.__l.__data_, (uint64_t)buf, (uint64_t)v16) & 1) == 0)
                  {
                    ZinAssertImpl("Inserting symmetric transposes must be successful");
                  }
                  ++v70;
                }
                v76 = (ZinReshapeLayer **)v240[0];
                v77 = (ZinReshapeLayer **)v240[1];
                while (v76 != v77)
                {
                  v78 = *v76;
                  v79 = *(_DWORD *)(*((_QWORD *)*v76 + 8) + 8) == 37
                     && MirOpt::IsMatchingDimensionTranspose(*v76, (uint64_t)v16);
                  v239.__r_.__value_.__r.__words[0] = 0;
                  v80 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v238 + 32))(v238, 0, 0);
                  if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v80, v78, (const ZinIrOpLayer *)&v239, v81) & 1) == 0)
                    ZinAssertImpl("Incoming and current should be connected");
                  if (((v79 | MirOpt::IsInvariantInputToTranspose(v78, (uint64_t)v239.__r_.__value_.__l.__data_, v16)) & 1) == 0
                    && (MirOpt::InsertSymmetricTransposes(*((uint64_t ***)v238 + 19), v78, (uint64_t)v239.__r_.__value_.__l.__data_, (uint64_t)buf, (uint64_t)v16) & 1) == 0)
                  {
                    ZinAssertImpl("Inserting symmetric transposes must be successful");
                  }
                  ++v76;
                }
                v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&v238;
                v82 = (char *)(std::__hash_table<std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v13, &v238, (uint64_t)&std::piecewise_construct, &v239)+ 3);
                if (v82 != (char *)v16)
                  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v82, *(char **)(ReshapeInfo + 16), *(_QWORD *)(ReshapeInfo + 24), (uint64_t)(*(_QWORD *)(ReshapeInfo + 24) - *(_QWORD *)(ReshapeInfo + 16)) >> 3);
                *(_QWORD *)buf = off_24C01FBB0;
                if (SHIBYTE(v261) < 0)
                  operator delete(*(void **)&buf[8]);
                if (v240[0])
                {
                  v240[1] = v240[0];
                  operator delete(v240[0]);
                }
                if (v254[0])
                {
                  v254[1] = v254[0];
                  operator delete(v254[0]);
                }
              }
            }
          }
          else
          {
            while (1)
            {
              v25 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v23 + 32))(*v23, 0, 0);
              v26 = *v12;
              buf[0] = 0;
              v263 = 0;
              v27 = ZinIrRegAllocUtil::IsPipelinable(v25, v26, (ZinTensorFamilyUtil *)buf);
              std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
              if ((v27 & 1) != 0)
                break;
              if (++v23 == v24)
              {
                v22 = v238;
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
LABEL_138:
    v14 = v251[0];
  }
  if (v14)
  {
    v251[1] = v14;
    operator delete(v14);
  }
  v235 = 0;
  v236 = 0;
  v237 = 0;
  MirOpt::FindSurroundingTransposes(v238, (char **)v240);
  v83 = (ZinReshapeLayer **)v240[0];
  v84 = (ZinReshapeLayer **)v240[1];
  if (v240[0] == v240[1])
    goto LABEL_214;
  v234 = (ZinReshapeLayer **)v240[1];
  while (1)
  {
    v85 = ZinReshapeLayer::GetReshapeInfo(*v83);
    v86 = (int **)(v85 + 16);
    if ((*(unsigned int (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v238 + 424))(v238, v85 + 16))
      break;
LABEL_209:
    if (++v83 == v84)
      goto LABEL_213;
  }
  v87 = v238;
  memset(buf, 0, sizeof(buf));
  *(_QWORD *)&v261 = 0;
  v254[0] = 0;
  v254[1] = 0;
  __p[0] = 0;
  v251[1] = 0;
  *(_QWORD *)&v252 = 0;
  v251[0] = &v251[1];
  v88 = (_QWORD *)*((_QWORD *)v238 + 11);
  v89 = (_QWORD *)*((_QWORD *)v238 + 12);
  while (v88 != v89)
  {
    v90 = (_QWORD *)*v88;
    v91 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8] >= (unint64_t)v261)
    {
      v93 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
      if ((unint64_t)(v93 + 1) >> 61)
LABEL_406:
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v94 = (uint64_t)(v261 - *(_QWORD *)buf) >> 2;
      if (v94 <= v93 + 1)
        v94 = v93 + 1;
      if ((_QWORD)v261 - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
        v95 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v95 = v94;
      if (v95)
        v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v261, v95);
      else
        v96 = 0;
      v97 = &v96[8 * v93];
      *(_QWORD *)v97 = v90;
      v92 = v97 + 8;
      v99 = *(char **)buf;
      v98 = *(char **)&buf[8];
      if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
      {
        do
        {
          v100 = *((_QWORD *)v98 - 1);
          v98 -= 8;
          *((_QWORD *)v97 - 1) = v100;
          v97 -= 8;
        }
        while (v98 != v99);
        v98 = *(char **)buf;
      }
      *(_QWORD *)buf = v97;
      *(_QWORD *)&buf[8] = v92;
      *(_QWORD *)&v261 = &v96[8 * v95];
      if (v98)
        operator delete(v98);
    }
    else
    {
      **(_QWORD **)&buf[8] = v90;
      v92 = (_QWORD *)(v91 + 8);
    }
    *(_QWORD *)&buf[8] = v92;
    if (*(_DWORD *)(v90[8] + 8) == 37)
    {
      v102 = (unint64_t *)v90[14];
      v101 = (unint64_t *)v90[15];
      while (v102 != v101)
      {
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)v251, v102, (uint64_t *)v102);
        ++v102;
      }
    }
    ++v88;
  }
  v103 = (uint64_t *)*((_QWORD *)v87 + 14);
  v104 = (uint64_t *)*((_QWORD *)v87 + 15);
  if (v103 != v104)
  {
    v105 = (char *)v254[1];
    do
    {
      v106 = *v103;
      if (v105 >= __p[0])
      {
        v107 = (v105 - (char *)v254[0]) >> 3;
        if ((unint64_t)(v107 + 1) >> 61)
          goto LABEL_406;
        v108 = ((char *)__p[0] - (char *)v254[0]) >> 2;
        if (v108 <= v107 + 1)
          v108 = v107 + 1;
        if ((void *)((char *)__p[0] - (char *)v254[0]) >= (void *)0x7FFFFFFFFFFFFFF8)
          v109 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v109 = v108;
        if (v109)
          v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)__p, v109);
        else
          v110 = 0;
        v111 = &v110[8 * v107];
        *(_QWORD *)v111 = v106;
        v105 = v111 + 8;
        v113 = (char *)v254[0];
        v112 = (char *)v254[1];
        if (v254[1] != v254[0])
        {
          do
          {
            v114 = *((_QWORD *)v112 - 1);
            v112 -= 8;
            *((_QWORD *)v111 - 1) = v114;
            v111 -= 8;
          }
          while (v112 != v113);
          v112 = (char *)v254[0];
        }
        v254[0] = v111;
        v254[1] = v105;
        __p[0] = &v110[8 * v109];
        if (v112)
          operator delete(v112);
      }
      else
      {
        *(_QWORD *)v105 = v106;
        v105 += 8;
      }
      v254[1] = v105;
      ++v103;
    }
    while (v103 != v104);
  }
  v116 = *(ZinReshapeLayer ***)buf;
  v115 = *(ZinReshapeLayer ***)&buf[8];
  if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
    goto LABEL_203;
  v117 = 0;
  if (v254[1] == v254[0] || (unint64_t)v252 > 1)
    goto LABEL_204;
  v118 = 1;
  do
  {
    v119 = *(_DWORD *)(*((_QWORD *)*v116 + 8) + 8) == 37 && MirOpt::IsMatchingDimensionTranspose(*v116, (uint64_t)v86);
    v239.__r_.__value_.__r.__words[0] = 0;
    v120 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)*v116
                                                                                                 + 32))(*v116, 0, 0);
    if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v120, v87, (const ZinIrOpLayer *)&v239, v121) & 1) == 0)
      ZinAssertImpl("Incoming and current should be connected");
    v118 &= v119 | MirOpt::IsInvariantInputToTranspose(v87, (uint64_t)v239.__r_.__value_.__l.__data_, v86);
    ++v116;
  }
  while (v116 != v115);
  if ((v118 & 1) == 0)
  {
LABEL_203:
    v117 = 0;
    goto LABEL_204;
  }
  v122 = (ZinReshapeLayer **)v254[0];
  v123 = (ZinReshapeLayer **)v254[1];
  v117 = 1;
  while (v122 != v123)
  {
    v124 = *(_DWORD *)(*((_QWORD *)*v122 + 8) + 8) == 37 && MirOpt::IsMatchingDimensionTranspose(*v122, (uint64_t)v86);
    v239.__r_.__value_.__r.__words[0] = 0;
    v125 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0, 0);
    if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v125, *v122, (const ZinIrOpLayer *)&v239, v126) & 1) == 0)
      ZinAssertImpl("Incoming and current should be connected");
    v117 &= v124 | MirOpt::IsInvariantInputToTranspose(*v122++, (uint64_t)v239.__r_.__value_.__l.__data_, v86);
  }
LABEL_204:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v251, (_QWORD *)v251[1]);
  if (v254[0])
  {
    v254[1] = v254[0];
    operator delete(v254[0]);
  }
  v84 = v234;
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  if (!v117)
    goto LABEL_209;
  if (&v235 != (void **)v86)
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v235, *(char **)(v85 + 16), *(_QWORD *)(v85 + 24), (uint64_t)(*(_QWORD *)(v85 + 24) - *(_QWORD *)(v85 + 16)) >> 3);
LABEL_213:
  v83 = (ZinReshapeLayer **)v240[0];
LABEL_214:
  if (v83)
  {
    v240[1] = v83;
    operator delete(v83);
  }
  v127 = v236;
  if (v236 == v235)
  {
    v10 = 0;
    if (v236)
      goto LABEL_405;
  }
  else
  {
    v129 = *(_QWORD **)(v233 + 16);
    v128 = *(_QWORD *)(v233 + 24);
    memset(&v259, 0, sizeof(v259));
    v257[0] = 0;
    v257[1] = 0;
    v258 = 0;
    v130 = v238;
    v131 = (uint64_t *)*((_QWORD *)v238 + 11);
    v132 = (uint64_t *)*((_QWORD *)v238 + 12);
    if (v131 == v132)
    {
      v133 = 0;
    }
    else
    {
      v133 = 0;
      do
      {
        v134 = *v131;
        if ((unint64_t)v133 >= v259.__r_.__value_.__r.__words[2])
        {
          v135 = (uint64_t)((uint64_t)v133 - v259.__r_.__value_.__r.__words[0]) >> 3;
          if ((unint64_t)(v135 + 1) >> 61)
LABEL_409:
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v136 = (uint64_t)(v259.__r_.__value_.__r.__words[2] - v259.__r_.__value_.__r.__words[0]) >> 2;
          if (v136 <= v135 + 1)
            v136 = v135 + 1;
          if (v259.__r_.__value_.__r.__words[2] - v259.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
            v137 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v137 = v136;
          if (v137)
            v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v259.__r_.__value_.__r.__words[2], v137);
          else
            v138 = 0;
          v139 = &v138[8 * v135];
          *(_QWORD *)v139 = v134;
          v133 = v139 + 8;
          size = (char *)v259.__r_.__value_.__l.__size_;
          v141 = v259.__r_.__value_.__r.__words[0];
          if (v259.__r_.__value_.__l.__size_ != v259.__r_.__value_.__r.__words[0])
          {
            do
            {
              v142 = *((_QWORD *)size - 1);
              size -= 8;
              *((_QWORD *)v139 - 1) = v142;
              v139 -= 8;
            }
            while (size != (char *)v141);
            size = (char *)v259.__r_.__value_.__r.__words[0];
          }
          v259.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
          v259.__r_.__value_.__l.__size_ = (std::string::size_type)v133;
          v259.__r_.__value_.__r.__words[2] = (std::string::size_type)&v138[8 * v137];
          if (size)
            operator delete(size);
        }
        else
        {
          *v133++ = v134;
        }
        v259.__r_.__value_.__l.__size_ = (std::string::size_type)v133;
        ++v131;
      }
      while (v131 != v132);
      v130 = v238;
    }
    v143 = (uint64_t *)*((_QWORD *)v130 + 14);
    v144 = (uint64_t *)*((_QWORD *)v130 + 15);
    if (v143 != v144)
    {
      v145 = (char *)v257[1];
      do
      {
        v146 = *v143;
        if (v145 >= v258)
        {
          v147 = (v145 - (char *)v257[0]) >> 3;
          if ((unint64_t)(v147 + 1) >> 61)
            goto LABEL_409;
          v148 = (v258 - (char *)v257[0]) >> 2;
          if (v148 <= v147 + 1)
            v148 = v147 + 1;
          if ((unint64_t)(v258 - (char *)v257[0]) >= 0x7FFFFFFFFFFFFFF8)
            v149 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v149 = v148;
          if (v149)
            v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v258, v149);
          else
            v150 = 0;
          v151 = &v150[8 * v147];
          *(_QWORD *)v151 = v146;
          v145 = v151 + 8;
          v153 = (char *)v257[0];
          v152 = (char *)v257[1];
          if (v257[1] != v257[0])
          {
            do
            {
              v154 = *((_QWORD *)v152 - 1);
              v152 -= 8;
              *((_QWORD *)v151 - 1) = v154;
              v151 -= 8;
            }
            while (v152 != v153);
            v152 = (char *)v257[0];
          }
          v257[0] = v151;
          v257[1] = v145;
          v258 = &v150[8 * v149];
          if (v152)
            operator delete(v152);
        }
        else
        {
          *(_QWORD *)v145 = v146;
          v145 += 8;
        }
        v257[1] = v145;
        ++v143;
      }
      while (v143 != v144);
      v133 = (_QWORD *)v259.__r_.__value_.__l.__size_;
    }
    v155 = (ZinIrOpLayer **)v259.__r_.__value_.__r.__words[0];
    v156 = 1;
    if (v259.__r_.__value_.__l.__data_ != (std::string::pointer)v133)
    {
      v157 = v232;
      while (1)
      {
        if (*(_DWORD *)(*((_QWORD *)*v155 + 8) + 8) == 37
          && MirOpt::IsMatchingDimensionTranspose(*v155, (uint64_t)&v235))
        {
          v158 = (uint64_t **)*v155;
          v159 = (ZinIrOpLayer *)**((_QWORD **)*v155 + 11);
          *(_OWORD *)buf = 0u;
          v261 = 0u;
          v262 = 1065353216;
          v160 = ZinIrOpLayerGraph::MoveOutgoingEdges(v232, v158, v159, buf);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)buf);
          v156 &= v160 & ZinIrOpLayerGraph::RemoveNode(v232, *v155, 1);
        }
        else
        {
          v254[0] = 0;
          v161 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*v155 + 32))(*v155, 0, 0);
          if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v161, v238, (const ZinIrOpLayer *)v254, v162) & 1) == 0)
            ZinAssertImpl("Incoming and current should be connected");
          if (!MirOpt::IsInvariantInputToTranspose(v238, (uint64_t)v254[0], (int **)&v235))
          {
LABEL_386:
            v213 = 0;
            v227 = v233;
            goto LABEL_387;
          }
        }
        if (++v155 == v133)
          goto LABEL_270;
      }
    }
    v157 = v232;
LABEL_270:
    v163 = (ZinIrOpLayer **)v257[0];
    for (k = (ZinIrOpLayer **)v257[1]; v163 != k; ++v163)
    {
      if (*(_DWORD *)(*((_QWORD *)*v163 + 8) + 8) == 37
        && MirOpt::IsMatchingDimensionTranspose(*v163, (uint64_t)&v235))
      {
        v165 = (uint64_t **)*v163;
        v166 = (ZinIrOpLayer *)**((_QWORD **)*v163 + 11);
        *(_OWORD *)v254 = 0u;
        *(_OWORD *)__p = 0u;
        v256 = 1065353216;
        v167 = ZinIrOpLayerGraph::MoveOutgoingEdges(v157, v165, v166, v254);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v254);
        v156 &= v167 & ZinIrOpLayerGraph::RemoveNode(v157, *v163, 1);
      }
      else
      {
        v251[0] = 0;
        v168 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v238
                                                                                                  + 32))(v238, 0, 0);
        if ((ZinIrOpLayerGraphUtil::GetIncomingIndex(v168, *v163, (const ZinIrOpLayer *)v251, v169) & 1) == 0)
          ZinAssertImpl("Incoming and current should be connected");
        if (!MirOpt::IsInvariantInputToTranspose(*v163, (uint64_t)v251[0], (int **)&v235))
          goto LABEL_386;
      }
    }
    *(int64x2_t *)v251 = vdupq_n_s64(1uLL);
    v252 = *(_OWORD *)v251;
    v253 = 1;
    v170 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v238 + 32))(v238, 0, 0);
    ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>((_QWORD *)(v170 + 48), (uint64_t)&v235, v251);
    v171 = *((_QWORD *)v238 + 2);
    v172 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v238 + 32))(v238, 0, 0)+ 88);
    v173 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v238 + 32))(v238, 0, 0);
    v174 = v173;
    if (*(char *)(v173 + 47) >= 0)
      v175 = *(unsigned __int8 *)(v173 + 47);
    else
      v175 = *(_QWORD *)(v173 + 32);
    std::string::basic_string[abi:ne180100]((uint64_t)&v249, v175 + 1);
    if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v176 = &v249;
    else
      v176 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if (v175)
    {
      if (*(char *)(v174 + 47) >= 0)
        v177 = (const void *)(v174 + 24);
      else
        v177 = *(const void **)(v174 + 24);
      memmove(v176, v177, v175);
    }
    *(_WORD *)((char *)&v176->__r_.__value_.__l.__data_ + v175) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v247, "cancel_tr");
    v178 = std::string::append(&v247, "_xfm", 4uLL);
    v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
    v248.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v179;
    v178->__r_.__value_.__l.__size_ = 0;
    v178->__r_.__value_.__r.__words[2] = 0;
    v178->__r_.__value_.__r.__words[0] = 0;
    if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v180 = &v248;
    else
      v180 = (std::string *)v248.__r_.__value_.__r.__words[0];
    if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v181 = HIBYTE(v248.__r_.__value_.__r.__words[2]);
    else
      v181 = v248.__r_.__value_.__l.__size_;
    v182 = std::string::append(&v249, (const std::string::value_type *)v180, v181);
    v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
    v239.__r_.__value_.__r.__words[2] = v182->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v183;
    v182->__r_.__value_.__l.__size_ = 0;
    v182->__r_.__value_.__r.__words[2] = 0;
    v182->__r_.__value_.__r.__words[0] = 0;
    v184 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v238 + 32))(v238, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v184, &v246);
    v244 = 0;
    v245 = 0;
    LODWORD(v240[0]) = 0;
    v241 = 0;
    v242 = 0;
    v240[1] = 0;
    v243 = 0;
    ZinIrTensor::CreateTensor(v171, v172, (__int128 *)v251, (__int128 *)&v239, &v246, &v244, (unsigned int *)v240, (uint64_t *)&v250);
    v185 = v245;
    if (v245)
    {
      p_shared_owners = (unint64_t *)&v245->__shared_owners_;
      do
        v187 = __ldaxr(p_shared_owners);
      while (__stlxr(v187 - 1, p_shared_owners));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    v188 = v246;
    v246 = 0;
    if (v188)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v246, v188);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v248.__r_.__value_.__l.__data_);
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v247.__r_.__value_.__l.__data_);
    if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v249.__r_.__value_.__l.__data_);
    v189 = v238;
    *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v250;
    if (*((_QWORD *)&v250 + 1))
    {
      v190 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
      do
        v191 = __ldxr(v190);
      while (__stxr(v191 + 1, v190));
    }
    if (*((char *)v189 + 47) >= 0)
      v192 = *((unsigned __int8 *)v189 + 47);
    else
      v192 = *((_QWORD *)v189 + 4);
    std::string::basic_string[abi:ne180100]((uint64_t)&v239, v192 + 1);
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v193 = &v239;
    else
      v193 = (std::string *)v239.__r_.__value_.__r.__words[0];
    if (v192)
    {
      if (*((char *)v189 + 47) >= 0)
        v194 = (char *)v189 + 24;
      else
        v194 = (const void *)*((_QWORD *)v189 + 3);
      memmove(v193, v194, v192);
    }
    *(_WORD *)((char *)&v193->__r_.__value_.__l.__data_ + v192) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v248, "cancel_tr");
    v195 = std::string::append(&v248, "_xfm", 4uLL);
    v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
    v249.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v196;
    v195->__r_.__value_.__l.__size_ = 0;
    v195->__r_.__value_.__r.__words[2] = 0;
    v195->__r_.__value_.__r.__words[0] = 0;
    if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v197 = &v249;
    else
      v197 = (std::string *)v249.__r_.__value_.__r.__words[0];
    if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v198 = HIBYTE(v249.__r_.__value_.__r.__words[2]);
    else
      v198 = v249.__r_.__value_.__l.__size_;
    v199 = std::string::append(&v239, (const std::string::value_type *)v197, v198);
    v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
    v241 = (char *)v199->__r_.__value_.__r.__words[2];
    *(_OWORD *)v240 = v200;
    v199->__r_.__value_.__l.__size_ = 0;
    v199->__r_.__value_.__r.__words[2] = 0;
    v199->__r_.__value_.__r.__words[0] = 0;
    v201 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinIrOpLayer *, void **, std::string *, void **))(*(_QWORD *)v189 + 432))(v189, &v235, &v247, v240);
    if (SHIBYTE(v241) < 0)
      operator delete(v240[0]);
    if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v249.__r_.__value_.__l.__data_);
    if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v248.__r_.__value_.__l.__data_);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    v202 = (std::__shared_weak_count *)v247.__r_.__value_.__l.__size_;
    if (v247.__r_.__value_.__l.__size_)
    {
      v203 = (unint64_t *)(v247.__r_.__value_.__l.__size_ + 8);
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    v205 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v238 + 32))(v238, 0, 0);
    if (!ZinIrTensor::HasFlexDimensionOrderHint(v205))
    {
      v206 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v238 + 32))(v238, 0, 0);
      ZinIrTensor::GetDimensionOrderHint(v206, (uint64_t)v240);
      DimensionOrderHint::TransposeDimensionOrder((const void **)v240, (uint64_t)&v235, (uint64_t)&v239);
      v207 = (ZinIrTensor *)v250;
      v208 = *(_QWORD *)(v250 + 104);
      if (v208)
      {
        if (*(_DWORD *)(v208 + 96))
          ZinAssertImpl("Allocation hint must not be set", v232);
        if (ZinIrTensor::MirInfo::HasCustomStrides(*(ZinIrTensor::MirInfo **)(v250 + 104)))
          ZinAssertImpl("Custom strides must not be set", v232);
        ZinIrTensor::DeleteMirInfo((ZinIrTensor *)v250);
        v207 = (ZinIrTensor *)v250;
      }
      v209 = ZinIrTensor::SetDimensionOrderHint(v207, (const DimensionOrderHint *)&v239, 1) == 0;
      if (v239.__r_.__value_.__r.__words[0])
      {
        v239.__r_.__value_.__l.__size_ = v239.__r_.__value_.__r.__words[0];
        operator delete(v239.__r_.__value_.__l.__data_);
      }
      LOBYTE(v156) = v156 & v209;
      if (v240[0])
      {
        v240[1] = v240[0];
        operator delete(v240[0]);
      }
    }
    if (!v201)
      ZinAssertImpl("Transposing layer must be successful");
    v240[0] = &unk_24C02BB18;
    v240[1] = 0;
    v241 = 0;
    v242 = 0;
    v210 = ZinIrOpLayerGraph::ReplaceNode((uint64_t **)v232, v238, v201, (const Layer2TDMapper::SourceLayer *)v240);
    v240[0] = &unk_24C02BB18;
    if (v240[1])
    {
      v241 = (char *)v240[1];
      operator delete(v240[1]);
    }
    if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v129, &v238))
    {
      v211 = (char *)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v129, &v238);
      if (!v211)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v239.__r_.__value_.__r.__words[0] = (std::string::size_type)v201;
      v240[0] = &v239;
      v212 = (char *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)v129, &v239, (uint64_t)&std::piecewise_construct, (_QWORD **)v240);
      if (v212 != v211)
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v212 + 24, *((char **)v211 + 3), *((_QWORD *)v211 + 4), (uint64_t)(*((_QWORD *)v211 + 4) - *((_QWORD *)v211 + 3)) >> 3);
      std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__erase_unique<ZinIrTensor *>(v129, &v238);
    }
    if ((_QWORD *)(v128 + 8) != std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v128, (uint64_t *)&v238))std::__tree<std::__value_type<ZinIrOpLayer *,float>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,float>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,float>>>::__erase_unique<ZinIrOpLayer *>((uint64_t **)v128, (uint64_t *)&v238);
    v240[0] = v201;
    std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)v128, (uint64_t *)v240, (uint64_t *)v240);
    v213 = v156 & v210;
    v215 = (ZinReshapeLayer **)*((_QWORD *)v201 + 14);
    v214 = (ZinReshapeLayer **)*((_QWORD *)v201 + 15);
    if (v215 != v214)
    {
      v216 = "Allocation hint must not be set";
      do
      {
        v217 = *v215;
        if (*(_DWORD *)(*((_QWORD *)*v215 + 8) + 8) == 37
          && MirOpt::IsMatchingDimensionTranspose(*v215, (uint64_t)&v235))
        {
          v218 = (ZinReshapeLayer **)*((_QWORD *)v217 + 14);
          if (*((_QWORD *)v217 + 15) - (_QWORD)v218 == 8)
          {
            v219 = *v218;
            if (*(_DWORD *)(*((_QWORD *)*v218 + 8) + 8) == 35
              && *((_QWORD *)v219 + 12) - *((_QWORD *)v219 + 11) == 8)
            {
              v220 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v219 + 32))(v219, 0, 0);
              ZinIrTensor::GetDimensionOrderHint(v220, (uint64_t)&v239);
              if (DimensionOrderHint::IsSet((DimensionOrderHint *)&v239))
              {
                v221 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v219 + 32))(v219, 0, 0);
                ZinIrTensor::GetDimensionOrderHint(v221, (uint64_t)v240);
              }
              else
              {
                v222 = ZinReshapeLayer::GetReshapeInfo(v219);
                v240[1] = 0;
                v241 = 0;
                v240[0] = 0;
                std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v240, *(const void **)(v222 + 16), *(_QWORD *)(v222 + 24), (uint64_t)(*(_QWORD *)(v222 + 24) - *(_QWORD *)(v222 + 16)) >> 2);
                LODWORD(v242) = *(_DWORD *)(v222 + 40);
              }
              if (v239.__r_.__value_.__r.__words[0])
              {
                v239.__r_.__value_.__l.__size_ = v239.__r_.__value_.__r.__words[0];
                operator delete(v239.__r_.__value_.__l.__data_);
              }
              v223 = *(ZinIrTensor::MirInfo **)(v250 + 104);
              if (v223)
              {
                if (*((_DWORD *)v223 + 24))
                  goto LABEL_415;
                if (ZinIrTensor::MirInfo::HasCustomStrides(v223))
                {
                  v216 = "Custom strides must not be set";
LABEL_415:
                  ZinAssertImpl(v216, v232);
                }
                ZinIrTensor::DeleteMirInfo((ZinIrTensor *)v250);
              }
              v224 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v219 + 32))(v219, 0, 0);
              v225 = ZinIrTensor::SetDimensionOrderHint(v224, (const DimensionOrderHint *)v240, 1) == 0;
              if (v240[0])
              {
                v240[1] = v240[0];
                operator delete(v240[0]);
              }
              v213 &= v225;
            }
          }
        }
        ++v215;
      }
      while (v215 != v214);
    }
    v226 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
    v227 = v233;
    if (*((_QWORD *)&v250 + 1))
    {
      v228 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
        std::__shared_weak_count::__release_weak(v226);
      }
    }
LABEL_387:
    if (v257[0])
    {
      v257[1] = v257[0];
      operator delete(v257[0]);
    }
    if (v259.__r_.__value_.__r.__words[0])
    {
      v259.__r_.__value_.__l.__size_ = v259.__r_.__value_.__r.__words[0];
      operator delete(v259.__r_.__value_.__l.__data_);
    }
    if ((v213 & 1) != 0)
    {
      if (**(_BYTE **)(v227 + 32) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        v230 = (_QWORD *)((char *)v238 + 24);
        if (*((char *)v238 + 47) < 0)
          v230 = (_QWORD *)*v230;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v230;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "[MirOpt::CollapseSymmetricTranspose] Successfully collapsed symmetric transpose: %s", buf, 0xCu);
      }
      v10 = 0;
    }
    else
    {
      if (**(_BYTE **)(v227 + 32) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        v231 = (_QWORD *)((char *)v238 + 24);
        if (*((char *)v238 + 47) < 0)
          v231 = (_QWORD *)*v231;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v231;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "[MirOpt::CollapseSymmetricTranspose] Failed to collapse symmetric transpose: %s", buf, 0xCu);
      }
      v10 = 3;
    }
    v127 = v235;
    if (v235)
    {
LABEL_405:
      v236 = v127;
      operator delete(v127);
    }
  }
  return v10;
}

void sub_206E85B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0,std::allocator<MirOpt::CollapseSymmetricTranspose(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void MirOpt::FindSurroundingTransposes(MirOpt *this@<X0>, char **a2@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t *)*((_QWORD *)this + 11);
  v6 = (uint64_t *)*((_QWORD *)this + 12);
  if (v5 == v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = a2 + 2;
    do
    {
      v9 = *v5;
      if (*(_DWORD *)(*(_QWORD *)(*v5 + 64) + 8) == 37)
      {
        if ((unint64_t)v7 >= *v8)
        {
          v10 = (v7 - *a2) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
LABEL_46:
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v11 = *v8 - (_QWORD)*a2;
          v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1))
            v12 = v10 + 1;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v13);
          else
            v14 = 0;
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = v9;
          v7 = v15 + 8;
          v17 = *a2;
          v16 = a2[1];
          if (v16 != *a2)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            v16 = *a2;
          }
          *a2 = v15;
          a2[1] = v7;
          a2[2] = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v7 = v9;
          v7 += 8;
        }
        a2[1] = v7;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  v19 = (uint64_t *)*((_QWORD *)this + 14);
  v20 = (uint64_t *)*((_QWORD *)this + 15);
  if (v19 != v20)
  {
    v21 = a2 + 2;
    do
    {
      v22 = *v19;
      if (*(_DWORD *)(*(_QWORD *)(*v19 + 64) + 8) == 37)
      {
        if ((unint64_t)v7 >= *v21)
        {
          v23 = (v7 - *a2) >> 3;
          if ((unint64_t)(v23 + 1) >> 61)
            goto LABEL_46;
          v24 = *v21 - (_QWORD)*a2;
          v25 = v24 >> 2;
          if (v24 >> 2 <= (unint64_t)(v23 + 1))
            v25 = v23 + 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v26);
          else
            v27 = 0;
          v28 = &v27[8 * v23];
          *(_QWORD *)v28 = v22;
          v7 = v28 + 8;
          v30 = *a2;
          v29 = a2[1];
          if (v29 != *a2)
          {
            do
            {
              v31 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *((_QWORD *)v28 - 1) = v31;
              v28 -= 8;
            }
            while (v29 != v30);
            v29 = *a2;
          }
          *a2 = v28;
          a2[1] = v7;
          a2[2] = &v27[8 * v26];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v7 = v22;
          v7 += 8;
        }
        a2[1] = v7;
      }
      ++v19;
    }
    while (v19 != v20);
  }
}

void sub_206E8622C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL MirOpt::IsMatchingDimensionTranspose(ZinReshapeLayer *a1, uint64_t a2)
{
  uint64_t ReshapeInfo;
  _BOOL8 v4;
  _QWORD v6[2];
  void *__p;
  void *v8;

  ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(a1);
  ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)v6, a2);
  v4 = ZinIrTransposeInfo::operator==(ReshapeInfo, (uint64_t)v6);
  v6[0] = &unk_24C01E1F0;
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v6);
  return v4;
}

void sub_206E862C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZinIrTransposeInfo::~ZinIrTransposeInfo((ZinIrTransposeInfo *)va);
  _Unwind_Resume(a1);
}

uint64_t MirOpt::InsertSymmetricTransposes(uint64_t **a1, ZinIrOpLayer *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char v10;
  char v11;
  ZinIrOpLayer *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrOpLayer *Transpose;
  int inserted;
  _QWORD v20[2];
  ZinIrOpLayer **v21;
  void *__p;
  void *v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x24BDAC8D0];
  LODWORD(v9) = 1;
  v10 = 1;
  do
  {
    v11 = v10;
    v12 = *(ZinIrOpLayer **)(*((_QWORD *)a2 + 11) + 8 * a3);
    v13 = *((_QWORD *)a2 + 2);
    v14 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
    v15 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
    Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v13, a4, v14 + 48, *(_DWORD *)(v15 + 88), a5);
    v24[0] = a2;
    v20[0] = v24;
    v20[1] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v21, v20);
    inserted = ZinIrOpLayerGraph::InsertNodeBetween(a1, Transpose, v12, a2, &v21);
    v21 = (ZinIrOpLayer **)&unk_24C02BB18;
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    v10 = 0;
    v9 = v9 & inserted;
  }
  while ((v11 & 1) != 0);
  return v9;
}

void sub_206E8642C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinReshapeLayer::ZinReshapeLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C01B260;
  return a1;
}

void sub_206E8654C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinReshapeLayer::CreateDecomposedLayers(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  ZinIrOpLayer *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrOpLayer *Reshape;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t result;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  char v31;
  uint64_t *v32;
  ZinIrTensor *v33;
  int v34;
  ZinIrTensor::MirInfo *v35;
  int v36;
  unsigned int v37;
  _QWORD v40[4];
  int v41;
  ZinIrTensor::MirInfo *v42;
  ZinIrOpLayer **v43;
  void *v44;
  void *v45;
  void *v46;
  void *__p;
  void *v48;
  int v49;
  uint64_t **v50;
  _QWORD v51[4];

  v51[2] = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  if (a4[1] == *a4)
  {
    Reshape = 0;
    v11 = 1;
  }
  else
  {
    v7 = a4;
    v8 = 0;
    v9 = 0;
    v10 = (ZinIrOpLayer *)*a1[11];
    v11 = 1;
    do
    {
      v12 = *(_DWORD *)(v6 + v8);
      if (v12 == 22)
      {
        v46 = 0;
        __p = 0;
        v48 = 0;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v46, *(const void **)(v6 + v8 + 16), *(_QWORD *)(v6 + v8 + 24), (uint64_t)(*(_QWORD *)(v6 + v8 + 24) - *(_QWORD *)(v6 + v8 + 16)) >> 2);
        v22 = a2;
        v49 = *(_DWORD *)(v6 + v8 + 40);
        v23 = *((_QWORD *)v10 + 2);
        v24 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
        v25 = ((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a1)[4])(a1, 0, 0);
        Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v23, a3, v24 + 48, *(_DWORD *)(v25 + 88), (__int128 *)(v6 + v8 + 128), (const DimensionOrderHint *)&v46);
        v50 = a1;
        v51[0] = &v50;
        v51[1] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v43, v51);
        v26 = ZinIrOpLayerGraph::AddNode(a2, Reshape, &v43);
        v43 = (ZinIrOpLayer **)&unk_24C02BB18;
        if (v44)
        {
          v45 = v44;
          operator delete(v44);
        }
        v27 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v10, (uint64_t)Reshape, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v28 = v6 + v8;
        if (*(uint64_t *)(v28 + 8) >= 2
          && (v29 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0), (v30 = ZinIrTensor::SetInterleave(v29, *(_QWORD *)(v28 + 8), 1, 1)) != 0))
        {
          v31 = 0;
          v37 = v30;
        }
        else
        {
          v31 = 1;
          v10 = Reshape;
        }
        if (v46)
        {
          __p = v46;
          operator delete(v46);
        }
        if ((v31 & 1) == 0)
          return v37;
        v18 = v26 & v27;
        a2 = v22;
        v7 = a4;
      }
      else
      {
        if (v12 != 21)
          ZinAssertImpl("not supported decomposed layer type for the reshape layer.");
        v13 = *((_QWORD *)v10 + 2);
        v14 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
        v15 = ((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a1)[4])(a1, 0, 0);
        Reshape = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v13, a3, v14 + 48, *(_DWORD *)(v15 + 88), v6 + v8 + 128);
        v51[0] = a1;
        v43 = (ZinIrOpLayer **)v51;
        v44 = (void *)1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v46, &v43);
        v17 = ZinIrOpLayerGraph::AddNode(a2, Reshape, (ZinIrOpLayer ***)&v46);
        v46 = &unk_24C02BB18;
        if (__p)
        {
          v48 = __p;
          operator delete(__p);
        }
        v18 = v17 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v10, (uint64_t)Reshape, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v19 = v6 + v8;
        if (*(uint64_t *)(v19 + 8) < 2)
        {
          v10 = Reshape;
        }
        else
        {
          v20 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
          result = ZinIrTensor::SetInterleave(v20, *(_QWORD *)(v19 + 8), 1, 1);
          v10 = Reshape;
          if ((_DWORD)result)
            return result;
        }
      }
      v11 &= v18;
      ++v9;
      v6 = *v7;
      v8 += 192;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 6) > v9);
    if (Reshape && *(_QWORD *)(((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a1)[4])(a1, 0, 0) + 104))
    {
      v32 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
      v33 = (ZinIrTensor *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a1)[4])(a1, 0, 0);
      ZinIrTensor::CopyTensorMirInfo(v33, &v42);
      v34 = ZinIrTensor::SetTensorMirInfo(v32, &v42);
      v35 = v42;
      v42 = 0;
      if (v35)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v42, v35);
      if (v34)
        ZinAssertImpl("Reshape layer decomposition lowering failed\n.");
    }
  }
  memset(v40, 0, sizeof(v40));
  v41 = 1065353216;
  v36 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, a1, Reshape, v40);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v40);
  if ((v11 & v36 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: Reshape layer graph manipulation error");
  return 0;
}

void sub_206E86A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  _QWORD *v27;

  v27 = a19;
  a19 = 0;
  if (v27)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a19, v27);
  _Unwind_Resume(exception_object);
}

void DimensionOrderHint::DimensionOrderHint(DimensionOrderHint *this, const DimensionOrderHint *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
}

uint64_t ZinReshapeLayer::InsertMemCopy(ZinReshapeLayer *this, uint64_t **a2, ZinObjectNameFactory *a3)
{
  ZinIrOpLayerGraph *v6;
  uint64_t v7;
  int v8;
  ZinIrOpLayer *v9;
  _QWORD *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  uint64_t result;
  _QWORD v15[2];
  ZinIrOpLayer **v16;
  void *__p;
  void *v18;
  _BYTE v19[172];
  _QWORD *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v6 = (ZinIrOpLayerGraph *)**((_QWORD **)this + 11);
  v7 = *((_QWORD *)v6 + 2);
  v8 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0)
                 + 88);
  v20 = 0;
  v19[0] = 0;
  v19[168] = 0;
  v9 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v7, (uint64_t)a3, (uint64_t)v6, v8, &v20, 0, (uint64_t)v19, 1.0);
  v10 = v20;
  v20 = 0;
  if (v10)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v20, v10);
  v21[0] = this;
  v15[0] = v21;
  v15[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v16, v15);
  v11 = ZinIrOpLayerGraph::AddNode(a2, v9, &v16);
  if (v9)
    v12 = v11;
  else
    v12 = 0;
  v16 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  v13 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v6, (uint64_t)v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  result = ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a2, v6, v9, (uint64_t)this, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  if ((v12 & v13 & result & 1) == 0)
    ZinAssertImpl("ANE internal failure: Inserting mem copy failed.");
  return result;
}

void sub_206E86C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayer::ReplaceWithCompatibleDimensionOrderReshape(ZinReshapeLayer *this, uint64_t **a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  size_t v8;
  void *p_p;
  char *v10;
  uint64_t v11;
  uint64_t InputTensor;
  int v13;
  uint64_t v14;
  ZinIrOpLayer *Reshape;
  char v16;
  uint64_t v17;
  void *__p;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[3];
  char v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;

  v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 104);
  if (!v4)
    return 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v25, *(const void **)(v4 + 104), *(_QWORD *)(v4 + 112), (uint64_t)(*(_QWORD *)(v4 + 112) - *(_QWORD *)(v4 + 104)) >> 2);
  v28 = *(_DWORD *)(v4 + 128);
  v6 = *(char **)(*((_QWORD *)this + 8) + 16);
  v5 = *(char **)(*((_QWORD *)this + 8) + 24);
  v7 = v25;
  if (v5 - v6 == v26 - (_BYTE *)v25)
  {
    while (v6 != v5)
    {
      if (*(_DWORD *)v6 != *v7)
        goto LABEL_6;
      v6 += 4;
      ++v7;
    }
  }
  else
  {
LABEL_6:
    if (ZinReshapeLayer::MatchesReshapeAttributes(this, (const DimensionOrderHint *)&v25))
    {
      if (*((char *)this + 47) >= 0)
        v8 = *((unsigned __int8 *)this + 47);
      else
        v8 = *((_QWORD *)this + 4);
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v8 + 12);
      if (SHIBYTE(v21) < 0)
        p_p = __p;
      if (v8)
      {
        if (*((char *)this + 47) >= 0)
          v10 = (char *)this + 24;
        else
          v10 = (char *)*((_QWORD *)this + 3);
        memmove(p_p, v10, v8);
      }
      strcpy((char *)p_p + v8, "_reshape_opt");
      ZinObjectNameFactory::ZinObjectNameFactory(v23, &__p);
      if (SHIBYTE(v21) < 0)
        operator delete(__p);
      v11 = *((_QWORD *)this + 2);
      InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
      v13 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(this, 0) + 88);
      v14 = (*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
      Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v11, (uint64_t)v23, InputTensor + 48, v13, (__int128 *)(v14 + 48), (const DimensionOrderHint *)&v25);
      __p = &unk_24C02BB18;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v16 = ZinIrOpLayerGraph::ReplaceNode(a2, this, Reshape, (const Layer2TDMapper::SourceLayer *)&__p);
      __p = &unk_24C02BB18;
      if (v20)
      {
        v21 = v20;
        operator delete(v20);
      }
      if ((v16 & 1) == 0)
        ZinAssertImpl("ANEC internal failure: Reshape layer graph manipulation error", __p);
      v23[0] = off_24C01FBB0;
      if (v24 < 0)
        operator delete((void *)v23[1]);
      v17 = 1;
      goto LABEL_26;
    }
  }
  v17 = 0;
LABEL_26:
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  return v17;
}

void sub_206E86F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a19 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayer::ReplaceWithAlias(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  const ZinTensorDimensions *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  ZinIrOpLayer *Alias;
  _QWORD *v32;
  _BOOL4 v33;
  int v34;
  int v35;
  _QWORD *v36;
  _QWORD v38[4];
  int v39;
  _QWORD *v40;
  std::string v41;
  std::string v42;
  _QWORD v43[3];
  char v44;
  _QWORD *v45;
  int64x2_t v46[2];
  void *v47[4];
  uint64_t v48;
  void *__p[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v6 = **(_QWORD **)(a1 + 88);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  v8 = (const ZinTensorDimensions *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0)+ 48);
  v9 = **a3;
  v48 = 0;
  __p[0] = (void *)ZinIrTensor::GetInterleave((ZinIrTensor *)v7);
  __p[1] = v10;
  if (ZinReshapeLayerUtils::ReplaceableWithAlias((_QWORD *)(v7 + 48), (uint64_t)__p, v8, *(_QWORD *)(a1 + 64) + 16, **a3, (unint64_t *)&v48))
  {
    DimensionOrderHint::DimensionOrderHint(v47, 2);
    ZinIrTensor::CreateDefaultStride(v8, *(_DWORD *)(v7 + 88), 2, (uint64_t)v47, *(_QWORD *)(v9 + 528), v48, 1, v46);
    v11 = operator new();
    ZinIrTensor::MirInfo::MirInfo(v11, 2, v48, 1, v47, v46);
    v45 = (_QWORD *)v11;
    if (ZinIrTensor::SetAllocationHint((ZinIrTensor *)v7, 2, 1))
      ZinAssertImpl("Unable to set allocation hint to DRAM on root tensor of index tensor");
    if (*(char *)(a1 + 47) >= 0)
      v12 = *(unsigned __int8 *)(a1 + 47);
    else
      v12 = *(_QWORD *)(a1 + 32);
    v13 = &v42;
    std::string::basic_string[abi:ne180100]((uint64_t)&v42, v12 + 1);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if (v12)
    {
      if (*(char *)(a1 + 47) >= 0)
        v14 = (const void *)(a1 + 24);
      else
        v14 = *(const void **)(a1 + 24);
      memmove(v13, v14, v12);
    }
    *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v41, "reshape_alias");
    v15 = std::string::append(&v41, "_xfm", 4uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v58 = v15->__r_.__value_.__r.__words[2];
    v57 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (v58 >= 0)
      v17 = (const std::string::value_type *)&v57;
    else
      v17 = (const std::string::value_type *)v57;
    if (v58 >= 0)
      v18 = HIBYTE(v58);
    else
      v18 = *((_QWORD *)&v57 + 1);
    v19 = std::string::append(&v42, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)&v50 = *((_QWORD *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v43, __p);
    if (SBYTE7(v50) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)v57);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    v21 = *(_QWORD **)(a1 + 88);
    v22 = *(_QWORD *)(a1 + 16);
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v21 + 80))(__p, *v21, 0, 0);
    v23 = operator new(0x78uLL);
    v42.__r_.__value_.__l.__size_ = (std::string::size_type)(v23 + 30);
    v42.__r_.__value_.__r.__words[2] = (std::string::size_type)(v23 + 30);
    v23[28] = v56;
    v24 = v55;
    v25 = v53;
    *((_OWORD *)v23 + 5) = v54;
    *((_OWORD *)v23 + 6) = v24;
    v26 = v50;
    *(_OWORD *)v23 = *(_OWORD *)__p;
    *((_OWORD *)v23 + 1) = v26;
    v27 = v52;
    *((_OWORD *)v23 + 2) = v51;
    *((_OWORD *)v23 + 3) = v27;
    *((_OWORD *)v23 + 4) = v25;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v28 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v21 + 32))(*v21, 0, 0) + 104);
    if (v28)
      v29 = *(_DWORD *)(v28 + 96);
    else
      v29 = 0;
    v30 = v45;
    v45 = 0;
    v40 = v30;
    Alias = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v22, (uint64_t)v43, (uint64_t)&v42, v29, (__int128 *)v8, (uint64_t)&v40);
    v32 = v40;
    v40 = 0;
    if (v32)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v40, v32);
    if (v42.__r_.__value_.__r.__words[0])
    {
      v42.__r_.__value_.__l.__size_ = v42.__r_.__value_.__r.__words[0];
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    *(_QWORD *)&v57 = a1;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
    v42.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v42);
    v33 = ZinIrOpLayerGraph::AddNode(a2, Alias, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      *(void **)&v50 = __p[1];
      operator delete(__p[1]);
    }
    memset(v38, 0, sizeof(v38));
    v39 = 1065353216;
    v34 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, Alias, v38);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v38);
    v35 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v6, (uint64_t)Alias, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    if ((v33 & v34 & v35 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0) & 1) == 0)
      ZinAssertImpl("ANE internal failure: Alias layer graph manipulation error");
    v43[0] = off_24C01FBB0;
    if (v44 < 0)
      operator delete((void *)v43[1]);
    v36 = v45;
    v45 = 0;
    if (v36)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v45, v36);
    if (v47[0])
    {
      v47[1] = v47[0];
      operator delete(v47[0]);
    }
  }
  return 0;
}

void sub_206E87454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void (**a27)(ZinObjectNameFactory *__hidden this),void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,_QWORD *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,uint64_t a48)
{
  _QWORD *v49;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  a27 = off_24C01FBB0;
  if (a33 < 0)
    operator delete(__p);
  v49 = a35;
  a35 = 0;
  if (v49)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a35, v49);
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  _Unwind_Resume(a1);
}

BOOL NeedDeinterleaveCopy(ZinReshapeLayer *a1)
{
  ZinIrTensor *v2;
  _QWORD *v3;
  ZinIrTensor *RootTensor;
  uint64_t Interleave;
  char v6;
  unint64_t v7;
  ZinIrTensor *v8;
  uint64_t v9;
  char v10;
  BOOL v11;

  v2 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a1 + 11) + 32))(**((_QWORD **)a1 + 11), 0, 0);
  v3 = (_QWORD *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v2);
  Interleave = ZinIrTensor::GetInterleave(RootTensor);
  if (v6)
    v7 = Interleave;
  else
    v7 = 1;
  v8 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v9 = ZinIrTensor::GetInterleave(v8);
  if (v10)
    v11 = v7 == v9;
  else
    v11 = 0;
  return !v11 && v7 >= 2 && (v3[7] % v7 || v3[9] != *((_QWORD *)v2 + 9) || v3[8] != *((_QWORD *)v2 + 8));
}

BOOL NeedMemCopy(ZinReshapeLayer *a1, ZinIrOpLayerGraph *a2)
{
  uint64_t **v4;
  _QWORD ***v5;
  _QWORD *v6;
  ZinIrTensor *v7;
  uint64_t v8;
  uint64_t v9;
  ZinIrTensor *v10;
  ZinIrTensor *v11;
  _BOOL8 IsResident;
  ZinIrTensor *v13;
  ZinIrTensor *v14;
  ZinTensorDimensions *v15;
  unint64_t ElementCount;
  uint64_t *v17;
  _DWORD *v18;
  unint64_t v19;
  char v20;
  int v21;
  uint64_t ValueAt;
  uint64_t v23;
  char *i;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  ZinIrTensor::MirInfo *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t Interleave;
  char v41;
  unint64_t v42;
  int v43;
  void *v44[2];
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  ZinIrTensor *v48[2];
  void *__p;
  _BYTE *v50;
  char *v51;
  char *v52;

  __p = a1;
  v44[0] = &__p;
  v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)a2 + 8, (unint64_t **)v44);
  v5 = (_QWORD ***)((char *)a2 + 104);
  if (v4)
    v5 = (_QWORD ***)(v4 + 3);
  v6 = **v5;
  v7 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v6 + 32))(*v6, 0, 0);
  if (ZinIrTensor::GetRootTensor(v7) != v7)
  {
    v8 = *((_QWORD *)a1 + 8);
    v44[1] = 0;
    *(_QWORD *)&v45 = 0;
    v44[0] = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v44, *(const void **)(v8 + 16), *(_QWORD *)(v8 + 24), (uint64_t)(*(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16)) >> 2);
    DWORD2(v45) = *(_DWORD *)(v8 + 40);
    if (ZinIrTensor::IsTensorFamilyCompatibleWithDimensionOrder((ZinReshapeLayer **)v7, (const DimensionOrderHint *)v44))
    {
      v9 = (*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
      v10 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
      ZinIrTensor::GetDimensionOrderHint(v10, (uint64_t)&__p);
      v11 = (ZinIrTensor *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
      IsResident = ZinIrTensor::IsResident(v11);
      ZinReshapeLayerUtils::GetReshapedDimensions((ZinIrTensor *)((char *)v7 + 48), (const ZinTensorDimensions *)(v9 + 48), (const ZinTensorDimensions *)&__p, (const DimensionOrderHint *)IsResident, &v51);
      if (__p)
      {
        v50 = __p;
        operator delete(__p);
      }
      DimensionOrderHint::GetOrder((DimensionOrderHint *)v44, &__p);
      ZinIrTensor::GetParentTensor(v7, v48);
      v13 = v48[0];
      if (v48[0])
      {
        v14 = v7;
        while (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 12) + 64) + 8) != 33)
        {
          v15 = (ZinIrTensor *)((char *)v14 + 48);
          ElementCount = ZinTensorDimensions::GetElementCount(v15);
          v17 = (uint64_t *)((char *)v13 + 48);
          if (ElementCount < ZinTensorDimensions::GetElementCount((ZinTensorDimensions *)v17))
          {
            v18 = __p;
            if (v50 != __p)
            {
              v19 = 0;
              v20 = 0;
              while (1)
              {
                v21 = v18[v19];
                ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v15, v21);
                v23 = GetValueAtDimension<ZinTensorDimensions>(v17, v21);
                if (!((v23 < 2) | v20 & 1))
                  goto LABEL_19;
                if ((v20 & (v23 > ValueAt)) == 1)
                  break;
LABEL_20:
                ++v19;
                v18 = __p;
                if (v19 >= (v50 - (_BYTE *)__p) >> 2)
                  goto LABEL_21;
              }
              for (i = v51; i != v52; i += 4)
              {
                if (v21 == *(_DWORD *)i)
                  goto LABEL_34;
              }
LABEL_19:
              v20 = 1;
              goto LABEL_20;
            }
          }
LABEL_21:
          v14 = v48[0];
          ZinIrTensor::GetParentTensor(v48[0], &v47);
          v25 = v47;
          v47 = 0uLL;
          v26 = (std::__shared_weak_count *)v48[1];
          *(_OWORD *)v48 = v25;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
          if (*((_QWORD *)&v47 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v13 = v48[0];
          if (!v48[0])
            goto LABEL_35;
        }
LABEL_34:
        LODWORD(v13) = 1;
      }
LABEL_35:
      v32 = (std::__shared_weak_count *)v48[1];
      if (v48[1])
      {
        v33 = (unint64_t *)((char *)v48[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (__p)
      {
        v50 = __p;
        operator delete(__p);
      }
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
    }
    else
    {
      LODWORD(v13) = 1;
    }
    if (v44[0])
    {
      v44[1] = v44[0];
      operator delete(v44[0]);
    }
    if ((_DWORD)v13)
      return 1;
  }
  if (ZinIrTensor::IsPadded(v7))
    return 1;
  v36 = (ZinIrTensor::MirInfo *)*((_QWORD *)v7 + 13);
  if (!v36 || !ZinIrTensor::MirInfo::HasCustomStrides(v36))
    return 0;
  v37 = *((_QWORD *)v7 + 13);
  v38 = *(_QWORD *)(v37 + 32);
  v39 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v44 = *(_OWORD *)v37;
  v45 = v39;
  v46 = v38;
  Interleave = ZinIrTensor::GetInterleave(v7);
  v42 = v41 ? Interleave : 1;
  FindDimensionOrderFromStrides((const ZinTensorDimensions *)v44, (ZinIrTensor *)((char *)v7 + 48), v42, (*(_DWORD *)(*(_QWORD *)(*v6 + 64) + 8) - 28) < 3, (uint64_t)&__p);
  v43 = ZinReshapeLayer::MatchesReshapeAttributes(a1, (const DimensionOrderHint *)&__p);
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
  return !v43;
}

void sub_206E87A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NeedDimensionOrderHint(ZinReshapeLayer *a1, ZinIrOpLayerGraph *a2)
{
  int v3;
  ZinIrOpLayer *v4;
  unsigned int IsNoOp;
  void *__p;
  void *v8;
  uint64_t v9;
  void *v10[4];
  void *v11[4];

  DimensionOrderHint::DimensionOrderHint(v11, 1);
  DimensionOrderHint::DimensionOrderHint(v10, 2);
  if (ZinReshapeLayer::MatchesReshapeAttributes(a1, (const DimensionOrderHint *)v11))
    v3 = ZinReshapeLayer::MatchesReshapeAttributes(a1, (const DimensionOrderHint *)v10);
  else
    v3 = 0;
  v4 = *(ZinIrOpLayer **)(ZinIrOpLayer::GetInputTensor(a1, 0) + 96);
  __p = 0;
  v8 = 0;
  v9 = 0;
  IsNoOp = ZinIrOpLayer::IsNoOp(v4, (uint64_t *)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  return v3 ^ 1 | IsNoOp;
}

void sub_206E87BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v16 = *(void **)(v14 - 48);
  if (v16)
  {
    *(_QWORD *)(v14 - 40) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *ZinReshapeLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *GroupId;
  uint64_t v17[2];
  uint64_t v18;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C01BB08;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)(v8 + 16), *(const void **)(v7 + 16), *(_QWORD *)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 2);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v17[0] = v9;
  v17[1] = (uint64_t)v10;
  v18 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinReshapeLayer::ZinReshapeLayer(v6, &v18, v17, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206E87D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

_QWORD *ZinReshapeLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RESHAPE");
}

uint64_t ZinReshapeLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206E87EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL ZinReshapeLayer::Hash(ZinReshapeLayer *this, int *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = (_QWORD *)*((_QWORD *)this + 11);
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2 != v3)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 0, 0);
    v6 = (_QWORD *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
    v7 = v5[6];
    v8 = v5[7];
    v9 = v6[6];
    v19 = v5[8];
    v20 = v6[7];
    v12 = v5 + 9;
    v10 = v5[9];
    v11 = v12[1];
    v13 = v6[8];
    v14 = v6[10];
    v18 = v6[9];
    v15 = operator new(0x50uLL);
    *v15 = v7;
    v15[1] = v9;
    v15[2] = v11;
    v15[3] = v14;
    v15[4] = v8;
    v15[5] = v20;
    v15[6] = v19;
    v15[7] = v13;
    v15[8] = v10;
    v15[9] = v18;
    *a2 = ZinHash(v15, 0x50u);
    operator delete(v15);
  }
  return v2 != v3;
}

void sub_206E87FB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinReshapeLayer::SpatialSplitCopy(ZinReshapeLayer *this, const TiledLayerTensorRegions *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string __p;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  ZinIrOpLayer::CreateSpatialSplitCopyTensor(this, a2, &v17);
  v15 = v17;
  v16 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  ZinIrOpLayer::CreateSpatialSplitCopyName(this, a2, &__p);
  v6 = (*(uint64_t (**)(ZinReshapeLayer *, uint64_t *, std::string *))(*(_QWORD *)this + 176))(this, &v15, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v6;
}

void sub_206E880C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t ZinReshapeLayer::IsNoOp(ZinIrOpLayer *this, uint64_t *a2)
{
  _QWORD *v3;
  ZinIrTensor *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Hal;
  uint64_t v9;
  BOOL v10;
  void *__p[15];
  _QWORD v13[2];

  if (*((_QWORD *)this + 12) == *((_QWORD *)this + 11))
  {
    if (*a2 == a2[1])
      ZinAssertImpl("Lacking input tensor information to judge if the reshape is a no-op");
    return ZinReshapeLayer::IsWidthAligned(this, *a2);
  }
  else
  {
    ZinIrOpLayer::GetInputTensorDimensions(this, __p);
    v3 = __p[0];
    v4 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0);
    v13[0] = ZinIrTensor::GetInterleave(v4);
    v13[1] = v5;
    v6 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
    v7 = *((_QWORD *)this + 8);
    Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
    v10 = ZinReshapeLayerUtils::ReplaceableWithAlias(v3, (uint64_t)v13, (_QWORD *)(v6 + 48), v7 + 16, v9, 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v10)
    {
      return 1;
    }
    else
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 80))(__p, **((_QWORD **)this + 11), 0, 0);
      return ZinReshapeLayer::IsWidthAligned(this, (uint64_t)__p);
    }
  }
}

void sub_206E88238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayer::IsWidthAligned(_QWORD *a1, uint64_t a2)
{
  uint64_t Hal;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(a1[2] + 160));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v11 = 0;
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0);
  ZinTensorFormatGetSize(*(_DWORD *)(v6 + 88), &v11);
  if (*(_BYTE *)(v5 + 1105))
    v7 = (unint64_t *)(v5 + 528);
  else
    v7 = (unint64_t *)(v5 + 416);
  v8 = *v7;
  v9 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0);
  return ZinIrReshapeUnit::HasAlignedWidth(a2 + 8, v9 + 48, v11, v8);
}

BOOL ZinReshapeLayer::IsOnlyInGCDimension(ZinReshapeLayer *this)
{
  _QWORD *InputTensor;
  _QWORD *v3;
  BOOL v4;

  InputTensor = (_QWORD *)ZinIrOpLayer::GetInputTensor(this, 0);
  v3 = (_QWORD *)(*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v4 = InputTensor[10] == 1 && v3[10] == 1;
  return v4 && InputTensor[8] == v3[8] && InputTensor[9] == v3[9];
}

void ZinReshapeLayer::LowerEngine()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Cannot support Reshape layer without associated supported transform handling.", v0, 2u);
}

void ZinMirSpatialSplitLatencyCostModel::~ZinMirSpatialSplitLatencyCostModel(ZinMirSpatialSplitLatencyCostModel *this)
{
  *(_QWORD *)this = off_24C025D70;
  std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::destroy((uint64_t)this + 232, *((_QWORD **)this + 30));
  std::unique_ptr<ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>>::reset[abi:ne180100]((_QWORD **)this + 28, 0);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 184);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 80);
  *(_QWORD *)this = &unk_24C024668;
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)this + 8);
}

BOOL ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey::operator<(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD **v9;
  _QWORD **v10;
  unint64_t v11;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
  {
    v9 = (_QWORD **)(a1 + 1);
    v10 = (_QWORD **)(a2 + 1);
    v11 = a1[2];
    if (v11 == a2[2]
      && (std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,5ul>,true,true>(*v9, 0, (uint64_t)&(*v9)[v11 >> 6], v11 & 0x3F, *v10) & 1) != 0)
    {
      return *((unsigned __int8 *)a1 + 32) < *((unsigned __int8 *)a2 + 32);
    }
    return (std::operator<=>[abi:ne180100]<BOOL,std::allocator<BOOL>>((uint64_t)v9, (uint64_t)v10) & 0x80u) != 0;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 48);
    v5 = *(_QWORD *)(v3 + 48);
    v6 = v4 < v5;
    if (v4 == v5)
      return *(_QWORD *)(v2 + 360) < *(_QWORD *)(v3 + 360);
  }
  return v6;
}

uint64_t std::operator<=>[abi:ne180100]<BOOL,std::allocator<BOOL>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(unsigned __int8 *, unsigned __int8 *);

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)a1 + 8 * (v3 >> 6);
  v5 = v3 & 0x3F;
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)a2 + 8 * (v7 >> 6);
  v10 = std::__synth_three_way[abi:ne180100]<BOOL,BOOL>;
  return std::__lexicographical_compare_three_way_fast_path[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::strong_ordering (*)(BOOL const&,BOOL const&)>(v2, 0, v4, v5, v6, 0, v8, v7 & 0x3F, (uint64_t (**)(char *, char *))&v10);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ZinMirSpatialSplitLatencyCostModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t *i;
  _BYTE v14[24];
  double v15;
  double v16;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)a1 = off_24C025D70;
  v10 = *a6;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(a1 + 64) = v10;
  std::unordered_map<ZinIrTensor const*,CpAllocUtils::AllocationType>::unordered_map(a1 + 80, a4);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 120) = a5;
  *(_QWORD *)(a1 + 128) = a7;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_QWORD *)(a1 + 248) = 0;
  ZinIrHalParameters::GetOperationCondition(**(ZinIrHalParameters ***)(a1 + 56), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 104), 0xFFFFFFFF, 0xFFFFFFFF, (uint64_t)v14);
  *(double *)(a1 + 136) = v16 / v15;
  v11 = (_QWORD *)operator new();
  *v11 = 0;
  std::unique_ptr<ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>>::reset[abi:ne180100]((_QWORD **)(a1 + 224), v11);
  for (i = (uint64_t *)(a5 + 16);
        ;
        ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::Insert(*(uint64_t ***)(a1 + 224), i[2], (__int128 *)(i + 3)))
  {
    i = (uint64_t *)*i;
    if (!i)
      break;
  }
  return a1;
}

void sub_206E886A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD **v8;

  std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::destroy(v7, *v8);
  std::unique_ptr<ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>>::reset[abi:ne180100](v6, 0);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v5);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v4);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v3);
  *v1 = &unk_24C024668;
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::Insert(uint64_t **a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  int v5;

  v5 = 0;
  result = ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::InsertNodeVisitor((uint64_t)a1, *a1, a2, a3, &v5);
  *a1 = (uint64_t *)result;
  if (result)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_BYTE *)(result + 48) = 1;
  }
  return result;
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeMemCacheHintInfo(ZinMirSpatialSplitLatencyCostModel *this, const ZinANELayer *a2)
{
  _QWORD *v4;
  unint64_t v5;
  ZinIrTensor *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  ZinIrTensor *v12;
  uint64_t v13;
  float v14;
  float v15;
  _BYTE *v16;
  void *__p;
  void *v19;
  char v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE *v28;
  unsigned int v29;

  v29 = 0;
  if (!*((_BYTE *)this + 64))
    return 0;
  (*(void (**)(_QWORD **__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 512))(&v27, a2);
  v4 = v27;
  if (v28 != (_BYTE *)v27)
  {
    v5 = 0;
    do
    {
      v6 = (ZinIrTensor *)v4[v5];
      DimensionOrderHint::DimensionOrderHint(&__p, 2);
      ZinIrTensor::GetTensorSizeInBytesFromResidency(v6, 2, (uint64_t)&__p, 0);
      v8 = v7;
      v9 = *((_QWORD *)this + 16);
      if (__p)
      {
        v19 = __p;
        operator delete(__p);
      }
      if ((float)((float)v9 * 0.75) > (float)v8)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        LOBYTE(__p) = 0;
        v20 = 0;
        ZinIrRegAllocUtil::FindSortedConsumersAndProducers(v6, (uint64_t *)&v24, (uint64_t *)&v21, (ZinTensorFamilyUtil *)&__p);
        std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
        v10 = v24;
        v11 = v21;
        if (v25 - (_BYTE *)v24 == 8 && v22 - (_BYTE *)v21 == 8)
        {
          if (v5 >= 2)
            std::__throw_out_of_range[abi:ne180100]("array::at");
          *((_BYTE *)&v29 + v5) = 1;
        }
        if (v11)
        {
          v22 = v11;
          operator delete(v11);
          v10 = v24;
        }
        if (v10)
        {
          v25 = v10;
          operator delete(v10);
        }
      }
      ++v5;
      v4 = v27;
    }
    while (v5 < (v28 - (_BYTE *)v27) >> 3);
  }
  v12 = (ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  DimensionOrderHint::DimensionOrderHint(&__p, 2);
  ZinIrTensor::GetTensorSizeInBytesFromResidency(v12, 2, (uint64_t)&__p, 0);
  v14 = (float)v13;
  v15 = (float)*((unint64_t *)this + 16) * 0.75;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if (v15 > v14)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    LOBYTE(__p) = 0;
    v20 = 0;
    ZinIrRegAllocUtil::FindSortedConsumersAndProducers(v12, (uint64_t *)&v24, (uint64_t *)&v21, (ZinTensorFamilyUtil *)&__p);
    std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
    v16 = v24;
    if (v25 - (_BYTE *)v24 == 8 && v22 - (_BYTE *)v21 == 8)
      BYTE2(v29) = 1;
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
      v16 = v24;
    }
    if (v16)
    {
      v25 = v16;
      operator delete(v16);
    }
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  return v29;
}

void sub_206E889E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  v29 = *(void **)(v27 - 128);
  if (v29)
  {
    *(_QWORD *)(v27 - 120) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer(ZinMirSpatialSplitLatencyCostModel *a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ZinIrOpLayer *v16;
  int v17;
  uint64_t v18;
  float64x2_t v20;
  double v21;
  char v22;
  void *__p;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  float64x2_t v30[2];
  void *v31;
  void *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  memset(v30, 0, 25);
  v31 = a5;
  *(_QWORD *)&v20.f64[0] = &v31;
  *(_QWORD *)&v20.f64[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v27, &v20);
  v26 = ZinMirSpatialSplitLatencyCostModel::ComputeMemCacheHintInfo(a1, (const ZinANELayer *)a5);
  __p = 0;
  v24 = 0;
  v25 = 0;
  if (ZinMirSpatialSplitLatencyCostModel::CreateSplitLayers((uint64_t)a1, a2, a3, a4, (const ZinIrOpLayer *)a5, a6, &v26, a7, &__p, v30))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer();
    goto LABEL_15;
  }
  if ((unint64_t)(v24 - (_BYTE *)__p) >= 0x11)
  {
    if (v24 - (_BYTE *)__p == 24)
    {
      if (ZinIrOpLayer::IsANELayer(*((ZinIrOpLayer **)__p + 2)))
      {
        v16 = (ZinIrOpLayer *)*((_QWORD *)__p + 2);
        v20 = 0uLL;
        v22 = 0;
        v21 = 0.0;
        v31 = 0;
        v32 = 0;
        v34 = 0;
        v33 = 0;
        v17 = ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer((uint64_t)a1, a3, v16, (ZinIrOpLayer *)a5, a6, &v26, 1, (uint64_t)&v31, &v20);
        if (v17)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer();
        }
        else
        {
          v30[0] = vaddq_f64(v20, v30[0]);
          v30[1].f64[0] = v21 + v30[1].f64[0];
          LOBYTE(v30[1].f64[1]) |= v22;
        }
        if (v31)
        {
          v32 = v31;
          operator delete(v31);
        }
        if (v17)
          goto LABEL_15;
        goto LABEL_20;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer();
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer();
    }
    *(float64x2_t *)a8 = v30[0];
    *(float64x2_t *)(a8 + 9) = *(float64x2_t *)((char *)v30 + 9);
LABEL_15:
    v18 = 3;
    goto LABEL_21;
  }
LABEL_20:
  v18 = 0;
  *(float64x2_t *)a8 = v30[0];
  *(float64x2_t *)(a8 + 9) = *(float64x2_t *)((char *)v30 + 9);
LABEL_21:
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v27 = &unk_24C02BB18;
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return v18;
}

void sub_206E88CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)(v21 - 120);
  if (v23)
  {
    *(_QWORD *)(v21 - 112) = v23;
    operator delete(v23);
  }
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::CreateSplitLayers(uint64_t a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, const ZinIrOpLayer *a5, uint64_t a6, int *a7, uint64_t a8, void **a9, _OWORD *a10)
{
  ZinIrOpLayer *v18;
  unint64_t v19;
  _BOOL8 IsNELayer;
  ZinNELayer *v21;

  if (!*(_BYTE *)(a6 + 224))
    return 0;
  ZinMirSpatialSplitCostModel::CreateSplitLayers(a1, a3, a5, a6, a9);
  v18 = *(ZinIrOpLayer **)*a9;
  if (!ZinIrOpLayer::IsANELayer(v18)
    || !ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer(a1, a2, a3, a4, (std::string::size_type)a5, (ZinEngineLayerMirInfo **)v18, (_QWORD *)a6, a7, a8, a10))
  {
    v19 = (_BYTE *)a9[1] - (_BYTE *)*a9;
    if (v19 < 0x11)
      return 0;
    if (v19 == 24)
    {
      IsNELayer = ZinIrOpLayer::IsNELayer(*((ZinIrOpLayer **)*a9 + 2));
      if (IsNELayer)
      {
        if (!*((_QWORD *)a5 + 33))
          return 0;
        v21 = (ZinNELayer *)*((_QWORD *)*a9 + 2);
        if (*((_QWORD *)v21 + 33)
          || !ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer((ZinMirSpatialSplitLatencyCostModel *)IsNELayer, a2, a5, v18, v21))
        {
          return 0;
        }
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinMirSpatialSplitLatencyCostModel::CreateSplitLayers();
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinMirSpatialSplitLatencyCostModel::CreateSplitLayers();
    }
  }
  return 3;
}

uint64_t ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer(uint64_t a1, uint64_t a2, ZinIrOpLayer *a3, ZinIrOpLayer *a4, uint64_t a5, int *a6, int a7, uint64_t a8, _OWORD *a9)
{
  _BOOL4 IsNELayer;
  _BOOL4 v18;
  const ZinCustomPerfInfo *v19;
  _OWORD *v20;
  _BYTE *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t (***v33)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *);
  uint64_t (**v34)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *);
  uint64_t (***v35)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t (***v42)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *);
  int v43;
  _QWORD *v44;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v59[2];
  _OWORD v60[12];
  uint64_t v61;
  void *__p;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  void *v74;
  _BYTE v75[224];
  _BYTE v76[328];
  uint64_t (**v77)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *);
  _BYTE v78[224];
  _BYTE v79[296];
  __int16 v80;
  __int128 v81;
  uint64_t v82;
  __int16 v83;
  char v84;
  char v85;
  __int16 v86;
  char v87;
  char v88;
  __int16 v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  __int16 v104;
  char v105;
  char v106;
  int v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  void *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE v118[872];
  __int128 v119[2];
  __int16 v120;
  char v121;
  _BYTE v122[7];
  char v123;
  int v124;

  if (!*(_BYTE *)(a5 + 224))
    return 0;
  v120 = 257;
  v121 = 1;
  *(_DWORD *)v122 = 256;
  *(_DWORD *)&v122[3] = 0;
  v123 = 1;
  v124 = 0;
  ZinIrHalParameters::GetOperationCondition(**(ZinIrHalParameters ***)(a1 + 56), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 104), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 112), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 116), (uint64_t)v119);
  ZinIrPerf::ZinIrPerf((uint64_t)v118, **(_QWORD **)(a1 + 56), v119, (uint64_t *)&v120);
  v116 = 0;
  v115 = 0;
  v117 = 0;
  ZinMirSpatialSplitLatencyCostModel::ConstructCustomInputTensorInfoSplitLayer(a1, a2, a4, a5, a7, (uint64_t *)a8, &v115);
  LOBYTE(v108) = 0;
  BYTE8(v110) = 0;
  LOBYTE(v111) = 0;
  BYTE4(v111) = 0;
  WORD4(v111) = 0;
  LOBYTE(v112) = 0;
  BYTE8(v112) = 0;
  LOBYTE(v113) = 0;
  LOBYTE(v114) = 0;
  ZinMirSpatialSplitLatencyCostModel::ConstructCustomOutputTensorInfoSplitLayer(a1, a2, a4, a5, *(_WORD *)(a8 + 24), (uint64_t)&v108);
  v78[0] = 0;
  v78[104] = 0;
  v78[112] = 0;
  v78[216] = 0;
  v79[0] = 0;
  v79[104] = 0;
  v79[112] = 0;
  v79[120] = 0;
  v79[128] = 0;
  v79[136] = 0;
  v79[144] = 0;
  v79[168] = 0;
  v79[176] = 0;
  v79[180] = 0;
  v79[184] = 0;
  v79[192] = 0;
  v79[200] = 0;
  v79[208] = 0;
  v79[216] = 0;
  v79[224] = 0;
  v79[232] = 0;
  v79[256] = 0;
  v79[264] = 0;
  v79[272] = 0;
  v79[280] = 0;
  v79[288] = 0;
  v77 = &off_24C01F198;
  v80 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 256;
  v81 = 0u;
  v82 = 0;
  v83 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v75[0] = 0;
  v75[104] = 0;
  v75[112] = 0;
  v75[216] = 0;
  v76[0] = 0;
  v76[104] = 0;
  v76[112] = 0;
  v76[120] = 0;
  v76[128] = 0;
  v76[136] = 0;
  v76[144] = 0;
  v76[168] = 0;
  v76[176] = 0;
  v76[180] = 0;
  v76[184] = 0;
  v76[192] = 0;
  v76[200] = 0;
  v76[208] = 0;
  v76[216] = 0;
  v76[224] = 0;
  v76[232] = 0;
  v76[256] = 0;
  v76[264] = 0;
  v76[272] = 0;
  v76[280] = 0;
  v76[288] = 0;
  v74 = &unk_24C01F1F0;
  v76[296] = 0;
  v76[304] = 0;
  v76[312] = 0;
  v76[320] = 0;
  IsNELayer = ZinIrOpLayer::IsNELayer(a3);
  v18 = IsNELayer;
  if (IsNELayer)
    v19 = (const ZinCustomPerfInfo *)&v77;
  else
    v19 = (const ZinCustomPerfInfo *)&v74;
  v20 = v115;
  if (v116 != v115)
  {
    if (IsNELayer)
      v21 = v78;
    else
      v21 = v75;
    if ((unint64_t)((v116 - (_BYTE *)v115) / 104) <= 1)
      v22 = 1;
    else
      v22 = (v116 - (_BYTE *)v115) / 104;
    do
    {
      v23 = *v20;
      v24 = v20[2];
      if (v21[104])
      {
        *((_OWORD *)v21 + 1) = v20[1];
        *((_OWORD *)v21 + 2) = v24;
        *(_OWORD *)v21 = v23;
        v25 = v20[3];
        v26 = v20[4];
        v27 = v20[5];
        *((_DWORD *)v21 + 24) = *((_DWORD *)v20 + 24);
        *((_OWORD *)v21 + 4) = v26;
        *((_OWORD *)v21 + 5) = v27;
        *((_OWORD *)v21 + 3) = v25;
      }
      else
      {
        *((_OWORD *)v21 + 1) = v20[1];
        *((_OWORD *)v21 + 2) = v24;
        *(_OWORD *)v21 = v23;
        v28 = v20[3];
        v29 = v20[4];
        v30 = v20[5];
        *((_QWORD *)v21 + 12) = *((_QWORD *)v20 + 12);
        *((_OWORD *)v21 + 4) = v29;
        *((_OWORD *)v21 + 5) = v30;
        *((_OWORD *)v21 + 3) = v28;
        v21[104] = 1;
      }
      v20 = (_OWORD *)((char *)v20 + 104);
      v21 += 112;
      --v22;
    }
    while (v22);
  }
  v31 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  v32 = v79;
  if (v18)
    v33 = &v77;
  else
    v33 = (uint64_t (***)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *))&v74;
  v34 = *(uint64_t (***)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *))(v31 + 64);
  if (!*((_BYTE *)v33 + 352))
    *((_BYTE *)v33 + 352) = 1;
  v33[43] = v34;
  if (v18)
  {
    v35 = &v77;
  }
  else
  {
    v32 = v76;
    v35 = (uint64_t (***)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *))&v74;
  }
  v36 = v113;
  if (*((_BYTE *)v35 + 336))
  {
    *((_OWORD *)v32 + 4) = v112;
    *((_OWORD *)v32 + 5) = v36;
    *((_DWORD *)v32 + 24) = v114;
    v37 = v109;
    *(_OWORD *)v32 = v108;
    *((_OWORD *)v32 + 1) = v37;
    v38 = v111;
    *((_OWORD *)v32 + 2) = v110;
    *((_OWORD *)v32 + 3) = v38;
  }
  else
  {
    *((_OWORD *)v32 + 4) = v112;
    *((_OWORD *)v32 + 5) = v36;
    *((_QWORD *)v32 + 12) = v114;
    v40 = v109;
    *(_OWORD *)v32 = v108;
    *((_OWORD *)v32 + 1) = v40;
    v41 = v111;
    *((_OWORD *)v32 + 2) = v110;
    *((_OWORD *)v32 + 3) = v41;
    *((_BYTE *)v35 + 336) = 1;
  }
  v42 = (uint64_t (***)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *))&v74;
  if (v18)
    v42 = &v77;
  v43 = *a6;
  if (!*((_BYTE *)v42 + 412))
    *((_BYTE *)v42 + 412) = 1;
  *((_DWORD *)v42 + 102) = v43;
  v61 = 0;
  memset(v60, 0, sizeof(v60));
  v44 = operator new(8uLL);
  __p = v44;
  *v44 = 0;
  v63 = v44 + 1;
  v64 = v44 + 1;
  v65 = 0;
  v66 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v67 = _Q0;
  v68 = _Q0;
  v69 = _Q0;
  v70 = _Q0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  if (ZinANELayer::CalculatePerf(a3, (ZinIrPerf *)v118, v19, (ZinPerfDescriptor *)v60))
  {
    v50 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v50)
      ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer(v50, v51, v52, v53, v54, v55, v56, v57);
    v39 = 3;
  }
  else
  {
    ZinMirSpatialSplitLatencyCostModel::ComputeLayerLatency((const ZinPerfDescriptor *)v60, a3, v19, (uint64_t)v59);
    v39 = 0;
    *a9 = v59[0];
    *(_OWORD *)((char *)a9 + 9) = *(_OWORD *)((char *)v59 + 9);
  }
  if (__p)
  {
    v63 = __p;
    operator delete(__p);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v74);
  v77 = &off_24C01F198;
  if ((_QWORD)v81)
  {
    *((_QWORD *)&v81 + 1) = v81;
    operator delete((void *)v81);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v77);
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v118);
  return v39;
}

void sub_206E89420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v55;

  if (__p)
    operator delete(__p);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a54);
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0x398]);
  v55 = (void *)STACK[0x6D8];
  if (STACK[0x6D8])
  {
    STACK[0x6E0] = (unint64_t)v55;
    operator delete(v55);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x6F0]);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeCopyLayerCostSplitLayer(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, _OWORD *a8)
{
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  ZinIrOpLayer *CopyView;
  size_t v26;
  std::string *v27;
  const void *v28;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  void *v37;
  int v38;
  __n128 v39;
  uint64_t v40;
  int v41;
  ZinIrOpLayer *v42;
  _QWORD *v43;
  _BOOL4 v44;
  _BOOL4 v45;
  uint64_t v46;
  ZinViewLayer *v47;
  BOOL v48;
  uint64_t v49;
  ZinViewLayer *v50;
  BOOL v51;
  ZinViewLayer *v52;
  ZinViewLayer *v53;
  uint64_t v55;
  _OWORD *v56;
  void *v57;
  std::string v58;
  _BYTE v59[172];
  _QWORD *v60;
  std::string __p;
  char v62;
  std::string v63;
  _OWORD v64[2];
  uint64_t v65;
  int64x2_t v66;
  int64x2_t v67;
  uint64_t v68;
  __int128 v69[2];
  uint64_t v70;
  void *v71[2];
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a6 + 224))
  {
    v15 = *(_OWORD *)(a6 + 56);
    v69[0] = *(_OWORD *)(a6 + 40);
    v69[1] = v15;
    v70 = *(_QWORD *)(a6 + 72);
    v16 = *(_OWORD *)(a6 + 16);
    v64[0] = *(_OWORD *)a6;
    v64[1] = v16;
    v66 = vdupq_n_s64(1uLL);
    v67 = v66;
    v65 = *(_QWORD *)(a6 + 32);
    v68 = 1;
    v17 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a5 + 32))(a5, 0, 0);
    TiledLayerTensorRegions::Id::ToStringForIr((TiledLayerTensorRegions::Id *)(a6 + 152), &v63);
    v18 = *(char *)(v17 + 47);
    if (v18 >= 0)
      v19 = (const std::string::value_type *)(v17 + 24);
    else
      v19 = *(const std::string::value_type **)(v17 + 24);
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(v17 + 47);
    else
      v20 = *(_QWORD *)(v17 + 32);
    v21 = std::string::insert(&v63, 0, v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v58, "/input_copy", 0xBuLL);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    CopyView = (ZinIrOpLayer *)ZinBuilder::CreateCopyView(a5, v69, (uint64_t)v64, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (*((char *)CopyView + 47) >= 0)
      v26 = *((unsigned __int8 *)CopyView + 47);
    else
      v26 = *((_QWORD *)CopyView + 4);
    v27 = &v58;
    std::string::basic_string[abi:ne180100]((uint64_t)&v58, v26 + 1);
    v56 = a8;
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v58.__r_.__value_.__r.__words[0];
    if (v26)
    {
      if (*((char *)CopyView + 47) >= 0)
        v28 = (char *)CopyView + 24;
      else
        v28 = (const void *)*((_QWORD *)CopyView + 3);
      memmove(v27, v28, v26);
    }
    *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 95;
    v29 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v71, "ss_cost");
    v30 = std::string::append(v29, "_xfm", 4uLL);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v63;
    else
      v32 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    else
      size = v63.__r_.__value_.__l.__size_;
    v34 = std::string::append(&v58, (const std::string::value_type *)v32, size);
    v55 = a1;
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&__p, "_", 1uLL);
    v37 = (void *)v36->__r_.__value_.__r.__words[0];
    v38 = SHIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__r.__words[0] = 0;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (v72 < 0)
      operator delete(v71[0]);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v57 = v37;
    v39 = ZinObjectNameFactory::ZinObjectNameFactory(&__p, (char *)CopyView + 24);
    v40 = a5[2];
    v41 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)CopyView + 32))(CopyView, 0, 0, v39)+ 88);
    v60 = 0;
    v59[0] = 0;
    v59[168] = 0;
    v42 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v40, (uint64_t)&__p, (uint64_t)CopyView, v41, &v60, 0, (uint64_t)v59, 1.0);
    v43 = v60;
    v60 = 0;
    if (v43)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v60, v43);
    v71[0] = a5;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
    v63.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v58, &v63);
    v44 = ZinIrOpLayerGraph::AddNode(a2, CopyView, (ZinIrOpLayer ***)&v58);
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (v58.__r_.__value_.__l.__size_)
    {
      v58.__r_.__value_.__r.__words[2] = v58.__r_.__value_.__l.__size_;
      operator delete((void *)v58.__r_.__value_.__l.__size_);
    }
    if (v44)
    {
      v71[0] = a5;
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
      v63.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v58, &v63);
      v45 = ZinIrOpLayerGraph::AddNode(a2, v42, (ZinIrOpLayer ***)&v58);
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v58.__r_.__value_.__l.__size_)
      {
        v58.__r_.__value_.__r.__words[2] = v58.__r_.__value_.__l.__size_;
        operator delete((void *)v58.__r_.__value_.__l.__size_);
      }
      if (v45)
      {
        v46 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)CopyView, (uint64_t)v42, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        if ((v46 & 1) != 0)
        {
          if (!ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer((ZinMirSpatialSplitLatencyCostModel *)v46, v42))
          {
            LODWORD(v58.__r_.__value_.__l.__data_) = 0;
            v49 = ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer(v55, a3, v42, v42, a6, (int *)&v58, 1, a7, v56);
            v51 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v42, 0)
               && ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, CopyView, 0);
            ZinBuilder::DeleteCopyView((ZinBuilder *)a5[2], v42, v50);
            ZinBuilder::DeleteCopyView((ZinBuilder *)a5[2], CopyView, v53);
            if (!v51)
              ZinAssertImpl("Graph is invalid after performance analysis");
LABEL_58:
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
            if (v62 < 0)
            {
              operator delete((void *)__p.__r_.__value_.__l.__size_);
              if ((v38 & 0x80000000) == 0)
                return v49;
            }
            else if ((v38 & 0x80000000) == 0)
            {
              return v49;
            }
            operator delete(v57);
            return v49;
          }
          v48 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v42, 0)
             && ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, CopyView, 0);
          ZinBuilder::DeleteCopyView((ZinBuilder *)a5[2], v42, v47);
          ZinBuilder::DeleteCopyView((ZinBuilder *)a5[2], CopyView, v52);
          if (v48)
          {
            v49 = 3;
            goto LABEL_58;
          }
        }
      }
    }
    ZinAssertImpl("Graph is invalid after performance analysis");
  }
  return 0;
}

void sub_206E899E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42,int a43,__int16 a44,char a45,char a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  int v58;

  if (__p)
    operator delete(__p);
  if (a50 < 0)
    operator delete(a42);
  if (v58 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer(ZinMirSpatialSplitLatencyCostModel *this, ZinNELayer *a2)
{
  uint64_t v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  void *__p[3];
  CFArrayRef v9[27];

  ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)v9);
  if (ZinMirSetActiveNE(a2, v9))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer();
LABEL_10:
    v6 = 3;
    goto LABEL_11;
  }
  v3 = *((_QWORD *)a2 + 33);
  v4 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a2, 0) + 88);
  ZinIrOpLayer::GetInputTensorDimensions(a2, __p);
  v5 = ZinMirL2Config::ZinMirSetWorkUnitShape(v3 + 120, a2, v4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v5 & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer();
    goto LABEL_10;
  }
  v6 = 0;
LABEL_11:
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)v9);
  return v6;
}

void sub_206E89C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&a14);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostOrgLayer(uint64_t a1, ZinIrOpLayer *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v8;
  _OWORD v10[2];
  ZinIrOpLayer *v11;
  void *__p;
  void *v13;
  uint64_t v14;
  __int16 v15;

  v11 = a2;
  __p = 0;
  v13 = 0;
  v14 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 1);
  v15 = *(_WORD *)(a4 + 24);
  memset(v10, 0, 25);
  if (ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationOrgLayer(a1, a2, v10, a4))
  {
    v8 = 3;
  }
  else
  {
    v8 = 0;
    *a3 = v10[0];
    *(_OWORD *)((char *)a3 + 9) = *(_OWORD *)((char *)v10 + 9);
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_206E89CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationOrgLayer(uint64_t a1, ZinIrOpLayer *a2, _OWORD *a3, uint64_t a4)
{
  _OWORD *v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  _BOOL4 IsNELayer;
  void **v19;
  _BYTE *v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void **v33;
  _BYTE *v34;
  int v35;
  unint64_t v36;
  ZinIrRegAllocUtil *InputTensor;
  const ZinIrTensor *v38;
  ZinIrOpLayer *LastProducer;
  ZinIrTensor *v40;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v42;
  ZinIrTensor *v43;
  ZinIrTensor *v44;
  ZinIrTensor *v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  ZinIrTensor *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  void **v57;
  void *v58;
  void **v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD *v65;
  uint64_t *v71;
  __int128 v72;
  _BOOL4 v74;
  ZinCustomPerfInfo *v75;
  uint64_t v76[4];
  void *__p[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  void *v102;
  _BYTE v103[224];
  _BYTE v104[232];
  _BYTE v105[96];
  _OWORD v106[3];
  _OWORD v107[3];
  uint64_t v108;
  char v109;
  char v110;
  char v111;
  _BYTE v112[232];
  _BYTE v113[64];
  __int16 v114;
  __int128 v115;
  uint64_t v116;
  __int16 v117;
  char v118;
  char v119;
  __int16 v120;
  char v121;
  char v122;
  __int16 v123;
  char v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  __int16 v138;
  char v139;
  char v140;
  int v141;
  ZinIrOpLayer *v142;
  void *v143[3];
  char v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  void *v152;
  _BYTE *v153;
  uint64_t v154;
  _BYTE v155[872];
  __int128 v156[2];
  __int16 v157;
  char v158;
  _BYTE v159[7];
  char v160;
  int v161;

  v157 = 257;
  v158 = 1;
  *(_DWORD *)v159 = 256;
  *(_DWORD *)&v159[3] = 1;
  v160 = 1;
  v161 = 0;
  ZinIrHalParameters::GetOperationCondition(**(ZinIrHalParameters ***)(a1 + 56), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 104), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 112), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 116), (uint64_t)v156);
  ZinIrPerf::ZinIrPerf((uint64_t)v155, **(_QWORD **)(a1 + 56), v156, (uint64_t *)&v157);
  v153 = 0;
  v152 = 0;
  v154 = 0;
  ZinMirSpatialSplitLatencyCostModel::ConstructCustomInputTensorInfoOrgLayer(a1, a2, &v152, (uint64_t *)a4);
  LOBYTE(v145) = 0;
  BYTE8(v147) = 0;
  LOBYTE(v148) = 0;
  BYTE4(v148) = 0;
  WORD4(v148) = 0;
  LOBYTE(v149) = 0;
  BYTE8(v149) = 0;
  LOBYTE(v150) = 0;
  LOBYTE(v151) = 0;
  ZinMirSpatialSplitLatencyCostModel::ConstructCustomOutputTensorInfoOrgLayer(a1, (uint64_t)a2, (uint64_t)&v145, *(_WORD *)(a4 + 24));
  v144 = 0;
  memset(v143, 0, sizeof(v143));
  v142 = a2;
  v8 = v152;
  v9 = v153;
  if (v152 != v153)
  {
    do
    {
      v11 = v8[4];
      v10 = v8[5];
      v12 = *((_QWORD *)v8 + 12);
      v107[0] = v8[3];
      v13 = v8[1];
      v14 = v8[2];
      v106[0] = *v8;
      v106[1] = v13;
      v108 = v12;
      v107[2] = v10;
      v106[2] = v14;
      v107[1] = v11;
      if (!BYTE9(v107[0]))
        ZinAssertImpl("Residency in cost model not set");
      std::vector<BOOL>::push_back((uint64_t)v143, (_BYTE *)v107 + 8);
      v8 = (_OWORD *)((char *)v8 + 104);
    }
    while (v8 != (_OWORD *)v9);
  }
  if (!BYTE9(v148))
    ZinAssertImpl("Residency in cost model not set");
  v144 = BYTE8(v148);
  v15 = std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::find<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>(a1 + 232, (uint64_t *)&v142);
  if ((_QWORD *)(a1 + 240) == v15)
  {
    BYTE8(v106[0]) = 0;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112[0] = 0;
    v112[104] = 0;
    v112[112] = 0;
    v112[120] = 0;
    v112[128] = 0;
    v112[136] = 0;
    v112[144] = 0;
    v112[168] = 0;
    v112[176] = 0;
    v112[180] = 0;
    v112[184] = 0;
    v112[192] = 0;
    v112[200] = 0;
    v112[208] = 0;
    v112[216] = 0;
    v112[224] = 0;
    v113[0] = 0;
    v113[24] = 0;
    v113[32] = 0;
    v113[40] = 0;
    v113[48] = 0;
    v113[56] = 0;
    *(_QWORD *)&v106[0] = &off_24C01F198;
    v114 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 256;
    v115 = 0u;
    v116 = 0;
    v117 = 0;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v133 = 0;
    v134 = 0;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v103[0] = 0;
    v103[104] = 0;
    v103[112] = 0;
    v103[216] = 0;
    v104[0] = 0;
    v104[104] = 0;
    v104[112] = 0;
    v104[120] = 0;
    v104[128] = 0;
    v104[136] = 0;
    v104[144] = 0;
    v104[168] = 0;
    v104[176] = 0;
    v104[180] = 0;
    v104[184] = 0;
    v104[192] = 0;
    v104[200] = 0;
    v104[208] = 0;
    v104[216] = 0;
    v104[224] = 0;
    v105[0] = 0;
    v105[24] = 0;
    v105[32] = 0;
    v105[40] = 0;
    v105[48] = 0;
    v105[56] = 0;
    v102 = &unk_24C01F1F0;
    v105[64] = 0;
    v105[72] = 0;
    v105[80] = 0;
    v105[88] = 0;
    IsNELayer = ZinIrOpLayer::IsNELayer(a2);
    if (IsNELayer)
      v19 = (void **)v106;
    else
      v19 = &v102;
    v75 = (ZinCustomPerfInfo *)v19;
    v20 = v153;
    v21 = v152;
    if (v153 != v152)
    {
      if (IsNELayer)
        v22 = (char *)v106 + 8;
      else
        v22 = v103;
      if ((unint64_t)((v153 - (_BYTE *)v152) / 104) <= 1)
        v23 = 1;
      else
        v23 = (v153 - (_BYTE *)v152) / 104;
      v24 = v152;
      do
      {
        v25 = *v24;
        v26 = v24[2];
        if (v22[104])
        {
          *((_OWORD *)v22 + 1) = v24[1];
          *((_OWORD *)v22 + 2) = v26;
          *(_OWORD *)v22 = v25;
          v27 = v24[3];
          v28 = v24[4];
          v29 = v24[5];
          *((_DWORD *)v22 + 24) = *((_DWORD *)v24 + 24);
          *((_OWORD *)v22 + 4) = v28;
          *((_OWORD *)v22 + 5) = v29;
          *((_OWORD *)v22 + 3) = v27;
        }
        else
        {
          *((_OWORD *)v22 + 1) = v24[1];
          *((_OWORD *)v22 + 2) = v26;
          *(_OWORD *)v22 = v25;
          v30 = v24[3];
          v31 = v24[4];
          v32 = v24[5];
          *((_QWORD *)v22 + 12) = *((_QWORD *)v24 + 12);
          *((_OWORD *)v22 + 4) = v31;
          *((_OWORD *)v22 + 5) = v32;
          *((_OWORD *)v22 + 3) = v30;
          v22[104] = 1;
        }
        v24 = (_OWORD *)((char *)v24 + 104);
        v22 += 112;
        --v23;
      }
      while (v23);
    }
    if (IsNELayer)
      v33 = (void **)v106;
    else
      v33 = &v102;
    if (IsNELayer)
      v34 = v113;
    else
      v34 = v105;
    v35 = *((unsigned __int8 *)v33 + 488);
    v33[58] = (void *)0x3FF0000000000000;
    v33[59] = (void *)0x3FF0000000000000;
    v33[60] = (void *)0x3FF0000000000000;
    if (!v35)
      *((_BYTE *)v33 + 488) = 1;
    v74 = IsNELayer;
    if (v20 != v21)
    {
      v36 = 0;
      do
      {
        InputTensor = (ZinIrRegAllocUtil *)ZinIrOpLayer::GetInputTensor(a2, v36);
        LastProducer = ZinIrRegAllocUtil::GetLastProducer(InputTensor, v38);
        if (LastProducer)
        {
          if (ZinMirSpatialSplitLatencyCostModel::IsMCacheReadHit((ZinMirSpatialSplitLatencyCostModel *)a1, a2, LastProducer))
          {
            v40 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)LastProducer
                                                                                           + 32))(LastProducer, 0, 0);
            RootTensor = ZinIrTensor::GetRootTensor(v40);
            if (ZinMirSpatialSplitUtils::IsNonResident(RootTensor, (_QWORD *)(a1 + 80))
              && (v42 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0), v43 = ZinIrTensor::GetRootTensor(v42), ZinMirSpatialSplitUtils::IsNonResident(v43, (_QWORD *)(a1 + 80))))
            {
              v44 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)LastProducer
                                                                                             + 32))(LastProducer, 0, 0);
              v45 = ZinIrTensor::GetRootTensor(v44);
              DimensionOrderHint::DimensionOrderHint(__p, 2);
              ZinIrTensor::GetTensorSizeInBytesFromResidency(v45, 2, (uint64_t)__p, 0);
              v47 = v46;
              v48 = a3;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              v49 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
              DimensionOrderHint::DimensionOrderHint(__p, 2);
              ZinIrTensor::GetTensorSizeInBytesFromResidency(v49, 2, (uint64_t)__p, 0);
              v51 = v50;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              v52 = *(double *)(a1 + 136);
              if (v52 * (float)v51 >= (float)v47)
              {
                *(_QWORD *)&v34[8 * v36] = 0x47EFFFFFE0000000;
                a3 = v48;
              }
              else
              {
                *(double *)&v34[8 * v36] = v52;
                v53 = *((_QWORD *)a2 + 14);
                v54 = *((_QWORD *)a2 + 15);
                a3 = v48;
                if (v53 != v54)
                {
                  while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v53 + 64) + 8) == 31)
                  {
                    v53 += 8;
                    if (v53 == v54)
                      goto LABEL_47;
                  }
                  v33[60] = (void *)0x47EFFFFFE0000000;
                }
              }
            }
            else
            {
              *(_QWORD *)&v34[8 * v36] = *(_QWORD *)(a1 + 136);
            }
          }
          else
          {
            *(_QWORD *)&v34[8 * v36] = 0x3FF0000000000000;
          }
        }
LABEL_47:
        ++v36;
      }
      while (v36 < 0x4EC4EC4EC4EC4EC5 * ((v153 - (_BYTE *)v152) >> 3));
    }
    v55 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v56 = v112;
    if (v74)
      v57 = (void **)v106;
    else
      v57 = &v102;
    v58 = *(void **)(v55 + 64);
    if (!*((_BYTE *)v57 + 352))
      *((_BYTE *)v57 + 352) = 1;
    v57[43] = v58;
    if (v74)
    {
      v59 = (void **)v106;
    }
    else
    {
      v56 = v104;
      v59 = &v102;
    }
    v60 = v150;
    if (*((_BYTE *)v59 + 336))
    {
      *((_OWORD *)v56 + 4) = v149;
      *((_OWORD *)v56 + 5) = v60;
      *((_DWORD *)v56 + 24) = v151;
      v61 = v146;
      *(_OWORD *)v56 = v145;
      *((_OWORD *)v56 + 1) = v61;
      v62 = v148;
      *((_OWORD *)v56 + 2) = v147;
      *((_OWORD *)v56 + 3) = v62;
    }
    else
    {
      *((_OWORD *)v56 + 4) = v149;
      *((_OWORD *)v56 + 5) = v60;
      *((_QWORD *)v56 + 12) = v151;
      v63 = v146;
      *(_OWORD *)v56 = v145;
      *((_OWORD *)v56 + 1) = v63;
      v64 = v148;
      *((_OWORD *)v56 + 2) = v147;
      *((_OWORD *)v56 + 3) = v64;
      *((_BYTE *)v59 + 336) = 1;
    }
    v89 = 0;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    *(_OWORD *)__p = 0u;
    v78 = 0u;
    v65 = operator new(8uLL);
    v90 = v65;
    *v65 = 0;
    v91 = v65 + 1;
    v92 = v65 + 1;
    v93 = 0;
    v94 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v95 = _Q0;
    v96 = _Q0;
    v97 = _Q0;
    v98 = _Q0;
    v99 = 0;
    v100 = 0;
    v101 = 0;
    if (ZinANELayer::CalculatePerf(a2, (ZinIrPerf *)v155, v75, (ZinPerfDescriptor *)__p))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationOrgLayer();
      v16 = 3;
    }
    else
    {
      ZinMirSpatialSplitLatencyCostModel::ComputeLayerLatency((const ZinPerfDescriptor *)__p, a2, v75, (uint64_t)v76);
      *a3 = *(_OWORD *)v76;
      *(_OWORD *)((char *)a3 + 9) = *(_OWORD *)((char *)&v76[1] + 1);
      v76[0] = (uint64_t)&v142;
      v71 = std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__emplace_unique_key_args<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::piecewise_construct_t const&,std::tuple<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey const&>,std::tuple<>>((uint64_t **)(a1 + 232), (uint64_t *)&v142, (uint64_t)&std::piecewise_construct, v76);
      v16 = 0;
      v72 = *a3;
      *(_OWORD *)((char *)v71 + 81) = *(_OWORD *)((char *)a3 + 9);
      *(_OWORD *)(v71 + 9) = v72;
    }
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v102);
    *(_QWORD *)&v106[0] = &off_24C01F198;
    if ((_QWORD)v115)
    {
      *((_QWORD *)&v115 + 1) = v115;
      operator delete((void *)v115);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v106);
  }
  else
  {
    v16 = 0;
    v17 = *(_OWORD *)(v15 + 9);
    *(_OWORD *)((char *)a3 + 9) = *(_OWORD *)((char *)v15 + 81);
    *a3 = v17;
  }
  if (v143[0])
    operator delete(v143[0]);
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v155);
  return v16;
}

void sub_206E8A5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v60;

  if (__p)
    operator delete(__p);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a59);
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0x3C0]);
  if (STACK[0x6A0])
    operator delete((void *)STACK[0x6A0]);
  v60 = (void *)STACK[0x728];
  if (STACK[0x728])
  {
    STACK[0x730] = (unint64_t)v60;
    operator delete(v60);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x740]);
  _Unwind_Resume(a1);
}

double ZinMirSpatialSplitLatencyCostModel::GetUnSplitCost(ZinMirSpatialSplitLatencyCostModel *this, const ZinIrOpLayer *a2)
{
  double *v2;
  const ZinIrOpLayer *v4;

  v4 = a2;
  v2 = (double *)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 18, &v4);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2[3];
}

double ZinMirSpatialSplitLatencyCostModel::GetSplitCost(ZinMirSpatialSplitLatencyCostModel *this, const ZinIrOpLayer *a2)
{
  double *v2;
  const ZinIrOpLayer *v4;

  v4 = a2;
  v2 = (double *)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)this + 23, &v4);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2[3];
}

BOOL ZinMirSpatialSplitLatencyCostModel::IsMcacheReadHitConcatTensor(ZinMirSpatialSplitLatencyCostModel *this, const ZinANELayer *a2, const ZinANELayer *a3)
{
  ZinIrTensor *v6;
  ZinIrTensor *RootTensor;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  ZinIrOpLayer *v16;
  ZinIrOpLayer **v17;
  ZinIrTensor *v18;
  _QWORD *v19;
  int v20;
  int v21;
  _BOOL8 v22;
  uint64_t v24;
  void *__p;
  void *v26;
  char v27;
  void *v28;
  void *v29;
  uint64_t v30;
  ZinIrOpLayer **v31;
  ZinIrOpLayer **v32;
  uint64_t v33;

  v6 = (ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v6);
  DimensionOrderHint::DimensionOrderHint(&__p, 2);
  ZinIrTensor::GetTensorSizeInBytesFromResidency(RootTensor, 2, (uint64_t)&__p, 0);
  v9 = v8;
  v10 = *((_QWORD *)this + 16);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v9 >= v10 || *((_QWORD *)a2 + 45) - *((_QWORD *)a3 + 45) != 1)
    return 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  LOBYTE(__p) = 0;
  v27 = 0;
  ZinIrRegAllocUtil::FindSortedConsumersAndProducers(RootTensor, (uint64_t *)&v31, (uint64_t *)&v28, (ZinTensorFamilyUtil *)&__p);
  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  if (!*((_QWORD *)this + 13))
    goto LABEL_25;
  v11 = *((_QWORD *)this + 6);
  if (*(_QWORD *)(v11 + 360) == *(_QWORD *)(v11 + 352))
    ZinAssertImpl("Must run scheduler first");
  v12 = *((_QWORD *)*(v32 - 1) + 6);
  v13 = *((_QWORD *)*v31 + 6) + 1;
  if (v13 < v12)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(v11 + 352);
      if (v13 >= (unint64_t)((*(_QWORD *)(v11 + 360) - v15) >> 3))
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v16 = *(ZinIrOpLayer **)(v15 + 8 * v13);
      if (ZinIrOpLayer::IsANELayer(v16))
      {
        v17 = v31;
        if (v31 != v32)
        {
          while (*v17 != v16)
          {
            if (++v17 == v32)
            {
              v17 = v32;
              break;
            }
          }
        }
        if (v17 == v32)
        {
          v18 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0);
          __p = ZinIrTensor::GetRootTensor(v18);
          v19 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 10, &__p);
          if (!v19)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (*((_DWORD *)v19 + 6) == 1)
          {
            ZinIrTensor::GetDimensionOrderHint(v18, (uint64_t)&__p);
            ZinIrTensor::GetTensorSizeInBytesFromResidency(v18, 2, (uint64_t)&__p, 0);
            v21 = v20;
            if (__p)
            {
              v26 = __p;
              operator delete(__p);
            }
            v14 += v21;
          }
        }
      }
      ++v13;
    }
    while (v13 != v12);
  }
  else
  {
LABEL_25:
    v14 = 0;
  }
  ZinIrTensor::GetTensorSizeInBytes(RootTensor);
  v22 = (unint64_t)(v24 + v14) < *((_QWORD *)this + 16)
     || *((_QWORD *)*(v32 - 1) + 45) - *((_QWORD *)*v31 + 45) == v32 - v31 - 1;
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  return v22;
}

void sub_206E8A988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  if (__p)
    operator delete(__p);
  v26 = *(void **)(v24 - 104);
  if (v26)
  {
    *(_QWORD *)(v24 - 96) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinMirSpatialSplitLatencyCostModel::IsMCacheReadHit(ZinMirSpatialSplitLatencyCostModel *this, const ZinANELayer *a2, const ZinANELayer *a3)
{
  ZinIrTensor *v6;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *__p[4];

  v6 = (ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v6);
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)RootTensor + 12) + 64) + 8) == 7)
    return ZinMirSpatialSplitLatencyCostModel::IsMcacheReadHitConcatTensor(this, a2, a3);
  v9 = RootTensor;
  DimensionOrderHint::DimensionOrderHint(__p, 2);
  ZinIrTensor::GetTensorSizeInBytesFromResidency(v9, 2, (uint64_t)__p, 0);
  v11 = v10;
  v12 = *((_QWORD *)this + 16);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11 < v12 && *((_QWORD *)a2 + 45) - *((_QWORD *)a3 + 45) == 1;
}

void sub_206E8AAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeLayerLatency@<X0>(const ZinPerfDescriptor *a1@<X1>, const ZinANELayer *a2@<X2>, const ZinCustomPerfInfo *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v20;
  uint64_t result;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  double v33;

  v10 = *((double *)a1 + 8);
  v9 = *((_QWORD *)a1 + 9);
  v12 = *((double *)a1 + 5);
  v11 = *((double *)a1 + 6);
  *(double *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v9;
  v13 = v11 + *((double *)a1 + 7) + v10;
  if (v13 < *((double *)a1 + 2))
    v13 = *((double *)a1 + 2);
  if (v13 >= *((double *)a1 + 3))
    v14 = v13;
  else
    v14 = *((double *)a1 + 3);
  *(double *)(a4 + 16) = v14;
  *(_BYTE *)(a4 + 24) = *(_DWORD *)(*((_QWORD *)a2 + 33) + 144) == 1;
  if (ZinIrOpLayer::IsNELayer(a2) && **((_BYTE **)a2 + 33) && *(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 92)
  {
    v15 = *((double *)a1 + 3);
    if (*((_BYTE *)a3 + 65))
      v16 = (double *)((char *)a1 + 16);
    else
      v16 = (double *)((char *)a1 + 48);
    if (*v16 < v15)
      v15 = *v16;
    v12 = v12 + v15;
    *(double *)a4 = v12;
    v14 = v14 + v15;
    *(double *)(a4 + 16) = v14;
  }
  if (ZinIrOpLayer::IsNELayer(a2) && v12 == *((double *)a1 + 5))
  {
    v17 = *((double *)a1 + 2);
    v18 = *((double *)a1 + 6);
    if (v17 * 0.8 < v18 && v18 < v17)
    {
      v20 = v17 - v18;
      v12 = v12 + v20;
      *(double *)a4 = v12;
      v14 = v20 + v14;
      *(double *)(a4 + 16) = v14;
    }
  }
  result = ZinIrOpLayer::IsNELayer(a2);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)a3 + 65))
    {
      v22 = *((double *)a1 + 2);
      v23 = *((double *)a1 + 3);
      if (v22 < v23 && v23 * 0.8 < v22)
      {
        v24 = v23 + v23 - v22;
        if (v12 < v24)
          v12 = v24;
        *(double *)a4 = v12;
        if (v14 < v24)
          v14 = v24;
        *(double *)(a4 + 16) = v14;
      }
    }
  }
  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 83)
  {
    result = (*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    if (*(_DWORD *)(result + 88) == 3)
      goto LABEL_50;
    result = ZinIrOpLayer::GetInputTensor(a2, 0);
    if (*(_DWORD *)(result + 88) == 3)
      goto LABEL_50;
    v25 = *(_QWORD *)(*((_QWORD *)a2 + 54) + 64);
    v26 = *(_QWORD *)(v25 + 16);
    v27 = *(_QWORD *)(v25 + 24);
    v28 = *(_DWORD *)(v25 + 44);
    v29 = v27 == 3 && v26 == 3;
    v30 = v29 && v28 == 2;
    if (v30 || (v27 == 5 ? (v31 = v26 == 5) : (v31 = 0), v31 ? (v32 = v28 == 2) : (v32 = 0), v32))
    {
LABEL_50:
      v33 = *((double *)a1 + 2);
      if (v33 >= *((double *)a1 + 3))
        v33 = *((double *)a1 + 3);
      *(double *)a4 = v12 + v33;
      *(double *)(a4 + 16) = v33 + v14;
    }
  }
  return result;
}

void ZinMirSpatialSplitLatencyCostModel::ConstructCustomInputTensorInfoSplitLayer(uint64_t a1, uint64_t a2, ZinIrOpLayer *a3, uint64_t a4, int a5, uint64_t *a6, void **a7)
{
  uint64_t v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  unint64_t v13;
  uint64_t InputTensor;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  ZinIrTensor *RootTensor;
  unsigned int v24;
  __int128 v25;
  ZinIrTensor *v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  ZinIrOpLayer **v51;
  ZinIrOpLayer *v53;
  ZinIrOpLayer *v54;
  __int128 v55;
  _BYTE v56[23];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v10 = a6[1];
  if (*a6 == v10)
  {
    v12 = (ZinIrOpLayer **)*((_QWORD *)a3 + 11);
    v11 = (ZinIrOpLayer **)*((_QWORD *)a3 + 12);
  }
  else
  {
    v12 = (ZinIrOpLayer **)*((_QWORD *)a3 + 11);
    v11 = (ZinIrOpLayer **)*((_QWORD *)a3 + 12);
    if ((v10 - *a6) >> 1 != v11 - v12)
      ZinAssertImpl("Invalid use of parameter in Cost Model");
  }
  v51 = v11;
  if (v12 != v11)
  {
    v13 = 0;
    v46 = a2 + 120;
    v47 = a2 + 72;
    v45 = (_QWORD *)(a1 + 80);
    v48 = (__int128 *)(a4 + 41);
    v49 = (uint64_t)(a7 + 2);
    while (1)
    {
      v53 = *v12;
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 120))(a3))
      {
        InputTensor = ZinIrOpLayer::GetInputTensor(a3, v13);
        (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *))(*(_QWORD *)a3 + 128))(&v55, a3);
        v15 = v55;
        if (*((_QWORD *)&v55 + 1))
        {
          v16 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v15 + 1) + 16))(*((_QWORD *)&v15 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v15 + 1));
          }
        }
        if (InputTensor == (_QWORD)v15)
          goto LABEL_44;
      }
      v18 = *(_QWORD *)(a4 + 128) + 80 * v13;
      v19 = *(_BYTE *)(v18 + 40);
      v55 = *(_OWORD *)(v18 + 41);
      *(_OWORD *)v56 = *(_OWORD *)(v18 + 57);
      *(_QWORD *)&v56[15] = *(_QWORD *)(v18 + 72);
      v20 = *a6;
      v21 = a6[1];
      if (*a6 == v21)
        break;
      if (v13 >= (v21 - v20) >> 1)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v22 = (unsigned __int16 *)(v20 + 2 * v13);
      if (!*((_BYTE *)v22 + 1))
        break;
      LODWORD(RootTensor) = *v22;
      v24 = RootTensor >> 8;
LABEL_27:
      v27 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0, 0)+ 88);
      v28 = (char *)a7[1];
      v29 = (char *)a7[2];
      if (v28 >= v29)
      {
        v31 = 0x4EC4EC4EC4EC4EC5 * ((v28 - (_BYTE *)*a7) >> 3);
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) > 0x276276276276276)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v33 = 0x4EC4EC4EC4EC4EC5 * ((v29 - (_BYTE *)*a7) >> 3);
        if (2 * v33 > v32)
          v32 = 2 * v33;
        if (v33 >= 0x13B13B13B13B13BLL)
          v34 = 0x276276276276276;
        else
          v34 = v32;
        if (v34)
          v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ZinIrBasicBlock *,ZinIrFactory::ZinIrUnitParser>>>(v49, v34);
        else
          v35 = 0;
        v36 = &v35[104 * v31];
        *v36 = v19;
        *(_OWORD *)(v36 + 1) = v55;
        *(_OWORD *)(v36 + 17) = *(_OWORD *)v56;
        *((_QWORD *)v36 + 4) = *(_QWORD *)&v56[15];
        v36[40] = 1;
        *((_DWORD *)v36 + 12) = v27;
        v36[52] = 1;
        *((_WORD *)v36 + 28) = RootTensor | (v24 << 8);
        v36[64] = 0;
        v36[72] = 0;
        v36[80] = 0;
        v36[96] = 0;
        v38 = (char *)*a7;
        v37 = (char *)a7[1];
        v39 = v36;
        if (v37 != *a7)
        {
          do
          {
            v40 = *(_OWORD *)(v37 - 104);
            v41 = *(_OWORD *)(v37 - 88);
            *(_OWORD *)(v39 - 72) = *(_OWORD *)(v37 - 72);
            *(_OWORD *)(v39 - 88) = v41;
            *(_OWORD *)(v39 - 104) = v40;
            v42 = *(_OWORD *)(v37 - 56);
            v43 = *(_OWORD *)(v37 - 40);
            v44 = *(_OWORD *)(v37 - 24);
            *((_DWORD *)v39 - 2) = *((_DWORD *)v37 - 2);
            *(_OWORD *)(v39 - 24) = v44;
            *(_OWORD *)(v39 - 40) = v43;
            *(_OWORD *)(v39 - 56) = v42;
            v39 -= 104;
            v37 -= 104;
          }
          while (v37 != v38);
          v37 = (char *)*a7;
        }
        v30 = v36 + 104;
        *a7 = v39;
        a7[1] = v36 + 104;
        a7[2] = &v35[104 * v34];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v28 = v19;
        *(_OWORD *)(v28 + 1) = v55;
        *(_OWORD *)(v28 + 17) = *(_OWORD *)v56;
        *((_QWORD *)v28 + 4) = *(_QWORD *)&v56[15];
        v28[40] = 1;
        *((_DWORD *)v28 + 12) = v27;
        v28[52] = 1;
        *((_WORD *)v28 + 28) = RootTensor | (v24 << 8);
        v28[64] = 0;
        v28[72] = 0;
        v28[80] = 0;
        v28[96] = 0;
        v30 = v28 + 104;
      }
      a7[1] = v30;
LABEL_44:
      ++v13;
      if (++v12 == v51)
        return;
    }
    if (a5 == 1)
    {
      v19 = *(_BYTE *)(a4 + 40);
      v25 = v48[1];
      v55 = *v48;
      *(_OWORD *)v56 = v25;
      *(_QWORD *)&v56[15] = *(_QWORD *)((char *)v48 + 31);
    }
    else
    {
      v26 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v26);
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)RootTensor + 12) + 64) + 8) - 28) < 3
        || !std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v47, &v53))
      {
        LOBYTE(RootTensor) = 0;
        goto LABEL_26;
      }
      v54 = v53;
      if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v46, &v54))
      {
        LOBYTE(RootTensor) = ZinMirSpatialSplitUtils::IsL2Resident(RootTensor, v45);
        goto LABEL_26;
      }
    }
    LOBYTE(RootTensor) = 1;
LABEL_26:
    LOBYTE(v24) = 1;
    goto LABEL_27;
  }
}

void ZinMirSpatialSplitLatencyCostModel::ConstructCustomInputTensorInfoOrgLayer(uint64_t a1, ZinIrOpLayer *a2, void **a3, uint64_t *a4)
{
  _QWORD *v4;
  unint64_t v8;
  uint64_t v9;
  ZinIrTensor *v10;
  ZinIrTensor *RootTensor;
  uint64_t InputTensor;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int16 IsL2Resident;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  __int128 v44;
  _BYTE v45[23];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*((_QWORD *)a2 + 11);
  v43 = (_QWORD *)*((_QWORD *)a2 + 12);
  if (v4 != v43)
  {
    v8 = 0;
    v41 = (uint64_t)(a3 + 2);
    v42 = (_QWORD *)(a1 + 80);
    do
    {
      v9 = *v4;
      v10 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v4 + 32))(*v4, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v10);
      if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a2 + 120))(a2))
        goto LABEL_10;
      InputTensor = ZinIrOpLayer::GetInputTensor(a2, v8);
      (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *))(*(_QWORD *)a2 + 128))(&v44, a2);
      v13 = v44;
      if (*((_QWORD *)&v44 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v13 + 1) + 16))(*((_QWORD *)&v13 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v13 + 1));
        }
      }
      if (InputTensor != (_QWORD)v13)
      {
LABEL_10:
        v16 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0);
        v17 = *(_BYTE *)(v16 + 48);
        v18 = *(_OWORD *)(v16 + 65);
        v44 = *(_OWORD *)(v16 + 49);
        *(_OWORD *)v45 = v18;
        *(_QWORD *)&v45[15] = *(_QWORD *)(v16 + 80);
        IsL2Resident = ZinMirSpatialSplitUtils::IsL2Resident(RootTensor, v42);
        v20 = *a4;
        v21 = a4[1];
        if (*a4 != v21)
        {
          if (v8 >= (v21 - v20) >> 1)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v22 = (unsigned __int8 *)(v20 + 2 * v8);
          if (v22[1])
            IsL2Resident = *v22;
        }
        v23 = *((_DWORD *)RootTensor + 22);
        v24 = (char *)a3[1];
        v25 = (char *)a3[2];
        if (v24 >= v25)
        {
          v27 = 0x4EC4EC4EC4EC4EC5 * ((v24 - (_BYTE *)*a3) >> 3);
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) > 0x276276276276276)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v29 = 0x4EC4EC4EC4EC4EC5 * ((v25 - (_BYTE *)*a3) >> 3);
          if (2 * v29 > v28)
            v28 = 2 * v29;
          if (v29 >= 0x13B13B13B13B13BLL)
            v30 = 0x276276276276276;
          else
            v30 = v28;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ZinIrBasicBlock *,ZinIrFactory::ZinIrUnitParser>>>(v41, v30);
          else
            v31 = 0;
          v32 = &v31[104 * v27];
          *v32 = v17;
          *(_OWORD *)(v32 + 1) = v44;
          *(_OWORD *)(v32 + 17) = *(_OWORD *)v45;
          *((_QWORD *)v32 + 4) = *(_QWORD *)&v45[15];
          v32[40] = 1;
          *((_DWORD *)v32 + 12) = v23;
          v32[52] = 1;
          *((_WORD *)v32 + 28) = IsL2Resident | 0x100;
          v32[64] = 0;
          v32[72] = 0;
          v32[80] = 0;
          v32[96] = 0;
          v34 = (char *)*a3;
          v33 = (char *)a3[1];
          v35 = v32;
          if (v33 != *a3)
          {
            do
            {
              v36 = *(_OWORD *)(v33 - 104);
              v37 = *(_OWORD *)(v33 - 88);
              *(_OWORD *)(v35 - 72) = *(_OWORD *)(v33 - 72);
              *(_OWORD *)(v35 - 88) = v37;
              *(_OWORD *)(v35 - 104) = v36;
              v38 = *(_OWORD *)(v33 - 56);
              v39 = *(_OWORD *)(v33 - 40);
              v40 = *(_OWORD *)(v33 - 24);
              *((_DWORD *)v35 - 2) = *((_DWORD *)v33 - 2);
              *(_OWORD *)(v35 - 24) = v40;
              *(_OWORD *)(v35 - 40) = v39;
              *(_OWORD *)(v35 - 56) = v38;
              v35 -= 104;
              v33 -= 104;
            }
            while (v33 != v34);
            v33 = (char *)*a3;
          }
          v26 = v32 + 104;
          *a3 = v35;
          a3[1] = v32 + 104;
          a3[2] = &v31[104 * v30];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *v24 = v17;
          *(_OWORD *)(v24 + 1) = v44;
          *(_OWORD *)(v24 + 17) = *(_OWORD *)v45;
          *((_QWORD *)v24 + 4) = *(_QWORD *)&v45[15];
          v24[40] = 1;
          *((_DWORD *)v24 + 12) = v23;
          v24[52] = 1;
          *((_WORD *)v24 + 28) = IsL2Resident | 0x100;
          v24[64] = 0;
          v24[72] = 0;
          v24[80] = 0;
          v24[96] = 0;
          v26 = v24 + 104;
        }
        a3[1] = v26;
      }
      ++v8;
      ++v4;
    }
    while (v4 != v43);
  }
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ConstructCustomOutputTensorInfoSplitLayer(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t result;
  ZinIrOpLayer **v15;
  ZinIrOpLayer **v16;
  uint64_t v17;
  _QWORD *v18;
  ZinIrTensor *v19;
  ZinIrTensor *RootTensor;
  ZinIrOpLayer *v21;

  v11 = *(unsigned __int8 *)(a6 + 40);
  v12 = *(_QWORD *)(a4 + 72);
  v13 = *(_OWORD *)(a4 + 56);
  *(_OWORD *)a6 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(a6 + 16) = v13;
  *(_QWORD *)(a6 + 32) = v12;
  if (!v11)
    *(_BYTE *)(a6 + 40) = 1;
  *(_WORD *)(a6 + 56) = 257;
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a3 + 32))(a3, 0, 0);
  *(_DWORD *)(a6 + 48) = *(_DWORD *)(result + 88);
  *(_BYTE *)(a6 + 52) = 1;
  v15 = (ZinIrOpLayer **)a3[14];
  v16 = (ZinIrOpLayer **)a3[15];
  if (v15 != v16)
  {
    v17 = a2 + 72;
    v18 = (_QWORD *)(a1 + 80);
    do
    {
      v21 = *v15;
      result = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v17, &v21);
      if (!result)
      {
        v19 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a3 + 32))(a3, 0, 0);
        RootTensor = ZinIrTensor::GetRootTensor(v19);
        result = ZinMirSpatialSplitUtils::IsL2Resident(RootTensor, v18);
        *(_WORD *)(a6 + 56) = result | 0x100;
      }
      ++v15;
    }
    while (v15 != v16);
  }
  if ((a5 & 0xFF00) != 0)
    *(_WORD *)(a6 + 56) = a5 | 0x100;
  return result;
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ConstructCustomOutputTensorInfoOrgLayer(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  ZinIrTensor *v12;
  ZinIrTensor *RootTensor;
  uint64_t result;
  __int16 v15;

  v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v9 = *(unsigned __int8 *)(a3 + 40);
  v10 = *(_QWORD *)(v8 + 80);
  v11 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)a3 = *(_OWORD *)(v8 + 48);
  *(_OWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 32) = v10;
  if (!v9)
    *(_BYTE *)(a3 + 40) = 1;
  v12 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v12);
  result = ZinMirSpatialSplitUtils::IsL2Resident(RootTensor, (_QWORD *)(a1 + 80));
  v15 = a4;
  if ((a4 & 0xFF00) == 0)
    v15 = result;
  *(_WORD *)(a3 + 56) = v15 | 0x100;
  return result;
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer(uint64_t a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, std::string::size_type a5, ZinEngineLayerMirInfo **this, _QWORD *a7, int *a8, uint64_t a9, _OWORD *a10)
{
  _QWORD *v15;
  unint64_t v16;
  void *v17;
  char *v18;
  char *v19;
  int View;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  size_t v35;
  std::string *v36;
  const void *v37;
  char v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  void **v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  ZinIrOpLayer *v73;
  uint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  char v78;
  char v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  ZinIrOpLayer **v92;
  ZinIrOpLayer **v93;
  ZinIrOpLayer **v94;
  ZinIrOpLayer *v95;
  int v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void **v100;
  void **v101;
  ZinIrTensor *v102;
  ZinIrTensor *RootTensor;
  int v104;
  _WORD *v105;
  _WORD *v106;
  int v107;
  _BOOL8 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  __int16 v118;
  ZinEngineLayerMirInfo *v119;
  unsigned int v120;
  char v121;
  BOOL v122;
  int v123;
  ZinIrOpLayer **v125;
  ZinIrOpLayer **v126;
  int *v127;
  void *__p[2];
  __int128 v132;
  uint64_t v133;
  char v134;
  _OWORD v135[14];
  std::string v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  _OWORD v139[2];
  uint64_t v140;
  int64x2_t v141;
  int64x2_t v142;
  uint64_t v143;
  std::string v144;
  std::string v145;
  std::string v146;
  void *v147[2];
  int64_t v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  __int128 v156;
  std::string::size_type v157;
  ZinIrOpLayer **v158;
  char *v159;
  char *v160;
  std::string v161;
  char v162;
  std::string v163;
  uint64_t v164;

  v164 = *MEMORY[0x24BDAC8D0];
  ZinANELayer::DeleteMirInfo(this);
  v161.__r_.__value_.__r.__words[0] = a5;
  *(_QWORD *)&v135[0] = &v161;
  *((_QWORD *)&v135[0] + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, v135);
  ZinIrOpLayerGraph::AddNode(a2, (ZinIrOpLayer *)this, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v132 = __p[1];
    operator delete(__p[1]);
  }
  v15 = operator new(8uLL);
  v127 = a8;
  v158 = (ZinIrOpLayer **)v15;
  *v15 = this;
  v160 = (char *)(v15 + 1);
  v159 = (char *)(v15 + 1);
  if (*(_QWORD *)(a5 + 96) == *(_QWORD *)(a5 + 88))
  {
LABEL_143:
    ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)v135);
    if (ZinMirSetActiveNE((ZinIrOpLayer *)this, (CFArrayRef *)v135))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer();
    }
    else
    {
      v100 = *(void ***)(a5 + 88);
      v101 = *(void ***)(a5 + 96);
      if (v100 == v101)
      {
LABEL_150:
        v104 = 1;
      }
      else
      {
        while (1)
        {
          __p[0] = *v100;
          if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a3 + 72, (ZinIrOpLayer **)__p))
          {
            v102 = (ZinIrTensor *)(*(uint64_t (**)(void *, _QWORD, _QWORD))(*(_QWORD *)__p[0] + 32))(__p[0], 0, 0);
            RootTensor = ZinIrTensor::GetRootTensor(v102);
            if (!ZinMirSpatialSplitUtils::IsNonResident(RootTensor, (_QWORD *)(a1 + 80)))
              break;
          }
          if (++v100 == v101)
            goto LABEL_150;
        }
        v104 = 0;
      }
      v105 = *(_WORD **)a9;
      v106 = *(_WORD **)(a9 + 8);
      if (*(_WORD **)a9 != v106)
      {
        LOBYTE(v104) = 1;
        do
        {
          if ((unsigned __int16)*v105 <= 0xFFu)
            ZinAssertImpl("If any residency of input is provided, all residency must be provided");
          v104 = v104 & (*v105++ != 0);
        }
        while (v105 != v106);
      }
      ZinMirL2Config::ZinMirSetTileHeight((ZinEngineLayerMirInfo *)((char *)this[33] + 120), (const ZinANELayer *)this, v104);
      if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a5))
      {
        if (*(_BYTE *)(a1 + 72))
        {
          v104 = 1;
          v107 = 1;
        }
        else
        {
          if (*(_BYTE *)(a9 + 25))
            v122 = *(_BYTE *)(a9 + 24) == 0;
          else
            v122 = 0;
          v107 = !v122;
        }
        ZinMirL2Config::SetPatchShape((uint64_t)this[33] + 120, (const ZinPELayer *)this, v104, v107, **(const ZinIrHalParameters ***)(a1 + 56));
      }
      else
      {
        if (*(_BYTE *)(a9 + 24))
          v117 = 1;
        else
          v117 = *(_BYTE *)(a9 + 25) == 0;
        v161.__r_.__value_.__s.__data_[4] = 0;
        if (v117)
          v118 = 256;
        else
          v118 = 0;
        *(_WORD *)&v161.__r_.__value_.__s.__data_[2] = 1;
        LOWORD(v161.__r_.__value_.__l.__data_) = v118 | v104;
        v119 = this[33];
        v120 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)this, 0) + 88);
        ZinIrOpLayer::GetInputTensorDimensions((ZinIrOpLayer *)this, __p);
        v121 = ZinMirL2Config::ZinMirSetWorkUnitShape((uint64_t)v119 + 120, this, v120);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((v121 & 1) == 0)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer();
          goto LABEL_182;
        }
      }
      TiledLayerTensorRegions::TiledLayerTensorRegions((TiledLayerTensorRegions *)__p, (const TiledLayerTensorRegions *)a7);
      v134 = 1;
      v123 = ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer(a1, a3, (ZinIrOpLayer *)this, (ZinIrOpLayer *)a5, (uint64_t)__p, v127, 0, a9, a10);
      std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
      if (!v123)
      {
        v125 = v158;
        v126 = (ZinIrOpLayer **)v159;
        while (v125 != v126)
          ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *v125++, 0);
        v116 = 0;
        goto LABEL_183;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer();
    }
LABEL_182:
    v116 = 3;
LABEL_183:
    ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)v135);
    goto LABEL_184;
  }
  v16 = 0;
  while (1)
  {
    SplitInfo::GetSplitDimensions(a4, (char **)__p);
    v17 = __p[0];
    v18 = (char *)__p[1];
    if (__p[0] == __p[1])
    {
      v22 = 1;
      if (__p[0])
        goto LABEL_12;
    }
    else
    {
      v19 = (char *)__p[0] + 4;
      do
      {
        View = ZinMirSpatialSplitUtils::ShouldCreateView((ZinIrOpLayer *)a5, v16, *((_DWORD *)v19 - 1));
        if (v19 == v18)
          v21 = 1;
        else
          v21 = View;
        v19 += 4;
      }
      while ((v21 & 1) == 0);
      v22 = View ^ 1;
      v17 = __p[0];
      if (__p[0])
      {
LABEL_12:
        __p[1] = v17;
        operator delete(v17);
      }
    }
    if (v22)
      break;
    v23 = a7[16] + 80 * v16;
    v24 = *(_QWORD *)(v23 + 72);
    v25 = *(_OWORD *)(v23 + 56);
    *(_OWORD *)__p = *(_OWORD *)(v23 + 40);
    v132 = v25;
    v133 = v24;
    v26 = *(_OWORD *)v23;
    v27 = *(_OWORD *)(v23 + 16);
    *(_QWORD *)&v135[2] = *(_QWORD *)(v23 + 32);
    v135[0] = v26;
    v135[1] = v27;
    v28 = *(_QWORD *)(*(_QWORD *)(a5 + 88) + 8 * v16);
    v29 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0, 0);
    if ((*(unsigned int (**)(std::string::size_type, uint64_t))(*(_QWORD *)a5 + 200))(a5, v29))
    {
      *(_QWORD *)&v135[0] = *(_QWORD *)(a7[16] + 80 * v16);
      memset((char *)v135 + 8, 0, 32);
      v30 = *(_QWORD *)(*(_QWORD *)(a5 + 88) + 8 * v16);
      v31 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0, 0);
      v32 = *(_OWORD *)(v31 + 64);
      *(_OWORD *)__p = *(_OWORD *)(v31 + 48);
      v132 = v32;
      v133 = *(_QWORD *)(v31 + 80);
      __p[0] = *(void **)(a7[16] + 80 * v16 + 40);
    }
    SplitInfo::GetSplitDimensions(a4, &v161.__r_.__value_.__l.__data_);
    v33 = ZinMirSpatialSplitUtils::AdjustDimensionsForBroadcast(v135, __p, (ZinIrOpLayer *)a5, (uint64_t)&v161, v16);
    if (v161.__r_.__value_.__r.__words[0])
    {
      v161.__r_.__value_.__l.__size_ = v161.__r_.__value_.__r.__words[0];
      operator delete(v161.__r_.__value_.__l.__data_);
    }
    if (v33)
      ZinAssertImpl("Latency Cost Model Internal Error");
    v34 = *(_QWORD *)(*(_QWORD *)(a5 + 88) + 8 * v16);
    if (*(char *)(v34 + 47) >= 0)
      v35 = *(unsigned __int8 *)(v34 + 47);
    else
      v35 = *(_QWORD *)(v34 + 32);
    std::string::basic_string[abi:ne180100]((uint64_t)&v150, v35 + 1);
    if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v150;
    else
      v36 = (std::string *)v150.__r_.__value_.__r.__words[0];
    if (v35)
    {
      if (*(char *)(v34 + 47) >= 0)
        v37 = (const void *)(v34 + 24);
      else
        v37 = *(const void **)(v34 + 24);
      memmove(v36, v37, v35);
    }
    *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 95;
    v38 = *(_BYTE *)(a5 + 47);
    if (v38 >= 0)
      v39 = (const std::string::value_type *)(a5 + 24);
    else
      v39 = *(const std::string::value_type **)(a5 + 24);
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(a5 + 47);
    else
      v40 = *(_QWORD *)(a5 + 32);
    v41 = std::string::append(&v150, v39, v40);
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append(&v151, "_", 1uLL);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v152.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    TiledLayerTensorRegions::Id::ToStringForIr((TiledLayerTensorRegions::Id *)(a7 + 19), &v149);
    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v149;
    else
      v45 = (std::string *)v149.__r_.__value_.__r.__words[0];
    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v149.__r_.__value_.__r.__words[2]);
    else
      size = v149.__r_.__value_.__l.__size_;
    v47 = std::string::append(&v152, (const std::string::value_type *)v45, size);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v153.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v153, "_", 1uLL);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v154.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v146, "ss_lat");
    v51 = std::string::append(&v146, "_xfm", 4uLL);
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v148 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)v147 = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (v148 >= 0)
      v53 = v147;
    else
      v53 = (void **)v147[0];
    if (v148 >= 0)
      v54 = HIBYTE(v148);
    else
      v54 = (std::string::size_type)v147[1];
    v55 = std::string::append(&v154, (const std::string::value_type *)v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v163, "_", 1uLL);
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v145, v16);
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = &v145;
    else
      v59 = (std::string *)v145.__r_.__value_.__r.__words[0];
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
    else
      v60 = v145.__r_.__value_.__l.__size_;
    v61 = std::string::append(&v155, (const std::string::value_type *)v59, v60);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v136.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    v63 = std::string::append(&v136, "_", 1uLL);
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v161.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v144, *(_QWORD *)(a3 + 136));
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v144;
    else
      v65 = (std::string *)v144.__r_.__value_.__r.__words[0];
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v66 = v144.__r_.__value_.__l.__size_;
    v67 = std::string::append(&v161, (const std::string::value_type *)v65, v66);
    v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v157 = v67->__r_.__value_.__r.__words[2];
    v156 = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v136.__r_.__value_.__l.__data_);
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v145.__r_.__value_.__l.__data_);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    if (SHIBYTE(v148) < 0)
      operator delete(v147[0]);
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v154.__r_.__value_.__l.__data_);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v149.__r_.__value_.__l.__data_);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v152.__r_.__value_.__l.__data_);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v151.__r_.__value_.__l.__data_);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    ZinObjectNameFactory::ZinObjectNameFactory(&v161, &v156);
    v69 = *(_QWORD *)(a5 + 16);
    ZinObjectNameFactory::CreateName(v70, 0, &v136);
    v71 = *(_QWORD *)(*(_QWORD *)(a5 + 88) + 8 * v16);
    v72 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0, 0);
    v139[0] = v135[0];
    v139[1] = v135[1];
    v141 = vdupq_n_s64(1uLL);
    v142 = v141;
    v140 = *(_QWORD *)&v135[2];
    v143 = 1;
    v73 = (ZinIrOpLayer *)ZinBuilder::CreateView(v69, (uint64_t)&v136, v72, (__int128 *)__p, (uint64_t)v139);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v136.__r_.__value_.__l.__data_);
    if (!(*(unsigned int (**)(std::string::size_type))(*(_QWORD *)a5 + 120))(a5))
      goto LABEL_107;
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)a5 + 128))(&v136, a5);
    if ((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)a5 + 152))(a5, v136.__r_.__value_.__r.__words[0]) != 1)ZinAssertImpl("wrong kernel-tensor index");
    v74 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a5 + 88) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a5 + 88) + 8), 0, 0);
    v75 = (std::__shared_weak_count *)v74[1];
    v137 = *v74;
    v138 = v75;
    if (v75)
    {
      p_shared_owners = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldxr(p_shared_owners);
      while (__stxr(v77 + 1, p_shared_owners));
    }
    v78 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t *))*this + 30))(this, &v137);
    v79 = v78;
    v80 = v138;
    if (!v138)
      goto LABEL_101;
    v81 = (unint64_t *)&v138->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
      if ((v79 & 1) != 0)
      {
LABEL_102:
        v83 = (std::__shared_weak_count *)v136.__r_.__value_.__l.__size_;
        if (v136.__r_.__value_.__l.__size_)
        {
          v84 = (unint64_t *)(v136.__r_.__value_.__l.__size_ + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
LABEL_107:
        v163.__r_.__value_.__r.__words[0] = a5;
        v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
        v155.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v136, &v155);
        ZinIrOpLayerGraph::AddNode(a2, v73, (ZinIrOpLayer ***)&v136);
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
        if (v136.__r_.__value_.__l.__size_)
        {
          v136.__r_.__value_.__r.__words[2] = v136.__r_.__value_.__l.__size_;
          operator delete((void *)v136.__r_.__value_.__l.__size_);
        }
        ZinIrOpLayerGraph::AddEdge((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(a5 + 88) + 8 * v16), (uint64_t)v73, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v73, (uint64_t)this, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v86 = v159;
        if (v159 >= v160)
        {
          v88 = (v159 - (char *)v158) >> 3;
          if ((unint64_t)(v88 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v89 = (v160 - (char *)v158) >> 2;
          if (v89 <= v88 + 1)
            v89 = v88 + 1;
          if ((unint64_t)(v160 - (char *)v158) >= 0x7FFFFFFFFFFFFFF8)
            v90 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v90 = v89;
          if (v90)
            v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v160, v90);
          else
            v91 = 0;
          v92 = (ZinIrOpLayer **)&v91[8 * v88];
          *v92 = v73;
          v87 = (char *)(v92 + 1);
          v94 = v158;
          v93 = (ZinIrOpLayer **)v159;
          if (v159 != (char *)v158)
          {
            do
            {
              v95 = *--v93;
              *--v92 = v95;
            }
            while (v93 != v94);
            v93 = v158;
          }
          v158 = v92;
          v159 = v87;
          v160 = &v91[8 * v90];
          if (v93)
            operator delete(v93);
        }
        else
        {
          *(_QWORD *)v159 = v73;
          v87 = v86 + 8;
        }
        v159 = v87;
        v96 = 1;
        goto LABEL_137;
      }
    }
    else
    {
LABEL_101:
      if ((v78 & 1) != 0)
        goto LABEL_102;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LOWORD(v155.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Could not split MatMul", (uint8_t *)&v155, 2u);
    }
    v97 = (std::__shared_weak_count *)v136.__r_.__value_.__l.__size_;
    if (v136.__r_.__value_.__l.__size_)
    {
      v98 = (unint64_t *)(v136.__r_.__value_.__l.__size_ + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v96 = 0;
LABEL_137:
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
    if (v162 < 0)
      operator delete((void *)v161.__r_.__value_.__l.__size_);
    if (SHIBYTE(v157) < 0)
      operator delete((void *)v156);
    if (!v96)
      goto LABEL_160;
LABEL_142:
    if (++v16 >= (uint64_t)(*(_QWORD *)(a5 + 96) - *(_QWORD *)(a5 + 88)) >> 3)
      goto LABEL_143;
  }
  if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(a5 + 88) + 8 * v16), (uint64_t)this, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) != 0)goto LABEL_142;
  v108 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v108)
    ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer(v108, v109, v110, v111, v112, v113, v114, v115);
LABEL_160:
  v116 = 3;
LABEL_184:
  if (v158)
  {
    v159 = (char *)v158;
    operator delete(v158);
  }
  return v116;
}

void sub_206E8C3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  void *v53;

  if (__p)
    operator delete(__p);
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&a51);
  v53 = *(void **)(v51 - 200);
  if (v53)
  {
    *(_QWORD *)(v51 - 192) = v53;
    operator delete(v53);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer(ZinMirSpatialSplitLatencyCostModel *this, uint64_t **a2, const ZinANELayer *a3, ZinIrOpLayer *a4, ZinNELayer *a5)
{
  _BOOL4 v9;
  _BOOL4 v10;
  ZinMirSpatialSplitLatencyCostModel *v11;
  int v12;
  _BOOL4 v14;
  _BOOL4 v15;
  _QWORD *v16;
  uint64_t v17;
  ZinIrOpLayer **v18;
  void *__p;
  void *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v21[0] = a3;
  v16 = v21;
  v17 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v18, &v16);
  v9 = ZinIrOpLayerGraph::AddNode(a2, a4, &v18);
  v18 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v21[0] = a3;
  v16 = v21;
  v17 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v18, &v16);
  v10 = ZinIrOpLayerGraph::AddNode(a2, a5, &v18);
  v18 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v11 = (ZinMirSpatialSplitLatencyCostModel *)ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)a4, (uint64_t)a5, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v12 = (int)v11;
  if (ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer(v11, a5))
    return 3;
  v14 = ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(*((_QWORD *)a5 + 33) + 120), a5, 1);
  v15 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a4, 0);
  if (((v9 && v10) & v12 & v14 & v15 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a5, 0)) != 0)
    return 0;
  else
    return 3;
}

void sub_206E8C840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinMirSpatialSplitLatencyCostModel::StartNewSubgraph(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  void *__p;
  void *v13;
  uint64_t v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;

  v5 = (_QWORD *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>>>::clear(a1 + 8);
  v6 = *(_QWORD **)(a2 + 72);
  if (v6 != (_QWORD *)(a2 + 80))
  {
    do
    {
      v7 = v6[4];
      v15 = 0;
      v16 = 0;
      v17 = 0;
      std::vector<ZinIrOpLayer *>::reserve(&v15, a3[1] * *a3);
      v11 = v7;
      v13 = 0;
      v14 = 0;
      __p = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v15, (uint64_t)v16, (v16 - (_BYTE *)v15) >> 3);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>>>::__emplace_unique_impl<std::pair<ZinIrOpLayer*,std::vector<ZinIrOpLayer*>>>(v5, (uint64_t)&v11);
      if (__p)
      {
        v13 = __p;
        operator delete(__p);
      }
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != (_QWORD *)(a2 + 80));
  }
}

void sub_206E8C97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t std::__synth_three_way[abi:ne180100]<BOOL,BOOL>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 == v3;
  if (v2 < v3)
    v5 = -1;
  else
    v5 = 1;
  if (v4)
    return 0;
  else
    return v5;
}

uint64_t std::__lexicographical_compare_three_way_fast_path[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::strong_ordering (*)(BOOL const&,BOOL const&)>(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t (**a9)(char *, char *))
{
  int64_t v9;
  int64_t v10;
  int64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t (*v16)(char *, char *);
  uint64_t result;
  unsigned int v18;
  char v19;
  char v20;

  v9 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  v10 = a8 - (unint64_t)a6 + 8 * (a7 - (_QWORD)a5);
  if (v10 >= v9)
    v11 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  else
    v11 = a8 - (unint64_t)a6 + 8 * (a7 - (_QWORD)a5);
  if (v11 < 1)
  {
LABEL_14:
    if (v9 < v10)
      v18 = -1;
    else
      v18 = 1;
    if (v9 == v10)
      return 0;
    else
      return v18;
  }
  else
  {
    v12 = a5;
    v13 = a1;
    v14 = a2;
    v15 = a6;
    while (1)
    {
      v16 = *a9;
      v20 = (*v13 >> v14) & 1;
      v19 = (*v12 >> v15) & 1;
      result = v16(&v20, &v19);
      if ((_BYTE)result)
        break;
      v13 += v14 == 63;
      if (v14 == 63)
        v14 = 0;
      else
        ++v14;
      v12 += v15 == 63;
      if (v15 == 63)
        v15 = 0;
      else
        ++v15;
      if (!--v11)
        goto LABEL_14;
    }
  }
  return result;
}

_QWORD *std::unique_ptr<ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>>::reset[abi:ne180100](_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::~ZinIntervalTree(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

_QWORD *ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::~ZinIntervalTree(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;

  ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::GetTreeNodes(a1, (void **)&v5);
  v2 = v5;
  v3 = v6;
  if (v5 != v6)
  {
    do
    {
      if (*v2)
        MEMORY[0x20BD002F8](*v2, 0x1060C4032101C16);
      ++v2;
    }
    while (v2 != v3);
    v2 = v5;
  }
  if (v2)
  {
    v6 = v2;
    operator delete(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::GetTreeNodes@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  _OWORD v19[2];
  __int128 v20;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v20 = 0u;
  memset(v19, 0, sizeof(v19));
  if (*a1)
  {
    std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::push_back(v19, a1);
    for (i = *((_QWORD *)&v20 + 1); *((_QWORD *)&v20 + 1); i = *((_QWORD *)&v20 + 1))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v19[0] + 1) + (((unint64_t)v20 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v20 & 0x1FF));
      *(_QWORD *)&v20 = v20 + 1;
      *((_QWORD *)&v20 + 1) = i - 1;
      if ((unint64_t)v20 >= 0x400)
      {
        operator delete(**((void ***)&v19[0] + 1));
        *((_QWORD *)&v19[0] + 1) += 8;
        *(_QWORD *)&v20 = v20 - 512;
      }
      if (*(_QWORD *)(v4 + 64))
      {
        v18 = *(_QWORD *)(v4 + 64);
        std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      if (*(_QWORD *)(v4 + 72))
      {
        v18 = *(_QWORD *)(v4 + 72);
        std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      v6 = a2[1];
      v5 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v5)
      {
        v8 = ((char *)v6 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v9 = v5 - (_QWORD)*a2;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v11);
        else
          v12 = 0;
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = v4;
        v7 = v13 + 8;
        v15 = (char *)*a2;
        v14 = (char *)a2[1];
        if (v14 != *a2)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)*a2;
        }
        *a2 = v13;
        a2[1] = v7;
        a2[2] = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v6 = v4;
        v7 = v6 + 1;
      }
      a2[1] = v7;
    }
  }
  return std::deque<unsigned long>::~deque[abi:ne180100](v19);
}

void sub_206E8CD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrTensor const*,ZinLiveRange> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_206E8D0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
      operator delete(v4);
    operator delete(a2);
  }
}

uint64_t ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::InsertNodeVisitor(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4, int *a5)
{
  uint64_t v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inserted;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *a5 = 0;
  if (!a2)
  {
    v8 = operator new();
    *(_QWORD *)v8 = a3;
    *(_OWORD *)(v8 + 8) = *a4;
    v16 = *a4;
    *(_OWORD *)(v8 + 24) = *a4;
    *(_QWORD *)(v8 + 40) = v16;
    *(_BYTE *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 64) = 0;
    *(_QWORD *)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 56) = 0;
    return v8;
  }
  v8 = (uint64_t)a2;
  v10 = a2[1];
  v11 = *(_QWORD *)a4 < v10;
  if (*(_QWORD *)a4 != v10 || (v12 = *((_QWORD *)a4 + 1), v13 = a2[2], v11 = v12 < v13, v12 != v13))
  {
    if (!v11)
      goto LABEL_16;
LABEL_10:
    inserted = ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::InsertNodeVisitor(a1, a2[8], a3, a4, a5);
    if (inserted)
      *(_QWORD *)(inserted + 56) = v8;
    *(_QWORD *)(v8 + 64) = inserted;
    goto LABEL_19;
  }
  v14 = *a2;
  if (!a3 || !v14)
  {
    if (!a3 || v14)
      goto LABEL_16;
    goto LABEL_10;
  }
  if (*(_QWORD *)(a3 + 8) < *(_QWORD *)(v14 + 8))
    goto LABEL_10;
LABEL_16:
  v17 = ZinIntervalTree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,ZinLiveRange>::InsertNodeVisitor(a1, a2[9], a3, a4, a5);
  if (v17)
    *(_QWORD *)(v17 + 56) = v8;
  *(_QWORD *)(v8 + 72) = v17;
LABEL_19:
  ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v8);
  switch(*a5)
  {
    case 1:
      goto LABEL_23;
    case 2:
      v18 = *(_QWORD **)(v8 + 64);
      v19 = (_QWORD *)v18[9];
      v20 = v19[8];
      if (v20)
        *(_QWORD *)(v20 + 56) = v18;
      v18[9] = v20;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v18);
      v18[7] = v19;
      v19[8] = v18;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v19);
      v19[7] = v8;
      *(_QWORD *)(v8 + 64) = v19;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v8);
LABEL_23:
      v21 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateClockwise(a1, (_QWORD *)v8);
      goto LABEL_28;
    case 3:
      v22 = *(_QWORD **)(v8 + 72);
      v23 = (_QWORD *)v22[8];
      v24 = v23[9];
      if (v24)
        *(_QWORD *)(v24 + 56) = v22;
      v22[8] = v24;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v22);
      v22[7] = v23;
      v23[9] = v22;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v23);
      v23[7] = v8;
      *(_QWORD *)(v8 + 72) = v23;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v8);
      goto LABEL_27;
    case 4:
LABEL_27:
      v21 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateCounterClockwise(a1, (_QWORD *)v8);
LABEL_28:
      *(_BYTE *)(v8 + 48) = 0;
      *((_BYTE *)v21 + 48) = 1;
      v8 = (uint64_t)v21;
      break;
    default:
      break;
  }
  if (ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::HasDoubleRed(v8, a5))
  {
    v25 = *(_QWORD *)(v8 + 56);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 64);
      v27 = v26;
      if (v26 == v8)
        v27 = *(_QWORD *)(v25 + 72);
      if (v27 && !*(_BYTE *)(v27 + 48))
      {
        *(_BYTE *)(v25 + 48) = 0;
        v28 = *(_QWORD *)(v25 + 72);
        if (v26)
          *(_BYTE *)(v26 + 48) = 1;
        if (v28)
          *(_BYTE *)(v28 + 48) = 1;
        *a5 = 0;
      }
    }
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::find<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey::operator<(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey::operator<(a2, v5 + 4))
    return v2;
  return v5;
}

uint64_t *std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__emplace_unique_key_args<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::piecewise_construct_t const&,std::tuple<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__find_equal<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__find_equal<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey::operator<(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

double std::__tree<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::__map_value_compare<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,std::less<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey>,true>,std::allocator<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = *a2;
  *((_QWORD *)v6 + 4) = *(_QWORD *)v7;
  std::vector<BOOL>::vector((_QWORD *)v6 + 5, v7 + 8);
  v6[64] = *(_BYTE *)(v7 + 32);
  result = 0.0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206E8D5C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ZinMirSpatialSplitLatencyCostModel::OriginalPerformanceCacheKey,LatencyData>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[5];
    if (v3)
      operator delete(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<ZinIrOpLayer*>>>>::__emplace_unique_impl<std::pair<ZinIrOpLayer*,std::vector<ZinIrOpLayer*>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *inserted;
  char v4;
  _QWORD *v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__construct_node<std::pair<ZinIrOpLayer*,std::vector<std::optional<TiledLayerTensorRegions>>>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    v5 = __p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_206E8D6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void ZinMirSpatialSplitLatencyCostModel::ComputeLayerCostSplitLayer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: Performance model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: copy_layer must be ZinANELayer*, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: when split_layers has more than two layers, then it should have exactly three layers, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: failed workunit selection, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinMirSpatialSplitLatencyCostModel::CreateSplitLayers()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "copy_layer must be ZinNELayer*, line:%d, file:%s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "The size of split_layers must be three, line:%d, file:%s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationSplitLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "PerformPerfEstimationSplitLayer isn't successful.\n", a5, a6, a7, a8, 0);
}

void ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForCopyLayer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: failed workunit selection, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: failed SetActiveNE, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinMirSpatialSplitLatencyCostModel::PerformPerfEstimationOrgLayer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: Performance model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ERROR: Performance model call isn't successful, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: failed workunit selection, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Failed set active ne, line: %d, file: %s", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinMirSpatialSplitLatencyCostModel::ComputeMirInfoForSplitLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to add edge", a5, a6, a7, a8, 0);
}

unint64_t ZinIrCodegenValueToRegister(unint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  int v6;
  unint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (v4 <= a1)
  {
    v4 = a2[1];
    if (v4 >= a1)
    {
      return a1;
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v6 = 134218240;
      v7 = a1;
      v8 = 1024;
      v9 = v4;
      _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Numerical overflow: %zul < %ud \n", (uint8_t *)&v6, 0x12u);
      return a2[1];
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v6 = 134218240;
    v7 = a1;
    v8 = 1024;
    v9 = v4;
    _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Numerical underflow: %zul < %ud \n", (uint8_t *)&v6, 0x12u);
    return *a2;
  }
  return v4;
}

uint64_t ZinIrCodeGenGetBarIdForCoeffKDMABlock(const ZinIrOpLayer *a1, const ZinIrMemoryPool *a2, unsigned __int8 *a3)
{
  std::__shared_weak_count *v6;
  ZinIrSection *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v9;
  ZinIrKernel *v10;
  const ZinIrMemoryPool *v11;
  int v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  *a3 = -1;
  if (*((_QWORD *)a1 + 17))
  {
    if ((*(unsigned int (**)(const ZinIrOpLayer *))(*(_QWORD *)a1 + 120))(a1))
    {
      (*(void (**)(uint64_t *__return_ptr, const ZinIrOpLayer *))(*(_QWORD *)a1 + 128))(&v14, a1);
      v6 = v15;
      shared_weak_owners = *(ZinIrSection **)(**(_QWORD **)(*(_QWORD *)(v14 + 104) + 40) + 8);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
LABEL_16:
      if (shared_weak_owners && ZinIrSection::HasValidBarId(shared_weak_owners))
      {
        *a3 = *((_BYTE *)shared_weak_owners + 56);
        return 0;
      }
LABEL_21:
      ZinAssertImpl("Invalid bar id.\n");
    }
    v10 = (ZinIrKernel *)*((_QWORD *)a1 + 17);
    if (!v10)
      goto LABEL_21;
    if (!*((_QWORD *)v10 + 75))
    {
      if ((ZinIrKernel::IsMutable(v10) & 1) == 0)
      {
        v11 = a2;
        v12 = 0;
LABEL_15:
        ZinIrMemoryPool::GetSections((uint64_t)v11, v12, &v14);
        shared_weak_owners = (ZinIrSection *)v15->__shared_weak_owners_;
        std::__list_imp<ZinIrSection *>::clear(&v14);
        goto LABEL_16;
      }
      v10 = (ZinIrKernel *)*((_QWORD *)a1 + 17);
      if (!v10)
        goto LABEL_21;
    }
    if (*((_QWORD *)v10 + 75) || !ZinIrKernel::IsMutable(v10))
      goto LABEL_21;
    v11 = a2;
    v12 = 5;
    goto LABEL_15;
  }
  return 0;
}

uint64_t ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(const ZinIrOpLayer *a1, const ZinIrMemoryPool *a2, unsigned __int8 *a3)
{
  ZinIrKernel *v3;
  uint64_t v6;
  _QWORD v8[3];

  *a3 = -1;
  v3 = (ZinIrKernel *)*((_QWORD *)a1 + 17);
  if (v3 && ZinIrKernel::HasKernelConstData(v3))
  {
    ZinIrMemoryPool::GetSections((uint64_t)a2, 0, v8);
    v6 = *(_QWORD *)(v8[1] + 16);
    std::__list_imp<ZinIrSection *>::clear(v8);
    *a3 = *(_BYTE *)(v6 + 56);
  }
  return 0;
}

BOOL ZinIrCodegenValidBiasShift(ZinDynamicRange **a1, double a2, uint64_t a3, uint64_t a4, float *a5)
{
  _BOOL8 result;
  uint64_t v7;

  v7 = 0;
  ZinDynamicRange::VectorMinMax(*a1, (const ZinIrVector *)((char *)&v7 + 4), (float *)&v7, a5);
  result = 0;
  if (round(*(float *)&v7 * a2) <= 2147483650.0)
    return round(*((float *)&v7 + 1) * a2) >= -2147483650.0;
  return result;
}

uint64_t ZinIrCodegen::PrintContextSwitchInfo(uint64_t a1)
{
  uint64_t v2;
  std::locale::id *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string *v8;
  std::string::size_type size;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::string *v20;
  std::string::size_type v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  std::string::size_type v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  const std::locale::facet *v36;
  std::string v38;
  uint64_t v39;
  std::ios_base v40;
  uint64_t v41;
  int v42;
  std::locale v43;
  std::fstream v44;
  std::ios_base v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v44.__sb_.__extbufnext_ = 0;
  v45.__vftable = (std::ios_base_vtbl *)&unk_24C005E90;
  std::ios_base::init(&v45, v44.__sb_.__extbuf_min_);
  v47 = -1;
  v46 = 0;
  MEMORY[0x20BCFFEA8](v44.__sb_.__extbuf_min_);
  std::fstream::open(&v44, "context_switch_log.txt", 0x10u);
  std::ios_base::clear((std::ios_base *)((char *)&v44 + *((_QWORD *)v44.__sb_.__extbuf_ - 3)), 0);
  v39 = MEMORY[0x24BEDB828] + 24;
  v40.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v40, v44.__sb_.__extbuf_min_);
  v41 = 0;
  v42 = -1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != a1)
  {
    v3 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v4 = *(_QWORD *)(v2 + 16);
      if (*(char *)(v4 + 183) < 0)
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v4 + 160), *(_QWORD *)(v4 + 168));
      else
        v38 = *(std::string *)(v4 + 160);
      v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 200);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, 2))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Context Switch Out Start @ tid : ", 33);
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" , layer_name : ", 16);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = &v38;
        else
          v8 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        else
          size = v38.__r_.__value_.__l.__size_;
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, size);
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
        v11 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, 3))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"L2 to DRAM - Destination Pointer Change @ tid : ", 48);
        v12 = (_QWORD *)std::ostream::operator<<();
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , layer_name : ", 16);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v38;
        else
          v14 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        else
          v15 = v38.__r_.__value_.__l.__size_;
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
        v17 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, 4))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Context Switch Out End @ tid ", 29);
        v18 = (_QWORD *)std::ostream::operator<<();
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" , layer_name : ", 16);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v38;
        else
          v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        else
          v21 = v38.__r_.__value_.__l.__size_;
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
        v23 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, 1))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"DRAM to L2 - Source Pointer Change @ tid : ", 43);
        v24 = (_QWORD *)std::ostream::operator<<();
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" , layer_name : ", 16);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v38;
        else
          v26 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        else
          v27 = v38.__r_.__value_.__l.__size_;
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
        v29 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
      }
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 24))(v5, 0))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Context Switch In End @ tid : ", 30);
        v30 = (_QWORD *)std::ostream::operator<<();
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" , layer_name : ", 16);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v38;
        else
          v32 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        else
          v33 = v38.__r_.__value_.__l.__size_;
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
        std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
        v35 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
        std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
        v36 = std::locale::use_facet(&v43, v3);
        ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a1);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&v44 + *((_QWORD *)v44.__sb_.__extbuf_ - 3)), *(_DWORD *)&v44.__sb_.__extbuf_min_[*((_QWORD *)v44.__sb_.__extbuf_ - 3) + 8] | 4);
  std::ostream::~ostream();
  MEMORY[0x20BCFFEB4](v44.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v45);
}

void std::fstream::open(std::fstream *this, const char *__s, std::ios_base::openmode __mode)
{
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base::iostate v6;

  v4 = std::filebuf::open();
  v5 = (std::ios_base *)((char *)this + *((_QWORD *)this->__sb_.__extbuf_ - 3));
  if (v4)
    v6 = 0;
  else
    v6 = v5->__rdstate_ | 4;
  std::ios_base::clear(v5, v6);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x20BCFFEB4](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x20BD0022C](v2);
  return a1;
}

uint64_t GetProgrammedDependencyOffsetAndDimension(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 < 2)
  {
    if (v3)
    {
      v13 = *(_QWORD *)(a1 + 16);
      LODWORD(v3) = *(_DWORD *)(v13 + 24);
      v14 = *(_DWORD *)(v13 + 16);
    }
    else
    {
      v14 = 0;
    }
    result = 0;
    *a2 = v3;
    *a3 = v14;
  }
  else
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      GetProgrammedDependencyOffsetAndDimension(v4, v5, v6, v7, v8, v9, v10, v11);
    return 3;
  }
  return result;
}

void AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;
  std::string __p;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v9 = a5[1];
  if (v9 >= a5[2])
  {
    v10 = std::vector<ZinIrSymbolData>::__push_back_slow_path<ZinIrSymbolData const&>(a5, (__int128 *)&__p);
  }
  else
  {
    std::vector<ZinIrSymbolData>::__construct_one_at_end[abi:ne180100]<ZinIrSymbolData const&>((uint64_t)a5, (__int128 *)&__p);
    v10 = v9 + 72;
  }
  a5[1] = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_206E8E908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AddRelocation(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;
  std::string __p;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v12 = a2;
  v13 = a3;
  v14 = 0;
  v15 = 1;
  v16 = a4;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v9 = a5[1];
  if (v9 >= a5[2])
  {
    v10 = std::vector<ZinIrSymbolData>::__push_back_slow_path<ZinIrSymbolData const&>(a5, (__int128 *)&__p);
  }
  else
  {
    std::vector<ZinIrSymbolData>::__construct_one_at_end[abi:ne180100]<ZinIrSymbolData const&>((uint64_t)a5, (__int128 *)&__p);
    v10 = v9 + 72;
  }
  a5[1] = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_206E8E9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AddBARRelocation(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v13;
  uint64_t v14;
  std::string __p;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v16 = a2;
  v17 = a3;
  v18 = 0;
  v19 = 1;
  v20 = a4;
  v21 = 1;
  v22 = a6;
  v23 = a7;
  v13 = a5[1];
  if (v13 >= a5[2])
  {
    v14 = std::vector<ZinIrSymbolData>::__push_back_slow_path<ZinIrSymbolData const&>(a5, (__int128 *)&__p);
  }
  else
  {
    std::vector<ZinIrSymbolData>::__construct_one_at_end[abi:ne180100]<ZinIrSymbolData const&>((uint64_t)a5, (__int128 *)&__p);
    v14 = v13 + 72;
  }
  a5[1] = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_206E8EAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CalculateExeCycles(const ZinANELayer *a1)
{
  char HasChainRead;
  uint64_t result;
  float v4;
  int v5;

  v5 = 0;
  HasChainRead = ZinEngineLayerMirInfo::HasChainRead(*((_DWORD **)a1 + 33), &v5);
  result = 0;
  if ((HasChainRead & 1) == 0)
  {
    v4 = *((double *)a1 + 34);
    if (v4 <= 65535.0)
      return (int)v4;
    else
      return 0xFFFFLL;
  }
  return result;
}

uint64_t *SetDefaultValuesToRegisters(uint64_t *result, unint64_t a2, unsigned int a3, _QWORD *a4)
{
  uint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  if (a2)
  {
    v7 = result;
    v8 = 0;
    v9 = 1;
    do
    {
      v12 = a3;
      result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(a4, &v12);
      if (result)
      {
        v11 = a3;
        result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(a4, &v11);
        if (!result)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v10 = *((_DWORD *)result + 5);
      }
      else
      {
        v10 = 0;
      }
      *((_DWORD *)v7 + v8) = v10;
      v8 = v9++;
      a3 += 4;
    }
    while (v8 < a2);
  }
  return result;
}

uint64_t GetDSIDFromPriorityHalAndSecureMode(int a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = 0;
  if ((a3 & 1) == 0 && !*(_BYTE *)(a2 + 1248))
  {
    if (a1 == 1)
    {
      return *(unsigned int *)(a2 + 1384);
    }
    else if (a1)
    {
      return 0;
    }
    else
    {
      return *(unsigned int *)(a2 + 1380);
    }
  }
  return result;
}

BOOL GetKernelGroupReuse(const ZinNELayer *a1)
{
  char *v1;
  _BOOL8 result;
  uint64_t v4;

  v1 = (char *)*((_QWORD *)a1 + 17);
  if (!v1)
    return 0;
  if ((v1[448] & 4) != 0)
  {
    if (*(_DWORD *)(*((_QWORD *)a1 + 8) + 8) != 85)
    {
      v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a1 + 11) + 32))(**((_QWORD **)a1 + 11), 0, 0);
      return *(_QWORD *)(v4 + 48) > 1;
    }
    return v1[448] < 0 && *(_QWORD *)(*((_QWORD *)a1 + 33) + 104) > 1uLL;
  }
  else if (ZinIrKernel::HasPerCoutScale(*((ZinIrKernel **)a1 + 17))
         || (result = ZinIrKernel::HasPerCoutBias((ZinIrKernel *)v1), (_DWORD)result))
  {
    v4 = (*(uint64_t (**)(const ZinNELayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    return *(_QWORD *)(v4 + 48) > 1;
  }
  return result;
}

int64x2_t GetMaximumSrcDimsOfUnderlyingTensor@<Q0>(const ZinIrHalParameters *a1@<X0>, const ZinANELayer *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const ZinANELayer *v11;
  unint64_t v12;
  ZinEngineLayerMirInfo **v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t result;
  uint64_t v33;
  void *__p[3];

  if (!*((_BYTE *)a1 + 1327))
    ZinAssertImpl("API should only be called on Coll+ where unaligned x crop is supported.", a2);
  if (!*((_QWORD *)a2 + 25))
    ZinAssertImpl("API can only be called when engine layer has a texture.");
  if (*((_QWORD *)a2 + 24) == 1)
  {
    (*(void (**)(void **__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 512))(__p, a2);
    v5 = __p[0];
    v6 = *((_QWORD *)__p[0] + 1);
  }
  else
  {
    (*(void (**)(void **__return_ptr, const ZinANELayer *))(*(_QWORD *)a2 + 512))(__p, a2);
    v5 = __p[0];
    v6 = *(_QWORD *)__p[0];
  }
  v7 = *(_QWORD *)(v6 + 96);
  __p[1] = v5;
  operator delete(v5);
  v9 = *((_QWORD *)a2 + 11);
  v10 = *((_QWORD *)a2 + 12) - v9;
  if (v10)
  {
    v11 = 0;
    v12 = v10 >> 3;
    if (v12 <= 1)
      v12 = 1;
    while (*(_QWORD *)(v9 + 8 * (_QWORD)v11) != v7)
    {
      v11 = (const ZinANELayer *)((char *)v11 + 1);
      if ((const ZinANELayer *)v12 == v11)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v11 = 0;
  }
  v33 = 0;
  if (ZinMemSourceIndexTranslator::GetDMASrcIndex(a2, v11, &v33, v8))
    ZinAssertImpl("Error: Failed to obtain dma index.");
  if (!*((_QWORD *)a2 + 33))
    ZinAssertImpl("Error: MIR Info must not be null.");
  v13 = (ZinEngineLayerMirInfo **)((char *)a2 + 264);
  v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
  v15 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)a3 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(v14 + 80);
  if ((ZinEngineLayerMirInfo::HasDmaRead(*v13) & 1) == 0)
    ZinAssertImpl("API must only be called when there is DRAM access.");
  v16 = (char *)*((_QWORD *)*v13 + 12 * v33 + 94);
  if (*((_DWORD *)v16 + 39) != 1 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    GetMaximumSrcDimsOfUnderlyingTensor(v13, &v33, __p, v17, v18, v19, v20, v21);
    v16 = (char *)__p[0];
  }
  if (*((_QWORD *)v16 + 27))
    v22 = 0;
  else
    v22 = *((_QWORD *)v16 + 31) == 0;
  if (!v22 || *((_QWORD *)v16 + 28) != 0)
  {
    v24 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v24)
      GetMaximumSrcDimsOfUnderlyingTensor(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  result = vaddq_s64(*(int64x2_t *)(a3 + 16), *(int64x2_t *)(v16 + 232));
  *(int64x2_t *)(a3 + 16) = result;
  return result;
}

uint64_t ZinAneTd<1u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<1u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v8;
  const ZinIrOpLayer *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = a2[33];
  if (!*(_BYTE *)(v4 + 1264) || !*(_QWORD *)(v4 + 1272))
    return 1;
  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(_QWORD *)(v12 + 1368) == v10
            && *(_BYTE *)(v12 + 1376)
            && (!v9 || v11[45] < *((_QWORD *)v9 + 45)))
          {
            v9 = (const ZinIrOpLayer *)v5[2];
            v8 = v5[3];
          }
        }
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t ZinAneTd<4u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<4u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v8;
  const ZinIrOpLayer *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = a2[33];
  if (!*(_BYTE *)(v4 + 1264) || !*(_QWORD *)(v4 + 1272))
    return 1;
  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(_QWORD *)(v12 + 1368) == v10
            && *(_BYTE *)(v12 + 1376)
            && (!v9 || v11[45] < *((_QWORD *)v9 + 45)))
          {
            v9 = (const ZinIrOpLayer *)v5[2];
            v8 = v5[3];
          }
        }
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t ZinAneTd<5u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<5u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v8;
  const ZinIrOpLayer *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = a2[33];
  if (!*(_BYTE *)(v4 + 1264) || !*(_QWORD *)(v4 + 1272))
    return 1;
  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(_QWORD *)(v12 + 1368) == v10
            && *(_BYTE *)(v12 + 1376)
            && (!v9 || v11[45] < *((_QWORD *)v9 + 45)))
          {
            v9 = (const ZinIrOpLayer *)v5[2];
            v8 = v5[3];
          }
        }
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t ZinAneTd<6u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<6u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v8;
  const ZinIrOpLayer *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = a2[33];
  if (!*(_BYTE *)(v4 + 1264) || !*(_QWORD *)(v4 + 1272))
    return 1;
  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(_QWORD *)(v12 + 1368) == v10
            && *(_BYTE *)(v12 + 1376)
            && (!v9 || v11[45] < *((_QWORD *)v9 + 45)))
          {
            v9 = (const ZinIrOpLayer *)v5[2];
            v8 = v5[3];
          }
        }
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t ZinAneTd<7u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<7u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v8;
  const ZinIrOpLayer *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = a2[33];
  if (!*(_BYTE *)(v4 + 1264) || !*(_QWORD *)(v4 + 1272))
    return 1;
  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(_QWORD *)(v12 + 1368) == v10
            && *(_BYTE *)(v12 + 1376)
            && (!v9 || v11[45] < *((_QWORD *)v9 + 45)))
          {
            v9 = (const ZinIrOpLayer *)v5[2];
            v8 = v5[3];
          }
        }
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

void ZinAneTd<8u>::HandleCachePrefetchDma(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 264);
  if (*(_BYTE *)(v3 + 1264))
  {
    ZinAneTd<8u>::SetCacheDmaPreEnable(a1, 1);
    ZinAneTd<8u>::SetCacheDmaPreFlush(a1, 0, *(_DWORD *)(v3 + 1280));
    ZinAneTd<8u>::SetCacheDmaPreTaskSync(a1, *(unsigned __int8 *)(v3 + 1321), 0);
    ZinAneTd<8u>::SetCacheDmaPreEarlyTermination(a1, 1, *(unsigned __int8 *)(v3 + 1288), *(unsigned __int8 *)(v3 + 1304), 0, *(unsigned __int8 *)(v3 + 1320), 1, *(_DWORD *)(v3 + 1296), *(_QWORD *)(v3 + 1312), WORD1(*(_QWORD *)(v3 + 1312)), 127, 0, 127);
    ZinAneTd<8u>::SetCacheDmaPreFootprintLimiter(a1, 0, 0, 0);
    ZinAneTd<8u>::SetCacheDmaPreSieveFiltering(a1, *(_DWORD *)(v3 + 1328), 10);
    ZinAneTd<8u>::SetCacheDmaPreBandwidthLimit(a1, 256);
    ZinAneTd<8u>::SetCacheDmaPreTelemetryResponseAgeOut(a1, 10);
    ZinAneTd<8u>::SetCacheDmaPreDSIDAndSize(a1, a3, *(_DWORD *)(v3 + 1272));
    ZinAneTd<8u>::SetCacheDmaPreTelemetryBackOff(a1, 1, 0, 7u, 1u, 32);
    ZinAneTd<1u>::SetCacheDmaPrePause(a1, *(_BYTE *)(v3 + 1336), *(_BYTE *)(v3 + 1337), *(unsigned __int8 *)(v3 + 1338), *(_DWORD *)(v3 + 1340));
    ZinAneTd<1u>::SetCacheDmaPreThrottle(a1, *(_BYTE *)(v3 + 1344), *(_BYTE *)(v3 + 1345), *(unsigned __int8 *)(v3 + 1346), *(_DWORD *)(v3 + 1348), *(_DWORD *)(v3 + 1352));
    ZinAneTd<1u>::SetCacheDmaPrePrefetchRate(a1, *(_DWORD *)(v3 + 1356));
  }
}

BOOL ZinAneTd<8u>::HandleCachePrefetchDmaAddress(uint64_t *a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v9;
  const ZinIrOpLayer *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;

  v4 = a2[33];
  if (!*(_BYTE *)(v4 + 1264) || !*(_QWORD *)(v4 + 1272))
    return 1;
  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        v12 = v5[2];
        if (v12 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          v13 = v12[33];
          if (*(_DWORD *)(v13 + 1360) == 1
            && *(_QWORD *)(v13 + 1368) == v11
            && *(_BYTE *)(v13 + 1376)
            && (!v10 || v12[45] < *((_QWORD *)v10 + 45)))
          {
            v10 = (const ZinIrOpLayer *)v5[2];
            v9 = v5[3];
          }
        }
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v9)
    {
      v22 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v10, a4, &v22);
      ZinAneTd<8u>::SetCacheDmaPreAddress(a1, v22, v9[1] - 24);
      return 1;
    }
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  return result;
}

uint64_t *ZinAneTd<8u>::InitializeTdToDefaults(uint64_t a1)
{
  __int128 *AddressDefaultValueMapping;

  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1292));
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 44), 0x48uLL, 0x5500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 500), 0x13uLL, 0, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 584), 0x45uLL, 0x4D00u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 868), 0x1EuLL, 0x4100u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 996), 0xEuLL, 0x4500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1060), 0xBuLL, 0x4900u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1112), 0x15uLL, 0x5100u, AddressDefaultValueMapping);
  return SetDefaultValuesToRegisters((uint64_t *)(a1 + 1204), 0xCuLL, 0x5900u, AddressDefaultValueMapping);
}

uint64_t ZinAneTd<10u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<10u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v8;
  const ZinIrOpLayer *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = a2[33];
  if (!*(_BYTE *)(v4 + 1264) || !*(_QWORD *)(v4 + 1272))
    return 1;
  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(_QWORD *)(v12 + 1368) == v10
            && *(_BYTE *)(v12 + 1376)
            && (!v9 || v11[45] < *((_QWORD *)v9 + 45)))
          {
            v9 = (const ZinIrOpLayer *)v5[2];
            v8 = v5[3];
          }
        }
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t *ZinAneTd<10u>::InitializeTdToDefaults(uint64_t a1)
{
  __int128 *AddressDefaultValueMapping;

  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 988));
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 44), 0x22uLL, 0x5500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 252), 0x13uLL, 0, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 336), 0x45uLL, 0x4D00u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 620), 0x1EuLL, 0x4100u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 748), 0xEuLL, 0x4500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 812), 0xBuLL, 0x4900u, AddressDefaultValueMapping);
  return SetDefaultValuesToRegisters((uint64_t *)(a1 + 864), 0x15uLL, 0x5100u, AddressDefaultValueMapping);
}

uint64_t ZinAneTd<11u>::HandleCachePrefetchDma(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1264))
  {
    ZinAneTd<1u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<1u>::SetCacheDmaPreFlush();
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v8;
  const ZinIrOpLayer *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = a2[33];
  if (!*(_BYTE *)(v4 + 1264) || !*(_QWORD *)(v4 + 1272))
    return 1;
  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        v11 = v5[2];
        if (v11 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          v12 = v11[33];
          if (*(_DWORD *)(v12 + 1360) == 1
            && *(_QWORD *)(v12 + 1368) == v10
            && *(_BYTE *)(v12 + 1376)
            && (!v9 || v11[45] < *((_QWORD *)v9 + 45)))
          {
            v9 = (const ZinIrOpLayer *)v5[2];
            v8 = v5[3];
          }
        }
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v8)
    {
      v21 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v9, a4, &v21);
      ZinAneTd<1u>::SetCacheDmaPreFlush();
    }
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

uint64_t *ZinAneTd<11u>::InitializeTdToDefaults(uint64_t a1)
{
  __int128 *AddressDefaultValueMapping;

  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1036));
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 44), 0x46uLL, 0x1900u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 492), 0x13uLL, 0, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 576), 0x35uLL, 0x1100u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 796), 0x19uLL, 0x500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 904), 5uLL, 0x900u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 932), 5uLL, 0xD00u, AddressDefaultValueMapping);
  return SetDefaultValuesToRegisters((uint64_t *)(a1 + 960), 9uLL, 0x1500u, AddressDefaultValueMapping);
}

void ZinAneTd<17u>::HandleCachePrefetchDma(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 264);
  if (*(_BYTE *)(v3 + 1264))
  {
    ZinAneTd<17u>::SetCacheDmaPreEnable(a1, 1);
    ZinAneTd<17u>::SetCacheDmaPreFlush(a1, 0, *(_DWORD *)(v3 + 1280));
    ZinAneTd<17u>::SetCacheDmaPreTaskSync(a1, *(unsigned __int8 *)(v3 + 1321), 0);
    ZinAneTd<17u>::SetCacheDmaPreEarlyTermination(a1, 1, *(unsigned __int8 *)(v3 + 1288), *(unsigned __int8 *)(v3 + 1304), 0, *(unsigned __int8 *)(v3 + 1320), 1, *(_DWORD *)(v3 + 1296), *(_QWORD *)(v3 + 1312), WORD1(*(_QWORD *)(v3 + 1312)), 127, 0, 127);
    ZinAneTd<17u>::SetCacheDmaPreFootprintLimiter(a1, 0, 0, 0);
    ZinAneTd<17u>::SetCacheDmaPreSieveFiltering(a1, *(_DWORD *)(v3 + 1328), 10);
    ZinAneTd<17u>::SetCacheDmaPreBandwidthLimit(a1, 256);
    ZinAneTd<17u>::SetCacheDmaPreTelemetryResponseAgeOut(a1, 10);
    ZinAneTd<17u>::SetCacheDmaPreDSIDAndSize(a1, a3, *(_DWORD *)(v3 + 1272));
    ZinAneTd<17u>::SetCacheDmaPreTelemetryBackOff(a1, 1, 0, 7u, 1u, 32);
    ZinAneTd<1u>::SetCacheDmaPrePause(a1, *(_BYTE *)(v3 + 1336), *(_BYTE *)(v3 + 1337), *(unsigned __int8 *)(v3 + 1338), *(_DWORD *)(v3 + 1340));
    ZinAneTd<1u>::SetCacheDmaPreThrottle(a1, *(_BYTE *)(v3 + 1344), *(_BYTE *)(v3 + 1345), *(unsigned __int8 *)(v3 + 1346), *(_DWORD *)(v3 + 1348), *(_DWORD *)(v3 + 1352));
    ZinAneTd<1u>::SetCacheDmaPrePrefetchRate(a1, *(_DWORD *)(v3 + 1356));
  }
}

BOOL ZinAneTd<17u>::HandleCachePrefetchDmaAddress(uint64_t *a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v9;
  const ZinIrOpLayer *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;

  v4 = a2[33];
  if (!*(_BYTE *)(v4 + 1264) || !*(_QWORD *)(v4 + 1272))
    return 1;
  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        v12 = v5[2];
        if (v12 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          v13 = v12[33];
          if (*(_DWORD *)(v13 + 1360) == 1
            && *(_QWORD *)(v13 + 1368) == v11
            && *(_BYTE *)(v13 + 1376)
            && (!v10 || v12[45] < *((_QWORD *)v10 + 45)))
          {
            v10 = (const ZinIrOpLayer *)v5[2];
            v9 = v5[3];
          }
        }
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v9)
    {
      v22 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v10, a4, &v22);
      ZinAneTd<17u>::SetCacheDmaPreAddress(a1, v22, v9[1] - 24);
      return 1;
    }
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  return result;
}

uint64_t *ZinAneTd<17u>::InitializeTdToDefaults(uint64_t a1)
{
  __int128 *AddressDefaultValueMapping;

  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1412));
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 48), 0x48uLL, 0x5500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 504), 0x17uLL, 0, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 604), 0x51uLL, 0x4D00u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 936), 0x29uLL, 0x4100u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1108), 0xFuLL, 0x4500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1176), 0xCuLL, 0x4900u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1232), 0x15uLL, 0x5100u, AddressDefaultValueMapping);
  return SetDefaultValuesToRegisters((uint64_t *)(a1 + 1324), 0xCuLL, 0x5900u, AddressDefaultValueMapping);
}

BOOL ZinAneTd<19u>::HandleCachePrefetchDma(_BOOL8 result, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 264);
  if (*(_BYTE *)(v3 + 1264))
  {
    v5 = result;
    ZinAneTd<19u>::SetCacheDmaPreEnable(result, 1);
    ZinAneTd<19u>::SetCacheDmaPreFlush(v5, 0, *(_DWORD *)(v3 + 1280));
    ZinAneTd<19u>::SetCacheDmaPreTaskSync(v5, *(unsigned __int8 *)(v3 + 1321), 0);
    ZinAneTd<19u>::SetCacheDmaPreEarlyTermination(v5, 1, *(unsigned __int8 *)(v3 + 1288), *(unsigned __int8 *)(v3 + 1304), 0, *(unsigned __int8 *)(v3 + 1320), 1, *(_DWORD *)(v3 + 1296), *(_QWORD *)(v3 + 1312), WORD1(*(_QWORD *)(v3 + 1312)), 127, 0, 127);
    ZinAneTd<19u>::SetCacheDmaPreFootprintLimiter(v5, 0, 0, 0);
    ZinAneTd<19u>::SetCacheDmaPreSieveFiltering(v5, *(_DWORD *)(v3 + 1328), 10);
    ZinAneTd<19u>::SetCacheDmaPreBandwidthLimit(v5, 256);
    ZinAneTd<19u>::SetCacheDmaPreTelemetryResponseAgeOut(v5, 10);
    ZinAneTd<19u>::SetCacheDmaPreDSIDAndSize(v5, a3, *(_DWORD *)(v3 + 1272));
    ZinAneTd<19u>::SetCacheDmaPreTelemetryBackOff(v5, 1, 0, 7u, 1u, 32);
    ZinAneTd<19u>::SetCacheDmaPrePause(v5, *(unsigned __int8 *)(v3 + 1336), *(unsigned __int8 *)(v3 + 1337), *(unsigned __int8 *)(v3 + 1338), *(_DWORD *)(v3 + 1340));
    ZinAneTd<19u>::SetCacheDmaPreThrottle(v5, *(unsigned __int8 *)(v3 + 1344), *(unsigned __int8 *)(v3 + 1345), *(unsigned __int8 *)(v3 + 1346), *(_DWORD *)(v3 + 1348), *(_DWORD *)(v3 + 1352));
    return ZinAneTd<19u>::SetCacheDmaPrePrefetchRate(v5, *(_DWORD *)(v3 + 1356));
  }
  return result;
}

BOOL ZinAneTd<19u>::HandleCachePrefetchDmaAddress(uint64_t *a1, uint64_t *a2, uint64_t a3, const ZinIrMemoryPool *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v9;
  const ZinIrOpLayer *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;

  v4 = a2[33];
  if (!*(_BYTE *)(v4 + 1264) || !*(_QWORD *)(v4 + 1272))
    return 1;
  v5 = *(uint64_t ***)(a3 + 16);
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = a2[45];
    do
    {
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v5[2]))
      {
        v12 = v5[2];
        if (v12 != a2 && ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)v5[2]))
        {
          v13 = v12[33];
          if (*(_DWORD *)(v13 + 1360) == 1
            && *(_QWORD *)(v13 + 1368) == v11
            && *(_BYTE *)(v13 + 1376)
            && (!v10 || v12[45] < *((_QWORD *)v10 + 45)))
          {
            v10 = (const ZinIrOpLayer *)v5[2];
            v9 = v5[3];
          }
        }
      }
      v5 = (uint64_t **)*v5;
    }
    while (v5);
    if (v9)
    {
      v22 = -1;
      ZinIrCodeGenGetBarIdForCoeffKDMABlock(v10, a4, &v22);
      ZinAneTd<19u>::SetCacheDmaPreAddress(a1, v22, v9[1] - 24);
      return 1;
    }
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<1u>::HandleCachePrefetchDmaAddress(result, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  return result;
}

uint64_t *ZinAneTd<19u>::InitializeTdToDefaults(uint64_t a1)
{
  __int128 *AddressDefaultValueMapping;

  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1460));
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 52), 0x4AuLL, 0x5500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 516), 0x17uLL, 0, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 616), 0x53uLL, 0x4D00u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 956), 0x2AuLL, 0x4100u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1132), 0x10uLL, 0x4500u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1204), 0xDuLL, 0x4900u, AddressDefaultValueMapping);
  SetDefaultValuesToRegisters((uint64_t *)(a1 + 1264), 0x17uLL, 0x5100u, AddressDefaultValueMapping);
  return SetDefaultValuesToRegisters((uint64_t *)(a1 + 1364), 0xEuLL, 0x5900u, AddressDefaultValueMapping);
}

void `non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x20BCFFEB4](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x20BD0022CLL);
}

{
  _QWORD *v1;

  v1 = a1 + 52;
  MEMORY[0x20BCFFEB4](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x20BD0022C](v1);
  JUMPOUT(0x20BD002F8);
}

void `virtual thunk to'std::fstream::~fstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x20BCFFEB4](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x20BD0022CLL);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x20BCFFEB4](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x20BD0022C](v1 + 54);
  JUMPOUT(0x20BD002F8);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  _QWORD *v1;

  v1 = a1 + 54;
  MEMORY[0x20BCFFEB4](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x20BD0022C](v1);
  JUMPOUT(0x20BD002F8);
}

__n128 std::vector<ZinIrSymbolData>::__construct_one_at_end[abi:ne180100]<ZinIrSymbolData const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)((char *)a2 + 24);
  v7 = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(v4 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(v4 + 40) = v7;
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(a1 + 8) = v4 + 72;
  return result;
}

void sub_206E90DF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void GetProgrammedDependencyOffsetAndDimension(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "This target supports DMA or L2 dependency tracking along only one dimension (GC, Y, or Z)./n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void GetMaximumSrcDimsOfUnderlyingTensor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Input cropping for NDC dimensions are not supported yet", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void GetMaximumSrcDimsOfUnderlyingTensor(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], (uint64_t)a3, "Error: Invalid symbol type for the incoming data tensor", a5, a6, a7, a8, 0);
  *a3 = *(_QWORD *)(*a1 + 96 * *a2 + 752);
}

void ZinAneTd<1u>::HandleCachePrefetchDmaAddress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "HandleCachePrefetchDmaAddress is unable to find next prefetch participating layer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirMemCacheStrategyGlobal::ZinMirMemCacheStrategyGlobal(ZinMirMemCacheStrategyGlobal *this, uint64_t a2, uint64_t a3, char a4, BOOL a5, char a6, char a7)
{
  _QWORD *v8;
  _QWORD *v9;

  ZinMirMemCacheStrategyBase::ZinMirMemCacheStrategyBase(this, a2, a3, a4, a5, a6, a7);
  *v8 = &off_24C024838;
  v9 = (_QWORD *)operator new();
  *v9 = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = v9;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
}

void sub_206E90F6C(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;

  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinMirMemCacheStrategyGlobal::PerformAllocation(ZinMirMemCacheStrategyGlobal *this, const ZinIrControlFlowGraph *a2)
{
  return 0;
}

void ZinMirMemCacheStrategyGlobal::~ZinMirMemCacheStrategyGlobal(char **this)
{
  ZinMirMemCacheStrategyGlobal::~ZinMirMemCacheStrategyGlobal(this);
  JUMPOUT(0x20BD002F8);
}

{
  *this = (char *)&off_24C024838;
  std::__tree<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::__map_value_compare<ZinIrEngineLayer *,std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::less<ZinIrEngineLayer *>,true>,std::allocator<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>>>::destroy((uint64_t)(this + 8), this[9]);
  std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::destroy((uint64_t)(this + 5), this[6]);
  std::unique_ptr<ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>>::reset[abi:ne180100]((_QWORD **)this + 4, 0);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)this);
}

void std::__tree<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::__map_value_compare<ZinIrEngineLayer *,std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::less<ZinIrEngineLayer *>,true>,std::allocator<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::__map_value_compare<ZinIrEngineLayer *,std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::less<ZinIrEngineLayer *>,true>,std::allocator<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::__map_value_compare<ZinIrEngineLayer *,std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>,std::less<ZinIrEngineLayer *>,true>,std::allocator<std::__value_type<ZinIrEngineLayer *,LayerMemCacheUsages>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 64);
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 48));
    operator delete(a2);
  }
}

_QWORD *std::unique_ptr<ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>>::reset[abi:ne180100](_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>::~ZinIntervalTree(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

_QWORD *ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>::~ZinIntervalTree(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;

  ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>::GetTreeNodes(a1, (void **)&v5);
  v2 = v5;
  v3 = v6;
  if (v5 != v6)
  {
    do
    {
      if (*v2)
        MEMORY[0x20BD002F8](*v2, 0x1020C40823E9ACBLL);
      ++v2;
    }
    while (v2 != v3);
    v2 = v5;
  }
  if (v2)
  {
    v6 = v2;
    operator delete(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t ZinIntervalTree<ZinMemCacheIntervalNode *,ZinMemCacheIntervalNode::Compare,ZinLiveRange>::GetTreeNodes@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  _OWORD v19[2];
  __int128 v20;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v20 = 0u;
  memset(v19, 0, sizeof(v19));
  if (*a1)
  {
    std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::push_back(v19, a1);
    for (i = *((_QWORD *)&v20 + 1); *((_QWORD *)&v20 + 1); i = *((_QWORD *)&v20 + 1))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v19[0] + 1) + (((unint64_t)v20 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v20 & 0x1FF));
      *(_QWORD *)&v20 = v20 + 1;
      *((_QWORD *)&v20 + 1) = i - 1;
      if ((unint64_t)v20 >= 0x400)
      {
        operator delete(**((void ***)&v19[0] + 1));
        *((_QWORD *)&v19[0] + 1) += 8;
        *(_QWORD *)&v20 = v20 - 512;
      }
      if (*(_QWORD *)(v4 + 64))
      {
        v18 = *(_QWORD *)(v4 + 64);
        std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      if (*(_QWORD *)(v4 + 72))
      {
        v18 = *(_QWORD *)(v4 + 72);
        std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      v6 = a2[1];
      v5 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v5)
      {
        v8 = ((char *)v6 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v9 = v5 - (_QWORD)*a2;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v11);
        else
          v12 = 0;
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = v4;
        v7 = v13 + 8;
        v15 = (char *)*a2;
        v14 = (char *)a2[1];
        if (v14 != *a2)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)*a2;
        }
        *a2 = v13;
        a2[1] = v7;
        a2[2] = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v6 = v4;
        v7 = v6 + 1;
      }
      a2[1] = v7;
    }
  }
  return std::deque<unsigned long>::~deque[abi:ne180100](v19);
}

void sub_206E912D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinMemCacheIntervalNode *,ZinLiveRange> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_206E91650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinParseInputViewUnit(const __CFDictionary *a1, ZinIrInputViewUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  CFTypeID v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  CFTypeID v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  CFTypeID v16;
  const void *v17;
  CFTypeID v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFString *v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
    return 3;
  }
  v8 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("Offset"));
  v9 = v8;
  if (v8)
  {
    v10 = CFGetTypeID(v8);
    if (v10 != CFNumberGetTypeID())
      v9 = 0;
  }
  v11 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("Size"));
  v12 = v11;
  if (v11)
  {
    v13 = CFGetTypeID(v11);
    if (v13 != CFNumberGetTypeID())
      v12 = 0;
  }
  v14 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("Step"));
  v15 = v14;
  if (v14)
  {
    v16 = CFGetTypeID(v14);
    if (v16 != CFNumberGetTypeID())
      v15 = 0;
  }
  if (!v9)
  {
    v27 = CFSTR("InvalidInputViewOffset");
    goto LABEL_24;
  }
  if (!v12)
  {
    v27 = CFSTR("InvalidInputViewSize");
LABEL_24:
    ZinIrUnitStatus::SetError(a3, v27);
    v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v28)
      ZinParseInputViewUnit(v28, v29, v30, v31, v32, v33, v34, v35);
    return 3;
  }
  ZinGetCFObject((char *)a2 + 80, v9);
  ZinGetCFObject((char *)a2 + 84, v12);
  if (v15)
    ZinGetCFObject((char *)a2 + 88, v15);
  v17 = CFDictionaryGetValue(v6, CFSTR("Dimension"));
  if (!v17 || (v18 = CFGetTypeID(v17), v18 != CFStringGetTypeID()) || ZinParseDimension() == 3)
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidInputViewDimension"));
    v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v19)
      ZinParseInputViewUnit(v19, v20, v21, v22, v23, v24, v25, v26);
    return 3;
  }
  return 0;
}

void ZinParseInputViewUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid offset/size in Plist.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid dimension in Plist.\n", a5, a6, a7, a8, 0);
}

uint64_t ZinLogEventFlags::EventFlagsV1::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;

  if (a2[1])
    v2 = 8226;
  else
    v2 = 0x2000;
  if (*a2 | a2[2])
    return v2 | 8;
  else
    return v2;
}

uint64_t ZinLogEventFlags::EventFlagsV1::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinNEBypassLayer *this)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  v4 = a2[1];
  v5 = 2 * v4;
  if (a2[3])
  {
    v6 = v5 | 0x28;
    if (a2[4])
      v7 = v6;
    else
      v7 = 0x1FFF;
  }
  else
  {
    if (*a2 | v4 | a2[2])
      v8 = 7272;
    else
      v8 = 7168;
    v7 = v8 | v5;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 92 && !ZinNEBypassLayer::ModifiesValues(this))
    v7 &= 0x3FFu;
  if (a2[6])
    return v7 & 0x3FF;
  else
    return v7;
}

uint64_t ZinLogEventFlags::EventFlagsV2::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;

  if (a2[1])
    v2 = 1058;
  else
    v2 = 1024;
  if (*a2 | a2[2])
    return v2 | 8;
  else
    return v2;
}

uint64_t ZinLogEventFlags::EventFlagsV2::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinIrOpLayer *this, const ZinNELayer *a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  const ZinIrHalParameters *v13;
  ZinActivationLayer *v14;
  int IsUndefinedOrInfForSomeValues;
  const ZinIrHalParameters *v16;

  v7 = a2[1];
  v8 = 2 * v7;
  if (a2[3])
  {
    v9 = v8 | 0x28;
    if (a2[4])
      v10 = v9;
    else
      v10 = 16776191;
  }
  else
  {
    if (*a2 | v7 | a2[2])
      v11 = 16775272;
    else
      v11 = 16775168;
    v10 = v11 | v8;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 92 && !ZinNEBypassLayer::ModifiesValues(this))
    v10 &= 0xFF0007FF;
  if (a2[6])
    v12 = v10 & 0xFF0007FF;
  else
    v12 = v10;
  if (ZinIrOpLayer::IsNELayer(this) && (v14 = (ZinActivationLayer *)*((_QWORD *)this + 49)) != 0)
  {
    IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v14);
    if ((IsUndefinedOrInfForSomeValues & ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v16)) != 0)
      return v12 & 0xFFFFDFFF;
    else
      return v12;
  }
  else
  {
    ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v13);
  }
  return v12;
}

BOOL ZinLogEventFlags::CanInvalidPixelsBeProcessed(ZinLogEventFlags *this, const ZinNELayer *a2, const ZinIrHalParameters *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 33);
  v4 = *(_QWORD *)(v3 + 120);
  v5 = *(_QWORD *)(v3 + 128);
  if (*(_DWORD *)(v3 + 144) == 1)
    v6 = (char *)a2 + 784;
  else
    v6 = (char *)a2 + 592;
  v7 = *(_QWORD *)v6 / v4;
  v8 = (*(uint64_t (**)(ZinLogEventFlags *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  return *(_QWORD *)(v8 + 72) % v7 || *(_QWORD *)(v8 + 64) % v5 != 0;
}

uint64_t ZinLogEventFlags::EventFlagsV3::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;

  if (a2[1])
    v2 = 34;
  else
    v2 = 0;
  if (*a2 | a2[2])
    return v2 | 8;
  else
    return v2;
}

uint64_t ZinLogEventFlags::EventFlagsV3::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinIrOpLayer *this, const ZinNELayer *a4)
{
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  const ZinIrHalParameters *v12;
  ZinActivationLayer *v13;
  int IsUndefinedOrInfForSomeValues;
  const ZinIrHalParameters *v15;

  if (a2[5])
  {
    if (a2[3])
    {
      v7 = 42;
      goto LABEL_6;
    }
    if (*a2 | a2[2])
      v9 = 10;
    else
      v9 = 2;
    if (a2[1])
      v10 = v9 | 0x20;
    else
      v10 = v9;
    v8 = v10 | 0xFFF800;
  }
  else
  {
    if (a2[3])
    {
      v7 = 40;
LABEL_6:
      if (a2[4])
        v8 = v7;
      else
        v8 = 16775294;
      goto LABEL_19;
    }
    if (*a2 | a2[2] | a2[1])
      v8 = 16775272;
    else
      v8 = 16775168;
  }
LABEL_19:
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 92 && !ZinNEBypassLayer::ModifiesValues(this))
    v8 &= 0x7FFu;
  if (a2[6])
    v11 = v8 & 0x7FF;
  else
    v11 = v8;
  if (ZinIrOpLayer::IsNELayer(this) && (v13 = (ZinActivationLayer *)*((_QWORD *)this + 49)) != 0)
  {
    IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v13);
    if ((IsUndefinedOrInfForSomeValues & ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v15)) != 0)
      return v11 & 0xFFFFDFFF;
    else
      return v11;
  }
  else
  {
    ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v12);
  }
  return v11;
}

uint64_t ZinLogEventFlags::EventFlagsV4::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  unsigned int v4;

  if (*(_BYTE *)(a3 + 1271))
    v3 = 50331682;
  else
    v3 = 34;
  if (a2[1])
    v4 = v3;
  else
    v4 = 0;
  if (*a2 | a2[2])
    return v4 | 8;
  else
    return v4;
}

uint64_t ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinIrOpLayer *this, const ZinNELayer *a4)
{
  int v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t InputTensor;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int16 v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  const ZinIrHalParameters *v28;
  ZinActivationLayer *v29;
  int IsUndefinedOrInfForSomeValues;
  const ZinIrHalParameters *v31;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a2[5])
  {
    v7 = *a2 | a2[2];
    if (v7)
      v8 = 10;
    else
      v8 = 0;
    if (a2[1])
      v8 |= 0x20u;
    v9 = v7 == 0;
    v10 = v8 | 0x40;
    if (!v9)
      v10 = v8;
    if (!a2[3])
    {
      v11 = v10 | 0xFFF800;
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  if (a2[3])
  {
    v10 = 0;
LABEL_13:
    v12 = v10 | 0xFFF87E;
    v13 = v10 | 0x28;
    if (a2[4])
      v11 = v13;
    else
      v11 = v12;
    goto LABEL_16;
  }
  if (*a2 | a2[2] | a2[1])
    v11 = 16775272;
  else
    v11 = 16775168;
LABEL_16:
  v14 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  if (v14 == 92)
  {
    if (!ZinNEBypassLayer::ModifiesValues(this))
      v11 &= 0x7FFu;
    v14 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  }
  if (a2[6])
    v15 = v11 & 0x7FF;
  else
    v15 = v11;
  if (v14 == 81)
  {
    v16 = *((_QWORD *)this + 63);
    if (v16)
    {
      if (*(_DWORD *)(*(_QWORD *)(v16 + 64) + 44) == 1
        && (*(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 11|| *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 3))
      {
        v17 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 63) + 64) + 12);
        if (v17 <= 6)
        {
          if (((1 << v17) & 0x36) != 0)
          {
            v15 = v15 & 0xFFFF7FFF;
          }
          else if (v17 == 6)
          {
            v33 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v33)
              ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v33, v34, v35, v36, v37, v38, v39, v40);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 81
    && ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)this + 568))(this) & 1) == 0)
  {
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)this + 656))(this))
    {
      if (*(_DWORD *)(*(_QWORD *)(**((_QWORD **)this + 11) + 64) + 8) == 29)
      {
        InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
        if (*(_QWORD *)(InputTensor + 80)
           * *(_QWORD *)(InputTensor + 48)
           * *(_QWORD *)(InputTensor + 56)
           * *(_QWORD *)(InputTensor + 64)
           * *(_QWORD *)(InputTensor + 72) == 1
          && *(_DWORD *)(InputTensor + 88) == 3)
        {
          v19 = *(_QWORD *)(InputTensor + 112);
          v20 = *(std::__shared_weak_count **)(InputTensor + 120);
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(p_shared_owners);
            while (__stxr(v22 + 1, p_shared_owners));
          }
          ZinIrConstData::GetDataAt<half>(v19);
          v24 = v23 & 0x7FFF;
          if (v20)
          {
            v25 = (unint64_t *)&v20->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          if (v24 == 31744)
            v15 = v15 & 0xFFF77FFF;
          else
            v15 = v15;
        }
      }
    }
  }
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 93)
  {
    v27 = *((_QWORD *)this + 54);
    if (v27)
    {
      if (*(_BYTE *)(*(_QWORD *)(v27 + 64) + 72))
        v15 = v15 & 0xFF7FCFFF;
      else
        v15 = v15;
    }
  }
  if (ZinIrOpLayer::IsNELayer(this) && (v29 = (ZinActivationLayer *)*((_QWORD *)this + 49)) != 0)
  {
    IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v29);
    if ((IsUndefinedOrInfForSomeValues & ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v31)) != 0)
      return v15 & 0xFFFFDFFF;
    else
      return v15;
  }
  else
  {
    ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v28);
  }
  return v15;
}

void sub_206E92088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinLogEventFlags::EventFlagsV4::GetCachePrefetchFlags(ZinLogEventFlags::EventFlagsV4 *this)
{
  return 50331648;
}

uint64_t ZinLogEventFlags::EventFlagsV5::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2)
{
  int v2;

  v2 = a2[1];
  if (*a2 | a2[2])
    return (v2 << 26) | 8u;
  else
    return (v2 << 26);
}

uint64_t ZinLogEventFlags::EventFlagsV5::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinNEBypassLayer *this)
{
  int v5;
  BOOL v6;
  _BOOL4 v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t InputTensor;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int16 v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *a2 | a2[2];
  v6 = v5 == 0;
  v7 = v5 != 0;
  v8 = v6;
  if (a2[1])
    v9 = (8 * v7) | 0x20;
  else
    v9 = 8 * v7;
  if (a2[5])
  {
    if (!v8)
      v9 |= 0xAu;
    if (a2[1])
      v9 |= 0x20u;
    if (v8)
      v9 |= 0x40u;
    if (!a2[3])
    {
      v10 = v9 | 0xFFF800;
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  if (a2[3])
  {
LABEL_17:
    v11 = v9 | 0xFFF87E;
    v12 = v9 | 0x28;
    if (a2[4])
      v10 = v12;
    else
      v10 = v11;
    goto LABEL_20;
  }
  if ((v8 & (a2[1] == 0)) != 0)
    v28 = 16775168;
  else
    v28 = 16775232;
  v10 = v9 | v28;
LABEL_20:
  v13 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  if (v13 == 92)
  {
    if (!ZinNEBypassLayer::ModifiesValues(this))
      v10 &= 0xFF0007FF;
    v13 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  }
  if (a2[6])
    v14 = v10 & 0xFF0007FF;
  else
    v14 = v10;
  if (v13 == 81)
  {
    v15 = *((_QWORD *)this + 63);
    if (v15)
    {
      if (*(_DWORD *)(*(_QWORD *)(v15 + 64) + 44) == 1
        && (*(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 11|| *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 3))
      {
        v16 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 63) + 64) + 12);
        if (v16 <= 6)
        {
          if (((1 << v16) & 0x36) != 0)
          {
            v14 = v14 & 0xFFFF7FFF;
          }
          else if (v16 == 6)
          {
            v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v29)
              ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v29, v30, v31, v32, v33, v34, v35, v36);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 81
    && ((*(uint64_t (**)(ZinNEBypassLayer *))(*(_QWORD *)this + 568))(this) & 1) == 0)
  {
    if ((*(unsigned int (**)(ZinNEBypassLayer *))(*(_QWORD *)this + 656))(this))
    {
      if (*(_DWORD *)(*(_QWORD *)(**((_QWORD **)this + 11) + 64) + 8) == 29)
      {
        InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
        if (*(_QWORD *)(InputTensor + 80)
           * *(_QWORD *)(InputTensor + 48)
           * *(_QWORD *)(InputTensor + 56)
           * *(_QWORD *)(InputTensor + 64)
           * *(_QWORD *)(InputTensor + 72) == 1
          && *(_DWORD *)(InputTensor + 88) == 3)
        {
          v18 = *(_QWORD *)(InputTensor + 112);
          v19 = *(std::__shared_weak_count **)(InputTensor + 120);
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(p_shared_owners);
            while (__stxr(v21 + 1, p_shared_owners));
          }
          ZinIrConstData::GetDataAt<half>(v18);
          v23 = v22 & 0x7FFF;
          if (v19)
          {
            v24 = (unint64_t *)&v19->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (v23 == 31744)
            v14 = v14 & 0xFFF77FFF;
          else
            v14 = v14;
        }
      }
    }
  }
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 93)
  {
    v26 = *((_QWORD *)this + 54);
    if (v26)
    {
      if (*(_BYTE *)(*(_QWORD *)(v26 + 64) + 72))
        return v14 & 0xFF7FCFFF;
      else
        return v14;
    }
  }
  return v14;
}

void sub_206E92400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinLogEventFlags::EventFlagsV5::GetDramLogEventFlags(uint64_t a1, unsigned __int8 *a2, ZinNEBypassLayer *this, const ZinNELayer *a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t InputTensor;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  const ZinIrHalParameters *v21;
  ZinActivationLayer *v22;
  int IsUndefinedOrInfForSomeValues;
  const ZinIrHalParameters *v24;
  _BOOL4 CanInvalidPixelsBeProcessed;
  unsigned int v26;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v8 = a2[1];
  if (a2[1])
  {
    if (*((_BYTE *)a4 + 1271))
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) | 0x20;
    else
      v8 = 32;
  }
  if (*a2 | a2[2])
    v9 = v8 | 8;
  else
    v9 = v8;
  if (a2[3])
  {
    if (a2[4])
      v9 |= 0x28u;
    else
      v9 |= 0xFFF87Eu;
  }
  if (!a2[6])
  {
    v10 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
    if (v10 == 92)
    {
      if (ZinNEBypassLayer::ModifiesValues(this))
        v9 |= 0xFFF800u;
      else
        v9 &= 0xFF0007FF;
      v10 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
    }
    else
    {
      v9 |= 0xFFF800u;
    }
    if (v10 == 81)
    {
      v11 = *((_QWORD *)this + 63);
      if (v11)
      {
        if (*(_DWORD *)(*(_QWORD *)(v11 + 64) + 44) == 1
          && (*(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 11|| *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 3))
        {
          v12 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 63) + 64) + 12);
          if (v12 <= 6)
          {
            if (((1 << v12) & 0x36) != 0)
            {
              v9 &= ~0x8000u;
            }
            else if (v12 == 6)
            {
              v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v28)
                ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v28, v29, v30, v31, v32, v33, v34, v35);
            }
          }
        }
      }
    }
    if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 81
      && ((*(uint64_t (**)(ZinNEBypassLayer *))(*(_QWORD *)this + 568))(this) & 1) == 0)
    {
      if ((*(unsigned int (**)(ZinNEBypassLayer *))(*(_QWORD *)this + 656))(this))
      {
        if (*(_DWORD *)(*(_QWORD *)(**((_QWORD **)this + 11) + 64) + 8) == 29)
        {
          InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
          if (*(_QWORD *)(InputTensor + 80)
             * *(_QWORD *)(InputTensor + 48)
             * *(_QWORD *)(InputTensor + 56)
             * *(_QWORD *)(InputTensor + 64)
             * *(_QWORD *)(InputTensor + 72) == 1
            && *(_DWORD *)(InputTensor + 88) == 3)
          {
            v14 = *(_QWORD *)(InputTensor + 112);
            v15 = *(_QWORD *)(InputTensor + 120);
            v36[0] = v14;
            v36[1] = v15;
            if (v15)
            {
              v16 = (unint64_t *)(v15 + 8);
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            ZinIrConstData::GetDataAt<half>(v14);
            v19 = v18 & 0x7FFF;
            std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v36);
            if (v19 == 31744)
              v9 &= 0xFFF77FFF;
          }
        }
      }
    }
    if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 93)
    {
      v20 = *((_QWORD *)this + 54);
      if (v20)
      {
        if (*(_BYTE *)(*(_QWORD *)(v20 + 64) + 72))
          v9 &= 0xFF7FCFFF;
      }
    }
    if (ZinIrOpLayer::IsNELayer(this) && (v22 = (ZinActivationLayer *)*((_QWORD *)this + 49)) != 0)
    {
      IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v22);
      CanInvalidPixelsBeProcessed = ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v24);
      v26 = v9 & 0xFFFFDFFF;
      if (!CanInvalidPixelsBeProcessed)
        v26 = v9;
      if (IsUndefinedOrInfForSomeValues)
        v9 = v26;
    }
    else
    {
      ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v21);
    }
  }
  return v9 & ~(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

void sub_206E92738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinLogEventFlags::EventFlagsV5::GetCachePrefetchFlags(ZinLogEventFlags::EventFlagsV5 *this)
{
  return 50331648;
}

uint64_t ZinLogEventFlags::EventFlagsV5::GetDisallowedEventFlagsForDramLog(ZinLogEventFlags::EventFlagsV5 *this)
{
  return 67108865;
}

uint64_t ZinLogEventFlags::EventFlagsV6::GetLogEventFlags(uint64_t a1, unsigned __int8 *a2)
{
  int v2;

  v2 = a2[1];
  if (*a2 | a2[2])
    return (v2 << 26) | 8u;
  else
    return (v2 << 26);
}

uint64_t ZinLogEventFlags::EventFlagsV6::GetDebugLogEventFlags(int a1, unsigned __int8 *a2, ZinIrOpLayer *this, const ZinNELayer *a4)
{
  int v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t InputTensor;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int16 v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  const ZinIrHalParameters *v29;
  ZinActivationLayer *v30;
  int IsUndefinedOrInfForSomeValues;
  const ZinIrHalParameters *v32;
  int v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = *a2 | a2[2];
  v8 = v7 == 0;
  v9 = v7 != 0;
  v10 = v8;
  if (a2[1])
    v11 = (8 * v9) | 0x20;
  else
    v11 = 8 * v9;
  if (a2[5])
  {
    if (!v10)
      v11 |= 0xAu;
    if (a2[1])
      v11 |= 0x20u;
    if (v10)
      v11 |= 0x40u;
    if (!a2[3])
    {
      v12 = v11 | 0xFFF800;
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  if (a2[3])
  {
LABEL_17:
    v13 = v11 | 0xFFF87E;
    v14 = v11 | 0x28;
    if (a2[4])
      v12 = v14;
    else
      v12 = v13;
    goto LABEL_20;
  }
  if ((v10 & (a2[1] == 0)) != 0)
    v34 = 16775168;
  else
    v34 = 16775232;
  v12 = v11 | v34;
LABEL_20:
  v15 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  if (v15 == 92)
  {
    if (!ZinNEBypassLayer::ModifiesValues(this))
      v12 &= 0xFF0007FF;
    v15 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  }
  if (a2[6])
    v16 = v12 & 0xFF0007FF;
  else
    v16 = v12;
  if (v15 == 81)
  {
    v17 = *((_QWORD *)this + 63);
    if (v17)
    {
      if (*(_DWORD *)(*(_QWORD *)(v17 + 64) + 44) == 1
        && (*(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 11|| *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 3))
      {
        v18 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 63) + 64) + 12);
        if (v18 <= 6)
        {
          if (((1 << v18) & 0x36) != 0)
          {
            v16 = v16 & 0xFFFF7FFF;
          }
          else if (v18 == 6)
          {
            v35 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v35)
              ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v35, v36, v37, v38, v39, v40, v41, v42);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 81
    && ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)this + 568))(this) & 1) == 0)
  {
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)this + 656))(this))
    {
      if (*(_DWORD *)(*(_QWORD *)(**((_QWORD **)this + 11) + 64) + 8) == 29)
      {
        InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
        if (*(_QWORD *)(InputTensor + 80)
           * *(_QWORD *)(InputTensor + 48)
           * *(_QWORD *)(InputTensor + 56)
           * *(_QWORD *)(InputTensor + 64)
           * *(_QWORD *)(InputTensor + 72) == 1
          && *(_DWORD *)(InputTensor + 88) == 3)
        {
          v20 = *(_QWORD *)(InputTensor + 112);
          v21 = *(std::__shared_weak_count **)(InputTensor + 120);
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(p_shared_owners);
            while (__stxr(v23 + 1, p_shared_owners));
          }
          ZinIrConstData::GetDataAt<half>(v20);
          v25 = v24 & 0x7FFF;
          if (v21)
          {
            v26 = (unint64_t *)&v21->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v25 == 31744)
            v16 = v16 & 0xFFF77FFF;
          else
            v16 = v16;
        }
      }
    }
  }
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 93)
  {
    v28 = *((_QWORD *)this + 54);
    if (v28)
    {
      if (*(_BYTE *)(*(_QWORD *)(v28 + 64) + 72))
        v16 = v16 & 0xFF7FCFFF;
      else
        v16 = v16;
    }
  }
  if (ZinIrOpLayer::IsNELayer(this) && (v30 = (ZinActivationLayer *)*((_QWORD *)this + 49)) != 0)
  {
    IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v30);
    if ((IsUndefinedOrInfForSomeValues & ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v32)) != 0)
      v16 = v16 & 0xFFFFDFFF;
    else
      v16 = v16;
  }
  else
  {
    ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v29);
  }
  if (*((_BYTE *)a4 + 1602))
  {
    if (*(_BYTE *)(*((_QWORD *)this + 33) + 1648))
      return v16 | 0x10000000;
    else
      return v16;
  }
  return v16;
}

void sub_206E92B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinLogEventFlags::EventFlagsV6::GetDramLogEventFlags(uint64_t a1, unsigned __int8 *a2, ZinNEBypassLayer *this, const ZinNELayer *a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t InputTensor;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  const ZinIrHalParameters *v21;
  ZinActivationLayer *v22;
  int IsUndefinedOrInfForSomeValues;
  const ZinIrHalParameters *v24;
  _BOOL4 CanInvalidPixelsBeProcessed;
  unsigned int v26;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v8 = a2[1];
  if (a2[1])
  {
    if (*((_BYTE *)a4 + 1271))
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) | 0x20;
    else
      v8 = 32;
  }
  if (*a2 | a2[2])
    v9 = v8 | 8;
  else
    v9 = v8;
  if (a2[3])
  {
    if (a2[4])
      v9 |= 0x28u;
    else
      v9 |= 0xFFF87Eu;
  }
  if (!a2[6])
  {
    v10 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
    if (v10 == 92)
    {
      if (ZinNEBypassLayer::ModifiesValues(this))
        v9 |= 0xFFF800u;
      else
        v9 &= 0xFF0007FF;
      v10 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
    }
    else
    {
      v9 |= 0xFFF800u;
    }
    if (v10 == 81)
    {
      v11 = *((_QWORD *)this + 63);
      if (v11)
      {
        if (*(_DWORD *)(*(_QWORD *)(v11 + 64) + 44) == 1
          && (*(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 11|| *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 3))
        {
          v12 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 63) + 64) + 12);
          if (v12 <= 6)
          {
            if (((1 << v12) & 0x36) != 0)
            {
              v9 &= ~0x8000u;
            }
            else if (v12 == 6)
            {
              v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v28)
                ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(v28, v29, v30, v31, v32, v33, v34, v35);
            }
          }
        }
      }
    }
    if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 81
      && ((*(uint64_t (**)(ZinNEBypassLayer *))(*(_QWORD *)this + 568))(this) & 1) == 0)
    {
      if ((*(unsigned int (**)(ZinNEBypassLayer *))(*(_QWORD *)this + 656))(this))
      {
        if (*(_DWORD *)(*(_QWORD *)(**((_QWORD **)this + 11) + 64) + 8) == 29)
        {
          InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
          if (*(_QWORD *)(InputTensor + 80)
             * *(_QWORD *)(InputTensor + 48)
             * *(_QWORD *)(InputTensor + 56)
             * *(_QWORD *)(InputTensor + 64)
             * *(_QWORD *)(InputTensor + 72) == 1
            && *(_DWORD *)(InputTensor + 88) == 3)
          {
            v14 = *(_QWORD *)(InputTensor + 112);
            v15 = *(_QWORD *)(InputTensor + 120);
            v36[0] = v14;
            v36[1] = v15;
            if (v15)
            {
              v16 = (unint64_t *)(v15 + 8);
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            ZinIrConstData::GetDataAt<half>(v14);
            v19 = v18 & 0x7FFF;
            std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v36);
            if (v19 == 31744)
              v9 &= 0xFFF77FFF;
          }
        }
      }
    }
    if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 93)
    {
      v20 = *((_QWORD *)this + 54);
      if (v20)
      {
        if (*(_BYTE *)(*(_QWORD *)(v20 + 64) + 72))
          v9 &= 0xFF7FCFFF;
      }
    }
    if (ZinIrOpLayer::IsNELayer(this) && (v22 = (ZinActivationLayer *)*((_QWORD *)this + 49)) != 0)
    {
      IsUndefinedOrInfForSomeValues = ZinActivationLayer::IsUndefinedOrInfForSomeValues(v22);
      CanInvalidPixelsBeProcessed = ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v24);
      v26 = v9 & 0xFFFFDFFF;
      if (!CanInvalidPixelsBeProcessed)
        v26 = v9;
      if (IsUndefinedOrInfForSomeValues)
        v9 = v26;
    }
    else
    {
      ZinLogEventFlags::CanInvalidPixelsBeProcessed(this, a4, v21);
    }
  }
  if (*((_BYTE *)a4 + 1602) && *(_BYTE *)(*((_QWORD *)this + 33) + 1648))
    v9 |= 0x10000000u;
  return v9 & ~(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

void sub_206E92E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinLogEventFlags::EventFlagsV6::GetCachePrefetchFlags(ZinLogEventFlags::EventFlagsV6 *this)
{
  return 50331648;
}

uint64_t ZinLogEventFlags::EventFlagsV6::GetDisallowedEventFlagsForDramLog(ZinLogEventFlags::EventFlagsV6 *this)
{
  return 0x4000000;
}

void ZinLogEventFlags::CreateEventFlagGenerator(int a1)
{
  __asm { BR              X10 }
}

_QWORD *sub_206E92ECC()
{
  _QWORD *v0;
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24C02BB48;
  *v0 = result;
  return result;
}

uint64_t ZinLogEventFlags::GetEventFlags(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  ZinLogEventFlags::CreateEventFlagGenerator(*(_DWORD *)(a1 + 1692));
  if (*(_BYTE *)(a1 + 1589))
    v8 = a4[2] == 0;
  else
    v8 = 1;
  if (!v8)
    (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2, a3, a1);
  if (*a4)
    v9 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2, a1);
  else
    v9 = 0;
  if (a4[1])
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 24))(v13, a2, a3, a1) << 32;
LABEL_12:
    (*(void (**)())(*(_QWORD *)v13 + 8))();
    v11 = v10;
    return v11 | v9;
  }
  v10 = 0;
  v11 = 0;
  if (v13)
    goto LABEL_12;
  return v11 | v9;
}

void sub_206E930C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ZinLogEventFlags::EventFlagsV4::GetDebugLogEventFlags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid ZinIrReductionType!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

_QWORD *ZinNECrossCorrelationLayer::ZinNECrossCorrelationLayer(_QWORD *a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;

  v19 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v19, 87);
  v20 = a2[1];
  v28 = *a2;
  v29 = (std::__shared_weak_count *)v20;
  v30 = v19;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  ZinNELayer::ZinNELayer((uint64_t)a1, &v30, &v28, a4, a5, a6, a9, a10, a11, 0, a3, 0);
  v23 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v30;
  v30 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  *a1 = &off_24C023CC8;
  a1[54] = a7;
  a1[55] = a8;
  return a1;
}

{
  return ZinNECrossCorrelationLayer::ZinNECrossCorrelationLayer(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_206E93250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  v17 = a16;
  a16 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

uint64_t ZinNECrossCorrelationLayer::LowerEngine(int64x2_t ***a1, uint64_t **a2, ZinANELayer ***a3)
{
  uint64_t result;
  ZinNECrossCorrelationLayer *v6;

  result = ZinANELayer::LowerEngine((uint64_t)a1, a2, a3);
  if (!(_DWORD)result)
    return ZinMirCrossCorrelation::Transform((ZinMirCrossCorrelation *)a2, a1, v6);
  return result;
}

uint64_t ZinNECrossCorrelationLayer::Clone(_QWORD *a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  __int128 *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  __int128 *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  __int128 *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  __int128 *v24;
  const void *v25;
  uint64_t v26;
  size_t v27;
  __int128 *v28;
  const void *v29;
  uint64_t v30;
  size_t v31;
  __int128 *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  __int128 *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  std::string *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  void **v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  size_t v56;
  std::string *v57;
  const void *v58;
  std::string *v59;
  __int128 v60;
  void **v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  ZinEngineLayerMirInfo *v67;
  uint64_t *GroupId;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[2];
  std::string v76;
  void *__p[2];
  int64_t v78;
  std::string v79;
  __int128 v80;
  int64_t v81;

  v6 = *(_QWORD *)(*a2 + 16);
  v7 = a1[25];
  if (*((char *)a3 + 23) >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  v9 = &v80;
  std::string::basic_string[abi:ne180100]((uint64_t)&v80, v8 + 8);
  if (v81 < 0)
    v9 = (__int128 *)v80;
  if (v8)
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = *a3;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "_texture");
  v11 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v7, (const void **)&v80);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
  v12 = a1[46];
  if (*((char *)a3 + 23) >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = (size_t)a3[1];
  v14 = &v80;
  std::string::basic_string[abi:ne180100]((uint64_t)&v80, v13 + 11);
  if (v81 < 0)
    v14 = (__int128 *)v80;
  if (v13)
  {
    if (*((char *)a3 + 23) >= 0)
      v15 = a3;
    else
      v15 = *a3;
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_ibroadcast");
  v16 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v12, (const void **)&v80);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
  v17 = a1[47];
  if (*((char *)a3 + 23) >= 0)
    v18 = *((unsigned __int8 *)a3 + 23);
  else
    v18 = (size_t)a3[1];
  v19 = &v80;
  std::string::basic_string[abi:ne180100]((uint64_t)&v80, v18 + 6);
  if (v81 < 0)
    v19 = (__int128 *)v80;
  if (v18)
  {
    if (*((char *)a3 + 23) >= 0)
      v20 = a3;
    else
      v20 = *a3;
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "_irelu");
  v21 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v17, (const void **)&v80);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
  v22 = a1[54];
  if (*((char *)a3 + 23) >= 0)
    v23 = *((unsigned __int8 *)a3 + 23);
  else
    v23 = (size_t)a3[1];
  v24 = &v80;
  std::string::basic_string[abi:ne180100]((uint64_t)&v80, v23 + 3);
  if (v81 < 0)
    v24 = (__int128 *)v80;
  if (v23)
  {
    if (*((char *)a3 + 23) >= 0)
      v25 = a3;
    else
      v25 = *a3;
    memmove(v24, v25, v23);
  }
  *(_DWORD *)((char *)v24 + v23) = 6513503;
  v74 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v22, (const void **)&v80);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
  v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 576))(a1);
  if (*((char *)a3 + 23) >= 0)
    v27 = *((unsigned __int8 *)a3 + 23);
  else
    v27 = (size_t)a3[1];
  v28 = &v80;
  std::string::basic_string[abi:ne180100]((uint64_t)&v80, v27 + 6);
  if (v81 < 0)
    v28 = (__int128 *)v80;
  if (v27)
  {
    if (*((char *)a3 + 23) >= 0)
      v29 = a3;
    else
      v29 = *a3;
    memmove(v28, v29, v27);
  }
  strcpy((char *)v28 + v27, "_round");
  v71 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v26, (const void **)&v80);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
  v72 = v21;
  v73 = v16;
  v30 = a1[48];
  if (*((char *)a3 + 23) >= 0)
    v31 = *((unsigned __int8 *)a3 + 23);
  else
    v31 = (size_t)a3[1];
  v32 = &v80;
  std::string::basic_string[abi:ne180100]((uint64_t)&v80, v31 + 4);
  if (v81 < 0)
    v32 = (__int128 *)v80;
  if (v31)
  {
    if (*((char *)a3 + 23) >= 0)
      v33 = a3;
    else
      v33 = *a3;
    memmove(v32, v33, v31);
  }
  strcpy((char *)v32 + v31, "_goc");
  v34 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v30, (const void **)&v80);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
  v35 = a1[49];
  if (*((char *)a3 + 23) >= 0)
    v36 = *((unsigned __int8 *)a3 + 23);
  else
    v36 = (size_t)a3[1];
  v37 = &v80;
  std::string::basic_string[abi:ne180100]((uint64_t)&v80, v36 + 11);
  if (v81 < 0)
    v37 = (__int128 *)v80;
  if (v36)
  {
    if (*((char *)a3 + 23) >= 0)
      v38 = a3;
    else
      v38 = *a3;
    memmove(v37, v38, v36);
  }
  strcpy((char *)v37 + v36, "_activation");
  v39 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v35, (const void **)&v80);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
  v40 = (*(uint64_t (**)(_QWORD *))(*a1 + 416))(a1);
  if (*((char *)a3 + 23) >= 0)
    v41 = *((unsigned __int8 *)a3 + 23);
  else
    v41 = (size_t)a3[1];
  v42 = &v79;
  std::string::basic_string[abi:ne180100]((uint64_t)&v79, v41 + 1);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v42 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if (v41)
  {
    if (*((char *)a3 + 23) >= 0)
      v43 = a3;
    else
      v43 = *a3;
    memmove(v42, v43, v41);
  }
  *(_WORD *)((char *)&v42->__r_.__value_.__l.__data_ + v41) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v76, "necc_transp");
  v44 = std::string::append(&v76, "_xfm", 4uLL);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v78 = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (v78 >= 0)
    v46 = __p;
  else
    v46 = (void **)__p[0];
  if (v78 >= 0)
    v47 = HIBYTE(v78);
  else
    v47 = (std::string::size_type)__p[1];
  v48 = std::string::append(&v79, (const std::string::value_type *)v46, v47);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v81 = v48->__r_.__value_.__r.__words[2];
  v80 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = ZinANELayer::CloneEncapsulatedLayer<ZinRCASLayer *>(v6, v40, (const void **)&v80);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
  if (SHIBYTE(v78) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v51 = operator new();
  v52 = *a2;
  v53 = (std::__shared_weak_count *)a2[1];
  v75[0] = v52;
  v75[1] = (uint64_t)v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(p_shared_owners);
    while (__stxr(v55 + 1, p_shared_owners));
  }
  if (*((char *)a3 + 23) >= 0)
    v56 = *((unsigned __int8 *)a3 + 23);
  else
    v56 = (size_t)a3[1];
  v57 = &v79;
  std::string::basic_string[abi:ne180100]((uint64_t)&v79, v56 + 1);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v57 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if (v56)
  {
    if (*((char *)a3 + 23) >= 0)
      v58 = a3;
    else
      v58 = *a3;
    memmove(v57, v58, v56);
  }
  *(_WORD *)((char *)&v57->__r_.__value_.__l.__data_ + v56) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v76, "necc_clone");
  v59 = std::string::append(&v76, "_xfm", 4uLL);
  v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v78 = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  if (v78 >= 0)
    v61 = __p;
  else
    v61 = (void **)__p[0];
  if (v78 >= 0)
    v62 = HIBYTE(v78);
  else
    v62 = (std::string::size_type)__p[1];
  v63 = std::string::append(&v79, (const std::string::value_type *)v61, v62);
  v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  v81 = v63->__r_.__value_.__r.__words[2];
  v80 = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  ZinNECrossCorrelationLayer::ZinNECrossCorrelationLayer((_QWORD *)v51, v75, &v80, v11, v73, v72, v74, v71, v34, v39, v50);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
  if (SHIBYTE(v78) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v53)
  {
    v65 = (unint64_t *)&v53->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (a1[33])
  {
    ZinANELayer::CopyMirInfo((ZinANELayer *)a1, (ZinEngineLayerMirInfo **)&v80);
    ZinANELayer::SetMirInfo(v51, (int **)&v80);
    v67 = (ZinEngineLayerMirInfo *)v80;
    *(_QWORD *)&v80 = 0;
    if (v67)
    {
      ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v67);
      MEMORY[0x20BD002F8]();
    }
  }
  ZinANELayer::CopyDMALayers((_QWORD *)v51, (const ZinANELayer *)a1);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId((ZinIrOpLayer *)a1);
  ZinIrOpLayer::SetGroupId(v51, *GroupId);
  v69 = *(_QWORD *)((char *)a1 + 420);
  if ((v69 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(v51 + 420) = v69;
    *(_BYTE *)(v51 + 424) = 1;
  }
  return v51;
}

void sub_206E93B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)(v35 - 112), 0);
  _Unwind_Resume(a1);
}

__n128 ZinNECrossCorrelationLayer::ExecutionOrderSort@<Q0>(__n128 *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  __n128 result;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  v3 = this[12].n128_u64[1];
  v7 = this[23];
  v8 = this[24];
  v9 = this[27];
  v4 = (*(uint64_t (**)(void))(this->n128_u64[0] + 416))();
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (char *)operator new(0x40uLL);
  a2[1] = v5 + 64;
  a2[2] = v5 + 64;
  *(_QWORD *)v5 = v3;
  *(__n128 *)(v5 + 8) = v7;
  *(__n128 *)(v5 + 24) = v9;
  result = v8;
  *(__n128 *)(v5 + 40) = v8;
  *((_QWORD *)v5 + 7) = v4;
  *a2 = v5;
  return result;
}

uint64_t ZinNECrossCorrelationLayer::SpatialSplitCopy(ZinNECrossCorrelationLayer *this, const TiledLayerTensorRegions *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ZinIrKernel *v13;
  ZinIrKernel *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string __p;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  ZinIrOpLayer::CreateSpatialSplitCopyTensor(this, a2, &v22);
  v20 = v22;
  v21 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  ZinIrOpLayer::CreateSpatialSplitCopyName(this, a2, &__p);
  v6 = (*(uint64_t (**)(ZinNECrossCorrelationLayer *, uint64_t *, std::string *))(*(_QWORD *)this + 176))(this, &v20, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v21;
  if (v21)
  {
    v8 = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(v6 + 264);
  if (v10 && !*(_BYTE *)(v10 + 233))
  {
    *(_QWORD *)(v10 + 200) = 1;
    *(_QWORD *)(v10 + 208) = 0;
    *(_QWORD *)(v10 + 216) = 0;
    *(_QWORD *)(v10 + 224) = 0;
    *(_WORD *)(v10 + 232) = 0;
  }
  v11 = *((_QWORD *)this + 54);
  if (v11)
  {
    v12 = *(_QWORD *)(v6 + 432);
    ZinANELayer::CreateSpatialSplitCopyKernel((uint64_t)this, (uint64_t *)(v11 + 136), a2, (ZinIrKernel **)&__p);
    v13 = (ZinIrKernel *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v12 + 136), v13);
    v14 = (ZinIrKernel *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v14)
    {
      ZinIrKernel::~ZinIrKernel(v14);
      MEMORY[0x20BD002F8]();
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v6;
}

void sub_206E93E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t ZinNECrossCorrelationLayer::HasValidOutputTranspose(ZinNECrossCorrelationLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Hal;
  uint64_t v5;

  if (!(*(unsigned int (**)(ZinNECrossCorrelationLayer *))(*(_QWORD *)this + 408))(this)
    || !*((_QWORD *)this + 33))
  {
    return 0;
  }
  v2 = (*(uint64_t (**)(ZinNECrossCorrelationLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 48;
  v3 = *(unsigned int *)((*(uint64_t (**)(ZinNECrossCorrelationLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 88);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  return (*(uint64_t (**)(ZinNECrossCorrelationLayer *, uint64_t, uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)this + 600))(this, v2, v3, (char *)this + 264, v5, 0);
}

void ZinNECrossCorrelationLayer::~ZinNECrossCorrelationLayer(ZinEngineLayerMirInfo **this)
{
  ZinANELayer::~ZinANELayer(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinIrOpt::DilatedConvDetection(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t i;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  void ***v16;
  void ***v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void ***v25;
  void ***v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  char *v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  char *v71;
  uint64_t v72;
  char *v73;
  __int128 v74;
  _OWORD *v75;
  _OWORD *v76;
  _OWORD *v77;
  char **v78;
  _BYTE v79[8];
  _QWORD v80[2];
  uint64_t v81;
  _QWORD *v82;
  _QWORD v83[3];
  _QWORD *v84;
  void **v85;
  char v86;
  _QWORD v87[4];
  uint64_t v88;
  _QWORD v89[3];
  _QWORD v90[4];
  uint64_t v91;
  _QWORD v92[3];
  _QWORD v93[4];
  uint64_t v94;
  _QWORD v95[3];
  _QWORD v96[4];
  uint64_t v97;
  _QWORD v98[3];
  _QWORD v99[4];
  uint64_t v100;
  _QWORD v101[23];
  _BYTE v102[24];
  _QWORD v103[3];
  _QWORD *v104;
  void **v105;
  char v106;
  _QWORD v107[4];
  uint64_t v108;
  _QWORD v109[3];
  _QWORD v110[4];
  uint64_t v111;
  _QWORD v112[3];
  _QWORD v113[4];
  uint64_t v114;
  _QWORD v115[3];
  _QWORD v116[4];
  uint64_t v117;
  _QWORD v118[3];
  _QWORD v119[4];
  uint64_t v120;
  _QWORD v121[3];
  _QWORD v122[4];
  uint64_t v123;
  _QWORD v124[3];
  _QWORD v125[4];
  uint64_t v126;
  _QWORD v127[3];
  _QWORD v128[4];
  uint64_t v129;
  _QWORD v130[3];
  _QWORD v131[4];
  uint64_t v132;
  _QWORD v133[3];
  _QWORD v134[4];
  uint64_t v135;
  _QWORD v136[23];
  _BYTE v137[24];
  _QWORD v138[3];
  _QWORD *v139;
  _QWORD v140[3];
  _QWORD v141[4];
  uint64_t v142;
  _QWORD v143[3];
  _QWORD v144[4];
  uint64_t v145;
  _QWORD v146[3];
  _QWORD v147[4];
  uint64_t v148;
  _QWORD v149[3];
  _QWORD v150[4];
  uint64_t v151;
  _QWORD v152[3];
  _QWORD v153[4];
  uint64_t v154;
  _QWORD v155[3];
  _QWORD v156[4];
  uint64_t v157;
  _QWORD v158[3];
  _QWORD v159[4];
  uint64_t v160;
  _QWORD v161[23];
  uint64_t v162;
  _OWORD v163[3];
  uint64_t v164;

  v164 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v140, "pad");
  v141[0] = &off_24C0037A8;
  v141[3] = v141;
  v70 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v142, &v70, 1);
  std::string::basic_string[abi:ne180100]<0>(v143, "space_to_channel");
  v144[0] = &off_24C003800;
  v144[3] = v144;
  v69 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v145, &v69, 1);
  std::string::basic_string[abi:ne180100]<0>(v146, "transpose1");
  v147[0] = &off_24C0039B8;
  v147[3] = v147;
  v68 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v148, &v68, 1);
  std::string::basic_string[abi:ne180100]<0>(v149, "conv");
  v150[0] = &off_24C003A10;
  v150[3] = v150;
  v67 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v151, &v67, 1);
  std::string::basic_string[abi:ne180100]<0>(v152, "transpose2");
  v153[0] = &off_24C0039B8;
  v153[3] = v153;
  v66 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v154, &v66, 1);
  std::string::basic_string[abi:ne180100]<0>(v155, "channel_to_space");
  v156[0] = &off_24C003908;
  v156[3] = v156;
  v65 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v157, &v65, 1);
  std::string::basic_string[abi:ne180100]<0>(v158, "view");
  v159[0] = &off_24C003960;
  v159[3] = v159;
  v64 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v160, &v64, 1);
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v105 = (void **)&v71;
  v106 = 0;
  v71 = (char *)operator new(0x2A0uLL);
  v72 = (uint64_t)v71;
  v73 = v71 + 672;
  v72 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v73, (uint64_t)v140, (uint64_t)v161, (uint64_t)v71);
  v138[0] = &off_24C003C78;
  v139 = v138;
  ZinLinearPattern::ZinLinearPattern(v161, &v71, a2, 0, v138, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v161, &v74);
  v163[0] = v74;
  v74 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v105, "pad");
  v107[0] = &off_24C0037A8;
  v107[3] = v107;
  v59 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v108, &v59, 1);
  std::string::basic_string[abi:ne180100]<0>(v109, "reshape_1");
  v110[0] = &off_24C003A68;
  v110[3] = v110;
  v58 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v111, &v58, 1);
  std::string::basic_string[abi:ne180100]<0>(v112, "transpose_1");
  v113[0] = &off_24C003AC0;
  v113[3] = v113;
  v57 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v114, &v57, 1);
  std::string::basic_string[abi:ne180100]<0>(v115, "transpose_2");
  v116[0] = &off_24C003B18;
  v116[3] = v116;
  v56 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v117, &v56, 1);
  std::string::basic_string[abi:ne180100]<0>(v118, "conv");
  v119[0] = &off_24C003A10;
  v119[3] = v119;
  v55 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v120, &v55, 1);
  std::string::basic_string[abi:ne180100]<0>(v121, "goc");
  v122[0] = &off_24C003B70;
  v122[3] = v122;
  v54 = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v123, &v54, 1);
  std::string::basic_string[abi:ne180100]<0>(v124, "activation");
  v125[0] = &off_24C05FD10;
  v125[3] = v125;
  v53 = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v126, &v53, 1);
  std::string::basic_string[abi:ne180100]<0>(v127, "transpose_3");
  v128[0] = &off_24C003BC8;
  v128[3] = v128;
  v52 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v129, &v52, 1);
  std::string::basic_string[abi:ne180100]<0>(v130, "transpose_4");
  v131[0] = &off_24C05FD80;
  v131[3] = v131;
  v51 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v132, &v51, 1);
  std::string::basic_string[abi:ne180100]<0>(v133, "reshape_2");
  v134[0] = &off_24C003C20;
  v134[3] = v134;
  v50 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v135, &v50, 1);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v85 = (void **)&v60;
  v86 = 0;
  v60 = (char *)operator new(0x3C0uLL);
  v61 = (uint64_t)v60;
  v62 = v60 + 960;
  v61 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v62, (uint64_t)&v105, (uint64_t)v136, (uint64_t)v60);
  v103[0] = &off_24C05FDF0;
  v104 = v103;
  ZinLinearPattern::ZinLinearPattern(v136, &v60, a2, 0, v103, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v136, &v63);
  v163[1] = v63;
  v63 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v85, "pad");
  v87[0] = &off_24C0037A8;
  v87[3] = v87;
  v45 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v88, &v45, 1);
  std::string::basic_string[abi:ne180100]<0>(v89, "space_to_batch");
  v90[0] = &off_24C003858;
  v90[3] = v90;
  v44 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v91, &v44, 1);
  std::string::basic_string[abi:ne180100]<0>(v92, "conv");
  v93[0] = &off_24C003A10;
  v93[3] = v93;
  v43 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v94, &v43, 1);
  std::string::basic_string[abi:ne180100]<0>(v95, "batch_to_space");
  v96[0] = &off_24C0038B0;
  v96[3] = v96;
  v42 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v97, &v42, 1);
  std::string::basic_string[abi:ne180100]<0>(v98, "view");
  v99[0] = &off_24C003960;
  v99[3] = v99;
  v41 = 2;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v100, &v41, 1);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v78 = &v46;
  v79[0] = 0;
  v46 = (char *)operator new(0x1E0uLL);
  v47 = (uint64_t)v46;
  v48 = v46 + 480;
  v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v48, (uint64_t)&v85, (uint64_t)v101, (uint64_t)v46);
  v83[0] = &off_24C003C78;
  v84 = v83;
  ZinLinearPattern::ZinLinearPattern(v101, &v46, a2, 0, v83, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v101, &v49);
  v163[2] = v49;
  v49 = 0uLL;
  v76 = 0;
  v77 = 0;
  v75 = 0;
  v78 = (char **)&v75;
  v79[0] = 0;
  v4 = operator new(0x30uLL);
  v5 = 0;
  v75 = v4;
  v76 = v4;
  v77 = v4 + 3;
  do
  {
    v6 = v163[v5];
    *v4 = v6;
    if (*((_QWORD *)&v6 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    ++v5;
    ++v4;
  }
  while (v5 != 3);
  v76 = v4;
  for (i = 2; i != -1; --i)
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v163[i]);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v101[0] = &off_24C01BCC8;
  v78 = (char **)v102;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  ZinPattern::~ZinPattern((ZinPattern *)v101);
  v13 = v84;
  if (v84 == v83)
  {
    v14 = 4;
    v13 = v83;
    goto LABEL_17;
  }
  if (v84)
  {
    v14 = 5;
LABEL_17:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  v78 = &v46;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  v15 = 480;
  do
  {
    v16 = &(&v85)[v15 / 8];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v83[v15 / 8 - 1]);
    v17 = *(void ****)((char *)&v81 + v15);
    if (&v79[v15] == (_BYTE *)v17)
    {
      v17 = v16 - 9;
      v18 = 4;
    }
    else
    {
      if (!v17)
        goto LABEL_24;
      v18 = 5;
    }
    ((void (*)(void))(*v17)[v18])();
LABEL_24:
    if ((char)v79[v15 - 1] < 0)
      operator delete(*(v16 - 12));
    v15 -= 96;
  }
  while (v15);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v136[0] = &off_24C01BCC8;
  v85 = (void **)v137;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v85);
  ZinPattern::~ZinPattern((ZinPattern *)v136);
  v22 = v104;
  if (v104 == v103)
  {
    v23 = 4;
    v22 = v103;
LABEL_36:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  else if (v104)
  {
    v23 = 5;
    goto LABEL_36;
  }
  v85 = (void **)&v60;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v85);
  v24 = 120;
  while (2)
  {
    v25 = &(&v105)[v24];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v102[v24 * 8 + 16]);
    v26 = *(void ****)&v102[v24 * 8 + 8];
    if (&v101[v24 + 21] == v26)
    {
      v26 = v25 - 9;
      v27 = 4;
LABEL_42:
      ((void (*)(void))(*v26)[v27])();
    }
    else if (v26)
    {
      v27 = 5;
      goto LABEL_42;
    }
    if (SHIBYTE(v101[v24 + 20]) < 0)
      operator delete(*(v25 - 12));
    v24 -= 12;
    if (v24 * 8)
      continue;
    break;
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v161[0] = &off_24C01BCC8;
  v105 = (void **)&v162;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v105);
  ZinPattern::~ZinPattern((ZinPattern *)v161);
  v31 = v139;
  if (v139 == v138)
  {
    v32 = 4;
    v31 = v138;
LABEL_55:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  else if (v139)
  {
    v32 = 5;
    goto LABEL_55;
  }
  v105 = (void **)&v71;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v105);
  v33 = 84;
  while (2)
  {
    v34 = &v140[v33];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v137[v33 * 8 + 16]);
    v35 = *(_QWORD **)&v137[v33 * 8 + 8];
    if (&v136[v33 + 21] == v35)
    {
      v35 = v34 - 9;
      v36 = 4;
LABEL_61:
      (*(void (**)(void))(*v35 + 8 * v36))();
    }
    else if (v35)
    {
      v36 = 5;
      goto LABEL_61;
    }
    if (SHIBYTE(v136[v33 + 20]) < 0)
      operator delete((void *)*(v34 - 12));
    v33 -= 12;
    if (v33 * 8)
      continue;
    break;
  }
  v80[0] = &off_24C05FE70;
  v80[1] = &v75;
  v81 = a2;
  v82 = v80;
  v37 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v80, 1);
  v38 = v82;
  if (v82 == v80)
  {
    v39 = 4;
    v38 = v80;
LABEL_69:
    (*(void (**)(void))(*v38 + 8 * v39))();
  }
  else if (v82)
  {
    v39 = 5;
    goto LABEL_69;
  }
  v105 = (void **)&v75;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v105);
  return v37;
}

void sub_206E94B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  char *v43;
  uint64_t v44;
  char *v46;
  uint64_t v47;

  v46 = *(char **)(v44 + 168);
  if (v46 == v43)
  {
    v47 = 4;
    v46 = &a43;
  }
  else
  {
    if (!v46)
      goto LABEL_6;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_6:
  *(_QWORD *)(v44 + 928) = &a37;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x420]);
  _Unwind_Resume(a1);
}

void sub_206E94F7C()
{
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&STACK[0x8D0]);
  JUMPOUT(0x206E94F74);
}

void sub_206E94F8C()
{
  JUMPOUT(0x206E94F74);
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0037A8;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0037A8;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  _DWORD *v5;
  _DWORD *v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 64);
  if (*(_DWORD *)(v2 + 8) == 58
    && !*(_DWORD *)(v2 + 208)
    && !*(_DWORD *)(v2 + 204)
    && !*(_DWORD *)(v2 + 200)
    && !*(_DWORD *)(v2 + 196))
  {
    v5 = *(_DWORD **)(v2 + 216);
    v6 = *(_DWORD **)(v2 + 224);
    if (v5 == v6)
    {
LABEL_15:
      _H0 = *(_WORD *)(v2 + 240);
      __asm { FCVT            S0, H0 }
      v3 = _S0 == 0.0;
      return v3 | 0x100u;
    }
    while (v5[1] == 7)
    {
      if (*v5 > 4u || ((1 << *v5) & 0x1A) == 0)
        break;
      v5 += 2;
      if (v5 == v6)
        goto LABEL_15;
    }
  }
  v3 = 0;
  return v3 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003800;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003800;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 40) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0039B8;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0039B8;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ZinReshapeLayer *v2;
  uint64_t ReshapeInfo;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;

  v2 = *(ZinReshapeLayer **)(a2 + 8);
  if (*(_DWORD *)(*((_QWORD *)v2 + 8) + 8) != 37)
    goto LABEL_13;
  ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v2);
  v4 = *(_DWORD **)(ReshapeInfo + 16);
  if (*(_QWORD *)(ReshapeInfo + 24) - (_QWORD)v4 != 16)
    goto LABEL_13;
  v5 = v4[1];
  if (v5 == 2)
  {
    if (*v4)
      goto LABEL_13;
  }
  else if (v5 || *v4 != 2)
  {
    goto LABEL_13;
  }
  v6 = v4[3];
  if (v6 != 2)
  {
    if (!v6 && v4[2] == 2)
      goto LABEL_11;
LABEL_13:
    v7 = 0;
    return v7 | 0x100u;
  }
  if (v4[2])
    goto LABEL_13;
LABEL_11:
  v7 = 1;
  return v7 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_6>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003A10;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003A10;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  BOOL v4;
  BOOL v5;
  _BOOL4 v6;

  v2 = *(_QWORD *)(a2 + 8);
  v6 = !*(_DWORD *)(*(_QWORD *)(v2 + 64) + 8)
    && (v3 = *(_DWORD **)(v2 + 136), v3[82] == 1)
    && v3[83] == 1
    && v3[84] == 1
    && v3[85] == 1
    && v3[86] == 1
    && v3[87] == 1
    && (v3[96] == 1 ? (v4 = v3[97] == 1) : (v4 = 0), v4 ? (v5 = v3[98] == 1) : (v5 = 0), v5)
    && !ZinKernelDescriptor::HasPadding((ZinKernelDescriptor *)(v3 + 44));
  return v6 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_7>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003908;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003908;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 41) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_4>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003960;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003960;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 36) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_5>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003C78;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003C78;
}

BOOL std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t SingleMatch;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  _BOOL8 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD *, _QWORD, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[5];
  _QWORD v54[3];
  int8x16_t v55[2];
  uint64_t v56;
  int v57[6];
  void *__p[2];
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;

  v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_channel");
  SingleMatch = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "channel_to_space");
  v6 = (_QWORD *)ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose1");
  v7 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose2");
  v8 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_batch");
  v9 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_to_space");
  v10 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  if (SingleMatch)
    v11 = v6 == 0;
  else
    v11 = 1;
  v13 = v11 || v7 == 0 || v8 == 0;
  v14 = !v13;
  if (v13)
  {
    v17 = 0;
    if (!v9 || !v10)
      return v17;
    v15 = *(_DWORD **)(v9 + 64);
    v16 = *(_DWORD **)(v10 + 64);
  }
  else
  {
    v15 = *(_DWORD **)(SingleMatch + 64);
    v16 = (_DWORD *)v6[8];
  }
  if (v15[3] != v16[3] || v15[4] != v16[4] || v15[5] != v16[5])
    return 0;
  v63 = *(_QWORD *)(v15 + 3);
  v64 = v15[5];
  std::string::basic_string[abi:ne180100]<0>(__p, "pad");
  v18 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  v19 = (_QWORD *)ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  v20 = v19[17];
  v21 = *(_DWORD **)(v18 + 64);
  std::string::basic_string[abi:ne180100]<0>(__p, "view");
  ZinPattern::GetMatch(v4, (unsigned __int8 *)__p, &v61);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  v60 = 0;
  *(_OWORD *)__p = 0u;
  v59 = 0u;
  v22 = v61;
  if (v61 == v62)
  {
    v25 = 0;
    v24 = 0;
    v23 = 0;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = v61;
    do
    {
      v27 = *v26++;
      v28 = *(_QWORD **)(v27 + 64);
      v23 += v28[5];
      v24 += v28[4];
      v25 += v28[6];
    }
    while (v26 != v62);
    *(_QWORD *)&v59 = v24;
    *((_QWORD *)&v59 + 1) = v23;
    v60 = v25;
  }
  if (v23 <= (int)v21[43] && v24 <= (int)v21[45] && v25 <= (int)v21[47])
  {
    ZinIrOpt::GetDilatedConvPadding((_DWORD *)(v20 + 248), __p, v21 + 43, (int *)&v63, v57);
    v30 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v18 + 88) + 32))(**(_QWORD **)(v18 + 88), 0, 0);
    v31 = *(int8x16_t *)(v30 + 64);
    v55[0] = *(int8x16_t *)(v30 + 48);
    v55[1] = v31;
    v56 = *(_QWORD *)(v30 + 80);
    if (v14)
      v55[0] = vextq_s8(v55[0], v55[0], 8uLL);
    v32 = *(_QWORD *)(v20 + 264);
    v54[0] = *(_QWORD *)(v20 + 272);
    v54[1] = v32;
    v54[2] = *(_QWORD *)(v20 + 280);
    v33 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v19 + 32))(v19, 0, 0);
    ZinGetOutputTensorDimension((uint64_t)v55, v54, (unsigned int *)(v20 + 328), (unsigned int *)(v20 + 340), v57, *(_QWORD *)(v33 + 56), (int *)&v63, (uint64_t)v53);
    if (!v14)
      v6 = (_QWORD *)v10;
    if (v61 != v62)
      v6 = (_QWORD *)*(v62 - 1);
    v34 = v53[3];
    v35 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0) + 72);
    v36 = v53[2];
    v37 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0) + 64);
    v38 = v53[4];
    v39 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0);
    v42 = v34 == v35 && v36 == v37 && v38 == *(_QWORD *)(v39 + 80);
    v43 = v53[1];
    v44 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32);
    if (v14)
    {
      v45 = *(_QWORD *)(v44(v6, 0, 0) + 48);
      v46 = v53[0];
      v47 = (uint64_t *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0) + 56);
    }
    else
    {
      v45 = *(_QWORD *)(v44(v6, 0, 0) + 56);
      v46 = v53[0];
      v47 = (uint64_t *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0) + 48);
    }
    v48 = *v47;
    if (v43 != v45 || v46 != v48)
      v42 = 0;
    v50 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0) + 72);
    if (v50 != *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v18 + 88) + 32))(**(_QWORD **)(v18 + 88), 0, 0)+ 72))v42 = 0;
    v51 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0) + 64);
    if (v51 != *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v18 + 88) + 32))(**(_QWORD **)(v18 + 88), 0, 0)+ 64))v42 = 0;
    v52 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0) + 80);
    v17 = v52 == *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v18 + 88) + 32))(**(_QWORD **)(v18 + 88), 0, 0)+ 80)&& v42;
    v22 = v61;
    if (v61)
      goto LABEL_50;
  }
  else
  {
    v17 = 0;
    if (v61)
    {
LABEL_50:
      v62 = v22;
      operator delete(v22);
    }
  }
  return v17;
}

void sub_206E95B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v32;

  v32 = *(void **)(v30 - 120);
  if (v32)
  {
    *(_QWORD *)(v30 - 112) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_15>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

_DWORD *ZinIrOpt::GetDilatedConvPadding@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, int *a4@<X3>, _DWORD *a5@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v5 = a3[2] - a2[4];
  v6 = a3[4] - a2[8];
  v8 = *a4;
  v7 = a4[1];
  v9 = a2[6] - *a3 + (result[6] - 1) * *a4;
  *a5 = *a3 - a2[6];
  a5[1] = v9;
  v10 = (result[4] - 1) * v7 - v5;
  a5[2] = v5;
  a5[3] = v10;
  v11 = a4[2];
  v12 = (result[8] - 1) * v11;
  a5[4] = v6;
  a5[5] = v12;
  if (v8 == 1)
    *(_QWORD *)a5 = 0;
  if (v7 == 1)
    *((_QWORD *)a5 + 1) = 0;
  if (v11 == 1)
    *((_QWORD *)a5 + 2) = 0;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003A68;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003A68;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  _BOOL4 v7;

  v2 = *(_QWORD *)(a2 + 8);
  v7 = *(_DWORD *)(*(_QWORD *)(v2 + 64) + 8) == 35
    && ((v3 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 88) + 32))(**(_QWORD **)(v2 + 88), 0, 0), v4 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0, 0), v3[6] == 1)? (v5 = v3[10] == 1): (v5 = 0), v5 ? (v6 = v3[7] == 1) : (v6 = 0), v6)&& v3[8] == *(_QWORD *)(v4 + 64) * *(_QWORD *)(v4 + 56);
  return v7 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_8>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003AC0;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003AC0;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ZinReshapeLayer *v2;
  TransposeLayerUtils *ReshapeInfo;
  _DWORD *v4;
  const DimensionOrderHint *v5;
  _BOOL4 IsDimOrderAfterTranspose;
  void *__p[4];
  void *v9;
  void *v10;
  char *v11;
  const void *v12[4];

  v2 = *(ZinReshapeLayer **)(a2 + 8);
  if (*(_DWORD *)(*((_QWORD *)v2 + 8) + 8) == 37)
  {
    ReshapeInfo = (TransposeLayerUtils *)ZinReshapeLayer::GetReshapeInfo(v2);
    DimensionOrderHint::DimensionOrderHint(v12, 2);
    v4 = operator new(0x14uLL);
    v10 = v4 + 5;
    v11 = (char *)(v4 + 5);
    v4[4] = 4;
    *(_OWORD *)v4 = xmmword_207AA73CC;
    v9 = v4;
    DimensionOrderHint::DimensionOrderHint(__p, &v9);
    IsDimOrderAfterTranspose = TransposeLayerUtils::IsDimOrderAfterTranspose(ReshapeInfo, v12, (DimensionOrderHint *)__p, v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete((void *)v12[0]);
    }
  }
  else
  {
    IsDimOrderAfterTranspose = 0;
  }
  return IsDimOrderAfterTranspose | 0x100u;
}

void sub_206E95EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  v17 = *(void **)(v15 - 48);
  if (v17)
  {
    *(_QWORD *)(v15 - 40) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_9>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003B18;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003B18;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ZinReshapeLayer *v2;
  TransposeLayerUtils *ReshapeInfo;
  _DWORD *v4;
  const DimensionOrderHint *v5;
  _BOOL4 IsDimOrderAfterTranspose;
  void *__p[4];
  void *v9;
  void *v10;
  char *v11;
  const void *v12[4];

  v2 = *(ZinReshapeLayer **)(a2 + 8);
  if (*(_DWORD *)(*((_QWORD *)v2 + 8) + 8) == 37)
  {
    ReshapeInfo = (TransposeLayerUtils *)ZinReshapeLayer::GetReshapeInfo(v2);
    DimensionOrderHint::DimensionOrderHint(v12, 2);
    v4 = operator new(0x14uLL);
    v10 = v4 + 5;
    v11 = (char *)(v4 + 5);
    v4[4] = 3;
    *(_OWORD *)v4 = xmmword_207AA74D8;
    v9 = v4;
    DimensionOrderHint::DimensionOrderHint(__p, &v9);
    IsDimOrderAfterTranspose = TransposeLayerUtils::IsDimOrderAfterTranspose(ReshapeInfo, v12, (DimensionOrderHint *)__p, v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete((void *)v12[0]);
    }
  }
  else
  {
    IsDimOrderAfterTranspose = 0;
  }
  return IsDimOrderAfterTranspose | 0x100u;
}

void sub_206E96098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  v17 = *(void **)(v15 - 48);
  if (v17)
  {
    *(_QWORD *)(v15 - 40) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_10>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003B70;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003B70;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 64) + 8) == 2 && ZinGOCLayer::IsPerCout((ZinIrKernel **)v2);
  return v3 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_11>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C05FD10;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C05FD10;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 4) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_16>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003BC8;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003BC8;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ZinReshapeLayer *v2;
  TransposeLayerUtils *ReshapeInfo;
  _DWORD *v4;
  const DimensionOrderHint *v5;
  _BOOL4 IsDimOrderAfterTranspose;
  void *__p[4];
  void *v9;
  void *v10;
  char *v11;
  const void *v12[4];

  v2 = *(ZinReshapeLayer **)(a2 + 8);
  if (*(_DWORD *)(*((_QWORD *)v2 + 8) + 8) == 37)
  {
    ReshapeInfo = (TransposeLayerUtils *)ZinReshapeLayer::GetReshapeInfo(v2);
    DimensionOrderHint::DimensionOrderHint(v12, 2);
    v4 = operator new(0x14uLL);
    v10 = v4 + 5;
    v11 = (char *)(v4 + 5);
    v4[4] = 2;
    *(_OWORD *)v4 = xmmword_207AA77D0;
    v9 = v4;
    DimensionOrderHint::DimensionOrderHint(__p, &v9);
    IsDimOrderAfterTranspose = TransposeLayerUtils::IsDimOrderAfterTranspose(ReshapeInfo, v12, (DimensionOrderHint *)__p, v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete((void *)v12[0]);
    }
  }
  else
  {
    IsDimOrderAfterTranspose = 0;
  }
  return IsDimOrderAfterTranspose | 0x100u;
}

void sub_206E963D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  v17 = *(void **)(v15 - 48);
  if (v17)
  {
    *(_QWORD *)(v15 - 40) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_12>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C05FD80;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C05FD80;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ZinReshapeLayer *v2;
  TransposeLayerUtils *ReshapeInfo;
  _DWORD *v4;
  const DimensionOrderHint *v5;
  _BOOL4 IsDimOrderAfterTranspose;
  void *__p[4];
  void *v9;
  void *v10;
  char *v11;
  const void *v12[4];

  v2 = *(ZinReshapeLayer **)(a2 + 8);
  if (*(_DWORD *)(*((_QWORD *)v2 + 8) + 8) == 37)
  {
    ReshapeInfo = (TransposeLayerUtils *)ZinReshapeLayer::GetReshapeInfo(v2);
    DimensionOrderHint::DimensionOrderHint(v12, 2);
    v4 = operator new(0x14uLL);
    v10 = v4 + 5;
    v11 = (char *)(v4 + 5);
    v4[4] = 4;
    *(_OWORD *)v4 = xmmword_207AA78DC;
    v9 = v4;
    DimensionOrderHint::DimensionOrderHint(__p, &v9);
    IsDimOrderAfterTranspose = TransposeLayerUtils::IsDimOrderAfterTranspose(ReshapeInfo, v12, (DimensionOrderHint *)__p, v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete((void *)v12[0]);
    }
  }
  else
  {
    IsDimOrderAfterTranspose = 0;
  }
  return IsDimOrderAfterTranspose | 0x100u;
}

void sub_206E96590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  v17 = *(void **)(v15 - 48);
  if (v17)
  {
    *(_QWORD *)(v15 - 40) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_13>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003C20;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003C20;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v6;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v2 + 64) + 8) == 35)
  {
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v2 + 88) + 32))(**(_QWORD **)(v2 + 88), 0, 0);
    v4 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0, 0);
    v6 = *(_QWORD *)(v4 + 64) == *(_QWORD *)(v3 + 64) * *(_QWORD *)(v3 + 56) && *(_QWORD *)(v4 + 56) == 1;
  }
  else
  {
    v6 = 0;
  }
  return v6 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_14>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C05FDF0;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C05FDF0;
}

BOOL std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t SingleMatch;
  _QWORD ***v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD v25[5];
  void *__p[2];
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD v33[3];

  v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape_1");
  SingleMatch = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape_2");
  v6 = (_QWORD ***)ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0);
  if (*(_QWORD *)(v7 + 64) != *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**v6[11] + 32))(*v6[11], 0, 0)+ 64))return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "pad");
  v8 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v8 + 88) + 32))(**(_QWORD **)(v8 + 88), 0, 0);
  v10 = (_QWORD *)((uint64_t (*)(_QWORD ***, _QWORD, _QWORD))(*v6)[4])(v6, 0, 0);
  if (v9[6] != v10[6])
    return 0;
  v11 = v10;
  if (v9[10] != v10[10] || v9[7] != v10[7] || v9[8] != v10[8] || v9[9] != v10[9])
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  v12 = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)__p);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v12 + 88) + 32))(**(_QWORD **)(v12 + 88), 0, 0);
  v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
  if (*(_QWORD *)(v13 + 48) * *(_QWORD *)(v13 + 72) != *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0)+ 64)|| *(_QWORD *)(v14 + 48) * *(_QWORD *)(v14 + 72) != v11[8])
  {
    return 0;
  }
  result = 0;
  v16 = *(_QWORD **)(v12 + 136);
  v17 = v16[33];
  v33[0] = v16[34];
  v33[1] = v17;
  v18 = v16[35];
  v33[2] = v18;
  if (v17 == 1 && v18 == 1)
  {
    v31 = *(_QWORD *)(v7 + 64);
    v32 = 0x100000001;
    v19 = *(_QWORD *)(v8 + 64);
    v29 = *(_OWORD *)(v19 + 180);
    v30 = *(_QWORD *)(v19 + 172);
    v20 = (void *)v9[9];
    v21 = v9[10];
    __p[0] = *((void **)v9 + 6);
    __p[1] = v20;
    v27 = *(_OWORD *)(v9 + 7);
    v28 = v21;
    v22 = (unsigned int *)(v16 + 41);
    v23 = (unsigned int *)v16 + 85;
    v24 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
    ZinGetOutputTensorDimension((uint64_t)__p, v33, v22, v23, (int *)&v29, *(_QWORD *)(v24 + 56), &v31, (uint64_t)v25);
    return v11[8] == v25[3];
  }
  return result;
}

void sub_206E96AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_17>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003858;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003858;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 38) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0038B0;
  return result;
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0038B0;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8) == 39) | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_3>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C05FE70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C05FE70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, uint64_t *a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;

  v3 = *(uint64_t ***)(a1 + 8);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    return 0;
  v6 = *a2;
  v7 = *a3;
  while (!(*(unsigned int (**)(uint64_t, uint64_t **, uint64_t))(*(_QWORD *)*v4 + 8))(*v4, v6, v7)
       || ZinIrOpt::ReplaceWithDilatedConv(v6, v4))
  {
    v4 += 2;
    if (v4 == v5)
      return 0;
  }
  return 3;
}

uint64_t std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18,std::allocator<ZinIrOpt::DilatedConvDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_18>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t ZinIrOpt::ReplaceWithDilatedConv(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t SingleMatch;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  __int128 *v21;
  const void *v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  ZinIrOpLayer *v39;
  _BOOL4 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const void **v46;
  size_t v47;
  void **v48;
  const void *v49;
  uint64_t v50;
  ZinIrKernel *v51;
  uint64_t v52;
  int v53;
  int v54;
  ZinIrOpLayer *v55;
  ZinIrKernel *v56;
  _BOOL4 v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _BOOL4 HasPerCoutScale;
  ZinIrKernel *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  ZinReshapeLayer *v71;
  uint64_t v72;
  uint64_t v73;
  ZinIrOpLayer *v74;
  uint64_t v75;
  uint64_t v76;
  std::string *v77;
  __int128 v78;
  size_t v79;
  _BYTE *v80;
  const void *v81;
  void **v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  ZinIrOpLayer *DilatedConv;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t ReshapeInfo;
  ZinIrOpLayer *Transpose;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  ZinIrOpLayer *v100;
  int v101;
  int v102;
  int v103;
  uint64_t **v104;
  int v105;
  _BOOL4 v106;
  _BOOL4 v107;
  _BOOL4 v108;
  _BOOL4 v109;
  _BOOL4 v110;
  uint64_t v111;
  ZinIrOpLayer **v112;
  ZinIrOpLayer **v113;
  ZinIrOpLayer *PerCoutGOC;
  ZinIrOpLayer *Activation;
  ZinIrOpLayer *v116;
  _BOOL4 HasPerCoutBias;
  uint64_t i;
  int v119;
  int v120;
  char *v121;
  char *v122;
  char *v123;
  _DWORD *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  ZinReshapeLayer *v139;
  char *v140;
  ZinReshapeLayer *v141;
  _DWORD *v142;
  ZinReshapeLayer *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  int v153;
  int v154;
  _BOOL4 v155;
  int v156;
  int v157;
  uint64_t v158;
  __int128 v159;
  _BOOL4 v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  ZinIrOpLayer *v167;
  _BOOL4 v168;
  int v169;
  int v170;
  _BOOL4 v171;
  _BOOL4 v172;
  _BOOL4 v173;
  _BOOL4 v174;
  int v175;
  _BOOL4 v176;
  _BOOL4 v177;
  _BOOL4 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t **v182;
  uint64_t v183;
  ZinIrOpLayer *v184;
  uint64_t v185;
  ZinIrOpLayer *v186;
  uint64_t v187;
  uint64_t v188;
  std::string *v189;
  __int128 v190;
  size_t v191;
  _BYTE *v192;
  const void *v193;
  void **v194;
  std::string::size_type v195;
  std::string *v196;
  __int128 v197;
  std::string *v198;
  __int128 v199;
  uint64_t *v200;
  uint64_t v201;
  ZinIrOpLayer *v202;
  _BOOL4 v203;
  int v204;
  uint64_t **v205;
  int v206;
  _BOOL4 v207;
  _BOOL4 v208;
  _BOOL4 v209;
  ZinIrOpLayer **v210;
  int v212;
  char v213;
  char v214;
  ZinIrOpLayer *v215;
  ZinIrOpLayer *v216;
  ZinIrOpLayer *v217;
  uint64_t v218;
  uint64_t **v219;
  ZinIrOpLayer *v220;
  ZinIrOpLayer *v221;
  _BOOL4 v222;
  ZinIrOpLayer *v223;
  _BOOL4 v224;
  ZinReshapeLayer *v225;
  _BOOL4 v226;
  ZinIrOpLayer *v227;
  ZinIrOpLayer *v228;
  ZinReshapeLayer *v229;
  ZinReshapeLayer *v230;
  ZinIrKernel *v231;
  ZinIrKernel *v232;
  void *v233[2];
  char v234;
  void *v235[2];
  int64_t v236;
  __int128 v237;
  uint64_t v238;
  _BYTE v239[12];
  __int128 __p;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  int v249;
  __int128 v250;
  __int128 v251;
  int v252;
  _BYTE v253[32];
  uint64_t v254;
  ZinReshapeLayer *v255;
  _QWORD v256[2];
  ZinReshapeLayer *v257;
  unint64_t v258;
  char *v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;

  v263 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_4");
  SingleMatch = ZinPattern::GetSingleMatch(v4, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  if (!SingleMatch)
  {
    v65 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "space_to_channel");
    v66 = ZinPattern::GetSingleMatch(v65, (unsigned __int8 *)&__p);
    v67 = v66;
    if (SBYTE7(v241) < 0)
    {
      operator delete((void *)__p);
      if (v67)
        goto LABEL_71;
    }
    else if (v66)
    {
LABEL_71:
      v68 = *a2;
      std::string::basic_string[abi:ne180100]<0>(&__p, "channel_to_space");
      v228 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v68, (unsigned __int8 *)&__p);
      if (SBYTE7(v241) < 0)
        operator delete((void *)__p);
      v69 = *a2;
      std::string::basic_string[abi:ne180100]<0>(&__p, "space_to_channel");
      v227 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v69, (unsigned __int8 *)&__p);
      if (SBYTE7(v241) < 0)
        operator delete((void *)__p);
      v70 = *a2;
      std::string::basic_string[abi:ne180100]<0>(&__p, "transpose1");
      v71 = (ZinReshapeLayer *)ZinPattern::GetSingleMatch(v70, (unsigned __int8 *)&__p);
      if (SBYTE7(v241) < 0)
        operator delete((void *)__p);
      v72 = *a2;
      std::string::basic_string[abi:ne180100]<0>(&__p, "transpose2");
      v230 = (ZinReshapeLayer *)ZinPattern::GetSingleMatch(v72, (unsigned __int8 *)&__p);
      if (SBYTE7(v241) < 0)
        operator delete((void *)__p);
      v73 = *a2;
      std::string::basic_string[abi:ne180100]<0>(&__p, "pad");
      v74 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v73, (unsigned __int8 *)&__p);
      if (SBYTE7(v241) < 0)
        operator delete((void *)__p);
      v75 = *a2;
      std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
      v76 = ZinPattern::GetSingleMatch(v75, (unsigned __int8 *)&__p);
      if (SBYTE7(v241) < 0)
        operator delete((void *)__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "dil_conv_det");
      v77 = std::string::append((std::string *)&__p, "_xfm", 4uLL);
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v236 = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)v235 = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v241) < 0)
        operator delete((void *)__p);
      if (*(char *)(v76 + 47) >= 0)
        v79 = *(unsigned __int8 *)(v76 + 47);
      else
        v79 = *(_QWORD *)(v76 + 32);
      v80 = v253;
      std::string::basic_string[abi:ne180100]((uint64_t)v253, v79 + 1);
      if (v253[23] < 0)
        v80 = *(_BYTE **)v253;
      if (v79)
      {
        if (*(char *)(v76 + 47) >= 0)
          v81 = (const void *)(v76 + 24);
        else
          v81 = *(const void **)(v76 + 24);
        memmove(v80, v81, v79);
      }
      *(_WORD *)&v80[v79] = 95;
      if (v236 >= 0)
        v82 = v235;
      else
        v82 = (void **)v235[0];
      if (v236 >= 0)
        v83 = HIBYTE(v236);
      else
        v83 = (std::string::size_type)v235[1];
      v84 = std::string::append((std::string *)v253, (const std::string::value_type *)v82, v83);
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      *(_QWORD *)&v261 = *((_QWORD *)&v84->__r_.__value_.__l + 2);
      v260 = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      v86 = std::string::append((std::string *)&v260, "_", 1uLL);
      v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      *(_QWORD *)&v248 = *((_QWORD *)&v86->__r_.__value_.__l + 2);
      v247 = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(&__p, &v247);
      if (SBYTE7(v248) < 0)
        operator delete((void *)v247);
      if (SBYTE7(v261) < 0)
        operator delete((void *)v260);
      if ((v253[23] & 0x80000000) != 0)
        operator delete(*(void **)v253);
      v88 = *((_QWORD *)v228 + 8);
      v89 = *a2;
      std::string::basic_string[abi:ne180100]<0>(&v247, "view");
      ZinPattern::GetMatch(v89, (unsigned __int8 *)&v247, v253);
      if (SBYTE7(v248) < 0)
        operator delete((void *)v247);
      DilatedConv = (ZinIrOpLayer *)ZinIrOpt::HelperCreateDilatedConv((ZinIrOpLayer *)v76, (int *)(v88 + 12), (uint64_t)v74, (uint64_t **)v253, (uint64_t)&__p, 1);
      v91 = *((_QWORD *)v71 + 2);
      v92 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)v74 + 11) + 32))(**((_QWORD **)v74 + 11), 0, 0);
      v93 = *(_DWORD *)((*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0, 0)+ 88);
      ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v71);
      Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v91, (uint64_t)&__p, v92 + 48, v93, ReshapeInfo + 16);
      v96 = *((_QWORD *)v230 + 2);
      v97 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)DilatedConv + 32))(DilatedConv, 0, 0);
      v98 = *(_DWORD *)((*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v230 + 32))(v230, 0, 0)+ 88);
      v99 = ZinReshapeLayer::GetReshapeInfo(v230);
      v100 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v96, (uint64_t)&__p, v97 + 48, v98, v99 + 16);
      *(_QWORD *)&v250 = v71;
      *(_QWORD *)&v260 = &v250;
      *((_QWORD *)&v260 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v247, &v260);
      v226 = ZinIrOpLayerGraph::AddNode(a1, Transpose, (ZinIrOpLayer ***)&v247);
      *(_QWORD *)&v247 = &unk_24C02BB18;
      if (*((_QWORD *)&v247 + 1))
      {
        *(_QWORD *)&v248 = *((_QWORD *)&v247 + 1);
        operator delete(*((void **)&v247 + 1));
      }
      *(_QWORD *)&v260 = v74;
      *((_QWORD *)&v260 + 1) = v227;
      *(_QWORD *)&v261 = v76;
      *((_QWORD *)&v261 + 1) = v228;
      *(_QWORD *)&v250 = &v260;
      *((_QWORD *)&v250 + 1) = 4;
      Layer2TDMapper::SourceLayer::SourceLayer(&v247, &v250);
      v224 = ZinIrOpLayerGraph::AddNode(a1, DilatedConv, (ZinIrOpLayer ***)&v247);
      *(_QWORD *)&v247 = &unk_24C02BB18;
      if (*((_QWORD *)&v247 + 1))
      {
        *(_QWORD *)&v248 = *((_QWORD *)&v247 + 1);
        operator delete(*((void **)&v247 + 1));
      }
      *(_QWORD *)&v250 = v71;
      *(_QWORD *)&v260 = &v250;
      *((_QWORD *)&v260 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v247, &v260);
      v222 = ZinIrOpLayerGraph::AddNode(a1, v100, (ZinIrOpLayer ***)&v247);
      *(_QWORD *)&v247 = &unk_24C02BB18;
      if (*((_QWORD *)&v247 + 1))
      {
        *(_QWORD *)&v248 = *((_QWORD *)&v247 + 1);
        operator delete(*((void **)&v247 + 1));
      }
      v101 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)Transpose, (uint64_t)DilatedConv, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v102 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)DilatedConv, (uint64_t)v100, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v103 = ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)a1, v74, Transpose);
      v104 = (uint64_t **)v228;
      if (*(_QWORD *)v253 != *(_QWORD *)&v253[8])
        v104 = *(uint64_t ***)(*(_QWORD *)&v253[8] - 8);
      v248 = 0u;
      v247 = 0u;
      v249 = 1065353216;
      v105 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, v104, v100, &v247);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v247);
      v106 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v74, 0);
      v107 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v227, 0);
      v108 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v71, 0);
      v109 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)v76, 0);
      v110 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v230, 0);
      v111 = (v226 && v224 && v222) & v101 & v102 & v103 & v105 & (v106 && v107 && v108 && v109 && v110) & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v228, 0);
      v113 = *(ZinIrOpLayer ***)&v253[8];
      v112 = *(ZinIrOpLayer ***)v253;
      if (*(_QWORD *)v253 == *(_QWORD *)&v253[8])
        goto LABEL_265;
      do
        v111 = v111 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, *v112++, 0);
      while (v112 != v113);
LABEL_264:
      v112 = *(ZinIrOpLayer ***)v253;
LABEL_265:
      if (v112)
      {
        *(_QWORD *)&v253[8] = v112;
        operator delete(v112);
      }
      *(_QWORD *)&__p = off_24C01FBB0;
      if (SHIBYTE(v241) < 0)
        operator delete(*((void **)&__p + 1));
      if (SHIBYTE(v236) < 0)
        operator delete(v235[0]);
      return v111;
    }
    v179 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "batch_to_space");
    v180 = ZinPattern::GetSingleMatch(v179, (unsigned __int8 *)&__p);
    v111 = v180;
    if (SBYTE7(v241) < 0)
    {
      operator delete((void *)__p);
      if (!v111)
        return v111;
    }
    else if (!v180)
    {
      return v111;
    }
    v181 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "batch_to_space");
    v182 = (uint64_t **)ZinPattern::GetSingleMatch(v181, (unsigned __int8 *)&__p);
    if (SBYTE7(v241) < 0)
      operator delete((void *)__p);
    v183 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "space_to_batch");
    v184 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v183, (unsigned __int8 *)&__p);
    if (SBYTE7(v241) < 0)
      operator delete((void *)__p);
    v185 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "pad");
    v186 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v185, (unsigned __int8 *)&__p);
    if (SBYTE7(v241) < 0)
      operator delete((void *)__p);
    v187 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
    v188 = ZinPattern::GetSingleMatch(v187, (unsigned __int8 *)&__p);
    if (SBYTE7(v241) < 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "dil_conv_det");
    v189 = std::string::append((std::string *)&__p, "_xfm", 4uLL);
    v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
    v236 = v189->__r_.__value_.__r.__words[2];
    *(_OWORD *)v235 = v190;
    v189->__r_.__value_.__l.__size_ = 0;
    v189->__r_.__value_.__r.__words[2] = 0;
    v189->__r_.__value_.__r.__words[0] = 0;
    if (SBYTE7(v241) < 0)
      operator delete((void *)__p);
    if (*(char *)(v188 + 47) >= 0)
      v191 = *(unsigned __int8 *)(v188 + 47);
    else
      v191 = *(_QWORD *)(v188 + 32);
    v192 = v253;
    std::string::basic_string[abi:ne180100]((uint64_t)v253, v191 + 1);
    if (v253[23] < 0)
      v192 = *(_BYTE **)v253;
    if (v191)
    {
      if (*(char *)(v188 + 47) >= 0)
        v193 = (const void *)(v188 + 24);
      else
        v193 = *(const void **)(v188 + 24);
      memmove(v192, v193, v191);
    }
    *(_WORD *)&v192[v191] = 95;
    if (v236 >= 0)
      v194 = v235;
    else
      v194 = (void **)v235[0];
    if (v236 >= 0)
      v195 = HIBYTE(v236);
    else
      v195 = (std::string::size_type)v235[1];
    v196 = std::string::append((std::string *)v253, (const std::string::value_type *)v194, v195);
    v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
    *(_QWORD *)&v261 = *((_QWORD *)&v196->__r_.__value_.__l + 2);
    v260 = v197;
    v196->__r_.__value_.__l.__size_ = 0;
    v196->__r_.__value_.__r.__words[2] = 0;
    v196->__r_.__value_.__r.__words[0] = 0;
    v198 = std::string::append((std::string *)&v260, "_", 1uLL);
    v199 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
    *(_QWORD *)&v248 = *((_QWORD *)&v198->__r_.__value_.__l + 2);
    v247 = v199;
    v198->__r_.__value_.__l.__size_ = 0;
    v198->__r_.__value_.__r.__words[2] = 0;
    v198->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&__p, &v247);
    if (SBYTE7(v248) < 0)
      operator delete((void *)v247);
    if (SBYTE7(v261) < 0)
      operator delete((void *)v260);
    if ((v253[23] & 0x80000000) != 0)
      operator delete(*(void **)v253);
    v200 = v182[8];
    v201 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&v247, "view");
    ZinPattern::GetMatch(v201, (unsigned __int8 *)&v247, v253);
    if (SBYTE7(v248) < 0)
      operator delete((void *)v247);
    v202 = (ZinIrOpLayer *)ZinIrOpt::HelperCreateDilatedConv((ZinIrOpLayer *)v188, (int *)v200 + 3, (uint64_t)v186, (uint64_t **)v253, (uint64_t)&__p, 0);
    *(_QWORD *)&v260 = v186;
    *((_QWORD *)&v260 + 1) = v184;
    *(_QWORD *)&v261 = v188;
    *((_QWORD *)&v261 + 1) = v182;
    *(_QWORD *)&v250 = &v260;
    *((_QWORD *)&v250 + 1) = 4;
    Layer2TDMapper::SourceLayer::SourceLayer(&v247, &v250);
    v203 = ZinIrOpLayerGraph::AddNode(a1, v202, (ZinIrOpLayer ***)&v247);
    *(_QWORD *)&v247 = &unk_24C02BB18;
    if (*((_QWORD *)&v247 + 1))
    {
      *(_QWORD *)&v248 = *((_QWORD *)&v247 + 1);
      operator delete(*((void **)&v247 + 1));
    }
    v204 = ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)a1, v186, v202);
    v205 = v182;
    if (*(_QWORD *)v253 != *(_QWORD *)&v253[8])
      v205 = *(uint64_t ***)(*(_QWORD *)&v253[8] - 8);
    v248 = 0u;
    v247 = 0u;
    v249 = 1065353216;
    v206 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, v205, v202, &v247);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v247);
    v207 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v186, 0);
    v208 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v184, 0);
    v209 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)v188, 0);
    v111 = v203 & v204 & v206 & (v207 && v208 && v209) & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)v182, 0);
    v210 = *(ZinIrOpLayer ***)&v253[8];
    v112 = *(ZinIrOpLayer ***)v253;
    if (*(_QWORD *)v253 == *(_QWORD *)&v253[8])
      goto LABEL_265;
    do
      v111 = v111 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, *v112++, 0);
    while (v112 != v210);
    goto LABEL_264;
  }
  v6 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "pad");
  v7 = ZinPattern::GetSingleMatch(v6, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  v8 = **(_QWORD **)(v7 + 88);
  v9 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "reshape_1");
  v223 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v9, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  v10 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_1");
  v217 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v10, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  v11 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_2");
  v221 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v11, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  v12 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
  v13 = ZinPattern::GetSingleMatch(v12, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  v14 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "goc");
  v15 = ZinPattern::GetSingleMatch(v14, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  v16 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "activation");
  v220 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v16, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  v17 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_3");
  v225 = (ZinReshapeLayer *)ZinPattern::GetSingleMatch(v17, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  v18 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_4");
  v215 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v18, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  v19 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "reshape_2");
  v219 = (uint64_t **)ZinPattern::GetSingleMatch(v19, (unsigned __int8 *)&__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  if (*(char *)(v13 + 47) >= 0)
    v20 = *(unsigned __int8 *)(v13 + 47);
  else
    v20 = *(_QWORD *)(v13 + 32);
  v21 = &v260;
  std::string::basic_string[abi:ne180100]((uint64_t)&v260, v20 + 1);
  if (SBYTE7(v261) < 0)
    v21 = (__int128 *)v260;
  if (v20)
  {
    if (*(char *)(v13 + 47) >= 0)
      v22 = (const void *)(v13 + 24);
    else
      v22 = *(const void **)(v13 + 24);
    memmove(v21, v22, v20);
  }
  *(_WORD *)((char *)v21 + v20) = 95;
  v23 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v253, "dil_conv_det");
  v24 = std::string::append(v23, "_xfm", 4uLL);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v236 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)v235 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v236 >= 0)
    v26 = v235;
  else
    v26 = (void **)v235[0];
  if (v236 >= 0)
    v27 = HIBYTE(v236);
  else
    v27 = (std::string::size_type)v235[1];
  v28 = std::string::append((std::string *)&v260, (const std::string::value_type *)v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(_QWORD *)&v241 = *((_QWORD *)&v28->__r_.__value_.__l + 2);
  __p = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(&v247, &__p);
  if (SBYTE7(v241) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v236) < 0)
    operator delete(v235[0]);
  if ((v253[23] & 0x80000000) != 0)
    operator delete(*(void **)v253);
  if (SBYTE7(v261) < 0)
    operator delete((void *)v260);
  v229 = (ZinReshapeLayer *)v13;
  v30 = *(_QWORD *)(v13 + 136);
  v31 = *(_OWORD *)(v30 + 472);
  __p = *(_OWORD *)(v30 + 456);
  v241 = v31;
  v32 = *(_OWORD *)(v30 + 504);
  v242 = *(_OWORD *)(v30 + 488);
  v33 = *(_OWORD *)(v30 + 520);
  v245 = *(_OWORD *)(v30 + 536);
  v244 = v33;
  v246 = *(_QWORD *)(v30 + 552);
  v243 = v32;
  v34 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v223 + 32))(v223, 0, 0);
  v35 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
  *(_DWORD *)v239 = *(_QWORD *)(v34 + 64);
  *(_QWORD *)&v239[4] = 0x100000001;
  LODWORD(v245) = 1;
  *((_QWORD *)&v244 + 1) = *(_QWORD *)v239;
  v36 = *((_QWORD *)v221 + 2);
  v37 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v221 + 32))(v221, 0, 0)
                  + 88);
  v38 = ZinReshapeLayer::GetReshapeInfo(v221);
  v39 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v36, (uint64_t)&v247, v35 + 48, v37, v38 + 16);
  *(_QWORD *)v253 = v13;
  v235[0] = v253;
  v235[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v260, v235);
  v40 = ZinIrOpLayerGraph::AddNode(a1, v39, (ZinIrOpLayer ***)&v260);
  *(_QWORD *)&v260 = &unk_24C02BB18;
  if (*((_QWORD *)&v260 + 1))
  {
    *(_QWORD *)&v261 = *((_QWORD *)&v260 + 1);
    operator delete(*((void **)&v260 + 1));
  }
  v41 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v8, (uint64_t)v39, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v216 = (ZinIrOpLayer *)v7;
  v42 = *(_QWORD *)(v7 + 64);
  v237 = *(_OWORD *)(v42 + 180);
  v238 = *(_QWORD *)(v42 + 172);
  v243 = v237;
  *(_QWORD *)&v244 = v238;
  v43 = *(_QWORD *)(v35 + 72);
  v44 = *(_QWORD *)(v35 + 80);
  *(_QWORD *)&v260 = *(_QWORD *)(v35 + 48);
  *((_QWORD *)&v260 + 1) = v43;
  v261 = *(_OWORD *)(v35 + 56);
  v262 = v44;
  v45 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0, 0);
  ZinGetOutputTensorDimension((uint64_t)&v260, &__p, (unsigned int *)&v241 + 2, (unsigned int *)&v242 + 1, (int *)&v237, *(_QWORD *)(v45 + 56), (int *)v239, (uint64_t)v235);
  v46 = *(const void ***)(v13 + 136);
  if (*((char *)v46 + 23) >= 0)
    v47 = *((unsigned __int8 *)v46 + 23);
  else
    v47 = (size_t)v46[1];
  v48 = v233;
  std::string::basic_string[abi:ne180100]((uint64_t)v233, v47 + 8);
  if (v234 < 0)
    v48 = (void **)v233[0];
  if (v47)
  {
    if (*((char *)v46 + 23) >= 0)
      v49 = v46;
    else
      v49 = *v46;
    memmove(v48, v49, v47);
  }
  strcpy((char *)v48 + v47, "_dilated");
  ZinObjectNameFactory::CreateName((uint64_t)&v247, 2u, (std::string *)v253);
  v50 = *((_QWORD *)v229 + 17);
  v51 = (ZinIrKernel *)operator new();
  ZinIrKernel::ZinIrKernel(v51, v253, &__p, v50);
  v232 = v51;
  if ((v253[23] & 0x80000000) != 0)
    operator delete(*(void **)v253);
  v52 = *((_QWORD *)v229 + 2);
  v53 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0, 0)
                  + 88);
  v54 = *(_DWORD *)((*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v229 + 32))(v229, 0, 0)+ 88);
  v231 = v51;
  v232 = 0;
  v55 = (ZinIrOpLayer *)ZinBuilder::CreateConv(v52, (uint64_t)&v247, (uint64_t)v235, v53, v54, &v231);
  v56 = v231;
  v231 = 0;
  if (v56)
  {
    ZinIrKernel::~ZinIrKernel(v56);
    MEMORY[0x20BD002F8]();
  }
  v257 = v229;
  *(_QWORD *)&v250 = &v257;
  *((_QWORD *)&v250 + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v253, &v250);
  v57 = ZinIrOpLayerGraph::AddNode(a1, v55, (ZinIrOpLayer ***)v253);
  *(_QWORD *)v253 = &unk_24C02BB18;
  if (*(_QWORD *)&v253[8])
  {
    *(_QWORD *)&v253[16] = *(_QWORD *)&v253[8];
    operator delete(*(void **)&v253[8]);
  }
  v58 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v39, (uint64_t)v55, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v59 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0, 0);
  v60 = v40 & v41 & v57 & v58;
  v218 = (uint64_t)v55;
  if (v15)
  {
    v61 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0, 0);
    HasPerCoutScale = ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v15 + 136));
    v63 = *(ZinIrKernel **)(v15 + 136);
    if (HasPerCoutScale)
      v64 = *(_BYTE *)(*((_QWORD *)v63 + 71) + 280);
    else
      v64 = 0;
    HasPerCoutBias = ZinIrKernel::HasPerCoutBias(v63);
    v214 = v64;
    if (HasPerCoutBias)
      v213 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 136) + 576) + 280);
    else
      v213 = 0;
    v250 = 0uLL;
    *(_QWORD *)&v251 = 0;
    v257 = 0;
    v258 = 0;
    v259 = 0;
    if (*(uint64_t *)(v59 + 56) >= 1)
    {
      for (i = 0; *(_QWORD *)(v59 + 56) > i; ++i)
      {
        if (HasPerCoutScale)
        {
          ZinIrVector::GetAt<float>(*(_QWORD *)(*(_QWORD *)(v15 + 136) + 568), i);
          v120 = v119;
          v121 = (char *)*((_QWORD *)&v250 + 1);
          if (*((_QWORD *)&v250 + 1) < (unint64_t)v251)
          {
            **((_DWORD **)&v250 + 1) = v119;
            v122 = v121 + 4;
LABEL_132:
            v124 = v122;
            goto LABEL_159;
          }
          v125 = (char *)v250;
          v131 = (uint64_t)(*((_QWORD *)&v250 + 1) - v250) >> 2;
          v132 = v131 + 1;
          if ((unint64_t)(v131 + 1) >> 62)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v133 = v251 - v250;
          if ((uint64_t)(v251 - v250) >> 1 > v132)
            v132 = v133 >> 1;
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
            v129 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v129 = v132;
          if (v129)
          {
            v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v251, v129);
            v121 = (char *)*((_QWORD *)&v250 + 1);
            v125 = (char *)v250;
          }
          else
          {
            v130 = 0;
          }
          v134 = &v130[4 * v131];
          *(_DWORD *)v134 = v120;
          v124 = v134 + 4;
          while (v121 != v125)
          {
            v136 = *((_DWORD *)v121 - 1);
            v121 -= 4;
            *((_DWORD *)v134 - 1) = v136;
            v134 -= 4;
          }
        }
        else
        {
          v123 = (char *)*((_QWORD *)&v250 + 1);
          if (*((_QWORD *)&v250 + 1) < (unint64_t)v251)
          {
            **((_DWORD **)&v250 + 1) = 1065353216;
            v122 = v123 + 4;
            goto LABEL_132;
          }
          v125 = (char *)v250;
          v126 = (uint64_t)(*((_QWORD *)&v250 + 1) - v250) >> 2;
          v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 62)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v128 = v251 - v250;
          if ((uint64_t)(v251 - v250) >> 1 > v127)
            v127 = v128 >> 1;
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL)
            v129 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v129 = v127;
          if (v129)
          {
            v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v251, v129);
            v123 = (char *)*((_QWORD *)&v250 + 1);
            v125 = (char *)v250;
          }
          else
          {
            v130 = 0;
          }
          v134 = &v130[4 * v126];
          *(_DWORD *)v134 = 1065353216;
          v124 = v134 + 4;
          while (v123 != v125)
          {
            v135 = *((_DWORD *)v123 - 1);
            v123 -= 4;
            *((_DWORD *)v134 - 1) = v135;
            v134 -= 4;
          }
        }
        *(_QWORD *)&v250 = v134;
        *((_QWORD *)&v250 + 1) = v124;
        *(_QWORD *)&v251 = &v130[4 * v129];
        if (v125)
          operator delete(v125);
LABEL_159:
        *((_QWORD *)&v250 + 1) = v124;
        if (HasPerCoutBias)
        {
          ZinIrVector::GetAt<float>(*(_QWORD *)(*(_QWORD *)(v15 + 136) + 576), i);
          v138 = v137;
          v139 = (ZinReshapeLayer *)v258;
          if (v258 >= (unint64_t)v259)
          {
            v143 = v257;
            v149 = (uint64_t)(v258 - (_QWORD)v257) >> 2;
            v150 = v149 + 1;
            if ((unint64_t)(v149 + 1) >> 62)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v151 = v259 - (char *)v257;
            if ((v259 - (char *)v257) >> 1 > v150)
              v150 = v151 >> 1;
            if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
              v147 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v147 = v150;
            if (v147)
            {
              v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v259, v147);
              v143 = v257;
              v139 = (ZinReshapeLayer *)v258;
            }
            else
            {
              v148 = 0;
            }
            v152 = &v148[4 * v149];
            *(_DWORD *)v152 = v138;
            v142 = v152 + 4;
            while (v139 != v143)
            {
              v154 = *((_DWORD *)v139 - 1);
              v139 = (ZinReshapeLayer *)((char *)v139 - 4);
              *((_DWORD *)v152 - 1) = v154;
              v152 -= 4;
            }
LABEL_189:
            v257 = (ZinReshapeLayer *)v152;
            v258 = (unint64_t)v142;
            v259 = &v148[4 * v147];
            if (v143)
              operator delete(v143);
            goto LABEL_191;
          }
          *(_DWORD *)v258 = v137;
          v140 = (char *)v139 + 4;
        }
        else
        {
          v141 = (ZinReshapeLayer *)v258;
          if (v258 >= (unint64_t)v259)
          {
            v143 = v257;
            v144 = (uint64_t)(v258 - (_QWORD)v257) >> 2;
            v145 = v144 + 1;
            if ((unint64_t)(v144 + 1) >> 62)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v146 = v259 - (char *)v257;
            if ((v259 - (char *)v257) >> 1 > v145)
              v145 = v146 >> 1;
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
              v147 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v147 = v145;
            if (v147)
            {
              v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v259, v147);
              v143 = v257;
              v141 = (ZinReshapeLayer *)v258;
            }
            else
            {
              v148 = 0;
            }
            v152 = &v148[4 * v144];
            *(_DWORD *)v152 = 1065353216;
            v142 = v152 + 4;
            while (v141 != v143)
            {
              v153 = *((_DWORD *)v141 - 1);
              v141 = (ZinReshapeLayer *)((char *)v141 - 4);
              *((_DWORD *)v152 - 1) = v153;
              v152 -= 4;
            }
            goto LABEL_189;
          }
          *(_DWORD *)v258 = 1065353216;
          v140 = (char *)v141 + 4;
        }
        v142 = v140;
LABEL_191:
        v258 = (unint64_t)v142;
      }
    }
    v116 = v216;
    PerCoutGOC = (ZinIrOpLayer *)ZinBuilder::CreatePerCoutGOC(*(_QWORD *)(v15 + 16), (uint64_t)&v247, v61, (uint64_t)&v250, (const void **)&v257, v214, v213, 4, 4u);
    v255 = v229;
    v256[0] = &v255;
    v256[1] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v253, v256);
    v155 = ZinIrOpLayerGraph::AddNode(a1, PerCoutGOC, (ZinIrOpLayer ***)v253);
    *(_QWORD *)v253 = &unk_24C02BB18;
    if (*(_QWORD *)&v253[8])
    {
      *(_QWORD *)&v253[16] = *(_QWORD *)&v253[8];
      operator delete(*(void **)&v253[8]);
    }
    v156 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v218, (uint64_t)PerCoutGOC, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v59 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PerCoutGOC + 32))(PerCoutGOC, 0, 0);
    v157 = v155 & v156;
    if (v257)
    {
      v258 = (unint64_t)v257;
      operator delete(v257);
    }
    v60 = v212 & v157;
    if ((_QWORD)v250)
    {
      *((_QWORD *)&v250 + 1) = v250;
      operator delete((void *)v250);
    }
    Activation = PerCoutGOC;
  }
  else
  {
    PerCoutGOC = 0;
    Activation = v55;
    v116 = v216;
  }
  if (v220)
  {
    v158 = *((_QWORD *)v220 + 2);
    v159 = *(_OWORD *)(v59 + 64);
    *(_OWORD *)v253 = *(_OWORD *)(v59 + 48);
    *(_OWORD *)&v253[16] = v159;
    v254 = *(_QWORD *)(v59 + 80);
    Activation = (ZinIrOpLayer *)ZinBuilder::CreateActivation(v158, (uint64_t)&v247, (uint64_t)v253, *(_DWORD *)(v59 + 88), (uint64_t)v220 + 192);
    v256[0] = v229;
    v257 = (ZinReshapeLayer *)v256;
    v258 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v250, &v257);
    v160 = ZinIrOpLayerGraph::AddNode(a1, Activation, (ZinIrOpLayer ***)&v250);
    *(_QWORD *)&v250 = &unk_24C02BB18;
    if (*((_QWORD *)&v250 + 1))
    {
      *(_QWORD *)&v251 = *((_QWORD *)&v250 + 1);
      operator delete(*((void **)&v250 + 1));
    }
    if (v15)
      v161 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)PerCoutGOC, (uint64_t)Activation, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    else
      v161 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v218, (uint64_t)Activation, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v60 &= v161 & v160;
  }
  v162 = v60;
  v163 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v218 + 32))(v218, 0, 0);
  v164 = *((_QWORD *)v225 + 2);
  v165 = *(_DWORD *)((*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v225 + 32))(v225, 0, 0)+ 88);
  v166 = ZinReshapeLayer::GetReshapeInfo(v225);
  v167 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v164, (uint64_t)&v247, v163 + 48, v165, v166 + 16);
  v256[0] = v229;
  v257 = (ZinReshapeLayer *)v256;
  v258 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v250, &v257);
  v168 = ZinIrOpLayerGraph::AddNode(a1, v167, (ZinIrOpLayer ***)&v250);
  *(_QWORD *)&v250 = &unk_24C02BB18;
  if (*((_QWORD *)&v250 + 1))
  {
    *(_QWORD *)&v251 = *((_QWORD *)&v250 + 1);
    operator delete(*((void **)&v250 + 1));
  }
  v169 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)Activation, (uint64_t)v167, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v251 = 0u;
  v250 = 0u;
  v252 = 1065353216;
  v170 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, v219, v167, &v250);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v250);
  v171 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v116, 0);
  v172 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v223, 0);
  v173 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v217, 0);
  v174 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v221, 0);
  v175 = v162 & v168 & v169 & v170 & (v171 && v172 && v173 && v174) & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v229, 0);
  if (v15)
    v175 &= ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)v15, 0);
  if (v220)
    v175 &= ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v220, 0);
  v176 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v225, 0);
  v177 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v215, 0);
  v178 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)v219, 0);
  if (v232)
  {
    ZinIrKernel::~ZinIrKernel(v232);
    MEMORY[0x20BD002F8]();
  }
  if (v234 < 0)
    operator delete(v233[0]);
  *(_QWORD *)&v247 = off_24C01FBB0;
  if (SHIBYTE(v248) < 0)
    operator delete(*((void **)&v247 + 1));
  return v175 & v176 & v177 & v178;
}

void sub_206E987B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  uint64_t v61;
  void *v63;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a61);
  v63 = *(void **)(v61 - 256);
  if (v63)
  {
    *(_QWORD *)(v61 - 248) = v63;
    operator delete(v63);
  }
  if (a50 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::HelperCreateDilatedConv(ZinIrOpLayer *a1, int *a2, uint64_t a3, uint64_t **a4, uint64_t a5, int a6)
{
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t *v24;
  const void **v25;
  size_t v26;
  std::string *v27;
  const void *v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  int v34;
  uint64_t v35;
  ZinIrKernel *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  ZinIrKernel *v44;
  void *__p;
  ZinIrKernel *v47;
  std::string v48;
  int8x16_t v49;
  uint64_t v50;
  _BYTE v51[32];
  uint64_t v52;
  ZinIrKernel *v53;
  _BYTE v54[32];
  uint64_t v55;
  void *v56[2];
  int64_t v57;
  _QWORD __dst[35];
  _OWORD v59[3];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v12 = *((_QWORD *)a1 + 17);
  v63 = *(_QWORD *)(v12 + 552);
  v13 = *(_OWORD *)(v12 + 536);
  v61 = *(_OWORD *)(v12 + 520);
  v62 = v13;
  v14 = *(_OWORD *)(v12 + 472);
  v59[0] = *(_OWORD *)(v12 + 456);
  v59[1] = v14;
  v15 = *(_OWORD *)(v12 + 504);
  v59[2] = *(_OWORD *)(v12 + 488);
  v60 = v15;
  memcpy(__dst, (const void *)(v12 + 176), sizeof(__dst));
  *((_QWORD *)&v61 + 1) = *(_QWORD *)a2;
  LODWORD(v62) = a2[2];
  __dst[26] = *((_QWORD *)&v61 + 1);
  LODWORD(__dst[27]) = v62;
  v16 = *(_QWORD *)(a3 + 64);
  std::string::basic_string[abi:ne180100]<0>(v54, "dil_conv_det");
  v17 = std::string::append((std::string *)v54, "_xfm", 4uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v57 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)v56 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((v54[23] & 0x80000000) != 0)
    operator delete(*(void **)v54);
  v55 = 0;
  v19 = 0uLL;
  memset(v54, 0, sizeof(v54));
  v20 = *a4;
  v21 = a4[1];
  if (*a4 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *v20++;
      v24 = *(int64x2_t **)(v23 + 64);
      v19 = vaddq_s64(v24[2], v19);
      v22 += v24[3].i64[0];
    }
    while (v20 != v21);
    *(int64x2_t *)&v54[16] = v19;
    v55 = v22;
  }
  ZinIrOpt::GetDilatedConvPadding(&__dst[9], v54, (_DWORD *)(v16 + 172), a2, v51);
  v60 = *(_OWORD *)v51;
  *(_QWORD *)&v61 = *(_QWORD *)&v51[16];
  *(_OWORD *)&__dst[22] = *(_OWORD *)v51;
  __dst[24] = *(_QWORD *)&v51[16];
  v25 = (const void **)*((_QWORD *)a1 + 17);
  if (*((char *)v25 + 23) >= 0)
    v26 = *((unsigned __int8 *)v25 + 23);
  else
    v26 = (size_t)v25[1];
  v27 = &v48;
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v26 + 1);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if (v26)
  {
    if (*((char *)v25 + 23) >= 0)
      v28 = v25;
    else
      v28 = *v25;
    memmove(v27, v28, v26);
  }
  *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 95;
  if (v57 >= 0)
    v29 = v56;
  else
    v29 = (void **)v56[0];
  if (v57 >= 0)
    v30 = HIBYTE(v57);
  else
    v30 = (std::string::size_type)v56[1];
  v31 = std::string::append(&v48, (const std::string::value_type *)v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  *(_QWORD *)&v51[16] = *((_QWORD *)&v31->__r_.__value_.__l + 2);
  *(_OWORD *)v51 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append((std::string *)v51, "_kernel", 7uLL);
  __p = (void *)v33->__r_.__value_.__r.__words[0];
  v34 = SHIBYTE(v33->__r_.__value_.__r.__words[2]);
  v33->__r_.__value_.__r.__words[0] = 0;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  if ((v51[23] & 0x80000000) != 0)
    operator delete(*(void **)v51);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a5 + 16))(v51, a5, 2);
  v35 = *((_QWORD *)a1 + 17);
  v36 = (ZinIrKernel *)operator new();
  ZinIrKernel::ZinIrKernel(v36, v51, v59, v35);
  v53 = v36;
  if ((v51[23] & 0x80000000) != 0)
    operator delete(*(void **)v51);
  v37 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a3 + 88) + 32))(**(_QWORD **)(a3 + 88), 0, 0);
  v38 = *(_OWORD *)(v37 + 64);
  *(_OWORD *)v51 = *(_OWORD *)(v37 + 48);
  *(_OWORD *)&v51[16] = v38;
  v52 = *(_QWORD *)(v37 + 80);
  if (a6)
    *(int8x16_t *)v51 = vextq_s8(*(int8x16_t *)v51, *(int8x16_t *)v51, 8uLL);
  v49 = vextq_s8(*(int8x16_t *)&__dst[11], *(int8x16_t *)&__dst[11], 8uLL);
  v50 = __dst[13];
  v39 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  ZinGetOutputTensorDimension((uint64_t)v51, &v49, (unsigned int *)&__dst[19], (unsigned int *)&__dst[20] + 1, (int *)&__dst[22], *(_QWORD *)(v39 + 56), a2, (uint64_t)&v48);
  v40 = *((_QWORD *)a1 + 2);
  v41 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a1, 0) + 88);
  v42 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 88);
  v53 = 0;
  v47 = v36;
  v43 = ZinBuilder::CreateConv(v40, a5, (uint64_t)&v48, v41, v42, &v47);
  v44 = v47;
  v47 = 0;
  if (v44)
  {
    ZinIrKernel::~ZinIrKernel(v44);
    MEMORY[0x20BD002F8]();
  }
  if (v34 < 0)
    operator delete(__p);
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  return v43;
}

void sub_206E98F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, ZinIrKernel *a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,ZinIrKernel *a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  int v47;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a11, 0);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a32, 0);
  if (v47 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSpaceToBatchInfo::ZinIrSpaceToBatchInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 38);
  *(_QWORD *)result = &unk_24C020AC8;
  v4 = *a2;
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(result + 12) = v4;
  return result;
}

_QWORD *ZinSpaceToBatchLayer::ZinSpaceToBatchLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C01FFA8;
  return a1;
}

void sub_206E99178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinSpaceToBatchLayer::LowerEngine(std::string::size_type a1, uint64_t **a2, uint64_t ***a3)
{
  ZinIrOpLayer *v4;
  _DWORD *v5;
  uint64_t *v6;
  ZinSpaceToBatchLayer *v7;
  ZinIrOpLayer *Reshape;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  ZinIrOpLayer *Transpose;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _DWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  ZinIrOpLayer *v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  ZinIrOpLayer *SpaceToBatch;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _OWORD *v46;
  ZinIrOpLayer *v47;
  BOOL v48;
  char v49;
  uint64_t v50;
  int64x2_t v51;
  uint64_t v52;
  ZinIrTensor *v53;
  unsigned __int8 *v54;
  ZinIrTensor *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  std::string::size_type v67;
  ZinIrOpLayer *v68;
  _QWORD *v69;
  BOOL v70;
  uint64_t v71;
  int v72;
  _QWORD *v73;
  BOOL v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  std::string *v83;
  const void *v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  std::string::size_type size;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  ZinIrOpLayer *v99;
  BOOL v100;
  ZinIrTensor *v101;
  uint64_t v102;
  std::string::size_type v103;
  _QWORD *v104;
  char v105;
  ZinIrOpLayer *v106;
  char v107;
  _QWORD *v108;
  uint64_t v109;
  const void *v110;
  uint64_t v111;
  int64x2_t v112;
  _DWORD *v113;
  uint64_t v114;
  _QWORD v117[4];
  int v118;
  _QWORD *v119;
  _QWORD v120[8];
  int64x2_t v121;
  std::string v122;
  std::string v123;
  _QWORD *v124;
  _QWORD *v125;
  void *v126[2];
  __int128 v127;
  unsigned __int128 v128;
  void *v129;
  void *v130;
  uint64_t v131;
  _QWORD v132[3];
  char v133;
  std::string v134;
  std::string v135;
  std::string v136;
  _BYTE v137[24];
  _BYTE *v138;
  void *v139;
  uint64_t v140;
  char *v141;
  void *__p[2];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _BYTE v147[40];
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  int64x2_t v153;
  uint64_t v154;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)(*a3)[1] + 492))
    return 3;
  v4 = **(ZinIrOpLayer ***)(a1 + 88);
  v5 = *(_DWORD **)(a1 + 64);
  v6 = **a3;
  v110 = (const void *)(a1 + 24);
  ZinObjectNameFactory::ZinObjectNameFactory(v132, a1 + 24);
  v113 = v5;
  if (v5[5] != 1)
    ZinAssertImpl("Factor z = %d is invalid. It should be exactly 1 as space to batch transform is not supported along depth", v5[5]);
  if (!ZinSpaceToBatchLayerUtils::CanBeDecomposedToReshapeTranspose((ZinSpaceToBatchLayerUtils *)v6, (ZinSpaceToBatchLayerUtils **)a1, v7))
  {
    v129 = 0;
    v130 = 0;
    v131 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v129, v6 + 207, v6 + 211, 4uLL);
    v127 = 0u;
    v128 = 0u;
    *(_OWORD *)v126 = 0u;
    v30 = 1;
    v152 = xmmword_207A80930;
    v153 = vdupq_n_s64(1uLL);
    v154 = 1;
    v31 = v5[3];
    if (v31 < 2)
    {
      v32 = 1;
      v43 = 1;
LABEL_86:
      v114 = v32;
      v76 = (int)v113[4];
      *((_QWORD *)&v152 + 1) = v43 / v32;
      v153.i64[0] = v30 / v76;
      std::vector<ZinIrOpLayer *>::vector(&v139, (int)v76 * (uint64_t)v32);
      v77 = v113[4];
      if (v77 >= 1)
      {
        v78 = 0;
        v79 = 0;
        v111 = v32;
        v109 = 8 * v32;
        v112 = vdupq_n_s64(1uLL);
        do
        {
          if ((int)v114 >= 1)
          {
            v80 = 0;
            do
            {
              v81 = (int)v113[4];
              if (*(char *)(a1 + 47) >= 0)
                v82 = *(unsigned __int8 *)(a1 + 47);
              else
                v82 = *(_QWORD *)(a1 + 32);
              std::string::basic_string[abi:ne180100]((uint64_t)&v134, v82 + 7);
              if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v83 = &v134;
              else
                v83 = (std::string *)v134.__r_.__value_.__r.__words[0];
              if (v82)
              {
                if (*(char *)(a1 + 47) >= 0)
                  v84 = v110;
                else
                  v84 = *(const void **)(a1 + 24);
                memmove(v83, v84, v82);
              }
              strcpy((char *)v83 + v82, "_slice_");
              v85 = std::string::append(&v134, "_y_", 3uLL);
              v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
              v135.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v86;
              v85->__r_.__value_.__l.__size_ = 0;
              v85->__r_.__value_.__r.__words[2] = 0;
              v85->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v123, v79);
              if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v87 = &v123;
              else
                v87 = (std::string *)v123.__r_.__value_.__r.__words[0];
              if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v123.__r_.__value_.__r.__words[2]);
              else
                size = v123.__r_.__value_.__l.__size_;
              v89 = std::string::append(&v135, (const std::string::value_type *)v87, size);
              v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
              v136.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v90;
              v89->__r_.__value_.__l.__size_ = 0;
              v89->__r_.__value_.__r.__words[2] = 0;
              v89->__r_.__value_.__r.__words[0] = 0;
              v91 = std::string::append(&v136, "_x_", 3uLL);
              v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
              *(_QWORD *)&v143 = *((_QWORD *)&v91->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v92;
              v91->__r_.__value_.__l.__size_ = 0;
              v91->__r_.__value_.__r.__words[2] = 0;
              v91->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v122, v80);
              if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v93 = &v122;
              else
                v93 = (std::string *)v122.__r_.__value_.__r.__words[0];
              if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v94 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
              else
                v94 = v122.__r_.__value_.__l.__size_;
              v95 = std::string::append((std::string *)__p, (const std::string::value_type *)v93, v94);
              v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
              *(_QWORD *)&v150 = *((_QWORD *)&v95->__r_.__value_.__l + 2);
              v149 = v96;
              v95->__r_.__value_.__l.__size_ = 0;
              v95->__r_.__value_.__r.__words[2] = 0;
              v95->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v122.__r_.__value_.__l.__data_);
              if (SBYTE7(v143) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v136.__r_.__value_.__l.__data_);
              if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v123.__r_.__value_.__l.__data_);
              if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v135.__r_.__value_.__l.__data_);
              if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v134.__r_.__value_.__l.__data_);
              v97 = *((_QWORD *)v4 + 2);
              v98 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
              v120[0] = 0;
              v120[1] = v80;
              v120[3] = 0;
              v120[4] = 0;
              v120[2] = v79;
              v120[5] = 1;
              v120[6] = v114;
              v120[7] = v81;
              v121 = v112;
              v99 = (ZinIrOpLayer *)ZinBuilder::CreateView(v97, (uint64_t)&v149, v98, &v152, (uint64_t)v120);
              v135.__r_.__value_.__r.__words[0] = a1;
              v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135;
              v136.__r_.__value_.__l.__size_ = 1;
              Layer2TDMapper::SourceLayer::SourceLayer(__p, &v136);
              v100 = ZinIrOpLayerGraph::AddNode(a2, v99, (ZinIrOpLayer ***)__p);
              __p[0] = &unk_24C02BB18;
              if (__p[1])
              {
                *(void **)&v143 = __p[1];
                operator delete(__p[1]);
              }
              if (!v100)
                ZinAssertImpl("Failed to add a node into the graph");
              if (!ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v4, (uint64_t)v99, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0))ZinAssertImpl("Failed to add an edge into the graph");
              *(_QWORD *)((char *)v139 + 8 * v80 + v78) = v99;
              if (SBYTE7(v150) < 0)
                operator delete((void *)v149);
              ++v80;
            }
            while (v111 != v80);
            v77 = v113[4];
          }
          ++v79;
          v78 += v109;
        }
        while (v79 < v77);
      }
      v101 = (ZinIrTensor *)(*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
      ZinIrTensor::CopyTensorMirInfo(v101, (ZinIrTensor::MirInfo **)&v135);
      v102 = *(_QWORD *)(a1 + 16);
      v103 = v135.__r_.__value_.__r.__words[0];
      v135.__r_.__value_.__r.__words[0] = 0;
      v119 = (_QWORD *)v103;
      ZinBuilder::CreateConcat(v102, (uint64_t)v132, (char **)&v139, 5, 1, &v119, 0, (uint64_t)__p);
      v104 = v119;
      v119 = 0;
      if (v104)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v119, v104);
      v134.__r_.__value_.__r.__words[0] = a1;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
      v136.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v149, &v136);
      v105 = ZinBuilder::AddConcatToGraph(a2, (uint64_t *)&v139, __p, (ZinIrOpLayer ***)&v149);
      *(_QWORD *)&v149 = &unk_24C02BB18;
      if (*((_QWORD *)&v149 + 1))
      {
        *(_QWORD *)&v150 = *((_QWORD *)&v149 + 1);
        operator delete(*((void **)&v149 + 1));
      }
      if ((v105 & 1) == 0)
        ZinAssertImpl("Failed to add concat to the graph");
      v106 = (ZinIrOpLayer *)*((_QWORD *)__p[1] - 1);
      memset(v117, 0, sizeof(v117));
      v118 = 1065353216;
      v107 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, v106, v117);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v117);
      if ((v107 & 1) == 0)
        ZinAssertImpl("Failed in moving outgoing edges");
      if (!ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0))
        ZinAssertImpl("Failed to remove nodes from the graph");
      if (BYTE8(v143) && __p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v108 = (_QWORD *)v135.__r_.__value_.__r.__words[0];
      v135.__r_.__value_.__r.__words[0] = 0;
      if (v108)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v135, v108);
      if (v139)
      {
        v140 = (uint64_t)v139;
        operator delete(v139);
      }
      std::deque<int>::~deque[abi:ne180100](v126);
      if (v129)
      {
        v130 = v129;
        operator delete(v129);
      }
      goto LABEL_150;
    }
    Factorize(v31, (int **)&v129, v126);
    v32 = *(_DWORD *)(*(_QWORD *)((char *)v126[1] + (((unint64_t)v128 >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * (v128 & 0x3FF));
    v33 = *((_QWORD *)&v128 + 1) - 1;
    v34 = v128 + 1;
    v128 = __PAIR128__(*((unint64_t *)&v128 + 1), (uint64_t)v128 + 1) + __PAIR128__(-1, 0);
    if (v34 >= 0x800)
    {
      operator delete(*(void **)v126[1]);
      v126[1] = (char *)v126[1] + 8;
      *(_QWORD *)&v128 = v128 - 1024;
      v33 = *((_QWORD *)&v128 + 1);
    }
    if (v33)
    {
      v35 = v5[3];
      ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)&v149, 38);
      *(_QWORD *)&v149 = &unk_24C020AC8;
      HIDWORD(v149) = v35 / v32;
      *(_QWORD *)&v150 = 0x100000001;
      v36 = *((_QWORD *)v4 + 2);
      (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 80))(__p, v4, 0, 0);
      v37 = operator new(0x78uLL);
      v141 = (char *)v37 + 120;
      v38 = *(_OWORD *)v147;
      v37[4] = v146;
      v37[5] = v38;
      v37[6] = *(_OWORD *)&v147[16];
      *((_DWORD *)v37 + 28) = *(_DWORD *)&v147[32];
      v39 = v143;
      *v37 = *(_OWORD *)__p;
      v37[1] = v39;
      v40 = v145;
      v37[2] = v144;
      v37[3] = v40;
      v139 = v37;
      v140 = (uint64_t)v37 + 120;
      SpaceToBatch = (ZinIrOpLayer *)ZinBuilder::CreateSpaceToBatch(v36, (uint64_t)v132, (uint64_t *)&v139, (uint64_t)&v149);
      if (v139)
      {
        v140 = (uint64_t)v139;
        operator delete(v139);
      }
      v136.__r_.__value_.__r.__words[0] = a1;
      v139 = &v136;
      v140 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v139);
      v42 = ZinIrOpLayerGraph::AddNode(a2, SpaceToBatch, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        *(void **)&v143 = __p[1];
        operator delete(__p[1]);
      }
      if (!v42)
        ZinAssertImpl("Failed to add a node into the graph");
      if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v4, (uint64_t)SpaceToBatch, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("Failed to add an edge into the graph");
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v149);
    }
    else
    {
      SpaceToBatch = v4;
    }
    v50 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0);
    v51 = *(int64x2_t *)(v50 + 64);
    v152 = *(_OWORD *)(v50 + 48);
    v153 = v51;
    v52 = *(_QWORD *)(v50 + 80);
    *((_QWORD *)&v152 + 1) *= v32;
    v153.i64[1] = v51.i64[1] / v32;
    v154 = v52;
    v53 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0);
    if (ZinIrTensor::SetAllocationHint(v53, 2, 1))
      ZinAssertImpl("Failed to set DRAM allocation hint for Space-to-Batch lowering.");
    if (ZinIrTensor::SetInterleave((uint64_t *)v53, 1uLL, 1, 1))
      ZinAssertImpl("Failed to set interleave=1 for Space-to-Batch lowering.");
    v54 = (unsigned __int8 *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0);
    v55 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0);
    ZinIrTensor::GetDimensionOrderHint(v55, (uint64_t)&v139);
    v138 = 0;
    ZinIrTensor::InferDescriptor(v54, 2, (uint64_t)&v139, 1, 1, (uint64_t)v137, (uint64_t)__p);
    v149 = *(_OWORD *)&v147[8];
    v150 = *(_OWORD *)&v147[24];
    v151 = v148;
    v56 = v138;
    if (v138 == v137)
    {
      v57 = 4;
      v56 = v137;
    }
    else
    {
      if (!v138)
      {
LABEL_62:
        if (v139)
        {
          v140 = (uint64_t)v139;
          operator delete(v139);
        }
        *((_QWORD *)&v150 + 1) *= v32;
        DimensionOrderHint::DimensionOrderHint(__p, 0);
        v58 = operator new();
        ZinIrTensor::MirInfo::MirInfo(v58, 2, v32, 1, __p, &v149);
        v136.__r_.__value_.__r.__words[0] = v58;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v59 = *((_QWORD *)SpaceToBatch + 2);
        (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 80))(__p, SpaceToBatch, 0, 0);
        v60 = operator new(0x78uLL);
        v141 = (char *)(v60 + 30);
        v60[28] = *(_DWORD *)&v147[32];
        v61 = *(_OWORD *)&v147[16];
        v62 = v146;
        *((_OWORD *)v60 + 5) = *(_OWORD *)v147;
        *((_OWORD *)v60 + 6) = v61;
        v63 = v143;
        *(_OWORD *)v60 = *(_OWORD *)__p;
        *((_OWORD *)v60 + 1) = v63;
        v64 = v145;
        *((_OWORD *)v60 + 2) = v144;
        *((_OWORD *)v60 + 3) = v64;
        *((_OWORD *)v60 + 4) = v62;
        v139 = v60;
        v140 = (uint64_t)(v60 + 30);
        v65 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0)+ 104);
        if (v65)
          v66 = *(_DWORD *)(v65 + 96);
        else
          v66 = 0;
        v67 = v136.__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = 0;
        v125 = (_QWORD *)v67;
        v68 = (ZinIrOpLayer *)ZinBuilder::CreateAlias(v59, (uint64_t)v132, (uint64_t)&v139, v66, &v152, (uint64_t)&v125);
        v69 = v125;
        v125 = 0;
        if (v69)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v125, v69);
        if (v139)
        {
          v140 = (uint64_t)v139;
          operator delete(v139);
        }
        v135.__r_.__value_.__r.__words[0] = a1;
        v139 = &v135;
        v140 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, &v139);
        v70 = ZinIrOpLayerGraph::AddNode(a2, v68, (ZinIrOpLayer ***)__p);
        __p[0] = &unk_24C02BB18;
        if (__p[1])
        {
          *(void **)&v143 = __p[1];
          operator delete(__p[1]);
        }
        if (!v70)
          ZinAssertImpl("Failed to add a node into the graph");
        if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)SpaceToBatch, (uint64_t)v68, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("Failed to add an edge into the graph");
        v71 = *((_QWORD *)v68 + 2);
        v72 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0, 0)+ 88);
        v124 = 0;
        v4 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v71, (uint64_t)v68, (uint64_t)v132, v72, &v124);
        v73 = v124;
        v124 = 0;
        if (v73)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v124, v73);
        v135.__r_.__value_.__r.__words[0] = a1;
        v139 = &v135;
        v140 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, &v139);
        v74 = ZinIrOpLayerGraph::AddNode(a2, v4, (ZinIrOpLayer ***)__p);
        __p[0] = &unk_24C02BB18;
        if (__p[1])
        {
          *(void **)&v143 = __p[1];
          operator delete(__p[1]);
        }
        if (!v74)
          ZinAssertImpl("Failed to add a node into the graph");
        if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v68, (uint64_t)v4, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("Failed to add an edge into the graph");
        v75 = (_QWORD *)v136.__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = 0;
        if (v75)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v136, v75);
        v43 = *((_QWORD *)&v152 + 1);
        v30 = v153.i64[0];
        goto LABEL_86;
      }
      v57 = 5;
    }
    (*(void (**)(void))(*v56 + 8 * v57))();
    goto LABEL_62;
  }
  Reshape = **(ZinIrOpLayer ***)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 16);
  if ((int)v5[3] >= 2)
  {
    v10 = operator new(0x14uLL);
    *(_QWORD *)&v143 = v10 + 5;
    v10[4] = 4;
    *(_OWORD *)v10 = xmmword_207AA7E48;
    __p[0] = v10;
    __p[1] = v10 + 5;
    DimensionOrderHint::DimensionOrderHint(v126, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v11 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
    v12 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0)+ 88);
    v13 = operator new(0x10uLL);
    __p[0] = v13;
    *v13 = xmmword_207A7F690;
    *(_QWORD *)&v143 = v13 + 1;
    __p[1] = v13 + 1;
    Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v9, (uint64_t)v132, v11 + 48, v12, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_QWORD *)&v149 = a1;
    *(_QWORD *)&v152 = &v149;
    *((_QWORD *)&v152 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v152);
    v15 = ZinIrOpLayerGraph::AddNode(a2, Transpose, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      *(void **)&v143 = __p[1];
      operator delete(__p[1]);
    }
    if (!v15)
      ZinAssertImpl("Failed to add a node into the graph");
    if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Reshape, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("Failed to add an edge into the graph");
    v16 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
    *(_QWORD *)&v144 = *(_QWORD *)(v16 + 80);
    v17 = *(_OWORD *)(v16 + 64);
    *(_OWORD *)__p = *(_OWORD *)(v16 + 48);
    v143 = v17;
    v18 = (int)v5[3];
    __p[1] = (void *)((uint64_t)__p[1] / v18);
    __p[0] = (void *)((uint64_t)__p[0] * v18);
    v19 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
    v20 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
    Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v9, (uint64_t)v132, v19 + 48, *(_DWORD *)(v20 + 88), (__int128 *)__p, (const DimensionOrderHint *)v126);
    v139 = (void *)a1;
    *(_QWORD *)&v149 = &v139;
    *((_QWORD *)&v149 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v152, &v149);
    v21 = ZinIrOpLayerGraph::AddNode(a2, Reshape, (ZinIrOpLayer ***)&v152);
    *(_QWORD *)&v152 = &unk_24C02BB18;
    if (*((_QWORD *)&v152 + 1))
    {
      v153.i64[0] = *((_QWORD *)&v152 + 1);
      operator delete(*((void **)&v152 + 1));
    }
    if (!v21)
      ZinAssertImpl("Failed to add a node into the graph");
    if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Transpose, (uint64_t)Reshape, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("Failed to add an edge into the graph");
    if (v126[0])
    {
      v126[1] = v126[0];
      operator delete(v126[0]);
    }
  }
  if ((int)v5[4] < 2)
  {
    v28 = Reshape;
  }
  else
  {
    v22 = operator new(0x14uLL);
    *(_QWORD *)&v143 = v22 + 5;
    v22[4] = 4;
    *(_OWORD *)v22 = xmmword_207AA7E5C;
    __p[0] = v22;
    __p[1] = v22 + 5;
    DimensionOrderHint::DimensionOrderHint(v126, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v23 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
    *(_QWORD *)&v144 = *(_QWORD *)(v23 + 80);
    v24 = *(_OWORD *)(v23 + 64);
    *(_OWORD *)__p = *(_OWORD *)(v23 + 48);
    v143 = v24;
    v25 = (int)v5[4];
    *(_QWORD *)&v143 = (uint64_t)v24 / v25;
    __p[0] = (void *)((uint64_t)__p[0] * v25);
    v26 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
    v27 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
    v28 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v9, (uint64_t)v132, v26 + 48, *(_DWORD *)(v27 + 88), (__int128 *)__p, (const DimensionOrderHint *)v126);
    v139 = (void *)a1;
    *(_QWORD *)&v149 = &v139;
    *((_QWORD *)&v149 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v152, &v149);
    v29 = ZinIrOpLayerGraph::AddNode(a2, v28, (ZinIrOpLayer ***)&v152);
    *(_QWORD *)&v152 = &unk_24C02BB18;
    if (*((_QWORD *)&v152 + 1))
    {
      v153.i64[0] = *((_QWORD *)&v152 + 1);
      operator delete(*((void **)&v152 + 1));
    }
    if (!v29)
      ZinAssertImpl("Failed to add a node into the graph");
    if ((ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Reshape, (uint64_t)v28, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("Failed to add an edge into the graph");
    if (v126[0])
    {
      v126[1] = v126[0];
      operator delete(v126[0]);
    }
  }
  if ((int)v5[3] < 2)
  {
    v47 = v28;
  }
  else
  {
    v44 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0, 0);
    v45 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0, 0)
                    + 88);
    v46 = operator new(0x10uLL);
    __p[0] = v46;
    *v46 = xmmword_207A7F690;
    *(_QWORD *)&v143 = v46 + 1;
    __p[1] = v46 + 1;
    v47 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v9, (uint64_t)v132, v44 + 48, v45, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_QWORD *)&v152 = a1;
    v126[0] = &v152;
    v126[1] = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v126);
    v48 = ZinIrOpLayerGraph::AddNode(a2, v47, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      *(void **)&v143 = __p[1];
      operator delete(__p[1]);
    }
    if (!v48)
      ZinAssertImpl("Failed to add a node into the graph");
    if (!ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v28, (uint64_t)v47, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0))ZinAssertImpl("Failed to add an edge into the graph");
  }
  *(_OWORD *)__p = 0u;
  v143 = 0u;
  LODWORD(v144) = 1065353216;
  v49 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, v47, __p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)__p);
  if ((v49 & 1) == 0)
    ZinAssertImpl("Failed to move outgoing edges");
  if (!ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0))
    ZinAssertImpl("Failed to remove node");
LABEL_150:
  v132[0] = off_24C01FBB0;
  if (v133 < 0)
    operator delete((void *)v132[1]);
  return 0;
}

void sub_206E9A3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;
  void *v61;

  STACK[0x220] = (unint64_t)&unk_24C02BB18;
  v61 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v61;
    operator delete(v61);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)(v59 - 192));
  std::deque<int>::~deque[abi:ne180100](&a43);
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  a53 = (uint64_t)off_24C01FBB0;
  if (a59 < 0)
    operator delete(a54);
  _Unwind_Resume(a1);
}

_QWORD *ZinSpaceToBatchLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *GroupId;
  uint64_t v18[2];
  uint64_t v19;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C020AC8;
  v9 = *(_QWORD *)(v7 + 12);
  *(_DWORD *)(v8 + 20) = *(_DWORD *)(v7 + 20);
  *(_QWORD *)(v8 + 12) = v9;
  v10 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  v18[0] = v10;
  v18[1] = (uint64_t)v11;
  v19 = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  ZinSpaceToBatchLayer::ZinSpaceToBatchLayer(v6, &v19, v18, a3);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206E9A968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

_QWORD *ZinSpaceToBatchLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "SPACE_TO_BATCH");
}

uint64_t ZinSpaceToBatchLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206E9AA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinSpaceToBatchLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  unsigned __int8 *v16;

  v3 = *a2;
  if (a2[1] - *a2 != 120)
    ZinAssertImpl("SpaceToBatch layer can only have one bottom");
  v7 = *((_QWORD *)a1 + 8);
  v16 = a3;
  v8 = *(_QWORD *)(v3 + 32);
  std::string::basic_string[abi:ne180100]<0>(v14, "W");
  v9 = *(_DWORD *)(v7 + 12);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ZinSpaceToBatchLayer::ValidateSemantics_Impl(std::vector<ZinIrTensorInfo> const&,ZinIrHalParameters const&)const::$_0::operator()((uint64_t *)&v16, v8, (uint64_t)v14, v9, (uint64_t)__p, 1);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  v10 = *(_QWORD *)(v3 + 24);
  std::string::basic_string[abi:ne180100]<0>(v14, "H");
  v11 = *(_DWORD *)(v7 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  ZinSpaceToBatchLayer::ValidateSemantics_Impl(std::vector<ZinIrTensorInfo> const&,ZinIrHalParameters const&)const::$_0::operator()((uint64_t *)&v16, v10, (uint64_t)v14, v11, (uint64_t)__p, 0);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
}

void sub_206E9ABDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void ZinSpaceToBatchLayer::ValidateSemantics_Impl(std::vector<ZinIrTensorInfo> const&,ZinIrHalParameters const&)const::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  _OWORD v16[3];
  int *v17;
  int *v18;
  uint64_t v19;

  v11 = *a1;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v17, (uint64_t *)(v11 + 1656), (uint64_t *)(v11 + 1688), 4uLL);
  memset(v16, 0, sizeof(v16));
  if (a4 <= 0)
  {
    if (*(char *)(a5 + 23) >= 0)
      v12 = (const char *)a5;
    else
      v12 = *(const char **)a5;
    ZinAssertImpl("Factor %s = %d is invalid. It should be a positive number", v12, a4);
  }
  if (a6 && !Factorize(a4, &v17, v16))
  {
    if (*(char *)(a5 + 23) >= 0)
      v15 = (const char *)a5;
    else
      v15 = *(const char **)a5;
    ZinAssertImpl("Factor %s = %d is invalid. It should be a multiple of {2,3,4,8}", v15, a4);
  }
  if (a2 % a4)
  {
    if (*(char *)(a3 + 23) >= 0)
      v13 = (const char *)a3;
    else
      v13 = *(const char **)a3;
    if (*(char *)(a5 + 23) >= 0)
      v14 = (const char *)a5;
    else
      v14 = *(const char **)a5;
    ZinAssertImpl("Input axis %s = %zd is not divisible by factor %s = %d", v13, a2, v14, a4);
  }
  std::deque<int>::~deque[abi:ne180100](v16);
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_206E9AD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  v7 = *(void **)(v5 - 72);
  if (v7)
  {
    *(_QWORD *)(v5 - 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinConvPoolLargeStride::LargeStrideConvLower(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  char *v8;
  uint64_t v9;
  std::string::size_type size;
  _BYTE *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  __n128 v20;
  ZinIrOpLayer *v21;
  ZinIrTensor *v22;
  unint64_t Interleave;
  char v24;
  BOOL v25;
  int v26;
  _DWORD *v27;
  int v28;
  ZinIrOpLayer *v29;
  int v30;
  _QWORD *v31;
  int inserted;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64x2_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int64x2_t v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  int64x2_t v73;
  int32x2_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  ZinIrOpLayer *PadLayer;
  int v84;
  uint64_t *v85;
  _BOOL4 v86;
  int v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  ZinIrKernel **DecomposedPartition;
  char *v97;
  void *v98;
  _DWORD *v99;
  __int128 **v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int64x2_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  int64x2_t *v115;
  int64x2_t v116;
  int64x2_t *v117;
  char *v118;
  int64x2_t *v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  int v132;
  ZinIrOpLayer **v133;
  char *v134;
  char *v135;
  ZinIrOpLayer *v136;
  ZinIrKernel *v137;
  ZinIrKernel *v138;
  int v139;
  _QWORD *v140;
  _QWORD *v141;
  int v142;
  uint64_t v143;
  __int128 v144;
  ZinIrTensor *v145;
  BOOL IsLiveOut;
  ZinIrTensor *v147;
  BOOL v148;
  ZinIrTensor *v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  char *v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t Hal;
  ZinIrOpLayer *v171;
  _BOOL4 v172;
  int v173;
  char *v174;
  char *v175;
  char *v176;
  ZinIrOpLayer *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  int v182;
  char *v183;
  char *v184;
  int v185;
  uint64_t v186;
  __int128 v187;
  ZinIrTensor *v188;
  BOOL v189;
  ZinIrTensor *v190;
  BOOL v191;
  ZinIrTensor *v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  char v196;
  _DWORD *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  ZinIrOpLayer *v214;
  _BOOL4 v215;
  int v216;
  uint64_t v217;
  ZinIrOpLayer *ViewFromOffset;
  _BOOL4 v219;
  int v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  ZinIrOpLayerGraph *v227;
  int v228;
  int v229;
  char v230;
  char *__format;
  ZinIrOpLayer *v233;
  ZinIrOpLayer *v234;
  ZinIrOpLayer *v235;
  uint64_t v236;
  ZinIrOpLayer *v237;
  void *v238;
  uint64_t v239;
  _QWORD *v240;
  int v241;
  int v242;
  uint64_t v243;
  char v244;
  int v245;
  ZinIrOpLayer *v246;
  char *v247;
  uint64_t **v249;
  uint64_t v251;
  _QWORD *v252;
  void *v253;
  char *v254;
  char *v255;
  _QWORD *v256;
  void *v257;
  uint64_t i64;
  char *v259;
  _BYTE v260[48];
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  int v265;
  _BYTE __p[48];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  void *v274;
  void *v275;
  uint64_t v276;
  __int16 v277;
  void *v278;
  char *v279;
  char *v280;
  void *v281;
  void *v282;
  unint64_t v283;
  _QWORD *v284;
  _QWORD v285[3];
  char v286;
  void *v287;
  char *v288;
  uint64_t v289;
  std::string v290;
  _BYTE v291[32];
  uint64_t v292;
  int v293;
  char *v294;
  char *v295;
  char *v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  uint64_t v300;

  v300 = *MEMORY[0x24BDAC8D0];
  v8 = *(char **)(a5 + 200);
  if (*(char *)(a5 + 47) < 0)
    std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)(a5 + 24), *(_QWORD *)(a5 + 32));
  else
    v290 = *(std::string *)(a5 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(a5 + 96) - 8);
  v288 = 0;
  v287 = 0;
  v289 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v287, *(const void **)(a5 + 112), *(_QWORD *)(a5 + 120), (uint64_t)(*(_QWORD *)(a5 + 120) - *(_QWORD *)(a5 + 112)) >> 3);
  if ((v290.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v290.__r_.__value_.__r.__words[2]);
  else
    size = v290.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)v260, size + 1);
  if (v260[23] >= 0)
    v11 = v260;
  else
    v11 = *(_BYTE **)v260;
  if (size)
  {
    if ((v290.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v290;
    else
      v12 = (std::string *)v290.__r_.__value_.__r.__words[0];
    memmove(v11, v12, size);
  }
  *(_WORD *)&v11[size] = 95;
  v13 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v297, "lstride_conv");
  v14 = std::string::append(v13, "_xfm", 4uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)&v291[16] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)v291 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v291[23] >= 0)
    v16 = v291;
  else
    v16 = *(const std::string::value_type **)v291;
  if (v291[23] >= 0)
    v17 = v291[23];
  else
    v17 = *(_QWORD *)&v291[8];
  v18 = std::string::append((std::string *)v260, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = ZinObjectNameFactory::ZinObjectNameFactory(v285, __p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v291[23] & 0x80000000) != 0)
    operator delete(*(void **)v291);
  if (SBYTE7(v298) < 0)
    operator delete((void *)v297);
  if ((v260[23] & 0x80000000) != 0)
    operator delete(*(void **)v260);
  v242 = *(_DWORD *)((*(uint64_t (**)(char *, _QWORD, _QWORD, __n128))(*(_QWORD *)v8 + 32))(v8, 0, 0, v20)+ 88);
  v246 = **(ZinIrOpLayer ***)(a5 + 88);
  v21 = **(ZinIrOpLayer ***)(**(_QWORD **)(a5 + 112) + 88);
  v22 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0);
  Interleave = ZinIrTensor::GetInterleave(v22);
  if (v24)
    v25 = Interleave > 1;
  else
    v25 = 0;
  v26 = v25;
  v27 = *(_DWORD **)a3;
  v241 = v26;
  if (v26 == 1 && *v27 != 44)
  {
    v284 = 0;
    v29 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(a1, v9, (uint64_t)v285, v242, &v284);
    v31 = v284;
    v284 = 0;
    if (v31)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v284, v31);
    *(_QWORD *)v291 = a5;
    *(_QWORD *)v260 = v291;
    *(_QWORD *)&v260[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v260);
    inserted = ZinIrOpLayerGraph::InsertNodeBetween(a2, v29, v246, (ZinIrOpLayer *)a5, (ZinIrOpLayer ***)__p);
    *(_QWORD *)__p = &unk_24C02BB18;
    if (*(_QWORD *)&__p[8])
    {
      *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
      operator delete(*(void **)&__p[8]);
    }
    v33 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0, 0);
    if (ZinIrTensor::SetInterleave(v33, 1uLL, 1, 1))
      v30 = 0;
    else
      v30 = inserted;
    v27 = *(_DWORD **)a3;
    v28 = 1;
    v246 = v29;
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v30 = 1;
  }
  v233 = v21;
  v249 = a2;
  v282 = 0;
  v281 = 0;
  v283 = 0;
  v279 = 0;
  v278 = 0;
  v280 = 0;
  if (*(_DWORD **)(a3 + 8) != v27)
  {
    v247 = v8;
    v240 = a4;
    v34 = 0;
    v35 = 0;
    v244 = 0;
    v235 = 0;
    v243 = 0;
    v239 = a5;
    if (v28)
      v36 = (uint64_t)v29;
    else
      v36 = v9;
    v234 = (ZinIrOpLayer *)v36;
    __format = "Invalid pool decomposition";
    v37 = (uint64_t)v246;
    while (1)
    {
      v38 = v27[86 * v34];
      v39 = (v35 != 6) & v30;
      v251 = v34;
      if (v38 <= 16)
      {
        if (v38 == 1)
        {
          v88 = (*(uint64_t (**)(char *, _QWORD, _QWORD))(*(_QWORD *)v247 + 32))(v247, 0, 0);
          v89 = *(_OWORD *)(v88 + 48);
          *(_QWORD *)&v260[32] = *(_QWORD *)(v88 + 80);
          *(_OWORD *)v260 = v89;
          *(int64x2_t *)&v260[16] = vdupq_n_s64(1uLL);
          v90 = *((_QWORD *)v247 + 17);
          v270 = *(_QWORD *)(v90 + 552);
          v91 = *(_OWORD *)(v90 + 536);
          v268 = *(_OWORD *)(v90 + 520);
          v269 = v91;
          v92 = *(_OWORD *)(v90 + 504);
          *(_OWORD *)&__p[32] = *(_OWORD *)(v90 + 488);
          v267 = v92;
          v93 = *(_OWORD *)(v90 + 472);
          *(_OWORD *)__p = *(_OWORD *)(v90 + 456);
          *(_QWORD *)&__p[16] = v93;
          *(_QWORD *)&__p[24] = 0x100000001;
          *(_DWORD *)&__p[32] = 1;
          *(_QWORD *)&v268 = 0;
          v267 = 0uLL;
          ZinObjectNameFactory::CreateName((uint64_t)v285, 2u, (std::string *)v291);
          v94 = *((_QWORD *)v247 + 17);
          v95 = operator new();
          ZinIrKernel::ZinIrKernel(v95, v291, __p, v94);
          *(_QWORD *)&v297 = v95;
          if ((v291[23] & 0x80000000) != 0)
            operator delete(*(void **)v291);
          *(_QWORD *)v291 = 0;
          DecomposedPartition = ZinConvCompositeLayer::CreateDecomposedPartition(v239, (ZinIrKernel **)&v297, (ZinIrKernel **)v291, 0, 0, (__int128 *)v260, a1, v249, (const ZinConvLayer *)v285, v243);
          PadLayer = (ZinIrOpLayer *)DecomposedPartition;
          if (!DecomposedPartition)
            ZinAssertImpl("Unexpected null partition!!!");
          v97 = (char *)v282;
          if ((unint64_t)v282 >= v283)
          {
            v128 = ((_BYTE *)v282 - (_BYTE *)v281) >> 3;
            if ((unint64_t)(v128 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v129 = (uint64_t)(v283 - (_QWORD)v281) >> 2;
            if (v129 <= v128 + 1)
              v129 = v128 + 1;
            if (v283 - (unint64_t)v281 >= 0x7FFFFFFFFFFFFFF8)
              v130 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v130 = v129;
            if (v130)
              v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v283, v130);
            else
              v131 = 0;
            v133 = (ZinIrOpLayer **)&v131[8 * v128];
            *v133 = PadLayer;
            v98 = v133 + 1;
            v134 = (char *)v282;
            v135 = (char *)v281;
            if (v282 != v281)
            {
              do
              {
                v136 = (ZinIrOpLayer *)*((_QWORD *)v134 - 1);
                v134 -= 8;
                *--v133 = v136;
              }
              while (v134 != v135);
              v134 = (char *)v281;
            }
            v281 = v133;
            v282 = v98;
            v283 = (unint64_t)&v131[8 * v130];
            if (v134)
              operator delete(v134);
          }
          else
          {
            *(_QWORD *)v282 = DecomposedPartition;
            v98 = v97 + 8;
          }
          v282 = v98;
          v137 = *(ZinIrKernel **)v291;
          *(_QWORD *)v291 = 0;
          if (v137)
          {
            ZinIrKernel::~ZinIrKernel(v137);
            MEMORY[0x20BD002F8]();
          }
          v138 = (ZinIrKernel *)v297;
          *(_QWORD *)&v297 = 0;
          if (v138)
          {
            ZinIrKernel::~ZinIrKernel(v138);
            MEMORY[0x20BD002F8]();
          }
          v35 = 4;
        }
        else
        {
          if (v38 != 3)
            goto LABEL_288;
          if (v37)
            v40 = (v35 & 0xFFFFFFFE) == 4;
          else
            v40 = 0;
          if (v40)
            v41 = (v35 != 6) & v30;
          else
            v41 = 0;
          v245 = v41;
          if (v35 == 4)
          {
            v237 = (ZinIrOpLayer *)v37;
            v42 = v282;
            v43 = v281;
            v44 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v281 + 32))(*(_QWORD *)v281, 0, 0);
            v45 = *(_OWORD *)(v44 + 64);
            v297 = *(_OWORD *)(v44 + 48);
            v298 = v45;
            v299 = *(_QWORD *)(v44 + 80);
            v257 = 0;
            i64 = 0;
            v259 = 0;
            v46 = (v42 - v43) << 29;
            v47 = (int)((v42 - v43) >> 3);
            if (v46 >= 1)
            {
              v48 = 0;
              v49 = 0;
              if (v47 <= 1)
                v50 = 1;
              else
                v50 = v47;
              do
              {
                *(_QWORD *)&__p[8] = 0;
                *(_QWORD *)__p = 0;
                if (v48 >= (unint64_t)v259)
                {
                  v52 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - (_QWORD)v257) >> 4);
                  v53 = v52 + 1;
                  if (v52 + 1 > 0x333333333333333)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  if (0x999999999999999ALL * ((v259 - (_BYTE *)v257) >> 4) > v53)
                    v53 = 0x999999999999999ALL * ((v259 - (_BYTE *)v257) >> 4);
                  if (0xCCCCCCCCCCCCCCCDLL * ((v259 - (_BYTE *)v257) >> 4) >= 0x199999999999999)
                    v54 = 0x333333333333333;
                  else
                    v54 = v53;
                  if (v54)
                    v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v259, v54);
                  else
                    v55 = 0;
                  v56 = &v55[80 * v52];
                  *(_QWORD *)v56 = 0;
                  *((_QWORD *)v56 + 1) = 0;
                  *((_QWORD *)v56 + 3) = 0;
                  *((_QWORD *)v56 + 4) = 0;
                  *((_QWORD *)v56 + 2) = v49;
                  v57 = vdupq_n_s64(1uLL);
                  *(int64x2_t *)(v56 + 40) = v57;
                  *(int64x2_t *)(v56 + 56) = v57;
                  *((_QWORD *)v56 + 9) = 1;
                  v59 = (char *)v257;
                  v58 = (char *)i64;
                  v60 = v56;
                  if ((void *)i64 != v257)
                  {
                    do
                    {
                      *((_OWORD *)v60 - 5) = *((_OWORD *)v58 - 5);
                      v61 = *((_OWORD *)v58 - 4);
                      v62 = *((_OWORD *)v58 - 3);
                      v63 = *((_OWORD *)v58 - 1);
                      *((_OWORD *)v60 - 2) = *((_OWORD *)v58 - 2);
                      *((_OWORD *)v60 - 1) = v63;
                      *((_OWORD *)v60 - 4) = v61;
                      *((_OWORD *)v60 - 3) = v62;
                      v60 -= 80;
                      v58 -= 80;
                    }
                    while (v58 != v59);
                    v58 = v59;
                  }
                  v48 = (unint64_t)(v56 + 80);
                  v257 = v60;
                  i64 = (uint64_t)(v56 + 80);
                  v259 = &v55[80 * v54];
                  if (v58)
                    operator delete(v58);
                }
                else
                {
                  *(_QWORD *)v48 = 0;
                  *(_QWORD *)(v48 + 8) = 0;
                  *(_QWORD *)(v48 + 16) = v49;
                  *(_OWORD *)(v48 + 24) = *(_OWORD *)__p;
                  v51 = vdupq_n_s64(1uLL);
                  *(int64x2_t *)(v48 + 40) = v51;
                  *(int64x2_t *)(v48 + 56) = v51;
                  *(_QWORD *)(v48 + 72) = 1;
                  v48 += 80;
                }
                i64 = v48;
                ++v49;
              }
              while (v49 != v50);
            }
            *(_QWORD *)&v298 = v47;
            v256 = 0;
            ZinBuilder::CreateConcat(a1, (uint64_t)v285, &v297, (_QWORD **)&v281, (uint64_t)&v257, 2, 1, &v256, (void **)&v294, 0);
            v64 = v256;
            v256 = 0;
            if (v64)
              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v256, v64);
            v65 = *(_QWORD *)a3 + 344 * v251;
            v66 = v65 + 8;
            *(_QWORD *)v260 = off_24C017CA0;
            if (*(char *)(v65 + 39) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v260[8], *(const std::string::value_type **)(v65 + 16), *(_QWORD *)(v65 + 24));
            }
            else
            {
              v67 = *(_OWORD *)(v65 + 16);
              *(_QWORD *)&v260[24] = *(_QWORD *)(v65 + 32);
              *(_OWORD *)&v260[8] = v67;
            }
            *(_DWORD *)&v260[32] = *(_DWORD *)(v66 + 32);
            v261 = 0uLL;
            *(_QWORD *)&v260[40] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v260[40], *(__int128 **)(v66 + 40), *(__int128 **)(v66 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v66 + 48) - *(_QWORD *)(v66 + 40)) >> 3));
            v262 = *(_OWORD *)(v66 + 64);
            *(_QWORD *)v260 = off_24C01EAB0;
            v139 = *(_DWORD *)(v66 + 80);
            BYTE4(v263) = *(_BYTE *)(v66 + 84);
            LODWORD(v263) = v139;
            v253 = 0;
            v254 = 0;
            v255 = 0;
            v140 = v281;
            v141 = v282;
            while (v140 != v141)
            {
              memset(&v291[3], 0, 20);
              v142 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0)+ 88);
              v143 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0);
              v144 = *(_OWORD *)(v143 + 64);
              *(_OWORD *)&__p[4] = *(_OWORD *)(v143 + 48);
              *(_OWORD *)&__p[20] = v144;
              *(_QWORD *)&__p[36] = *(_QWORD *)(v143 + 80);
              v145 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0);
              if (*((_QWORD *)v145 + 14) || !ZinIrTensor::IsLiveInLiveStateOrConstTensor(v145))
              {
                v147 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0);
                IsLiveOut = ZinIrTensor::IsLiveOut(v147);
              }
              else
              {
                IsLiveOut = 1;
              }
              v148 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0)+ 112) != 0;
              v149 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0);
              v150 = ZinIrTensor::GetInterleave(v149);
              v152 = v150;
              v153 = v151;
              v154 = v254;
              if (v254 >= v255)
              {
                v156 = 0xEEEEEEEEEEEEEEEFLL * ((v254 - (_BYTE *)v253) >> 3);
                v157 = v156 + 1;
                if (v156 + 1 > 0x222222222222222)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                if (0xDDDDDDDDDDDDDDDELL * ((v255 - (_BYTE *)v253) >> 3) > v157)
                  v157 = 0xDDDDDDDDDDDDDDDELL * ((v255 - (_BYTE *)v253) >> 3);
                if (0xEEEEEEEEEEEEEEEFLL * ((v255 - (_BYTE *)v253) >> 3) >= 0x111111111111111)
                  v158 = 0x222222222222222;
                else
                  v158 = v157;
                if (v158)
                  v159 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>((uint64_t)&v255, v158);
                else
                  v159 = 0;
                v160 = &v159[120 * v156];
                *(_DWORD *)v160 = v142;
                *(_OWORD *)(v160 + 4) = *(_OWORD *)__p;
                *(_OWORD *)(v160 + 20) = *(_OWORD *)&__p[16];
                *((_OWORD *)v160 + 2) = *(_OWORD *)&__p[28];
                v160[48] = IsLiveOut;
                v160[49] = v148;
                *((_QWORD *)v160 + 7) = v152;
                v160[64] = v153;
                v160[72] = 0;
                v160[92] = 0;
                *(_OWORD *)(v160 + 93) = *(_OWORD *)v291;
                *(_QWORD *)(v160 + 108) = *(_QWORD *)&v291[15];
                v162 = (char *)v253;
                v161 = v254;
                v163 = v160;
                if (v254 != v253)
                {
                  do
                  {
                    v164 = *(_OWORD *)(v161 - 120);
                    v165 = *(_OWORD *)(v161 - 104);
                    v166 = *(_OWORD *)(v161 - 88);
                    *(_OWORD *)(v163 - 72) = *(_OWORD *)(v161 - 72);
                    *(_OWORD *)(v163 - 88) = v166;
                    *(_OWORD *)(v163 - 104) = v165;
                    *(_OWORD *)(v163 - 120) = v164;
                    v167 = *(_OWORD *)(v161 - 56);
                    v168 = *(_OWORD *)(v161 - 40);
                    v169 = *(_OWORD *)(v161 - 24);
                    *((_DWORD *)v163 - 2) = *((_DWORD *)v161 - 2);
                    *(_OWORD *)(v163 - 24) = v169;
                    *(_OWORD *)(v163 - 40) = v168;
                    *(_OWORD *)(v163 - 56) = v167;
                    v163 -= 120;
                    v161 -= 120;
                  }
                  while (v161 != v162);
                  v161 = v162;
                }
                v155 = v160 + 120;
                v253 = v163;
                v254 = v160 + 120;
                v255 = &v159[120 * v158];
                if (v161)
                  operator delete(v161);
              }
              else
              {
                *(_DWORD *)v254 = v142;
                *(_OWORD *)(v154 + 4) = *(_OWORD *)__p;
                *(_OWORD *)(v154 + 20) = *(_OWORD *)&__p[16];
                *((_OWORD *)v154 + 2) = *(_OWORD *)&__p[28];
                v154[48] = IsLiveOut;
                v154[49] = v148;
                *((_QWORD *)v154 + 7) = v150;
                v154[64] = v151;
                v154[72] = 0;
                v154[92] = 0;
                *(_OWORD *)(v154 + 93) = *(_OWORD *)v291;
                *(_QWORD *)(v154 + 108) = *(_QWORD *)&v291[15];
                v155 = v154 + 120;
              }
              v254 = v155;
              ++v140;
            }
            Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(a1 + 160));
            *(_QWORD *)v291 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
            *(_QWORD *)&v291[8] = a1 + 176;
            v292 = 0;
            *(_OWORD *)&v291[16] = 0uLL;
            v293 = 0;
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)__p, (uint64_t)v291, (uint64_t)v260, v253, 0xEEEEEEEEEEEEEEEFLL * ((v254 - (_BYTE *)v253) >> 3));
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)__p);
            if (*(_QWORD *)&__p[24])
              ZinAssertImpl("Validation failed for concat layer");
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)__p);
            if (SHIBYTE(v292) < 0)
              operator delete(*(void **)&v291[16]);
            if (v253)
            {
              v254 = (char *)v253;
              operator delete(v253);
            }
            ZinIrUnitInfo::~ZinIrUnitInfo((void **)v260);
            v171 = (ZinIrOpLayer *)*((_QWORD *)v295 - 1);
            *(_QWORD *)v291 = v247;
            *(_QWORD *)v260 = v291;
            *(_QWORD *)&v260[8] = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(__p, v260);
            v172 = ZinIrOpLayerGraph::AddNode(v249, v171, (ZinIrOpLayer ***)__p);
            *(_QWORD *)__p = &unk_24C02BB18;
            if (*(_QWORD *)&__p[8])
            {
              *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
              operator delete(*(void **)&__p[8]);
            }
            v173 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v249, (uint64_t *)&v281, *((_QWORD *)v295 - 1));
            v282 = v281;
            v174 = v295;
            v175 = v279;
            if (v279 >= v280)
            {
              v178 = (v279 - (_BYTE *)v278) >> 3;
              if ((unint64_t)(v178 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v179 = (v280 - (_BYTE *)v278) >> 2;
              if (v179 <= v178 + 1)
                v179 = v178 + 1;
              if ((unint64_t)(v280 - (_BYTE *)v278) >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v179;
              if (v180)
                v181 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v280, v180);
              else
                v181 = 0;
              v221 = &v181[8 * v178];
              *(_QWORD *)v221 = *((_QWORD *)v174 - 1);
              v176 = v221 + 8;
              v222 = v279;
              v223 = (char *)v278;
              if (v279 == v278)
              {
                v177 = v237;
              }
              else
              {
                v177 = v237;
                do
                {
                  v224 = *((_QWORD *)v222 - 1);
                  v222 -= 8;
                  *((_QWORD *)v221 - 1) = v224;
                  v221 -= 8;
                }
                while (v222 != v223);
                v222 = (char *)v278;
              }
              v278 = v221;
              v279 = v176;
              v280 = &v181[8 * v180];
              if (v222)
                operator delete(v222);
            }
            else
            {
              *(_QWORD *)v279 = *((_QWORD *)v295 - 1);
              v176 = v175 + 8;
              v177 = v237;
            }
            v279 = v176;
            if (v294)
            {
              v295 = v294;
              operator delete(v294);
            }
            if (v257)
            {
              i64 = (uint64_t)v257;
              operator delete(v257);
            }
            v39 = v245 & v172 & v173;
            v35 = 5;
            PadLayer = v177;
          }
          else
          {
            v102 = v279 - (_BYTE *)v278;
            if (v279 == v278)
            {
              __format = "Error: concat2_input size is 0";
LABEL_288:
              ZinAssertImpl(__format);
            }
            v103 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v278 + 32))(*(_QWORD *)v278, 0, 0);
            v104 = *(_OWORD *)(v103 + 64);
            v297 = *(_OWORD *)(v103 + 48);
            v298 = v104;
            v299 = *(_QWORD *)(v103 + 80);
            v257 = 0;
            i64 = 0;
            v259 = 0;
            v105 = v102 << 29;
            v106 = (int)(v102 >> 3);
            if (v105 >= 1)
            {
              v107 = 0;
              v108 = 0;
              if (v106 <= 1)
                v109 = 1;
              else
                v109 = v106;
              do
              {
                if (v107 >= (unint64_t)v259)
                {
                  v111 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v107 - (_QWORD)v257) >> 4);
                  v112 = v111 + 1;
                  if (v111 + 1 > 0x333333333333333)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  if (0x999999999999999ALL * ((v259 - (_BYTE *)v257) >> 4) > v112)
                    v112 = 0x999999999999999ALL * ((v259 - (_BYTE *)v257) >> 4);
                  if (0xCCCCCCCCCCCCCCCDLL * ((v259 - (_BYTE *)v257) >> 4) >= 0x199999999999999)
                    v113 = 0x333333333333333;
                  else
                    v113 = v112;
                  if (v113)
                    v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v259, v113);
                  else
                    v114 = 0;
                  v115 = (int64x2_t *)&v114[80 * v111];
                  v115->i64[0] = 0;
                  v115->i64[1] = 0;
                  v115[1].i64[0] = 0;
                  v115[1].i64[1] = v108;
                  v116 = vdupq_n_s64(1uLL);
                  v115[2] = (int64x2_t)xmmword_207A80930;
                  v115[3] = v116;
                  v115[4] = v116;
                  v118 = (char *)v257;
                  v117 = (int64x2_t *)i64;
                  v119 = v115;
                  if ((void *)i64 != v257)
                  {
                    do
                    {
                      v119[-5] = v117[-5];
                      v120 = v117[-4];
                      v121 = v117[-3];
                      v122 = v117[-1];
                      v119[-2] = v117[-2];
                      v119[-1] = v122;
                      v119[-4] = v120;
                      v119[-3] = v121;
                      v119 -= 5;
                      v117 -= 5;
                    }
                    while (v117 != (int64x2_t *)v118);
                    v117 = (int64x2_t *)v118;
                  }
                  v107 = (unint64_t)&v115[5];
                  v257 = v119;
                  i64 = (uint64_t)v115[5].i64;
                  v259 = &v114[80 * v113];
                  if (v117)
                    operator delete(v117);
                }
                else
                {
                  *(_QWORD *)v107 = 0;
                  *(_QWORD *)(v107 + 8) = 0;
                  *(_QWORD *)(v107 + 16) = 0;
                  *(_QWORD *)(v107 + 24) = v108;
                  v110 = vdupq_n_s64(1uLL);
                  *(_OWORD *)(v107 + 32) = xmmword_207A80930;
                  *(int64x2_t *)(v107 + 48) = v110;
                  *(int64x2_t *)(v107 + 64) = v110;
                  v107 += 80;
                }
                i64 = v107;
                ++v108;
              }
              while (v108 != v109);
            }
            *((_QWORD *)&v298 + 1) = v106;
            v252 = 0;
            ZinBuilder::CreateConcat(a1, (uint64_t)v285, &v297, (_QWORD **)&v278, (uint64_t)&v257, 3, 1, &v252, (void **)__p, 0);
            v238 = *(void **)__p;
            v123 = *(_QWORD *)&__p[8];
            memset(__p, 0, 24);
            v124 = v252;
            v252 = 0;
            if (v124)
              std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v252, v124);
            v125 = *(_QWORD *)a3 + 344 * v251;
            v126 = v125 + 8;
            *(_QWORD *)v260 = off_24C017CA0;
            if (*(char *)(v125 + 39) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v260[8], *(const std::string::value_type **)(v125 + 16), *(_QWORD *)(v125 + 24));
            }
            else
            {
              v127 = *(_OWORD *)(v125 + 16);
              *(_QWORD *)&v260[24] = *(_QWORD *)(v125 + 32);
              *(_OWORD *)&v260[8] = v127;
            }
            v236 = v123;
            *(_DWORD *)&v260[32] = *(_DWORD *)(v126 + 32);
            v261 = 0uLL;
            *(_QWORD *)&v260[40] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v260[40], *(__int128 **)(v126 + 40), *(__int128 **)(v126 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v126 + 48) - *(_QWORD *)(v126 + 40)) >> 3));
            v262 = *(_OWORD *)(v126 + 64);
            *(_QWORD *)v260 = off_24C01EAB0;
            v182 = *(_DWORD *)(v126 + 80);
            BYTE4(v263) = *(_BYTE *)(v126 + 84);
            LODWORD(v263) = v182;
            v294 = 0;
            v295 = 0;
            v296 = 0;
            v183 = (char *)v278;
            v184 = v279;
            while (v183 != v184)
            {
              memset(&v291[3], 0, 20);
              v185 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v183 + 32))(*(_QWORD *)v183, 0, 0)+ 88);
              v186 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v183 + 32))(*(_QWORD *)v183, 0, 0);
              v187 = *(_OWORD *)(v186 + 64);
              *(_OWORD *)&__p[4] = *(_OWORD *)(v186 + 48);
              *(_OWORD *)&__p[20] = v187;
              *(_QWORD *)&__p[36] = *(_QWORD *)(v186 + 80);
              v188 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v183 + 32))(*(_QWORD *)v183, 0, 0);
              if (*((_QWORD *)v188 + 14) || !ZinIrTensor::IsLiveInLiveStateOrConstTensor(v188))
              {
                v190 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v183 + 32))(*(_QWORD *)v183, 0, 0);
                v189 = ZinIrTensor::IsLiveOut(v190);
              }
              else
              {
                v189 = 1;
              }
              v191 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v183 + 32))(*(_QWORD *)v183, 0, 0)+ 112) != 0;
              v192 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v183 + 32))(*(_QWORD *)v183, 0, 0);
              v193 = ZinIrTensor::GetInterleave(v192);
              v195 = v193;
              v196 = v194;
              v197 = v295;
              if (v295 >= v296)
              {
                v199 = 0xEEEEEEEEEEEEEEEFLL * ((v295 - v294) >> 3);
                v200 = v199 + 1;
                if (v199 + 1 > 0x222222222222222)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                if (0xDDDDDDDDDDDDDDDELL * ((v296 - v294) >> 3) > v200)
                  v200 = 0xDDDDDDDDDDDDDDDELL * ((v296 - v294) >> 3);
                if (0xEEEEEEEEEEEEEEEFLL * ((v296 - v294) >> 3) >= 0x111111111111111)
                  v201 = 0x222222222222222;
                else
                  v201 = v200;
                if (v201)
                  v202 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>((uint64_t)&v296, v201);
                else
                  v202 = 0;
                v203 = &v202[120 * v199];
                *(_DWORD *)v203 = v185;
                *(_OWORD *)(v203 + 4) = *(_OWORD *)__p;
                *(_OWORD *)(v203 + 20) = *(_OWORD *)&__p[16];
                *((_OWORD *)v203 + 2) = *(_OWORD *)&__p[28];
                v203[48] = v189;
                v203[49] = v191;
                *((_QWORD *)v203 + 7) = v195;
                v203[64] = v196;
                v203[72] = 0;
                v203[92] = 0;
                *(_OWORD *)(v203 + 93) = *(_OWORD *)v291;
                *(_QWORD *)(v203 + 108) = *(_QWORD *)&v291[15];
                v205 = v294;
                v204 = v295;
                v206 = v203;
                if (v295 != v294)
                {
                  do
                  {
                    v207 = *(_OWORD *)(v204 - 120);
                    v208 = *(_OWORD *)(v204 - 104);
                    v209 = *(_OWORD *)(v204 - 88);
                    *(_OWORD *)(v206 - 72) = *(_OWORD *)(v204 - 72);
                    *(_OWORD *)(v206 - 88) = v209;
                    *(_OWORD *)(v206 - 104) = v208;
                    *(_OWORD *)(v206 - 120) = v207;
                    v210 = *(_OWORD *)(v204 - 56);
                    v211 = *(_OWORD *)(v204 - 40);
                    v212 = *(_OWORD *)(v204 - 24);
                    *((_DWORD *)v206 - 2) = *((_DWORD *)v204 - 2);
                    *(_OWORD *)(v206 - 24) = v212;
                    *(_OWORD *)(v206 - 40) = v211;
                    *(_OWORD *)(v206 - 56) = v210;
                    v206 -= 120;
                    v204 -= 120;
                  }
                  while (v204 != v205);
                  v204 = v205;
                }
                v198 = v203 + 120;
                v294 = v206;
                v295 = v203 + 120;
                v296 = &v202[120 * v201];
                if (v204)
                  operator delete(v204);
              }
              else
              {
                *(_DWORD *)v295 = v185;
                *(_OWORD *)(v197 + 1) = *(_OWORD *)__p;
                *(_OWORD *)(v197 + 5) = *(_OWORD *)&__p[16];
                *((_OWORD *)v197 + 2) = *(_OWORD *)&__p[28];
                *((_BYTE *)v197 + 48) = v189;
                *((_BYTE *)v197 + 49) = v191;
                *((_QWORD *)v197 + 7) = v193;
                *((_BYTE *)v197 + 64) = v194;
                *((_BYTE *)v197 + 72) = 0;
                *((_BYTE *)v197 + 92) = 0;
                *(_OWORD *)((char *)v197 + 93) = *(_OWORD *)v291;
                *(_QWORD *)(v197 + 27) = *(_QWORD *)&v291[15];
                v198 = (char *)(v197 + 30);
              }
              v295 = v198;
              v183 += 8;
            }
            v213 = ZinIrTarget::GetHal(*(ZinIrTarget **)(a1 + 160));
            *(_QWORD *)v291 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v213 + 16))(v213);
            *(_QWORD *)&v291[8] = a1 + 176;
            v292 = 0;
            *(_OWORD *)&v291[16] = 0uLL;
            v293 = 0;
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)__p, (uint64_t)v291, (uint64_t)v260, v294, 0xEEEEEEEEEEEEEEEFLL * ((v295 - v294) >> 3));
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)__p);
            if (*(_QWORD *)&__p[24])
              ZinAssertImpl("Validation failed for concat layer");
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)__p);
            if (SHIBYTE(v292) < 0)
              operator delete(*(void **)&v291[16]);
            if (v294)
            {
              v295 = v294;
              operator delete(v294);
            }
            ZinIrUnitInfo::~ZinIrUnitInfo((void **)v260);
            v214 = *(ZinIrOpLayer **)(v236 - 8);
            *(_QWORD *)v291 = v247;
            *(_QWORD *)v260 = v291;
            *(_QWORD *)&v260[8] = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(__p, v260);
            v215 = ZinIrOpLayerGraph::AddNode(v249, v214, (ZinIrOpLayer ***)__p);
            *(_QWORD *)__p = &unk_24C02BB18;
            if (*(_QWORD *)&__p[8])
            {
              *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
              operator delete(*(void **)&__p[8]);
            }
            v216 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v249, (uint64_t *)&v278, *(_QWORD *)(v236 - 8));
            PadLayer = *(ZinIrOpLayer **)(v236 - 8);
            if (v238)
              operator delete(v238);
            if (v257)
            {
              i64 = (uint64_t)v257;
              operator delete(v257);
            }
            v39 = v245 & v215 & v216;
            v35 = 6;
          }
        }
        goto LABEL_258;
      }
      if (v38 != 17)
      {
        if (v38 != 44)
          goto LABEL_288;
        v68 = (uint64_t)&v27[86 * v34 + 2];
        ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)__p, (const ZinIrTextureUnitInfo *)v68);
        *(_QWORD *)__p = &off_24C01BAC0;
        v69 = *(_OWORD *)(v68 + 156);
        v70 = *(_OWORD *)(v68 + 172);
        v273 = *(_QWORD *)(v68 + 188);
        v271 = v69;
        v272 = v70;
        v275 = 0;
        v276 = 0;
        v274 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v274, *(const void **)(v68 + 200), *(_QWORD *)(v68 + 208), (uint64_t)(*(_QWORD *)(v68 + 208) - *(_QWORD *)(v68 + 200)) >> 3);
        v277 = *(_WORD *)(v68 + 224);
        v71 = *v240 + 40 * v251;
        v72 = *(_QWORD *)(v71 + 32);
        v73 = *(int64x2_t *)(v71 + 16);
        *(_OWORD *)v291 = *(_OWORD *)v71;
        v292 = v72 + SDWORD1(v272) + (uint64_t)(int)v272;
        v74 = vadd_s32(*(int32x2_t *)((char *)&v271 + 4), (int32x2_t)__PAIR64__(HIDWORD(v271), v271));
        v75.i64[0] = v74.i32[0];
        v75.i64[1] = v74.i32[1];
        *(int64x2_t *)&v291[16] = vaddq_s64(v73, (int64x2_t)vextq_s8(v75, v75, 8uLL));
        (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 80))(v260, v37, 0, 0);
        v76 = *v240 + 40 * v251;
        v77 = *(_QWORD *)(v76 + 32);
        v78 = *(_OWORD *)(v76 + 16);
        *(_OWORD *)&v260[8] = *(_OWORD *)v76;
        *(_OWORD *)&v260[24] = v78;
        *(_QWORD *)&v260[40] = v77;
        v79 = operator new(0x78uLL);
        *((_QWORD *)&v297 + 1) = (char *)v79 + 120;
        *(_QWORD *)&v298 = (char *)v79 + 120;
        v80 = v263;
        v79[4] = v262;
        v79[5] = v80;
        v79[6] = v264;
        *((_DWORD *)v79 + 28) = v265;
        v81 = *(_OWORD *)&v260[16];
        *v79 = *(_OWORD *)v260;
        v79[1] = v81;
        v82 = v261;
        v79[2] = *(_OWORD *)&v260[32];
        v79[3] = v82;
        *(_QWORD *)&v297 = v79;
        PadLayer = (ZinIrOpLayer *)ZinBuilder::CreatePadLayer(a1, (uint64_t)v285, (uint64_t)&v297, (__int128 *)v291, v242, (const ZinIrPadUnitInfo *)__p);
        if ((_QWORD)v297)
        {
          *((_QWORD *)&v297 + 1) = v297;
          operator delete((void *)v297);
        }
        v84 = (v35 == 0) & v30;
        if (v241)
        {
          v85 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PadLayer + 32))(PadLayer, 0, 0);
          if (ZinIrTensor::SetInterleave(v85, 1uLL, 1, 1))
            v84 = 0;
        }
        v294 = v247;
        v257 = &v294;
        i64 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v297, &v257);
        v86 = ZinIrOpLayerGraph::AddNode(v249, PadLayer, (ZinIrOpLayer ***)&v297);
        *(_QWORD *)&v297 = &unk_24C02BB18;
        if (*((_QWORD *)&v297 + 1))
        {
          *(_QWORD *)&v298 = *((_QWORD *)&v297 + 1);
          operator delete(*((void **)&v297 + 1));
        }
        v87 = ZinIrOpLayerGraph::AddEdge((uint64_t)v249, v37, (uint64_t)PadLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        *(_QWORD *)__p = &off_24C01BAC0;
        if (v274)
        {
          v275 = v274;
          operator delete(v274);
        }
        v39 = v84 & v86 & v87;
        ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)__p);
        v244 = 1;
        v246 = PadLayer;
        v35 = 1;
        goto LABEL_258;
      }
      v99 = &v27[86 * v34];
      v100 = (__int128 **)(v99 + 2);
      *(_QWORD *)__p = off_24C017CA0;
      if (*((char *)v99 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], *((const std::string::value_type **)v99 + 2), *((_QWORD *)v99 + 3));
      }
      else
      {
        v101 = *((_OWORD *)v99 + 1);
        *(_QWORD *)&__p[24] = *((_QWORD *)v99 + 4);
        *(_OWORD *)&__p[8] = v101;
      }
      *(_DWORD *)&__p[32] = *((_DWORD *)v100 + 8);
      v267 = 0uLL;
      *(_QWORD *)&__p[40] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__p[40], v100[5], v100[6], 0xAAAAAAAAAAAAAAABLL * (((char *)v100[6] - (char *)v100[5]) >> 3));
      v268 = *((_OWORD *)v100 + 4);
      *(_QWORD *)__p = off_24C021970;
      v269 = *((_OWORD *)v100 + 5);
      if (v35 > 5)
        goto LABEL_237;
      if (((1 << v35) & 0x33) != 0)
      {
        if ((v244 & 1) != 0)
          PadLayer = v246;
        else
          PadLayer = v234;
        v35 = 2;
        v132 = 1;
        if (!PadLayer)
LABEL_286:
          ZinAssertImpl("Error: fail to get the input view layer");
        goto LABEL_239;
      }
      if (v35 == 2)
      {
        v132 = 0;
        v35 = 3;
      }
      else
      {
LABEL_237:
        v132 = 0;
        v39 = 0;
      }
      PadLayer = v235;
      if (!v235)
        goto LABEL_286;
LABEL_239:
      v217 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PadLayer + 32))(PadLayer, 0, 0);
      ViewFromOffset = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(a1, (uint64_t)v285, v217, SHIDWORD(v269), v269, SDWORD1(v269));
      *(_QWORD *)&v297 = v247;
      *(_QWORD *)v291 = &v297;
      *(_QWORD *)&v291[8] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v260, v291);
      v219 = ZinIrOpLayerGraph::AddNode(v249, ViewFromOffset, (ZinIrOpLayer ***)v260);
      *(_QWORD *)v260 = &unk_24C02BB18;
      if (*(_QWORD *)&v260[8])
      {
        *(_QWORD *)&v260[16] = *(_QWORD *)&v260[8];
        operator delete(*(void **)&v260[8]);
      }
      v220 = ZinIrOpLayerGraph::AddEdge((uint64_t)v249, (uint64_t)PadLayer, (uint64_t)ViewFromOffset, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (v132)
        v235 = ViewFromOffset;
      else
        v243 = (uint64_t)ViewFromOffset;
      v39 &= v219 & v220;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)__p);
LABEL_258:
      v34 = v251 + 1;
      v27 = *(_DWORD **)a3;
      LOBYTE(v30) = v39;
      v37 = (uint64_t)PadLayer;
      if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3) <= v251 + 1)
        goto LABEL_261;
    }
  }
  PadLayer = v246;
  v39 = v30;
LABEL_261:
  v225 = v288;
  if (v287 == v288)
  {
    v229 = 1;
    v227 = (ZinIrOpLayerGraph *)v249;
  }
  else
  {
    v226 = (char *)v287 + 8;
    v227 = (ZinIrOpLayerGraph *)v249;
    do
    {
      v228 = ZinIrOpLayerGraph::AddEdge((uint64_t)v249, (uint64_t)PadLayer, *((_QWORD *)v226 - 1), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v229 = v228;
      if (v226 == v225)
        v230 = 0;
      else
        v230 = v228;
      v226 += 8;
    }
    while ((v230 & 1) != 0);
  }
  if ((v39 & v229 & ZinIrOpLayerGraph::RemoveNode(v227, v233, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: large stride conv graph manipulation error");
  if (v278)
  {
    v279 = (char *)v278;
    operator delete(v278);
  }
  if (v281)
  {
    v282 = v281;
    operator delete(v281);
  }
  v285[0] = off_24C01FBB0;
  if (v286 < 0)
    operator delete((void *)v285[1]);
  if (v287)
  {
    v288 = (char *)v287;
    operator delete(v287);
  }
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  return 0;
}

void sub_206E9C8B0(_Unwind_Exception *a1)
{
  void *v2;

  STACK[0x350] = (unint64_t)off_24C01FBB0;
  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  v2 = (void *)STACK[0x378];
  if (STACK[0x378])
  {
    STACK[0x380] = (unint64_t)v2;
    operator delete(v2);
  }
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  _Unwind_Resume(a1);
}

uint64_t ZinConvPoolLargeStride::LargeStridePoolLower(uint64_t a1, ZinIrOpLayerGraph *a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t Hal;
  uint64_t v9;
  std::string::size_type size;
  _BYTE *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  ZinIrOpLayer *PadLayer;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int64x2_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int64x2_t v54;
  ZinIrOpLayer **v55;
  ZinIrOpLayer **v56;
  ZinIrOpLayer **v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  ZinIrTensor *v65;
  uint64_t v66;
  char v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  char *v73;
  void *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  _BOOL4 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  int32x2_t v97;
  int8x16_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  _OWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BOOL4 v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int64x2_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  int64x2_t v129;
  ZinIrOpLayer **v130;
  ZinIrOpLayer **v131;
  ZinIrOpLayer **v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  ZinIrTensor *v141;
  uint64_t v142;
  char v143;
  char v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  char *v149;
  void *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  void *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _BOOL4 v170;
  _OWORD *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  int v178;
  uint64_t v179;
  ZinIrOpLayer *ViewFromOffset;
  ZinIrTensor *v181;
  uint64_t Interleave;
  char v183;
  char v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  _BOOL4 v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  _OWORD *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  _BOOL4 v200;
  int v201;
  char *v202;
  void *v203;
  int64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  ZinIrOpLayer *v208;
  _BOOL4 v209;
  int v210;
  _QWORD *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  ZinIrOpLayer *v218;
  _BOOL4 v219;
  int v220;
  unint64_t v221;
  ZinLargeStridePoolTransform *v222;
  uint64_t v223;
  ZinIrOpLayer **v224;
  char *v225;
  char *v226;
  ZinIrOpLayer *v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  _BOOL4 v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  __int128 v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  std::string::size_type v248;
  _BYTE *v249;
  std::string *v250;
  std::string *v251;
  __int128 v252;
  const std::string::value_type *v253;
  std::string::size_type v254;
  std::string *v255;
  __int128 v256;
  ZinIrOpLayer *Pool;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  _BYTE *v265;
  _BYTE *v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  int64x2_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  int64x2_t v280;
  char *v281;
  char *v282;
  char *v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  _QWORD *v287;
  ZinIrOpLayer *v288;
  int v289;
  _BOOL4 v290;
  int v291;
  std::string::size_type v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  uint64_t v301;
  char *i8;
  uint64_t v303;
  uint64_t v304;
  int64x2_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  char *v309;
  int64x2_t *v310;
  int64x2_t v311;
  int64x2_t *v312;
  char *v313;
  int64x2_t *v314;
  int64x2_t v315;
  int64x2_t v316;
  int64x2_t v317;
  __int128 v318;
  _QWORD *v319;
  ZinIrOpLayer *v320;
  int v321;
  _BOOL4 v322;
  uint64_t v323;
  uint64_t v324;
  ZinIrOpLayer *v325;
  _BOOL4 v326;
  int v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  _OWORD *v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  _OWORD *v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  _BOOL4 v340;
  int v341;
  char *v342;
  void *v343;
  int64_t v344;
  unint64_t v345;
  unint64_t v346;
  char *v347;
  ZinIrOpLayer **v348;
  char *v349;
  char *v350;
  ZinIrOpLayer *v351;
  unint64_t v352;
  ZinLargeStridePoolTransform *v353;
  void *v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  char *v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  int v365;
  _BOOL8 v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  void **v374;
  _BOOL8 v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  _BOOL8 v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  _BOOL8 v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  _BOOL8 v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  _BOOL8 v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _BOOL8 v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void **v423;
  _BOOL8 v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  void *v432;
  _BOOL8 v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  void *v442;
  ZinIrOpLayer *v443;
  int v444;
  _QWORD *v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  ZinIrOpLayerGraph *v453;
  unint64_t v454;
  _OWORD v456[2];
  int v457;
  ZinLargeStridePoolTransform *v458;
  _QWORD *v459;
  _QWORD *v460;
  uint64_t v461;
  uint64_t v462;
  void *v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  char v467;
  char v468[7];
  _QWORD *v469;
  char v470;
  char v471[15];
  void *v472;
  char *v473;
  char *v474;
  void *v475;
  void *v476;
  unint64_t v477;
  std::string v478;
  _QWORD v479[2];
  void *v480;
  void *v481;
  unint64_t v482;
  void *v483;
  void *v484;
  unint64_t v485;
  _BYTE __p[48];
  __int128 v487;
  __int128 v488;
  _BYTE v489[92];
  _BYTE v490[28];
  void *v491;
  _QWORD v492[2];
  __int16 v493;
  ZinIrOpLayerGraph *v494;
  _BYTE v495[32];
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  std::string v501;
  uint64_t v502;
  __int128 v503;
  __int128 v504;
  uint64_t v505;
  uint64_t v506;
  __int128 v507;
  __int128 v508;
  _BYTE v509[48];
  __int128 v510;
  __int128 v511;
  _BYTE v512[32];
  _BYTE v513[48];
  int v514;
  ZinIrOpLayer **v515;
  uint64_t v516;
  unint64_t v517;
  char v518;
  uint64_t v519;

  v519 = *MEMORY[0x24BDAC8D0];
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(a1 + 160));
  v461 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v462 = a1 + 176;
  v464 = 0;
  v465 = 0;
  v463 = 0;
  v466 = 0;
  v453 = (ZinIrOpLayerGraph *)a5;
  if ((*(_BYTE *)(*(_QWORD *)(a5 + 64) + 108) & 1) == 0)
  {
    if (*(char *)(a5 + 47) < 0)
      std::string::__init_copy_ctor_external(&v478, *(const std::string::value_type **)(a5 + 24), *(_QWORD *)(a5 + 32));
    else
      v478 = *(std::string *)(a5 + 24);
    if ((v478.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v478.__r_.__value_.__r.__words[2]);
    else
      size = v478.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)v509, size + 1);
    if (v509[23] >= 0)
      v11 = v509;
    else
      v11 = *(_BYTE **)v509;
    if (size)
    {
      if ((v478.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v478;
      else
        v12 = (std::string *)v478.__r_.__value_.__r.__words[0];
      memmove(v11, v12, size);
    }
    *(_WORD *)&v11[size] = 95;
    v13 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v515, "lstride_pool");
    v14 = std::string::append(v13, "_xfm", 4uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(_QWORD *)&v495[16] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)v495 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (v495[23] >= 0)
      v16 = v495;
    else
      v16 = *(const std::string::value_type **)v495;
    if (v495[23] >= 0)
      v17 = v495[23];
    else
      v17 = *(_QWORD *)&v495[8];
    v18 = std::string::append((std::string *)v509, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v501, __p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v495[23] & 0x80000000) != 0)
      operator delete(*(void **)v495);
    if (SHIBYTE(v517) < 0)
      operator delete(v515);
    if ((v509[23] & 0x80000000) != 0)
      operator delete(*(void **)v509);
    v446 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a5 + 32))(a5, 0, 0) + 88);
    std::string::operator=(&v478, (const std::string *)(a5 + 24));
    PadLayer = **(ZinIrOpLayer ***)(a5 + 88);
    v476 = 0;
    v475 = 0;
    v477 = 0;
    v472 = 0;
    v473 = 0;
    v474 = 0;
    v21 = *a3;
    if (a3[1] == *a3)
    {
      v27 = 1;
LABEL_460:
      memset(v456, 0, sizeof(v456));
      v457 = 1065353216;
      v363 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, (uint64_t **)a5, PadLayer, v456);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v456);
      if ((v27 & v363 & ZinIrOpLayerGraph::RemoveNode(a2, (ZinIrOpLayer *)a5, 0)) != 0)
        v364 = 0;
      else
        v364 = 3;
      goto LABEL_488;
    }
    v445 = a4;
    v22 = 0;
    v23 = 0;
    v447 = 0;
    v448 = 0;
    v450 = 0;
    v24 = (uint64_t)PadLayer;
    v25 = 1;
    while (1)
    {
      v26 = *(_DWORD *)(v21 + 344 * v22);
      v27 = (v23 != 8) & v25;
      v454 = v22;
      if (v26 <= 16)
        break;
      if (v26 == 17)
      {
        v111 = v21 + 344 * v22;
        v112 = v111 + 8;
        *(_QWORD *)v495 = off_24C017CA0;
        if (*(char *)(v111 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v495[8], *(const std::string::value_type **)(v111 + 16), *(_QWORD *)(v111 + 24));
        }
        else
        {
          v113 = *(_OWORD *)(v111 + 16);
          *(_QWORD *)&v495[24] = *(_QWORD *)(v111 + 32);
          *(_OWORD *)&v495[8] = v113;
        }
        LODWORD(v496) = *(_DWORD *)(v112 + 32);
        v497 = 0uLL;
        *((_QWORD *)&v496 + 1) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)&v496 + 8), *(__int128 **)(v112 + 40), *(__int128 **)(v112 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v112 + 48) - *(_QWORD *)(v112 + 40)) >> 3));
        v498 = *(_OWORD *)(v112 + 64);
        *(_QWORD *)v495 = off_24C021970;
        v499 = *(_OWORD *)(v112 + 80);
        if (v23 <= 6)
        {
          if (((1 << v23) & 0x67) != 0)
          {
            v23 = 3;
LABEL_169:
            if (v23 == 3)
              PadLayer = (ZinIrOpLayer *)v448;
            else
              PadLayer = (ZinIrOpLayer *)v447;
            if (!PadLayer)
            {
              v374 = (void **)v495;
              goto LABEL_486;
            }
            v179 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PadLayer + 32))(PadLayer, 0, 0);
            ViewFromOffset = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(a1, (uint64_t)&v501, v179, SHIDWORD(v499), v499, SDWORD1(v499));
            v181 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PadLayer + 32))(PadLayer, 0, 0);
            Interleave = ZinIrTensor::GetInterleave(v181);
            v184 = v183;
            v185 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PadLayer + 32))(PadLayer, 0, 0)+ 88);
            v186 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PadLayer + 32))(PadLayer, 0, 0);
            if (v184)
              v187 = Interleave;
            else
              v187 = 1;
            *(_DWORD *)v509 = v185;
            v188 = *(_OWORD *)(v186 + 64);
            *(_OWORD *)&v509[8] = *(_OWORD *)(v186 + 48);
            *(_OWORD *)&v509[24] = v188;
            *(_QWORD *)&v509[40] = *(_QWORD *)(v186 + 80);
            LOWORD(v510) = 0;
            *((_QWORD *)&v510 + 1) = v187;
            *(_QWORD *)&v511 = 1;
            BYTE8(v511) = 0;
            v512[12] = 0;
            *(_DWORD *)v513 = 0;
            *(_OWORD *)&v512[16] = 0uLL;
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(__p, &v461, *a3 + 344 * v454 + 8, v509);
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)__p);
            if (*(_QWORD *)&__p[24])
              ZinAssertImpl("Error: View validation failed.");
            v480 = (void *)a5;
            v483 = &v480;
            v484 = (void *)1;
            Layer2TDMapper::SourceLayer::SourceLayer(&v515, &v483);
            v189 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, ViewFromOffset, &v515);
            v515 = (ZinIrOpLayer **)&unk_24C02BB18;
            if (v516)
            {
              v517 = v516;
              operator delete((void *)v516);
            }
            if (v23 == 3)
            {
              v190 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v448, (uint64_t)ViewFromOffset, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              v447 = (uint64_t)ViewFromOffset;
            }
            else
            {
              v190 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v447, (uint64_t)ViewFromOffset, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              v450 = (uint64_t)ViewFromOffset;
            }
            v27 &= v190 & v189;
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)__p);
            ZinIrUnitInfo::~ZinIrUnitInfo((void **)v495);
            goto LABEL_284;
          }
          if (v23 == 3)
          {
            v23 = 4;
            goto LABEL_169;
          }
        }
        v27 = 0;
        goto LABEL_169;
      }
      if (v26 == 44)
      {
        v90 = v23 == 0;
        v91 = v21 + 344 * v22 + 8;
        ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)__p, (const ZinIrTextureUnitInfo *)v91);
        *(_QWORD *)__p = &off_24C01BAC0;
        v92 = *(_OWORD *)(v91 + 156);
        v93 = *(_OWORD *)(v91 + 172);
        *(_QWORD *)&v490[16] = *(_QWORD *)(v91 + 188);
        *(_OWORD *)&v489[76] = v92;
        *(_OWORD *)v490 = v93;
        v492[0] = 0;
        v492[1] = 0;
        v491 = 0;
        std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v491, *(const void **)(v91 + 200), *(_QWORD *)(v91 + 208), (uint64_t)(*(_QWORD *)(v91 + 208) - *(_QWORD *)(v91 + 200)) >> 3);
        v493 = *(_WORD *)(v91 + 224);
        v94 = *v445 + 40 * v454;
        v95 = *(_QWORD *)(v94 + 32);
        v96 = *(_OWORD *)v94;
        *(_OWORD *)&v495[16] = *(_OWORD *)(v94 + 16);
        *(_OWORD *)v495 = v96;
        *(_QWORD *)&v496 = v95 + *(int *)&v490[4] + (uint64_t)*(int *)v490;
        v97 = vadd_s32(*(int32x2_t *)&v489[80], (int32x2_t)__PAIR64__(*(unsigned int *)&v489[88], *(unsigned int *)&v489[76]));
        v98.i64[0] = v97.i32[0];
        v98.i64[1] = v97.i32[1];
        *(int64x2_t *)&v495[16] = vaddq_s64(*(int64x2_t *)&v495[16], (int64x2_t)vextq_s8(v98, v98, 8uLL));
        (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a5 + 88) + 80))(v509, **(_QWORD **)(a5 + 88), 0, 0);
        v99 = *v445 + 40 * v454;
        v100 = *(_QWORD *)(v99 + 32);
        v101 = *(_OWORD *)(v99 + 16);
        *(_OWORD *)&v509[8] = *(_OWORD *)v99;
        *(_OWORD *)&v509[24] = v101;
        *(_QWORD *)&v509[40] = v100;
        v102 = operator new(0x78uLL);
        v516 = (uint64_t)v102 + 120;
        v517 = (unint64_t)v102 + 120;
        v103 = *(_OWORD *)v512;
        v102[4] = v511;
        v102[5] = v103;
        v102[6] = *(_OWORD *)&v512[16];
        *((_DWORD *)v102 + 28) = *(_DWORD *)v513;
        v104 = *(_OWORD *)&v509[16];
        *v102 = *(_OWORD *)v509;
        v102[1] = v104;
        v105 = v510;
        v102[2] = *(_OWORD *)&v509[32];
        v102[3] = v105;
        v515 = (ZinIrOpLayer **)v102;
        PadLayer = (ZinIrOpLayer *)ZinBuilder::CreatePadLayer(a1, (uint64_t)&v501, (uint64_t)&v515, (__int128 *)v495, v446, (const ZinIrPadUnitInfo *)__p);
        if (v515)
        {
          v516 = (uint64_t)v515;
          operator delete(v515);
        }
        v480 = (void *)a5;
        v483 = &v480;
        v484 = (void *)1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v515, &v483);
        v106 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, PadLayer, &v515);
        v515 = (ZinIrOpLayer **)&unk_24C02BB18;
        if (v516)
        {
          v517 = v516;
          operator delete((void *)v516);
        }
        v107 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, **(_QWORD **)(a5 + 88), (uint64_t)PadLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        *(_QWORD *)__p = &off_24C01BAC0;
        if (v491)
        {
          v492[0] = v491;
          operator delete(v491);
        }
        v27 = v90 & v25 & v106 & v107;
        ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)__p);
        v23 = 1;
        goto LABEL_284;
      }
      if (v26 != 21)
        goto LABEL_467;
      if (v23 <= 7 && ((1 << v23) & 0x83) != 0)
      {
        memset(v495, 0, 24);
        v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v495[16], 1uLL);
        *v29 = 0x200000004;
        v30 = v29 + 1;
        v31 = *(char **)&v495[8];
        v32 = *(char **)v495;
        v33 = v29;
        if (*(_QWORD *)&v495[8] != *(_QWORD *)v495)
        {
          do
          {
            v34 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v33 = v34;
          }
          while (v31 != v32);
          v31 = *(char **)v495;
        }
        v35 = &v29[v28];
        *(_QWORD *)v495 = v33;
        *(_QWORD *)&v495[8] = v29 + 1;
        *(_QWORD *)&v495[16] = v35;
        if (v31)
        {
          operator delete(v31);
          v35 = *(_QWORD **)&v495[16];
        }
        *(_QWORD *)&v495[8] = v29 + 1;
        if (v30 >= v35)
        {
          v191 = ((uint64_t)v30 - *(_QWORD *)v495) >> 3;
          if ((unint64_t)(v191 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v192 = (uint64_t)v35 - *(_QWORD *)v495;
          v193 = v192 >> 2;
          if (v192 >> 2 <= (unint64_t)(v191 + 1))
            v193 = v191 + 1;
          if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
            v194 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v194 = v193;
          if (v194)
            v195 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v495[16], v194);
          else
            v195 = 0;
          v228 = &v195[8 * v191];
          *(_QWORD *)v228 = 0x400000002;
          v36 = v228 + 8;
          v229 = *(char **)&v495[8];
          v230 = *(char **)v495;
          if (*(_QWORD *)&v495[8] != *(_QWORD *)v495)
          {
            do
            {
              v231 = *((_QWORD *)v229 - 1);
              v229 -= 8;
              *((_QWORD *)v228 - 1) = v231;
              v228 -= 8;
            }
            while (v229 != v230);
            v229 = *(char **)v495;
          }
          *(_QWORD *)v495 = v228;
          *(_QWORD *)&v495[8] = v36;
          *(_QWORD *)&v495[16] = &v195[8 * v194];
          if (v229)
            operator delete(v229);
        }
        else
        {
          v29[1] = 0x400000002;
          v36 = v29 + 2;
        }
        *(_QWORD *)&v495[8] = v36;
        PadLayer = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(a1, (uint64_t)&v501, *v445 + 40 * v454, v446, (uint64_t)v495);
        v515 = (ZinIrOpLayer **)a5;
        *(_QWORD *)v509 = &v515;
        *(_QWORD *)&v509[8] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, v509);
        v232 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, PadLayer, (ZinIrOpLayer ***)__p);
        *(_QWORD *)__p = &unk_24C02BB18;
        if (*(_QWORD *)&__p[8])
        {
          *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
          operator delete(*(void **)&__p[8]);
        }
        if (v23)
        {
          v233 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v24, (uint64_t)PadLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v234 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0, 0);
          v235 = ZinIrTensor::GetInterleave((ZinIrTensor *)v234);
          if (v236)
            v237 = v235;
          else
            v237 = 1;
          *(_DWORD *)v509 = *(_DWORD *)(v234 + 88);
          v238 = *(_OWORD *)(v234 + 64);
          *(_OWORD *)&v509[8] = *(_OWORD *)(v234 + 48);
          *(_OWORD *)&v509[24] = v238;
          *(_QWORD *)&v509[40] = *(_QWORD *)(v234 + 80);
          LOWORD(v510) = 0;
          *((_QWORD *)&v510 + 1) = v237;
          *(_QWORD *)&v511 = 1;
          BYTE8(v511) = 0;
          v512[12] = 0;
          *(_DWORD *)v513 = 0;
          *(_OWORD *)&v512[16] = 0uLL;
          ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::ZinTransposeValidator(__p, &v461, *a3 + 344 * v454 + 8, v509);
          ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)__p);
          if (*(_QWORD *)&__p[24])
            ZinAssertImpl("Error: Transpose validation failed.");
        }
        else
        {
          v233 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, **(_QWORD **)(a5 + 88), (uint64_t)PadLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v239 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a5 + 88) + 32))(**(_QWORD **)(a5 + 88), 0, 0);
          v240 = ZinIrTensor::GetInterleave((ZinIrTensor *)v239);
          if (v241)
            v242 = v240;
          else
            v242 = 1;
          *(_DWORD *)v509 = *(_DWORD *)(v239 + 88);
          v243 = *(_OWORD *)(v239 + 64);
          *(_OWORD *)&v509[8] = *(_OWORD *)(v239 + 48);
          *(_OWORD *)&v509[24] = v243;
          *(_QWORD *)&v509[40] = *(_QWORD *)(v239 + 80);
          LOWORD(v510) = 0;
          *((_QWORD *)&v510 + 1) = v242;
          *(_QWORD *)&v511 = 1;
          BYTE8(v511) = 0;
          v512[12] = 0;
          *(_DWORD *)v513 = 0;
          *(_OWORD *)&v512[16] = 0uLL;
          ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::ZinTransposeValidator(__p, &v461, *a3 + 344 * v454 + 8, v509);
          ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)__p);
          if (*(_QWORD *)&__p[24])
            ZinAssertImpl("Error: Transpose validation failed.");
        }
        ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::~ZinTransposeValidator((uint64_t)__p);
        if (v23 >= 2)
          v23 = 8;
        else
          v23 = 2;
        if (*(_QWORD *)v495)
        {
          *(_QWORD *)&v495[8] = *(_QWORD *)v495;
          operator delete(*(void **)v495);
        }
        v27 &= v233 & v232;
        v448 = (uint64_t)PadLayer;
LABEL_284:
        v22 = v454;
        goto LABEL_285;
      }
      PadLayer = (ZinIrOpLayer *)v24;
LABEL_285:
      ++v22;
      v21 = *a3;
      v25 = v27;
      v24 = (uint64_t)PadLayer;
      if (0x82FA0BE82FA0BE83 * ((a3[1] - *a3) >> 3) <= v22)
        goto LABEL_460;
    }
    if (v26 != 2)
    {
      if (v26 != 3)
      {
LABEL_467:
        v366 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v366)
          ZinPoolLayer::Lower(v366, v367, v368, v369, v370, v371, v372, v373);
LABEL_487:
        v364 = 3;
LABEL_488:
        if (v472)
        {
          v473 = (char *)v472;
          operator delete(v472);
        }
        if (v475)
        {
          v476 = v475;
          operator delete(v475);
        }
        v501.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
        if (SHIBYTE(v502) < 0)
        {
          v432 = (void *)v501.__r_.__value_.__l.__size_;
          goto LABEL_505;
        }
        goto LABEL_506;
      }
      if (v24)
        v37 = v23 - 5 >= 2;
      else
        v37 = 1;
      if (v37)
        v38 = 0;
      else
        v38 = (v23 != 8) & v25;
      v444 = v38;
      if (v23 == 5)
      {
        v39 = v476;
        v40 = v475;
        v41 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v475 + 32))(*(_QWORD *)v475, 0, 0);
        v42 = *(_OWORD *)(v41 + 64);
        *(_OWORD *)v509 = *(_OWORD *)(v41 + 48);
        *(_OWORD *)&v509[16] = v42;
        *(_QWORD *)&v509[32] = *(_QWORD *)(v41 + 80);
        v515 = 0;
        v516 = 0;
        v517 = 0;
        v43 = (v39 - v40) << 29;
        v44 = (int)((v39 - v40) >> 3);
        if (v43 >= 1)
        {
          v45 = 0;
          v46 = 0;
          if (v44 <= 1)
            v47 = 1;
          else
            v47 = v44;
          do
          {
            *(_QWORD *)&__p[8] = 0;
            *(_QWORD *)__p = 0;
            if ((unint64_t)v45 >= v517)
            {
              v49 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v515) >> 4);
              v50 = v49 + 1;
              if (v49 + 1 > 0x333333333333333)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((uint64_t)(v517 - (_QWORD)v515) >> 4) > v50)
                v50 = 0x999999999999999ALL * ((uint64_t)(v517 - (_QWORD)v515) >> 4);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v517 - (_QWORD)v515) >> 4) >= 0x199999999999999)
                v51 = 0x333333333333333;
              else
                v51 = v50;
              if (v51)
                v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v517, v51);
              else
                v52 = 0;
              v53 = &v52[80 * v49];
              *(_QWORD *)v53 = 0;
              *((_QWORD *)v53 + 1) = 0;
              *((_QWORD *)v53 + 3) = 0;
              *((_QWORD *)v53 + 4) = 0;
              *((_QWORD *)v53 + 2) = v46;
              v54 = vdupq_n_s64(1uLL);
              *(int64x2_t *)(v53 + 40) = v54;
              *(int64x2_t *)(v53 + 56) = v54;
              *((_QWORD *)v53 + 9) = 1;
              v56 = v515;
              v55 = (ZinIrOpLayer **)v516;
              v57 = (ZinIrOpLayer **)v53;
              if ((ZinIrOpLayer **)v516 != v515)
              {
                do
                {
                  *((_OWORD *)v57 - 5) = *((_OWORD *)v55 - 5);
                  v58 = *((_OWORD *)v55 - 4);
                  v59 = *((_OWORD *)v55 - 3);
                  v60 = *((_OWORD *)v55 - 1);
                  *((_OWORD *)v57 - 2) = *((_OWORD *)v55 - 2);
                  *((_OWORD *)v57 - 1) = v60;
                  *((_OWORD *)v57 - 4) = v58;
                  *((_OWORD *)v57 - 3) = v59;
                  v57 -= 10;
                  v55 -= 10;
                }
                while (v55 != v56);
                v55 = v56;
              }
              v45 = v53 + 80;
              v515 = v57;
              v516 = (uint64_t)(v53 + 80);
              v517 = (unint64_t)&v52[80 * v51];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_QWORD *)v45 = 0;
              *((_QWORD *)v45 + 1) = 0;
              *((_QWORD *)v45 + 2) = v46;
              *(_OWORD *)(v45 + 24) = *(_OWORD *)__p;
              v48 = vdupq_n_s64(1uLL);
              *(int64x2_t *)(v45 + 40) = v48;
              *(int64x2_t *)(v45 + 56) = v48;
              *((_QWORD *)v45 + 9) = 1;
              v45 += 80;
            }
            v516 = (uint64_t)v45;
            ++v46;
          }
          while (v46 != v47);
        }
        *(_QWORD *)&v509[16] = v44;
        v460 = 0;
        ZinBuilder::CreateConcat(a1, (uint64_t)&v501, (__int128 *)v509, (_QWORD **)&v475, (uint64_t)&v515, 2, 1, &v460, &v483, 0);
        v61 = v460;
        v460 = 0;
        if (v61)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v460, v61);
        v481 = 0;
        v480 = 0;
        v482 = 0;
        v62 = v475;
        v63 = v476;
        if (v475 == v476)
        {
          v74 = 0;
          v89 = 0;
        }
        else
        {
          do
          {
            v64 = *v62;
            v65 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v62 + 32))(*v62, 0, 0);
            v66 = ZinIrTensor::GetInterleave(v65);
            v68 = v67;
            v69 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0, 0)+ 88);
            v70 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0, 0);
            if (v68)
              v71 = v66;
            else
              v71 = 1;
            v72 = *(_OWORD *)(v70 + 64);
            *(_OWORD *)&__p[4] = *(_OWORD *)(v70 + 48);
            *(_OWORD *)&__p[20] = v72;
            *(_QWORD *)&__p[36] = *(_QWORD *)(v70 + 80);
            memset(&v495[3], 0, 20);
            v73 = (char *)v481;
            if ((unint64_t)v481 >= v482)
            {
              v75 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)v481 - (_BYTE *)v480) >> 3);
              v76 = v75 + 1;
              if (v75 + 1 > 0x222222222222222)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v482 - (_QWORD)v480) >> 3) > v76)
                v76 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v482 - (_QWORD)v480) >> 3);
              if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v482 - (_QWORD)v480) >> 3) >= 0x111111111111111)
                v77 = 0x222222222222222;
              else
                v77 = v76;
              if (v77)
                v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>((uint64_t)&v482, v77);
              else
                v78 = 0;
              v79 = &v78[120 * v75];
              *(_DWORD *)v79 = v69;
              *(_OWORD *)(v79 + 4) = *(_OWORD *)__p;
              *(_OWORD *)(v79 + 20) = *(_OWORD *)&__p[16];
              *((_OWORD *)v79 + 2) = *(_OWORD *)&__p[28];
              *((_WORD *)v79 + 24) = 0;
              *((_QWORD *)v79 + 7) = v71;
              *((_QWORD *)v79 + 8) = 1;
              v79[72] = 0;
              v79[92] = 0;
              *(_OWORD *)(v79 + 93) = *(_OWORD *)v495;
              *(_QWORD *)(v79 + 108) = *(_QWORD *)&v495[15];
              v80 = (char *)v481;
              v81 = (char *)v480;
              v82 = v79;
              if (v481 != v480)
              {
                do
                {
                  v83 = *(_OWORD *)(v80 - 120);
                  v84 = *(_OWORD *)(v80 - 104);
                  v85 = *(_OWORD *)(v80 - 88);
                  *(_OWORD *)(v82 - 72) = *(_OWORD *)(v80 - 72);
                  *(_OWORD *)(v82 - 88) = v85;
                  *(_OWORD *)(v82 - 104) = v84;
                  *(_OWORD *)(v82 - 120) = v83;
                  v86 = *(_OWORD *)(v80 - 56);
                  v87 = *(_OWORD *)(v80 - 40);
                  v88 = *(_OWORD *)(v80 - 24);
                  *((_DWORD *)v82 - 2) = *((_DWORD *)v80 - 2);
                  *(_OWORD *)(v82 - 24) = v88;
                  *(_OWORD *)(v82 - 40) = v87;
                  *(_OWORD *)(v82 - 56) = v86;
                  v82 -= 120;
                  v80 -= 120;
                }
                while (v80 != v81);
                v80 = v81;
              }
              v74 = v79 + 120;
              v480 = v82;
              v481 = v79 + 120;
              v482 = (unint64_t)&v78[120 * v77];
              if (v80)
                operator delete(v80);
            }
            else
            {
              *(_DWORD *)v481 = v69;
              *(_OWORD *)(v73 + 4) = *(_OWORD *)__p;
              *(_OWORD *)(v73 + 20) = *(_OWORD *)&__p[16];
              *((_OWORD *)v73 + 2) = *(_OWORD *)&__p[28];
              *((_WORD *)v73 + 24) = 0;
              *((_QWORD *)v73 + 7) = v71;
              *((_QWORD *)v73 + 8) = 1;
              v73[72] = 0;
              v73[92] = 0;
              *(_OWORD *)(v73 + 93) = *(_OWORD *)v495;
              *(_QWORD *)(v73 + 108) = *(_QWORD *)&v495[15];
              v74 = v73 + 120;
            }
            v481 = v74;
            ++v62;
          }
          while (v62 != v63);
          v89 = v480;
        }
        ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)__p, (uint64_t)&v461, *a3 + 344 * v454 + 8, v89, 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)v74 - (_BYTE *)v89) >> 3));
        ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)__p);
        if (*(_QWORD *)&__p[24])
          ZinAssertImpl("Error: Concat validation failed.");
        v208 = (ZinIrOpLayer *)*((_QWORD *)v484 - 1);
        v494 = (ZinIrOpLayerGraph *)a5;
        v479[0] = &v494;
        v479[1] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(v495, v479);
        v209 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v208, (ZinIrOpLayer ***)v495);
        *(_QWORD *)v495 = &unk_24C02BB18;
        if (*(_QWORD *)&v495[8])
        {
          *(_QWORD *)&v495[16] = *(_QWORD *)&v495[8];
          operator delete(*(void **)&v495[8]);
        }
        v210 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)&v475, *((_QWORD *)v484 - 1));
        v476 = v475;
        v211 = v484;
        v212 = v473;
        if (v473 >= v474)
        {
          v214 = (v473 - (_BYTE *)v472) >> 3;
          if ((unint64_t)(v214 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v215 = (v474 - (_BYTE *)v472) >> 2;
          if (v215 <= v214 + 1)
            v215 = v214 + 1;
          if ((unint64_t)(v474 - (_BYTE *)v472) >= 0x7FFFFFFFFFFFFFF8)
            v216 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v216 = v215;
          if (v216)
            v217 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v474, v216);
          else
            v217 = 0;
          v244 = &v217[8 * v214];
          *(_QWORD *)v244 = *(v211 - 1);
          v213 = v244 + 8;
          v246 = (char *)v472;
          v245 = v473;
          if (v473 != v472)
          {
            do
            {
              v247 = *((_QWORD *)v245 - 1);
              v245 -= 8;
              *((_QWORD *)v244 - 1) = v247;
              v244 -= 8;
            }
            while (v245 != v246);
            v245 = (char *)v472;
          }
          v472 = v244;
          v473 = v213;
          v474 = &v217[8 * v216];
          if (v245)
            operator delete(v245);
        }
        else
        {
          *(_QWORD *)v473 = *((_QWORD *)v484 - 1);
          v213 = v212 + 8;
        }
        v473 = v213;
        ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)__p);
        if (v480)
        {
          v481 = v480;
          operator delete(v480);
        }
        if (v483)
        {
          v484 = v483;
          operator delete(v483);
        }
        if (v515)
        {
          v516 = (uint64_t)v515;
          operator delete(v515);
        }
        v27 = v444 & v209 & v210;
        v23 = 6;
        PadLayer = (ZinIrOpLayer *)v24;
      }
      else
      {
        v114 = v473 - (_BYTE *)v472;
        if (v473 == v472)
          ZinAssertImpl("Error: concat2_input size is 0");
        v115 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v472 + 32))(*(_QWORD *)v472, 0, 0);
        v116 = *(_OWORD *)(v115 + 64);
        *(_OWORD *)v509 = *(_OWORD *)(v115 + 48);
        *(_OWORD *)&v509[16] = v116;
        *(_QWORD *)&v509[32] = *(_QWORD *)(v115 + 80);
        v515 = 0;
        v516 = 0;
        v517 = 0;
        v117 = v114 << 29;
        v118 = (int)(v114 >> 3);
        if (v117 >= 1)
        {
          v119 = 0;
          v120 = 0;
          if (v118 <= 1)
            v121 = 1;
          else
            v121 = v118;
          do
          {
            memset(__p, 0, 24);
            if ((unint64_t)v119 >= v517)
            {
              v124 = 0xCCCCCCCCCCCCCCCDLL * ((v119 - (char *)v515) >> 4);
              v125 = v124 + 1;
              if (v124 + 1 > 0x333333333333333)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((uint64_t)(v517 - (_QWORD)v515) >> 4) > v125)
                v125 = 0x999999999999999ALL * ((uint64_t)(v517 - (_QWORD)v515) >> 4);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v517 - (_QWORD)v515) >> 4) >= 0x199999999999999)
                v126 = 0x333333333333333;
              else
                v126 = v125;
              if (v126)
                v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v517, v126);
              else
                v127 = 0;
              v128 = &v127[80 * v124];
              *(_QWORD *)v128 = 0;
              *((_QWORD *)v128 + 1) = v120;
              *((_QWORD *)v128 + 3) = 0;
              *((_QWORD *)v128 + 4) = 0;
              *((_QWORD *)v128 + 2) = 0;
              v129 = vdupq_n_s64(1uLL);
              *(int64x2_t *)(v128 + 40) = v129;
              *(int64x2_t *)(v128 + 56) = v129;
              *((_QWORD *)v128 + 9) = 1;
              v131 = v515;
              v130 = (ZinIrOpLayer **)v516;
              v132 = (ZinIrOpLayer **)v128;
              if ((ZinIrOpLayer **)v516 != v515)
              {
                do
                {
                  *((_OWORD *)v132 - 5) = *((_OWORD *)v130 - 5);
                  v133 = *((_OWORD *)v130 - 4);
                  v134 = *((_OWORD *)v130 - 3);
                  v135 = *((_OWORD *)v130 - 1);
                  *((_OWORD *)v132 - 2) = *((_OWORD *)v130 - 2);
                  *((_OWORD *)v132 - 1) = v135;
                  *((_OWORD *)v132 - 4) = v133;
                  *((_OWORD *)v132 - 3) = v134;
                  v132 -= 10;
                  v130 -= 10;
                }
                while (v130 != v131);
                v130 = v131;
              }
              v119 = v128 + 80;
              v515 = v132;
              v516 = (uint64_t)(v128 + 80);
              v517 = (unint64_t)&v127[80 * v126];
              if (v130)
                operator delete(v130);
            }
            else
            {
              *(_QWORD *)v119 = 0;
              *((_QWORD *)v119 + 1) = v120;
              v122 = *(_QWORD *)&__p[16];
              *((_OWORD *)v119 + 1) = *(_OWORD *)__p;
              *((_QWORD *)v119 + 4) = v122;
              v123 = vdupq_n_s64(1uLL);
              *(int64x2_t *)(v119 + 40) = v123;
              *(int64x2_t *)(v119 + 56) = v123;
              *((_QWORD *)v119 + 9) = 1;
              v119 += 80;
            }
            v516 = (uint64_t)v119;
            ++v120;
          }
          while (v120 != v121);
        }
        *(_QWORD *)&v509[8] = v118;
        v459 = 0;
        ZinBuilder::CreateConcat(a1, (uint64_t)&v501, (__int128 *)v509, (_QWORD **)&v472, (uint64_t)&v515, 0, 1, &v459, (void **)__p, 0);
        v442 = *(void **)__p;
        v136 = *(_QWORD *)&__p[8];
        memset(__p, 0, 24);
        v137 = v459;
        v459 = 0;
        if (v137)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v459, v137);
        v484 = 0;
        v483 = 0;
        v485 = 0;
        v138 = (char *)v472;
        v139 = v473;
        if (v472 == v473)
        {
          v150 = 0;
          v165 = 0;
        }
        else
        {
          do
          {
            v140 = *(_QWORD *)v138;
            v141 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v138 + 32))(*(_QWORD *)v138, 0, 0);
            v142 = ZinIrTensor::GetInterleave(v141);
            v144 = v143;
            v145 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v140 + 32))(v140, 0, 0)+ 88);
            v146 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v140 + 32))(v140, 0, 0);
            if (v144)
              v147 = v142;
            else
              v147 = 1;
            v148 = *(_OWORD *)(v146 + 64);
            *(_OWORD *)&__p[4] = *(_OWORD *)(v146 + 48);
            *(_OWORD *)&__p[20] = v148;
            *(_QWORD *)&__p[36] = *(_QWORD *)(v146 + 80);
            memset(&v495[3], 0, 20);
            v149 = (char *)v484;
            if ((unint64_t)v484 >= v485)
            {
              v151 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)v484 - (_BYTE *)v483) >> 3);
              v152 = v151 + 1;
              if (v151 + 1 > 0x222222222222222)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v485 - (_QWORD)v483) >> 3) > v152)
                v152 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v485 - (_QWORD)v483) >> 3);
              if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v485 - (_QWORD)v483) >> 3) >= 0x111111111111111)
                v153 = 0x222222222222222;
              else
                v153 = v152;
              if (v153)
                v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>((uint64_t)&v485, v153);
              else
                v154 = 0;
              v155 = &v154[120 * v151];
              *(_DWORD *)v155 = v145;
              *(_OWORD *)(v155 + 4) = *(_OWORD *)__p;
              *(_OWORD *)(v155 + 20) = *(_OWORD *)&__p[16];
              *((_OWORD *)v155 + 2) = *(_OWORD *)&__p[28];
              *((_WORD *)v155 + 24) = 0;
              *((_QWORD *)v155 + 7) = v147;
              *((_QWORD *)v155 + 8) = 1;
              v155[72] = 0;
              v155[92] = 0;
              *(_OWORD *)(v155 + 93) = *(_OWORD *)v495;
              *(_QWORD *)(v155 + 108) = *(_QWORD *)&v495[15];
              v156 = (char *)v484;
              v157 = (char *)v483;
              v158 = v155;
              if (v484 != v483)
              {
                do
                {
                  v159 = *(_OWORD *)(v156 - 120);
                  v160 = *(_OWORD *)(v156 - 104);
                  v161 = *(_OWORD *)(v156 - 88);
                  *(_OWORD *)(v158 - 72) = *(_OWORD *)(v156 - 72);
                  *(_OWORD *)(v158 - 88) = v161;
                  *(_OWORD *)(v158 - 104) = v160;
                  *(_OWORD *)(v158 - 120) = v159;
                  v162 = *(_OWORD *)(v156 - 56);
                  v163 = *(_OWORD *)(v156 - 40);
                  v164 = *(_OWORD *)(v156 - 24);
                  *((_DWORD *)v158 - 2) = *((_DWORD *)v156 - 2);
                  *(_OWORD *)(v158 - 24) = v164;
                  *(_OWORD *)(v158 - 40) = v163;
                  *(_OWORD *)(v158 - 56) = v162;
                  v158 -= 120;
                  v156 -= 120;
                }
                while (v156 != v157);
                v156 = v157;
              }
              v150 = v155 + 120;
              v483 = v158;
              v484 = v155 + 120;
              v485 = (unint64_t)&v154[120 * v153];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *(_DWORD *)v484 = v145;
              *(_OWORD *)(v149 + 4) = *(_OWORD *)__p;
              *(_OWORD *)(v149 + 20) = *(_OWORD *)&__p[16];
              *((_OWORD *)v149 + 2) = *(_OWORD *)&__p[28];
              *((_WORD *)v149 + 24) = 0;
              *((_QWORD *)v149 + 7) = v147;
              *((_QWORD *)v149 + 8) = 1;
              v149[72] = 0;
              v149[92] = 0;
              *(_OWORD *)(v149 + 93) = *(_OWORD *)v495;
              *(_QWORD *)(v149 + 108) = *(_QWORD *)&v495[15];
              v150 = v149 + 120;
            }
            v484 = v150;
            v138 += 8;
          }
          while (v138 != v139);
          v165 = v483;
        }
        ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)__p, (uint64_t)&v461, *a3 + 344 * v454 + 8, v165, 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)v150 - (_BYTE *)v165) >> 3));
        ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)__p);
        if (*(_QWORD *)&__p[24])
          ZinAssertImpl("Error: Concat validation failed.");
        v218 = *(ZinIrOpLayer **)(v136 - 8);
        v479[0] = a5;
        v480 = v479;
        v481 = (void *)1;
        Layer2TDMapper::SourceLayer::SourceLayer(v495, &v480);
        v219 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v218, (ZinIrOpLayer ***)v495);
        *(_QWORD *)v495 = &unk_24C02BB18;
        if (*(_QWORD *)&v495[8])
        {
          *(_QWORD *)&v495[16] = *(_QWORD *)&v495[8];
          operator delete(*(void **)&v495[8]);
        }
        v220 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)&v472, *(_QWORD *)(v136 - 8));
        PadLayer = *(ZinIrOpLayer **)(v136 - 8);
        if (*(_BYTE *)(v462 + 492))
        {
          v221 = *(_QWORD *)ZinIrOpLayer::GetGroupId(*(ZinIrOpLayer **)(v136 - 8));
          v222 = (ZinLargeStridePoolTransform *)operator new();
          ZinLargeStridePoolTransform::ZinLargeStridePoolTransform(v222);
          v458 = v222;
          ZinIrContext::InsertShapeDependentTransform(a1, v221, (uint64_t *)&v458);
          v223 = (uint64_t)v458;
          v458 = 0;
          if (v223)
            (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
        }
        ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)__p);
        if (v483)
        {
          v484 = v483;
          operator delete(v483);
        }
        if (v442)
          operator delete(v442);
        if (v515)
        {
          v516 = (uint64_t)v515;
          operator delete(v515);
        }
        v27 = v444 & v219 & v220;
        v23 = 7;
      }
      goto LABEL_284;
    }
    v108 = v21 + 344 * v22;
    v109 = v108 + 8;
    *(_QWORD *)__p = off_24C017CA0;
    if (*(char *)(v108 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)(v108 + 16), *(_QWORD *)(v108 + 24));
    }
    else
    {
      v110 = *(_OWORD *)(v108 + 16);
      *(_QWORD *)&__p[24] = *(_QWORD *)(v108 + 32);
      *(_OWORD *)&__p[8] = v110;
    }
    *(_DWORD *)&__p[32] = *(_DWORD *)(v109 + 32);
    v487 = 0uLL;
    *(_QWORD *)&__p[40] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__p[40], *(__int128 **)(v109 + 40), *(__int128 **)(v109 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v109 + 48) - *(_QWORD *)(v109 + 40)) >> 3));
    v488 = *(_OWORD *)(v109 + 64);
    *(_QWORD *)__p = &unk_24C01CC78;
    v166 = *(_OWORD *)(v109 + 96);
    *(_OWORD *)v489 = *(_OWORD *)(v109 + 80);
    *(_OWORD *)&v489[16] = v166;
    v167 = *(_OWORD *)(v109 + 112);
    v168 = *(_OWORD *)(v109 + 128);
    v169 = *(_OWORD *)(v109 + 144);
    *(_DWORD *)&v489[80] = *(_DWORD *)(v109 + 160);
    *(_OWORD *)&v489[48] = v168;
    *(_OWORD *)&v489[64] = v169;
    *(_OWORD *)&v489[32] = v167;
    v170 = v23 == 4;
    if (!v450)
      goto LABEL_485;
    v171 = *(_OWORD **)(a5 + 64);
    v172 = v171[4];
    v173 = v171[5];
    v174 = v171[7];
    v499 = v171[6];
    v175 = v171[1];
    v176 = v171[2];
    v177 = v171[3];
    v500 = v174;
    v498 = v173;
    v496 = v177;
    v497 = v172;
    *(_OWORD *)&v495[16] = v176;
    *(_OWORD *)v495 = v175;
    if (DWORD2(v499))
    {
      if (DWORD2(v499) == 1)
      {
        v178 = 14;
      }
      else
      {
        if (DWORD2(v499) != 2)
        {
          v424 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v424)
            ZinConvPoolLargeStride::LargeStridePoolLower(v424, v425, v426, v427, v428, v429, v430, v431);
LABEL_485:
          v374 = (void **)__p;
LABEL_486:
          ZinIrUnitInfo::~ZinIrUnitInfo(v374);
          goto LABEL_487;
        }
        if (BYTE12(v499))
          goto LABEL_194;
        v178 = 12;
      }
    }
    else
    {
      v178 = 13;
    }
    DWORD2(v499) = v178;
LABEL_194:
    *(_OWORD *)v495 = *(_OWORD *)&v489[8];
    *(_OWORD *)&v495[16] = *(_OWORD *)&v489[24];
    LODWORD(v496) = *(_DWORD *)&v489[40];
    v497 = *(_OWORD *)&v489[44];
    *(_QWORD *)&v498 = *(_QWORD *)&v489[60];
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v450 + 80))(v509, v450, 0, 0);
    v196 = operator new(0x78uLL);
    v516 = (uint64_t)v196 + 120;
    v517 = (unint64_t)v196 + 120;
    v197 = *(_OWORD *)v512;
    v196[4] = v511;
    v196[5] = v197;
    v196[6] = *(_OWORD *)&v512[16];
    *((_DWORD *)v196 + 28) = *(_DWORD *)v513;
    v198 = *(_OWORD *)&v509[16];
    *v196 = *(_OWORD *)v509;
    v196[1] = v198;
    v199 = v510;
    v196[2] = *(_OWORD *)&v509[32];
    v196[3] = v199;
    v515 = (ZinIrOpLayer **)v196;
    PadLayer = (ZinIrOpLayer *)ZinBuilder::CreatePool(a1, (uint64_t)&v501, (uint64_t *)&v515, (uint64_t)v495, SDWORD1(v488));
    if (v515)
    {
      v516 = (uint64_t)v515;
      operator delete(v515);
    }
    v483 = (void *)a5;
    v515 = (ZinIrOpLayer **)&v483;
    v516 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v509, &v515);
    v200 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, PadLayer, (ZinIrOpLayer ***)v509);
    *(_QWORD *)v509 = &unk_24C02BB18;
    if (*(_QWORD *)&v509[8])
    {
      *(_QWORD *)&v509[16] = *(_QWORD *)&v509[8];
      operator delete(*(void **)&v509[8]);
    }
    v201 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v450, (uint64_t)PadLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v202 = (char *)v476;
    if ((unint64_t)v476 >= v477)
    {
      v204 = ((_BYTE *)v476 - (_BYTE *)v475) >> 3;
      if ((unint64_t)(v204 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v205 = (uint64_t)(v477 - (_QWORD)v475) >> 2;
      if (v205 <= v204 + 1)
        v205 = v204 + 1;
      if (v477 - (unint64_t)v475 >= 0x7FFFFFFFFFFFFFF8)
        v206 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v206 = v205;
      if (v206)
        v207 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v477, v206);
      else
        v207 = 0;
      v224 = (ZinIrOpLayer **)&v207[8 * v204];
      *v224 = PadLayer;
      v203 = v224 + 1;
      v225 = (char *)v476;
      v226 = (char *)v475;
      if (v476 != v475)
      {
        do
        {
          v227 = (ZinIrOpLayer *)*((_QWORD *)v225 - 1);
          v225 -= 8;
          *--v224 = v227;
        }
        while (v225 != v226);
        v225 = (char *)v475;
      }
      v475 = v224;
      v476 = v203;
      v477 = (unint64_t)&v207[8 * v206];
      if (v225)
        operator delete(v225);
    }
    else
    {
      *(_QWORD *)v476 = PadLayer;
      v203 = v202 + 8;
    }
    v476 = v203;
    v27 = v170 & v25 & v200 & v201;
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)__p);
    v23 = 5;
    goto LABEL_284;
  }
  v9 = ZinIrTarget::GetHal(*(ZinIrTarget **)(a1 + 160));
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if (*(char *)(a5 + 47) < 0)
    std::string::__init_copy_ctor_external(&v478, *(const std::string::value_type **)(a5 + 24), *(_QWORD *)(a5 + 32));
  else
    v478 = *(std::string *)(a5 + 24);
  if ((v478.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v248 = HIBYTE(v478.__r_.__value_.__r.__words[2]);
  else
    v248 = v478.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)v509, v248 + 1);
  if (v509[23] >= 0)
    v249 = v509;
  else
    v249 = *(_BYTE **)v509;
  if (v248)
  {
    if ((v478.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v250 = &v478;
    else
      v250 = (std::string *)v478.__r_.__value_.__r.__words[0];
    memmove(v249, v250, v248);
  }
  *(_WORD *)&v249[v248] = 95;
  std::string::basic_string[abi:ne180100]<0>(&v501, "lstride_pool_nsp");
  v251 = std::string::append(&v501, "_xfm", 4uLL);
  v252 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
  *(_QWORD *)&v495[16] = *((_QWORD *)&v251->__r_.__value_.__l + 2);
  *(_OWORD *)v495 = v252;
  v251->__r_.__value_.__l.__size_ = 0;
  v251->__r_.__value_.__r.__words[2] = 0;
  v251->__r_.__value_.__r.__words[0] = 0;
  if (v495[23] >= 0)
    v253 = v495;
  else
    v253 = *(const std::string::value_type **)v495;
  if (v495[23] >= 0)
    v254 = v495[23];
  else
    v254 = *(_QWORD *)&v495[8];
  v255 = std::string::append((std::string *)v509, v253, v254);
  v256 = *(_OWORD *)&v255->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v255->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v256;
  v255->__r_.__value_.__l.__size_ = 0;
  v255->__r_.__value_.__r.__words[2] = 0;
  v255->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(&v515, __p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v495[23] & 0x80000000) != 0)
    operator delete(*(void **)v495);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
  if ((v509[23] & 0x80000000) != 0)
    operator delete(*(void **)v509);
  Pool = **(ZinIrOpLayer ***)(a5 + 88);
  v476 = 0;
  v475 = 0;
  v477 = 0;
  v472 = 0;
  v473 = 0;
  v474 = 0;
  v258 = *a3;
  if (a3[1] == *a3)
  {
    v451 = 1;
LABEL_464:
    memset(__p, 0, 32);
    *(_DWORD *)&__p[32] = 1065353216;
    v365 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, (uint64_t **)v453, Pool, __p);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)__p);
    if ((v451 & v365 & ZinIrOpLayerGraph::RemoveNode(a2, v453, 0)) != 0)
      v364 = 0;
    else
      v364 = 3;
    goto LABEL_499;
  }
  v259 = 0;
  v260 = 0;
  v443 = 0;
  v449 = 0;
  v451 = 1;
  while (1)
  {
    v261 = *(_DWORD *)(v258 + 344 * v259);
    if (v261 == 2)
    {
      v295 = v258 + 344 * v259;
      v296 = v295 + 8;
      *(_QWORD *)v509 = off_24C017CA0;
      if (*(char *)(v295 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v509[8], *(const std::string::value_type **)(v295 + 16), *(_QWORD *)(v295 + 24));
      }
      else
      {
        v297 = *(_OWORD *)(v295 + 16);
        *(_QWORD *)&v509[24] = *(_QWORD *)(v295 + 32);
        *(_OWORD *)&v509[8] = v297;
      }
      *(_DWORD *)&v509[32] = *(_DWORD *)(v296 + 32);
      v510 = 0uLL;
      *(_QWORD *)&v509[40] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v509[40], *(__int128 **)(v296 + 40), *(__int128 **)(v296 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v296 + 48) - *(_QWORD *)(v296 + 40)) >> 3));
      v511 = *(_OWORD *)(v296 + 64);
      *(_QWORD *)v509 = &unk_24C01CC78;
      v328 = *(_OWORD *)(v296 + 96);
      *(_OWORD *)v512 = *(_OWORD *)(v296 + 80);
      *(_OWORD *)&v512[16] = v328;
      v329 = *(_OWORD *)(v296 + 112);
      v330 = *(_OWORD *)(v296 + 128);
      v331 = *(_OWORD *)(v296 + 144);
      v514 = *(_DWORD *)(v296 + 160);
      *(_OWORD *)&v513[16] = v330;
      *(_OWORD *)&v513[32] = v331;
      *(_OWORD *)v513 = v329;
      if ((_DWORD)v260 != 2)
      {
        v391 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v391)
          ZinConvPoolLargeStride::LargeStridePoolLower(v391, v392, v393, v394, v395, v396, v397, v398);
LABEL_482:
        v423 = (void **)v509;
LABEL_497:
        ZinIrUnitInfo::~ZinIrUnitInfo(v423);
        goto LABEL_498;
      }
      if (!v449)
      {
        v415 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v415)
          ZinConvPoolLargeStride::LargeStridePoolLower(v415, v416, v417, v418, v419, v420, v421, v422);
        goto LABEL_482;
      }
      v332 = (_OWORD *)*((_QWORD *)v453 + 8);
      v333 = v332[3];
      v334 = v332[5];
      v335 = v332[6];
      v508 = v332[7];
      v507 = v335;
      v506 = *((_QWORD *)&v334 + 1);
      v503 = v333;
      v501 = *(std::string *)&v512[8];
      LODWORD(v503) = *(_DWORD *)&v513[8];
      v502 = *(_QWORD *)v513;
      v504 = *(_OWORD *)&v513[12];
      v505 = *(_QWORD *)&v513[28];
      BYTE12(v507) = v513[36];
      (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v449 + 80))(__p, v449, 0, 0);
      v336 = operator new(0x78uLL);
      *(_QWORD *)&v495[16] = (char *)v336 + 120;
      v337 = *(_OWORD *)v489;
      v336[4] = v488;
      v336[5] = v337;
      v336[6] = *(_OWORD *)&v489[16];
      *((_DWORD *)v336 + 28) = *(_DWORD *)&v489[32];
      v338 = *(_OWORD *)&__p[16];
      *v336 = *(_OWORD *)__p;
      v336[1] = v338;
      v339 = v487;
      v336[2] = *(_OWORD *)&__p[32];
      v336[3] = v339;
      *(_QWORD *)v495 = v336;
      *(_QWORD *)&v495[8] = (char *)v336 + 120;
      Pool = (ZinIrOpLayer *)ZinBuilder::CreatePool(a1, (uint64_t)&v515, (uint64_t *)v495, (uint64_t)&v501, SDWORD1(v511));
      if (*(_QWORD *)v495)
      {
        *(_QWORD *)&v495[8] = *(_QWORD *)v495;
        operator delete(*(void **)v495);
      }
      v483 = v453;
      *(_QWORD *)v495 = &v483;
      *(_QWORD *)&v495[8] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, v495);
      v340 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, Pool, (ZinIrOpLayer ***)__p);
      *(_QWORD *)__p = &unk_24C02BB18;
      if (*(_QWORD *)&__p[8])
      {
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      v341 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v449, (uint64_t)Pool, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v342 = (char *)v476;
      if ((unint64_t)v476 >= v477)
      {
        v344 = ((_BYTE *)v476 - (_BYTE *)v475) >> 3;
        if ((unint64_t)(v344 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v345 = (uint64_t)(v477 - (_QWORD)v475) >> 2;
        if (v345 <= v344 + 1)
          v345 = v344 + 1;
        if (v477 - (unint64_t)v475 >= 0x7FFFFFFFFFFFFFF8)
          v346 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v346 = v345;
        if (v346)
          v347 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v477, v346);
        else
          v347 = 0;
        v348 = (ZinIrOpLayer **)&v347[8 * v344];
        *v348 = Pool;
        v343 = v348 + 1;
        v349 = (char *)v476;
        v350 = (char *)v475;
        if (v476 != v475)
        {
          do
          {
            v351 = (ZinIrOpLayer *)*((_QWORD *)v349 - 1);
            v349 -= 8;
            *--v348 = v351;
          }
          while (v349 != v350);
          v349 = (char *)v475;
        }
        v475 = v348;
        v476 = v343;
        v477 = (unint64_t)&v347[8 * v346];
        if (v349)
          operator delete(v349);
      }
      else
      {
        *(_QWORD *)v476 = Pool;
        v343 = v342 + 8;
      }
      v476 = v343;
      if (*(_BYTE *)(a1 + 668))
      {
        ZinMirPoolUtils::PoolParamsToPoolUnitInfo(*((_QWORD *)v453 + 8) + 16, (uint64_t)v495);
        ZinLargeStridePoolTransform::ZinLargeStridePoolTransform((ZinLargeStridePoolTransform *)__p, 1, (const ZinIrPoolUnitInfo *)v495);
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)v495);
        v352 = *(_QWORD *)ZinIrOpLayer::GetGroupId(Pool);
        v353 = (ZinLargeStridePoolTransform *)operator new();
        ZinLargeStridePoolTransform::ZinLargeStridePoolTransform(v353, (const ZinLargeStridePoolTransform *)__p);
        v480 = v353;
        ZinIrContext::InsertShapeDependentTransform(a1, v352, (uint64_t *)&v480);
        v354 = v480;
        v480 = 0;
        if (v354)
          (*(void (**)(void *))(*(_QWORD *)v354 + 8))(v354);
        *(_QWORD *)__p = off_24C0244E8;
        *(_QWORD *)v495 = v492;
        std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)v495);
        if (*(_QWORD *)&v490[12])
        {
          *(_QWORD *)&v490[20] = *(_QWORD *)&v490[12];
          operator delete(*(void **)&v490[12]);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&__p[8]);
      }
      v451 &= v340 & v341;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)v509);
      v323 = 3;
      goto LABEL_457;
    }
    if (v261 == 3)
      break;
    if (v261 != 17)
    {
      v375 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v375)
        ZinPoolLayer::Lower(v375, v376, v377, v378, v379, v380, v381, v382);
      goto LABEL_498;
    }
    v262 = v258 + 344 * v259;
    v263 = v262 + 8;
    *(_QWORD *)__p = off_24C017CA0;
    if (*(char *)(v262 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)(v262 + 16), *(_QWORD *)(v262 + 24));
    }
    else
    {
      v264 = *(_OWORD *)(v262 + 16);
      *(_QWORD *)&__p[24] = *(_QWORD *)(v262 + 32);
      *(_OWORD *)&__p[8] = v264;
    }
    *(_DWORD *)&__p[32] = *(_DWORD *)(v263 + 32);
    v487 = 0uLL;
    *(_QWORD *)&__p[40] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__p[40], *(__int128 **)(v263 + 40), *(__int128 **)(v263 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v263 + 48) - *(_QWORD *)(v263 + 40)) >> 3));
    v488 = *(_OWORD *)(v263 + 64);
    *(_QWORD *)__p = off_24C021970;
    *(_OWORD *)v489 = *(_OWORD *)(v263 + 80);
    if ((v260 - 3) >= 2 && (_DWORD)v260)
    {
      if ((_DWORD)v260 != 1)
      {
        v433 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v433)
          ZinConvPoolLargeStride::LargeStridePoolLower(v433, v434, v435, v436, v437, v438, v439, v440);
        goto LABEL_496;
      }
      v323 = 2;
      Pool = v443;
    }
    else
    {
      Pool = (ZinIrOpLayer *)**((_QWORD **)v453 + 11);
      v323 = 1;
    }
    if (!Pool)
    {
      v399 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v399)
        ZinConvPoolLargeStride::LargeStridePoolLower(v399, v400, v401, v402, v403, v404, v405, v406);
LABEL_496:
      v423 = (void **)__p;
      goto LABEL_497;
    }
    v324 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Pool + 32))(Pool, 0, 0);
    v325 = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(a1, (uint64_t)&v515, v324, *(int *)&v489[12], *(int *)v489, *(int *)&v489[4]);
    v501.__r_.__value_.__r.__words[0] = (std::string::size_type)v453;
    *(_QWORD *)v495 = &v501;
    *(_QWORD *)&v495[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v509, v495);
    v326 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v325, (ZinIrOpLayer ***)v509);
    *(_QWORD *)v509 = &unk_24C02BB18;
    if (*(_QWORD *)&v509[8])
    {
      *(_QWORD *)&v509[16] = *(_QWORD *)&v509[8];
      operator delete(*(void **)&v509[8]);
    }
    if (v260 <= 4 && ((1 << v260) & 0x19) != 0)
    {
      v327 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Pool, (uint64_t)v325, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v443 = v325;
    }
    else
    {
      v327 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Pool, (uint64_t)v325, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v449 = (uint64_t)v325;
    }
    v451 &= v327 & v326;
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)__p);
LABEL_457:
    ++v259;
    v258 = *a3;
    v260 = v323;
    if (0x82FA0BE82FA0BE83 * ((a3[1] - *a3) >> 3) <= v259)
      goto LABEL_464;
  }
  if ((v260 - 5) > 0xFFFFFFFD)
  {
    if (!Pool)
    {
      v407 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v407)
        ZinConvPoolLargeStride::LargeStridePoolLower(v407, v408, v409, v410, v411, v412, v413, v414);
      goto LABEL_498;
    }
    if ((_DWORD)v260 == 3)
    {
      v265 = v476;
      v266 = v475;
      v267 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v475 + 32))(*(_QWORD *)v475, 0, 0);
      v268 = *(_OWORD *)(v267 + 64);
      *(_OWORD *)__p = *(_OWORD *)(v267 + 48);
      *(_OWORD *)&__p[16] = v268;
      *(_QWORD *)&__p[32] = *(_QWORD *)(v267 + 80);
      memset(v495, 0, 24);
      v269 = (v265 - v266) << 29;
      v270 = (int)((v265 - v266) >> 3);
      if (v269 >= 1)
      {
        v271 = 0;
        v272 = 0;
        if (v270 <= 1)
          v273 = 1;
        else
          v273 = v270;
        do
        {
          *(_OWORD *)v509 = 0uLL;
          if ((unint64_t)v271 >= *(_QWORD *)&v495[16])
          {
            v275 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v271[-*(_QWORD *)v495] >> 4);
            v276 = v275 + 1;
            if (v275 + 1 > 0x333333333333333)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v495[16] - *(_QWORD *)v495) >> 4) > v276)
              v276 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v495[16] - *(_QWORD *)v495) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v495[16] - *(_QWORD *)v495) >> 4) >= 0x199999999999999)
              v277 = 0x333333333333333;
            else
              v277 = v276;
            if (v277)
              v278 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v495[16], v277);
            else
              v278 = 0;
            v279 = &v278[80 * v275];
            *(_QWORD *)v279 = 0;
            *((_QWORD *)v279 + 1) = 0;
            *((_QWORD *)v279 + 3) = 0;
            *((_QWORD *)v279 + 4) = 0;
            *((_QWORD *)v279 + 2) = v272;
            v280 = vdupq_n_s64(1uLL);
            *(int64x2_t *)(v279 + 40) = v280;
            *(int64x2_t *)(v279 + 56) = v280;
            *((_QWORD *)v279 + 9) = 1;
            v281 = *(char **)&v495[8];
            v282 = *(char **)v495;
            v283 = v279;
            if (*(_QWORD *)&v495[8] != *(_QWORD *)v495)
            {
              do
              {
                *((_OWORD *)v283 - 5) = *((_OWORD *)v281 - 5);
                v284 = *((_OWORD *)v281 - 4);
                v285 = *((_OWORD *)v281 - 3);
                v286 = *((_OWORD *)v281 - 1);
                *((_OWORD *)v283 - 2) = *((_OWORD *)v281 - 2);
                *((_OWORD *)v283 - 1) = v286;
                *((_OWORD *)v283 - 4) = v284;
                *((_OWORD *)v283 - 3) = v285;
                v283 -= 80;
                v281 -= 80;
              }
              while (v281 != v282);
              v281 = v282;
            }
            v271 = v279 + 80;
            *(_QWORD *)v495 = v283;
            *(_QWORD *)&v495[8] = v279 + 80;
            *(_QWORD *)&v495[16] = &v278[80 * v277];
            if (v281)
              operator delete(v281);
          }
          else
          {
            *(_QWORD *)v271 = 0;
            *((_QWORD *)v271 + 1) = 0;
            *((_QWORD *)v271 + 2) = v272;
            *(_OWORD *)(v271 + 24) = *(_OWORD *)v509;
            v274 = vdupq_n_s64(1uLL);
            *(int64x2_t *)(v271 + 40) = v274;
            *(int64x2_t *)(v271 + 56) = v274;
            *((_QWORD *)v271 + 9) = 1;
            v271 += 80;
          }
          *(_QWORD *)&v495[8] = v271;
          ++v272;
        }
        while (v272 != v273);
      }
      *(_QWORD *)&__p[16] = v270;
      v479[0] = 0;
      ZinBuilder::CreateConcat(a1, (uint64_t)&v515, (__int128 *)__p, (_QWORD **)&v475, (uint64_t)v495, 2, 1, v479, (void **)&v501.__r_.__value_.__l.__data_, 0);
      v287 = (_QWORD *)v479[0];
      v479[0] = 0;
      if (v287)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v479, v287);
      v288 = *(ZinIrOpLayer **)(v501.__r_.__value_.__l.__size_ - 8);
      v289 = *(_DWORD *)(*((_QWORD *)v288 + 8) + 8);
      if (v289 == 7)
      {
        v494 = v453;
        v483 = &v494;
        v484 = (void *)1;
        Layer2TDMapper::SourceLayer::SourceLayer(v509, &v483);
        v290 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v288, (ZinIrOpLayer ***)v509);
        *(_QWORD *)v509 = &unk_24C02BB18;
        if (*(_QWORD *)&v509[8])
        {
          *(_QWORD *)&v509[16] = *(_QWORD *)&v509[8];
          operator delete(*(void **)&v509[8]);
        }
        v291 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)&v475, *(_QWORD *)(v501.__r_.__value_.__l.__size_ - 8));
        v476 = v475;
        v292 = v501.__r_.__value_.__l.__size_;
        v293 = v473;
        if (v473 >= v474)
        {
          v355 = (v473 - (_BYTE *)v472) >> 3;
          if ((unint64_t)(v355 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v356 = (v474 - (_BYTE *)v472) >> 2;
          if (v356 <= v355 + 1)
            v356 = v355 + 1;
          if ((unint64_t)(v474 - (_BYTE *)v472) >= 0x7FFFFFFFFFFFFFF8)
            v357 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v357 = v356;
          if (v357)
            v358 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v474, v357);
          else
            v358 = 0;
          v359 = &v358[8 * v355];
          *(_QWORD *)v359 = *(_QWORD *)(v292 - 8);
          v294 = v359 + 8;
          v361 = (char *)v472;
          v360 = v473;
          if (v473 != v472)
          {
            do
            {
              v362 = *((_QWORD *)v360 - 1);
              v360 -= 8;
              *((_QWORD *)v359 - 1) = v362;
              v359 -= 8;
            }
            while (v360 != v361);
            v360 = (char *)v472;
          }
          v472 = v359;
          v473 = v294;
          v474 = &v358[8 * v357];
          if (v360)
            operator delete(v360);
        }
        else
        {
          *(_QWORD *)v473 = *(_QWORD *)(v501.__r_.__value_.__l.__size_ - 8);
          v294 = v293 + 8;
        }
        v473 = v294;
        v451 &= v290 & v291;
        v323 = 4;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinConvPoolLargeStride::LargeStridePoolLower(&v470, v471);
        v323 = 3;
      }
      if (v501.__r_.__value_.__r.__words[0])
      {
        v501.__r_.__value_.__l.__size_ = v501.__r_.__value_.__r.__words[0];
        operator delete(v501.__r_.__value_.__l.__data_);
      }
      if (*(_QWORD *)v495)
      {
        *(_QWORD *)&v495[8] = *(_QWORD *)v495;
        operator delete(*(void **)v495);
      }
      if (v289 != 7)
        goto LABEL_498;
      goto LABEL_457;
    }
    v298 = v473 - (_BYTE *)v472;
    if (v473 == v472)
      ZinAssertImpl("Error: concat2_input size is 0");
    v299 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v472 + 32))(*(_QWORD *)v472, 0, 0);
    v300 = *(_OWORD *)(v299 + 64);
    *(_OWORD *)__p = *(_OWORD *)(v299 + 48);
    *(_OWORD *)&__p[16] = v300;
    *(_QWORD *)&__p[32] = *(_QWORD *)(v299 + 80);
    memset(v495, 0, 24);
    v301 = (int)(v298 >> 3);
    if (v298 << 29 >= 1)
    {
      i8 = 0;
      v303 = 0;
      if (v301 <= 1)
        v304 = 1;
      else
        v304 = v301;
      do
      {
        if ((unint64_t)i8 >= *(_QWORD *)&v495[16])
        {
          v306 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&i8[-*(_QWORD *)v495] >> 4);
          v307 = v306 + 1;
          if (v306 + 1 > 0x333333333333333)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v495[16] - *(_QWORD *)v495) >> 4) > v307)
            v307 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v495[16] - *(_QWORD *)v495) >> 4);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v495[16] - *(_QWORD *)v495) >> 4) >= 0x199999999999999)
            v308 = 0x333333333333333;
          else
            v308 = v307;
          if (v308)
            v309 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v495[16], v308);
          else
            v309 = 0;
          v310 = (int64x2_t *)&v309[80 * v306];
          v310->i64[0] = 0;
          v310->i64[1] = 0;
          v310[1].i64[0] = 0;
          v310[1].i64[1] = v303;
          v311 = vdupq_n_s64(1uLL);
          v310[2] = (int64x2_t)xmmword_207A80930;
          v310[3] = v311;
          v310[4] = v311;
          v312 = *(int64x2_t **)&v495[8];
          v313 = *(char **)v495;
          v314 = v310;
          if (*(_QWORD *)&v495[8] != *(_QWORD *)v495)
          {
            do
            {
              v314[-5] = v312[-5];
              v315 = v312[-4];
              v316 = v312[-3];
              v317 = v312[-1];
              v314[-2] = v312[-2];
              v314[-1] = v317;
              v314[-4] = v315;
              v314[-3] = v316;
              v314 -= 5;
              v312 -= 5;
            }
            while (v312 != (int64x2_t *)v313);
            v312 = (int64x2_t *)v313;
          }
          i8 = v310[5].i8;
          *(_QWORD *)v495 = v314;
          *(_QWORD *)&v495[8] = v310 + 5;
          *(_QWORD *)&v495[16] = &v309[80 * v308];
          if (v312)
            operator delete(v312);
        }
        else
        {
          *(_QWORD *)i8 = 0;
          *((_QWORD *)i8 + 1) = 0;
          *((_QWORD *)i8 + 2) = 0;
          *((_QWORD *)i8 + 3) = v303;
          v305 = vdupq_n_s64(1uLL);
          *((_OWORD *)i8 + 2) = xmmword_207A80930;
          *((int64x2_t *)i8 + 3) = v305;
          *((int64x2_t *)i8 + 4) = v305;
          i8 += 80;
        }
        *(_QWORD *)&v495[8] = i8;
        ++v303;
      }
      while (v303 != v304);
    }
    *(_QWORD *)&__p[24] = v301;
    v469 = 0;
    ZinBuilder::CreateConcat(a1, (uint64_t)&v515, (__int128 *)__p, (_QWORD **)&v472, (uint64_t)v495, 3, 1, &v469, (void **)v509, 0);
    v318 = *(_OWORD *)v509;
    memset(v509, 0, 24);
    v319 = v469;
    v469 = 0;
    if (v319)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v469, v319);
    v320 = *(ZinIrOpLayer **)(*((_QWORD *)&v318 + 1) - 8);
    v321 = *(_DWORD *)(*((_QWORD *)v320 + 8) + 8);
    if (v321 == 7)
    {
      v483 = v453;
      v501.__r_.__value_.__r.__words[0] = (std::string::size_type)&v483;
      v501.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v509, &v501);
      v322 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v320, (ZinIrOpLayer ***)v509);
      *(_QWORD *)v509 = &unk_24C02BB18;
      if (*(_QWORD *)&v509[8])
      {
        *(_QWORD *)&v509[16] = *(_QWORD *)&v509[8];
        operator delete(*(void **)&v509[8]);
      }
      v451 &= v322 & ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)&v472, *(_QWORD *)(*((_QWORD *)&v318 + 1) - 8));
      Pool = *(ZinIrOpLayer **)(*((_QWORD *)&v318 + 1) - 8);
      v323 = 5;
      if (!(_QWORD)v318)
        goto LABEL_420;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinConvPoolLargeStride::LargeStridePoolLower(&v467, v468);
      v323 = v260;
      if (!(_QWORD)v318)
      {
LABEL_420:
        if (*(_QWORD *)v495)
        {
          *(_QWORD *)&v495[8] = *(_QWORD *)v495;
          operator delete(*(void **)v495);
        }
        if (v321 != 7)
          goto LABEL_498;
        goto LABEL_457;
      }
    }
    operator delete((void *)v318);
    goto LABEL_420;
  }
  v383 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v383)
    ZinConvPoolLargeStride::LargeStridePoolLower(v383, v384, v385, v386, v387, v388, v389, v390);
LABEL_498:
  v364 = 3;
LABEL_499:
  if (v472)
  {
    v473 = (char *)v472;
    operator delete(v472);
  }
  if (v475)
  {
    v476 = v475;
    operator delete(v475);
  }
  v515 = (ZinIrOpLayer **)off_24C01FBB0;
  if (v518 < 0)
  {
    v432 = (void *)v516;
LABEL_505:
    operator delete(v432);
  }
LABEL_506:
  if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v478.__r_.__value_.__l.__data_);
  if (SHIBYTE(v465) < 0)
    operator delete(v463);
  return v364;
}

void sub_206E9FB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  void *a72;
  uint64_t v72;
  void *v74;
  void *v75;
  void *v76;

  v74 = (void *)STACK[0x520];
  if (STACK[0x520])
  {
    STACK[0x528] = (unint64_t)v74;
    operator delete(v74);
  }
  v75 = (void *)STACK[0x470];
  if (STACK[0x470])
  {
    STACK[0x478] = (unint64_t)v75;
    operator delete(v75);
  }
  if (a72)
    operator delete(a72);
  v76 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v76;
    operator delete(v76);
  }
  *(_QWORD *)(v72 - 144) = off_24C01FBB0;
  if (*(char *)(v72 - 113) < 0)
    operator delete(*(void **)(v72 - 136));
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (a68 < 0)
    operator delete(a63);
  _Unwind_Resume(a1);
}

uint64_t ZinConvPoolLargeStride::DecomposeLargeStridePoolNoSeparatePaddingLayer(int a1, uint64_t a2, _QWORD *a3, uint64_t **a4, uint64_t *a5)
{
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t *v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int64x2_t *v87;
  __int8 *v88;
  int64x2_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  int64x2_t *v95;
  int64x2_t *v96;
  int64x2_t v97;
  int64x2_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t *v121;
  char *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  std::string *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (**v150)(ZinIrUnitInfo *__hidden);
  std::string v151;
  int v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  _BYTE v161[36];
  int v162;
  void *v163[4];
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  int v174;
  _BYTE v175[344];
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v10 = *a5;
  for (i = a5[1];
        i != v10;
  a5[1] = v10;
  a4[1] = *a4;
  v11 = *(_QWORD *)(a2 + 88);
  v140 = *(int *)(a2 + 124);
  v12 = *(int *)(a2 + 128) + v140 + a3[3];
  v127 = *(int *)(a2 + 112);
  v128 = (v12 - v11) / v127;
  if (v128 < 0 || v12 < v11)
  {
    v149 = 1;
    v13 = 1;
    v148 = 1;
    v147 = 1;
    goto LABEL_117;
  }
  v126 = *(int *)(a2 + 128) + v140 + a3[3];
  v14 = 0;
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(int *)(a2 + 132);
  v139 = *(int *)(a2 + 136) + v16 + a3[2];
  v133 = 0;
  v134 = *(int *)(a2 + 116);
  v141 = (v139 - v15) / v134;
  v142 = *(_QWORD *)(a2 + 88);
  v145 = v15;
  v137 = v16;
  v131 = v15 - v16;
  v135 = (uint64_t)(a4 + 2);
  v130 = v11 - v140;
  v132 = (std::string *)(a2 + 8);
  v17 = (__int128 *)(a2 + 80);
  v149 = 1;
  v148 = 1;
  v147 = 1;
  v136 = a2;
  v18 = a1;
  do
  {
    v143 = v14;
    if ((v141 & 0x8000000000000000) == 0 && v139 >= v145)
    {
      v19 = 0;
      v20 = 0;
      v129 = v133 - v140;
      while (1)
      {
        memset(&v163[1], 0, 24);
        v166 = 0;
        v167 = 0;
        v165 = 0;
        v170 = -1;
        v163[0] = off_24C021970;
        v173 = 1;
        v21 = *((_DWORD *)a3 + 4);
        if (v20)
        {
          if (v19 >= v137)
          {
            v22 = v19 - v137;
            v24 = v21 - (v19 - v137);
            if (v24 >= (int)v145)
              v23 = v145;
            else
              v23 = v24;
          }
          else
          {
            v22 = 0;
            if ((int)v137 - (int)v19 + v21 >= (int)v145)
              v23 = v19 - v137 + v145;
            else
              v23 = *((_DWORD *)a3 + 4);
          }
        }
        else
        {
          v22 = 0;
          if ((int)v137 + v21 >= (int)v145)
            v23 = v131;
          else
            v23 = *((_DWORD *)a3 + 4);
        }
        v172 = v23;
        v174 = 3;
        v164 = 17;
        v168 = v18;
        v171 = v22;
        v169 = v18;
        ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v175, (ZinIrInputViewUnitInfo *)v163);
        v25 = a5[1];
        if (v25 >= a5[2])
        {
          v26 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a5, (const LargeStrideConvPoolDecomposedDesc *)v175);
        }
        else
        {
          LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a5[1], (const LargeStrideConvPoolDecomposedDesc *)v175);
          v26 = v25 + 344;
          a5[1] = v25 + 344;
        }
        a5[1] = v26;
        LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)v175);
        v147 = *a3;
        v148 = a3[1];
        v27 = a3[3];
        v149 = a3[4];
        v146 = v172;
        v28 = a4[1];
        v29 = a4[2];
        if (v28 >= v29)
        {
          v33 = 0xCCCCCCCCCCCCCCCDLL * (v28 - *a4);
          v34 = v33 + 1;
          if (v33 + 1 > 0x666666666666666)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v35 = 0xCCCCCCCCCCCCCCCDLL * (v29 - *a4);
          if (2 * v35 > v34)
            v34 = 2 * v35;
          if (v35 >= 0x333333333333333)
            v36 = 0x666666666666666;
          else
            v36 = v34;
          if (v36)
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v135, v36);
          else
            v37 = 0;
          v38 = &v37[40 * v33];
          v39 = *(_OWORD *)a3;
          v40 = *((_OWORD *)a3 + 1);
          *((_QWORD *)v38 + 4) = a3[4];
          *(_OWORD *)v38 = v39;
          *((_OWORD *)v38 + 1) = v40;
          v42 = *a4;
          v41 = (char *)a4[1];
          v43 = v38;
          if (v41 != (char *)*a4)
          {
            do
            {
              v44 = *(_OWORD *)(v41 - 40);
              v45 = *(_OWORD *)(v41 - 24);
              *((_QWORD *)v43 - 1) = *((_QWORD *)v41 - 1);
              *(_OWORD *)(v43 - 24) = v45;
              *(_OWORD *)(v43 - 40) = v44;
              v43 -= 40;
              v41 -= 40;
            }
            while (v41 != (char *)v42);
            v41 = (char *)*a4;
          }
          v32 = v38 + 40;
          *a4 = (uint64_t *)v43;
          a4[1] = (uint64_t *)(v38 + 40);
          a4[2] = (uint64_t *)&v37[40 * v36];
          if (v41)
            operator delete(v41);
        }
        else
        {
          v30 = *(_OWORD *)a3;
          v31 = *((_OWORD *)a3 + 1);
          v28[4] = a3[4];
          *(_OWORD *)v28 = v30;
          *((_OWORD *)v28 + 1) = v31;
          v32 = (char *)(v28 + 5);
        }
        a4[1] = (uint64_t *)v32;
        v46 = *((_DWORD *)a3 + 6);
        v47 = v143;
        if (v143)
        {
          if (v133 >= v140)
          {
            if (v46 - v129 >= (int)v142)
              v50 = v142;
            else
              v50 = v46 - v129;
            v47 = v133 - v140;
            goto LABEL_52;
          }
          v47 = 0;
          v48 = (int)v140 - (int)v133 + v46 < (int)v142;
          v49 = v133 - v140 + v142;
        }
        else
        {
          v48 = (int)v140 + v46 < (int)v142;
          v49 = v130;
        }
        if (v48)
          v50 = *((_DWORD *)a3 + 6);
        else
          v50 = v49;
LABEL_52:
        v171 = v47;
        v172 = v50;
        v174 = 4;
        ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v175, (ZinIrInputViewUnitInfo *)v163);
        v51 = a5[1];
        if (v51 >= a5[2])
        {
          v52 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a5, (const LargeStrideConvPoolDecomposedDesc *)v175);
        }
        else
        {
          LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a5[1], (const LargeStrideConvPoolDecomposedDesc *)v175);
          v52 = v51 + 344;
          a5[1] = v51 + 344;
        }
        a5[1] = v52;
        LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)v175);
        v144 = v172;
        v54 = a4[1];
        v53 = (unint64_t)a4[2];
        if ((unint64_t)v54 >= v53)
        {
          v56 = *a4;
          v57 = 0xCCCCCCCCCCCCCCCDLL * (v54 - *a4);
          v58 = v57 + 1;
          if (v57 + 1 > 0x666666666666666)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - (_QWORD)v56) >> 3);
          if (2 * v59 > v58)
            v58 = 2 * v59;
          if (v59 >= 0x333333333333333)
            v60 = 0x666666666666666;
          else
            v60 = v58;
          if (v60)
          {
            v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v135, v60);
            v56 = *a4;
            v54 = a4[1];
          }
          else
          {
            v61 = 0;
          }
          v62 = (uint64_t *)&v61[40 * v57];
          *v62 = v147;
          v62[1] = v148;
          v62[2] = v146;
          v62[3] = v27;
          v62[4] = v149;
          v63 = v62;
          if (v54 != v56)
          {
            do
            {
              v64 = *(_OWORD *)(v54 - 5);
              v65 = *(_OWORD *)(v54 - 3);
              *(v63 - 1) = *(v54 - 1);
              *(_OWORD *)(v63 - 3) = v65;
              *(_OWORD *)(v63 - 5) = v64;
              v63 -= 5;
              v54 -= 5;
            }
            while (v54 != v56);
            v56 = *a4;
          }
          v55 = v62 + 5;
          *a4 = v63;
          a4[1] = v62 + 5;
          a4[2] = (uint64_t *)&v61[40 * v60];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v54 = v147;
          v54[1] = v148;
          v54[2] = v146;
          v54[3] = v27;
          v55 = v54 + 5;
          v54[4] = v149;
        }
        a4[1] = v55;
        v150 = off_24C017CA0;
        if (*(char *)(v136 + 31) < 0)
          std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)(v136 + 8), *(_QWORD *)(v136 + 16));
        else
          v151 = *v132;
        v152 = *(_DWORD *)(v136 + 32);
        *(_QWORD *)&v154 = 0;
        v153 = 0uLL;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v153, *(__int128 **)(v136 + 40), *(__int128 **)(v136 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v136 + 48) - *(_QWORD *)(v136 + 40)) >> 3));
        v150 = (void (**)(ZinIrUnitInfo *__hidden))&unk_24C01CC78;
        v162 = *((_DWORD *)v17 + 20);
        v66 = v17[4];
        *(_OWORD *)&v161[4] = v17[3];
        *(_OWORD *)&v161[20] = v66;
        v156 = *v17;
        v159 = 0x100000001;
        v160 = 1;
        v157 = v23;
        v158 = 1;
        memset(v161, 0, 25);
        v18 = a1;
        HIDWORD(v154) = a1;
        v67 = a3[1];
        *((_QWORD *)&v156 + 1) = v50;
        v155 = v67;
        DWORD2(v154) = a1;
        v152 = 2;
        ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v175, (ZinIrPoolUnitInfo *)&v150);
        v68 = a5[1];
        if (v68 >= a5[2])
        {
          v69 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a5, (const LargeStrideConvPoolDecomposedDesc *)v175);
        }
        else
        {
          LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a5[1], (const LargeStrideConvPoolDecomposedDesc *)v175);
          v69 = v68 + 344;
          a5[1] = v68 + 344;
        }
        a5[1] = v69;
        LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)v175);
        v71 = a4[1];
        v70 = (unint64_t)a4[2];
        if ((unint64_t)v71 >= v70)
        {
          v73 = *a4;
          v74 = 0xCCCCCCCCCCCCCCCDLL * (v71 - *a4);
          v75 = v74 + 1;
          if (v74 + 1 > 0x666666666666666)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v76 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v70 - (_QWORD)v73) >> 3);
          if (2 * v76 > v75)
            v75 = 2 * v76;
          if (v76 >= 0x333333333333333)
            v77 = 0x666666666666666;
          else
            v77 = v75;
          if (v77)
          {
            v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v135, v77);
            v73 = *a4;
            v71 = a4[1];
          }
          else
          {
            v78 = 0;
          }
          v79 = (uint64_t *)&v78[40 * v74];
          *v79 = v147;
          v79[1] = v148;
          v79[2] = v146;
          v79[3] = v144;
          v79[4] = v149;
          v80 = v79;
          if (v71 != v73)
          {
            do
            {
              v81 = *(_OWORD *)(v71 - 5);
              v82 = *(_OWORD *)(v71 - 3);
              *(v80 - 1) = *(v71 - 1);
              *(_OWORD *)(v80 - 3) = v82;
              *(_OWORD *)(v80 - 5) = v81;
              v80 -= 5;
              v71 -= 5;
            }
            while (v71 != v73);
            v73 = *a4;
          }
          v72 = v79 + 5;
          *a4 = v80;
          a4[1] = v79 + 5;
          a4[2] = (uint64_t *)&v78[40 * v77];
          if (v73)
            operator delete(v73);
        }
        else
        {
          *v71 = v147;
          v71[1] = v148;
          v71[2] = v146;
          v71[3] = v144;
          v72 = v71 + 5;
          v71[4] = v149;
        }
        a4[1] = v72;
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v150);
        ZinIrUnitInfo::~ZinIrUnitInfo(v163);
        if (v141 >= ++v20)
        {
          v19 = v20 * v134;
          if (v139 - v20 * v134 >= v145)
            continue;
        }
        break;
      }
    }
    memset(&v151, 0, sizeof(v151));
    *(_QWORD *)&v154 = 0;
    v153 = 0uLL;
    v155 = -1;
    v150 = off_24C01EAB0;
    BYTE4(v156) = 0;
    LODWORD(v156) = 3;
    v152 = 3;
    DWORD2(v154) = v18;
    HIDWORD(v154) = v18;
    ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v175, (ZinIrConcatUnitInfo *)&v150);
    v83 = a5[1];
    if (v83 >= a5[2])
    {
      v85 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a5, (const LargeStrideConvPoolDecomposedDesc *)v175);
      v84 = v143;
    }
    else
    {
      LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a5[1], (const LargeStrideConvPoolDecomposedDesc *)v175);
      v84 = v143;
      v85 = v83 + 344;
      a5[1] = v83 + 344;
    }
    a5[1] = v85;
    LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)v175);
    v87 = (int64x2_t *)a4[1];
    v86 = (unint64_t)a4[2];
    if ((unint64_t)v87 >= v86)
    {
      v89 = (int64x2_t *)*a4;
      v90 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v87 - (char *)*a4) >> 3);
      v91 = v90 + 1;
      if (v90 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v92 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v86 - (_QWORD)v89) >> 3);
      if (2 * v92 > v91)
        v91 = 2 * v92;
      if (v92 >= 0x333333333333333)
        v93 = 0x666666666666666;
      else
        v93 = v91;
      if (v93)
      {
        v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v135, v93);
        v89 = (int64x2_t *)*a4;
        v87 = (int64x2_t *)a4[1];
      }
      else
      {
        v94 = 0;
      }
      v95 = (int64x2_t *)&v94[40 * v90];
      v95->i64[0] = v147;
      v95->i64[1] = v148;
      v95[1] = vdupq_n_s64(1uLL);
      v95[2].i64[0] = v149;
      v96 = v95;
      if (v87 != v89)
      {
        do
        {
          v97 = *(int64x2_t *)((char *)v87 - 40);
          v98 = *(int64x2_t *)((char *)v87 - 24);
          v96[-1].i64[1] = v87[-1].i64[1];
          *(int64x2_t *)((char *)v96 - 24) = v98;
          *(int64x2_t *)((char *)v96 - 40) = v97;
          v96 = (int64x2_t *)((char *)v96 - 40);
          v87 = (int64x2_t *)((char *)v87 - 40);
        }
        while (v87 != v89);
        v89 = (int64x2_t *)*a4;
      }
      v88 = &v95[2].i8[8];
      *a4 = (uint64_t *)v96;
      a4[1] = &v95[2].i64[1];
      a4[2] = (uint64_t *)&v94[40 * v93];
      if (v89)
        operator delete(v89);
    }
    else
    {
      v87->i64[0] = v147;
      v87->i64[1] = v148;
      v87[1] = vdupq_n_s64(1uLL);
      v87[2].i64[0] = v149;
      v88 = &v87[2].i8[8];
    }
    a4[1] = (uint64_t *)v88;
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v150);
    v14 = v84 + 1;
    if (v128 < v14)
      break;
    v133 = v14 * v127;
  }
  while (v126 - v14 * v127 >= v142);
  v13 = v141 + 1;
LABEL_117:
  v153 = 0u;
  v154 = 0u;
  v155 = -1;
  v150 = off_24C01EAB0;
  memset(&v151, 0, sizeof(v151));
  BYTE4(v156) = 0;
  v152 = 3;
  LODWORD(v156) = 4;
  ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v175, (ZinIrConcatUnitInfo *)&v150);
  v99 = a5[1];
  if (v99 >= a5[2])
  {
    v100 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a5, (const LargeStrideConvPoolDecomposedDesc *)v175);
  }
  else
  {
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a5[1], (const LargeStrideConvPoolDecomposedDesc *)v175);
    v100 = v99 + 344;
    a5[1] = v99 + 344;
  }
  a5[1] = v100;
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)v175);
  v101 = a4[2];
  v102 = a4[1];
  if (v102 < v101)
  {
    *v102 = v147;
    v102[1] = v148;
    v102[2] = v13;
    v102[3] = 1;
    v103 = v102 + 5;
    v102[4] = v149;
    goto LABEL_136;
  }
  v104 = *a4;
  v105 = 0xCCCCCCCCCCCCCCCDLL * (v102 - *a4);
  v106 = v105 + 1;
  if (v105 + 1 > 0x666666666666666)
    goto LABEL_157;
  v107 = 0xCCCCCCCCCCCCCCCDLL * (v101 - v104);
  if (2 * v107 > v106)
    v106 = 2 * v107;
  if (v107 >= 0x333333333333333)
    v108 = 0x666666666666666;
  else
    v108 = v106;
  if (v108)
  {
    v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a4 + 2), v108);
    v104 = *a4;
    v102 = a4[1];
  }
  else
  {
    v109 = 0;
  }
  v110 = (uint64_t *)&v109[40 * v105];
  v101 = (uint64_t *)&v109[40 * v108];
  *v110 = v147;
  v110[1] = v148;
  v110[2] = v13;
  v110[3] = 1;
  v110[4] = v149;
  v103 = v110 + 5;
  if (v102 != v104)
  {
    do
    {
      v111 = *(_OWORD *)(v102 - 5);
      v112 = *(_OWORD *)(v102 - 3);
      *(v110 - 1) = *(v102 - 1);
      *(_OWORD *)(v110 - 3) = v112;
      *(_OWORD *)(v110 - 5) = v111;
      v110 -= 5;
      v102 -= 5;
    }
    while (v102 != v104);
    v104 = *a4;
  }
  *a4 = v110;
  a4[1] = v103;
  a4[2] = v101;
  if (v104)
  {
    operator delete(v104);
    v101 = a4[2];
  }
LABEL_136:
  v113 = v128 + 1;
  a4[1] = v103;
  if (v103 < v101)
  {
    *v103 = v147;
    v103[1] = v148;
    v103[2] = v13;
    v103[3] = v113;
    v114 = v103 + 5;
    v103[4] = v149;
    goto LABEL_152;
  }
  v115 = *a4;
  v116 = 0xCCCCCCCCCCCCCCCDLL * (v103 - *a4);
  v117 = v116 + 1;
  if (v116 + 1 > 0x666666666666666)
LABEL_157:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v118 = 0xCCCCCCCCCCCCCCCDLL * (v101 - v115);
  if (2 * v118 > v117)
    v117 = 2 * v118;
  if (v118 >= 0x333333333333333)
    v119 = 0x666666666666666;
  else
    v119 = v117;
  if (v119)
  {
    v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a4 + 2), v119);
    v115 = *a4;
    v103 = a4[1];
  }
  else
  {
    v120 = 0;
  }
  v121 = (uint64_t *)&v120[40 * v116];
  *v121 = v147;
  v121[1] = v148;
  v121[2] = v13;
  v122 = &v120[40 * v119];
  v121[3] = v113;
  v121[4] = v149;
  v114 = v121 + 5;
  if (v103 != v115)
  {
    do
    {
      v123 = *(_OWORD *)(v103 - 5);
      v124 = *(_OWORD *)(v103 - 3);
      *(v121 - 1) = *(v103 - 1);
      *(_OWORD *)(v121 - 3) = v124;
      *(_OWORD *)(v121 - 5) = v123;
      v121 -= 5;
      v103 -= 5;
    }
    while (v103 != v115);
    v115 = *a4;
  }
  *a4 = v121;
  a4[1] = v114;
  a4[2] = (uint64_t *)v122;
  if (v115)
    operator delete(v115);
LABEL_152:
  a4[1] = v114;
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v150);
  return 0;
}

void sub_206EA1048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)&STACK[0x218]);
  ZinIrUnitInfo::~ZinIrUnitInfo(&a43);
  _Unwind_Resume(a1);
}

uint64_t ZinConvPoolLargeStride::DecomposeLargeStridePool(int a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  uint64_t *v41;
  uint64_t *v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t *v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  uint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t *v108;
  uint64_t *v109;
  __int128 v110;
  __int128 v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  __int128 v125;
  __int128 v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t *v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t *v149;
  char *v150;
  __int128 v151;
  __int128 v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  _QWORD *v158;
  uint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t *v165;
  char *v166;
  __int128 v167;
  __int128 v168;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t **v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (**v194)(ZinIrInputViewUnitInfo *__hidden);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  void *v205[4];
  int v206;
  __int128 v207;
  uint64_t v208;
  int v209;
  int v210;
  uint64_t v211;
  void *v212;
  void *v213;
  uint64_t v214;
  void (**v215)(ZinIrUnitInfo *__hidden);
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  _BYTE v223[48];
  unsigned int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  _BYTE v229[20];
  void *__p;
  void *v231;
  __int128 v232;
  _DWORD __src[6];
  _QWORD v234[42];

  v234[40] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a3 + 1880))
    ZinAssertImpl("Large stride pool requires transpose but is not supported.");
  v12 = *a7;
  for (i = a7[1];
        i != v12;
  a7[1] = v12;
  *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
  if (*(_BYTE *)(a2 + 148))
  {
    ZinConvPoolLargeStride::DecomposeLargeStridePoolNoSeparatePaddingLayer(a1, a2, a4, (uint64_t **)a6, a7);
    return 0;
  }
  v13 = *(_QWORD *)(a2 + 96);
  v189 = *(_QWORD *)(a2 + 88);
  v171 = *(int *)(a2 + 112);
  v178 = *(int *)(a2 + 116);
  v15 = *(_DWORD *)(a2 + 124);
  v14 = *(_DWORD *)(a2 + 128);
  v16 = *(_DWORD *)(a2 + 132);
  v17 = *(_DWORD *)(a2 + 136);
  v18 = *(_DWORD *)(a2 + 140);
  v19 = *(_DWORD *)(a2 + 144);
  v20 = *(_DWORD *)(a2 + 152);
  v193 = *a4;
  v192 = a4[1];
  v180 = v16;
  v182 = a4[2];
  v186 = v14;
  v188 = a4[3];
  v191 = a4[4];
  v177 = v17;
  v185 = v15;
  if (__PAIR64__(v14, v15) || v16 || v17 || v19 || v18)
  {
    if (v20 == 4 || v20 == 2)
      ZinAssertImpl("Large stride Min/Max pool with padding is not supported");
    v232 = 0u;
    *(_OWORD *)&v229[4] = 0u;
    *(_QWORD *)&v219 = 0;
    v218 = 0u;
    v217 = 0u;
    v216 = 0u;
    v220 = -1;
    v221 = 0u;
    v222 = 0u;
    memset(v223, 0, 44);
    v215 = &off_24C01BAC0;
    *(_QWORD *)&v229[8] = 0;
    *(_QWORD *)v229 = 0;
    v231 = 0;
    __p = 0;
    WORD4(v232) = 0;
    *(_QWORD *)&v232 = 0;
    *(_DWORD *)&v223[44] = v15;
    v224 = v14;
    v225 = v16;
    v226 = v17;
    v227 = v18;
    v228 = v19;
    DWORD2(v217) = 44;
    DWORD2(v219) = a1;
    HIDWORD(v219) = a1;
    __src[0] = 4;
    __src[1] = v20;
    __src[2] = 3;
    __src[3] = v20;
    __src[4] = 2;
    __src[5] = v20;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__p, (char *)__src, (uint64_t)v234, 3uLL);
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src, (ZinIrPadUnitInfo *)&v215);
    v21 = a7[1];
    if (v21 >= a7[2])
    {
      v22 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
    }
    else
    {
      LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
      v22 = v21 + 344;
      a7[1] = v21 + 344;
    }
    a7[1] = v22;
    LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
    v23 = *(int *)&v223[44];
    v24 = (int)v224;
    v25 = v225;
    v26 = v226;
    v27 = *(_QWORD *)(a6 + 16);
    v28 = *(_QWORD *)(a6 + 8);
    if (v28 >= v27)
    {
      v183 = v225;
      v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v28 - *(_QWORD *)a6) >> 3);
      v33 = v32 + 1;
      if (v32 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - *(_QWORD *)a6) >> 3);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 >= 0x333333333333333)
        v35 = 0x666666666666666;
      else
        v35 = v33;
      if (v35)
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(a6 + 16, v35);
      else
        v36 = 0;
      v37 = &v36[40 * v32];
      v38 = &v36[40 * v35];
      v39 = *(_OWORD *)a4;
      v40 = *((_OWORD *)a4 + 1);
      *((_QWORD *)v37 + 4) = a4[4];
      *(_OWORD *)v37 = v39;
      *((_OWORD *)v37 + 1) = v40;
      v31 = v37 + 40;
      v42 = *(uint64_t **)a6;
      v41 = *(uint64_t **)(a6 + 8);
      if (v41 != *(uint64_t **)a6)
      {
        do
        {
          v43 = *(_OWORD *)(v41 - 5);
          v44 = *(_OWORD *)(v41 - 3);
          *((_QWORD *)v37 - 1) = *(v41 - 1);
          *(_OWORD *)(v37 - 24) = v44;
          *(_OWORD *)(v37 - 40) = v43;
          v37 -= 40;
          v41 -= 5;
        }
        while (v41 != v42);
        v41 = *(uint64_t **)a6;
      }
      *(_QWORD *)a6 = v37;
      *(_QWORD *)(a6 + 8) = v31;
      *(_QWORD *)(a6 + 16) = v38;
      if (v41)
        operator delete(v41);
      v25 = v183;
    }
    else
    {
      v29 = *(_OWORD *)a4;
      v30 = *((_OWORD *)a4 + 1);
      *(_QWORD *)(v28 + 32) = a4[4];
      *(_OWORD *)v28 = v29;
      *(_OWORD *)(v28 + 16) = v30;
      v31 = (char *)(v28 + 40);
    }
    v188 += v24 + v23;
    v182 += v26 + v25;
    *(_QWORD *)(a6 + 8) = v31;
    v215 = &off_24C01BAC0;
    if (__p)
    {
      v231 = __p;
      operator delete(__p);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v215);
  }
  v207 = 0u;
  v208 = 0;
  v205[0] = off_24C021A98;
  memset(&v205[1], 0, 24);
  v211 = -1;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v45 = (char *)operator new(0x10uLL);
  *(_OWORD *)v45 = xmmword_207A7F690;
  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v212, v45, (uint64_t)(v45 + 16), 2uLL);
  v206 = 21;
  v209 = a1;
  v210 = a1;
  ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)__src, (ZinIrTransposeUnitInfo *)v205);
  v46 = a7[1];
  if (v46 >= a7[2])
  {
    v47 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
  }
  else
  {
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
    v47 = v46 + 344;
    a7[1] = v46 + 344;
  }
  a7[1] = v47;
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
  v48 = *(_QWORD *)(a6 + 16);
  v179 = (uint64_t **)(a6 + 16);
  v49 = *(uint64_t **)(a6 + 8);
  if ((unint64_t)v49 >= v48)
  {
    v51 = *(uint64_t **)a6;
    v52 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v49 - *(_QWORD *)a6) >> 3);
    v53 = v52 + 1;
    if (v52 + 1 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - (_QWORD)v51) >> 3);
    if (2 * v54 > v53)
      v53 = 2 * v54;
    if (v54 >= 0x333333333333333)
      v55 = 0x666666666666666;
    else
      v55 = v53;
    if (v55)
    {
      v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v179, v55);
      v51 = *(uint64_t **)a6;
      v49 = *(uint64_t **)(a6 + 8);
    }
    else
    {
      v56 = 0;
    }
    v57 = (uint64_t *)&v56[40 * v52];
    *v57 = v193;
    v57[1] = v192;
    v58 = &v56[40 * v55];
    v57[2] = v182;
    v57[3] = v188;
    v57[4] = v191;
    v50 = v57 + 5;
    if (v49 != v51)
    {
      do
      {
        v59 = *(_OWORD *)(v49 - 5);
        v60 = *(_OWORD *)(v49 - 3);
        *(v57 - 1) = *(v49 - 1);
        *(_OWORD *)(v57 - 3) = v60;
        *(_OWORD *)(v57 - 5) = v59;
        v57 -= 5;
        v49 -= 5;
      }
      while (v49 != v51);
      v51 = *(uint64_t **)a6;
    }
    *(_QWORD *)a6 = v57;
    *(_QWORD *)(a6 + 8) = v50;
    *(_QWORD *)(a6 + 16) = v58;
    if (v51)
      operator delete(v51);
  }
  else
  {
    *v49 = v193;
    v49[1] = v192;
    v49[2] = v182;
    v49[3] = v188;
    v50 = v49 + 5;
    v49[4] = v191;
  }
  *(_QWORD *)(a6 + 8) = v50;
  v61 = (int)v186 + (uint64_t)(int)v185 + a4[3];
  v172 = (v61 - v189) / v171;
  if (v172 < 0)
  {
    v176 = 1;
    v175 = 1;
    v174 = 1;
    v62 = 1;
  }
  else if (v61 >= v189)
  {
    v184 = 0;
    v63 = 0;
    v181 = v177 + (uint64_t)v180 + a4[2];
    v187 = (v181 - v13) / v178;
    v176 = 1;
    v175 = 1;
    v174 = 1;
    v170 = v61;
    do
    {
      v173 = v63;
      if ((v187 & 0x8000000000000000) == 0 && v181 >= v13)
      {
        v64 = 0;
        v65 = 0;
        do
        {
          v195 = 0;
          v196 = 0;
          v197 = 0;
          *(_QWORD *)&v200 = 0;
          v199 = 0uLL;
          v201 = -1;
          v194 = off_24C021970;
          v202 = v64;
          v203 = v13;
          v204 = 0x300000001;
          v198 = 17;
          DWORD2(v200) = a1;
          HIDWORD(v200) = a1;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)&v194);
          v66 = a7[1];
          if (v66 >= a7[2])
          {
            v67 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
            v67 = v66 + 344;
            a7[1] = v66 + 344;
          }
          a7[1] = v67;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          v69 = *(uint64_t **)(a6 + 8);
          v68 = *(_QWORD *)(a6 + 16);
          if ((unint64_t)v69 >= v68)
          {
            v71 = *(uint64_t **)a6;
            v72 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v69 - *(_QWORD *)a6) >> 3);
            v73 = v72 + 1;
            if (v72 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v74 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v68 - (_QWORD)v71) >> 3);
            if (2 * v74 > v73)
              v73 = 2 * v74;
            if (v74 >= 0x333333333333333)
              v75 = 0x666666666666666;
            else
              v75 = v73;
            if (v75)
            {
              v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v179, v75);
              v71 = *(uint64_t **)a6;
              v69 = *(uint64_t **)(a6 + 8);
            }
            else
            {
              v76 = 0;
            }
            v77 = (uint64_t *)&v76[40 * v72];
            *v77 = v193;
            v77[1] = v192;
            v77[2] = v182;
            v77[3] = v188;
            v77[4] = v191;
            v78 = v77;
            if (v69 != v71)
            {
              do
              {
                v79 = *(_OWORD *)(v69 - 5);
                v80 = *(_OWORD *)(v69 - 3);
                *(v78 - 1) = *(v69 - 1);
                *(_OWORD *)(v78 - 3) = v80;
                *(_OWORD *)(v78 - 5) = v79;
                v78 -= 5;
                v69 -= 5;
              }
              while (v69 != v71);
              v71 = *(uint64_t **)a6;
            }
            v70 = v77 + 5;
            *(_QWORD *)a6 = v78;
            *(_QWORD *)(a6 + 8) = v77 + 5;
            *(_QWORD *)(a6 + 16) = &v76[40 * v75];
            if (v71)
              operator delete(v71);
          }
          else
          {
            *v69 = v193;
            v69[1] = v192;
            v69[2] = v182;
            v69[3] = v188;
            v70 = v69 + 5;
            v69[4] = v191;
          }
          *(_QWORD *)(a6 + 8) = v70;
          v202 = v184;
          v203 = v189;
          HIDWORD(v204) = 2;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)&v194);
          v81 = a7[1];
          if (v81 >= a7[2])
          {
            v82 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
            v82 = v81 + 344;
            a7[1] = v81 + 344;
          }
          a7[1] = v82;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          v84 = *(uint64_t **)(a6 + 8);
          v83 = *(_QWORD *)(a6 + 16);
          if ((unint64_t)v84 >= v83)
          {
            v86 = *(uint64_t **)a6;
            v87 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v84 - *(_QWORD *)a6) >> 3);
            v88 = v87 + 1;
            if (v87 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v89 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v83 - (_QWORD)v86) >> 3);
            if (2 * v89 > v88)
              v88 = 2 * v89;
            if (v89 >= 0x333333333333333)
              v90 = 0x666666666666666;
            else
              v90 = v88;
            if (v90)
            {
              v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v179, v90);
              v86 = *(uint64_t **)a6;
              v84 = *(uint64_t **)(a6 + 8);
            }
            else
            {
              v91 = 0;
            }
            v92 = (uint64_t *)&v91[40 * v87];
            *v92 = v193;
            v92[1] = v188;
            v92[2] = v13;
            v92[3] = v192;
            v92[4] = v191;
            v93 = v92;
            if (v84 != v86)
            {
              do
              {
                v94 = *(_OWORD *)(v84 - 5);
                v95 = *(_OWORD *)(v84 - 3);
                *(v93 - 1) = *(v84 - 1);
                *(_OWORD *)(v93 - 3) = v95;
                *(_OWORD *)(v93 - 5) = v94;
                v93 -= 5;
                v84 -= 5;
              }
              while (v84 != v86);
              v86 = *(uint64_t **)a6;
            }
            v85 = v92 + 5;
            *(_QWORD *)a6 = v93;
            *(_QWORD *)(a6 + 8) = v92 + 5;
            *(_QWORD *)(a6 + 16) = &v91[40 * v90];
            if (v86)
              operator delete(v86);
          }
          else
          {
            *v84 = v193;
            v84[1] = v188;
            v84[2] = v13;
            v84[3] = v192;
            v85 = v84 + 5;
            v84[4] = v191;
          }
          *(_QWORD *)(a6 + 8) = v85;
          v215 = off_24C017CA0;
          if (*(char *)(a2 + 31) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v216, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
          }
          else
          {
            v216 = *(_OWORD *)(a2 + 8);
            *(_QWORD *)&v217 = *(_QWORD *)(a2 + 24);
          }
          DWORD2(v217) = *(_DWORD *)(a2 + 32);
          *(_QWORD *)&v219 = 0;
          v218 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v218, *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
          v215 = (void (**)(ZinIrUnitInfo *__hidden))&unk_24C01CC78;
          v96 = *(_OWORD *)(a2 + 96);
          v221 = *(_OWORD *)(a2 + 80);
          v222 = v96;
          v224 = *(_DWORD *)(a2 + 160);
          *(_OWORD *)&v223[32] = *(_OWORD *)(a2 + 144);
          *(_QWORD *)&v222 = v13;
          *((_QWORD *)&v222 + 1) = 1;
          *(_QWORD *)v223 = 0x100000001;
          *(_DWORD *)&v223[8] = 1;
          memset(&v223[12], 0, 24);
          HIDWORD(v219) = a1;
          *((_QWORD *)&v221 + 1) = 1;
          v220 = 1;
          DWORD2(v219) = a1;
          DWORD2(v217) = 2;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrPoolUnitInfo *)&v215);
          v97 = a7[1];
          if (v97 >= a7[2])
          {
            v98 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
            v98 = v97 + 344;
            a7[1] = v97 + 344;
          }
          a7[1] = v98;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          v100 = *(uint64_t **)(a6 + 8);
          v99 = *(_QWORD *)(a6 + 16);
          if ((unint64_t)v100 >= v99)
          {
            v102 = *(uint64_t **)a6;
            v103 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v100 - *(_QWORD *)a6) >> 3);
            v104 = v103 + 1;
            if (v103 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v105 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v99 - (_QWORD)v102) >> 3);
            if (2 * v105 > v104)
              v104 = 2 * v105;
            if (v105 >= 0x333333333333333)
              v106 = 0x666666666666666;
            else
              v106 = v104;
            if (v106)
            {
              v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v179, v106);
              v102 = *(uint64_t **)a6;
              v100 = *(uint64_t **)(a6 + 8);
            }
            else
            {
              v107 = 0;
            }
            v108 = (uint64_t *)&v107[40 * v103];
            *v108 = v193;
            v108[1] = v189;
            v108[2] = v13;
            v108[3] = v192;
            v108[4] = v191;
            v109 = v108;
            if (v100 != v102)
            {
              do
              {
                v110 = *(_OWORD *)(v100 - 5);
                v111 = *(_OWORD *)(v100 - 3);
                *(v109 - 1) = *(v100 - 1);
                *(_OWORD *)(v109 - 3) = v111;
                *(_OWORD *)(v109 - 5) = v110;
                v109 -= 5;
                v100 -= 5;
              }
              while (v100 != v102);
              v102 = *(uint64_t **)a6;
            }
            v101 = v108 + 5;
            *(_QWORD *)a6 = v109;
            *(_QWORD *)(a6 + 8) = v108 + 5;
            *(_QWORD *)(a6 + 16) = &v107[40 * v106];
            if (v102)
              operator delete(v102);
          }
          else
          {
            *v100 = v193;
            v100[1] = v189;
            v100[2] = v13;
            v100[3] = v192;
            v101 = v100 + 5;
            v100[4] = v191;
          }
          *(_QWORD *)(a6 + 8) = v101;
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v215);
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v194);
          if (v187 < ++v65)
            break;
          v64 = v65 * v178;
        }
        while (v181 - v65 * v178 >= v13);
        v175 = v192;
        v176 = v191;
        v174 = v193;
      }
      v216 = 0uLL;
      *(_QWORD *)&v217 = 0;
      *(_QWORD *)&v219 = 0;
      v218 = 0uLL;
      v220 = -1;
      v215 = off_24C01EAB0;
      BYTE4(v221) = 0;
      LODWORD(v221) = 3;
      DWORD2(v217) = 3;
      DWORD2(v219) = a1;
      HIDWORD(v219) = a1;
      ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v215);
      v112 = a7[1];
      if (v112 >= a7[2])
      {
        v113 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
      }
      else
      {
        LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
        v113 = v112 + 344;
        a7[1] = v112 + 344;
      }
      a7[1] = v113;
      LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
      v115 = *(_QWORD *)(a6 + 8);
      v114 = *(_QWORD *)(a6 + 16);
      if (v115 >= v114)
      {
        v117 = *(uint64_t **)a6;
        v118 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v115 - *(_QWORD *)a6) >> 3);
        v119 = v118 + 1;
        if (v118 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v120 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v114 - (_QWORD)v117) >> 3);
        if (2 * v120 > v119)
          v119 = 2 * v120;
        if (v120 >= 0x333333333333333)
          v121 = 0x666666666666666;
        else
          v121 = v119;
        if (v121)
        {
          v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v179, v121);
          v117 = *(uint64_t **)a6;
          v115 = *(_QWORD *)(a6 + 8);
        }
        else
        {
          v122 = 0;
        }
        v123 = &v122[40 * v118];
        *(_QWORD *)v123 = v174;
        *(int64x2_t *)(v123 + 8) = vdupq_n_s64(1uLL);
        *((_QWORD *)v123 + 3) = v175;
        *((_QWORD *)v123 + 4) = v176;
        v124 = v123;
        if ((uint64_t *)v115 != v117)
        {
          do
          {
            v125 = *(_OWORD *)(v115 - 40);
            v126 = *(_OWORD *)(v115 - 24);
            *((_QWORD *)v124 - 1) = *(_QWORD *)(v115 - 8);
            *(_OWORD *)(v124 - 24) = v126;
            *(_OWORD *)(v124 - 40) = v125;
            v124 -= 40;
            v115 -= 40;
          }
          while ((uint64_t *)v115 != v117);
          v117 = *(uint64_t **)a6;
        }
        v116 = v123 + 40;
        *(_QWORD *)a6 = v124;
        *(_QWORD *)(a6 + 8) = v123 + 40;
        *(_QWORD *)(a6 + 16) = &v122[40 * v121];
        if (v117)
          operator delete(v117);
      }
      else
      {
        *(_QWORD *)v115 = v174;
        *(int64x2_t *)(v115 + 8) = vdupq_n_s64(1uLL);
        *(_QWORD *)(v115 + 24) = v175;
        *(_QWORD *)(v115 + 32) = v176;
        v116 = (char *)(v115 + 40);
      }
      *(_QWORD *)(a6 + 8) = v116;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v215);
      v63 = v173 + 1;
      if (v172 < (v173 + 1))
        break;
      v184 = v63 * v171;
    }
    while (v170 - v63 * v171 >= v189);
    v62 = v187 + 1;
  }
  else
  {
    v176 = 1;
    v175 = 1;
    v174 = 1;
    v62 = 1;
  }
  v196 = 0;
  v197 = 0;
  v199 = 0u;
  v200 = 0u;
  v201 = -1;
  v194 = off_24C01EAB0;
  v195 = 0;
  LOBYTE(v203) = 0;
  v198 = 3;
  v202 = 2;
  ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v194);
  v127 = a7[1];
  if (v127 >= a7[2])
  {
    v128 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
  }
  else
  {
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
    v128 = v127 + 344;
    a7[1] = v127 + 344;
  }
  a7[1] = v128;
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
  v130 = *(uint64_t **)(a6 + 8);
  v129 = *(uint64_t **)(a6 + 16);
  if (v130 >= v129)
  {
    v132 = *(uint64_t **)a6;
    v133 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v130 - *(_QWORD *)a6) >> 3);
    v134 = v133 + 1;
    if (v133 + 1 > 0x666666666666666)
      goto LABEL_215;
    v135 = 0xCCCCCCCCCCCCCCCDLL * (v129 - v132);
    if (2 * v135 > v134)
      v134 = 2 * v135;
    if (v135 >= 0x333333333333333)
      v136 = 0x666666666666666;
    else
      v136 = v134;
    if (v136)
    {
      v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v179, v136);
      v132 = *(uint64_t **)a6;
      v130 = *(uint64_t **)(a6 + 8);
    }
    else
    {
      v137 = 0;
    }
    v138 = (uint64_t *)&v137[40 * v133];
    *v138 = v174;
    v138[1] = 1;
    v129 = (uint64_t *)&v137[40 * v136];
    v138[2] = v62;
    v138[3] = v175;
    v138[4] = v176;
    v131 = v138 + 5;
    if (v130 != v132)
    {
      do
      {
        v139 = *(_OWORD *)(v130 - 5);
        v140 = *(_OWORD *)(v130 - 3);
        *(v138 - 1) = *(v130 - 1);
        *(_OWORD *)(v138 - 3) = v140;
        *(_OWORD *)(v138 - 5) = v139;
        v138 -= 5;
        v130 -= 5;
      }
      while (v130 != v132);
      v132 = *(uint64_t **)a6;
    }
    *(_QWORD *)a6 = v138;
    *(_QWORD *)(a6 + 8) = v131;
    *(_QWORD *)(a6 + 16) = v129;
    if (v132)
    {
      operator delete(v132);
      v129 = *v179;
    }
  }
  else
  {
    *v130 = v174;
    v130[1] = 1;
    v130[2] = v62;
    v130[3] = v175;
    v131 = v130 + 5;
    v130[4] = v176;
  }
  v141 = v172 + 1;
  *(_QWORD *)(a6 + 8) = v131;
  if (v131 >= v129)
  {
    v143 = *(uint64_t **)a6;
    v144 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v131 - *(_QWORD *)a6) >> 3);
    v145 = v144 + 1;
    if (v144 + 1 <= 0x666666666666666)
    {
      v146 = 0xCCCCCCCCCCCCCCCDLL * (v129 - v143);
      if (2 * v146 > v145)
        v145 = 2 * v146;
      if (v146 >= 0x333333333333333)
        v147 = 0x666666666666666;
      else
        v147 = v145;
      if (v147)
      {
        v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v179, v147);
        v143 = *(uint64_t **)a6;
        v131 = *(uint64_t **)(a6 + 8);
      }
      else
      {
        v148 = 0;
      }
      v149 = (uint64_t *)&v148[40 * v144];
      *v149 = v174;
      v149[1] = v141;
      v150 = &v148[40 * v147];
      v149[2] = v62;
      v149[3] = v175;
      v149[4] = v176;
      v142 = v149 + 5;
      if (v131 != v143)
      {
        do
        {
          v151 = *(_OWORD *)(v131 - 5);
          v152 = *(_OWORD *)(v131 - 3);
          *(v149 - 1) = *(v131 - 1);
          *(_OWORD *)(v149 - 3) = v152;
          *(_OWORD *)(v149 - 5) = v151;
          v149 -= 5;
          v131 -= 5;
        }
        while (v131 != v143);
        v143 = *(uint64_t **)a6;
      }
      *(_QWORD *)a6 = v149;
      *(_QWORD *)(a6 + 8) = v142;
      *(_QWORD *)(a6 + 16) = v150;
      if (v143)
        operator delete(v143);
      goto LABEL_184;
    }
LABEL_215:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  *v131 = v174;
  v131[1] = v141;
  v131[2] = v62;
  v131[3] = v175;
  v142 = v131 + 5;
  v131[4] = v176;
LABEL_184:
  *(_QWORD *)(a6 + 8) = v142;
  DWORD2(v217) = 0;
  *(_QWORD *)&v217 = 0;
  v218 = 0u;
  v219 = 0u;
  v215 = off_24C021A98;
  v216 = 0uLL;
  v220 = -1;
  v221 = 0uLL;
  *(_QWORD *)&v222 = 0;
  v153 = (char *)operator new(0x10uLL);
  *(_OWORD *)v153 = xmmword_207A7F690;
  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v221, v153, (uint64_t)(v153 + 16), 2uLL);
  DWORD2(v217) = 21;
  DWORD2(v219) = a1;
  HIDWORD(v219) = a1;
  ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)__src, (ZinIrTransposeUnitInfo *)&v215);
  v154 = a7[1];
  if (v154 >= a7[2])
  {
    v155 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
  }
  else
  {
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
    v155 = v154 + 344;
    a7[1] = v154 + 344;
  }
  a7[1] = v155;
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
  v157 = *(uint64_t **)(a6 + 8);
  v156 = *(_QWORD *)(a6 + 16);
  if ((unint64_t)v157 >= v156)
  {
    v159 = *(uint64_t **)a6;
    v160 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v157 - *(_QWORD *)a6) >> 3);
    v161 = v160 + 1;
    if (v160 + 1 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v162 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v156 - (_QWORD)v159) >> 3);
    if (2 * v162 > v161)
      v161 = 2 * v162;
    if (v162 >= 0x333333333333333)
      v163 = 0x666666666666666;
    else
      v163 = v161;
    if (v163)
    {
      v164 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v179, v163);
      v159 = *(uint64_t **)a6;
      v157 = *(uint64_t **)(a6 + 8);
    }
    else
    {
      v164 = 0;
    }
    v165 = (uint64_t *)&v164[40 * v160];
    *v165 = v174;
    v165[1] = v175;
    v166 = &v164[40 * v163];
    v165[2] = v62;
    v165[3] = v141;
    v165[4] = v176;
    v158 = v165 + 5;
    if (v157 != v159)
    {
      do
      {
        v167 = *(_OWORD *)(v157 - 5);
        v168 = *(_OWORD *)(v157 - 3);
        *(v165 - 1) = *(v157 - 1);
        *(_OWORD *)(v165 - 3) = v168;
        *(_OWORD *)(v165 - 5) = v167;
        v165 -= 5;
        v157 -= 5;
      }
      while (v157 != v159);
      v159 = *(uint64_t **)a6;
    }
    *(_QWORD *)a6 = v165;
    *(_QWORD *)(a6 + 8) = v158;
    *(_QWORD *)(a6 + 16) = v166;
    if (v159)
      operator delete(v159);
  }
  else
  {
    *v157 = v174;
    v157[1] = v175;
    v157[2] = v62;
    v157[3] = v141;
    v158 = v157 + 5;
    v157[4] = v176;
  }
  *(_QWORD *)(a6 + 8) = v158;
  operator delete(v153);
  v215 = off_24C021A98;
  if ((_QWORD)v221)
  {
    *((_QWORD *)&v221 + 1) = v221;
    operator delete((void *)v221);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v215);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v194);
  operator delete(v45);
  v205[0] = off_24C021A98;
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v205);
  return 0;
}

void sub_206EA25E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)&STACK[0x2B8]);
  ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&a67);
  _Unwind_Resume(a1);
}

uint64_t ZinConvPoolLargeStride::DecomposeLargeStrideConv(int a1, ZinConvLayerUtils *this, uint64_t a3, int64x2_t *a4, uint64_t a5, int64x2_t **a6, uint64_t *a7)
{
  ZinConvLayerUtils *v11;
  uint64_t i;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t *v26;
  int64x2_t *v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  int64x2_t *v36;
  int64x2_t *v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t *v40;
  int64x2_t *v41;
  int64x2_t v42;
  int64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64x2_t *v52;
  int64x2_t *v53;
  int64x2_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int64x2_t *v61;
  int64x2_t v62;
  int64x2_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int64x2_t *v67;
  int64x2_t *v68;
  int64x2_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  int64x2_t *v76;
  int64x2_t v77;
  int64x2_t v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int64x2_t *v83;
  int64x2_t *v84;
  int64x2_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  int64x2_t *v92;
  int64x2_t v93;
  int64x2_t v94;
  unint64_t v95;
  uint64_t v96;
  int64x2_t *v97;
  int64x2_t *v98;
  int64x2_t *v99;
  int64x2_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  int64x2_t v106;
  int64x2_t *v107;
  int64x2_t *v108;
  int64x2_t v109;
  int64x2_t v110;
  unint64_t v111;
  uint64_t v112;
  int64x2_t *v113;
  int64x2_t *v114;
  int64x2_t v115;
  int64x2_t *v116;
  int64x2_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  int64x2_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  int64x2_t *v128;
  int64x2_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  int64x2_t *v135;
  int64x2_t *v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  ZinIrKernelUnitInfo *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (**v162)(ZinIrKernelUnitInfo *__hidden);
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[32];
  unint64_t v172;
  int v173;
  int v174;
  int v175;
  _BYTE v176[20];
  void *__p;
  void *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _BYTE v184[28];
  void *v185[4];
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  _DWORD __src[2];
  void (**v197)(ZinIrConvUnitInfo *__hidden);
  int v198;
  int v199;
  _OWORD v200[18];
  _OWORD v201[2];
  uint64_t v202;

  v11 = this;
  v202 = *MEMORY[0x24BDAC8D0];
  v13 = *a7;
  for (i = a7[1];
        i != v13;
  a7[1] = v13;
  a6[1] = *a6;
  if (!*(_BYTE *)(a3 + 1880))
    ZinAssertImpl("Error: decomposition failed as transpose is not supported");
  v157 = *((_QWORD *)v11 + 32);
  v142 = *((int *)v11 + 73);
  v14 = *((_DWORD *)v11 + 76);
  v15 = *((_DWORD *)v11 + 77);
  v16 = *((_DWORD *)v11 + 78);
  v153 = *((_DWORD *)v11 + 79);
  v17 = *((_DWORD *)v11 + 80);
  v18 = *((_DWORD *)v11 + 81);
  v19 = *((_DWORD *)v11 + 82);
  v160 = a4->i64[0];
  v161 = *((_QWORD *)v11 + 33);
  v149 = a4[1].i64[0];
  v150 = *((int *)v11 + 74);
  v155 = a4[1].i64[1];
  v158 = a4[2].i64[0];
  v159 = a4->i64[1];
  ZinConvLayerUtils::CheckDecomposabilityForKernelWithLargeStrides(v11, this);
  v147 = v11;
  if (__PAIR64__(v15, v14) || v16 || v153 || v18 || v17)
  {
    v179 = 0u;
    *(_OWORD *)&v176[4] = 0u;
    *(_QWORD *)&v166 = 0;
    v165 = 0u;
    v164 = 0u;
    v163 = 0u;
    v167 = -1;
    v168 = 0u;
    v169 = 0u;
    v170 = 0u;
    memset(v171, 0, 28);
    v162 = &off_24C01BAC0;
    *(_QWORD *)&v176[8] = 0;
    *(_QWORD *)v176 = 0;
    __p = 0;
    v178 = 0;
    WORD4(v179) = 0;
    *(_QWORD *)&v179 = 0;
    *(_DWORD *)&v171[28] = v14;
    v172 = __PAIR64__(v16, v15);
    v173 = v153;
    v174 = v17;
    v175 = v18;
    DWORD2(v164) = 44;
    DWORD2(v166) = a1;
    HIDWORD(v166) = a1;
    __src[0] = 4;
    __src[1] = v19;
    LODWORD(v197) = 3;
    HIDWORD(v197) = v19;
    v198 = 2;
    v199 = v19;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__p, (char *)__src, (uint64_t)v200, 3uLL);
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src, (ZinIrPadUnitInfo *)&v162);
    v20 = a7[1];
    if (v20 >= a7[2])
    {
      v21 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
    }
    else
    {
      LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
      v21 = v20 + 344;
      a7[1] = v20 + 344;
    }
    a7[1] = v21;
    LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
    v22 = *(int *)&v171[28];
    v23 = (int)v172;
    v24 = SHIDWORD(v172);
    v25 = v173;
    v26 = a6[2];
    v27 = a6[1];
    if (v27 >= v26)
    {
      v151 = *(int *)&v171[28];
      v31 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v27 - (char *)*a6) >> 3);
      v32 = v31 + 1;
      if (v31 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v33 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v26 - (char *)*a6) >> 3);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x333333333333333)
        v34 = 0x666666666666666;
      else
        v34 = v32;
      if (v34)
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a6 + 2), v34);
      else
        v35 = 0;
      v36 = (int64x2_t *)&v35[40 * v31];
      v37 = (int64x2_t *)&v35[40 * v34];
      v38 = *a4;
      v39 = a4[1];
      v36[2].i64[0] = a4[2].i64[0];
      *v36 = v38;
      v36[1] = v39;
      v30 = (int64x2_t *)((char *)v36 + 40);
      v41 = *a6;
      v40 = a6[1];
      if (v40 != *a6)
      {
        do
        {
          v42 = *(int64x2_t *)((char *)v40 - 40);
          v43 = *(int64x2_t *)((char *)v40 - 24);
          v36[-1].i64[1] = v40[-1].i64[1];
          *(int64x2_t *)((char *)v36 - 24) = v43;
          *(int64x2_t *)((char *)v36 - 40) = v42;
          v36 = (int64x2_t *)((char *)v36 - 40);
          v40 = (int64x2_t *)((char *)v40 - 40);
        }
        while (v40 != v41);
        v40 = *a6;
      }
      *a6 = v36;
      a6[1] = v30;
      a6[2] = v37;
      if (v40)
        operator delete(v40);
      v22 = v151;
    }
    else
    {
      v28 = *a4;
      v29 = a4[1];
      v27[2].i64[0] = a4[2].i64[0];
      *v27 = v28;
      v27[1] = v29;
      v30 = (int64x2_t *)((char *)v27 + 40);
    }
    v155 += v23 + v22;
    v149 += v25 + v24;
    a6[1] = v30;
    v162 = &off_24C01BAC0;
    if (__p)
    {
      v178 = __p;
      operator delete(__p);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v162);
    v11 = v147;
  }
  v44 = (int)v15 + (uint64_t)(int)v14 + a4[1].i64[1];
  v143 = (v44 - v157) / v142;
  if (v143 < 0 || v44 < v157)
  {
    v45 = 1;
  }
  else
  {
    v46 = 0;
    v47 = v161;
    v148 = v153 + (uint64_t)(int)v16 + a4[1].i64[0];
    v152 = 0;
    v154 = (v148 - v161) / v150;
    v145 = (uint64_t)(a6 + 2);
    v140 = vdupq_n_s64(1uLL);
    v141 = (int)v15 + (uint64_t)(int)v14 + a4[1].i64[1];
    do
    {
      v144 = v46;
      if ((v154 & 0x8000000000000000) == 0)
      {
        v48 = 0;
        do
        {
          if (v148 - v48 * v150 < v47)
            break;
          memset(&v185[1], 0, 24);
          v188 = 0;
          v189 = 0;
          v187 = 0;
          v192 = -1;
          v185[0] = off_24C021970;
          v193 = v48 * v150;
          v194 = v47;
          v195 = 0x300000001;
          v186 = 17;
          v190 = a1;
          v191 = a1;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)v185);
          v49 = a7[1];
          if (v49 >= a7[2])
          {
            v50 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
            v50 = v49 + 344;
            a7[1] = v49 + 344;
          }
          a7[1] = v50;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          v52 = a6[1];
          v51 = (unint64_t)a6[2];
          if ((unint64_t)v52 >= v51)
          {
            v54 = *a6;
            v55 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v52 - (char *)*a6) >> 3);
            v56 = v55 + 1;
            if (v55 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - (_QWORD)v54) >> 3);
            if (2 * v57 > v56)
              v56 = 2 * v57;
            if (v57 >= 0x333333333333333)
              v58 = 0x666666666666666;
            else
              v58 = v56;
            if (v58)
            {
              v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v145, v58);
              v54 = *a6;
              v52 = a6[1];
            }
            else
            {
              v59 = 0;
            }
            v60 = &v59[40 * v55];
            *(_QWORD *)v60 = v160;
            *((_QWORD *)v60 + 1) = v159;
            *((_QWORD *)v60 + 2) = v149;
            *((_QWORD *)v60 + 3) = v155;
            *((_QWORD *)v60 + 4) = v158;
            v61 = (int64x2_t *)v60;
            if (v52 != v54)
            {
              do
              {
                v62 = *(int64x2_t *)((char *)v52 - 40);
                v63 = *(int64x2_t *)((char *)v52 - 24);
                v61[-1].i64[1] = v52[-1].i64[1];
                *(int64x2_t *)((char *)v61 - 24) = v63;
                *(int64x2_t *)((char *)v61 - 40) = v62;
                v61 = (int64x2_t *)((char *)v61 - 40);
                v52 = (int64x2_t *)((char *)v52 - 40);
              }
              while (v52 != v54);
              v54 = *a6;
            }
            v53 = (int64x2_t *)(v60 + 40);
            *a6 = v61;
            a6[1] = (int64x2_t *)(v60 + 40);
            a6[2] = (int64x2_t *)&v59[40 * v58];
            if (v54)
              operator delete(v54);
          }
          else
          {
            v52->i64[0] = v160;
            v52->i64[1] = v159;
            v52[1].i64[0] = v149;
            v52[1].i64[1] = v155;
            v53 = (int64x2_t *)((char *)v52 + 40);
            v52[2].i64[0] = v158;
          }
          a6[1] = v53;
          v193 = v152;
          v194 = v157;
          HIDWORD(v195) = 4;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)v185);
          v64 = a7[1];
          if (v64 >= a7[2])
          {
            v65 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
            v65 = v64 + 344;
            a7[1] = v64 + 344;
          }
          a7[1] = v65;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          v67 = a6[1];
          v66 = (unint64_t)a6[2];
          if ((unint64_t)v67 >= v66)
          {
            v69 = *a6;
            v70 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v67 - (char *)*a6) >> 3);
            v71 = v70 + 1;
            if (v70 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v72 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (_QWORD)v69) >> 3);
            if (2 * v72 > v71)
              v71 = 2 * v72;
            if (v72 >= 0x333333333333333)
              v73 = 0x666666666666666;
            else
              v73 = v71;
            if (v73)
            {
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v145, v73);
              v69 = *a6;
              v67 = a6[1];
            }
            else
            {
              v74 = 0;
            }
            v75 = &v74[40 * v70];
            *(_QWORD *)v75 = v160;
            *((_QWORD *)v75 + 1) = v159;
            *((_QWORD *)v75 + 2) = v161;
            *((_QWORD *)v75 + 3) = v155;
            *((_QWORD *)v75 + 4) = v158;
            v76 = (int64x2_t *)v75;
            if (v67 != v69)
            {
              do
              {
                v77 = *(int64x2_t *)((char *)v67 - 40);
                v78 = *(int64x2_t *)((char *)v67 - 24);
                v76[-1].i64[1] = v67[-1].i64[1];
                *(int64x2_t *)((char *)v76 - 24) = v78;
                *(int64x2_t *)((char *)v76 - 40) = v77;
                v76 = (int64x2_t *)((char *)v76 - 40);
                v67 = (int64x2_t *)((char *)v67 - 40);
              }
              while (v67 != v69);
              v69 = *a6;
            }
            v68 = (int64x2_t *)(v75 + 40);
            *a6 = v76;
            a6[1] = (int64x2_t *)(v75 + 40);
            a6[2] = (int64x2_t *)&v74[40 * v73];
            if (v69)
              operator delete(v69);
          }
          else
          {
            v67->i64[0] = v160;
            v67->i64[1] = v159;
            v67[1].i64[0] = v161;
            v67[1].i64[1] = v155;
            v68 = (int64x2_t *)((char *)v67 + 40);
            v67[2].i64[0] = v158;
          }
          a6[1] = v68;
          ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v162, v147);
          v162 = off_24C01CAD8;
          *(_QWORD *)&v183 = *((_QWORD *)v11 + 36);
          v79 = *((_OWORD *)v11 + 16);
          v180 = *((_OWORD *)v11 + 15);
          v181 = v79;
          v182 = *((_OWORD *)v11 + 17);
          DWORD1(v183) = 1;
          *((_QWORD *)&v183 + 1) = 0x100000001;
          memset(v184, 0, 24);
          *(_DWORD *)&v184[24] = *((_DWORD *)v147 + 82);
          DWORD2(v164) = 1;
          DWORD2(v166) = a1;
          v167 = a5;
          *(_QWORD *)&v182 = *((_QWORD *)v11 + 34);
          v181 = *((_OWORD *)v11 + 16);
          __src[0] = 1;
          ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v197, (const ZinIrKernelUnitInfo *)&v162);
          v197 = off_24C01CAD8;
          v200[16] = v182;
          v200[17] = v183;
          v201[0] = *(_OWORD *)v184;
          *(_OWORD *)((char *)v201 + 12) = *(_OWORD *)&v184[12];
          v200[14] = v180;
          v200[15] = v181;
          v80 = a7[1];
          if (v80 >= a7[2])
          {
            v81 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
            v81 = v80 + 344;
            a7[1] = v80 + 344;
          }
          a7[1] = v81;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          v83 = a6[1];
          v82 = (unint64_t)a6[2];
          if ((unint64_t)v83 >= v82)
          {
            v85 = *a6;
            v86 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v83 - (char *)*a6) >> 3);
            v87 = v86 + 1;
            if (v86 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v88 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v82 - (_QWORD)v85) >> 3);
            if (2 * v88 > v87)
              v87 = 2 * v88;
            if (v88 >= 0x333333333333333)
              v89 = 0x666666666666666;
            else
              v89 = v87;
            if (v89)
            {
              v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v145, v89);
              v85 = *a6;
              v83 = a6[1];
            }
            else
            {
              v90 = 0;
            }
            v91 = &v90[40 * v86];
            *(_QWORD *)v91 = v160;
            *((_QWORD *)v91 + 1) = v159;
            *((_QWORD *)v91 + 2) = v161;
            *((_QWORD *)v91 + 3) = v157;
            *((_QWORD *)v91 + 4) = v158;
            v92 = (int64x2_t *)v91;
            if (v83 != v85)
            {
              do
              {
                v93 = *(int64x2_t *)((char *)v83 - 40);
                v94 = *(int64x2_t *)((char *)v83 - 24);
                v92[-1].i64[1] = v83[-1].i64[1];
                *(int64x2_t *)((char *)v92 - 24) = v94;
                *(int64x2_t *)((char *)v92 - 40) = v93;
                v92 = (int64x2_t *)((char *)v92 - 40);
                v83 = (int64x2_t *)((char *)v83 - 40);
              }
              while (v83 != v85);
              v85 = *a6;
            }
            v84 = (int64x2_t *)(v91 + 40);
            *a6 = v92;
            a6[1] = (int64x2_t *)(v91 + 40);
            a6[2] = (int64x2_t *)&v90[40 * v89];
            if (v85)
              operator delete(v85);
          }
          else
          {
            v83->i64[0] = v160;
            v83->i64[1] = v159;
            v83[1].i64[0] = v161;
            v83[1].i64[1] = v157;
            v84 = (int64x2_t *)((char *)v83 + 40);
            v83[2].i64[0] = v158;
          }
          a6[1] = v84;
          v162 = off_24C01ED88;
          if (*(_QWORD *)&v171[24])
          {
            v172 = *(_QWORD *)&v171[24];
            operator delete(*(void **)&v171[24]);
          }
          if (*(_QWORD *)v171)
          {
            *(_QWORD *)&v171[8] = *(_QWORD *)v171;
            operator delete(*(void **)v171);
          }
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v162);
          ZinIrUnitInfo::~ZinIrUnitInfo(v185);
          ++v48;
          v47 = v161;
        }
        while (v154 >= v48);
      }
      v163 = 0uLL;
      *(_QWORD *)&v164 = 0;
      *(_QWORD *)&v166 = 0;
      v165 = 0uLL;
      v167 = -1;
      v162 = off_24C01EAB0;
      BYTE4(v168) = 0;
      LODWORD(v168) = 3;
      DWORD2(v164) = 3;
      DWORD2(v166) = a1;
      HIDWORD(v166) = a1;
      ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v162);
      v95 = a7[1];
      if (v95 >= a7[2])
      {
        v96 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
      }
      else
      {
        LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
        v96 = v95 + 344;
        a7[1] = v95 + 344;
      }
      a7[1] = v96;
      LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
      v98 = a6[1];
      v97 = a6[2];
      if (v98 >= v97)
      {
        v100 = *a6;
        v101 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v98 - (char *)*a6) >> 3);
        v102 = v101 + 1;
        if (v101 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v103 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v97 - (char *)v100) >> 3);
        if (2 * v103 > v102)
          v102 = 2 * v103;
        if (v103 >= 0x333333333333333)
          v104 = 0x666666666666666;
        else
          v104 = v102;
        if (v104)
        {
          v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v145, v104);
          v100 = *a6;
          v98 = a6[1];
        }
        else
        {
          v105 = 0;
        }
        v106 = vdupq_n_s64(1uLL);
        v107 = (int64x2_t *)&v105[40 * v101];
        *v107 = v106;
        v107[1] = v106;
        v107[2].i64[0] = 1;
        v108 = v107;
        if (v98 != v100)
        {
          do
          {
            v109 = *(int64x2_t *)((char *)v98 - 40);
            v110 = *(int64x2_t *)((char *)v98 - 24);
            v108[-1].i64[1] = v98[-1].i64[1];
            *(int64x2_t *)((char *)v108 - 24) = v110;
            *(int64x2_t *)((char *)v108 - 40) = v109;
            v108 = (int64x2_t *)((char *)v108 - 40);
            v98 = (int64x2_t *)((char *)v98 - 40);
          }
          while (v98 != v100);
          v100 = *a6;
        }
        v99 = (int64x2_t *)((char *)v107 + 40);
        *a6 = v108;
        a6[1] = (int64x2_t *)((char *)v107 + 40);
        a6[2] = (int64x2_t *)&v105[40 * v104];
        if (v100)
          operator delete(v100);
      }
      else
      {
        *v98 = v140;
        v98[1] = v140;
        v99 = (int64x2_t *)((char *)v98 + 40);
        v98[2].i64[0] = 1;
      }
      a6[1] = v99;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v162);
      v46 = v144 + 1;
      if (v143 < (v144 + 1))
        break;
      v152 = v46 * v142;
      v47 = v161;
    }
    while (v141 - v46 * v142 >= v157);
    v45 = v154 + 1;
  }
  *(_QWORD *)&v164 = 0;
  v165 = 0u;
  v166 = 0u;
  v167 = -1;
  v162 = off_24C01EAB0;
  v163 = 0uLL;
  BYTE4(v168) = 0;
  DWORD2(v164) = 3;
  LODWORD(v168) = 4;
  ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v162);
  v111 = a7[1];
  if (v111 >= a7[2])
  {
    v112 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
  }
  else
  {
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
    v112 = v111 + 344;
    a7[1] = v111 + 344;
  }
  a7[1] = v112;
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
  v113 = a6[2];
  v114 = a6[1];
  if (v114 >= v113)
  {
    v117 = *a6;
    v118 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v114 - (char *)*a6) >> 3);
    v119 = v118 + 1;
    if (v118 + 1 > 0x666666666666666)
      goto LABEL_165;
    v120 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v113 - (char *)v117) >> 3);
    if (2 * v120 > v119)
      v119 = 2 * v120;
    if (v120 >= 0x333333333333333)
      v121 = 0x666666666666666;
    else
      v121 = v119;
    if (v121)
    {
      v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a6 + 2), v121);
      v117 = *a6;
      v114 = a6[1];
    }
    else
    {
      v122 = 0;
    }
    v123 = &v122[40 * v118];
    v124 = vdupq_n_s64(1uLL);
    *(int64x2_t *)v123 = v124;
    v113 = (int64x2_t *)&v122[40 * v121];
    *((_QWORD *)v123 + 2) = v45;
    *(int64x2_t *)(v123 + 24) = v124;
    v116 = (int64x2_t *)(v123 + 40);
    if (v114 != v117)
    {
      do
      {
        v125 = *(__int128 *)((char *)&v114[-3] + 8);
        v126 = *(__int128 *)((char *)&v114[-2] + 8);
        *((_QWORD *)v123 - 1) = v114[-1].i64[1];
        *(_OWORD *)(v123 - 24) = v126;
        *(_OWORD *)(v123 - 40) = v125;
        v123 -= 40;
        v114 = (int64x2_t *)((char *)v114 - 40);
      }
      while (v114 != v117);
      v117 = *a6;
    }
    *a6 = (int64x2_t *)v123;
    a6[1] = v116;
    a6[2] = v113;
    if (v117)
    {
      operator delete(v117);
      v113 = a6[2];
    }
  }
  else
  {
    v115 = vdupq_n_s64(1uLL);
    *v114 = v115;
    v114[1].i64[0] = v45;
    *(int64x2_t *)((char *)v114 + 24) = v115;
    v116 = (int64x2_t *)((char *)v114 + 40);
  }
  v127 = v143 + 1;
  a6[1] = v116;
  if (v116 < v113)
  {
    *v116 = vdupq_n_s64(1uLL);
    v116[1].i64[0] = v45;
    v116[1].i64[1] = v127;
    v116[2].i64[0] = 1;
    v128 = (int64x2_t *)((char *)v116 + 40);
    goto LABEL_159;
  }
  v129 = *a6;
  v130 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v116 - (char *)*a6) >> 3);
  v131 = v130 + 1;
  if (v130 + 1 > 0x666666666666666)
LABEL_165:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v132 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v113 - (char *)v129) >> 3);
  if (2 * v132 > v131)
    v131 = 2 * v132;
  if (v132 >= 0x333333333333333)
    v133 = 0x666666666666666;
  else
    v133 = v131;
  if (v133)
  {
    v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a6 + 2), v133);
    v129 = *a6;
    v116 = a6[1];
  }
  else
  {
    v134 = 0;
  }
  v135 = (int64x2_t *)&v134[40 * v130];
  *v135 = vdupq_n_s64(1uLL);
  v136 = (int64x2_t *)&v134[40 * v133];
  v135[1].i64[0] = v45;
  v135[1].i64[1] = v127;
  v135[2].i64[0] = 1;
  v128 = (int64x2_t *)((char *)v135 + 40);
  if (v116 != v129)
  {
    do
    {
      v137 = *(int64x2_t *)((char *)v116 - 40);
      v138 = *(int64x2_t *)((char *)v116 - 24);
      v135[-1].i64[1] = v116[-1].i64[1];
      *(int64x2_t *)((char *)v135 - 24) = v138;
      *(int64x2_t *)((char *)v135 - 40) = v137;
      v135 = (int64x2_t *)((char *)v135 - 40);
      v116 = (int64x2_t *)((char *)v116 - 40);
    }
    while (v116 != v129);
    v129 = *a6;
  }
  *a6 = v135;
  a6[1] = v128;
  a6[2] = v136;
  if (v129)
    operator delete(v129);
LABEL_159:
  a6[1] = v128;
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v162);
  return 0;
}

void sub_206EA37E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)&STACK[0x2B8]);
  ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&a42);
  _Unwind_Resume(a1);
}

void ZinLargeStridePoolTransform::~ZinLargeStridePoolTransform(ZinLargeStridePoolTransform *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = off_24C0244E8;
  v3 = (void **)((char *)this + 208);
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 1);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = off_24C0244E8;
  v3 = (void **)((char *)this + 208);
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 1);
  MEMORY[0x20BD002F8](this, 0x10B3C4053614EC0);
}

void ZinLargeStridePoolTransform::ZinLargeStridePoolTransform(ZinLargeStridePoolTransform *this, const ZinLargeStridePoolTransform *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  *(_QWORD *)this = off_24C0244E8;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  }
  else
  {
    v4 = *((_OWORD *)a2 + 1);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 10);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  *((_QWORD *)this + 1) = &unk_24C01CC78;
  v6 = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 88) = v6;
  v7 = *(_OWORD *)((char *)a2 + 120);
  v8 = *(_OWORD *)((char *)a2 + 136);
  v9 = *(_OWORD *)((char *)a2 + 152);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *(_OWORD *)((char *)this + 152) = v9;
  *(_OWORD *)((char *)this + 136) = v8;
  *(_OWORD *)((char *)this + 120) = v7;
  v10 = *((_BYTE *)a2 + 176);
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 176) = v10;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  std::vector<ZinTensorDimensions>::__init_with_size[abi:ne180100]<std::__wrap_iter<ZinTensorDimensions const*>,std::__wrap_iter<ZinTensorDimensions const*>>((_QWORD *)this + 23, *((const void **)a2 + 23), *((_QWORD *)a2 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 3));
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__init_with_size[abi:ne180100]<LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*>((_QWORD *)this + 26, *((_QWORD *)a2 + 26), *((_QWORD *)a2 + 27), 0x82FA0BE82FA0BE83 * ((uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 3));
}

void sub_206EA3A9C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 192) = v5;
    operator delete(v5);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<LargeStrideConvPoolDecomposedDesc>::__init_with_size[abi:ne180100]<LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<LargeStrideConvPoolDecomposedDesc>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<LargeStrideConvPoolDecomposedDesc>,LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206EA3B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<LargeStrideConvPoolDecomposedDesc>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xBE82FA0BE82FA1)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[344 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<LargeStrideConvPoolDecomposedDesc>,LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)(a4 + v7), (const LargeStrideConvPoolDecomposedDesc *)(a2 + v7));
      v7 += 344;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206EA3C14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 344;
    do
    {
      LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)(v4 + v2));
      v2 -= 344;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(uint64_t *a1, const LargeStrideConvPoolDecomposedDesc *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  LargeStrideConvPoolDecomposedDesc *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5F417D05F417D0)
    v9 = 0xBE82FA0BE82FA0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (LargeStrideConvPoolDecomposedDesc *)&v10[344 * v4];
  v16 = &v10[344 * v9];
  LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(v14, a2);
  v15 = (char *)v14 + 344;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<LargeStrideConvPoolDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206EA3D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LargeStrideConvPoolDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LargeStrideConvPoolDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LargeStrideConvPoolDecomposedDesc>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LargeStrideConvPoolDecomposedDesc>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  LargeStrideConvPoolDecomposedDesc *v12;

  v10 = 0;
  v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    v12 = (LargeStrideConvPoolDecomposedDesc *)(v11 + v10);
    v10 -= 344;
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(v12, (const LargeStrideConvPoolDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<LargeStrideConvPoolDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 344;
    LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)(i - 344));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(LargeStrideConvPoolDecomposedDesc *this, ZinIrPadUnitInfo *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  *(_DWORD *)this = 44;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((LargeStrideConvPoolDecomposedDesc *)((char *)this + 8), a2);
  *((_QWORD *)this + 1) = &off_24C01BAC0;
  v4 = *(_OWORD *)((char *)a2 + 156);
  v5 = *(_OWORD *)((char *)a2 + 172);
  v6 = *(_QWORD *)((char *)a2 + 188);
  *((_QWORD *)this + 26) = 0;
  *(_QWORD *)((char *)this + 196) = v6;
  *(_OWORD *)((char *)this + 180) = v5;
  *(_OWORD *)((char *)this + 164) = v4;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 26, *((const void **)a2 + 25), *((_QWORD *)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3);
  *((_WORD *)this + 116) = *((_WORD *)a2 + 112);
}

void sub_206EA3F30(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo *v1;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v1);
  _Unwind_Resume(a1);
}

void ZinConvPoolLargeStride::LargeStridePoolLower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid Large Separate Pool mode\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Large Stride Pool Lower, invalid state\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Large Stride Pool Lower, ref_layer is NULL\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Large Stride Pool Lower, ref_inputview2_layer is NULL\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Large Stride Pool Lower, state should be InputView2State\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Large Stride Pool Lower, concat state is wrong\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinConvPoolLargeStride::LargeStridePoolLower(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "Large Stride Pool Lower, concat1_layers is invalid\n", v3);
}

{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "Large Stride Pool Lower, concat2_layers is invalid\n", v3);
}

uint64_t MirOpt::ReassignTensorDimension::InsertNCTransposesForGlobalReductionPEEW(uint64_t **this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  uint64_t Hal;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  ZinANELayer *v11;
  ZinIrOpLayer *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  ZinIrTensor *v16;
  ZinIrTensor::MirInfo *v17;
  char v18;
  uint64_t v19;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  ZinIrOpLayer *v31;
  char IsNoOp;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  size_t v42;
  _BYTE *v43;
  char *v44;
  std::string *v45;
  __int128 v46;
  void **v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  __n128 v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t Transpose;
  ZinIrOpLayer *v59;
  char *v60;
  void *v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  ZinIrOpLayer **v66;
  char *v67;
  char *v68;
  ZinIrOpLayer *v69;
  std::string::size_type size;
  std::string::size_type v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  ZinIrOpLayer **v76;
  char *v77;
  std::string::size_type v78;
  ZinIrOpLayer *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  ZinIrTensor *v89;
  ZinIrTensor::MirInfo *v90;
  unint64_t *v91;
  unint64_t v92;
  ZinIrOpLayer *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _BOOL4 v97;
  char *v98;
  void *v99;
  int64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  ZinIrOpLayer **v104;
  char *v105;
  char *v106;
  char *v107;
  ZinIrOpLayer *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  ZinIrOpLayer *v113;
  _BOOL4 v114;
  int v115;
  char *v116;
  void *v117;
  int64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  ZinIrOpLayer **v122;
  char *v123;
  char *v124;
  char *v125;
  ZinIrOpLayer *v126;
  char v127;
  _BOOL4 v128;
  _BOOL8 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  _OWORD v140[2];
  int v141;
  ZinIrTensor::MirInfo *v142;
  ZinIrTensor::MirInfo *v143;
  _BYTE v144[32];
  int v145;
  ZinIrOpLayerGraph **v146;
  uint64_t v147;
  _QWORD *v148;
  __int128 v149;
  void *__p[2];
  __int128 v151;
  uint64_t v152;
  std::string v153;
  void *v154[2];
  char *v155;
  char *v156;
  char *v157;
  _QWORD *v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  _QWORD v162[3];
  _QWORD *v163;
  ZinIrOpLayerGraph *v164;
  std::string v165;
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 81)
    return 0;
  v7 = v6;
  if (!*((_QWORD *)a2 + 63)
    || ((*(void (**)(__int128 *__return_ptr, ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 384))(&v159, a2),
        (unint64_t)v159 / *(_QWORD *)(v7 + 960) >= *((_QWORD *)&v159 + 1) / *(_QWORD *)(v7 + 960))
    || *(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 81
    && (v8 = *((_QWORD *)a2 + 25)) != 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 304))(v8) & 1) != 0
    || ((*(uint64_t (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 656))(a2) & 1) != 0
    || ((*(uint64_t (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 640))(a2) & 1) != 0
    || ((*(uint64_t (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 664))(a2) & 1) != 0
    || ((*(uint64_t (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 648))(a2) & 1) != 0
    || ((*(uint64_t (**)(ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 408))(a2) & 1) != 0)
  {
LABEL_12:
    (*(void (**)(__int128 *__return_ptr, ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 384))(&v159, a2);
    if (!*((_QWORD *)a2 + 63)
      || *((_QWORD *)&v159 + 1) <= *(_QWORD *)(v7 + 960)
      || !*(_BYTE *)(*((_QWORD *)a2 + 2) + 668)
      && (*(uint64_t (**)(ZinIrOpLayerGraph *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3) <= 32
      && (*(uint64_t (**)(ZinIrOpLayerGraph *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 4) <= 32
      && (*(uint64_t (**)(ZinIrOpLayerGraph *, uint64_t))(*(_QWORD *)a2 + 368))(a2, 1) == 1)
    {
      return 0;
    }
    v9 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v10 = *(_OWORD *)(v9 + 64);
    v159 = *(_OWORD *)(v9 + 48);
    v160 = v10;
    v161 = *(_QWORD *)(v9 + 80);
    v11 = *(ZinANELayer **)(v7 + 960);
    v162[0] = &unk_24BFFEFE0;
    v162[1] = ZinMirChannelSplit::ComputeOutDims_Default;
    v163 = v162;
    v12 = (ZinIrOpLayer *)ZinMirChannelSplit::ZinSplitLayerByInputChannel(this, a2, v11, &v159, (uint64_t)v162);
    v13 = v163;
    if (v163 == v162)
    {
      v14 = 4;
      v13 = v162;
    }
    else
    {
      if (!v163)
        goto LABEL_23;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_23:
    if (v12)
    {
      v15 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
      v16 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      ZinIrTensor::CopyTensorMirInfo(v16, &v142);
      ZinIrTensor::SetTensorMirInfo(v15, &v142);
      v17 = v142;
      v142 = 0;
      if (v17)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v142, v17);
      memset(v140, 0, sizeof(v140));
      v141 = 1065353216;
      v18 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)this, (uint64_t **)a2, v12, v140);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v140);
      if ((v18 & 1) != 0)
      {
        if (ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, a2, 0))
          return 0;
      }
      else
      {
        v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v21)
          std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v21, v22, v23, v24, v25, v26, v27, v28);
      }
    }
    return 3;
  }
  v29 = *((_QWORD *)a2 + 14);
  if (*((_QWORD *)a2 + 15) != v29)
  {
    v30 = 0;
    do
    {
      v31 = *(ZinIrOpLayer **)(v29 + 8 * v30);
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v151 = 0;
      IsNoOp = ZinIrOpLayer::IsNoOp(v31, (uint64_t *)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((IsNoOp & 1) != 0)
        goto LABEL_12;
      ++v30;
      v29 = *((_QWORD *)a2 + 14);
    }
    while (v30 < (*((_QWORD *)a2 + 15) - v29) >> 3);
  }
  v33 = (char *)operator new(8uLL);
  *(_QWORD *)v33 = 2;
  v157 = v33 + 8;
  v158 = v33 + 8;
  v156 = v33;
  v34 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v158, 2uLL);
  v34[1] = 0x200000000;
  v35 = (char *)(v34 + 1);
  v37 = (char *)&v34[v36];
  v38 = (char *)(v34 + 2);
  v39 = v156;
  v40 = v157;
  if (v157 != v156)
  {
    do
    {
      v41 = *((_QWORD *)v40 - 1);
      v40 -= 8;
      *((_QWORD *)v35 - 1) = v41;
      v35 -= 8;
    }
    while (v40 != v39);
    v39 = v156;
  }
  v156 = v35;
  v157 = v38;
  v158 = v37;
  if (v39)
    operator delete(v39);
  v157 = v38;
  if (*((char *)a2 + 47) >= 0)
    v42 = *((unsigned __int8 *)a2 + 47);
  else
    v42 = *((_QWORD *)a2 + 4);
  v43 = v144;
  std::string::basic_string[abi:ne180100]((uint64_t)v144, v42 + 1);
  if (v144[23] < 0)
    v43 = *(_BYTE **)v144;
  if (v42)
  {
    if (*((char *)a2 + 47) >= 0)
      v44 = (char *)a2 + 24;
    else
      v44 = (char *)*((_QWORD *)a2 + 3);
    memmove(v43, v44, v42);
  }
  *(_WORD *)&v43[v42] = 95;
  std::string::basic_string[abi:ne180100]<0>(&v153, "ntoc");
  v45 = std::string::append(&v153, "_xfm", 4uLL);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v155 = (char *)v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)v154 = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v155) >= 0)
    v47 = v154;
  else
    v47 = (void **)v154[0];
  if (SHIBYTE(v155) >= 0)
    v48 = HIBYTE(v155);
  else
    v48 = (std::string::size_type)v154[1];
  v49 = std::string::append((std::string *)v144, (const std::string::value_type *)v47, v48);
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  *(_QWORD *)&v151 = *((_QWORD *)&v49->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  v51 = ZinObjectNameFactory::ZinObjectNameFactory(&v159, __p);
  if (SBYTE7(v151) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v155) < 0)
    operator delete(v154[0]);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if ((v144[23] & 0x80000000) != 0)
    operator delete(*(void **)v144);
  v154[0] = 0;
  v154[1] = 0;
  v155 = 0;
  memset(&v153, 0, sizeof(v153));
  v52 = (uint64_t *)*((_QWORD *)a2 + 11);
  v53 = (uint64_t *)*((_QWORD *)a2 + 12);
  do
  {
    v54 = *v52;
    v55 = *(_QWORD *)(*v52 + 16);
    v56 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)*v52 + 32))(*v52, 0, 0, v51);
    v57 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0, 0);
    Transpose = ZinBuilder::CreateTranspose(v55, (uint64_t)&v159, v56 + 48, *(_DWORD *)(v57 + 88), (uint64_t)&v156);
    v59 = (ZinIrOpLayer *)Transpose;
    v60 = (char *)v154[1];
    if (v154[1] >= v155)
    {
      v62 = ((char *)v154[1] - (char *)v154[0]) >> 3;
      if ((unint64_t)(v62 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v63 = (v155 - (char *)v154[0]) >> 2;
      if (v63 <= v62 + 1)
        v63 = v62 + 1;
      if ((unint64_t)(v155 - (char *)v154[0]) >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
        v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v155, v64);
      else
        v65 = 0;
      v66 = (ZinIrOpLayer **)&v65[8 * v62];
      *v66 = v59;
      v61 = v66 + 1;
      v68 = (char *)v154[0];
      v67 = (char *)v154[1];
      if (v154[1] != v154[0])
      {
        do
        {
          v69 = (ZinIrOpLayer *)*((_QWORD *)v67 - 1);
          v67 -= 8;
          *--v66 = v69;
        }
        while (v67 != v68);
        v67 = (char *)v154[0];
      }
      v154[0] = v66;
      v154[1] = v61;
      v155 = &v65[8 * v64];
      if (v67)
        operator delete(v67);
    }
    else
    {
      *(_QWORD *)v154[1] = Transpose;
      v61 = v60 + 8;
    }
    v154[1] = v61;
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    *(_QWORD *)v144 = &v165;
    *(_QWORD *)&v144[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, v144);
    ZinIrOpLayerGraph::AddNode(this, v59, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      *(void **)&v151 = __p[1];
      operator delete(__p[1]);
    }
    ZinIrOpLayerGraph::AddEdge((uint64_t)this, v54, (uint64_t)v59, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    size = v153.__r_.__value_.__l.__size_;
    if (v153.__r_.__value_.__l.__size_ >= v153.__r_.__value_.__r.__words[2])
    {
      v72 = (uint64_t)(v153.__r_.__value_.__l.__size_ - v153.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v72 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v73 = (uint64_t)(v153.__r_.__value_.__r.__words[2] - v153.__r_.__value_.__r.__words[0]) >> 2;
      if (v73 <= v72 + 1)
        v73 = v72 + 1;
      if (v153.__r_.__value_.__r.__words[2] - v153.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v74 = v73;
      if (v74)
        v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v153.__r_.__value_.__r.__words[2], v74);
      else
        v75 = 0;
      v76 = (ZinIrOpLayer **)&v75[8 * v72];
      *v76 = v59;
      v71 = (std::string::size_type)(v76 + 1);
      v77 = (char *)v153.__r_.__value_.__l.__size_;
      v78 = v153.__r_.__value_.__r.__words[0];
      if (v153.__r_.__value_.__l.__size_ != v153.__r_.__value_.__r.__words[0])
      {
        do
        {
          v79 = (ZinIrOpLayer *)*((_QWORD *)v77 - 1);
          v77 -= 8;
          *--v76 = v79;
        }
        while (v77 != (char *)v78);
        v77 = (char *)v153.__r_.__value_.__r.__words[0];
      }
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
      v153.__r_.__value_.__l.__size_ = v71;
      v153.__r_.__value_.__r.__words[2] = (std::string::size_type)&v75[8 * v74];
      if (v77)
        operator delete(v77);
    }
    else
    {
      *(_QWORD *)v153.__r_.__value_.__l.__size_ = v59;
      v71 = size + 8;
    }
    v153.__r_.__value_.__l.__size_ = v71;
    ++v52;
  }
  while (v52 != v53);
  v80 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v153.__r_.__value_.__l.__data_ + 32))(*(_QWORD *)v153.__r_.__value_.__l.__data_, 0, 0);
  v81 = *(_OWORD *)(v80 + 64);
  *(_OWORD *)__p = *(_OWORD *)(v80 + 48);
  v151 = v81;
  v152 = *(_QWORD *)(v80 + 80);
  ZinIrReductionInfo::ComputeOutputDimensions(*(_QWORD *)(*((_QWORD *)a2 + 63) + 64), (ZinTensorDimensions *)__p);
  v82 = *((_QWORD *)a2 + 2);
  v83 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)+ 88);
  ZinObjectNameFactory::CreateName((uint64_t)&v159, 0, &v165);
  v147 = 0;
  v148 = 0;
  v146 = 0;
  *(_DWORD *)v144 = 0;
  memset(&v144[8], 0, 24);
  v145 = 0;
  ZinIrTensor::CreateTensor(v82, v83, (__int128 *)__p, (__int128 *)&v165, &v148, (uint64_t *)&v146, (unsigned int *)v144, (uint64_t *)&v149);
  v84 = (std::__shared_weak_count *)v147;
  if (v147)
  {
    v85 = (unint64_t *)(v147 + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v148;
  v148 = 0;
  if (v87)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v148, v87);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  v88 = (uint64_t *)v149;
  v89 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v89, &v143);
  ZinIrTensor::SetTensorMirInfo(v88, &v143);
  v90 = v143;
  v143 = 0;
  if (v90)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v143, v90);
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v149;
  if (*((_QWORD *)&v149 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  ZinObjectNameFactory::CreateName((uint64_t)&v159, 1u, (std::string *)v144);
  v93 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinIrOpLayerGraph *, std::string *, _BYTE *))(*(_QWORD *)a2 + 176))(a2, &v165, v144);
  if ((v144[23] & 0x80000000) != 0)
    operator delete(*(void **)v144);
  v94 = (std::__shared_weak_count *)v165.__r_.__value_.__l.__size_;
  if (v165.__r_.__value_.__l.__size_)
  {
    v95 = (unint64_t *)(v165.__r_.__value_.__l.__size_ + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v164 = a2;
  v146 = &v164;
  v147 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v144, &v146);
  v97 = ZinIrOpLayerGraph::AddNode(this, v93, (ZinIrOpLayer ***)v144);
  *(_QWORD *)v144 = &unk_24C02BB18;
  if (*(_QWORD *)&v144[8])
  {
    *(_QWORD *)&v144[16] = *(_QWORD *)&v144[8];
    operator delete(*(void **)&v144[8]);
  }
  v98 = (char *)v154[1];
  if (v154[1] >= v155)
  {
    v100 = ((char *)v154[1] - (char *)v154[0]) >> 3;
    if ((unint64_t)(v100 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v101 = (v155 - (char *)v154[0]) >> 2;
    if (v101 <= v100 + 1)
      v101 = v100 + 1;
    if ((unint64_t)(v155 - (char *)v154[0]) >= 0x7FFFFFFFFFFFFFF8)
      v102 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v102 = v101;
    if (v102)
      v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v155, v102);
    else
      v103 = 0;
    v104 = (ZinIrOpLayer **)&v103[8 * v100];
    v105 = &v103[8 * v102];
    *v104 = v93;
    v99 = v104 + 1;
    v107 = (char *)v154[0];
    v106 = (char *)v154[1];
    if (v154[1] != v154[0])
    {
      do
      {
        v108 = (ZinIrOpLayer *)*((_QWORD *)v106 - 1);
        v106 -= 8;
        *--v104 = v108;
      }
      while (v106 != v107);
      v106 = (char *)v154[0];
    }
    v154[0] = v104;
    v154[1] = v99;
    v155 = v105;
    if (v106)
      operator delete(v106);
  }
  else
  {
    *(_QWORD *)v154[1] = v93;
    v99 = v98 + 8;
  }
  v154[1] = v99;
  if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 11))
  {
    v109 = 0;
    do
    {
      ZinIrOpLayerGraph::AddEdge((uint64_t)this, *(_QWORD *)(v153.__r_.__value_.__r.__words[0] + 8 * v109), (uint64_t)v93, 0xFFFFFFFFFFFFFFFFLL, v109, 0);
      ++v109;
    }
    while (v109 < (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
  }
  v110 = *((_QWORD *)v93 + 2);
  v111 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v93 + 32))(v93, 0, 0);
  v112 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v93 + 32))(v93, 0, 0);
  v113 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v110, (uint64_t)&v159, v111 + 48, *(_DWORD *)(v112 + 88), (uint64_t)&v156);
  v164 = a2;
  v146 = &v164;
  v147 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v144, &v146);
  v114 = ZinIrOpLayerGraph::AddNode(this, v113, (ZinIrOpLayer ***)v144);
  *(_QWORD *)v144 = &unk_24C02BB18;
  if (*(_QWORD *)&v144[8])
  {
    *(_QWORD *)&v144[16] = *(_QWORD *)&v144[8];
    operator delete(*(void **)&v144[8]);
  }
  v115 = ZinIrOpLayerGraph::AddEdge((uint64_t)this, (uint64_t)v93, (uint64_t)v113, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v116 = (char *)v154[1];
  if (v154[1] >= v155)
  {
    v118 = ((char *)v154[1] - (char *)v154[0]) >> 3;
    if ((unint64_t)(v118 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v119 = (v155 - (char *)v154[0]) >> 2;
    if (v119 <= v118 + 1)
      v119 = v118 + 1;
    if ((unint64_t)(v155 - (char *)v154[0]) >= 0x7FFFFFFFFFFFFFF8)
      v120 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v120 = v119;
    if (v120)
      v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v155, v120);
    else
      v121 = 0;
    v122 = (ZinIrOpLayer **)&v121[8 * v118];
    v123 = &v121[8 * v120];
    *v122 = v113;
    v117 = v122 + 1;
    v125 = (char *)v154[0];
    v124 = (char *)v154[1];
    if (v154[1] != v154[0])
    {
      do
      {
        v126 = (ZinIrOpLayer *)*((_QWORD *)v124 - 1);
        v124 -= 8;
        *--v122 = v126;
      }
      while (v124 != v125);
      v124 = (char *)v154[0];
    }
    v154[0] = v122;
    v154[1] = v117;
    v155 = v123;
    if (v124)
      operator delete(v124);
  }
  else
  {
    *(_QWORD *)v154[1] = v113;
    v117 = v116 + 8;
  }
  v154[1] = v117;
  memset(v144, 0, sizeof(v144));
  v145 = 1065353216;
  v127 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)this, (uint64_t **)a2, v113, v144);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v144);
  if ((v127 & 1) != 0)
  {
    v128 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, a2, 0);
    ZinMirTensorTransform::PropagateSpatialSplitInfo<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t)v154);
    if (((v97 && v114) & v115 & v128) != 0)
      v19 = 0;
    else
      v19 = 3;
  }
  else
  {
    v129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v129)
      std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v129, v130, v131, v132, v133, v134, v135, v136);
    v19 = 3;
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  if (v153.__r_.__value_.__r.__words[0])
  {
    v153.__r_.__value_.__l.__size_ = v153.__r_.__value_.__r.__words[0];
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  if (v154[0])
  {
    v154[1] = v154[0];
    operator delete(v154[0]);
  }
  *(_QWORD *)&v159 = off_24C01FBB0;
  if (SHIBYTE(v160) < 0)
    operator delete(*((void **)&v159 + 1));
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  return v19;
}

void sub_206EA4E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  void *v50;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  *(_QWORD *)(v48 - 208) = off_24C01FBB0;
  if (*(char *)(v48 - 177) < 0)
    operator delete(*(void **)(v48 - 200));
  v50 = *(void **)(v48 - 232);
  if (v50)
  {
    *(_QWORD *)(v48 - 224) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

uint64_t MirOpt::ReassignTensorDimension::OptimizePatchHeightForOutputReductionForPEEW(uint64_t **this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  uint64_t v4;
  uint64_t v5;
  ZinIrOpLayer *v7;
  ZinIrRegAllocUtil *v8;
  uint64_t Hal;
  const ZinIrTensor *v10;
  const ZinIrHalParameters *v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  ZinIrOpLayer *v23;
  int inserted;
  int IsNoOp;
  ZinIrTensor *v26;
  ZinReshapeLayer **v27;
  ZinIrTensor *v28;
  int v29;
  int v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  ZinIrTensor *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Reduction;
  __int128 *PostOps;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  ZinIrOpLayer *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  _OWORD *PreOps;
  uint64_t v58;
  uint64_t v59;
  uint64_t IndexOps;
  ZinIrOpLayer *v61;
  unsigned __int8 v62;
  _BOOL8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v72;
  std::string v73;
  uint64_t v74;
  __int128 v75;
  char v76;
  std::string v77;
  std::string v78;
  uint64_t v79[2];
  _OWORD v80[2];
  int v81;
  std::string __p;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _QWORD v86[3];
  char v87;
  _OWORD v88[2];
  uint64_t v89;
  std::string v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 81)
    return 0;
  v4 = *((_QWORD *)a2 + 63);
  if (!v4)
    return 0;
  if ((*(_DWORD *)(*(_QWORD *)(v4 + 64) + 12) - 4) < 3)
    return 0;
  v5 = *((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) - v5 != 8)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)v5 + 120) - *(_QWORD *)(*(_QWORD *)v5 + 112) != 8)
    return 0;
  if ((*(uint64_t (**)(ZinIrOpLayerGraph *, uint64_t, ZinIrOpLayer *))(*(_QWORD *)a2 + 360))(a2, 3, a3) != 1)
    return 0;
  if ((*(uint64_t (**)(ZinIrOpLayerGraph *, uint64_t))(*(_QWORD *)a2 + 360))(a2, 4) < 2)
    return 0;
  (*(void (**)(_OWORD *__return_ptr, ZinIrOpLayerGraph *))(*(_QWORD *)a2 + 376))(v88, a2);
  v7 = (ZinIrOpLayer *)**((_QWORD **)a2 + 11);
  v8 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
  v10 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  if (ZinIrRegAllocUtil::IsChainable(v8, v10, v11))
    return 0;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_", (const void **)a2 + 3, (void **)&v83);
  std::string::basic_string[abi:ne180100]<0>(&v73, "pe_lowerengine");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_xfm", &v73, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = std::string::append((std::string *)&v83, (const std::string::value_type *)p_p, size);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)&v92 = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  v91 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v86, &v91);
  if (SBYTE7(v92) < 0)
    operator delete((void *)v91);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SBYTE7(v84) < 0)
    operator delete((void *)v83);
  v16 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a2, 0) + 88);
  v83 = v88[0];
  v84 = v88[1];
  v85 = v89;
  DimensionOrderHint::DimensionOrderHint(&__p, 2);
  v17 = v84;
  if ((unint64_t)v84 > 3)
    goto LABEL_86;
  v18 = *((_QWORD *)&v84 + 1);
  if ((BYTE8(v84) & 1) != 0)
  {
    v32 = 0;
    LOBYTE(v19) = 0;
    v23 = 0;
    IsNoOp = 1;
    v20 = 1;
  }
  else
  {
    v72 = 0;
    v19 = 0;
    v20 = 1;
    while (1)
    {
      *(_QWORD *)&v84 = 2 * v17;
      *((_QWORD *)&v84 + 1) = v18 / 2;
      v21 = *((_QWORD *)a2 + 2);
      v22 = operator new(0x14uLL);
      v73.__r_.__value_.__l.__size_ = (std::string::size_type)(v22 + 5);
      v73.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 5);
      v22[4] = 4;
      *(_OWORD *)v22 = xmmword_207AA7E80;
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      DimensionOrderHint::DimensionOrderHint(&v91, &v73);
      v23 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v21, (uint64_t)v86, (uint64_t)v88, v16, &v83, (const DimensionOrderHint *)&v91);
      if ((_QWORD)v91)
      {
        *((_QWORD *)&v91 + 1) = v91;
        operator delete((void *)v91);
      }
      if (v73.__r_.__value_.__r.__words[0])
      {
        v73.__r_.__value_.__l.__size_ = v73.__r_.__value_.__r.__words[0];
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
      v73.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v91, &v73);
      inserted = ZinIrOpLayerGraph::InsertNodeBetween(this, v23, v7, a2, (ZinIrOpLayer ***)&v91);
      *(_QWORD *)&v91 = &unk_24C02BB18;
      if (*((_QWORD *)&v91 + 1))
      {
        *(_QWORD *)&v92 = *((_QWORD *)&v91 + 1);
        operator delete(*((void **)&v91 + 1));
      }
      v91 = 0uLL;
      *(_QWORD *)&v92 = 0;
      IsNoOp = ZinReshapeLayer::IsNoOp(v23, (uint64_t *)&v91);
      if ((_QWORD)v91)
      {
        *((_QWORD *)&v91 + 1) = v91;
        operator delete((void *)v91);
      }
      v26 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
      if (ZinIrTensor::HasFlexDimensionOrderHint(v26))
      {
        v27 = (ZinReshapeLayer **)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0);
        v19 |= !ZinIrTensor::IsTensorFamilyCompatibleWithDimensionOrder(v27, (const DimensionOrderHint *)&__p);
        v72 = 1;
      }
      else
      {
        v28 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
        ZinIrTensor::GetDimensionOrderHint(v28, (uint64_t)&v91);
        v29 = ZinReshapeLayer::MatchesReshapeAttributes(v23, (const DimensionOrderHint *)&v91);
        if ((_QWORD)v91)
        {
          *((_QWORD *)&v91 + 1) = v91;
          operator delete((void *)v91);
        }
        v19 |= v29 ^ 1;
      }
      memset(v80, 0, sizeof(v80));
      v81 = 1065353216;
      v30 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)this, (uint64_t **)v23, v7, v80);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v80);
      v20 &= ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, v23, 0) & inserted & v30;
      v17 = v84;
      v31 = (unint64_t)v84 < 4 ? IsNoOp : 0;
      if ((v31 & 1) == 0)
        break;
      v18 = *((_QWORD *)&v84 + 1);
      if ((BYTE8(v84) & 1) != 0)
      {
        IsNoOp = 1;
        break;
      }
    }
    v32 = v72;
  }
  if ((v19 & 1) != 0)
  {
    v33 = 0;
    v34 = 0;
    goto LABEL_87;
  }
  if (v23)
    v35 = IsNoOp;
  else
    v35 = 0;
  if (v35 == 1)
  {
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
    v73.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v91, &v73);
    v36 = v20 & ZinIrOpLayerGraph::InsertNodeBetween(this, v23, v7, a2, (ZinIrOpLayer ***)&v91);
    *(_QWORD *)&v91 = &unk_24C02BB18;
    if (*((_QWORD *)&v91 + 1))
    {
      *(_QWORD *)&v92 = *((_QWORD *)&v91 + 1);
      operator delete(*((void **)&v91 + 1));
    }
    if ((v32 & 1) != 0)
    {
      v37 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0);
      if (ZinIrTensor::SetDimensionOrderHint(v37, (const DimensionOrderHint *)&__p, 1))
        LOBYTE(v36) = 0;
    }
    v38 = *(_QWORD *)(*(_QWORD *)(ZinPEElementWiseLayer::GetPostOps(a2) + 16) + 64);
    v39 = *(_QWORD *)(v38 + 24);
    v40 = *((_QWORD *)a2 + 2);
    (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v23 + 80))(&v91, v23, 0, 0);
    std::vector<ZinIrTensorInfo>::vector[abi:ne180100](&v73, &v91, 1uLL);
    v41 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0);
    Reduction = ZinBuilder::CreateReduction(v40, (uint64_t)v86, (uint64_t *)&v73, *(_DWORD *)(v41 + 88), *(_DWORD *)(v38 + 12), v39 | 8, *(_DWORD *)(v38 + 16), *(_DWORD *)(v38 + 40), *(float *)(v38 + 32), *(float *)(v38 + 36), *(_DWORD *)(v38 + 44), *(_BYTE *)(v38 + 48));
    if (v73.__r_.__value_.__r.__words[0])
    {
      v73.__r_.__value_.__l.__size_ = v73.__r_.__value_.__r.__words[0];
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    PostOps = (__int128 *)ZinPEElementWiseLayer::GetPostOps(a2);
    v44 = PostOps[1];
    v91 = *PostOps;
    v92 = v44;
    v45 = PostOps[2];
    v46 = PostOps[3];
    v47 = PostOps[5];
    v95 = PostOps[4];
    v96 = v47;
    v93 = v45;
    v94 = v46;
    *(_QWORD *)&v92 = Reduction;
    v48 = (ZinIrOpLayer *)operator new();
    v49 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 40))(a2, 0, 0);
    v50 = v49[1];
    v79[0] = *v49;
    v79[1] = v50;
    if (v50)
    {
      v51 = (unint64_t *)(v50 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_", (const void **)a2 + 3, (void **)&v90.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v77, "reduce_patch_h");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_xfm", &v77, &v78);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v78;
    else
      v53 = (std::string *)v78.__r_.__value_.__r.__words[0];
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    else
      v54 = v78.__r_.__value_.__l.__size_;
    v55 = std::string::append(&v90, (const std::string::value_type *)v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    PreOps = (_OWORD *)ZinPEElementWiseLayer::GetPreOps(a2);
    v58 = ZinPEElementWiseLayer::GetPreOps(a2);
    v59 = *((_QWORD *)a2 + 60);
    IndexOps = ZinPEElementWiseLayer::GetIndexOps(a2);
    LOBYTE(v75) = 0;
    BYTE8(v75) = 0;
    BYTE12(v75) = 0;
    v76 = 0;
    ZinPEElementWiseLayer::ZinPEElementWiseLayer((uint64_t)v48, v79, (__int128 *)&v73, PreOps, (_OWORD *)(v58 + 32), v59, &v91, IndexOps, &v75);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v79);
    v61 = (ZinIrOpLayer *)**((_QWORD **)v23 + 14);
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    *(_OWORD *)&v73.__r_.__value_.__r.__words[1] = 0uLL;
    v74 = 0;
    v62 = ZinIrOpLayerGraph::ReplaceNode(this, v61, v48, (const Layer2TDMapper::SourceLayer *)&v73);
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (v73.__r_.__value_.__l.__size_)
    {
      v73.__r_.__value_.__r.__words[2] = v73.__r_.__value_.__l.__size_;
      operator delete((void *)v73.__r_.__value_.__l.__size_);
    }
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v90.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
    std::vector<ZinIrOpLayer *>::vector[abi:ne180100](&v73, &v90, 2uLL);
    ZinMirTensorTransform::PropagateSpatialSplitInfo<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t)&v73);
    if (v73.__r_.__value_.__r.__words[0])
    {
      v73.__r_.__value_.__l.__size_ = v73.__r_.__value_.__r.__words[0];
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    if ((v36 & v62 & 1) == 0)
      goto LABEL_82;
LABEL_86:
    v34 = 0;
    v33 = 1;
    goto LABEL_87;
  }
  if ((v20 & 1) != 0)
    goto LABEL_86;
LABEL_82:
  v63 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v63)
    MirOpt::ReassignTensorDimension::OptimizePatchHeightForOutputReductionForPEEW(v63, v64, v65, v66, v67, v68, v69, v70);
  v33 = 0;
  v34 = 3;
LABEL_87:
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v86[0] = off_24C01FBB0;
  if (v87 < 0)
    operator delete((void *)v86[1]);
  if ((v33 & 1) != 0)
    return 0;
  return v34;
}

void sub_206EA58D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (__p)
    operator delete(__p);
  if (a41)
    operator delete(a41);
  if (a62 < 0)
    operator delete(a57);
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::ReassignTensorDimension::Execute(const ZinIrControlFlowGraph *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  ZinTensorFamilyUtil *v14;
  uint64_t v15;
  char v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  ZinTensorFamilyUtil *v26;
  uint64_t v27;
  const void **v28[89];
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v31[0] = &unk_24C053830;
  v31[1] = MirOpt::ReassignTensorDimension::OptimizePatchHeightForOutputReductionForPEEW;
  v32 = v31;
  v6 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v31, 1);
  v7 = v32;
  if (v32 == v31)
  {
    v8 = 4;
    v7 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  if (v6)
    return 3;
  v29[0] = &unk_24C053830;
  v29[1] = MirOpt::ReassignTensorDimension::InsertNCTransposesForGlobalReductionPEEW;
  v30 = v29;
  v9 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v29, 1);
  v10 = v30;
  if (v30 == v29)
  {
    v11 = 4;
    v10 = v29;
    goto LABEL_11;
  }
  if (v30)
  {
    v11 = 5;
LABEL_11:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  if (!v9)
  {
    v13 = *(_QWORD *)(a2 + 8);
    if (*(_BYTE *)(v13 + 492) || !*(_BYTE *)(v13 + 535))
      return 0;
    v14 = (ZinTensorFamilyUtil *)operator new();
    ZinTensorFamilyUtil::ZinTensorFamilyUtil(v14, a1, 1, 0);
    v26 = v14;
    v27 = 0;
    MirOpt::CWTransposeUtil::CWTransposeUtil((uint64_t)v28, (uint64_t)a1, a2, (uint64_t *)&v26, a3);
    v15 = (uint64_t)v26;
    v26 = 0;
    if (v15)
      std::default_delete<ZinTensorFamilyUtil>::operator()[abi:ne180100]((uint64_t)&v26, v15);
    v16 = MirOpt::CWTransposeUtil::RunGlobalOptimizationForCWTranspose(v28);
    if ((v16 & 1) != 0)
    {
      MirOpt::CWTransposeUtil::MaterializeCWTranspose((MirOpt::CWTransposeUtil *)v28);
    }
    else
    {
      v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v17)
        MirOpt::ReassignTensorDimension::Execute(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    MirOpt::CWTransposeUtil::~CWTransposeUtil((MirOpt::CWTransposeUtil *)v28);
    v25 = v27;
    v27 = 0;
    if (v25)
      std::default_delete<ZinTensorFamilyUtil>::operator()[abi:ne180100]((uint64_t)&v27, v25);
    if ((v16 & 1) != 0)
      return 0;
  }
  return 3;
}

void sub_206EA5CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v12;
  uint64_t v13;

  v12 = a9;
  a9 = 0;
  if (v12)
    std::default_delete<ZinTensorFamilyUtil>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  v13 = a10;
  a10 = 0;
  if (v13)
    std::default_delete<ZinTensorFamilyUtil>::operator()[abi:ne180100]((uint64_t)&a10, v13);
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::CWTransposeUtil::RunGlobalOptimizationForCWTranspose(const void ***this)
{
  int ORToolsGraph;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  const void **v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  void *v24;
  char v25;
  int IsRegionWithTrivialSolution;
  int v27;
  int updated;
  int v29;
  CpTransposeGraph *v30;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  void *__p;
  _BYTE v39[15];
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[4];
  int v45;
  _QWORD *v46;
  uint8_t v47[4];
  int v48[3];
  uint8_t v49[4];
  int v50;
  _QWORD v51[5];

  v51[2] = *MEMORY[0x24BDAC8D0];
  ORToolsGraph = MirOpt::CWTransposeUtil::CreateORToolsGraph((MirOpt::CWTransposeUtil *)this, (uint64_t *)&v46);
  memset(v44, 0, sizeof(v44));
  v45 = 1065353216;
  MirOpt::CWTransposeUtil::CollectBoundaryNodes(ORToolsGraph, (CpGraph **)v46, (uint64_t)v44);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  CpGraph::IdentifyConnectedComponents(v46, v44, &v41);
  MirOpt::CWTransposeUtil::CreateCpTransposeGraphDotFile((uint64_t)this, (uint64_t)v46, &v41);
  if (v42 == v41)
  {
    v6 = 1;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = &byte_207AF6795;
    LODWORD(v6) = 1;
    do
    {
      v7 = (uint64_t)std::string::basic_string[abi:ne180100]<0>(&__p, v5);
      if ((*((_BYTE *)this[88][1] + 99) & 0x10) != 0)
      {
        v8 = v5;
        v9 = this[71];
        if (*((char *)v9 + 23) >= 0)
          v10 = *((unsigned __int8 *)v9 + 23);
        else
          v10 = (size_t)v9[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&v34, v10 + 11);
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v34;
        else
          v11 = (std::string *)v34.__r_.__value_.__r.__words[0];
        if (v10)
        {
          if (*((char *)v9 + 23) >= 0)
            v12 = v9;
          else
            v12 = *v9;
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, ".CpProblem.");
        if (*((char *)v46 + 255) < 0)
          std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v46[29], v46[30]);
        else
          v33 = *(std::string *)(v46 + 29);
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = &v33;
        else
          v13 = (std::string *)v33.__r_.__value_.__r.__words[0];
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
        else
          size = v33.__r_.__value_.__l.__size_;
        v15 = std::string::append(&v34, (const std::string::value_type *)v13, size);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        v17 = std::string::append(&v35, ".G", 2uLL);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v36.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v32, v4);
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v32;
        else
          v19 = (std::string *)v32.__r_.__value_.__r.__words[0];
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
        else
          v20 = v32.__r_.__value_.__l.__size_;
        v21 = std::string::append(&v36, (const std::string::value_type *)v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v37, ".txt", 4uLL);
        v24 = (void *)v23->__r_.__value_.__r.__words[0];
        v51[0] = v23->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v51 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (v40 < 0)
          operator delete(__p);
        __p = v24;
        *(_QWORD *)v39 = v51[0];
        *(_QWORD *)&v39[7] = *(_QWORD *)((char *)v51 + 7);
        v40 = v25;
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        v5 = v8;
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        v7 = std::ofstream::open();
      }
      IsRegionWithTrivialSolution = MirOpt::CWTransposeUtil::IsRegionWithTrivialSolution(v7, (CpTransposeGraph *)v46, v41 + v3);
      v27 = *((_DWORD *)this[88][1] + 24);
      if (IsRegionWithTrivialSolution)
      {
        if ((v27 & 0x10000000) != 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          MirOpt::CWTransposeUtil::RunGlobalOptimizationForCWTranspose(v49, v4, &v50);
        updated = MirOpt::CWTransposeUtil::UpdateResultWithTrivialSolution((uint64_t **)this, (CpTransposeGraph *)v46, v41 + v3);
      }
      else
      {
        if ((v27 & 0x10000000) != 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          MirOpt::CWTransposeUtil::RunGlobalOptimizationForCWTranspose(v47, v4, v48);
        updated = MirOpt::CpBasedCWTransposeUtil::TransposerWrapper((uint64_t)&v46, v41 + v3, (uint64_t)&__p, (uint64_t)(this + 77));
      }
      v29 = updated;
      if (this[16] && !std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)*(*this - 3) + (_QWORD)this), *(_DWORD *)((char *)*(*this - 3) + (_QWORD)this + 32) | 4);
      if (v40 < 0)
        operator delete(__p);
      v6 = v6 & v29;
      ++v4;
      v3 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v42 - v41) >> 3) > v4);
  }
  __p = &v41;
  std::vector<std::unordered_map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v44);
  v30 = (CpTransposeGraph *)v46;
  v46 = 0;
  if (v30)
  {
    CpTransposeGraph::~CpTransposeGraph(v30);
    MEMORY[0x20BD002F8]();
  }
  return v6;
}

void sub_206EA6254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v58 - 192);
  std::unique_ptr<CpTransposeGraph>::reset[abi:ne180100]((CpTransposeGraph **)(v58 - 152), 0);
  _Unwind_Resume(a1);
}

uint64_t MirOpt::CWTransposeUtil::MaterializeCWTranspose(MirOpt::CWTransposeUtil *this)
{
  _QWORD *v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = (_QWORD *)*((_QWORD *)this + 87);
  v6[0] = &off_24C001E90;
  v6[1] = this;
  v7 = v6;
  v2 = ZinIrControlFlowGraph::TraverseForward(v1, (uint64_t)v6, 0);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v2)
    ZinAssertImpl("Failed to materialize transpose optimization results");
  return 1;
}

void sub_206EA6400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::CWTransposeUtil::CWTransposeUtil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;

  v10 = a1 + 8;
  v11 = MEMORY[0x24BEDB840];
  v12 = MEMORY[0x24BEDB840] + 64;
  *(_QWORD *)(a1 + 416) = MEMORY[0x24BEDB840] + 64;
  v13 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v15, (void *)(a1 + 8));
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v11 + 24;
  *(_QWORD *)(a1 + 416) = v12;
  MEMORY[0x20BCFFEA8](v10);
  *(_QWORD *)(a1 + 568) = a5;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 1065353216;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = a1 + 624;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = a1 + 648;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = a1 + 672;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 688) = v16;
  *(_QWORD *)(a1 + 696) = a2;
  *(_QWORD *)(a1 + 704) = a3;
  MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap((MirOpt::CWTransposeUtil *)a1);
  return a1;
}

void sub_206EA6560(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  CpTransposeUtils::CpTransposeOptimizationResult *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = *v4;
  *v4 = 0;
  if (v6)
    std::default_delete<ZinTensorFamilyUtil>::operator()[abi:ne180100]((uint64_t)v4, v6);
  CpTransposeUtils::CpTransposeOptimizationResult::~CpTransposeOptimizationResult(v3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2);
  std::ofstream::~ofstream(v1);
  _Unwind_Resume(a1);
}

_QWORD *MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(MirOpt::CWTransposeUtil *this)
{
  _QWORD *v1;
  int v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = (_QWORD *)*((_QWORD *)this + 87);
  v5[0] = &off_24C001EE8;
  v5[1] = this;
  v6 = v5;
  v2 = ZinIrControlFlowGraph::TraverseForward(v1, (uint64_t)v5, 1);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v4 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
LABEL_6:
  if (v2)
    ZinAssertImpl("Failed to create transpose utils");
  return result;
}

void sub_206EA6674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void CpTransposeUtils::CpTransposeOptimizationResult::~CpTransposeOptimizationResult(CpTransposeUtils::CpTransposeOptimizationResult *this)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings(char **a1@<X8>)
{
  char **v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = a1 + 2;
  v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), 1uLL);
  v6 = &v4[8 * v5];
  *(_QWORD *)v4 = 0x200000004;
  v7 = v4 + 8;
  v9 = *a1;
  v8 = a1[1];
  v10 = v4;
  if (v8 != *a1)
  {
    do
    {
      v11 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v10 - 1) = v11;
      v10 -= 8;
    }
    while (v8 != v9);
    v8 = *a1;
  }
  *a1 = v10;
  a1[1] = v7;
  a1[2] = v6;
  if (v8)
  {
    operator delete(v8);
    v6 = *v3;
  }
  a1[1] = v7;
  if (v7 >= v6)
  {
    v13 = (v7 - *a1) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v14 = v6 - *a1;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v16);
    else
      v17 = 0;
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = 0x400000002;
    v12 = v18 + 8;
    v21 = *a1;
    v20 = a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = *a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *((_QWORD *)v4 + 1) = 0x400000002;
    v12 = v4 + 16;
  }
  a1[1] = v12;
}

void sub_206EA6848(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t MirOpt::CWTransposeUtil::CalculatePerfAndMemCosts(ZinTensorFamilyUtil **a1, ZinIrOpLayer *this, uint64_t a3)
{
  ZinTensorFamilyUtil *v6;
  const ZinIrTensor *InputTensor;
  const ZinIrTensor *RootTensor;
  char IsTransposeDisqualified;
  _DWORD *v10;
  ZinTensorFamilyUtil *v11;
  const ZinIrTensor *v12;
  const ZinIrTensor *v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  const ZinIrOpLayer *v23;
  MirOpt *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  ZinIrTensor::MirInfo *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char IsQualifiedForDCE;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  const ZinIrOpLayer *v52;
  MirOpt *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  ZinIrTensor::MirInfo *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  ZinIrTensor::MirInfo *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  const ZinIrTensor *v94;
  int v95;
  const ZinIrTensor *v96;
  ZinTensorFamilyUtil *v97;
  const ZinIrTensor *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  ZinIrTensor::MirInfo *v108;
  ZinIrTensor *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  ZinIrTensor::MirInfo *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  ZinIrTensor::MirInfo *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  ZinIrTensor::MirInfo *v120;
  void *v121[2];
  char v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  ZinIrTensor::MirInfo *v132;
  void *__p[2];
  char v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  void *v140;
  std::__shared_weak_count *v141;
  char v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;

  if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) != 8)
    goto LABEL_108;
  if (*(_DWORD *)a3 == 1)
  {
    v6 = a1[86];
    InputTensor = (const ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 0);
    RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v6, InputTensor);
    IsTransposeDisqualified = MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, RootTensor);
    v10 = (_DWORD *)(a3 + 8);
    if (*(_DWORD *)(a3 + 8) != 1)
      goto LABEL_8;
  }
  else
  {
    v10 = (_DWORD *)(a3 + 8);
    if (*(_DWORD *)(a3 + 8) != 1)
      goto LABEL_9;
    IsTransposeDisqualified = 0;
  }
  v11 = a1[86];
  v12 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v13 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v11, v12);
  if ((MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, v13) & 1) != 0)
    goto LABEL_108;
LABEL_8:
  if ((IsTransposeDisqualified & 1) != 0)
    goto LABEL_108;
LABEL_9:
  v14 = *(_DWORD *)(*((_QWORD *)this + 8) + 8) - 81;
  v15 = v14 > 0xB;
  v16 = (1 << v14) & 0x905;
  if (v15 || v16 == 0)
    goto LABEL_108;
  if (ZinIrOpLayer::IsNELayer(this))
  {
    v18 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)this + 408))(this) ^ (*(_DWORD *)(a3 + 8) == 1);
    if ((((*(_DWORD *)a3 == 1) ^ v18) & 1) != 0)
      goto LABEL_108;
    v19 = v18 ^ 1;
    if (*(_DWORD *)a3 != 1)
      v19 = 1;
    if ((v19 & 1) == 0)
    {
      MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)&v143);
      v20 = (*(uint64_t (**)(ZinIrOpLayer *, __int128 *))(*(_QWORD *)this + 424))(this, &v143);
      if ((_QWORD)v143)
      {
        *((_QWORD *)&v143 + 1) = v143;
        operator delete((void *)v143);
      }
      if ((v20 & 1) == 0)
        goto LABEL_108;
    }
    *((_QWORD *)&v146 + 1) = 0;
    v147 = 0;
    *(_QWORD *)&v146 = (char *)&v146 + 8;
    MirOpt::CollectLayersNeededForAnalysis((uint64_t)this, (uint64_t)&v146);
    v21 = *((_QWORD *)this + 19);
    std::string::basic_string[abi:ne180100]<0>(&v140, "cw_opt_ne_dce_candidacy");
    ZinIrOpLayerGraph::CloneSubGraph(v21, &v146, (uint64_t)&v140, (uint64_t)&v143);
    if (v142 < 0)
      operator delete(v140);
    *(_QWORD *)&v135 = this;
    v22 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)&v143 + 1, &v135);
    if (!v22)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v24 = (MirOpt *)v22[3];
    if (*v10 == 1)
    {
      v25 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v24 + 32))(v22[3], 0, 0);
      v26 = *(_QWORD *)(v25 + 16);
      v27 = *(_DWORD *)(v25 + 88);
      v28 = *(_OWORD *)(v25 + 64);
      v135 = *(_OWORD *)(v25 + 48);
      v136 = v28;
      v29 = *(_QWORD *)(v25 + 80);
      v30 = *((_QWORD *)&v135 + 1);
      *((_QWORD *)&v135 + 1) = *((_QWORD *)&v28 + 1);
      *((_QWORD *)&v136 + 1) = v30;
      v137 = v29;
      ZinIrContext::GetAlternativeNameForTensor(*(_QWORD *)(v25 + 16), v25 + 24, (uint64_t)__p);
      ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v25, &v132);
      v130 = 0;
      v131 = 0;
      LODWORD(v125) = 0;
      v127 = 0;
      v128 = 0;
      v126 = 0;
      v129 = 0;
      ZinIrTensor::CreateTensor(v26, v27, &v135, (__int128 *)__p, &v132, &v130, (unsigned int *)&v125, &v138);
      v31 = v131;
      if (v131)
      {
        p_shared_owners = (unint64_t *)&v131->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = v132;
      v132 = 0;
      if (v34)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v132, v34);
      if (v134 < 0)
        operator delete(__p[0]);
      v123 = v138;
      v124 = v139;
      if (v139)
      {
        v35 = (unint64_t *)&v139->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      (*(void (**)(MirOpt *, uint64_t *))(*(_QWORD *)v24 + 24))(v24, &v123);
      v37 = v124;
      if (v124)
      {
        v38 = (unint64_t *)&v124->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      *((_QWORD *)v24 + 50) = 0;
      v40 = v139;
      if (v139)
      {
        v41 = (unint64_t *)&v139->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    *((_QWORD *)v24 + 50) = 0;
    IsQualifiedForDCE = MirOpt::IsQualifiedForDCE(v24, v23);
  }
  else
  {
    if (!ZinIrOpLayer::IsPELayer(this))
      ZinAssertImpl("Only NE and PE engine layers are supported\n");
    v44 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)this + 640))(this);
    v45 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)this + 408))(this);
    v46 = v44 ^ (*(_DWORD *)a3 == 1);
    v47 = v45 ^ (*(_DWORD *)(a3 + 8) == 1);
    if (v46 != v47)
      goto LABEL_108;
    v48 = v45;
    if ((v46 & v47) == 1)
    {
      MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)&v143);
      v49 = (*(uint64_t (**)(ZinIrOpLayer *, __int128 *))(*(_QWORD *)this + 424))(this, &v143);
      if ((_QWORD)v143)
      {
        *((_QWORD *)&v143 + 1) = v143;
        operator delete((void *)v143);
      }
      if ((v49 & 1) == 0)
        goto LABEL_108;
    }
    *((_QWORD *)&v146 + 1) = 0;
    v147 = 0;
    *(_QWORD *)&v146 = (char *)&v146 + 8;
    MirOpt::CollectLayersNeededForAnalysis((uint64_t)this, (uint64_t)&v146);
    v50 = *((_QWORD *)this + 19);
    std::string::basic_string[abi:ne180100]<0>(v121, "cw_opt_pe_dce_candidacy");
    ZinIrOpLayerGraph::CloneSubGraph(v50, &v146, (uint64_t)v121, (uint64_t)&v143);
    if (v122 < 0)
      operator delete(v121[0]);
    *(_QWORD *)&v135 = this;
    v51 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)&v143 + 1, &v135);
    if (!v51)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v53 = (MirOpt *)v51[3];
    if (v44)
    {
      v54 = **((_QWORD **)v53 + 11);
      v55 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0, 0);
      v56 = *(_QWORD *)(v55 + 16);
      v57 = *(_DWORD *)(v55 + 88);
      v58 = *(_OWORD *)(v55 + 64);
      v135 = *(_OWORD *)(v55 + 48);
      v136 = v58;
      v59 = *(_QWORD *)(v55 + 80);
      v60 = *((_QWORD *)&v135 + 1);
      *((_QWORD *)&v135 + 1) = *((_QWORD *)&v58 + 1);
      *((_QWORD *)&v136 + 1) = v60;
      v137 = v59;
      ZinIrContext::GetAlternativeNameForTensor(*(_QWORD *)(v55 + 16), v55 + 24, (uint64_t)__p);
      ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v55, &v120);
      v130 = 0;
      v131 = 0;
      LODWORD(v125) = 0;
      v127 = 0;
      v128 = 0;
      v126 = 0;
      v129 = 0;
      ZinIrTensor::CreateTensor(v56, v57, &v135, (__int128 *)__p, &v120, &v130, (unsigned int *)&v125, &v138);
      v61 = v131;
      if (v131)
      {
        v62 = (unint64_t *)&v131->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = v120;
      v120 = 0;
      if (v64)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v120, v64);
      if (v134 < 0)
        operator delete(__p[0]);
      v118 = v138;
      v119 = v139;
      if (v139)
      {
        v65 = (unint64_t *)&v139->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v54 + 24))(v54, &v118);
      v67 = v119;
      if (v119)
      {
        v68 = (unint64_t *)&v119->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      (*(void (**)(MirOpt *, _QWORD))(*(_QWORD *)v53 + 736))(v53, 0);
      v70 = v139;
      if (v139)
      {
        v71 = (unint64_t *)&v139->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
    }
    if (v48)
    {
      v73 = (*(uint64_t (**)(MirOpt *, _QWORD, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0, 0);
      v74 = *(_QWORD *)(v73 + 16);
      v75 = *(_DWORD *)(v73 + 88);
      v76 = *(_OWORD *)(v73 + 64);
      v135 = *(_OWORD *)(v73 + 48);
      v136 = v76;
      v77 = *(_QWORD *)(v73 + 80);
      v78 = *((_QWORD *)&v135 + 1);
      *((_QWORD *)&v135 + 1) = *((_QWORD *)&v76 + 1);
      *((_QWORD *)&v136 + 1) = v78;
      v137 = v77;
      ZinIrContext::GetAlternativeNameForTensor(*(_QWORD *)(v73 + 16), v73 + 24, (uint64_t)__p);
      ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v73, &v117);
      v130 = 0;
      v131 = 0;
      LODWORD(v125) = 0;
      v127 = 0;
      v128 = 0;
      v126 = 0;
      v129 = 0;
      ZinIrTensor::CreateTensor(v74, v75, &v135, (__int128 *)__p, &v117, &v130, (unsigned int *)&v125, &v138);
      v79 = v131;
      if (v131)
      {
        v80 = (unint64_t *)&v131->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = v117;
      v117 = 0;
      if (v82)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v117, v82);
      if (v134 < 0)
        operator delete(__p[0]);
      v115 = v138;
      v116 = v139;
      if (v139)
      {
        v83 = (unint64_t *)&v139->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      (*(void (**)(MirOpt *, uint64_t *))(*(_QWORD *)v53 + 24))(v53, &v115);
      v85 = v116;
      if (v116)
      {
        v86 = (unint64_t *)&v116->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      (*(void (**)(MirOpt *, _QWORD))(*(_QWORD *)v53 + 728))(v53, 0);
      v88 = v139;
      if (v139)
      {
        v89 = (unint64_t *)&v139->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
    }
    IsQualifiedForDCE = MirOpt::IsQualifiedForDCE(v53, v52);
  }
  v91 = IsQualifiedForDCE;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v143 + 8);
  v92 = v143;
  *(_QWORD *)&v143 = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v146, *((_QWORD **)&v146 + 1));
  if ((v91 & 1) != 0)
    return 0;
LABEL_108:
  (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)this + 512))(&v125, this);
  v94 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(a1[86], *(const ZinIrTensor **)v125);
  if (*(_DWORD *)a3 == 1)
    v95 = MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, v94);
  else
    v95 = 0;
  if (*(_BYTE *)(a3 + 12))
  {
    v96 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(a1[86], *((const ZinIrTensor **)v125 + 1));
    if (*(_DWORD *)(a3 + 4) == 1)
      v95 |= MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, v96);
  }
  v97 = a1[86];
  v98 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v99 = ZinTensorFamilyUtil::GetRootTensor(v97, v98);
  if (*(_DWORD *)(a3 + 8) == 1)
  {
    if (((MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, (const ZinIrTensor *)v99) | v95) & 1) == 0)
      goto LABEL_116;
  }
  else if ((v95 & 1) == 0)
  {
LABEL_116:
    v93 = MirOpt::CWTransposeUtil::CalculatePerfCosts(a1, this, a3);
    if (*(_DWORD *)(a3 + 8))
    {
      v100 = *(_OWORD *)(v99 + 64);
      v143 = *(_OWORD *)(v99 + 48);
      v144 = v100;
      v101 = *(_QWORD *)(v99 + 80);
      v102 = *((_QWORD *)&v143 + 1);
      *((_QWORD *)&v143 + 1) = *((_QWORD *)&v100 + 1);
      *((_QWORD *)&v144 + 1) = v102;
      v145 = v101;
      v103 = *(_QWORD *)(v99 + 16);
      v104 = *(_DWORD *)(v99 + 88);
      ZinIrContext::GetAlternativeNameForTensor(v103, v99 + 24, (uint64_t)&v146);
      ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v99, &v114);
      __p[0] = 0;
      __p[1] = 0;
      LODWORD(v135) = 0;
      v136 = 0uLL;
      *((_QWORD *)&v135 + 1) = 0;
      LODWORD(v137) = 0;
      ZinIrTensor::CreateTensor(v103, v104, &v143, &v146, &v114, (uint64_t *)__p, (unsigned int *)&v135, (uint64_t *)&v140);
      v105 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v106 = (unint64_t *)((char *)__p[1] + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      v108 = v114;
      v114 = 0;
      if (v108)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v114, v108);
      if (SHIBYTE(v147) < 0)
        operator delete((void *)v146);
      v109 = (ZinIrTensor *)v140;
      DimensionOrderHint::DimensionOrderHint(&v135, 0);
      ZinIrTensor::GetTensorSizeInBytesFromResidency(v109, 1, (uint64_t)&v135, 0);
      if ((_QWORD)v135)
      {
        *((_QWORD *)&v135 + 1) = v135;
        operator delete((void *)v135);
      }
      v110 = v141;
      if (v141)
      {
        v111 = (unint64_t *)&v141->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
    }
    else
    {
      DimensionOrderHint::DimensionOrderHint(&v143, 0);
      ZinIrTensor::GetTensorSizeInBytesFromResidency((ZinIrTensor *)v99, 1, (uint64_t)&v143, 0);
      if ((_QWORD)v143)
      {
        *((_QWORD *)&v143 + 1) = v143;
        operator delete((void *)v143);
      }
    }
    goto LABEL_135;
  }
  v93 = -1;
LABEL_135:
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  return v93;
}

void sub_206EA73AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v41 - 216);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v40);
  v43 = *(_QWORD *)(v41 - 176);
  *(_QWORD *)(v41 - 176) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v41 - 120, *(_QWORD **)(v41 - 112));
  _Unwind_Resume(a1);
}

uint64_t MirOpt::CWTransposeUtil::IsTransposeDisqualified(ZinTensorFamilyUtil **this, const ZinIrTensor *a2)
{
  const ZinIrTensor *v2;
  ZinTensorFamilyUtil **v3;
  ZinReshapeLayer ****TensorFamily;
  ZinReshapeLayer ***v5;
  ZinReshapeLayer ***v6;
  ZinReshapeLayer **v7;
  char IsIntermediate;
  ZinReshapeLayer *v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  ZinTensorFamilyUtil **v13;
  const ZinIrTensor *v14;
  uint64_t v15;
  uint64_t DimensionValue;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t Hal;
  unint64_t v22;
  int64_t v23;
  _BOOL4 v25;
  ZinIrTensor::MirInfo *v26;
  ZinReshapeLayer *v27;
  ZinIrOpLayer **v28;
  ZinIrOpLayer **v29;
  ZinIrOpLayer *v30;
  unint64_t Interleave;
  char v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  uint64_t ReshapeInfo;
  int v38;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  BOOL IsWidthAlign;
  const ZinIrTensor *v62;
  ZinTensorFamilyUtil **v63;
  ZinReshapeLayer ***v64;
  ZinReshapeLayer ***v65;
  _QWORD *v66;
  ZinTensorDimensions *v67;
  void *__p[2];
  __int128 v69;
  uint64_t v70;

  v2 = a2;
  v3 = this;
  TensorFamily = (ZinReshapeLayer ****)ZinTensorFamilyUtil::GetTensorFamily(this[86], a2);
  v6 = *TensorFamily;
  v5 = TensorFamily[1];
  if (*TensorFamily != v5)
  {
    v67 = (const ZinIrTensor *)((char *)v2 + 48);
    do
    {
      v7 = *v6;
      IsIntermediate = ZinIrOpLayer::IsIntermediate((*v6)[12]);
      v9 = v7[12];
      v10 = *((_QWORD *)v9 + 8);
      v11 = *(_DWORD *)(v10 + 8);
      if ((IsIntermediate & 1) != 0)
      {
        result = 1;
        switch(v11)
        {
          case 29:
            goto LABEL_16;
          case 30:
          case 31:
          case 32:
            break;
          case 33:
          case 34:
          case 35:
            return result;
          case 36:
            v64 = v5;
            v13 = v3;
            v14 = v2;
            v15 = (*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0);
            DimensionValue = ZinIrTensor::GetDimensionValue(v15, 2);
            v17 = *((_QWORD *)v9 + 8);
            v18 = *(_QWORD *)(v17 + 24);
            v19 = *(_QWORD *)(v17 + 64);
            v20 = *(_DWORD *)((*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0)+ 88);
            Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)v9 + 2) + 160));
            v22 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 528);
            __p[0] = 0;
            if (ZinTensorFormatGetSize(v20, __p))
              return 1;
            v23 = v22 / (unint64_t)__p[0];
            if ((uint64_t)(v22 / (unint64_t)__p[0]) <= 1)
              v23 = 1;
            if (v18 % v23)
              return 1;
            if (DimensionValue % v23 || v19 != 1)
              return 1;
            v2 = v14;
            v3 = v13;
            v5 = v64;
            break;
          case 37:
            ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v7[12]);
            if ((ZinIrTransposeInfo::HasDimension(ReshapeInfo, 2) & 1) != 0)
              return 1;
            break;
          default:
            if (v11 == 7)
            {
              v38 = *(_DWORD *)(v10 + 12);
              if (v38)
              {
                if (v38 == 1 || v38 == 6)
                  return result;
              }
              else
              {
                v63 = v3;
                v65 = v5;
                v62 = v2;
                __p[0] = 0;
                __p[1] = 0;
                *(_QWORD *)&v69 = 0;
                v41 = (_QWORD *)*((_QWORD *)v9 + 11);
                v40 = (_QWORD *)*((_QWORD *)v9 + 12);
                v66 = v40;
                while (v41 != v40)
                {
                  v42 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v41 + 32))(*v41, 0, 0);
                  v44 = v42[6];
                  v43 = v42[7];
                  v45 = v42[8];
                  v46 = v42[9];
                  v47 = v42[10];
                  v48 = __p[1];
                  if (__p[1] >= (void *)v69)
                  {
                    v50 = __p[0];
                    v51 = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
                    v52 = v51 + 1;
                    if (v51 + 1 > 0x666666666666666)
                      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                    if (0x999999999999999ALL * ((uint64_t)(v69 - (unint64_t)__p[0]) >> 3) > v52)
                      v52 = 0x999999999999999ALL * ((uint64_t)(v69 - (unint64_t)__p[0]) >> 3);
                    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - (unint64_t)__p[0]) >> 3) >= 0x333333333333333)
                      v53 = 0x666666666666666;
                    else
                      v53 = v52;
                    if (v53)
                    {
                      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v69, v53);
                      v50 = __p[0];
                      v48 = __p[1];
                    }
                    else
                    {
                      v54 = 0;
                    }
                    v55 = &v54[40 * v51];
                    *(_QWORD *)v55 = v44;
                    *((_QWORD *)v55 + 1) = v46;
                    *((_QWORD *)v55 + 2) = v45;
                    *((_QWORD *)v55 + 3) = v43;
                    *((_QWORD *)v55 + 4) = v47;
                    if (v48 == v50)
                    {
                      v59 = &v54[40 * v51];
                    }
                    else
                    {
                      v56 = &v54[40 * v51];
                      do
                      {
                        v57 = *(_OWORD *)(v48 - 5);
                        v58 = *(_OWORD *)(v48 - 3);
                        v59 = v56 - 40;
                        *((_QWORD *)v56 - 1) = *(v48 - 1);
                        *(_OWORD *)(v56 - 24) = v58;
                        *(_OWORD *)(v56 - 40) = v57;
                        v48 -= 5;
                        v56 -= 40;
                      }
                      while (v48 != v50);
                    }
                    v49 = v55 + 40;
                    __p[0] = v59;
                    __p[1] = v55 + 40;
                    *(_QWORD *)&v69 = &v54[40 * v53];
                    if (v50)
                      operator delete(v50);
                  }
                  else
                  {
                    *(_QWORD *)__p[1] = v44;
                    v48[1] = v46;
                    v48[2] = v45;
                    v48[3] = v43;
                    v49 = v48 + 5;
                    v48[4] = v47;
                  }
                  __p[1] = v49;
                  ++v41;
                  v40 = v66;
                }
                v60 = (*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0, 0);
                v3 = v63;
                IsWidthAlign = ZinConcatLayerUtils::IsWidthAlign(__p, *(_DWORD *)(v60 + 88), *(_QWORD *)(*(_QWORD *)v63[88] + 528));
                v2 = v62;
                v5 = v65;
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                if (!IsWidthAlign)
                  return 1;
              }
            }
            else if ((v11 - 78) <= 0x1B && ((1 << (v11 - 78)) & 0x8000007) != 0)
            {
              return result;
            }
            break;
        }
      }
      else
      {
        if (v11 != 29)
          return 1;
LABEL_16:
        v25 = IsVector(v67);
        result = 1;
        if (!v25 || *((_QWORD *)v2 + 9) != 1)
          return result;
      }
      v26 = v7[13];
      if (v26
        && (ZinIrTensor::MirInfo::HasCustomStrides(v26) || !ZinIrTensor::HasFlexDimensionOrderHint((ZinIrTensor *)v7)))
      {
        return 1;
      }
      v27 = v7[12];
      v28 = (ZinIrOpLayer **)*((_QWORD *)v27 + 14);
      v29 = (ZinIrOpLayer **)*((_QWORD *)v27 + 15);
      while (v28 != v29)
      {
        v30 = *v28;
        if (ZinIrOpLayer::IsANELayer(*v28)
          && ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v30 + 496))(v30) & 1) != 0)
        {
          return 1;
        }
        ++v28;
      }
      Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v7);
      if (v32)
      {
        if (Interleave > 1)
          return 1;
      }
      else if (ZinIrOpLayer::IsANELayer(*((ZinIrOpLayer **)v2 + 12)))
      {
        v33 = *((_OWORD *)v67 + 1);
        *(_OWORD *)__p = *(_OWORD *)v67;
        v69 = v33;
        v34 = *((_QWORD *)v67 + 4);
        v35 = __p[1];
        __p[1] = *((void **)&v33 + 1);
        *((_QWORD *)&v69 + 1) = v35;
        v70 = v34;
        if (!IsValidTensorDims((unint64_t *)__p, *(_QWORD **)v3[88]))
          return 1;
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return 0;
}

void sub_206EA7A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t MirOpt::CWTransposeUtil::CalculatePerfCosts(ZinTensorFamilyUtil **a1, const __CFArray *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  ZinIrOpLayer *v7;
  ZinIrOpLayer *v8;
  uint64_t **v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void **v21;
  void **v22;
  size_t *v23;
  size_t v24;
  __int128 *v25;
  const void *v26;
  _QWORD *v27;
  ZinIrOpLayer *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t LiveInLayer;
  int v35;
  uint64_t Hal;
  const ZinIrHalParameters *v37;
  uint64_t v38;
  const ZinANELayer *v39;
  BOOL v40;
  unsigned int v41;
  _BOOL4 IsNELayer;
  const ZinEngineLayerMirInfo *v43;
  void **v44;
  int v45;
  int v46;
  int v47;
  __int128 v48;
  int v49;
  int v50;
  int v51;
  int v52;
  _QWORD *v53;
  double v59;
  uint64_t v60;
  ZinTensorFamilyUtil **v62;
  const __CFArray *v63;
  uint64_t i;
  _BYTE v66[10];
  char v67;
  int v68;
  _OWORD v69[2];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  size_t *v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  _BYTE v124[452];
  _QWORD v125[4];
  int v126;
  int v127;
  _QWORD v128[4];
  int v129;
  int v130;
  _QWORD v131[4];
  int v132;
  _QWORD v133[4];
  int v134;
  char *v135;
  _BYTE *v136;
  _QWORD v137[4];
  int v138;
  void *v139[2];
  char v140;
  uint64_t v141;
  _QWORD v142[5];
  CFArrayRef __dst[47];
  char v144;
  __int128 v145[2];
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  char v156;
  char v157;
  char v158;
  char v159;
  char v160;
  char v161;
  char v162;
  char v163;
  char v164;
  char v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  __int16 v174;
  __int128 v175;
  uint64_t v176;
  __int16 v177;
  char v178;
  char v179;
  __int16 v180;
  char v181;
  char v182;
  __int16 v183;
  char v184;
  char v185;
  char v186;
  char v187;
  char v188;
  char v189;
  char v190;
  char v191;
  char v192;
  char v193;
  char v194;
  char v195;
  char v196;
  char v197;
  __int16 v198;
  char v199;
  char v200;
  int v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a2 + 19);
  *(_QWORD *)&v146 = a2;
  std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t)__dst, (uint64_t *)&v146, 1);
  std::string::basic_string[abi:ne180100]<0>(v139, "cw_opt_perf_cost");
  ZinIrOpLayerGraph::CloneSubGraph(v5, __dst, (uint64_t)v139, (uint64_t)&v141);
  if (v140 < 0)
    operator delete(v139[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)__dst, (_QWORD *)__dst[1]);
  __dst[0] = a2;
  v6 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v142, __dst);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = (ZinIrOpLayer *)v6[3];
  memcpy(__dst, (const void *)a3, sizeof(__dst));
  v144 = 1;
  v8 = MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayer(a1, v7, (uint64_t)__dst);
  v62 = a1;
  v9 = (uint64_t **)*((_QWORD *)v8 + 19);
  memset(v137, 0, sizeof(v137));
  v138 = 1065353216;
  v63 = a2;
  (*(void (**)(char **__return_ptr, const __CFArray *))(*(_QWORD *)a2 + 512))(&v135, a2);
  v10 = v135;
  if (v136 != v135)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      __dst[0] = (CFArrayRef)&v10[v11];
      v13 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v137, &v10[v11], (uint64_t)&std::piecewise_construct, (_QWORD **)__dst);
      if (v12)
        v14 = (__int128 *)(a3 + 136);
      else
        v14 = (__int128 *)(a3 + 16);
      v15 = *v14;
      v16 = v14[1];
      v17 = v14[2];
      *(_OWORD *)(v13 + 72) = v14[3];
      *(_OWORD *)(v13 + 56) = v17;
      *(_OWORD *)(v13 + 40) = v16;
      *(_OWORD *)(v13 + 24) = v15;
      v18 = v14[4];
      v19 = v14[5];
      v20 = v14[6];
      *((_DWORD *)v13 + 34) = *((_DWORD *)v14 + 28);
      *(_OWORD *)(v13 + 120) = v20;
      *(_OWORD *)(v13 + 104) = v19;
      *(_OWORD *)(v13 + 88) = v18;
      ++v12;
      v10 = v135;
      v11 += 8;
    }
    while (v12 < (v136 - v135) >> 3);
  }
  memset(v133, 0, sizeof(v133));
  v134 = 1065353216;
  v22 = (void **)*((_QWORD *)a2 + 11);
  v21 = (void **)*((_QWORD *)v63 + 12);
  for (i = (uint64_t)v8; v22 != v21; ++v22)
  {
    v93 = 0;
    v93 = (size_t *)*v22;
    *(_QWORD *)&v69[0] = 0;
    *(_QWORD *)&v69[0] = (*(uint64_t (**)(size_t *, _QWORD, _QWORD))(*v93 + 32))(v93, 0, 0);
    v23 = v93;
    if (*((char *)v93 + 47) >= 0)
      v24 = *((unsigned __int8 *)v93 + 47);
    else
      v24 = v93[4];
    std::string::basic_string[abi:ne180100]((uint64_t)&v146, v24 + 5);
    if ((SBYTE7(v147) & 0x80u) == 0)
      v25 = &v146;
    else
      v25 = (__int128 *)v146;
    if (v24)
    {
      if (*((char *)v23 + 47) >= 0)
        v26 = v23 + 3;
      else
        v26 = (const void *)v23[3];
      memmove(v25, v26, v24);
    }
    strcpy((char *)v25 + v24, "_fake");
    ZinObjectNameFactory::ZinObjectNameFactory(__dst, &v146);
    v8 = (ZinIrOpLayer *)i;
    if (SBYTE7(v147) < 0)
      operator delete((void *)v146);
    if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v133, &v93))
    {
      v27 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v133, &v93);
      if (!v27)
        goto LABEL_75;
      v28 = (ZinIrOpLayer *)v27[3];
    }
    else
    {
      v29 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v137, v69);
      v30 = v141;
      if (v29)
      {
        v31 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v137, v69);
        if (!v31
          || (v32 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v137, v69)) == 0)
        {
LABEL_75:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        v33 = *((_DWORD *)v32 + 6);
        v148 = 0;
        v146 = 0u;
        v147 = 0u;
        LiveInLayer = ZinBuilder::CreateLiveInLayer(v30, (uint64_t)__dst, (const ZinTensorDimensions *)(v31 + 4), v33, 1uLL, (const ZinTensorDimensions *)&v146);
      }
      else
      {
        v35 = *(_DWORD *)(*(_QWORD *)&v69[0] + 88);
        v148 = 0;
        v146 = 0u;
        v147 = 0u;
        LiveInLayer = ZinBuilder::CreateLiveInLayer(v141, (uint64_t)__dst, (const ZinTensorDimensions *)(*(_QWORD *)&v69[0] + 48), v35, 1uLL, (const ZinTensorDimensions *)&v146);
      }
      v28 = (ZinIrOpLayer *)LiveInLayer;
    }
    *(_QWORD *)&v146 = &v93;
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v133, &v93, (uint64_t)&std::piecewise_construct, (_QWORD **)&v146)[3] = v28;
    *(_QWORD *)&v145[0] = i;
    *(_QWORD *)v124 = v145;
    *(_QWORD *)&v124[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v146, v124);
    ZinIrOpLayerGraph::AddNode(v9, v28, (ZinIrOpLayer ***)&v146);
    *(_QWORD *)&v146 = &unk_24C02BB18;
    if (*((_QWORD *)&v146 + 1))
    {
      *(_QWORD *)&v147 = *((_QWORD *)&v146 + 1);
      operator delete(*((void **)&v146 + 1));
    }
    ZinIrOpLayerGraph::AddEdge((uint64_t)v9, (uint64_t)v28, i, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    __dst[0] = (CFArrayRef)off_24C01FBB0;
    if (SHIBYTE(__dst[3]) < 0)
      operator delete(__dst[1]);
  }
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)v63 + 2) + 160));
  v37 = (const ZinIrHalParameters *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  if (!*((_QWORD *)v8 + 33))
  {
    ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)__dst);
    ZinMirSetActiveNE(v8, __dst);
    ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)__dst);
  }
  *(int64x2_t *)v124 = vdupq_n_s64(1uLL);
  *(_QWORD *)&v124[16] = 1;
  *(_QWORD *)&v124[64] = 0;
  v124[72] = 0;
  memset(&v124[40], 0, 17);
  *(_QWORD *)&v124[24] = 0;
  v124[32] = 0;
  *(_QWORD *)&v124[80] = 1;
  memset(&v124[88], 0, 26);
  *(_OWORD *)&v124[120] = xmmword_207A7E150;
  v124[136] = 0;
  *(_DWORD *)&v124[232] = 0;
  *(_QWORD *)&v124[296] = 0;
  memset(&v124[240], 0, 49);
  *(_DWORD *)&v124[304] = 0;
  *(_QWORD *)&v124[368] = 0;
  memset(&v124[312], 0, 49);
  *(_DWORD *)&v124[376] = 0;
  *(_QWORD *)&v124[440] = 0;
  memset(&v124[384], 0, 49);
  *(_DWORD *)&v124[448] = 0;
  memset(v125, 0, sizeof(v125));
  memset(&v124[152], 0, 41);
  memset(&v124[200], 0, 25);
  v126 = 1065353216;
  v127 = 0;
  memset(v128, 0, sizeof(v128));
  v129 = 1065353216;
  v130 = 0;
  memset(v131, 0, sizeof(v131));
  v132 = 1065353216;
  v38 = *((_QWORD *)v8 + 33);
  memcpy(v124, (const void *)(v38 + 120), sizeof(v124));
  if (v124 == (_BYTE *)(v38 + 120))
  {
    v127 = *(_DWORD *)(v38 + 616);
    v130 = *(_DWORD *)(v38 + 664);
    v39 = (const ZinANELayer *)i;
  }
  else
  {
    v126 = *(_DWORD *)(v38 + 608);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v125, *(uint64_t **)(v38 + 592), 0);
    v39 = (const ZinANELayer *)i;
    v127 = *(_DWORD *)(v38 + 616);
    v129 = *(_DWORD *)(v38 + 656);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v128, *(uint64_t **)(v38 + 640), 0);
    v130 = *(_DWORD *)(v38 + 664);
    v132 = *(_DWORD *)(v38 + 704);
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>(v131, *(uint64_t **)(v38 + 688), 0);
  }
  if (v124[113])
    v40 = 1;
  else
    v40 = ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)v124, v39, 1);
  if (!ZinIrOpLayer::IsNELayer(v39))
  {
    ZinMirL2Config::SetPatchShape((uint64_t)v124, v39, 0, 0, v37);
LABEL_52:
    if (!v40)
      goto LABEL_50;
    goto LABEL_53;
  }
  if (v124[30])
    goto LABEL_52;
  BYTE4(__dst[0]) = 0;
  LODWORD(__dst[0]) = 0x10000;
  if (!v40
    || (v41 = *(_DWORD *)(ZinIrOpLayer::GetInputTensor(v39, 0) + 88),
        ZinIrOpLayer::GetInputTensor(v39, 0),
        (ZinMirL2Config::ZinMirSetWorkUnitShape((uint64_t)v124, v39, v41) & 1) == 0))
  {
LABEL_50:
    ZinAssertImpl("WU assignment must be successful");
  }
LABEL_53:
  BYTE8(v146) = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0;
  *(_QWORD *)&v146 = &off_24C01F198;
  v174 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 256;
  v175 = 0u;
  v176 = 0;
  v177 = 0;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0;
  v193 = 0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v200 = 0;
  v201 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v93 = (size_t *)&unk_24C01F1F0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  IsNELayer = ZinIrOpLayer::IsNELayer(v39);
  v43 = (const ZinEngineLayerMirInfo *)*((_QWORD *)v39 + 33);
  if (IsNELayer)
  {
    v44 = (void **)&v146;
    v45 = ZinNECustomPerfInfo::SetCustomPerfInfo((ZinNECustomPerfInfo *)&v146, v43);
  }
  else
  {
    v44 = (void **)&v93;
    v45 = ZinPECustomPerfInfo::SetCustomPerfInfo((ZinPECustomPerfInfo *)&v93, v43);
  }
  if (v45)
    ZinAssertImpl("Set custom perf info must be successful");
  v46 = *(_DWORD *)(a3 + 16);
  BYTE6(__dst[1]) = *(_BYTE *)(a3 + 80);
  *(CFArrayRef *)((char *)__dst + 6) = *(CFArrayRef *)(a3 + 72);
  v47 = *((unsigned __int8 *)v44 + 112);
  *(_OWORD *)(v44 + 1) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v44 + 3) = *(_OWORD *)(a3 + 40);
  v44[5] = *(void **)(a3 + 56);
  *((_BYTE *)v44 + 48) = 1;
  *((_DWORD *)v44 + 14) = v46;
  *((_BYTE *)v44 + 60) = 1;
  *(void **)((char *)v44 + 73) = *(CFArrayRef *)((char *)__dst + 7);
  *(void **)((char *)v44 + 66) = __dst[0];
  if (!v47)
    *((_BYTE *)v44 + 112) = 1;
  *((_WORD *)v44 + 32) = 0;
  *((_BYTE *)v44 + 88) = 0;
  *((_BYTE *)v44 + 104) = 0;
  if (*(_BYTE *)(a3 + 12))
  {
    v48 = *(_OWORD *)(a3 + 160);
    *(_OWORD *)(v44 + 15) = *(_OWORD *)(a3 + 144);
    v49 = *(_DWORD *)(a3 + 136);
    BYTE6(__dst[1]) = *(_BYTE *)(a3 + 200);
    *(CFArrayRef *)((char *)__dst + 6) = *(CFArrayRef *)(a3 + 192);
    v50 = *((unsigned __int8 *)v44 + 224);
    *(_OWORD *)(v44 + 17) = v48;
    v44[19] = *(void **)(a3 + 176);
    *((_BYTE *)v44 + 160) = 1;
    *((_DWORD *)v44 + 42) = v49;
    *((_BYTE *)v44 + 172) = 1;
    *(void **)((char *)v44 + 185) = *(CFArrayRef *)((char *)__dst + 7);
    *(void **)((char *)v44 + 178) = __dst[0];
    if (!v50)
      *((_BYTE *)v44 + 224) = 1;
    *((_WORD *)v44 + 88) = 0;
    *((_BYTE *)v44 + 200) = 0;
    *((_BYTE *)v44 + 216) = 0;
  }
  v51 = *(_DWORD *)(a3 + 256);
  BYTE6(__dst[1]) = *(_BYTE *)(a3 + 320);
  *(CFArrayRef *)((char *)__dst + 6) = *(CFArrayRef *)(a3 + 312);
  v52 = *((unsigned __int8 *)v44 + 336);
  v44[33] = *(void **)(a3 + 296);
  *(_OWORD *)(v44 + 29) = *(_OWORD *)(a3 + 264);
  *(_OWORD *)(v44 + 31) = *(_OWORD *)(a3 + 280);
  *((_BYTE *)v44 + 272) = 1;
  *((_DWORD *)v44 + 70) = v51;
  *((_BYTE *)v44 + 284) = 1;
  *(void **)((char *)v44 + 297) = *(CFArrayRef *)((char *)__dst + 7);
  *(void **)((char *)v44 + 290) = __dst[0];
  if (!v52)
    *((_BYTE *)v44 + 336) = 1;
  *((_WORD *)v44 + 144) = 0;
  *((_BYTE *)v44 + 312) = 0;
  *((_BYTE *)v44 + 328) = 0;
  v80 = 0;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  memset(v69, 0, sizeof(v69));
  v53 = operator new(8uLL);
  *v53 = 0;
  v81 = v53;
  v82 = v53 + 1;
  v84 = 0;
  v85 = 0;
  v83 = v53 + 1;
  __asm { FMOV            V0.2D, #-1.0 }
  v86 = _Q0;
  v87 = _Q0;
  v88 = _Q0;
  v89 = _Q0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  ZinIrHalParameters::GetOperationCondition(v37, *(double *)(*((_QWORD *)v62[88] + 1) + 104), *(_DWORD *)(*((_QWORD *)v62[88] + 1) + 112), *(_DWORD *)(*((_QWORD *)v62[88] + 1) + 116), (uint64_t)v145);
  *(_WORD *)v66 = 257;
  v66[2] = 1;
  memset(&v66[3], 0, 7);
  v67 = 1;
  v68 = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)__dst, (uint64_t)v37, v145, (uint64_t *)v66);
  if (ZinANELayer::CalculatePerf(v39, (ZinIrPerf *)__dst, (const ZinCustomPerfInfo *)v44, (ZinPerfDescriptor *)v69))ZinAssertImpl("Perf estimate must be successful");
  v59 = *((double *)&v70 + 1);
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)__dst);
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v93);
  *(_QWORD *)&v146 = &off_24C01F198;
  if ((_QWORD)v175)
  {
    *((_QWORD *)&v175 + 1) = v175;
    operator delete((void *)v175);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v146);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v131);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v128);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v125);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v133);
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v137);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v142);
  v60 = v141;
  v141 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  return (unint64_t)(v59 * 1000000.0);
}

void sub_206EA8664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  void *v13;
  uint64_t v14;

  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&STACK[0x6C0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0x610]);
  v13 = (void *)v11[79];
  if (v13)
  {
    v11[80] = v13;
    operator delete(v13);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0x650]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a11);
  v14 = v11[90];
  v11[90] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

ZinIrOpLayer *MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayer(ZinTensorFamilyUtil **a1, ZinIrOpLayer *this, uint64_t a3)
{
  if (ZinIrOpLayer::IsNELayer(this))
    return MirOpt::CWTransposeUtil::ApplyCWTransposeToNELayer(a1, this, a3);
  if (!ZinIrOpLayer::IsPELayer(this))
    ZinAssertImpl("Only NE and PE engine layers are supported\n");
  return MirOpt::CWTransposeUtil::ApplyCWTransposeToPELayer((MirOpt::CWTransposeUtil *)a1, this, a3);
}

void MirOpt::CWTransposeUtil::CreateLayerConstraint(uint64_t a1@<X0>, ZinIrOpLayer *a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, std::string *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t RootTensor;
  unint64_t v18;
  uint64_t v19;
  ZinTensorFamilyUtil *v20;
  const ZinIrTensor *v21;
  uint64_t v22;
  ZinTensorFamilyUtil *v23;
  const ZinIrTensor *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  ZinIrOpLayer *v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _BOOL4 IsNELayer;
  ZinIrOpLayer *v39;
  uint64_t v40;
  std::string::value_type v41;
  unsigned __int8 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  const char *v53;
  _DWORD *v54;
  _DWORD *v55;
  std::string *v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  void *v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  void *__p;
  void *v72;
  _BYTE v73[64];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  _BYTE v78[64];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  _BYTE v83[64];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  int v87;
  const ZinIrTensor **v88;
  const ZinIrTensor **v89;
  ZinIrOpLayer *v90;

  v90 = a2;
  v15 = *((_QWORD *)a2 + 11);
  v14 = *((_QWORD *)a2 + 12);
  (*(void (**)(const ZinIrTensor ***__return_ptr, ZinIrOpLayer *))(*(_QWORD *)a2 + 512))(&v88, a2);
  v16 = (char *)v89 - (char *)v88;
  v61 = (char *)v89 - (char *)v88 == 16;
  RootTensor = ZinTensorFamilyUtil::GetRootTensor(*(ZinTensorFamilyUtil **)(a1 + 688), *v88);
  v18 = v14 - v15;
  v19 = *(_QWORD *)(RootTensor + 8);
  v62 = v18;
  if (v16 == 16)
  {
    v20 = *(ZinTensorFamilyUtil **)(a1 + 688);
    v21 = v88[1];
LABEL_5:
    v22 = *(_QWORD *)(ZinTensorFamilyUtil::GetRootTensor(v20, v21) + 8);
    goto LABEL_7;
  }
  if (v18 >= 9)
  {
    v20 = *(ZinTensorFamilyUtil **)(a1 + 688);
    v21 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 11)
                                                                                               + 8)
                                                                                 + 32))(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8), 0, 0);
    goto LABEL_5;
  }
  v22 = -1;
LABEL_7:
  v59 = v22;
  v23 = *(ZinTensorFamilyUtil **)(a1 + 688);
  v24 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v90 + 32))(v90, 0, 0);
  v60 = *(_QWORD *)(ZinTensorFamilyUtil::GetRootTensor(v23, v24) + 8);
  v25 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)(a1 + 576), &v90);
  v57 = a3;
  v58 = v19;
  v56 = a7;
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v26 = v25[24];
  v27 = v25[25];
  v28 = v25[26];
  v29 = v90;
  MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)&__p);
  v30 = (*(uint64_t (**)(ZinIrOpLayer *, void **))(*(_QWORD *)v29 + 424))(v29, &__p);
  if (__p)
  {
    v72 = __p;
    operator delete(__p);
  }
  if (ZinIrOpLayer::IsNELayer(v90))
  {
    if (a5 | a4)
      v31 = v62 == 8;
    else
      v31 = 1;
    v32 = v31;
    if ((a4 == 1) != (a6 == 1))
      v33 = v28;
    else
      v33 = 1;
    v34 = v32 & v33;
    if (a4 == 1)
    {
      v35 = MirOpt::CWTransposeUtil::UseTransposedDomain(a1, v90, 1, a5, a6);
      if (!v34)
        v30 = 0;
      if (v62 == 8)
        v36 = v35;
      else
        v36 = 0;
    }
    else
    {
      v36 = 0;
      v30 = v34 != 0;
    }
  }
  else
  {
    v30 = a4 != 1 || v26 != 0;
    if (a5 == 1 && !v27)
      v30 = 0;
    if (a6 == 1 && !v28)
      v30 = 0;
    v36 = MirOpt::CWTransposeUtil::UseTransposedDomain(a1, v90, a4, a5, a6);
  }
  IsNELayer = ZinIrOpLayer::IsNELayer(v90);
  v39 = v90;
  v40 = *(_QWORD *)v90;
  if (IsNELayer)
  {
    v41 = (a4 == 1) ^ (a6 == 1) ^ (*(uint64_t (**)(ZinIrOpLayer *))(v40 + 408))(v90);
    goto LABEL_48;
  }
  v42 = (*(uint64_t (**)(ZinIrOpLayer *))(v40 + 640))(v90);
  v43 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v39 + 648))(v39);
  v44 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v39 + 408))(v39);
  v45 = (a5 == 1) ^ v43;
  v46 = (a6 == 1) ^ v44;
  if (!v36)
  {
    if ((((a4 == 1) ^ v42) & 1) == 0)
      goto LABEL_47;
LABEL_46:
    v41 = 1;
    goto LABEL_48;
  }
  if ((((a4 == 1) ^ v42) & 1) == 0)
    goto LABEL_46;
  v45 ^= 1u;
  v46 ^= 1u;
LABEL_47:
  v41 = v45 | v46;
LABEL_48:
  v73[56] = 0;
  LOBYTE(v74) = 0;
  BYTE8(v74) = 0;
  BYTE12(v75) = 0;
  memset(&v73[8], 0, 42);
  v76 = 0uLL;
  v77 = 0;
  *(_DWORD *)v78 = 0;
  v78[56] = 0;
  LOBYTE(v79) = 0;
  BYTE8(v79) = 0;
  BYTE12(v80) = 0;
  memset(&v78[8], 0, 42);
  v81 = 0uLL;
  v82 = 0;
  *(_DWORD *)v83 = 0;
  v83[56] = 0;
  LOBYTE(v84) = 0;
  BYTE8(v84) = 0;
  BYTE12(v85) = 0;
  memset(&v83[8], 0, 42);
  v87 = 0;
  v86 = 0uLL;
  *(_DWORD *)v73 = 0;
  LODWORD(__p) = a4;
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD))(**((_QWORD **)*v88 + 12) + 80))(v63, *((_QWORD *)*v88 + 12), 0, 0);
  v74 = v67;
  v75 = v68;
  v76 = v69;
  v77 = v70;
  *(_OWORD *)v73 = *(_OWORD *)v63;
  *(_OWORD *)&v73[16] = v64;
  *(_OWORD *)&v73[32] = v65;
  *(_OWORD *)&v73[48] = v66;
  if (a4 == 1)
  {
    v47 = *(_QWORD *)&v73[16];
    *(_QWORD *)&v73[16] = *(_QWORD *)&v73[32];
    *(_QWORD *)&v73[32] = v47;
  }
  if (v16 == 16)
  {
    HIDWORD(__p) = a5;
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD))(**((_QWORD **)v88[1] + 12) + 80))(v63, *((_QWORD *)v88[1] + 12), 0, 0);
    v79 = v67;
    v80 = v68;
    v81 = v69;
    v82 = v70;
    *(_OWORD *)v78 = *(_OWORD *)v63;
    *(_OWORD *)&v78[16] = v64;
    *(_OWORD *)&v78[32] = v65;
    *(_OWORD *)&v78[48] = v66;
    if (a5 == 1)
    {
      v48 = *(_QWORD *)&v78[16];
      *(_QWORD *)&v78[16] = *(_QWORD *)&v78[32];
      *(_QWORD *)&v78[32] = v48;
    }
  }
  LODWORD(v72) = a6;
  (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v90 + 80))(v63, v90, 0, 0);
  v84 = v67;
  v85 = v68;
  v86 = v69;
  v87 = v70;
  *(_OWORD *)v83 = *(_OWORD *)v63;
  *(_OWORD *)&v83[16] = v64;
  *(_OWORD *)&v83[32] = v65;
  *(_OWORD *)&v83[48] = v66;
  if (a6 == 1)
  {
    v49 = *(_QWORD *)&v83[16];
    *(_QWORD *)&v83[16] = *(_QWORD *)&v83[32];
    *(_QWORD *)&v83[32] = v49;
  }
  BYTE4(v72) = v61;
  BYTE5(v72) = v36;
  if ((v30 | v36) == 1)
  {
    v50 = MirOpt::CWTransposeUtil::CalculatePerfAndMemCosts((ZinTensorFamilyUtil **)a1, v90, (uint64_t)&__p);
    v52 = v51;
  }
  else
  {
    v50 = -1;
    v52 = -1;
  }
  if (v62 == 8)
  {
    v53 = "src1/dst id cannot be -1";
    if (v58 != -1 && v60 != -1)
    {
      v54 = operator new(0x20uLL);
      v63[1] = v54 + 8;
      *(_QWORD *)&v64 = v54 + 8;
      *(_QWORD *)v54 = v58;
      v54[2] = a4;
      *((_QWORD *)v54 + 2) = v60;
      v54[6] = a6;
      v63[0] = v54;
      CpTransposeUtils::LayerConstraint::LayerConstraint(v56, (__int128 **)v63, v30, v36, v41, v50, v52, v57);
      goto LABEL_66;
    }
LABEL_72:
    ZinAssertImpl(v53, v56, v57);
  }
  v53 = "src1/src2/dst id cannot be -1";
  if (v58 == -1 || v59 == -1 || v60 == -1)
    goto LABEL_72;
  v55 = operator new(0x30uLL);
  v63[1] = v55 + 12;
  *(_QWORD *)&v64 = v55 + 12;
  *(_QWORD *)v55 = v58;
  v55[2] = a4;
  *((_QWORD *)v55 + 2) = v59;
  v55[6] = a5;
  *((_QWORD *)v55 + 4) = v60;
  v55[10] = a6;
  v63[0] = v55;
  CpTransposeUtils::LayerConstraint::LayerConstraint(v56, (__int128 **)v63, v30, v36, v41, v50, v52, v57);
LABEL_66:
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_206EA8EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  void *v34;

  if (__p)
    operator delete(__p);
  v34 = *(void **)(v32 - 120);
  if (v34)
  {
    *(_QWORD *)(v32 - 112) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::CWTransposeUtil::UseTransposedDomain(uint64_t a1, ZinIrOpLayer *a2, int a3, int a4, int a5)
{
  _BYTE *v9;
  _BOOL4 v11;
  BOOL v12;
  ZinIrOpLayer *v15;

  v15 = a2;
  v9 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)(a1 + 576), &v15);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = a3 == 1 && v9[24] == 0;
  if (a4 == 1 && !v9[25])
    v11 = 1;
  if (v9[26])
    v12 = 0;
  else
    v12 = a5 == 1;
  if (!v12 && !v11)
    return MirOpt::CWTransposeUtil::IsBetterWithTransposedDomain(a1, v15, a3, a4, a5);
  else
    return MirOpt::CWTransposeUtil::IsCompatibleWithTransposedDomain(a1, v15, a3, a4, a5);
}

void MirOpt::CWTransposeUtil::CreateLayerConstraint(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, std::string *a7@<X8>)
{
  ZinTensorFamilyUtil *v14;
  const ZinIrTensor *v15;
  uint64_t v16;
  ZinTensorFamilyUtil *v17;
  const ZinIrTensor *v18;
  uint64_t v19;
  ZinTensorFamilyUtil *v20;
  const ZinIrTensor *v21;
  uint64_t v22;
  int v23;
  std::string::size_type v24;
  _DWORD *v27;
  const char *v28;
  void *__p;
  void *v30;
  char *v31;
  void *v32;
  _BYTE *v33;
  uint64_t v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v32, *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
  if ((unint64_t)(((v33 - (_BYTE *)v32) >> 3) - 1) >= 2)
  {
    v28 = (const char *)(a2 + 24);
    if (*(char *)(a2 + 47) < 0)
      v28 = *(const char **)v28;
    ZinAssertImpl("[MirOpt::CWTranspose] Unsupported SNE layer with number of inputs not 2: %s", v28);
  }
  v14 = *(ZinTensorFamilyUtil **)(a1 + 688);
  v15 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a2 + 88) + 32))(**(_QWORD **)(a2 + 88), 0, 0);
  v16 = *(_QWORD *)(ZinTensorFamilyUtil::GetRootTensor(v14, v15) + 8);
  v17 = *(ZinTensorFamilyUtil **)(a1 + 688);
  v18 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 88) + 8)
                                                                               + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 8), 0, 0);
  v19 = *(_QWORD *)(ZinTensorFamilyUtil::GetRootTensor(v17, v18) + 8);
  v20 = *(ZinTensorFamilyUtil **)(a1 + 688);
  v21 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v22 = *(_QWORD *)(ZinTensorFamilyUtil::GetRootTensor(v20, v21) + 8);
  v23 = a5 | a4 | a6;
  if (v23)
    v24 = -1;
  else
    v24 = 1;
  if (v16 == -1 || v19 == -1 || v22 == -1)
    ZinAssertImpl("src1/src2/dst id cannot be -1");
  v27 = operator new(0x30uLL);
  v30 = v27 + 12;
  v31 = (char *)(v27 + 12);
  *(_QWORD *)v27 = v16;
  v27[2] = a4;
  *((_QWORD *)v27 + 2) = v19;
  v27[6] = a5;
  *((_QWORD *)v27 + 4) = v22;
  v27[10] = a6;
  __p = v27;
  CpTransposeUtils::LayerConstraint::LayerConstraint(a7, (__int128 **)&__p, v23 == 0, 0, 0, v24, v24, a3);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
}

void sub_206EA9210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

_QWORD *MirOpt::CWTransposeUtil::CreateORToolsGraph@<X0>(MirOpt::CWTransposeUtil *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *RootTensors;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  _QWORD *result;
  uint64_t v28;
  void *__p[2];
  __int128 v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "CpTransposeGraph");
  CpTransposeGraph::CpTransposeGraph(v4, __p);
  *a2 = v4;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  v5 = (_QWORD *)*((_QWORD *)this + 87);
  v36[0] = &off_24C05A658;
  v36[1] = this;
  v36[2] = a2;
  v37 = v36;
  v6 = ZinIrControlFlowGraph::TraverseForward(v5, (uint64_t)v36, 1);
  v7 = v37;
  if (v37 == v36)
  {
    v8 = 4;
    v7 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_8;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_8:
  if (v6)
    ZinAssertImpl("Failed to create transpose optimization graph");
  RootTensors = (_QWORD *)ZinTensorFamilyUtil::GetRootTensors(*((ZinTensorFamilyUtil **)this + 86));
  v10 = RootTensors + 1;
  v11 = (_QWORD *)*RootTensors;
  if ((_QWORD *)*RootTensors != RootTensors + 1)
  {
    do
    {
      v12 = v11[4];
      v13 = *(unint64_t **)(v12 + 8);
      v14 = *(_QWORD *)(v12 + 80);
      v15 = *(_OWORD *)(v12 + 64);
      *(_OWORD *)__p = *(_OWORD *)(v12 + 48);
      v30 = v15;
      v31 = v14;
      CpTransposeGraph::SetTensorDimensions(*a2, v13, (__int128 *)__p);
      v16 = (_QWORD *)v11[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v11[2];
          v18 = *v17 == (_QWORD)v11;
          v11 = v17;
        }
        while (!v18);
      }
      v11 = v17;
    }
    while (v17 != v10);
    v11 = (_QWORD *)*RootTensors;
  }
  if (v11 != v10)
  {
    do
    {
      MirOpt::CWTransposeUtil::CheckTransposableAndSetRootTensorConstraint((ZinTensorFamilyUtil **)this, a2, (ZinIrOpLayer **)v11[4]);
      v19 = (_QWORD *)v11[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v11[2];
          v18 = *v20 == (_QWORD)v11;
          v11 = v20;
        }
        while (!v18);
      }
      v11 = v20;
    }
    while (v20 != v10);
  }
  v21 = (_QWORD *)*((_QWORD *)this + 87);
  v34[0] = &off_24C05A6B0;
  v34[1] = this;
  v34[2] = a2;
  v35 = v34;
  v22 = ZinIrControlFlowGraph::TraverseForward(v21, (uint64_t)v34, 1);
  v23 = v35;
  if (v35 == v34)
  {
    v24 = 4;
    v23 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_29;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_29:
  if (v22)
    ZinAssertImpl("Failed to create transpose optimization graph");
  v25 = (_QWORD *)*((_QWORD *)this + 87);
  v32[0] = &off_24BFF52C8;
  v32[1] = this;
  v32[2] = a2;
  v33 = v32;
  v26 = ZinIrControlFlowGraph::TraverseForward(v25, (uint64_t)v32, 1);
  result = v33;
  if (v33 == v32)
  {
    v28 = 4;
    result = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_35;
    v28 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v28))();
LABEL_35:
  if (v26)
    ZinAssertImpl("Failed to update constraints");
  return result;
}

void sub_206EA9504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  CpTransposeGraph **v24;

  std::unique_ptr<CpTransposeGraph>::reset[abi:ne180100](v24, 0);
  _Unwind_Resume(a1);
}

void MirOpt::CWTransposeUtil::CollectBoundaryNodes(int a1, CpGraph **this, uint64_t a3)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;

  CpGraph::GetTensors(this, &v8);
  v5 = v8;
  v6 = v9;
  if (v8 != v9)
  {
    do
    {
      v7 = *v5;
      if (*(_BYTE *)CpTransposeGraph::GetRootTensorConstraint((CpTransposeGraph *)this, v7))
        std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>(a3, &v7, &v7);
      ++v5;
    }
    while (v5 != v6);
    v5 = v8;
  }
  if (v5)
  {
    v9 = v5;
    operator delete(v5);
  }
}

void sub_206EA9664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MirOpt::CWTransposeUtil::CreateCpTransposeGraphDotFile(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  const void **v5;
  size_t v6;
  _BYTE *v7;
  const void *v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::ios_base *v19;
  std::string *v20;
  std::string::size_type v21;
  CpTransposeGraph *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void **v28;
  size_t v29;
  std::string *v30;
  const void *v31;
  char *v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::ios_base *v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  __int128 __p;
  std::string::size_type v59;
  _BYTE v60[32];
  _DWORD v61[96];
  _QWORD v62[20];
  std::string v63;
  std::string v64;
  _QWORD v65[22];

  v65[19] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    v4 = a1;
    v5 = *(const void ***)(a1 + 568);
    if (*((char *)v5 + 23) >= 0)
      v6 = *((unsigned __int8 *)v5 + 23);
    else
      v6 = (size_t)v5[1];
    v7 = v60;
    std::string::basic_string[abi:ne180100]((uint64_t)v60, v6 + 9);
    if (v60[23] < 0)
      v7 = *(_BYTE **)v60;
    if (v6)
    {
      if (*((char *)v5 + 23) >= 0)
        v8 = v5;
      else
        v8 = *v5;
      memmove(v7, v8, v6);
    }
    strcpy(&v7[v6], ".CpGraph.");
    if (*(char *)(a2 + 255) < 0)
      std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a2 + 232), *(_QWORD *)(a2 + 240));
    else
      v57 = *(std::string *)(a2 + 232);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v57;
    else
      v9 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    else
      size = v57.__r_.__value_.__l.__size_;
    v11 = std::string::append((std::string *)v60, (const std::string::value_type *)v9, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v64, ".dot", 4uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v59 = v13->__r_.__value_.__r.__words[2];
    __p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if ((v60[23] & 0x80000000) != 0)
      operator delete(*(void **)v60);
    v15 = MEMORY[0x24BEDB840];
    v16 = MEMORY[0x24BEDB840] + 64;
    v17 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
    v18 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
    v65[0] = MEMORY[0x24BEDB840] + 64;
    v64.__r_.__value_.__r.__words[0] = v17;
    v50 = v18;
    v51 = v17;
    *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + *(_QWORD *)(v17 - 24)) = v18;
    v19 = (std::ios_base *)((char *)&v64 + *(_QWORD *)(v64.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v19, &v64.__r_.__value_.__r.__words[1]);
    v19[1].__vftable = 0;
    v19[1].__fmtflags_ = -1;
    v64.__r_.__value_.__r.__words[0] = v15 + 24;
    v65[0] = v16;
    MEMORY[0x20BCFFEA8](&v64.__r_.__value_.__r.__words[1]);
    std::ofstream::open();
    memset(v60, 0, sizeof(v60));
    v61[0] = 1065353216;
    CpTransposeGraph::CreateDotString((CpTransposeGraph *)a2, v60, &v57);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v57;
    else
      v20 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    else
      v21 = v57.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)v20, v21);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v60);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&v64 + *(_QWORD *)(v64.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v64 + *(_QWORD *)(v64.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
    v22 = (CpTransposeGraph *)a2;
    if (a3[1] != *a3)
    {
      v23 = 0;
      v24 = 0;
      v25 = *MEMORY[0x24BEDB7E8];
      v48 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
      v49 = v15 + 64;
      do
      {
        v26 = v15;
        v27 = v4;
        v28 = *(const void ***)(v4 + 568);
        if (*((char *)v28 + 23) >= 0)
          v29 = *((unsigned __int8 *)v28 + 23);
        else
          v29 = (size_t)v28[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&v55, v29 + 9);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v55;
        else
          v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
        if (v29)
        {
          if (*((char *)v28 + 23) >= 0)
            v31 = v28;
          else
            v31 = *v28;
          memmove(v30, v31, v29);
        }
        v32 = (char *)v30 + v29;
        v22 = (CpTransposeGraph *)a2;
        strcpy(v32, ".CpGraph.");
        if (*(char *)(a2 + 255) < 0)
          std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(a2 + 232), *(_QWORD *)(a2 + 240));
        else
          v54 = *(std::string *)(a2 + 232);
        v4 = v27;
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v54;
        else
          v33 = (std::string *)v54.__r_.__value_.__r.__words[0];
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        else
          v34 = v54.__r_.__value_.__l.__size_;
        v35 = std::string::append(&v55, (const std::string::value_type *)v33, v34);
        v15 = v26;
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        v37 = std::string::append(&v56, ".G", 2uLL);
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v24);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &v53;
        else
          v39 = (std::string *)v53.__r_.__value_.__r.__words[0];
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        else
          v40 = v53.__r_.__value_.__l.__size_;
        v41 = std::string::append(&v63, (const std::string::value_type *)v39, v40);
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        *(_QWORD *)&v60[16] = *((_QWORD *)&v41->__r_.__value_.__l + 2);
        *(_OWORD *)v60 = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        v43 = std::string::append((std::string *)v60, ".dot", 4uLL);
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if ((v60[23] & 0x80000000) != 0)
          operator delete(*(void **)v60);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        v62[0] = v49;
        *(_QWORD *)v60 = v51;
        *(_QWORD *)&v60[*(_QWORD *)(v51 - 24)] = v50;
        v45 = (std::ios_base *)&v60[*(_QWORD *)(*(_QWORD *)v60 - 24)];
        std::ios_base::init(v45, &v60[8]);
        v45[1].__vftable = 0;
        v45[1].__fmtflags_ = -1;
        *(_QWORD *)v60 = v26 + 24;
        v62[0] = v26 + 64;
        MEMORY[0x20BCFFEA8](&v60[8]);
        std::ofstream::open();
        CpTransposeGraph::CreateDotString((CpTransposeGraph *)a2, (_QWORD *)(*a3 + v23), &v63);
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v63;
        else
          v46 = (std::string *)v63.__r_.__value_.__r.__words[0];
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
        else
          v47 = v63.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v46, v47);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)&v60[*(_QWORD *)(*(_QWORD *)v60 - 24)], *(_DWORD *)((char *)v61 + *(_QWORD *)(*(_QWORD *)v60 - 24)) | 4);
        *(_QWORD *)v60 = v25;
        *(_QWORD *)&v60[*(_QWORD *)(v25 - 24)] = v48;
        MEMORY[0x20BCFFEB4](&v60[8]);
        std::ostream::~ostream();
        MEMORY[0x20BD0022C](v62);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        ++v24;
        v23 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 3) > v24);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v57, "cp_transpose_graph");
      CpTransposeGraph::DebugPrint(v22, (uint64_t)&v57, v60);
      MirOpt::CWTransposeUtil::CreateCpTransposeGraphDotFile(v60, (uint8_t *)&v63, (uint64_t)&v57);
    }
    v64.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
    *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words
                              + *(_QWORD *)(v64.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8]
                                                                                                + 24);
    MEMORY[0x20BCFFEB4](&v64.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x20BD0022C](v65);
    if (SHIBYTE(v59) < 0)
      operator delete((void *)__p);
  }
}

void sub_206EA9D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t MirOpt::CWTransposeUtil::IsRegionWithTrivialSolution(uint64_t a1, CpTransposeGraph *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(_QWORD **)(a3 + 16);
  if (!v3)
    return 1;
  v5 = (_QWORD *)((char *)a2 + 192);
  while (1)
  {
    v6 = v3[2];
    v8 = v6;
    if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v5, &v8))
    {
      if (!*(_BYTE *)CpTransposeGraph::GetRootTensorConstraint(a2, v6))
        break;
    }
    v3 = (_QWORD *)*v3;
    if (!v3)
      return 1;
  }
  return 0;
}

uint64_t MirOpt::CWTransposeUtil::UpdateResultWithTrivialSolution(uint64_t **a1, CpTransposeGraph *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **LayerTruthTable;
  uint64_t *v11;
  uint64_t i;
  int v13;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;

  v3 = *(_QWORD **)(a3 + 16);
  if (!v3)
    return 1;
  v5 = (_QWORD *)((char *)a2 + 192);
  v6 = a1 + 77;
  v7 = (_QWORD *)((char *)a2 + 152);
  v8 = a1 + 83;
  v9 = a1 + 80;
  while (1)
  {
    v23 = v3[2];
    v24 = (uint64_t *)v23;
    if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v5, (unint64_t *)&v24))break;
    if (!*(_BYTE *)CpTransposeGraph::GetRootTensorConstraint(a2, v23))
    {
      v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v15)
        return 0;
      goto LABEL_17;
    }
    v24 = (uint64_t *)&v23;
    *((_DWORD *)std::__tree<std::__value_type<ZinIrOpLayer *,int>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,int>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,int>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v6, &v23, (uint64_t)&std::piecewise_construct, &v24)+ 10) = 0;
LABEL_12:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return 1;
  }
  v24 = (uint64_t *)v23;
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v7, (unint64_t *)&v24))goto LABEL_12;
  LayerTruthTable = (uint64_t **)CpTransposeGraph::GetLayerTruthTable(a2, v23);
  v11 = *LayerTruthTable;
  for (i = **LayerTruthTable; ; i += 16)
  {
    if (i == (*LayerTruthTable)[1])
    {
      v24 = (uint64_t *)&v23;
      std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v8, &v23, (uint64_t)&std::piecewise_construct, &v24)[5] = 0;
      v13 = *((unsigned __int8 *)v11 + 25);
      v24 = (uint64_t *)&v23;
      *((_DWORD *)std::__tree<std::__value_type<ZinIrOpLayer *,int>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,int>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,int>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v9, &v23, (uint64_t)&std::piecewise_construct, &v24)+ 10) = v13;
      goto LABEL_12;
    }
    if (*(_DWORD *)(i + 8))
      break;
  }
  v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v15)
LABEL_17:
    MirOpt::CWTransposeUtil::UpdateResultWithTrivialSolution(v15, v16, v17, v18, v19, v20, v21, v22);
  return 0;
}

BOOL MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose(MirOpt::CWTransposeUtil *this, const ZinIrTensor *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t v9;

  v2 = *((_QWORD *)a2 + 1);
  v9 = v2;
  v3 = (_QWORD *)*((_QWORD *)this + 78);
  if (!v3)
    goto LABEL_13;
  v4 = (_QWORD *)((char *)this + 624);
  do
  {
    v5 = v3[4];
    v6 = v5 >= v2;
    if (v5 >= v2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (_QWORD *)((char *)this + 624) || v2 < v4[4])
LABEL_13:
    ZinAssertImpl("Failed to interpret transpose optimization results");
  return *(_DWORD *)std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)this + 616, &v9) == 1;
}

BOOL MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose(ZinTensorFamilyUtil **this, const ZinIrOpLayer *a2)
{
  _BOOL4 IsSelectedFromGlobalOptimizationForCWTransposedDomain;
  const ZinIrTensor *RootTensor;
  _BOOL4 IsSelectedFromGlobalOptimizationForCWTranspose;
  const ZinIrTensor *v7;
  _BOOL4 v8;
  ZinTensorFamilyUtil *v9;
  const ZinIrTensor *v10;
  const ZinIrTensor *v11;
  ZinTensorFamilyUtil *v13;
  const ZinIrTensor *v14;
  const ZinIrTensor *v15;
  uint64_t v16;
  void *__p;
  _BYTE *v18;

  if (ZinIrOpLayer::IsANELayer(a2))
  {
    IsSelectedFromGlobalOptimizationForCWTransposedDomain = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTransposedDomain((MirOpt::CWTransposeUtil *)this, a2);
    (*(void (**)(void **__return_ptr, const ZinIrOpLayer *))(*(_QWORD *)a2 + 512))(&__p, a2);
    RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(this[86], *(const ZinIrTensor **)__p);
    IsSelectedFromGlobalOptimizationForCWTranspose = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, RootTensor);
    if (v18 - (_BYTE *)__p == 16)
    {
      v7 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(this[86], *((const ZinIrTensor **)__p + 1));
      v8 = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, v7);
    }
    else
    {
      v8 = 0;
    }
    v13 = this[86];
    v14 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v15 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v13, v14);
    v16 = (IsSelectedFromGlobalOptimizationForCWTransposedDomain || IsSelectedFromGlobalOptimizationForCWTranspose || v8) | MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, v15);
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    return v16;
  }
  else
  {
    v9 = this[86];
    v10 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v11 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v9, v10);
    return MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, v11);
  }
}

void sub_206EAA338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTransposedDomain(MirOpt::CWTransposeUtil *this, const ZinANELayer *a2)
{
  unint64_t v2;
  _QWORD *v3;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v12;

  v2 = *((_QWORD *)a2 + 1);
  v12 = v2;
  v3 = (_QWORD *)*((_QWORD *)this + 81);
  if (!v3)
    return 0;
  v5 = (char *)this + 640;
  v6 = (char *)this + 648;
  v7 = v6;
  do
  {
    v8 = v3[4];
    v9 = v8 >= v2;
    if (v8 >= v2)
      v10 = v3;
    else
      v10 = v3 + 1;
    if (v9)
      v7 = (char *)v3;
    v3 = (_QWORD *)*v10;
  }
  while (*v10);
  return v7 != v6
      && v2 >= *((_QWORD *)v7 + 4)
      && *(_DWORD *)std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v5, &v12) == 1;
}

void MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayerTensors(ZinIrTensor *a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  ZinIrOpLayer *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v14;
  int v15;
  __int128 *v16;
  size_t v17;
  std::string *v18;
  char *v19;
  const std::string::value_type *p_p;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  ZinIrTensor *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  ZinIrTensor::MirInfo *v28;
  std::string v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  ZinIrTensor::MirInfo *v34;
  std::string v35;
  void *__p;
  _BYTE v37[15];
  unsigned __int8 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  std::string::size_type v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v7 = (ZinIrOpLayer *)*((_QWORD *)a1 + 12);
  v8 = *((_OWORD *)a1 + 4);
  v39 = *((_OWORD *)a1 + 3);
  v40 = v8;
  v9 = *((_QWORD *)a1 + 10);
  v10 = *((_QWORD *)&v39 + 1);
  *((_QWORD *)&v39 + 1) = *((_QWORD *)&v8 + 1);
  *((_QWORD *)&v40 + 1) = v10;
  v41 = v9;
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
  if (ZinIrOpLayer::IsNELayer(v7))
    std::string::basic_string[abi:ne180100]<0>(&v29, "cw_ne");
  else
    std::string::basic_string[abi:ne180100]<0>(&v29, "cw_pe");
  v11 = std::string::append(&v29, "_xfm", 4uLL);
  v12 = (void *)v11->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v42 = v11->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v42 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v38 < 0)
    operator delete(__p);
  __p = v12;
  *(_QWORD *)v37 = v42;
  *(_QWORD *)&v37[7] = *(_QWORD *)((char *)&v42 + 7);
  v38 = v13;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v14 = *((_QWORD *)v7 + 2);
  v15 = *((_DWORD *)a1 + 22);
  if (a2)
    v16 = &v39;
  else
    v16 = (__int128 *)((char *)a1 + 48);
  if (*((char *)a1 + 47) >= 0)
    v17 = *((unsigned __int8 *)a1 + 47);
  else
    v17 = *((_QWORD *)a1 + 4);
  v18 = &v35;
  std::string::basic_string[abi:ne180100]((uint64_t)&v35, v17 + 1);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (*((char *)a1 + 47) >= 0)
      v19 = (char *)a1 + 24;
    else
      v19 = (char *)*((_QWORD *)a1 + 3);
    memmove(v18, v19, v17);
  }
  *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
  if ((v38 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v38 & 0x80u) == 0)
    v21 = v38;
  else
    v21 = *(_QWORD *)v37;
  v22 = std::string::append(&v35, p_p, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v43 = v22->__r_.__value_.__r.__words[2];
  v42 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  ZinIrTensor::CopyTensorMirInfo(a1, &v34);
  v32 = 0;
  v33 = 0;
  LODWORD(v29.__r_.__value_.__l.__data_) = 0;
  v30 = 0;
  *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0uLL;
  v31 = 0;
  ZinIrTensor::CreateTensor(v14, v15, v16, &v42, &v34, &v32, (unsigned int *)&v29, a3);
  v25 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v34;
  v34 = 0;
  if (v28)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v34, v28);
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  ZinMirSpatialSplitUtils::PropagateSpatialSplitInfo((uint64_t)a1, (const ZinIrTensor *)*a3, v24);
  if ((char)v38 < 0)
    operator delete(__p);
}

void sub_206EAA6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a14 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *MirOpt::CWTransposeUtil::ApplyCWTransposeToNELayer(ZinTensorFamilyUtil **this, ZinANELayer *a2, uint64_t a3)
{
  _BOOL4 IsSelectedFromGlobalOptimizationForCWTransposedDomain;
  int IsSelectedFromGlobalOptimizationForCWTranspose;
  int v8;
  const ZinIrTensor *RootTensor;
  ZinTensorFamilyUtil *v10;
  const ZinIrTensor *v11;
  const ZinIrTensor *v12;
  ZinIrTensor *v13;
  std::string *v14;
  __int128 v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  size_t v18;
  std::string *v19;
  char *v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  ZinIrOpLayer *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string *v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  size_t v33;
  std::string *v34;
  char *v35;
  void **v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v57;
  size_t v58;
  std::string *v59;
  char *v60;
  std::string *v61;
  __int128 v62;
  void **v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  __n128 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t Transpose;
  uint64_t **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v78;
  std::string v79;
  void *v80[2];
  int64_t v81;
  std::string v82;
  std::string v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  void *__p[2];
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  std::string v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  char *v96[3];
  uint64_t v97;
  std::__shared_weak_count *v98;

  if (*(_BYTE *)(a3 + 376))
  {
    IsSelectedFromGlobalOptimizationForCWTransposedDomain = *(_BYTE *)(a3 + 13) != 0;
    IsSelectedFromGlobalOptimizationForCWTranspose = *(_DWORD *)a3 == 1;
    v8 = *(_DWORD *)(a3 + 8) == 1;
  }
  else
  {
    IsSelectedFromGlobalOptimizationForCWTransposedDomain = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTransposedDomain((MirOpt::CWTransposeUtil *)this, a2);
    (*(void (**)(void **__return_ptr, ZinANELayer *))(*(_QWORD *)a2 + 512))(__p, a2);
    RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(this[86], *(const ZinIrTensor **)__p[0]);
    IsSelectedFromGlobalOptimizationForCWTranspose = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, RootTensor);
    v10 = this[86];
    v11 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v12 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v10, v11);
    v8 = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, v12);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v13 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayerTensors(v13, v8, &v97);
  MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings(v96);
  if (IsSelectedFromGlobalOptimizationForCWTransposedDomain)
  {
    std::string::basic_string[abi:ne180100]<0>(&v85, "cw_netrdom");
    v14 = std::string::append((std::string *)&v85, "_xfm", 4uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(_QWORD *)&v89 = *((_QWORD *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SBYTE7(v86) < 0)
      operator delete((void *)v85);
    MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)&v85);
    v94 = v97;
    v95 = v98;
    if (v98)
    {
      p_shared_owners = (unint64_t *)&v98->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    if (*((char *)a2 + 47) >= 0)
      v18 = *((unsigned __int8 *)a2 + 47);
    else
      v18 = *((_QWORD *)a2 + 4);
    v19 = &v93;
    std::string::basic_string[abi:ne180100]((uint64_t)&v93, v18 + 1);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v93.__r_.__value_.__r.__words[0];
    if (v18)
    {
      if (*((char *)a2 + 47) >= 0)
        v20 = (char *)a2 + 24;
      else
        v20 = (char *)*((_QWORD *)a2 + 3);
      memmove(v19, v20, v18);
    }
    *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 95;
    if ((SBYTE7(v89) & 0x80u) == 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if ((SBYTE7(v89) & 0x80u) == 0)
      v22 = BYTE7(v89);
    else
      v22 = (std::string::size_type)__p[1];
    v23 = std::string::append(&v93, (const std::string::value_type *)v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinANELayer *, __int128 *, uint64_t *, std::string *))(*(_QWORD *)a2 + 432))(a2, &v85, &v94, &v83);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    v26 = v95;
    if (v95)
    {
      v27 = (unint64_t *)&v95->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if ((_QWORD)v85)
    {
      *((_QWORD *)&v85 + 1) = v85;
      operator delete((void *)v85);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v85, "cw_ne");
    v29 = std::string::append((std::string *)&v85, "_xfm", 4uLL);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    *(_QWORD *)&v89 = *((_QWORD *)&v29->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SBYTE7(v86) < 0)
      operator delete((void *)v85);
    v91 = v97;
    v92 = v98;
    if (v98)
    {
      v31 = (unint64_t *)&v98->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    if (*((char *)a2 + 47) >= 0)
      v33 = *((unsigned __int8 *)a2 + 47);
    else
      v33 = *((_QWORD *)a2 + 4);
    v34 = &v83;
    std::string::basic_string[abi:ne180100]((uint64_t)&v83, v33 + 1);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)v83.__r_.__value_.__r.__words[0];
    if (v33)
    {
      if (*((char *)a2 + 47) >= 0)
        v35 = (char *)a2 + 24;
      else
        v35 = (char *)*((_QWORD *)a2 + 3);
      memmove(v34, v35, v33);
    }
    *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + v33) = 95;
    if ((SBYTE7(v89) & 0x80u) == 0)
      v36 = __p;
    else
      v36 = (void **)__p[0];
    if ((SBYTE7(v89) & 0x80u) == 0)
      v37 = BYTE7(v89);
    else
      v37 = (std::string::size_type)__p[1];
    v38 = std::string::append(&v83, (const std::string::value_type *)v36, v37);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    *(_QWORD *)&v86 = *((_QWORD *)&v38->__r_.__value_.__l + 2);
    v85 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v25 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinANELayer *, uint64_t *, __int128 *))(*(_QWORD *)a2 + 176))(a2, &v91, &v85);
    if (SBYTE7(v86) < 0)
      operator delete((void *)v85);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    v40 = v92;
    if (v92)
    {
      v41 = (unint64_t *)&v92->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  if (SBYTE7(v89) < 0)
    operator delete(__p[0]);
  if (v8 != IsSelectedFromGlobalOptimizationForCWTranspose)
  {
    *(int64x2_t *)__p = vdupq_n_s64(1uLL);
    v89 = *(_OWORD *)__p;
    v90 = 1;
    v85 = *(_OWORD *)__p;
    v86 = *(_OWORD *)__p;
    v87 = 1;
    if (*(_BYTE *)(a3 + 376))
    {
      v43 = *(_OWORD *)(a3 + 40);
      *(_OWORD *)__p = *(_OWORD *)(a3 + 24);
      v89 = v43;
      v90 = *(_QWORD *)(a3 + 56);
      v44 = *(_DWORD *)(a3 + 16);
      v87 = *(_QWORD *)(a3 + 296);
      v45 = *(_OWORD *)(a3 + 280);
      v85 = *(_OWORD *)(a3 + 264);
      v86 = v45;
      v46 = *(_DWORD *)(a3 + 256);
    }
    else
    {
      (*(void (**)(std::string *__return_ptr, ZinANELayer *))(*(_QWORD *)a2 + 512))(&v83, a2);
      v47 = *(_QWORD *)v83.__r_.__value_.__l.__data_;
      v90 = *(_QWORD *)(*(_QWORD *)v83.__r_.__value_.__l.__data_ + 80);
      v48 = *(_OWORD *)(v47 + 64);
      *(_OWORD *)__p = *(_OWORD *)(v47 + 48);
      v89 = v48;
      v44 = *(_DWORD *)(*(_QWORD *)v83.__r_.__value_.__l.__data_ + 88);
      v49 = (_QWORD *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      if (v8)
      {
        v50 = v49 + 7;
        v51 = v49 + 9;
      }
      else
      {
        v51 = v49 + 7;
        v50 = v49 + 9;
      }
      v52 = v49[10];
      v53 = *v50;
      v54 = v49[8];
      v55 = *v51;
      *(_QWORD *)&v85 = v49[6];
      *((_QWORD *)&v85 + 1) = v55;
      *(_QWORD *)&v86 = v54;
      *((_QWORD *)&v86 + 1) = v53;
      v87 = v52;
      v46 = *(_DWORD *)((*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)
                      + 88);
      if (v83.__r_.__value_.__r.__words[0])
      {
        v83.__r_.__value_.__l.__size_ = v83.__r_.__value_.__r.__words[0];
        operator delete(v83.__r_.__value_.__l.__data_);
      }
    }
    v57 = *((_QWORD *)&v85 + 1) == 1 && *((_QWORD *)&v86 + 1) == 1;
    if (*((char *)a2 + 47) >= 0)
      v58 = *((unsigned __int8 *)a2 + 47);
    else
      v58 = *((_QWORD *)a2 + 4);
    v59 = &v82;
    std::string::basic_string[abi:ne180100]((uint64_t)&v82, v58 + 1);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v59 = (std::string *)v82.__r_.__value_.__r.__words[0];
    if (v58)
    {
      if (*((char *)a2 + 47) >= 0)
        v60 = (char *)a2 + 24;
      else
        v60 = (char *)*((_QWORD *)a2 + 3);
      memmove(v59, v60, v58);
    }
    *(_WORD *)((char *)&v59->__r_.__value_.__l.__data_ + v58) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v79, "cw_netr");
    v61 = std::string::append(&v79, "_xfm", 4uLL);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v81 = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)v80 = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (v81 >= 0)
      v63 = v80;
    else
      v63 = (void **)v80[0];
    if (v81 >= 0)
      v64 = HIBYTE(v81);
    else
      v64 = (std::string::size_type)v80[1];
    v65 = std::string::append(&v82, (const std::string::value_type *)v63, v64);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = ZinObjectNameFactory::ZinObjectNameFactory(&v83, &v93);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if (SHIBYTE(v81) < 0)
      operator delete(v80[0]);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    v68 = (*(uint64_t (**)(ZinANELayer *, __n128))(*(_QWORD *)a2 + 408))(a2, v67) | v57;
    v69 = *((_QWORD *)a2 + 2);
    if ((v68 & 1) != 0)
    {
      v78 = 0;
      v70 = ZinBuilder::CreateCopyLayer(v69, (uint64_t)&v83, &v85, v46, &v78);
      v71 = v78;
      v78 = 0;
      if (v71)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v78, v71);
      Transpose = 0;
      if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 92)
        *((_QWORD *)v25 + 54) = v70;
    }
    else
    {
      Transpose = ZinBuilder::CreateTranspose(v69, (uint64_t)&v83, (uint64_t)__p, v44, (uint64_t)v96);
    }
    *((_QWORD *)v25 + 50) = Transpose;
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
    if (v84 < 0)
      operator delete((void *)v83.__r_.__value_.__l.__size_);
  }
  if (*(_BYTE *)(a3 + 376))
  {
    if (v25 != a2)
    {
      v73 = (uint64_t **)*((_QWORD *)a2 + 19);
      __p[0] = &unk_24C02BB18;
      __p[1] = 0;
      v89 = 0uLL;
      ZinIrOpLayerGraph::ReplaceNode(v73, a2, v25, (const Layer2TDMapper::SourceLayer *)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        *(void **)&v89 = __p[1];
        operator delete(__p[1]);
      }
    }
  }
  else
  {
    MirOpt::CWTransposeUtil::ReplaceCWTransposedLayer((uint64_t)this, a2, v25);
  }
  if (v96[0])
  {
    v96[1] = v96[0];
    operator delete(v96[0]);
  }
  v74 = v98;
  if (v98)
  {
    v75 = (unint64_t *)&v98->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  return v25;
}

void sub_206EAAF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  void *v53;

  if (__p)
    operator delete(__p);
  v53 = *(void **)(v51 - 120);
  if (v53)
  {
    *(_QWORD *)(v51 - 112) = v53;
    operator delete(v53);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v51 - 96);
  _Unwind_Resume(a1);
}

void sub_206EAB13C()
{
  JUMPOUT(0x206EAB12CLL);
}

void sub_206EAB144(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x206EAB134);
}

ZinANELayer *MirOpt::CWTransposeUtil::ApplyCWTransposeToPELayer(MirOpt::CWTransposeUtil *this, ZinANELayer *a2, uint64_t a3)
{
  MirOpt::CWTransposeUtil *v5;
  int IsSelectedFromGlobalOptimizationForCWTransposedDomain;
  _BOOL4 v7;
  int IsSelectedFromGlobalOptimizationForCWTranspose;
  _BOOL4 v9;
  const ZinIrTensor *RootTensor;
  const ZinIrTensor *v11;
  ZinTensorFamilyUtil *v12;
  const ZinIrTensor *v13;
  const ZinIrTensor *v14;
  ZinIrTensor *v15;
  std::string *v16;
  __int128 v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  size_t v20;
  std::string *v21;
  char *v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  ZinANELayer *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string *v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  size_t v35;
  _BYTE *v36;
  char *v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  MirOpt::CWTransposeUtil *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _BOOL4 v54;
  size_t v55;
  _BYTE *v56;
  char *v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  __n128 v64;
  uint64_t Transpose;
  uint64_t v66;
  uint64_t v67;
  MirOpt::CWTransposeUtil *v68;
  _BOOL4 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  _BOOL4 v74;
  size_t v75;
  std::string *v76;
  char *v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  char HasInputTranspose;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  ZinEngineLayerMirInfo *v91;
  _BOOL4 v93;
  uint64_t v94;
  std::string *v95;
  __int128 v96;
  uint64_t v97;
  size_t v98;
  _BYTE *v99;
  const void *v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  __int128 v104;
  uint64_t v105;
  size_t v106;
  std::string *v107;
  char *v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  std::string::size_type v112;
  std::string *v113;
  __int128 v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  void *v119;
  ZinPEGOCLayer *v120;
  float v121;
  int v122;
  int v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t TernaryDynamicGOCLayer;
  uint64_t v128;
  char v129;
  uint64_t **v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t *v135;
  ZinIrTensor *v136;
  ZinIrTensor::MirInfo *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  _BOOL4 v143;
  int v144;
  _BOOL4 v145;
  ZinIrTensor::MirInfo *v146;
  void *v147;
  void *v148;
  char *v149;
  _BYTE v150[32];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  int v156;
  std::string v157;
  std::string v158;
  char v159;
  _BYTE v160[64];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  int v164;
  std::string v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  void *v172[3];
  std::string __p[15];
  uint64_t v174;

  v5 = this;
  v174 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a3 + 376))
  {
    IsSelectedFromGlobalOptimizationForCWTransposedDomain = *(_BYTE *)(a3 + 13) != 0;
    v7 = *(_BYTE *)(a3 + 12) != 0;
    IsSelectedFromGlobalOptimizationForCWTranspose = *(_DWORD *)a3 == 1;
    v145 = *(_DWORD *)(a3 + 4) == 1;
    v9 = *(_DWORD *)(a3 + 8) == 1;
  }
  else
  {
    IsSelectedFromGlobalOptimizationForCWTransposedDomain = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTransposedDomain(this, a2);
    (*(void (**)(std::string *__return_ptr, ZinANELayer *))(*(_QWORD *)a2 + 512))(__p, a2);
    v7 = __p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0] == 16;
    RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(*((ZinTensorFamilyUtil **)v5 + 86), *(const ZinIrTensor **)__p[0].__r_.__value_.__l.__data_);
    IsSelectedFromGlobalOptimizationForCWTranspose = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose(v5, RootTensor);
    if (__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0] == 16)
    {
      v11 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(*((ZinTensorFamilyUtil **)v5 + 86), *(const ZinIrTensor **)(__p[0].__r_.__value_.__r.__words[0] + 8));
      v145 = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose(v5, v11);
    }
    else
    {
      v145 = 0;
    }
    v12 = (ZinTensorFamilyUtil *)*((_QWORD *)v5 + 86);
    v13 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v14 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v12, v13);
    v9 = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose(v5, v14);
    if (__p[0].__r_.__value_.__r.__words[0])
    {
      __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)v172);
  v15 = (ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayerTensors(v15, v9, &v170);
  if (IsSelectedFromGlobalOptimizationForCWTransposedDomain)
  {
    std::string::basic_string[abi:ne180100]<0>(v160, "cw_petrdom");
    v16 = std::string::append((std::string *)v160, "_xfm", 4uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((v160[23] & 0x80000000) != 0)
      operator delete(*(void **)v160);
    MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)v160);
    v168 = v170;
    v169 = v171;
    if (v171)
    {
      p_shared_owners = (unint64_t *)&v171->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (*((char *)a2 + 47) >= 0)
      v20 = *((unsigned __int8 *)a2 + 47);
    else
      v20 = *((_QWORD *)a2 + 4);
    std::string::basic_string[abi:ne180100]((uint64_t)&v158, v20 + 1);
    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v158;
    else
      v21 = (std::string *)v158.__r_.__value_.__r.__words[0];
    if (v20)
    {
      if (*((char *)a2 + 47) >= 0)
        v22 = (char *)a2 + 24;
      else
        v22 = (char *)*((_QWORD *)a2 + 3);
      memmove(v21, v22, v20);
    }
    *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 95;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = __p;
    else
      v23 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    else
      size = __p[0].__r_.__value_.__l.__size_;
    v25 = std::string::append(&v158, (const std::string::value_type *)v23, size);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    *(_QWORD *)&v150[16] = *((_QWORD *)&v25->__r_.__value_.__l + 2);
    *(_OWORD *)v150 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = (ZinANELayer *)(*(uint64_t (**)(ZinANELayer *, _BYTE *, uint64_t *, _BYTE *))(*(_QWORD *)a2 + 432))(a2, v160, &v168, v150);
    if ((v150[23] & 0x80000000) != 0)
      operator delete(*(void **)v150);
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v158.__r_.__value_.__l.__data_);
    v28 = v169;
    if (v169)
    {
      v29 = (unint64_t *)&v169->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (*(_QWORD *)v160)
    {
      *(_QWORD *)&v160[8] = *(_QWORD *)v160;
      operator delete(*(void **)v160);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v9)
        goto LABEL_127;
    }
    else if (v9)
    {
      goto LABEL_127;
    }
    v143 = v7;
    v144 = IsSelectedFromGlobalOptimizationForCWTransposedDomain;
    v141 = IsSelectedFromGlobalOptimizationForCWTranspose;
    if (*(_BYTE *)(a3 + 376))
      goto LABEL_85;
    v45 = (_QWORD *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v47 = v45 + 7;
    v46 = v45 + 9;
LABEL_87:
    v48 = v5;
    v51 = *v46;
    v50 = *v47;
    v138 = v45[10];
    v139 = v45[8];
    v140 = v45[6];
    v49 = (int *)((*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0) + 88);
    goto LABEL_88;
  }
  if (!v9)
  {
    v27 = a2;
    if ((IsSelectedFromGlobalOptimizationForCWTranspose & 1) == 0)
      goto LABEL_170;
    goto LABEL_128;
  }
  std::string::basic_string[abi:ne180100]<0>(v160, "cw_pe");
  v31 = std::string::append((std::string *)v160, "_xfm", 4uLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((v160[23] & 0x80000000) != 0)
    operator delete(*(void **)v160);
  v166 = v170;
  v167 = v171;
  if (v171)
  {
    v33 = (unint64_t *)&v171->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  if (*((char *)a2 + 47) >= 0)
    v35 = *((unsigned __int8 *)a2 + 47);
  else
    v35 = *((_QWORD *)a2 + 4);
  std::string::basic_string[abi:ne180100]((uint64_t)v150, v35 + 1);
  if (v150[23] >= 0)
    v36 = v150;
  else
    v36 = *(_BYTE **)v150;
  if (v35)
  {
    if (*((char *)a2 + 47) >= 0)
      v37 = (char *)a2 + 24;
    else
      v37 = (char *)*((_QWORD *)a2 + 3);
    memmove(v36, v37, v35);
  }
  *(_WORD *)&v36[v35] = 95;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = __p;
  else
    v38 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  else
    v39 = __p[0].__r_.__value_.__l.__size_;
  v40 = std::string::append((std::string *)v150, (const std::string::value_type *)v38, v39);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  *(_QWORD *)&v160[16] = *((_QWORD *)&v40->__r_.__value_.__l + 2);
  *(_OWORD *)v160 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v27 = (ZinANELayer *)(*(uint64_t (**)(ZinANELayer *, uint64_t *, _BYTE *))(*(_QWORD *)a2 + 176))(a2, &v166, v160);
  if ((v160[23] & 0x80000000) != 0)
    operator delete(*(void **)v160);
  if ((v150[23] & 0x80000000) != 0)
    operator delete(*(void **)v150);
  v42 = v167;
  if (v167)
  {
    v43 = (unint64_t *)&v167->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v143 = v7;
  v144 = 0;
  v141 = IsSelectedFromGlobalOptimizationForCWTranspose;
  if (!*(_BYTE *)(a3 + 376))
  {
    v45 = (_QWORD *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v46 = v45 + 7;
    v47 = v45 + 9;
    goto LABEL_87;
  }
LABEL_85:
  v48 = v5;
  v49 = (int *)(a3 + 256);
  v50 = *(_QWORD *)(a3 + 272);
  v51 = *(_QWORD *)(a3 + 288);
  v139 = *(_QWORD *)(a3 + 280);
  v140 = *(_QWORD *)(a3 + 264);
  v138 = *(_QWORD *)(a3 + 296);
LABEL_88:
  v52 = *v49;
  v54 = v50 == 1 && v51 == 1;
  if (*((char *)a2 + 47) >= 0)
    v55 = *((unsigned __int8 *)a2 + 47);
  else
    v55 = *((_QWORD *)a2 + 4);
  v56 = v150;
  std::string::basic_string[abi:ne180100]((uint64_t)v150, v55 + 1);
  if (v150[23] < 0)
    v56 = *(_BYTE **)v150;
  if (v55)
  {
    if (*((char *)a2 + 47) >= 0)
      v57 = (char *)a2 + 24;
    else
      v57 = (char *)*((_QWORD *)a2 + 3);
    memmove(v56, v57, v55);
  }
  *(_WORD *)&v56[v55] = 95;
  std::string::basic_string[abi:ne180100]<0>(&v157, "cw_petr");
  v58 = std::string::append(&v157, "_xfm", 4uLL);
  v5 = v48;
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v158.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = &v158;
  else
    v60 = (std::string *)v158.__r_.__value_.__r.__words[0];
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
  else
    v61 = v158.__r_.__value_.__l.__size_;
  v62 = std::string::append((std::string *)v150, (const std::string::value_type *)v60, v61);
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  *(_QWORD *)&v160[16] = *((_QWORD *)&v62->__r_.__value_.__l + 2);
  *(_OWORD *)v160 = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  v64 = ZinObjectNameFactory::ZinObjectNameFactory(__p, v160);
  if ((v160[23] & 0x80000000) != 0)
    operator delete(*(void **)v160);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if ((v150[23] & 0x80000000) != 0)
    operator delete(*(void **)v150);
  if (!*((_QWORD *)v27 + 33))
  {
    if (*((_QWORD *)a2 + 33))
    {
      ZinANELayer::CopyMirInfo(a2, (ZinEngineLayerMirInfo **)v160);
      ZinANELayer::SetMirInfo((uint64_t)v27, (int **)v160);
      v91 = *(ZinEngineLayerMirInfo **)v160;
      *(_QWORD *)v160 = 0;
      if (v91)
      {
        ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v91);
        MEMORY[0x20BD002F8]();
      }
    }
  }
  if ((((*(unsigned int (**)(ZinANELayer *, __n128))(*(_QWORD *)a2 + 408))(a2, v64) | v54) & 1) != 0)
  {
    Transpose = 0;
  }
  else
  {
    v66 = *((_QWORD *)a2 + 2);
    *(_QWORD *)&v160[24] = v50;
    *(_QWORD *)&v160[32] = v138;
    *(_QWORD *)v160 = v140;
    *(_QWORD *)&v160[8] = v51;
    *(_QWORD *)&v160[16] = v139;
    Transpose = ZinBuilder::CreateTranspose(v66, (uint64_t)__p, (uint64_t)v160, v52, (uint64_t)v172);
  }
  (*(void (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v27 + 728))(v27, Transpose);
  v7 = v143;
  IsSelectedFromGlobalOptimizationForCWTransposedDomain = v144;
  IsSelectedFromGlobalOptimizationForCWTranspose = v141;
  if (!*(_BYTE *)(**((_QWORD **)v5 + 88) + 1266))
  {
    v67 = *((_QWORD *)v27 + 33);
    if (v67)
      *(_BYTE *)(v67 + 1642) = (*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)v27 + 408))(v27);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
  if (__p[1].__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)__p[0].__r_.__value_.__l.__size_);
LABEL_127:
  if (IsSelectedFromGlobalOptimizationForCWTranspose == IsSelectedFromGlobalOptimizationForCWTransposedDomain)
    goto LABEL_170;
LABEL_128:
  *(int64x2_t *)&__p[0].__r_.__value_.__l.__data_ = vdupq_n_s64(1uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  __p[1].__r_.__value_.__l.__size_ = 1;
  v68 = v5;
  if (*(_BYTE *)(a3 + 376))
  {
    v69 = v7;
    v70 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 24);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v70;
    __p[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a3 + 56);
    v142 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, ZinANELayer *))(*(_QWORD *)a2 + 512))(v160, a2);
    v69 = v7;
    v71 = **(_QWORD **)v160;
    v72 = *(_OWORD *)(**(_QWORD **)v160 + 64);
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)(**(_QWORD **)v160 + 48);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v72;
    __p[1].__r_.__value_.__l.__size_ = *(_QWORD *)(v71 + 80);
    v142 = *(_DWORD *)(**(_QWORD **)v160 + 88);
    *(_QWORD *)&v160[8] = *(_QWORD *)v160;
    operator delete(*(void **)v160);
  }
  v74 = __p[0].__r_.__value_.__l.__size_ == 1 && __p[1].__r_.__value_.__r.__words[0] == 1;
  if (*((char *)a2 + 47) >= 0)
    v75 = *((unsigned __int8 *)a2 + 47);
  else
    v75 = *((_QWORD *)a2 + 4);
  std::string::basic_string[abi:ne180100]((uint64_t)&v158, v75 + 1);
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = &v158;
  else
    v76 = (std::string *)v158.__r_.__value_.__r.__words[0];
  if (v75)
  {
    if (*((char *)a2 + 47) >= 0)
      v77 = (char *)a2 + 24;
    else
      v77 = (char *)*((_QWORD *)a2 + 3);
    memmove(v76, v77, v75);
  }
  *(_WORD *)((char *)&v76->__r_.__value_.__l.__data_ + v75) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v165, "cw_petr1");
  v7 = v69;
  v78 = std::string::append(&v165, "_xfm", 4uLL);
  v5 = v68;
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v157.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v80 = &v157;
  else
    v80 = (std::string *)v157.__r_.__value_.__r.__words[0];
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v81 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
  else
    v81 = v157.__r_.__value_.__l.__size_;
  v82 = std::string::append(&v158, (const std::string::value_type *)v80, v81);
  v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  *(_QWORD *)&v150[16] = *((_QWORD *)&v82->__r_.__value_.__l + 2);
  *(_OWORD *)v150 = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  v84 = ZinObjectNameFactory::ZinObjectNameFactory(v160, v150);
  if ((v150[23] & 0x80000000) != 0)
    operator delete(*(void **)v150);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if ((((*(unsigned int (**)(ZinANELayer *, __n128))(*(_QWORD *)a2 + 640))(a2, v84) | v74) & 1) != 0)
    v85 = 0;
  else
    v85 = ZinBuilder::CreateTranspose(*((_QWORD *)a2 + 2), (uint64_t)v160, (uint64_t)__p, v142, (uint64_t)v172);
  (*(void (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v27 + 736))(v27, v85);
  if (!*(_BYTE *)(**((_QWORD **)v68 + 88) + 1266))
  {
    v86 = *((_QWORD *)v27 + 33);
    if (v86)
    {
      HasInputTranspose = ZinPELayer::HasInputTranspose(v27, 0);
      ZinEngineLayerMirInfo::SetNeedInputDMACached(v86, 0, HasInputTranspose);
    }
  }
  *(_QWORD *)v160 = off_24C01FBB0;
  if ((v160[31] & 0x80000000) != 0)
    operator delete(*(void **)&v160[8]);
LABEL_170:
  if ((v7 & (v145 ^ IsSelectedFromGlobalOptimizationForCWTransposedDomain)) != 1)
    goto LABEL_257;
  *(_DWORD *)v160 = 0;
  v160[56] = 0;
  LOBYTE(v161) = 0;
  BYTE8(v161) = 0;
  BYTE12(v162) = 0;
  memset(&v160[8], 0, 42);
  v163 = 0uLL;
  v164 = 0;
  if (*(_BYTE *)(a3 + 376))
  {
    v88 = *(_OWORD *)(a3 + 216);
    v161 = *(_OWORD *)(a3 + 200);
    v162 = v88;
    v163 = *(_OWORD *)(a3 + 232);
    v164 = *(_DWORD *)(a3 + 248);
    v89 = *(_OWORD *)(a3 + 152);
    *(_OWORD *)v160 = *(_OWORD *)(a3 + 136);
    *(_OWORD *)&v160[16] = v89;
    v90 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)&v160[32] = *(_OWORD *)(a3 + 168);
    *(_OWORD *)&v160[48] = v90;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, ZinANELayer *))(*(_QWORD *)a2 + 512))(v150, a2);
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v150 + 8)
                                                                                            + 96)
                                                                              + 80))(__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v150 + 8) + 96), 0, 0);
    v161 = *(_OWORD *)&__p[2].__r_.__value_.__r.__words[2];
    v162 = *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1];
    v163 = *(_OWORD *)&__p[4].__r_.__value_.__l.__data_;
    v164 = __p[4].__r_.__value_.__r.__words[2];
    *(_OWORD *)v160 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *(_OWORD *)&v160[16] = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v160[32] = *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1];
    *(_OWORD *)&v160[48] = *(_OWORD *)&__p[2].__r_.__value_.__l.__data_;
    if (*(_QWORD *)v150)
    {
      *(_QWORD *)&v150[8] = *(_QWORD *)v150;
      operator delete(*(void **)v150);
    }
  }
  v93 = *(_QWORD *)&v160[16] != 1 || *(_QWORD *)&v160[32] != 1;
  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 84)
  {
    v94 = *(_QWORD *)(*((_QWORD *)a2 + 55) + 64);
    std::string::basic_string[abi:ne180100]<0>(__p, "cw_pegoc");
    v95 = std::string::append(__p, "_xfm", 4uLL);
    v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v165.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v97 = *((_QWORD *)a2 + 55);
    if (*(char *)(v97 + 47) >= 0)
      v98 = *(unsigned __int8 *)(v97 + 47);
    else
      v98 = *(_QWORD *)(v97 + 32);
    v99 = v150;
    std::string::basic_string[abi:ne180100]((uint64_t)v150, v98 + 1);
    if (v150[23] < 0)
      v99 = *(_BYTE **)v150;
    if (v98)
    {
      if (*(char *)(v97 + 47) >= 0)
        v100 = (const void *)(v97 + 24);
      else
        v100 = *(const void **)(v97 + 24);
      memmove(v99, v100, v98);
    }
    *(_WORD *)&v99[v98] = 95;
    if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v101 = &v165;
    else
      v101 = (std::string *)v165.__r_.__value_.__r.__words[0];
    if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v102 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
    else
      v102 = v165.__r_.__value_.__l.__size_;
    v103 = std::string::append((std::string *)v150, (const std::string::value_type *)v101, v102);
    v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v104;
    v103->__r_.__value_.__l.__size_ = 0;
    v103->__r_.__value_.__r.__words[2] = 0;
    v103->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v158, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v150[23] & 0x80000000) != 0)
      operator delete(*(void **)v150);
    std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)&v157, *(_QWORD *)(*((_QWORD *)a2 + 55) + 64) + 40);
    if (*(_BYTE *)(v94 + 80))
      v105 = 0;
    else
      v105 = v93;
    if (*(_BYTE *)(a3 + 376))
    {
      ZinPEGOCLayer::GetDecoupledDynamicGOCScaleBiasTensorInfo(a3 + 136, v105, (uint64_t)v150);
    }
    else
    {
      v120 = (ZinPEGOCLayer *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 11)
                                                                                              + 8)
                                                                                + 32))(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8), 0, 0);
      ZinPEGOCLayer::GetDecoupledDynamicGOCScaleBiasTensorInfo(v120, (const ZinIrTensor *)v105, (uint64_t)v150);
    }
    v121 = *(float *)(v94 + 12);
    v122 = *(unsigned __int8 *)(v94 + 16);
    v123 = *(unsigned __int8 *)(v94 + 17);
    *(_OWORD *)&__p[2].__r_.__value_.__r.__words[2] = v161;
    *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1] = v162;
    *(_OWORD *)&__p[4].__r_.__value_.__l.__data_ = v163;
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)v160;
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v160[16];
    *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = *(_OWORD *)&v160[32];
    *(_OWORD *)&__p[2].__r_.__value_.__l.__data_ = *(_OWORD *)&v160[48];
    *(_OWORD *)&__p[7].__r_.__value_.__l.__data_ = v152;
    *(_OWORD *)&__p[6].__r_.__value_.__r.__words[1] = v151;
    *(_OWORD *)&__p[5].__r_.__value_.__r.__words[2] = *(_OWORD *)&v150[16];
    *(_OWORD *)&__p[5].__r_.__value_.__l.__data_ = *(_OWORD *)v150;
    *(_OWORD *)&__p[9].__r_.__value_.__l.__data_ = v155;
    *(_OWORD *)&__p[8].__r_.__value_.__r.__words[1] = v154;
    *(_OWORD *)&__p[7].__r_.__value_.__r.__words[2] = v153;
    *(_OWORD *)&__p[11].__r_.__value_.__r.__words[1] = v151;
    *(_OWORD *)&__p[12].__r_.__value_.__l.__data_ = v152;
    v124 = *((_QWORD *)a2 + 2);
    LODWORD(__p[4].__r_.__value_.__r.__words[2]) = v164;
    LODWORD(__p[9].__r_.__value_.__r.__words[2]) = v156;
    *(_OWORD *)&__p[10].__r_.__value_.__l.__data_ = *(_OWORD *)v150;
    *(_OWORD *)&__p[10].__r_.__value_.__r.__words[2] = *(_OWORD *)&v150[16];
    LODWORD(__p[14].__r_.__value_.__r.__words[2]) = v156;
    *(_OWORD *)&__p[13].__r_.__value_.__r.__words[1] = v154;
    *(_OWORD *)&__p[14].__r_.__value_.__l.__data_ = v155;
    *(_OWORD *)&__p[12].__r_.__value_.__r.__words[2] = v153;
    v125 = (char *)operator new(0x168uLL);
    v126 = v125 + 360;
    v147 = v125;
    v149 = v125 + 360;
    memcpy(v125, __p, 0x164uLL);
    v148 = v126;
    TernaryDynamicGOCLayer = ZinBuilder::CreateTernaryDynamicGOCLayer(v124, (uint64_t)&v158, v122 != 0, v123 != 0, (uint64_t)&v157, v105, (uint64_t *)&v147, 0, v121, 0);
    if (v147)
    {
      v148 = v147;
      operator delete(v147);
    }
    if (!*(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)TernaryDynamicGOCLayer + 32))(TernaryDynamicGOCLayer, 0, 0)+ 104))
    {
      if (*(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)a2 + 55) + 32))(*((_QWORD *)a2 + 55), 0, 0)+ 104))
      {
        v135 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)TernaryDynamicGOCLayer + 32))(TernaryDynamicGOCLayer, 0, 0);
        v136 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)a2 + 55) + 32))(*((_QWORD *)a2 + 55), 0, 0);
        ZinIrTensor::CopyTensorMirInfo(v136, &v146);
        ZinIrTensor::SetTensorMirInfo(v135, &v146);
        v137 = v146;
        v146 = 0;
        if (v137)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v146, v137);
      }
    }
    *((_QWORD *)v27 + 55) = TernaryDynamicGOCLayer;
    if (!*(_BYTE *)(**((_QWORD **)v5 + 88) + 1266))
    {
      v128 = *((_QWORD *)v27 + 33);
      if (v128)
      {
        v129 = ZinPELayer::HasInputTranspose(v27, 1);
        ZinEngineLayerMirInfo::SetNeedInputDMACached(v128, 1, v129);
      }
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v157);
    v158.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
    if (v159 < 0)
      operator delete((void *)v158.__r_.__value_.__l.__size_);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    {
      v119 = (void *)v165.__r_.__value_.__r.__words[0];
      goto LABEL_256;
    }
  }
  else
  {
    if (*((char *)a2 + 47) >= 0)
      v106 = *((unsigned __int8 *)a2 + 47);
    else
      v106 = *((_QWORD *)a2 + 4);
    std::string::basic_string[abi:ne180100]((uint64_t)&v158, v106 + 1);
    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v107 = &v158;
    else
      v107 = (std::string *)v158.__r_.__value_.__r.__words[0];
    if (v106)
    {
      if (*((char *)a2 + 47) >= 0)
        v108 = (char *)a2 + 24;
      else
        v108 = (char *)*((_QWORD *)a2 + 3);
      memmove(v107, v108, v106);
    }
    *(_WORD *)((char *)&v107->__r_.__value_.__l.__data_ + v106) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v165, "cw_petr2");
    v109 = std::string::append(&v165, "_xfm", 4uLL);
    v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    v157.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v111 = &v157;
    else
      v111 = (std::string *)v157.__r_.__value_.__r.__words[0];
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v112 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
    else
      v112 = v157.__r_.__value_.__l.__size_;
    v113 = std::string::append(&v158, (const std::string::value_type *)v111, v112);
    v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
    *(_QWORD *)&v150[16] = *((_QWORD *)&v113->__r_.__value_.__l + 2);
    *(_OWORD *)v150 = v114;
    v113->__r_.__value_.__l.__size_ = 0;
    v113->__r_.__value_.__r.__words[2] = 0;
    v113->__r_.__value_.__r.__words[0] = 0;
    v115 = ZinObjectNameFactory::ZinObjectNameFactory(__p, v150);
    if ((v150[23] & 0x80000000) != 0)
      operator delete(*(void **)v150);
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v157.__r_.__value_.__l.__data_);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v158.__r_.__value_.__l.__data_);
    if ((((*(unsigned int (**)(ZinANELayer *, __n128))(*(_QWORD *)a2 + 648))(a2, v115) | !v93) & 1) != 0)
      v116 = 0;
    else
      v116 = ZinBuilder::CreateTranspose(*((_QWORD *)a2 + 2), (uint64_t)__p, (uint64_t)&v160[8], *(int *)v160, (uint64_t)v172);
    (*(void (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v27 + 744))(v27, v116);
    if (!*(_BYTE *)(**((_QWORD **)v5 + 88) + 1266))
    {
      v117 = *((_QWORD *)v27 + 33);
      if (v117)
      {
        v118 = ZinPELayer::HasInputTranspose(v27, 1);
        ZinEngineLayerMirInfo::SetNeedInputDMACached(v117, 1, v118);
      }
    }
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
    if (__p[1].__r_.__value_.__s.__data_[7] < 0)
    {
      v119 = (void *)__p[0].__r_.__value_.__l.__size_;
LABEL_256:
      operator delete(v119);
    }
  }
LABEL_257:
  if (*(_BYTE *)(a3 + 376))
  {
    if (v27 != a2)
    {
      v130 = (uint64_t **)*((_QWORD *)a2 + 19);
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      __p[0].__r_.__value_.__l.__size_ = 0;
      *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = 0uLL;
      ZinIrOpLayerGraph::ReplaceNode(v130, a2, v27, (const Layer2TDMapper::SourceLayer *)__p);
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (__p[0].__r_.__value_.__l.__size_)
      {
        __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
        operator delete((void *)__p[0].__r_.__value_.__l.__size_);
      }
    }
  }
  else
  {
    MirOpt::CWTransposeUtil::ReplaceCWTransposedLayer((uint64_t)v5, a2, v27);
  }
  v131 = v171;
  if (v171)
  {
    v132 = (unint64_t *)&v171->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v172[0])
  {
    v172[1] = v172[0];
    operator delete(v172[0]);
  }
  return v27;
}

void sub_206EAC33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  char a72;
  void *a73;
  _QWORD *v74;
  void *v75;

  v74 = (_QWORD *)a15;
  a15 = 0;
  if (v74)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a15, v74);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a35);
  a41 = off_24C01FBB0;
  if (a47 < 0)
    operator delete(__p);
  if (a71 < 0)
    operator delete(a66);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  v75 = a73;
  if (a73)
  {
    STACK[0x200] = (unint64_t)a73;
    operator delete(v75);
  }
  _Unwind_Resume(a1);
}

void sub_206EAC674()
{
  JUMPOUT(0x206EAC66CLL);
}

void sub_206EAC67C()
{
  JUMPOUT(0x206EAC65CLL);
}

void sub_206EAC684()
{
  if (STACK[0x210])
  {
    STACK[0x218] = STACK[0x210];
    JUMPOUT(0x206EAC668);
  }
  JUMPOUT(0x206EAC66CLL);
}

uint64_t MirOpt::CWTransposeUtil::ReplaceCWTransposedLayer(uint64_t this, ZinIrOpLayer *a2, ZinIrOpLayer *a3)
{
  uint64_t v5;
  uint64_t **v6;
  const ZinIrTensor *v7;
  const ZinIrTensor *v8;
  ZinTensorFamilyUtil *v9;
  const ZinIrTensor *v10;
  unint64_t v11;
  char v12;
  uint64_t **v13;
  int v14;
  unint64_t v15;
  unint64_t *v16;
  void *__p;
  void *v18;
  uint64_t v19;
  unint64_t v20;

  if (a2 != a3)
  {
    v5 = this;
    v6 = (uint64_t **)*((_QWORD *)a2 + 19);
    v7 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v8 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
    v9 = *(ZinTensorFamilyUtil **)(v5 + 688);
    v10 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v11 = *(_QWORD *)(ZinTensorFamilyUtil::GetRootTensor(v9, v10) + 8);
    v19 = 0;
    v20 = v11;
    v16 = (unint64_t *)&unk_24C02BB18;
    __p = 0;
    v18 = 0;
    v12 = ZinIrOpLayerGraph::ReplaceNode(v6, a2, a3, (const Layer2TDMapper::SourceLayer *)&v16);
    v16 = (unint64_t *)&unk_24C02BB18;
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    if ((v12 & 1) == 0)
      ZinAssertImpl("[MirOpt::CWTranspose] Failed to replace with transposed layer");
    ZinTensorFamilyUtil::DeleteTensorFromFamilyAttributesAndRootTensorMap(*(ZinTensorFamilyUtil **)(v5 + 688), v7);
    ZinTensorFamilyUtil::UpdateFamilyAttributesAndRootTensorMap(*(uint64_t ***)(v5 + 688), v8, 0);
    this = ZinTensorFamilyUtil::GetRootTensor(*(ZinTensorFamilyUtil **)(v5 + 688), v8);
    v15 = *(_QWORD *)(this + 8);
    if (v11 != v15)
    {
      v13 = (uint64_t **)(v5 + 616);
      v14 = *(_DWORD *)std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v13, &v20);
      v16 = &v15;
      *((_DWORD *)std::__tree<std::__value_type<ZinIrOpLayer *,int>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,int>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,int>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v13, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 10) = v14;
      return std::__tree<std::__value_type<unsigned long long,ZinIrIrObject *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ZinIrIrObject *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ZinIrIrObject *>>>::__erase_unique<unsigned long long>((uint64_t)v13, &v20);
    }
  }
  return this;
}

void sub_206EAC820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::CWTransposeUtil::ApplyCWTransposeToNonEngineLayer(MirOpt::CWTransposeUtil *this, ZinIrOpLayer *a2)
{
  const char *v4;
  size_t v5;
  _BYTE *v6;
  const char *v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  int64x2_t v14;
  __n128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  int v31;
  uint64_t v32;
  uint64_t ReshapeInfo;
  uint64_t Transpose;
  ZinIrOpLayer *v35;
  uint64_t v36;
  const ZinIrTensor *v37;
  ZinIrTensor *v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  int *v46;
  int *v47;
  int v48;
  uint64_t ValueAt;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  ZinIrTensor *v56;
  ZinIrOpLayer *View;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  const ZinIrTensor *v62;
  ZinIrTensor *v63;
  ZinIrOpLayer *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  ZinIrTensor *v72;
  ZinIrTensor::MirInfo *v73;
  uint64_t Hal;
  uint64_t v75;
  uint64_t v76;
  int v77;
  ZinIrTensor *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  ZinIrTensor::MirInfo *v82;
  uint64_t v83;
  ZinIrTensor *v84;
  ZinIrOpLayer *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t *v96;
  ZinIrTensor *v97;
  ZinIrTensor::MirInfo *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  ZinIrTensor::MirInfo *v101;
  ZinIrTensor::MirInfo *v102;
  _OWORD v103[2];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *__p[2];
  __int128 v111;
  uint64_t v112;
  const ZinIrTensor *v113;
  std::__shared_weak_count *v114;
  _BYTE v115[32];
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  ZinIrTensor::MirInfo *v119;
  const ZinIrTensor *v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  int64x2_t v123;
  int64x2_t v124;
  uint64_t v125;
  std::string v126;
  _QWORD v127[3];
  char v128;

  v4 = (char *)a2 + 24;
  if (*((char *)a2 + 47) >= 0)
    v5 = *((unsigned __int8 *)a2 + 47);
  else
    v5 = *((_QWORD *)a2 + 4);
  v6 = v115;
  std::string::basic_string[abi:ne180100]((uint64_t)v115, v5 + 1);
  if (v115[23] < 0)
    v6 = *(_BYTE **)v115;
  if (v5)
  {
    if (*((char *)a2 + 47) >= 0)
      v7 = v4;
    else
      v7 = (const char *)*((_QWORD *)a2 + 3);
    memmove(v6, v7, v5);
  }
  *(_WORD *)&v6[v5] = 95;
  v8 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v126, "cw_noop");
  v9 = std::string::append(v8, "_xfm", 4uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)&v111 = *((_QWORD *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v111) & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((SBYTE7(v111) & 0x80u) == 0)
    v12 = BYTE7(v111);
  else
    v12 = (std::string::size_type)__p[1];
  v13 = std::string::append((std::string *)v115, (const std::string::value_type *)v11, v12);
  v14 = *(int64x2_t *)&v13->__r_.__value_.__l.__data_;
  v124.i64[0] = v13->__r_.__value_.__r.__words[2];
  v123 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = ZinObjectNameFactory::ZinObjectNameFactory(v127, &v123);
  if (v124.i8[7] < 0)
    operator delete((void *)v123.i64[0]);
  if (SBYTE7(v111) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if ((v115[23] & 0x80000000) != 0)
    operator delete(*(void **)v115);
  v16 = *((_QWORD *)a2 + 8);
  v17 = *(_DWORD *)(v16 + 8);
  if (v17 <= 35)
  {
    if (v17 != 7)
    {
      if (v17 == 29)
      {
        v18 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)a2 + 32))(a2, 0, 0, v15);
        v19 = *(int64x2_t *)(v18 + 64);
        v123 = *(int64x2_t *)(v18 + 48);
        v124 = v19;
        v20 = *(_QWORD *)(v18 + 80);
        v21 = v123.i64[1];
        v123.i64[1] = v19.i64[1];
        v124.i64[1] = v21;
        v125 = v20;
        v22 = *(_DWORD *)(v18 + 88);
        v23 = *(_QWORD *)(v18 + 112);
        v24 = *(std::__shared_weak_count **)(v18 + 120);
        *(_QWORD *)v115 = v23;
        *(_QWORD *)&v115[8] = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(p_shared_owners);
          while (__stxr(v26 + 1, p_shared_owners));
          v27 = *((_QWORD *)a2 + 2);
          v99 = v23;
          v100 = v24;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
        }
        else
        {
          v27 = *((_QWORD *)a2 + 2);
          v99 = v23;
          v100 = 0;
        }
        v64 = (ZinIrOpLayer *)ZinBuilder::CreateConstLayer(v27, (uint64_t)v127, (__int128 *)v123.i8, v22, &v99, 0, 0);
        v65 = v100;
        if (v100)
        {
          v66 = (unint64_t *)&v100->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        if (!v64)
          ZinAssertImpl("[MirOpt::CWTranspose] Failed while creating new Const");
        MirOpt::CWTransposeUtil::ReplaceCWTransposedLayer((uint64_t)this, a2, v64);
        v68 = *(std::__shared_weak_count **)&v115[8];
        if (*(_QWORD *)&v115[8])
        {
          v69 = (unint64_t *)(*(_QWORD *)&v115[8] + 8);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        goto LABEL_102;
      }
LABEL_108:
      if (*((char *)a2 + 47) < 0)
        v4 = *(const char **)v4;
      ZinAssertImpl("[MirOpt::CWTranspose] Unsupported Non-Engine layer type: %s", v4);
    }
    v39 = *(unsigned int *)(v16 + 12);
    if ((_DWORD)v39)
    {
      if ((_DWORD)v39 == 3)
        v39 = 0;
    }
    else
    {
      v39 = 3;
    }
    v123 = vdupq_n_s64(1uLL);
    v124 = v123;
    v125 = 1;
    Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
    (*(void (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
    ZinConcatLayerUtils::ComputeConcatViewAndStep(v39, (_QWORD **)a2 + 11, (uint64_t)&v123, __p);
    v75 = operator new();
    ZinIrConcatInfo::ZinIrConcatInfo(v75, v39, __p);
    v122 = v75;
    v76 = *((_QWORD *)a2 + 2);
    v77 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)
                    + 88);
    ZinObjectNameFactory::CreateName((uint64_t)v127, 0, &v126);
    v78 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v78, &v119);
    v117 = 0;
    v118 = 0;
    *(_DWORD *)v115 = 0;
    memset(&v115[8], 0, 24);
    LODWORD(v116) = 0;
    ZinIrTensor::CreateTensor(v76, v77, (__int128 *)v123.i8, (__int128 *)&v126, &v119, &v117, (unsigned int *)v115, (uint64_t *)&v120);
    v79 = v118;
    if (v118)
    {
      v80 = (unint64_t *)&v118->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = v119;
    v119 = 0;
    if (v82)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v119, v82);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    v83 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    ZinMirSpatialSplitUtils::PropagateSpatialSplitInfo(v83, v120, v84);
    v85 = (ZinIrOpLayer *)operator new();
    v113 = v120;
    v114 = v121;
    if (v121)
    {
      v86 = (unint64_t *)&v121->__shared_owners_;
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    ZinObjectNameFactory::CreateName((uint64_t)v127, 1u, (std::string *)v115);
    ZinConcatLayer::ZinConcatLayer(v85, &v122, &v113, v115, 0);
    if ((v115[23] & 0x80000000) != 0)
      operator delete(*(void **)v115);
    v88 = v114;
    if (v114)
    {
      v89 = (unint64_t *)&v114->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    MirOpt::CWTransposeUtil::ReplaceCWTransposedLayer((uint64_t)this, a2, v85);
    v91 = v121;
    if (v121)
    {
      v92 = (unint64_t *)&v121->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = v122;
    v122 = 0;
    if (v94)
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
    goto LABEL_100;
  }
  if (v17 == 36)
  {
    v40 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)a2 + 32))(a2, 0, 0, v15);
    v41 = *(int64x2_t *)(v40 + 64);
    v123 = *(int64x2_t *)(v40 + 48);
    v124 = v41;
    v42 = *(_QWORD *)(v40 + 80);
    v43 = v123.i64[1];
    v123.i64[1] = v41.i64[1];
    v124.i64[1] = v43;
    v125 = v42;
    v44 = *((_QWORD *)a2 + 8);
    v45 = *(_OWORD *)(v44 + 32);
    *(_OWORD *)v115 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)&v115[16] = v45;
    v116 = *(_QWORD *)(v44 + 48);
    MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)__p);
    v46 = (int *)__p[0];
    v47 = (int *)__p[1];
    if (__p[0] != __p[1])
    {
      while (1)
      {
        v48 = v46[1];
        ValueAt = GetValueAtDimension<ZinTensorPosition>((uint64_t *)(v44 + 16), *v46);
        if (SetValueAtDimension<ZinTensorPosition>(v115, v48, ValueAt))
          break;
        v46 += 2;
        if (v46 == v47)
        {
          v46 = (int *)__p[0];
          goto LABEL_46;
        }
      }
LABEL_100:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_102;
    }
LABEL_46:
    if (v46)
    {
      __p[1] = v46;
      operator delete(v46);
    }
    v51 = *(_QWORD *)(v44 + 56);
    v50 = *(_QWORD *)(v44 + 64);
    v52 = *(_QWORD *)(v44 + 72);
    v53 = *(_QWORD *)(v44 + 80);
    v54 = *(_QWORD *)(v44 + 88);
    *(_OWORD *)__p = *(_OWORD *)v115;
    v111 = *(_OWORD *)&v115[16];
    v112 = v116;
    v55 = *((_QWORD *)a2 + 2);
    ZinObjectNameFactory::CreateName((uint64_t)v127, 1u, &v126);
    v56 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    ZinIrTensor::GetParentTensor(v56, &v120);
    v103[0] = *(_OWORD *)__p;
    v103[1] = v111;
    v104 = v112;
    v105 = v51;
    v106 = v53;
    v107 = v52;
    v108 = v50;
    v109 = v54;
    View = (ZinIrOpLayer *)ZinBuilder::CreateView(v55, (uint64_t)&v126, (uint64_t)v120, (__int128 *)v123.i8, (uint64_t)v103);
    v58 = v121;
    if (v121)
    {
      v59 = (unint64_t *)&v121->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    if (!View)
      ZinAssertImpl("[MirOpt::CWTranspose] Failed while creating new View");
    if (!*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)View + 32))(View, 0, 0)+ 104))
    {
      if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)
                     + 104))
      {
        v96 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)View + 32))(View, 0, 0);
        v97 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
        ZinIrTensor::CopyTensorMirInfo(v97, &v102);
        ZinIrTensor::SetTensorMirInfo(v96, &v102);
        v98 = v102;
        v102 = 0;
        if (v98)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v102, v98);
      }
    }
    v61 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v62 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)View + 32))(View, 0, 0);
    ZinMirSpatialSplitUtils::PropagateSpatialSplitInfo(v61, v62, v63);
    MirOpt::CWTransposeUtil::ReplaceCWTransposedLayer((uint64_t)this, a2, View);
  }
  else
  {
    if (v17 != 37)
      goto LABEL_108;
    v29 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(***((_QWORD ***)a2 + 11) + 32))(**((_QWORD **)a2 + 11), 0, 0, v15);
    v125 = *(_QWORD *)(v29 + 80);
    v30 = *(int64x2_t *)(v29 + 64);
    v123 = *(int64x2_t *)(v29 + 48);
    v124 = v30;
    v31 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)
                    + 88);
    v32 = *((_QWORD *)a2 + 2);
    ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(a2);
    Transpose = ZinBuilder::CreateTranspose(v32, (uint64_t)v127, (uint64_t)&v123, v31, ReshapeInfo + 16);
    v35 = (ZinIrOpLayer *)Transpose;
    if (!Transpose)
      ZinAssertImpl("[MirOpt::CWTranspose] Failed while creating new Transpose");
    if (!*(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0)+ 104))
    {
      if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0)
                     + 104))
      {
        v71 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0, 0);
        v72 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
        ZinIrTensor::CopyTensorMirInfo(v72, &v101);
        ZinIrTensor::SetTensorMirInfo(v71, &v101);
        v73 = v101;
        v101 = 0;
        if (v73)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v101, v73);
      }
    }
    v36 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v37 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0, 0);
    ZinMirSpatialSplitUtils::PropagateSpatialSplitInfo(v36, v37, v38);
    MirOpt::CWTransposeUtil::ReplaceCWTransposedLayer((uint64_t)this, a2, v35);
  }
LABEL_102:
  v127[0] = off_24C01FBB0;
  if (v128 < 0)
    operator delete((void *)v127[1]);
  return 1;
}

void sub_206EAD1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  _QWORD *v47;

  v47 = a14;
  a14 = 0;
  if (v47)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a14, v47);
  *(_QWORD *)(v45 - 120) = off_24C01FBB0;
  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  _Unwind_Resume(exception_object);
}

void MirOpt::CWTransposeUtil::CheckTransposableAndSetRootTensorConstraint(ZinTensorFamilyUtil **a1, uint64_t *a2, ZinIrOpLayer **a3)
{
  _QWORD *AllUsages;
  void **v7;
  _QWORD v8[2];
  char v9;
  _QWORD v10[2];
  char v11;
  _QWORD v12[2];
  char v13;
  _BYTE v14[8];
  _QWORD *v15;
  uint64_t v16;
  void *v17[2];
  char v18;

  if ((ZinIrOpLayer::IsIntermediate(a3[12]) & 1) != 0 || *(_DWORD *)(*((_QWORD *)a3[12] + 8) + 8) == 29)
  {
    AllUsages = ZinTensorFamilyUtil::GetAllUsages(a1[86], (const ZinIrTensor *)a3);
    std::set<LayerAndUsageInfo>::set[abi:ne180100]<std::__wrap_iter<LayerAndUsageInfo const*>>((uint64_t)v14, (_DWORD *)*AllUsages, (_DWORD *)AllUsages[1]);
    if (v16)
    {
      if (MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, (const ZinIrTensor *)a3))
      {
        std::string::basic_string[abi:ne180100]<0>(v10, ":has_sw_constraint");
        MirOpt::CWTransposeUtil::SetRootTensorConstraint((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)v10, 0);
        if (v11 < 0)
        {
          v7 = (void **)v10;
LABEL_13:
          operator delete(*v7);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v8, ":has_no_constraint");
        MirOpt::CWTransposeUtil::SetRootTensorConstraint((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)v8, 1);
        if (v9 < 0)
        {
          v7 = (void **)v8;
          goto LABEL_13;
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v12, ":has_no_usage");
      MirOpt::CWTransposeUtil::SetRootTensorConstraint((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)v12, 0);
      if (v13 < 0)
      {
        v7 = (void **)v12;
        goto LABEL_13;
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v14, v15);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, ":is_not_intermediate_or_1d_const_in");
  MirOpt::CWTransposeUtil::SetRootTensorConstraint((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)v17, 0);
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_206EAD580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,_QWORD *a28)
{
  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

void MirOpt::CWTransposeUtil::SetRootTensorConstraint(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  _BYTE __p[32];
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;

  v9 = *(unint64_t **)(a3 + 8);
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    v25 = *(std::string *)(a3 + 24);
  std::to_string(&v22, (unint64_t)v9);
  v10 = std::string::insert(&v22, 0, "T", 1uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v23, ":", 1uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v25;
  else
    v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    size = v25.__r_.__value_.__l.__size_;
  v16 = std::string::append((std::string *)__p, (const std::string::value_type *)v14, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    v18 = *(char *)(a4 + 23);
    if (v18 >= 0)
      v19 = (const std::string::value_type *)a4;
    else
      v19 = *(const std::string::value_type **)a4;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a4 + 23);
    else
      v20 = *(_QWORD *)(a4 + 8);
    std::string::append(&v24, v19, v20);
  }
  if (a5)
  {
    __p[0] = 0;
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(std::string *)&__p[8] = v24;
      goto LABEL_30;
    }
  }
  else
  {
    __p[0] = 1;
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(std::string *)&__p[8] = v24;
      goto LABEL_30;
    }
  }
  std::string::__init_copy_ctor_external((std::string *)&__p[8], v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
LABEL_30:
  CpTransposeGraph::SetRootTensorConstraint(*a2, v9, __p);
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_206EAD820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 57) < 0)
    operator delete(*(void **)(v38 - 80));
  _Unwind_Resume(exception_object);
}

void MirOpt::CWTransposeUtil::CheckTransposableAndSetLayerTruthTable(uint64_t a1, CpTransposeGraph **a2, ZinIrOpLayer *this)
{
  if (ZinIrOpLayer::IsNELayer(this))
  {
    MirOpt::CWTransposeUtil::SetNELayerTruthTable(a1, a2, this);
  }
  else if (ZinIrOpLayer::IsPELayer(this))
  {
    MirOpt::CWTransposeUtil::SetPELayerTruthTable(a1, a2, this);
  }
  else
  {
    if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)this + 112))(this))
      ZinAssertImpl("[MirOpt::CWTranspose] Engine layer should be NE or PE or SNE.");
    MirOpt::CWTransposeUtil::SetSNELayerTruthTable(a1, a2, (uint64_t)this);
  }
}

void MirOpt::CWTransposeUtil::SetNELayerTruthTable(uint64_t a1, CpTransposeGraph **a2, ZinIrOpLayer *a3)
{
  unsigned int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  _QWORD *v9;
  int v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  unint64_t v14;
  const char *v15;
  _BYTE *v16;
  _BYTE *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *p_p;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string *v63;
  unint64_t v64;
  void **v65;
  void *v66;
  unint64_t v67;
  void **v68;
  void *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  std::string v73;
  void *v74;
  char v75;
  std::string v76;
  __int128 v77;
  uint64_t v78;
  std::string v79;
  std::string v80;
  __int128 v81;
  uint64_t v82;
  std::string v83;
  std::string v84;
  __int128 v85;
  uint64_t v86;
  std::string v87;
  std::string v88;
  __int128 v89;
  uint64_t v90;
  std::string v91;
  std::string v92;
  __int128 v93;
  uint64_t v94;
  std::string v95;
  std::string v96;
  __int128 v97;
  uint64_t v98;
  std::string v99;
  std::string v100;
  __int128 v101;
  uint64_t v102;
  std::string v103;
  std::string v104;
  __int128 v105;
  uint64_t v106;
  std::string __s;
  std::string v108;
  void *v109;
  _BYTE *v110;
  uint64_t v111;
  std::string v112;
  std::string v113;
  char **v114;
  char v115;
  std::string __p;
  __int128 v117;
  uint64_t v118;
  std::string v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  std::string v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  std::string v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  std::string v137;
  _QWORD v138[3];
  __int128 v139;
  uint64_t v140;
  std::string v141;
  _QWORD v142[3];
  __int128 v143;
  uint64_t v144;
  std::string v145;
  _QWORD v146[3];
  __int128 v147;
  uint64_t v148;
  std::string v149;
  _QWORD v150[3];
  __int128 v151;
  uint64_t v152;
  std::string v153;
  _QWORD v154[4];

  v154[1] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v113, &byte_207AF6795);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    v6 = *(_DWORD *)(*((_QWORD *)a3 + 8) + 8) - 85;
    if (v6 >= 9)
    {
      v7 = ":is_nelayer";
      v8 = 11;
    }
    else
    {
      v7 = off_24C05FEE0[v6];
      v8 = *(_QWORD *)&asc_207AA8408[8 * v6];
    }
    std::string::append(&v113, v7, v8);
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 408))(a3))
      std::string::append(&v113, ":has_output_transpose", 0x15uLL);
    if (*((_QWORD *)a3 + 33))
      std::string::append(&v113, ":has_mir_info", 0xDuLL);
    if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0)
                   + 104))
      std::string::append(&v113, ":has_tensor_mir_info", 0x14uLL);
    if (*((_QWORD *)a3 + 25))
      std::string::append(&v113, ":has_texture", 0xCuLL);
    if (*((_QWORD *)a3 + 46))
      std::string::append(&v113, ":has_input_broadcast", 0x14uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    v9 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)(a1 + 576), &__p);
    if (!v9)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v10 = *((unsigned __int8 *)v9 + 26);
    MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings(&__p.__r_.__value_.__l.__data_);
    v11 = (*(uint64_t (**)(ZinIrOpLayer *, std::string *))(*(_QWORD *)a3 + 424))(a3, &__p);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11)
      std::string::append(&v113, ":transposed_domain_available", 0x1CuLL);
    if (v10)
      v12 = ":output_transpose_available";
    else
      v12 = ":no_transpose_available";
    if (v10)
      v13 = 27;
    else
      v13 = 23;
    std::string::append(&v113, v12, v13);
  }
  v14 = *((_QWORD *)a3 + 1);
  v15 = (char *)a3 + 24;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v112, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    *(_OWORD *)&v112.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
    v112.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
  }
  v110 = 0;
  v109 = 0;
  v111 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v109, *((const void **)a3 + 11), *((_QWORD *)a3 + 12), (uint64_t)(*((_QWORD *)a3 + 12) - *((_QWORD *)a3 + 11)) >> 3);
  v16 = v110;
  v17 = v109;
  std::to_string(&v100, v14);
  v18 = std::string::insert(&v100, 0, "L", 1uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v104, ":", 1uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v112;
  else
    v22 = (std::string *)v112.__r_.__value_.__r.__words[0];
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v112.__r_.__value_.__r.__words[2]);
  else
    size = v112.__r_.__value_.__l.__size_;
  v24 = std::string::append(&__p, (const std::string::value_type *)v22, size);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v113;
    else
      v26 = (std::string *)v113.__r_.__value_.__r.__words[0];
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    else
      v27 = v113.__r_.__value_.__l.__size_;
    std::string::append(&v108, (const std::string::value_type *)v26, v27);
  }
  if ((unint64_t)(v110 - (_BYTE *)v109) >= 0x20)
  {
    if (*((char *)a3 + 47) < 0)
      v15 = *(const char **)v15;
    ZinAssertImpl("[MirOpt::CWTranspose] Unsupported NE layer with more than two inputs: %s", v15);
  }
  if (v16 - v17 == 8)
  {
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v28 = v108.__r_.__value_.__l.__size_;
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v28 + 10);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v28)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v108;
      else
        v30 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(p_p, v30, v28);
    }
    strcpy((char *)p_p + v28, ":orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 0, 0, &v104);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v31 = v108.__r_.__value_.__l.__size_;
    v32 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v31 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v31)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v108;
      else
        v33 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v32, v33, v31);
    }
    strcpy((char *)v32 + v31, ":orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 0, 1, &v100);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v34 = v108.__r_.__value_.__l.__size_;
    v35 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v34 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v34)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v108;
      else
        v36 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v35, v36, v34);
    }
    strcpy((char *)v35 + v34, ":trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 0, 0, &v96);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v37 = v108.__r_.__value_.__l.__size_;
    v38 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v37 + 12);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v37)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v108;
      else
        v39 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v38, v39, v37);
    }
    strcpy((char *)v38 + v37, ":trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 0, 1, &v92);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&__p, (__int128 *)v104.__r_.__value_.__l.__data_, (__int128 *)v104.__r_.__value_.__l.__size_, (uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 4);
    v117 = v105;
    v118 = v106;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v119, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v119 = __s;
    v121 = 0;
    v120 = 0;
    v122 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v120, (__int128 *)v100.__r_.__value_.__l.__data_, (__int128 *)v100.__r_.__value_.__l.__size_, (uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 4);
    v123 = v101;
    v124 = v102;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v125, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
    else
      v125 = v103;
    v127 = 0;
    v126 = 0;
    v128 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v126, (__int128 *)v96.__r_.__value_.__l.__data_, (__int128 *)v96.__r_.__value_.__l.__size_, (uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 4);
    v129 = v97;
    v130 = v98;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v131, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
    else
      v131 = v99;
    v133 = 0;
    v132 = 0;
    v134 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v132, (__int128 *)v92.__r_.__value_.__l.__data_, (__int128 *)v92.__r_.__value_.__l.__size_, (uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 4);
    v135 = v93;
    v136 = v94;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v137, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    else
      v137 = v95;
    memset(&v84, 0, sizeof(v84));
    v80.__r_.__value_.__s.__data_[8] = 0;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x120uLL);
    v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
    v84.__r_.__value_.__r.__words[2] = v84.__r_.__value_.__r.__words[0] + 288;
    v84.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v84.__r_.__value_.__r.__words[2], (uint64_t)&__p, (uint64_t)v138, (uint64_t)v84.__r_.__value_.__l.__data_);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v88, (uint64_t *)&v84, (__int128 *)&v108);
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    v64 = 288;
    do
    {
      v65 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v64);
      if (__p.__r_.__value_.__s.__data_[v64 - 1] < 0)
        operator delete(*(v65 - 3));
      v66 = *(v65 - 9);
      if (v66)
      {
        v112.__r_.__value_.__r.__words[v64 / 8] = (std::string::size_type)v66;
        operator delete(v66);
      }
      v64 -= 72;
    }
    while (v64);
    CpTransposeGraph::SetLayerTruthTable(*a2, v14, &v88);
    if (SHIBYTE(v90) < 0)
      operator delete((void *)v89);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v40 = v108.__r_.__value_.__l.__size_;
    v41 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v40 + 15);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v40)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v108;
      else
        v42 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v41, v42, v40);
    }
    strcpy((char *)v41 + v40, ":orig_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 0, 0, &v104);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v43 = v108.__r_.__value_.__l.__size_;
    v44 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v43 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v43)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v108;
      else
        v45 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v44, v45, v43);
    }
    strcpy((char *)v44 + v43, ":orig_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 0, 1, &v100);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v46 = v108.__r_.__value_.__l.__size_;
    v47 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v46 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v46)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v108;
      else
        v48 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v47, v48, v46);
    }
    strcpy((char *)v47 + v46, ":orig_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 1, 0, &v96);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v49 = v108.__r_.__value_.__l.__size_;
    v50 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v49 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v49)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v108;
      else
        v51 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v50, v51, v49);
    }
    strcpy((char *)v50 + v49, ":orig_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 1, 1, &v92);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v52 = v108.__r_.__value_.__l.__size_;
    v53 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v52 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v52)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &v108;
      else
        v54 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v53, v54, v52);
    }
    strcpy((char *)v53 + v52, ":trans_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 0, 0, &v88);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v55 = v108.__r_.__value_.__l.__size_;
    v56 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v55 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v55)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v108;
      else
        v57 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v56, v57, v55);
    }
    strcpy((char *)v56 + v55, ":trans_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 0, 1, &v84);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v58 = v108.__r_.__value_.__l.__size_;
    v59 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v58 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v58)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v108;
      else
        v60 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v59, v60, v58);
    }
    strcpy((char *)v59 + v58, ":trans_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 1, 0, &v80);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    else
      v61 = v108.__r_.__value_.__l.__size_;
    v62 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v61 + 18);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v61)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v108;
      else
        v63 = (std::string *)v108.__r_.__value_.__r.__words[0];
      memmove(v62, v63, v61);
    }
    strcpy((char *)v62 + v61, ":trans_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 1, 1, &v76);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&__p, (__int128 *)v104.__r_.__value_.__l.__data_, (__int128 *)v104.__r_.__value_.__l.__size_, (uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 4);
    v117 = v105;
    v118 = v106;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v119, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v119 = __s;
    v121 = 0;
    v120 = 0;
    v122 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v120, (__int128 *)v100.__r_.__value_.__l.__data_, (__int128 *)v100.__r_.__value_.__l.__size_, (uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 4);
    v123 = v101;
    v124 = v102;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v125, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
    else
      v125 = v103;
    v127 = 0;
    v126 = 0;
    v128 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v126, (__int128 *)v96.__r_.__value_.__l.__data_, (__int128 *)v96.__r_.__value_.__l.__size_, (uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 4);
    v129 = v97;
    v130 = v98;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v131, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
    else
      v131 = v99;
    v133 = 0;
    v132 = 0;
    v134 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v132, (__int128 *)v92.__r_.__value_.__l.__data_, (__int128 *)v92.__r_.__value_.__l.__size_, (uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 4);
    v135 = v93;
    v136 = v94;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v137, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    else
      v137 = v95;
    memset(v138, 0, sizeof(v138));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v138, (__int128 *)v88.__r_.__value_.__l.__data_, (__int128 *)v88.__r_.__value_.__l.__size_, (uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 4);
    v139 = v89;
    v140 = v90;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v141, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    else
      v141 = v91;
    memset(v142, 0, sizeof(v142));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v142, (__int128 *)v84.__r_.__value_.__l.__data_, (__int128 *)v84.__r_.__value_.__l.__size_, (uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 4);
    v143 = v85;
    v144 = v86;
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v145, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
    else
      v145 = v87;
    memset(v146, 0, sizeof(v146));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v146, (__int128 *)v80.__r_.__value_.__l.__data_, (__int128 *)v80.__r_.__value_.__l.__size_, (uint64_t)(v80.__r_.__value_.__l.__size_ - v80.__r_.__value_.__r.__words[0]) >> 4);
    v147 = v81;
    v148 = v82;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v149, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
    else
      v149 = v83;
    memset(v150, 0, sizeof(v150));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v150, (__int128 *)v76.__r_.__value_.__l.__data_, (__int128 *)v76.__r_.__value_.__l.__size_, (uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 4);
    v151 = v77;
    v152 = v78;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v153, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    else
      v153 = v79;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v114 = &v70;
    v115 = 0;
    v70 = (char *)operator new(0x240uLL);
    v71 = (uint64_t)v70;
    v72 = v70 + 576;
    v71 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v72, (uint64_t)&__p, (uint64_t)v154, (uint64_t)v70);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v73, (uint64_t *)&v70, (__int128 *)&v108);
    v114 = &v70;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
    v67 = 576;
    do
    {
      v68 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v67);
      if (__p.__r_.__value_.__s.__data_[v67 - 1] < 0)
        operator delete(*(v68 - 3));
      v69 = *(v68 - 9);
      if (v69)
      {
        v112.__r_.__value_.__r.__words[v67 / 8] = (std::string::size_type)v69;
        operator delete(v69);
      }
      v67 -= 72;
    }
    while (v67);
    CpTransposeGraph::SetLayerTruthTable(*a2, v14, &v73);
    if (v75 < 0)
      operator delete(v74);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (v76.__r_.__value_.__r.__words[0])
    {
      v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (v80.__r_.__value_.__r.__words[0])
    {
      v80.__r_.__value_.__l.__size_ = v80.__r_.__value_.__r.__words[0];
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (v84.__r_.__value_.__r.__words[0])
    {
      v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (v88.__r_.__value_.__r.__words[0])
    {
      v88.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
      operator delete(v88.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (v92.__r_.__value_.__r.__words[0])
  {
    v92.__r_.__value_.__l.__size_ = v92.__r_.__value_.__r.__words[0];
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (v96.__r_.__value_.__r.__words[0])
  {
    v96.__r_.__value_.__l.__size_ = v96.__r_.__value_.__r.__words[0];
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (v100.__r_.__value_.__r.__words[0])
  {
    v100.__r_.__value_.__l.__size_ = v100.__r_.__value_.__r.__words[0];
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v104.__r_.__value_.__r.__words[0])
  {
    v104.__r_.__value_.__l.__size_ = v104.__r_.__value_.__r.__words[0];
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (v109)
  {
    v110 = v109;
    operator delete(v109);
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
}

void sub_206EAECEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void **v65;
  void *v67;
  void *v68;

  v67 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v67;
    operator delete(v67);
  }
  do
  {
    v65 -= 9;
    CpTransposeUtils::LayerConstraint::~LayerConstraint(v65);
  }
  while (v65 != (void **)&STACK[0x310]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a20);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&a29);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a38);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a47);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a56);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a65);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x208]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x250]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  v68 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v68;
    operator delete(v68);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  _Unwind_Resume(a1);
}

void MirOpt::CWTransposeUtil::SetPELayerTruthTable(uint64_t a1, CpTransposeGraph **a2, ZinIrOpLayer *a3)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  unint64_t v16;
  const char *v17;
  _BYTE *v18;
  _BYTE *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string *p_p;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  std::string *v65;
  unint64_t v66;
  void **v67;
  void *v68;
  unint64_t v69;
  void **v70;
  void *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  std::string v75;
  void *v76;
  char v77;
  std::string v78;
  __int128 v79;
  uint64_t v80;
  std::string v81;
  std::string v82;
  __int128 v83;
  uint64_t v84;
  std::string v85;
  std::string v86;
  __int128 v87;
  uint64_t v88;
  std::string v89;
  std::string v90;
  __int128 v91;
  uint64_t v92;
  std::string v93;
  std::string v94;
  __int128 v95;
  uint64_t v96;
  std::string v97;
  std::string v98;
  __int128 v99;
  uint64_t v100;
  std::string v101;
  std::string v102;
  __int128 v103;
  uint64_t v104;
  std::string v105;
  std::string v106;
  __int128 v107;
  uint64_t v108;
  std::string __s;
  std::string v110;
  void *v111;
  _BYTE *v112;
  uint64_t v113;
  std::string v114;
  std::string v115;
  char **v116;
  char v117;
  std::string __p;
  __int128 v119;
  uint64_t v120;
  std::string v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  std::string v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  std::string v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  std::string v139;
  _QWORD v140[3];
  __int128 v141;
  uint64_t v142;
  std::string v143;
  _QWORD v144[3];
  __int128 v145;
  uint64_t v146;
  std::string v147;
  _QWORD v148[3];
  __int128 v149;
  uint64_t v150;
  std::string v151;
  _QWORD v152[3];
  __int128 v153;
  uint64_t v154;
  std::string v155;
  _QWORD v156[4];

  v156[1] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v115, &byte_207AF6795);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 704) + 8) + 99) & 0x10) == 0)
    goto LABEL_42;
  v6 = *(_DWORD *)(*((_QWORD *)a3 + 8) + 8) - 81;
  if (v6 >= 4)
  {
    v7 = ":is_pelayer";
    v8 = 11;
  }
  else
  {
    v7 = off_24C05FF28[v6];
    v8 = qword_207AA8450[v6];
  }
  std::string::append(&v115, v7, v8);
  std::string::append(&v115, ":has_", 5uLL);
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 640))(a3))
    std::string::append(&v115, "src1_", 5uLL);
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 648))(a3))
    std::string::append(&v115, "src2_", 5uLL);
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 408))(a3))
    std::string::append(&v115, "dst_", 4uLL);
  if (((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 640))(a3) & 1) == 0
    && ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 648))(a3) & 1) == 0
    && ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 408))(a3) & 1) == 0)
  {
    std::string::append(&v115, "no_", 3uLL);
  }
  std::string::append(&v115, "transpose", 9uLL);
  if (*((_QWORD *)a3 + 33))
    std::string::append(&v115, ":has_mir_info", 0xDuLL);
  if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0) + 104))
    std::string::append(&v115, ":has_tensor_mir_info", 0x14uLL);
  if (*((_QWORD *)a3 + 25))
    std::string::append(&v115, ":has_texture", 0xCuLL);
  std::string::append(&v115, ":has_", 5uLL);
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 656))(a3))
    std::string::append(&v115, "src1_", 5uLL);
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 664))(a3))
    std::string::append(&v115, "src2_", 5uLL);
  if (((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 656))(a3) & 1) == 0
    && ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a3 + 664))(a3) & 1) == 0)
  {
    std::string::append(&v115, "no_", 3uLL);
  }
  std::string::append(&v115, "broadcast", 9uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v9 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)(a1 + 576), &__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v10 = v9[24];
  v11 = v9[25];
  v12 = v9[26];
  MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings(&__p.__r_.__value_.__l.__data_);
  v13 = (*(uint64_t (**)(ZinIrOpLayer *, std::string *))(*(_QWORD *)a3 + 424))(a3, &__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13)
    std::string::append(&v115, ":transposed_domain_available", 0x1CuLL);
  std::string::append(&v115, ":", 1uLL);
  if (v10)
    std::string::append(&v115, "src1_", 5uLL);
  if (v11)
    std::string::append(&v115, "src2_", 5uLL);
  if (v12)
  {
    v14 = "dst_";
    v15 = 4;
  }
  else
  {
    if (v11 | v10)
      goto LABEL_41;
    v14 = "no_";
    v15 = 3;
  }
  std::string::append(&v115, v14, v15);
LABEL_41:
  std::string::append(&v115, "transpose_available", 0x13uLL);
LABEL_42:
  v16 = *((_QWORD *)a3 + 1);
  v17 = (char *)a3 + 24;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v114, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = *(_OWORD *)v17;
    v114.__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
  }
  v112 = 0;
  v111 = 0;
  v113 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v111, *((const void **)a3 + 11), *((_QWORD *)a3 + 12), (uint64_t)(*((_QWORD *)a3 + 12) - *((_QWORD *)a3 + 11)) >> 3);
  v18 = v112;
  v19 = v111;
  std::to_string(&v102, v16);
  v20 = std::string::insert(&v102, 0, "L", 1uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v106.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v106, ":", 1uLL);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v114;
  else
    v24 = (std::string *)v114.__r_.__value_.__r.__words[0];
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
  else
    size = v114.__r_.__value_.__l.__size_;
  v26 = std::string::append(&__p, (const std::string::value_type *)v24, size);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v110.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v115;
    else
      v28 = (std::string *)v115.__r_.__value_.__r.__words[0];
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
    else
      v29 = v115.__r_.__value_.__l.__size_;
    std::string::append(&v110, (const std::string::value_type *)v28, v29);
  }
  if ((unint64_t)(v112 - (_BYTE *)v111) >= 0x20)
  {
    if (*((char *)a3 + 47) < 0)
      v17 = *(const char **)v17;
    ZinAssertImpl("[MirOpt::CWTranspose] Unsupported PE layer with more than three inputs: %s", v17);
  }
  if (v18 - v19 == 8)
  {
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v30 = v110.__r_.__value_.__l.__size_;
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v30 + 10);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v30)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v110;
      else
        v32 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(p_p, v32, v30);
    }
    strcpy((char *)p_p + v30, ":orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 0, 0, &v106);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v33 = v110.__r_.__value_.__l.__size_;
    v34 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v33 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v33)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v110;
      else
        v35 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, ":orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 0, 1, &v102);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v36 = v110.__r_.__value_.__l.__size_;
    v37 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v36 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v36)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v110;
      else
        v38 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v37, v38, v36);
    }
    strcpy((char *)v37 + v36, ":trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 0, 0, &v98);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v39 = v110.__r_.__value_.__l.__size_;
    v40 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v39 + 12);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v39)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v110;
      else
        v41 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v40, v41, v39);
    }
    strcpy((char *)v40 + v39, ":trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 0, 1, &v94);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&__p, (__int128 *)v106.__r_.__value_.__l.__data_, (__int128 *)v106.__r_.__value_.__l.__size_, (uint64_t)(v106.__r_.__value_.__l.__size_ - v106.__r_.__value_.__r.__words[0]) >> 4);
    v119 = v107;
    v120 = v108;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v121, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v121 = __s;
    v123 = 0;
    v122 = 0;
    v124 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v122, (__int128 *)v102.__r_.__value_.__l.__data_, (__int128 *)v102.__r_.__value_.__l.__size_, (uint64_t)(v102.__r_.__value_.__l.__size_ - v102.__r_.__value_.__r.__words[0]) >> 4);
    v125 = v103;
    v126 = v104;
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v127, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
    else
      v127 = v105;
    v129 = 0;
    v128 = 0;
    v130 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v128, (__int128 *)v98.__r_.__value_.__l.__data_, (__int128 *)v98.__r_.__value_.__l.__size_, (uint64_t)(v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0]) >> 4);
    v131 = v99;
    v132 = v100;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v133, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
    else
      v133 = v101;
    v135 = 0;
    v134 = 0;
    v136 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v134, (__int128 *)v94.__r_.__value_.__l.__data_, (__int128 *)v94.__r_.__value_.__l.__size_, (uint64_t)(v94.__r_.__value_.__l.__size_ - v94.__r_.__value_.__r.__words[0]) >> 4);
    v137 = v95;
    v138 = v96;
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v139, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
    else
      v139 = v97;
    memset(&v86, 0, sizeof(v86));
    v82.__r_.__value_.__s.__data_[8] = 0;
    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x120uLL);
    v86.__r_.__value_.__l.__size_ = v86.__r_.__value_.__r.__words[0];
    v86.__r_.__value_.__r.__words[2] = v86.__r_.__value_.__r.__words[0] + 288;
    v86.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v86.__r_.__value_.__r.__words[2], (uint64_t)&__p, (uint64_t)v140, (uint64_t)v86.__r_.__value_.__l.__data_);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v90, (uint64_t *)&v86, (__int128 *)&v110);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    v66 = 288;
    do
    {
      v67 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v66);
      if (__p.__r_.__value_.__s.__data_[v66 - 1] < 0)
        operator delete(*(v67 - 3));
      v68 = *(v67 - 9);
      if (v68)
      {
        v114.__r_.__value_.__r.__words[v66 / 8] = (std::string::size_type)v68;
        operator delete(v68);
      }
      v66 -= 72;
    }
    while (v66);
    CpTransposeGraph::SetLayerTruthTable(*a2, v16, &v90);
    if (SHIBYTE(v92) < 0)
      operator delete((void *)v91);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v42 = v110.__r_.__value_.__l.__size_;
    v43 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v42 + 15);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v42)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v110;
      else
        v44 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v43, v44, v42);
    }
    strcpy((char *)v43 + v42, ":orig_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 0, 0, &v106);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v45 = v110.__r_.__value_.__l.__size_;
    v46 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v45 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v45)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v110;
      else
        v47 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v46, v47, v45);
    }
    strcpy((char *)v46 + v45, ":orig_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 0, 1, &v102);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v48 = v110.__r_.__value_.__l.__size_;
    v49 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v48 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v48)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v110;
      else
        v50 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v49, v50, v48);
    }
    strcpy((char *)v49 + v48, ":orig_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 1, 0, &v98);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v51 = v110.__r_.__value_.__l.__size_;
    v52 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v51 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v51)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v110;
      else
        v53 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v52, v53, v51);
    }
    strcpy((char *)v52 + v51, ":orig_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 0, 1, 1, &v94);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v54 = v110.__r_.__value_.__l.__size_;
    v55 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v54 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v54)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v110;
      else
        v56 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v55, v56, v54);
    }
    strcpy((char *)v55 + v54, ":trans_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 0, 0, &v90);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v57 = v110.__r_.__value_.__l.__size_;
    v58 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v57 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v57)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &v110;
      else
        v59 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v58, v59, v57);
    }
    strcpy((char *)v58 + v57, ":trans_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 0, 1, &v86);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v60 = v110.__r_.__value_.__l.__size_;
    v61 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v60 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v61 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v60)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v110;
      else
        v62 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v61, v62, v60);
    }
    strcpy((char *)v61 + v60, ":trans_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 1, 0, &v82);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v63 = v110.__r_.__value_.__l.__size_;
    v64 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v63 + 18);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v63)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = &v110;
      else
        v65 = (std::string *)v110.__r_.__value_.__r.__words[0];
      memmove(v64, v65, v63);
    }
    strcpy((char *)v64 + v63, ":trans_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&__p, 1, 1, 1, &v78);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&__p, (__int128 *)v106.__r_.__value_.__l.__data_, (__int128 *)v106.__r_.__value_.__l.__size_, (uint64_t)(v106.__r_.__value_.__l.__size_ - v106.__r_.__value_.__r.__words[0]) >> 4);
    v119 = v107;
    v120 = v108;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v121, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v121 = __s;
    v123 = 0;
    v122 = 0;
    v124 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v122, (__int128 *)v102.__r_.__value_.__l.__data_, (__int128 *)v102.__r_.__value_.__l.__size_, (uint64_t)(v102.__r_.__value_.__l.__size_ - v102.__r_.__value_.__r.__words[0]) >> 4);
    v125 = v103;
    v126 = v104;
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v127, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
    else
      v127 = v105;
    v129 = 0;
    v128 = 0;
    v130 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v128, (__int128 *)v98.__r_.__value_.__l.__data_, (__int128 *)v98.__r_.__value_.__l.__size_, (uint64_t)(v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0]) >> 4);
    v131 = v99;
    v132 = v100;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v133, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
    else
      v133 = v101;
    v135 = 0;
    v134 = 0;
    v136 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v134, (__int128 *)v94.__r_.__value_.__l.__data_, (__int128 *)v94.__r_.__value_.__l.__size_, (uint64_t)(v94.__r_.__value_.__l.__size_ - v94.__r_.__value_.__r.__words[0]) >> 4);
    v137 = v95;
    v138 = v96;
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v139, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
    else
      v139 = v97;
    memset(v140, 0, sizeof(v140));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v140, (__int128 *)v90.__r_.__value_.__l.__data_, (__int128 *)v90.__r_.__value_.__l.__size_, (uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 4);
    v141 = v91;
    v142 = v92;
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v143, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
    else
      v143 = v93;
    memset(v144, 0, sizeof(v144));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v144, (__int128 *)v86.__r_.__value_.__l.__data_, (__int128 *)v86.__r_.__value_.__l.__size_, (uint64_t)(v86.__r_.__value_.__l.__size_ - v86.__r_.__value_.__r.__words[0]) >> 4);
    v145 = v87;
    v146 = v88;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v147, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
    else
      v147 = v89;
    memset(v148, 0, sizeof(v148));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v148, (__int128 *)v82.__r_.__value_.__l.__data_, (__int128 *)v82.__r_.__value_.__l.__size_, (uint64_t)(v82.__r_.__value_.__l.__size_ - v82.__r_.__value_.__r.__words[0]) >> 4);
    v149 = v83;
    v150 = v84;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v151, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
    else
      v151 = v85;
    memset(v152, 0, sizeof(v152));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v152, (__int128 *)v78.__r_.__value_.__l.__data_, (__int128 *)v78.__r_.__value_.__l.__size_, (uint64_t)(v78.__r_.__value_.__l.__size_ - v78.__r_.__value_.__r.__words[0]) >> 4);
    v153 = v79;
    v154 = v80;
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v155, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
    else
      v155 = v81;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v116 = &v72;
    v117 = 0;
    v72 = (char *)operator new(0x240uLL);
    v73 = (uint64_t)v72;
    v74 = v72 + 576;
    v73 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v74, (uint64_t)&__p, (uint64_t)v156, (uint64_t)v72);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v75, (uint64_t *)&v72, (__int128 *)&v110);
    v116 = &v72;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    v69 = 576;
    do
    {
      v70 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v69);
      if (__p.__r_.__value_.__s.__data_[v69 - 1] < 0)
        operator delete(*(v70 - 3));
      v71 = *(v70 - 9);
      if (v71)
      {
        v114.__r_.__value_.__r.__words[v69 / 8] = (std::string::size_type)v71;
        operator delete(v71);
      }
      v69 -= 72;
    }
    while (v69);
    CpTransposeGraph::SetLayerTruthTable(*a2, v16, &v75);
    if (v77 < 0)
      operator delete(v76);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (v78.__r_.__value_.__r.__words[0])
    {
      v78.__r_.__value_.__l.__size_ = v78.__r_.__value_.__r.__words[0];
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (v82.__r_.__value_.__r.__words[0])
    {
      v82.__r_.__value_.__l.__size_ = v82.__r_.__value_.__r.__words[0];
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    if (v86.__r_.__value_.__r.__words[0])
    {
      v86.__r_.__value_.__l.__size_ = v86.__r_.__value_.__r.__words[0];
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if (v90.__r_.__value_.__r.__words[0])
    {
      v90.__r_.__value_.__l.__size_ = v90.__r_.__value_.__r.__words[0];
      operator delete(v90.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (v94.__r_.__value_.__r.__words[0])
  {
    v94.__r_.__value_.__l.__size_ = v94.__r_.__value_.__r.__words[0];
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (v98.__r_.__value_.__r.__words[0])
  {
    v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (v102.__r_.__value_.__r.__words[0])
  {
    v102.__r_.__value_.__l.__size_ = v102.__r_.__value_.__r.__words[0];
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v106.__r_.__value_.__r.__words[0])
  {
    v106.__r_.__value_.__l.__size_ = v106.__r_.__value_.__r.__words[0];
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
}

void sub_206EB065C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void **v65;
  void *v67;
  void *v68;

  v67 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v67;
    operator delete(v67);
  }
  do
  {
    v65 -= 9;
    CpTransposeUtils::LayerConstraint::~LayerConstraint(v65);
  }
  while (v65 != (void **)&STACK[0x310]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a20);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&a29);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a38);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a47);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a56);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a65);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x208]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x250]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  v68 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v68;
    operator delete(v68);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  _Unwind_Resume(a1);
}

void MirOpt::CWTransposeUtil::SetSNELayerTruthTable(uint64_t a1, CpTransposeGraph **a2, uint64_t a3)
{
  unint64_t v6;
  const char *v7;
  _BYTE *v8;
  _BYTE *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string *v55;
  unint64_t v56;
  void **v57;
  void *v58;
  unint64_t v59;
  void **v60;
  void *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  std::string v65;
  void *v66;
  char v67;
  std::string v68;
  __int128 v69;
  uint64_t v70;
  std::string v71;
  std::string v72;
  __int128 v73;
  uint64_t v74;
  std::string v75;
  std::string v76;
  __int128 v77;
  uint64_t v78;
  std::string v79;
  std::string v80;
  __int128 __p;
  uint64_t v82;
  std::string v83;
  std::string v84;
  __int128 v85;
  uint64_t v86;
  std::string v87;
  std::string v88;
  __int128 v89;
  uint64_t v90;
  std::string v91;
  std::string v92;
  __int128 v93;
  uint64_t v94;
  std::string v95;
  std::string v96;
  __int128 v97;
  uint64_t v98;
  std::string __s;
  std::string v100;
  void *v101;
  _BYTE *v102;
  uint64_t v103;
  std::string v104;
  std::string v105;
  char **v106;
  char v107;
  std::string v108;
  __int128 v109;
  uint64_t v110;
  std::string v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  std::string v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  std::string v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  std::string v129;
  _QWORD v130[3];
  __int128 v131;
  uint64_t v132;
  std::string v133;
  _QWORD v134[3];
  __int128 v135;
  uint64_t v136;
  std::string v137;
  _QWORD v138[3];
  __int128 v139;
  uint64_t v140;
  std::string v141;
  _QWORD v142[3];
  __int128 v143;
  uint64_t v144;
  std::string v145;
  _QWORD v146[2];

  v146[1] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v105, &byte_207AF6795);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 704) + 8) + 99) & 0x10) != 0)
    std::string::append(&v105, ":is_sne", 7uLL);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = (const char *)(a3 + 24);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 40);
  }
  v102 = 0;
  v101 = 0;
  v103 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v101, *(const void **)(a3 + 88), *(_QWORD *)(a3 + 96), (uint64_t)(*(_QWORD *)(a3 + 96) - *(_QWORD *)(a3 + 88)) >> 3);
  v8 = v102;
  v9 = v101;
  std::to_string(&v92, v6);
  v10 = std::string::insert(&v92, 0, "L", 1uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v96, ":", 1uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v104;
  else
    v14 = (std::string *)v104.__r_.__value_.__r.__words[0];
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
  else
    size = v104.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v108, (const std::string::value_type *)v14, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v105;
    else
      v18 = (std::string *)v105.__r_.__value_.__r.__words[0];
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    else
      v19 = v105.__r_.__value_.__l.__size_;
    std::string::append(&v100, (const std::string::value_type *)v18, v19);
  }
  if ((unint64_t)(((v8 - v9) >> 3) - 1) >= 2)
  {
    if (*(char *)(a3 + 47) < 0)
      v7 = *(const char **)v7;
    ZinAssertImpl("[MirOpt::CWTranspose] Unsupported SNE layer with number of inputs not 2: %s", v7);
  }
  if (v8 - v9 == 8)
  {
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v20 = v100.__r_.__value_.__l.__size_;
    v21 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v20 + 10);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v20)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v100;
      else
        v22 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v21, v22, v20);
    }
    strcpy((char *)v21 + v20, ":orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 0, 0, 0, &v96);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v23 = v100.__r_.__value_.__l.__size_;
    v24 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v23 + 11);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v23)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v100;
      else
        v25 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v24, v25, v23);
    }
    strcpy((char *)v24 + v23, ":orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 0, 0, 1, &v92);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v26 = v100.__r_.__value_.__l.__size_;
    v27 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v26 + 11);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v26)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v100;
      else
        v28 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v27, v28, v26);
    }
    strcpy((char *)v27 + v26, ":trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 1, 0, 0, &v88);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v29 = v100.__r_.__value_.__l.__size_;
    v30 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v29 + 12);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v29)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v100;
      else
        v31 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v30, v31, v29);
    }
    strcpy((char *)v30 + v29, ":trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 1, 0, 1, &v84);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    memset(&v108, 0, sizeof(v108));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v108, (__int128 *)v96.__r_.__value_.__l.__data_, (__int128 *)v96.__r_.__value_.__l.__size_, (uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 4);
    v109 = v97;
    v110 = v98;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v111, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v111 = __s;
    v113 = 0;
    v112 = 0;
    v114 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v112, (__int128 *)v92.__r_.__value_.__l.__data_, (__int128 *)v92.__r_.__value_.__l.__size_, (uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 4);
    v115 = v93;
    v116 = v94;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v117, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    else
      v117 = v95;
    v119 = 0;
    v118 = 0;
    v120 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v118, (__int128 *)v88.__r_.__value_.__l.__data_, (__int128 *)v88.__r_.__value_.__l.__size_, (uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 4);
    v121 = v89;
    v122 = v90;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v123, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    else
      v123 = v91;
    v125 = 0;
    v124 = 0;
    v126 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v124, (__int128 *)v84.__r_.__value_.__l.__data_, (__int128 *)v84.__r_.__value_.__l.__size_, (uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 4);
    v127 = v85;
    v128 = v86;
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v129, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
    else
      v129 = v87;
    memset(&v76, 0, sizeof(v76));
    v72.__r_.__value_.__s.__data_[8] = 0;
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x120uLL);
    v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
    v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__r.__words[0] + 288;
    v76.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v76.__r_.__value_.__r.__words[2], (uint64_t)&v108, (uint64_t)v130, (uint64_t)v76.__r_.__value_.__l.__data_);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v80, (uint64_t *)&v76, (__int128 *)&v100);
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    v56 = 288;
    do
    {
      v57 = (void **)((char *)&v108.__r_.__value_.__l.__data_ + v56);
      if (v108.__r_.__value_.__s.__data_[v56 - 1] < 0)
        operator delete(*(v57 - 3));
      v58 = *(v57 - 9);
      if (v58)
      {
        v104.__r_.__value_.__r.__words[v56 / 8] = (std::string::size_type)v58;
        operator delete(v58);
      }
      v56 -= 72;
    }
    while (v56);
    CpTransposeGraph::SetLayerTruthTable(*a2, v6, &v80);
    if (SHIBYTE(v82) < 0)
      operator delete((void *)__p);
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  }
  else
  {
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v32 = v100.__r_.__value_.__l.__size_;
    v33 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v32 + 15);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v32)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v100;
      else
        v34 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v33, v34, v32);
    }
    strcpy((char *)v33 + v32, ":orig_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 0, 0, 0, &v96);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v35 = v100.__r_.__value_.__l.__size_;
    v36 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v35 + 16);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v35)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v100;
      else
        v37 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v36, v37, v35);
    }
    strcpy((char *)v36 + v35, ":orig_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 0, 0, 1, &v92);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v38 = v100.__r_.__value_.__l.__size_;
    v39 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v38 + 16);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v39 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v38)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v100;
      else
        v40 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v39, v40, v38);
    }
    strcpy((char *)v39 + v38, ":orig_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 0, 1, 0, &v88);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v41 = v100.__r_.__value_.__l.__size_;
    v42 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v41 + 17);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v42 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v41)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v100;
      else
        v43 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v42, v43, v41);
    }
    strcpy((char *)v42 + v41, ":orig_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 0, 1, 1, &v84);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v44 = v100.__r_.__value_.__l.__size_;
    v45 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v44 + 16);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v45 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v44)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v100;
      else
        v46 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v45, v46, v44);
    }
    strcpy((char *)v45 + v44, ":trans_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 1, 0, 0, &v80);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v47 = v100.__r_.__value_.__l.__size_;
    v48 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v47 + 17);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v48 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v47)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v100;
      else
        v49 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v48, v49, v47);
    }
    strcpy((char *)v48 + v47, ":trans_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 1, 0, 1, &v76);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v50 = v100.__r_.__value_.__l.__size_;
    v51 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v50 + 17);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v51 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v50)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v100;
      else
        v52 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v51, v52, v50);
    }
    strcpy((char *)v51 + v50, ":trans_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 1, 1, 0, &v72);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v53 = v100.__r_.__value_.__l.__size_;
    v54 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v53 + 18);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v54 = (std::string *)v108.__r_.__value_.__r.__words[0];
    if (v53)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v100;
      else
        v55 = (std::string *)v100.__r_.__value_.__r.__words[0];
      memmove(v54, v55, v53);
    }
    strcpy((char *)v54 + v53, ":trans_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (__int128 *)&v108, 1, 1, 1, &v68);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    memset(&v108, 0, sizeof(v108));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v108, (__int128 *)v96.__r_.__value_.__l.__data_, (__int128 *)v96.__r_.__value_.__l.__size_, (uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 4);
    v109 = v97;
    v110 = v98;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v111, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v111 = __s;
    v113 = 0;
    v112 = 0;
    v114 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v112, (__int128 *)v92.__r_.__value_.__l.__data_, (__int128 *)v92.__r_.__value_.__l.__size_, (uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 4);
    v115 = v93;
    v116 = v94;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v117, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    else
      v117 = v95;
    v119 = 0;
    v118 = 0;
    v120 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v118, (__int128 *)v88.__r_.__value_.__l.__data_, (__int128 *)v88.__r_.__value_.__l.__size_, (uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 4);
    v121 = v89;
    v122 = v90;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v123, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    else
      v123 = v91;
    v125 = 0;
    v124 = 0;
    v126 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v124, (__int128 *)v84.__r_.__value_.__l.__data_, (__int128 *)v84.__r_.__value_.__l.__size_, (uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 4);
    v127 = v85;
    v128 = v86;
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v129, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
    else
      v129 = v87;
    memset(v130, 0, sizeof(v130));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v130, (__int128 *)v80.__r_.__value_.__l.__data_, (__int128 *)v80.__r_.__value_.__l.__size_, (uint64_t)(v80.__r_.__value_.__l.__size_ - v80.__r_.__value_.__r.__words[0]) >> 4);
    v131 = __p;
    v132 = v82;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v133, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
    else
      v133 = v83;
    memset(v134, 0, sizeof(v134));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v134, (__int128 *)v76.__r_.__value_.__l.__data_, (__int128 *)v76.__r_.__value_.__l.__size_, (uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 4);
    v135 = v77;
    v136 = v78;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v137, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    else
      v137 = v79;
    memset(v138, 0, sizeof(v138));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v138, (__int128 *)v72.__r_.__value_.__l.__data_, (__int128 *)v72.__r_.__value_.__l.__size_, (uint64_t)(v72.__r_.__value_.__l.__size_ - v72.__r_.__value_.__r.__words[0]) >> 4);
    v139 = v73;
    v140 = v74;
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v141, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
    else
      v141 = v75;
    memset(v142, 0, sizeof(v142));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v142, (__int128 *)v68.__r_.__value_.__l.__data_, (__int128 *)v68.__r_.__value_.__l.__size_, (uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 4);
    v143 = v69;
    v144 = v70;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v145, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    else
      v145 = v71;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v106 = &v62;
    v107 = 0;
    v62 = (char *)operator new(0x240uLL);
    v63 = (uint64_t)v62;
    v64 = v62 + 576;
    v63 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v64, (uint64_t)&v108, (uint64_t)v146, (uint64_t)v62);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v65, (uint64_t *)&v62, (__int128 *)&v100);
    v106 = &v62;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    v59 = 576;
    do
    {
      v60 = (void **)((char *)&v108.__r_.__value_.__l.__data_ + v59);
      if (v108.__r_.__value_.__s.__data_[v59 - 1] < 0)
        operator delete(*(v60 - 3));
      v61 = *(v60 - 9);
      if (v61)
      {
        v104.__r_.__value_.__r.__words[v59 / 8] = (std::string::size_type)v61;
        operator delete(v61);
      }
      v59 -= 72;
    }
    while (v59);
    CpTransposeGraph::SetLayerTruthTable(*a2, v6, &v65);
    if (v67 < 0)
      operator delete(v66);
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (v68.__r_.__value_.__r.__words[0])
    {
      v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (v72.__r_.__value_.__r.__words[0])
    {
      v72.__r_.__value_.__l.__size_ = v72.__r_.__value_.__r.__words[0];
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (v76.__r_.__value_.__r.__words[0])
    {
      v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (v80.__r_.__value_.__r.__words[0])
    {
      v80.__r_.__value_.__l.__size_ = v80.__r_.__value_.__r.__words[0];
      operator delete(v80.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (v84.__r_.__value_.__r.__words[0])
  {
    v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (v88.__r_.__value_.__r.__words[0])
  {
    v88.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (v92.__r_.__value_.__r.__words[0])
  {
    v92.__r_.__value_.__l.__size_ = v92.__r_.__value_.__r.__words[0];
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v96.__r_.__value_.__r.__words[0])
  {
    v96.__r_.__value_.__l.__size_ = v96.__r_.__value_.__r.__words[0];
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
}

void sub_206EB1C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void **v65;
  void *v67;
  void *v68;

  v67 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v67;
    operator delete(v67);
  }
  do
  {
    v65 -= 9;
    CpTransposeUtils::LayerConstraint::~LayerConstraint(v65);
  }
  while (v65 != (void **)&STACK[0x310]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a20);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&a29);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a38);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a47);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a56);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a65);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x208]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x250]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  v68 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v68;
    operator delete(v68);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  _Unwind_Resume(a1);
}

uint64_t MirOpt::CWTransposeUtil::UpdateTransposeFeasibility(uint64_t a1, CpTransposeGraph **a2, uint64_t a3)
{
  uint64_t **LayerTruthTable;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  CpTransposeGraph *v15;
  std::string *v16;
  __int128 v17;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;
  __int128 v22;
  __int128 v23;
  int v24;

  LayerTruthTable = (uint64_t **)CpTransposeGraph::GetLayerTruthTable(*a2, *(_QWORD *)(a3 + 8));
  v22 = 0u;
  v23 = 0u;
  v24 = 1065353216;
  v6 = *LayerTruthTable;
  v7 = LayerTruthTable[1];
  if (*LayerTruthTable != v7)
  {
    do
    {
      if (*((unsigned __int8 *)v6 + 24) | *((unsigned __int8 *)v6 + 25))
        v8 = v6[4] == -1;
      else
        v8 = 1;
      if (!v8 && v6[5] != -1)
      {
        v10 = *v6;
        v11 = v6[1];
        while (v10 != v11)
        {
          v19.__r_.__value_.__r.__words[0] = 0;
          v19.__r_.__value_.__r.__words[0] = *(_QWORD *)v10;
          __p[0] = &v19;
          v12 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)&v22, (unint64_t *)&v19, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)+ 3;
          LOBYTE(__p[0]) = *(_DWORD *)(v10 + 8) == 1;
          std::__hash_table<BOOL,std::hash<BOOL>,std::equal_to<BOOL>,std::allocator<BOOL>>::__emplace_unique_key_args<BOOL,BOOL>((uint64_t)v12, (unsigned __int8 *)__p, __p);
          v10 += 16;
        }
      }
      v6 += 9;
    }
    while (v6 != v7);
    for (i = (_QWORD *)v23; i; i = (_QWORD *)*i)
    {
      if (i[6] == 1)
      {
        v14 = i[2];
        v15 = *a2;
        std::to_string(&v19, *(_QWORD *)(a3 + 8));
        v16 = std::string::insert(&v19, 0, "presolved_with_L", 0x10uLL);
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v21 = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        CpTransposeGraph::DisqualifyTranspose((uint64_t)v15, v14);
        if (SHIBYTE(v21) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)&v22);
}

void sub_206EB2220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t MirOpt::CWTransposeUtil::IsCompatibleWithTransposedDomain(uint64_t a1, ZinIrOpLayer *a2, int a3, int a4, int a5)
{
  char v10;
  uint64_t v11;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  BOOL v17[2];
  void *__p[3];
  ZinIrOpLayer *v19;

  v19 = a2;
  MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)__p);
  v10 = (*(uint64_t (**)(ZinIrOpLayer *, void **))(*(_QWORD *)a2 + 424))(a2, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v10 & 1) == 0 || *((_QWORD *)a2 + 33))
    return 0;
  if (ZinIrOpLayer::IsNELayer(a2))
  {
    v13 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((_QWORD *)(a1 + 576), &v19);
    if (!v13)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return *((_BYTE *)v13 + 26) != 0;
  }
  else
  {
    if (!ZinIrOpLayer::IsPELayer(a2))
      return 0;
    LOBYTE(__p[0]) = 0;
    *(_WORD *)v17 = 0;
    MirOpt::GetPELayerTransposeAvailability(a2, (const ZinPELayer *)__p, &v17[1], v17, (BOOL *)1);
    v14 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a2 + 640))(a2);
    v15 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a2 + 648))(a2);
    v16 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a2 + 408))(a2);
    if ((a3 != 1) == v14 || (v11 = 0, LOBYTE(__p[0])))
    {
      if (*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11) < 9uLL || (((a4 == 1) ^ v15) & 1) != 0 || (v11 = v17[1]) != 0)
      {
        LODWORD(v11) = (a5 == 1) ^ v16;
        if (v17[0])
          return 1;
        else
          return v11;
      }
    }
  }
  return v11;
}

void sub_206EB23F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::GetPELayerTransposeAvailability(MirOpt *this, const ZinPELayer *a2, BOOL *a3, BOOL *a4, BOOL *a5)
{
  int v5;
  unint64_t v10;
  int v11;
  _QWORD *TensorFromLayerAndUsage;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  BOOL v35;
  _BYTE *v36;
  _BYTE *v37;

  v5 = (int)a5;
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)this + 512))(&v36);
  v10 = v37 - v36;
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v11 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  TensorFromLayerAndUsage = (_QWORD *)GetTensorFromLayerAndUsage((uint64_t)this, 0);
  v13 = TensorFromLayerAndUsage[8];
  if (v5)
    v14 = TensorFromLayerAndUsage[9];
  else
    v14 = TensorFromLayerAndUsage[7];
  if (v5)
    v15 = TensorFromLayerAndUsage[7];
  else
    v15 = TensorFromLayerAndUsage[9];
  if ((*(unsigned int (**)(MirOpt *))(*(_QWORD *)this + 640))(this))
    v16 = v14;
  else
    v16 = v15;
  v18 = v13 == 1 && v16 == 1;
  *(_BYTE *)a2 = v18;
  if (v10 >= 9)
  {
    v19 = (_QWORD *)GetTensorFromLayerAndUsage((uint64_t)this, 1);
    v20 = v19[8];
    if (v5)
      v21 = v19[9];
    else
      v21 = v19[7];
    if (v5)
      v22 = v19[7];
    else
      v22 = v19[9];
    if ((*(unsigned int (**)(MirOpt *))(*(_QWORD *)this + 648))(this))
      v23 = v21;
    else
      v23 = v22;
    if (v11 == 84)
      v24 = 2;
    else
      v24 = 1;
    v26 = v20 == v24 && v23 == 1;
    *a3 = v26;
  }
  v27 = (_QWORD *)GetTensorFromLayerAndUsage((uint64_t)this, 3);
  v28 = v27[8];
  v29 = v5 == 0;
  if (v5)
    v30 = v27[7];
  else
    v30 = v27[9];
  if (v29)
    v31 = v27[7];
  else
    v31 = v27[9];
  result = (*(uint64_t (**)(MirOpt *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    v33 = v31;
  else
    v33 = v30;
  v35 = v28 == 1 && v33 == 1;
  *a4 = v35;
  if (v11 == 83)
  {
    *(_BYTE *)a2 = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t MirOpt::CWTransposeUtil::IsBetterWithTransposedDomain(uint64_t a1, ZinIrOpLayer *this, int a3, int a4, int a5)
{
  uint64_t result;
  _QWORD v11[5];

  if (ZinIrOpLayer::IsNELayer(this))
    return MirOpt::CWTransposeUtil::IsCompatibleWithTransposedDomain(a1, this, a3, a4, a5);
  result = ZinIrOpLayer::IsPELayer(this);
  if ((_DWORD)result)
  {
    result = MirOpt::CWTransposeUtil::IsCompatibleWithTransposedDomain(a1, this, a3, a4, a5);
    if ((_DWORD)result)
    {
      (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *))(*(_QWORD *)this + 376))(v11, this);
      return v11[1] > v11[3];
    }
  }
  return result;
}

void CpTransposeUtils::LayerConstraint::~LayerConstraint(void **this)
{
  void *v2;

  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void CpTransposeUtils::LayerTruthTable::~LayerTruthTable(void **this)
{
  void **v2;

  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this;
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void MirOpt::CWTransposeUtil::~CWTransposeUtil(MirOpt::CWTransposeUtil *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v2)
    std::default_delete<ZinTensorFamilyUtil>::operator()[abi:ne180100]((uint64_t)this + 688, v2);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 664, *((_QWORD **)this + 84));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 640, *((_QWORD **)this + 81));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 616, *((_QWORD **)this + 78));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 576);
  v3 = MEMORY[0x24BEDB7E8];
  v4 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)this = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  MEMORY[0x20BCFFEB4]((char *)this + 8);
  std::ostream::~ostream();
  MEMORY[0x20BD0022C]((char *)this + 416);
}

BOOL MirOpt::CollectLayersNeededForAnalysis(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  result = MirOpt::CollectLayersNeededForAnalysis(ZinIrOpLayer const*,std::set<ZinIrOpLayer*,ZinIrIdComparator<ZinIrOpLayer*>,std::allocator<ZinIrOpLayer*>> &)::$_0::operator()(a1, a2);
  v6 = *(uint64_t **)(a1 + 88);
  v5 = *(uint64_t **)(a1 + 96);
  while (v6 != v5)
  {
    v7 = *v6++;
    result = MirOpt::CollectLayersNeededForAnalysis(ZinIrOpLayer const*,std::set<ZinIrOpLayer*,ZinIrIdComparator<ZinIrOpLayer*>,std::allocator<ZinIrOpLayer*>> &)::$_0::operator()(v7, a2);
  }
  return result;
}

BOOL MirOpt::CollectLayersNeededForAnalysis(ZinIrOpLayer const*,std::set<ZinIrOpLayer*,ZinIrIdComparator<ZinIrOpLayer*>,std::allocator<ZinIrOpLayer*>> &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  ZinIrTensor *v3;
  _BOOL8 result;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  ZinIrTensor *v11;
  std::__shared_weak_count *v12;

  v3 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  v11 = (ZinIrTensor *)*((_QWORD *)v3 + 12);
  std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)a2, (uint64_t *)&v11, (uint64_t *)&v11);
  for (result = ZinIrTensor::HasParent(v3); result; result = ZinIrTensor::HasParent(v3))
  {
    v5 = (_QWORD *)*((_QWORD *)v3 + 12);
    if (*(_DWORD *)(v5[8] + 8) == 75)
    {
      v6 = (uint64_t *)v5[11];
      v7 = (uint64_t *)v5[12];
      while (v6 != v7)
      {
        std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__emplace_hint_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)a2, (_QWORD *)(a2 + 8), v6, v6);
        ++v6;
      }
    }
    ZinIrTensor::GetParentTensor(v3, &v11);
    v3 = v11;
    v8 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (ZinIrTensor *)*((_QWORD *)v3 + 12);
    std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)a2, (uint64_t *)&v11, (uint64_t *)&v11);
  }
  return result;
}

std::string *CpTransposeUtils::LayerConstraint::LayerConstraint(std::string *a1, __int128 **a2, std::string::value_type a3, std::string::value_type a4, std::string::value_type a5, std::string::size_type a6, std::string::size_type a7, __int128 *a8)
{
  std::string *v15;
  __int128 v16;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)a1, *a2, a2[1], a2[1] - *a2);
  a1[1].__r_.__value_.__s.__data_[0] = a3;
  a1[1].__r_.__value_.__s.__data_[1] = a4;
  a1[1].__r_.__value_.__s.__data_[2] = a5;
  a1[1].__r_.__value_.__l.__size_ = a6;
  a1[1].__r_.__value_.__r.__words[2] = a7;
  v15 = a1 + 2;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v16 = *a8;
    a1[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a8 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  return a1;
}

void sub_206EB2978(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,CpTransposeUtils::LayerConstraint const&,CpTransposeUtils::LayerConstraint*>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206EB29F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 72;
    do
    {
      std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,CpTransposeUtils::LayerConstraint const&,CpTransposeUtils::LayerConstraint*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_206EB2A90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *CpTransposeUtils::LayerTruthTable::LayerTruthTable(std::string *a1, uint64_t *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<CpTransposeUtils::LayerConstraint>::__init_with_size[abi:ne180100]<CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(a1, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  v5 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    a1[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_206EB2BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CpTransposeUtils::LayerConstraint>::__init_with_size[abi:ne180100]<CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ANEDebugInfo::DebugInfoInMem::TD>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206EB2C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,CpTransposeUtils::LayerConstraint&,CpTransposeUtils::LayerConstraint*>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206EB2CDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 72;
    do
    {
      std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,CpTransposeUtils::LayerConstraint&,CpTransposeUtils::LayerConstraint*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_206EB2D7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_QWORD *)v13 + 2) == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x90uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = **a4;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *((_QWORD *)v13 + 17) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_206EB2FFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<LayerAndUsageInfo>::set[abi:ne180100]<std::__wrap_iter<LayerAndUsageInfo const*>>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t *v4;
  _DWORD *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<LayerAndUsageInfo>::__emplace_hint_unique_key_args<LayerAndUsageInfo,LayerAndUsageInfo const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_206EB3078(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<LayerAndUsageInfo>::__emplace_hint_unique_key_args<LayerAndUsageInfo,LayerAndUsageInfo const&>(uint64_t **a1, uint64_t *a2, _DWORD *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<LayerAndUsageInfo>::__find_equal<LayerAndUsageInfo>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<LayerAndUsageInfo>::__find_equal<LayerAndUsageInfo>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || LayerAndUsageInfo::operator<(a5, (_DWORD *)a2 + 8))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (uint64_t *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (LayerAndUsageInfo::operator<((_DWORD *)v12 + 8, a5))
      goto LABEL_16;
    return std::__tree<LayerAndUsageInfo>::__find_equal<LayerAndUsageInfo>((uint64_t)a1, a3, a5);
  }
  if (LayerAndUsageInfo::operator<((_DWORD *)a2 + 8, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (uint64_t *)a2[1];
      do
      {
        v15 = v14;
        v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (uint64_t *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!LayerAndUsageInfo::operator<(a5, (_DWORD *)v15 + 8))
        return std::__tree<LayerAndUsageInfo>::__find_equal<LayerAndUsageInfo>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *std::__tree<LayerAndUsageInfo>::__find_equal<LayerAndUsageInfo>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  _DWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (_DWORD *)(v4 + 32);
        if (!LayerAndUsageInfo::operator<(a3, (_DWORD *)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!LayerAndUsageInfo::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

CpTransposeGraph *std::unique_ptr<CpTransposeGraph>::reset[abi:ne180100](CpTransposeGraph **a1, CpTransposeGraph *a2)
{
  CpTransposeGraph *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CpTransposeGraph::~CpTransposeGraph(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

void std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C001E90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C001E90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer *v3;
  ZinTensorFamilyUtil **v4;
  ZinTensorFamilyUtil *v6;
  const ZinIrTensor *v7;
  const ZinIrTensor *RootTensor;
  _BYTE v9[384];

  v3 = *a3;
  v4 = *(ZinTensorFamilyUtil ***)(a1 + 8);
  if (ZinIrOpLayer::IsANELayer(*a3))
  {
    if (MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose(v4, v3))
    {
      v9[0] = 0;
      v9[376] = 0;
      if (!MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayer(v4, v3, (uint64_t)v9))
        return 3;
    }
  }
  else
  {
    v6 = v4[86];
    v7 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0);
    RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v6, v7);
    if (MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)v4, RootTensor))
    {
      MirOpt::CWTransposeUtil::ApplyCWTransposeToNonEngineLayer((MirOpt::CWTransposeUtil *)v4, v3);
    }
  }
  return 0;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C001EE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C001EE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t Hal;
  uint64_t v11;
  int v12;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int *v21;
  ZinEngineLayerMirInfo *v22;
  ZinEngineLayerMirInfo *v23;
  _BYTE *v24;
  BOOL v26;
  BOOL v27;
  char v28;
  ZinIrOpLayer *v29;
  ZinEngineLayerMirInfo *v30;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  if (ZinIrOpLayer::IsANELayer(*a3))
  {
    v29 = v3;
    v5 = (uint64_t)(*((_QWORD *)v3 + 12) - *((_QWORD *)v3 + 11)) >> 3;
    v6 = v5 - (*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v3 + 496))(v3);
    v7 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v3 + 120))(v3);
    v28 = 1;
    v8 = v6 - (unint64_t)v7 > 1;
    v27 = v8;
    v26 = 1;
    if (ZinIrOpLayer::IsNELayer(v3))
    {
      v9 = *((_QWORD *)v3 + 2);
      Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v9 + 160));
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
      if (*((_QWORD *)v3 + 33))
      {
        v14 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v3 + 344))(v3) != 0x100000001 || v12 != 1;
        v15 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0) + 48;
        v16 = *(unsigned int *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0, 0)+ 88);
        v17 = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)v3 + 2) + 160));
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v19 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t, uint64_t, uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v3 + 600))(v3, v15, v16, (uint64_t)v3 + 264, v18, v14);
      }
      else
      {
        v21 = (int *)v11;
        v22 = (ZinEngineLayerMirInfo *)operator new();
        ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v22, v21[2]);
        v30 = v22;
        ZinNELayer::FindValidMirInfoForOutputTranspose(v3, v21, v9 + 176, &v30);
        v23 = v30;
        v19 = v30 != 0;
        v30 = 0;
        if (v23)
        {
          ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v23);
          MEMORY[0x20BD002F8]();
        }
      }
      v20 = 1;
    }
    else
    {
      MirOpt::GetPELayerTransposeAvailability(v3, (const ZinPELayer *)&v28, &v27, &v26, 0);
      v20 = v28;
      v8 = v27;
      v19 = v26;
    }
    v30 = (ZinEngineLayerMirInfo *)&v29;
    v24 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const* const&>,std::tuple<>>(v4 + 576, &v29, (uint64_t)&std::piecewise_construct, (_QWORD **)&v30);
    v24[24] = v20;
    v24[25] = v8;
    v24[26] = v19;
  }
  return 0;
}

void sub_206EB3768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, ZinEngineLayerMirInfo *a12)
{
  if (a12)
    std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(a12);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const* const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_WORD *)v13 + 12) = 0;
  *((_BYTE *)v13 + 26) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_206EB3A34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C05A658;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C05A658;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  ZinTensorFamilyUtil *v8;
  const ZinIrTensor *v9;
  uint64_t RootTensor;
  unint64_t v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  uint64_t v17;
  const std::string::value_type *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  ZinTensorFamilyUtil *v37;
  const ZinIrTensor *v38;
  const ZinIrTensor *v39;
  unint64_t v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  const std::string::value_type *v45;
  char *v46;
  const std::string::value_type *v47;
  int v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  unint64_t v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  const std::string::value_type *v60;
  const std::string::value_type *v61;
  int v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  int v67;
  ZinTensorFamilyUtil *v68;
  const ZinIrTensor *v69;
  uint64_t v70;
  ZinTensorFamilyUtil *v71;
  const ZinIrTensor *v72;
  uint64_t v73;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string __p;
  uint64_t v80;
  std::string *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t *v85;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  if (ZinIrOpLayer::IsEngineLayer(*a3))
  {
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v6 = (_QWORD *)*((_QWORD *)v4 + 11);
    for (i = (_QWORD *)*((_QWORD *)v4 + 12); v6 != i; ++v6)
    {
      v8 = *(ZinTensorFamilyUtil **)(v5 + 688);
      v9 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v6 + 32))(*v6, 0, 0);
      RootTensor = ZinTensorFamilyUtil::GetRootTensor(v8, v9);
      v11 = *(_QWORD *)(RootTensor + 8);
      std::to_string(&v76, v11);
      v12 = std::string::insert(&v76, 0, "T", 1uLL);
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = std::string::append(&v77, ":", 1uLL);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v18 = *(const std::string::value_type **)(RootTensor + 24);
      v17 = RootTensor + 24;
      v16 = v18;
      v19 = *(char *)(v17 + 23);
      if (v19 >= 0)
        v20 = (const std::string::value_type *)v17;
      else
        v20 = v16;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(v17 + 23);
      else
        v21 = *(_QWORD *)(v17 + 8);
      v22 = std::string::append(&v78, v20, v21);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      v24 = v84;
      if (v84 >= v85)
      {
        v26 = v83;
        v27 = v84 - v83;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v29 = (char *)v85 - (char *)v83;
        if (((char *)v85 - (char *)v83) >> 2 > v28)
          v28 = v29 >> 2;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v85, v30);
          v26 = v83;
          v24 = v84;
        }
        else
        {
          v31 = 0;
        }
        v32 = (unint64_t *)&v31[8 * v27];
        *v32 = v11;
        v25 = v32 + 1;
        while (v24 != v26)
        {
          v33 = *--v24;
          *--v32 = v33;
        }
        v83 = v32;
        v84 = v25;
        v85 = (unint64_t *)&v31[8 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v84 = v11;
        v25 = v24 + 1;
      }
      v84 = v25;
      v34 = v81;
      if ((unint64_t)v81 >= v82)
      {
        v36 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v80, (uint64_t)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v81, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v81->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
        }
        v36 = v34 + 1;
      }
      v81 = v36;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v37 = *(ZinTensorFamilyUtil **)(v5 + 688);
    v38 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
    v39 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v37, v38);
    v40 = *((_QWORD *)v4 + 1);
    std::to_string(&v76, v40);
    v41 = std::string::insert(&v76, 0, "L", 1uLL);
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append(&v77, ":", 1uLL);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v47 = (const std::string::value_type *)*((_QWORD *)v4 + 3);
    v46 = (char *)v4 + 24;
    v45 = v47;
    v48 = v46[23];
    if (v48 >= 0)
      v49 = v46;
    else
      v49 = v45;
    if (v48 >= 0)
      v50 = v46[23];
    else
      v50 = *((_QWORD *)v46 + 1);
    v51 = std::string::append(&v78, v49, v50);
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    v53 = *(_QWORD *)(ZinTensorFamilyUtil::GetRootTensor(*(ZinTensorFamilyUtil **)(v5 + 688), v39) + 8);
    std::to_string(&v75, v53);
    v54 = std::string::insert(&v75, 0, "T", 1uLL);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&v76, ":", 1uLL);
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    v58 = ZinTensorFamilyUtil::GetRootTensor(*(ZinTensorFamilyUtil **)(v5 + 688), v39);
    v61 = *(const std::string::value_type **)(v58 + 24);
    v59 = v58 + 24;
    v60 = v61;
    v62 = *(char *)(v59 + 23);
    if (v62 >= 0)
      v63 = (const std::string::value_type *)v59;
    else
      v63 = v60;
    if (v62 >= 0)
      v64 = *(unsigned __int8 *)(v59 + 23);
    else
      v64 = *(_QWORD *)(v59 + 8);
    v65 = std::string::append(&v77, v63, v64);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    CpGraph::AddLayer(**(_QWORD **)(a1 + 16), v40, &__p, (uint64_t *)&v83, &v80, v53, &v78);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v83)
    {
      v84 = v83;
      operator delete(v83);
    }
  }
  else
  {
    v67 = *(_DWORD *)(*((_QWORD *)v4 + 8) + 8);
    if (v67 == 31)
    {
      v71 = *(ZinTensorFamilyUtil **)(v5 + 688);
      v72 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
      v73 = ZinTensorFamilyUtil::GetRootTensor(v71, v72);
      CpTransposeGraph::SetLiveOutTensor(**(CpTransposeGraph ***)(a1 + 16), *(_QWORD *)(v73 + 8));
    }
    else if (v67 == 28)
    {
      v68 = *(ZinTensorFamilyUtil **)(v5 + 688);
      v69 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
      v70 = ZinTensorFamilyUtil::GetRootTensor(v68, v69);
      CpTransposeGraph::SetLiveInTensor(**(CpTransposeGraph ***)(a1 + 16), *(_QWORD *)(v70 + 8));
    }
  }
  return 0;
}

void sub_206EB404C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v44;

  if (a35 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  a37 = (void *)(v42 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  v44 = *(void **)(v42 - 112);
  if (v44)
  {
    *(_QWORD *)(v42 - 104) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C05A6B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C05A6B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer *v4;
  uint64_t v5;

  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  if (ZinIrOpLayer::IsEngineLayer(*a3))
    MirOpt::CWTransposeUtil::CheckTransposableAndSetLayerTruthTable(v5, *(CpTransposeGraph ***)(a1 + 16), v4);
  return 0;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFF52C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFF52C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinIrOpLayer *v4;
  uint64_t IsEngineLayer;

  v4 = *a3;
  IsEngineLayer = ZinIrOpLayer::IsEngineLayer(*a3);
  if ((_DWORD)IsEngineLayer)
    MirOpt::CWTransposeUtil::UpdateTransposeFeasibility(IsEngineLayer, *(CpTransposeGraph ***)(a1 + 16), (uint64_t)v4);
  return 0;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

_QWORD *std::__hash_table<BOOL,std::hash<BOOL>,std::equal_to<BOOL>,std::allocator<BOOL>>::__emplace_unique_key_args<BOOL,BOOL>(uint64_t a1, unsigned __int8 *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v7 <= v6 ? *(_QWORD *)(a1 + 8) : 0;
    v10 = v6 - v9;
    v3 = v8.u32[0] <= 1uLL ? ((_DWORD)v7 + 1) & v6 : v10;
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v6)
          {
            if (*((unsigned __int8 *)v12 + 16) == (_DWORD)v6)
              return v12;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v13 >= v7)
                v13 %= v7;
            }
            else
            {
              v13 &= v7 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_BYTE *)v12 + 16) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 + 1) & v6;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *v12 = *v21;
LABEL_39:
    *v21 = v12;
    goto LABEL_40;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7)
        v22 %= v7;
    }
    else
    {
      v22 &= v7 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_206EB459C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 8u);
}

void MirOpt::ReassignTensorDimension::OptimizePatchHeightForOutputReductionForPEEW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: OptimizePatchHeightForOutputReduction\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void MirOpt::ReassignTensorDimension::Execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error during global optimization", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void MirOpt::CWTransposeUtil::RunGlobalOptimizationForCWTranspose(uint8_t *a1, int a2, _DWORD *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a3 = a2;
  OUTLINED_FUNCTION_2_10(&dword_2069AB000, MEMORY[0x24BDACB70], (uint64_t)a3, "Global optimization region %d is trivial", a1);
}

{
  *(_DWORD *)a1 = 67109120;
  *a3 = a2;
  OUTLINED_FUNCTION_2_10(&dword_2069AB000, MEMORY[0x24BDACB70], (uint64_t)a3, "Global optimization region %d uses solver", a1);
}

void MirOpt::CWTransposeUtil::CreateCpTransposeGraphDotFile(char *a1, uint8_t *buf, uint64_t a3)
{
  char *v5;

  if (a1[23] >= 0)
    v5 = a1;
  else
    v5 = *(char **)a1;
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)(buf + 4) = v5;
  _os_log_debug_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  if (a1[23] < 0)
    operator delete(*(void **)a1);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
}

void MirOpt::CWTransposeUtil::UpdateResultWithTrivialSolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error during trivial solution solver", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinViewLayerUtils::GetOffsetRemainderForViewAlongWidth(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t *v7;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 92) != 4)
    return 0;
  v9 = 0;
  ZinTensorFormatGetSize(a2, &v9);
  if (*a4 == 1)
    v7 = (uint64_t *)(a3 + 416);
  else
    v7 = (uint64_t *)(a3 + 528);
  return *(int *)(a1 + 80) % (uint64_t)vcvtps_s32_f32((float)*v7 / (float)v9);
}

void ZinViewLayerUtils::CreateTransposeViewTransposeDecomposition(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  unint64_t v5;
  ZinViewLayerUtils::ViewDecomposedDesc *v6;
  ZinViewLayerUtils::ViewDecomposedDesc *v7;
  uint64_t v8;
  void (**v9)(ZinIrUnitInfo *__hidden);
  std::string v10;
  int v11;
  std::string v12;
  __int128 v13;
  __int128 v14;
  void *v15[10];
  void *__p;
  void *v17;
  _BYTE v18[344];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 92) == 4)
  {
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v15, 4u, 2u, *(_DWORD *)(a1 + 68));
    ZinFlattenLayerUtils::FlattenDecomposedDesc::FlattenDecomposedDesc((ZinFlattenLayerUtils::FlattenDecomposedDesc *)v18, (ZinIrTransposeUnitInfo *)v15);
    v15[0] = off_24C021A98;
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(v15);
    v9 = off_24C017CA0;
    if (*(char *)(a1 + 31) < 0)
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    else
      v10 = *(std::string *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 32);
    memset(&v12, 0, sizeof(v12));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *(__int128 **)(a1 + 40), *(__int128 **)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3));
    v9 = off_24C021970;
    v4 = *(_OWORD *)(a1 + 80);
    v13 = *(_OWORD *)(a1 + 64);
    v14 = v4;
    HIDWORD(v14) = 2;
    ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v15, (ZinIrInputViewUnitInfo *)&v9);
    v5 = a2[1];
    if (v5 >= a2[2])
    {
      v6 = (ZinViewLayerUtils::ViewDecomposedDesc *)std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(a2, (const ZinViewLayerUtils::ViewDecomposedDesc *)v18);
    }
    else
    {
      ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)a2[1], (const ZinViewLayerUtils::ViewDecomposedDesc *)v18);
      v6 = (ZinViewLayerUtils::ViewDecomposedDesc *)(v5 + 344);
      a2[1] = (uint64_t)v6;
    }
    a2[1] = (uint64_t)v6;
    if ((unint64_t)v6 >= a2[2])
    {
      v7 = (ZinViewLayerUtils::ViewDecomposedDesc *)std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(a2, (const ZinViewLayerUtils::ViewDecomposedDesc *)v15);
    }
    else
    {
      ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(v6, (const ZinViewLayerUtils::ViewDecomposedDesc *)v15);
      v7 = (ZinViewLayerUtils::ViewDecomposedDesc *)((char *)v6 + 344);
      a2[1] = (uint64_t)v7;
    }
    a2[1] = (uint64_t)v7;
    if ((unint64_t)v7 >= a2[2])
    {
      v8 = std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(a2, (const ZinViewLayerUtils::ViewDecomposedDesc *)v18);
    }
    else
    {
      ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(v7, (const ZinViewLayerUtils::ViewDecomposedDesc *)v18);
      v8 = (uint64_t)v7 + 344;
      a2[1] = (uint64_t)v7 + 344;
    }
    a2[1] = v8;
    ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)v15);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v9);
    ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)v18);
  }
}

void sub_206EB4A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)&a65);
  _Unwind_Resume(a1);
}

uint64_t ZinViewLayerUtils::CreateViewDecomposition(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7)
{
  int64_t OffsetRemainderForViewAlongWidth;
  _BOOL8 v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21[4];
  int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  _DWORD v38[86];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v36 = a7;
  v37 = a2;
  std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__assign_with_size[abi:ne180100]<ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*>(a6, 0, 0, 0);
  if (*(_DWORD *)(a1 + 92) != 4)
    return 1;
  OffsetRemainderForViewAlongWidth = ZinViewLayerUtils::GetOffsetRemainderForViewAlongWidth(a1, a2, *a5, &v36);
  if (ZinViewLayerUtils::DecomposeWidthViewFromOffsetRemainder(OffsetRemainderForViewAlongWidth, a5, &v37, a1, (uint64_t)a3, (uint64_t *)a6))
  {
    return 1;
  }
  v15 = a3[4] * *a3 * a3[1] * a3[2];
  v16 = ZinAlign(a3[3], *(_QWORD *)(*a5 + 416));
  v17 = *a5;
  if (v15 * v16 > *(_QWORD *)(*a5 + 408))
    return 0;
  v38[0] = 1;
  v18 = ZinViewLayerUtils::GetOffsetRemainderForViewAlongWidth(a1, a2, v17, v38);
  v22 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = -1;
  v21[0] = &unk_24C01BA60;
  memset(&v21[1], 0, 24);
  v26 = 0;
  v27 = 1065353216;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = -1;
  v32 = -1;
  v33 = 0;
  v34 = -1;
  v35 = -1;
  ZinElementWiseLayerUtils::ElementWiseDecomposedDesc::ElementWiseDecomposedDesc((ZinElementWiseLayerUtils::ElementWiseDecomposedDesc *)v38, (ZinIrGOCUnitInfo *)v21);
  v19 = *(_QWORD *)(a6 + 8);
  if (v19 >= *(_QWORD *)(a6 + 16))
  {
    v20 = std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>((uint64_t *)a6, (const ZinViewLayerUtils::ViewDecomposedDesc *)v38);
  }
  else
  {
    ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(*(ZinViewLayerUtils::ViewDecomposedDesc **)(a6 + 8), (const ZinViewLayerUtils::ViewDecomposedDesc *)v38);
    v20 = v19 + 344;
    *(_QWORD *)(a6 + 8) = v19 + 344;
  }
  *(_QWORD *)(a6 + 8) = v20;
  ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)v38);
  v13 = ZinViewLayerUtils::DecomposeWidthViewFromOffsetRemainder(v18, a5, &v37, a1, (uint64_t)a3, (uint64_t *)a6);
  ZinIrUnitInfo::~ZinIrUnitInfo(v21);
  return v13;
}

void sub_206EB4C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)&a29);
  ZinIrUnitInfo::~ZinIrUnitInfo(&a9);
  _Unwind_Resume(a1);
}

BOOL ZinViewLayerUtils::DecomposeWidthViewFromOffsetRemainder(int64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9;
  int64_t MaxLogicalKernelWidthForLargeKernelMode;
  int v14;
  BOOL v15;
  BOOL v16;
  int v18;
  _BOOL8 result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  unint64_t v27;
  ZinViewLayerUtils::ViewDecomposedDesc *v28;
  uint64_t v29;
  void *v30[4];
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40[2];
  __int128 v41;
  __int128 __p;
  uint64_t v43;
  int v44;
  char v45;
  __int16 v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[32];
  _BYTE v56[28];
  void (**v57)(ZinIrUnitInfo *__hidden);
  std::string v58;
  int v59;
  std::string v60;
  __int128 v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  void (**v66)(ZinIrConvUnitInfo *__hidden);
  __int128 v67;
  __int128 v68;
  uint8_t buf[344];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  if (!*(_BYTE *)(a2[1] + 492))
  {
    MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(v9, *a3);
    v14 = *(_DWORD *)(a4 + 88);
    if (*(_BYTE *)(*a2 + 1327))
      v15 = v14 == 1;
    else
      v15 = 0;
    if (v15)
      return 1;
    if (*(_BYTE *)(a2[1] + 488))
      v16 = 1;
    else
      v16 = MaxLogicalKernelWidthForLargeKernelMode <= a1;
    if (!v16 && v14 == 1)
    {
      if ((a1 & 0x8000000000000000) == 0 && *(int *)(a4 + 80) >= a1)
      {
        if (a1)
        {
          v18 = *a3;
          v57 = off_24C017CA0;
          if (*(char *)(a4 + 31) < 0)
            std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
          else
            v58 = *(std::string *)(a4 + 8);
          v59 = *(_DWORD *)(a4 + 32);
          memset(&v60, 0, sizeof(v60));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, *(__int128 **)(a4 + 40), *(__int128 **)(a4 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 48) - *(_QWORD *)(a4 + 40)) >> 3));
          v20 = *(_OWORD *)(a4 + 64);
          v57 = off_24C021970;
          v21 = *(_OWORD *)(a4 + 80);
          v61 = v20;
          v64 = *((_QWORD *)&v21 + 1);
          v62 = v21 - a1;
          v63 = DWORD1(v21) + a1;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)buf, (ZinIrInputViewUnitInfo *)&v57);
          v31 = 0;
          v32 = 0u;
          v33 = 0u;
          v36 = -1;
          v37 = -1;
          v38 = -1;
          v39 = -1;
          *(_OWORD *)v40 = 0u;
          v41 = 0u;
          __p = 0u;
          v43 = 0;
          v44 = 1;
          v45 = 0;
          v46 = 0;
          v47 = -1;
          v48 = -1;
          v49 = -1;
          v50 = -1;
          v51 = 0x3F80000000000006;
          v30[0] = off_24C01CAD8;
          memset(&v30[1], 0, 24);
          *(_QWORD *)&v22 = 0x100000001;
          *((_QWORD *)&v22 + 1) = 0x100000001;
          *(_OWORD *)&v55[8] = v22;
          *(_QWORD *)&v55[24] = 0x100000001;
          memset(v56, 0, 24);
          *(_DWORD *)&v56[24] = 1;
          v52 = 0;
          LODWORD(v53) = 1;
          DWORD2(v33) = v18;
          v35 = 0x1E00000002;
          *((_QWORD *)&v54 + 1) = 1;
          *(_QWORD *)v55 = 1;
          *((_QWORD *)&v53 + 1) = *(_QWORD *)(a5 + 8);
          *(_QWORD *)&v54 = a1 + 1;
          BYTE4(v53) = 1;
          v34 = *((_QWORD *)&v53 + 1);
          v65 = 1;
          ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v66, (const ZinIrKernelUnitInfo *)v30);
          v23 = *(_OWORD *)v55;
          v24 = *(_OWORD *)v56;
          v25[18] = *(_OWORD *)&v55[16];
          v25[19] = v24;
          v68 = *(_OWORD *)&v56[12];
          v26 = v53;
          v25[16] = v54;
          v25[17] = v23;
          v66 = off_24C01CAD8;
          v67 = v26;
          v27 = a6[1];
          if (v27 >= a6[2])
          {
            v28 = (ZinViewLayerUtils::ViewDecomposedDesc *)std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(a6, (const ZinViewLayerUtils::ViewDecomposedDesc *)buf);
          }
          else
          {
            ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)a6[1], (const ZinViewLayerUtils::ViewDecomposedDesc *)buf);
            v28 = (ZinViewLayerUtils::ViewDecomposedDesc *)(v27 + 344);
            a6[1] = (uint64_t)v28;
          }
          a6[1] = (uint64_t)v28;
          if ((unint64_t)v28 >= a6[2])
          {
            v29 = std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(a6, (const ZinViewLayerUtils::ViewDecomposedDesc *)&v65);
          }
          else
          {
            ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(v28, (const ZinViewLayerUtils::ViewDecomposedDesc *)&v65);
            v29 = (uint64_t)v28 + 344;
            a6[1] = (uint64_t)v28 + 344;
          }
          a6[1] = v29;
          ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)&v65);
          v30[0] = off_24C01ED88;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (v40[1])
          {
            *(void **)&v41 = v40[1];
            operator delete(v40[1]);
          }
          ZinIrUnitInfo::~ZinIrUnitInfo(v30);
          ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)buf);
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v57);
        }
        return 1;
      }
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO);
      if (!result)
        return result;
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Error in input view decomposition", buf, 2u);
    }
    else if (*(_BYTE *)(*a2 + 1880))
    {
      goto LABEL_3;
    }
    return 0;
  }
  if (!*(_BYTE *)(v9 + 1880))
    return 0;
LABEL_3:
  ZinViewLayerUtils::CreateTransposeViewTransposeDecomposition(a4, a6);
  return 1;
}

void sub_206EB5090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_206EB50E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  JUMPOUT(0x206EB50DCLL);
}

void ZinViewLayerUtils::GetAxesOfView(ZinViewLayerUtils *this@<X0>, const ZinTensorDimensions *a2@<X1>, char **a3@<X8>)
{
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  int v57;

  v7 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((_QWORD *)this + 3) != *((_QWORD *)a2 + 3))
  {
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), 1uLL);
    v9 = *a3;
    v10 = a3[1];
    v12 = &v8[4 * v11];
    *(_DWORD *)v8 = 4;
    v7 = v8 + 4;
    while (v10 != v9)
    {
      v13 = *((_DWORD *)v10 - 1);
      v10 -= 4;
      *((_DWORD *)v8 - 1) = v13;
      v8 -= 4;
    }
    *a3 = v8;
    a3[1] = v7;
    a3[2] = v12;
    if (v9)
      operator delete(v9);
    a3[1] = v7;
  }
  if (*((_QWORD *)this + 2) != *((_QWORD *)a2 + 2))
  {
    v14 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v14)
    {
      v16 = *a3;
      v17 = (v7 - *a3) >> 2;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v19 = v14 - (_QWORD)v16;
      if (v19 >> 1 > v18)
        v18 = v19 >> 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), v20);
        v16 = *a3;
        v7 = a3[1];
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[4 * v17];
      v23 = &v21[4 * v20];
      *(_DWORD *)v22 = 3;
      v15 = v22 + 4;
      while (v7 != v16)
      {
        v24 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v22 - 1) = v24;
        v22 -= 4;
      }
      *a3 = v22;
      a3[1] = v15;
      a3[2] = v23;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_DWORD *)v7 = 3;
      v15 = v7 + 4;
    }
    a3[1] = v15;
    v7 = v15;
  }
  if (*((_QWORD *)this + 1) != *((_QWORD *)a2 + 1))
  {
    v25 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v25)
    {
      v27 = *a3;
      v28 = (v7 - *a3) >> 2;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v30 = v25 - (_QWORD)v27;
      if (v30 >> 1 > v29)
        v29 = v30 >> 1;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
        v31 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), v31);
        v27 = *a3;
        v7 = a3[1];
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[4 * v28];
      v34 = &v32[4 * v31];
      *(_DWORD *)v33 = 2;
      v26 = v33 + 4;
      while (v7 != v27)
      {
        v35 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v33 - 1) = v35;
        v33 -= 4;
      }
      *a3 = v33;
      a3[1] = v26;
      a3[2] = v34;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_DWORD *)v7 = 2;
      v26 = v7 + 4;
    }
    a3[1] = v26;
    v7 = v26;
  }
  if (*((_QWORD *)this + 4) != *((_QWORD *)a2 + 4))
  {
    v36 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v36)
    {
      v38 = *a3;
      v39 = (v7 - *a3) >> 2;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v41 = v36 - (_QWORD)v38;
      if (v41 >> 1 > v40)
        v40 = v41 >> 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
        v42 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), v42);
        v38 = *a3;
        v7 = a3[1];
      }
      else
      {
        v43 = 0;
      }
      v44 = &v43[4 * v39];
      v45 = &v43[4 * v42];
      *(_DWORD *)v44 = 1;
      v37 = v44 + 4;
      while (v7 != v38)
      {
        v46 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v44 - 1) = v46;
        v44 -= 4;
      }
      *a3 = v44;
      a3[1] = v37;
      a3[2] = v45;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_DWORD *)v7 = 1;
      v37 = v7 + 4;
    }
    a3[1] = v37;
    v7 = v37;
  }
  if (*(_QWORD *)this != *(_QWORD *)a2)
  {
    v47 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v47)
    {
      v49 = *a3;
      v50 = (v7 - *a3) >> 2;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 62)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v52 = v47 - (_QWORD)v49;
      if (v52 >> 1 > v51)
        v51 = v52 >> 1;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
        v53 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (v53)
      {
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), v53);
        v49 = *a3;
        v7 = a3[1];
      }
      else
      {
        v54 = 0;
      }
      v55 = &v54[4 * v50];
      v56 = &v54[4 * v53];
      *(_DWORD *)v55 = 0;
      v48 = v55 + 4;
      while (v7 != v49)
      {
        v57 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v55 - 1) = v57;
        v55 -= 4;
      }
      *a3 = v55;
      a3[1] = v48;
      a3[2] = v56;
      if (v49)
        operator delete(v49);
    }
    else
    {
      *(_DWORD *)v7 = 0;
      v48 = v7 + 4;
    }
    a3[1] = v48;
  }
}

void sub_206EB54CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinViewLayerUtils::CheckInterleaveCompatibility(uint64_t a1, unint64_t a2)
{
  return *(_QWORD *)(a1 + 8) % a2 == 0;
}

void ZinViewLayerUtils::GetSortedAxesByDimensionOrder(uint64_t *a1@<X0>, int **a2@<X1>, char **a3@<X8>)
{
  int *v4;
  int *v5;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  uint64_t ValueAt;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    v13 = 0;
    v9 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *v4;
      ValueAt = GetValueAtDimension<ZinTensorDimensions>(a1, *v4);
      v12 = ValueAt;
      if (v8 >= v7)
      {
        v14 = v8 - v9;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (((char *)v7 - (char *)v9) >> 3 > v15)
          v15 = ((char *)v7 - (char *)v9) >> 3;
        if ((unint64_t)((char *)v7 - (char *)v9) >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v17 = (char *)operator new(16 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[16 * v14];
        *(_DWORD *)v18 = v10;
        *((_QWORD *)v18 + 1) = v12;
        if (v8 == v9)
        {
          v9 = (__int128 *)&v17[16 * v14];
        }
        else
        {
          v19 = &v17[16 * v14];
          do
          {
            *((_OWORD *)v19 - 1) = *(v8 - 1);
            v19 -= 16;
            --v8;
          }
          while (v8 != v9);
          v8 = v9;
          v9 = (__int128 *)v19;
        }
        v7 = (__int128 *)&v17[16 * v16];
        v13 = (__int128 *)(v18 + 16);
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_DWORD *)v8 = v10;
        *((_QWORD *)v8 + 1) = ValueAt;
        v13 = v8 + 1;
      }
      ++v4;
      v8 = v13;
    }
    while (v4 != v5);
  }
  v20 = v13 - v9;
  v21 = 126 - 2 * __clz(v20);
  if (v13 == v9)
    v22 = 0;
  else
    v22 = v21;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*,false>((uint64_t)v9, v13, v22, 1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v13 != v9)
  {
    v23 = 0;
    v24 = 0;
    v25 = a3 + 2;
    if (v20 <= 1)
      v26 = 1;
    else
      v26 = v13 - v9;
    do
    {
      v27 = &v9[v24];
      if ((unint64_t)v23 >= *v25)
      {
        v29 = *a3;
        v30 = (v23 - *a3) >> 2;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v32 = *v25 - (_QWORD)v29;
        if (v32 >> 1 > v31)
          v31 = v32 >> 1;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), v33);
          v29 = *a3;
          v23 = a3[1];
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[4 * v30];
        *(_DWORD *)v35 = *(_DWORD *)v27;
        v28 = v35 + 4;
        while (v23 != v29)
        {
          v36 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        *a3 = v35;
        a3[1] = v28;
        a3[2] = &v34[4 * v33];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_DWORD *)v23 = *(_DWORD *)v27;
        v28 = v23 + 4;
      }
      a3[1] = v28;
      ++v24;
      v23 = v28;
    }
    while (v24 != v26);
  }
  if (v9)
    operator delete(v9);
}

void sub_206EB57A8(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void ZinViewLayerUtils::ComputeViewSpanSpaceRanges(ZinIrTensor *a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  ZinIrTensor *v8;
  std::__shared_weak_count *v10;
  ZinIrTensor *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t DstDimension;
  ZinIrTensor *v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t ValueAt;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  ZinReshapeLayer **v43;
  ZinReshapeLayer **v44;
  uint64_t ReshapeInfo;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  int *v51;
  int *i;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  int v63;
  unint64_t v64;
  int *v65;
  int *v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char **v72;
  uint64_t *v73;
  uint64_t *v74;
  char *v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  _QWORD *v96;
  __int128 *v97;
  _QWORD *v98;
  _QWORD *v99;
  ZinIrTensor *v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  int v107;
  _QWORD v108[11];
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  void *__p[2];
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[3];
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  unint64_t v123;
  ZinReshapeLayer **v124;
  ZinReshapeLayer **v125;
  uint64_t v126;
  uint64_t v127[5];
  _BYTE v128[24];
  _BYTE *v129;
  uint64_t v130;

  v8 = a1;
  v130 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a1 + 12) + 208))(v127);
  ZinIrTensor::GetParentTensor(v8, v108);
  v10 = (std::__shared_weak_count *)v108[1];
  v11 = (ZinIrTensor *)v108[0];
  if (v108[1])
  {
    v12 = (unint64_t *)(v108[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v99 = a5;
  if (!v11)
  {
    v14 = 0;
    LODWORD(DstDimension) = 5;
    v102 = 1;
    v103 = -1;
    goto LABEL_61;
  }
  v97 = a3;
  v14 = 0;
  v98 = a2;
  DstDimension = 5;
  v102 = 1;
  v103 = -1;
  do
  {
LABEL_8:
    v16 = v8;
    v8 = v11;
    if (!ZinIrTensor::IsView(v16))
      goto LABEL_30;
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)v16 + 12) + 208))(v108);
    v100 = v11;
    (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)v11 + 12) + 208))(&v115);
    ZinViewLayerUtils::GetAxesOfView((ZinViewLayerUtils *)v108, (const ZinTensorDimensions *)&v115, &v118);
    v17 = (int *)v118;
    v18 = (int *)v119;
    if (v118 == v119)
      goto LABEL_27;
    do
    {
      ZinIrTensor::GetMemorySharingInfo(v16, (uint64_t)v108);
      v117[0] = *(_OWORD *)&v108[5];
      v117[1] = *(_OWORD *)&v108[7];
      v117[2] = *(_OWORD *)&v108[9];
      v115 = *(_OWORD *)&v108[1];
      v116 = *(_OWORD *)&v108[3];
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v109 + 8, (_QWORD *)v110);
      v19 = *((_QWORD *)v16 + 13);
      if (v19)
      {
        v20 = *(uint64_t **)(v19 + 40);
        if (v20 != *(uint64_t **)(v19 + 48))
        {
          v21 = *v20;
          if (v21)
          {
            v114 = *(_QWORD *)(v21 + 328);
            v22 = *(_OWORD *)(v21 + 312);
            *(_OWORD *)__p = *(_OWORD *)(v21 + 296);
            v113 = v22;
            goto LABEL_19;
          }
        }
      }
      v129 = 0;
      ZinIrTensor::InferDescriptor(v16, (uint64_t)v128, (uint64_t)v108);
      *(_OWORD *)__p = v109;
      v113 = v110;
      v114 = v111;
      v23 = v129;
      if (v129 == v128)
      {
        v23 = v128;
        v24 = 4;
      }
      else
      {
        if (!v129)
          goto LABEL_19;
        v24 = 5;
      }
      (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_19:
      ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)__p, *v17);
      v26 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v117 + 1, *v17);
      v27 = GetValueAtDimension<ZinTensorPosition>((uint64_t *)&v115, *v17);
      if (v103 <= ValueAt)
      {
        if (v103 == ValueAt)
          v28 = v26;
        else
          v28 = 1;
        v102 *= v28;
      }
      else
      {
        DstDimension = *v17;
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v124, v121, (uint64_t)v122, (v122 - v121) >> 3);
        v102 = v26;
        v103 = ValueAt;
      }
      v14 += ValueAt / v26 * v27;
      ++v17;
    }
    while (v17 != v18);
    v17 = (int *)v118;
LABEL_27:
    if (v17)
    {
      v119 = (char *)v17;
      operator delete(v17);
    }
    v8 = v100;
LABEL_30:
    v29 = *((_QWORD *)v16 + 12);
    if (*(_DWORD *)(*(_QWORD *)(v29 + 64) + 8) == 37)
    {
      v30 = v122;
      if ((unint64_t)v122 >= v123)
      {
        v32 = (v122 - v121) >> 3;
        if ((unint64_t)(v32 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v33 = (uint64_t)(v123 - (_QWORD)v121) >> 2;
        if (v33 <= v32 + 1)
          v33 = v32 + 1;
        if (v123 - (unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (v34)
          v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v123, v34);
        else
          v35 = 0;
        v36 = &v35[8 * v32];
        *(_QWORD *)v36 = v29;
        v31 = v36 + 8;
        v38 = v121;
        v37 = v122;
        if (v122 != v121)
        {
          do
          {
            v39 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *((_QWORD *)v36 - 1) = v39;
            v36 -= 8;
          }
          while (v37 != v38);
          v37 = v121;
        }
        v121 = v36;
        v122 = v31;
        v123 = (unint64_t)&v35[8 * v34];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_QWORD *)v122 = v29;
        v31 = v30 + 8;
      }
      v122 = v31;
    }
    ZinIrTensor::GetParentTensor(v8, v108);
    v40 = (std::__shared_weak_count *)v108[1];
    v11 = (ZinIrTensor *)v108[0];
    if (!v108[1])
      goto LABEL_52;
    v41 = (unint64_t *)(v108[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (v42)
    {
LABEL_52:
      if (!v11)
        break;
      goto LABEL_8;
    }
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  while (v11);
  v43 = v124;
  v44 = v125;
  if (v124 == v125)
  {
    a2 = v98;
    a3 = v97;
  }
  else
  {
    a2 = v98;
    a3 = v97;
    do
    {
      ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*v43);
      DstDimension = ZinIrTransposeInfo::GetDstDimension(ReshapeInfo, DstDimension);
      ++v43;
    }
    while (v43 != v44);
  }
LABEL_61:
  v46 = a3[1];
  v115 = *a3;
  v116 = v46;
  *(_QWORD *)&v117[0] = *((_QWORD *)a3 + 4);
  v47 = a2[22];
  if (v47 > 1 && (v47 + a2[7] - 1) / v47 == 1)
  {
    v48 = a2[17] * v47;
    *((_QWORD *)&v115 + 1) = v48;
    v49 = v103;
    if ((_DWORD)DstDimension == 2)
      v49 = v48;
    v103 = v49;
  }
  v50 = operator new(0x14uLL);
  v108[1] = v50 + 5;
  v108[2] = v50 + 5;
  v50[4] = 4;
  *(_OWORD *)v50 = xmmword_207AA848C;
  v108[0] = v50;
  ZinViewLayerUtils::GetSortedAxesByDimensionOrder((uint64_t *)&v115, (int **)v108, (char **)__p);
  operator delete(v50);
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v51 = (int *)__p[0];
  for (i = (int *)__p[1]; v51 != i; ++v51)
  {
    v53 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v115, *v51);
    if (v53 >= GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v115, DstDimension))
    {
      v54 = v119;
      if (v119 >= v120)
      {
        v56 = v118;
        v57 = (v119 - v118) >> 2;
        v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v59 = v120 - v118;
        if ((v120 - v118) >> 1 > v58)
          v58 = v59 >> 1;
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
          v60 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v60 = v58;
        if (v60)
        {
          v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v120, v60);
          v56 = v118;
          v54 = v119;
        }
        else
        {
          v61 = 0;
        }
        v62 = &v61[4 * v57];
        *(_DWORD *)v62 = *v51;
        v55 = v62 + 4;
        while (v54 != v56)
        {
          v63 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *((_DWORD *)v62 - 1) = v63;
          v62 -= 4;
        }
        v118 = v62;
        v119 = v55;
        v120 = &v61[4 * v60];
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_DWORD *)v119 = *v51;
        v55 = v54 + 4;
      }
      v119 = v55;
    }
  }
  if ((a4 & 1) != 0)
  {
    v64 = a2[22];
    memset(v108, 0, 40);
    v65 = (int *)v118;
    v66 = (int *)v119;
    if (v118 == v119)
    {
      v101 = 0uLL;
      v69 = 0;
      v71 = 0;
      v70 = 0;
    }
    else
    {
      do
      {
        v67 = *v65;
        if (*v65 == 2)
        {
          v68 = (v64 - 1 + v127[1]) / v64;
        }
        else
        {
          v68 = GetValueAtDimension<ZinTensorDimensions>(v127, v67);
          v67 = *v65;
        }
        if (SetValueAtDimension<ZinTensorPosition>(v108, v67, v68 - 1))
          ZinAssertImpl("Error");
        ++v65;
      }
      while (v65 != v66);
      v69 = v108[1];
      v70 = v108[0];
      v71 = v108[4];
      v101 = *(_OWORD *)&v108[2];
    }
    v93 = *((_QWORD *)&v116 + 1);
    v92 = *(_QWORD *)&v117[0];
    v94 = v115;
    v95 = v116;
    *v99 = 0;
    v99[1] = 0;
    v99[2] = 0;
    v96 = operator new(0x18uLL);
    v99[1] = v96 + 3;
    v99[2] = v96 + 3;
    *v96 = v14;
    v96[1] = v14
           + v94 * v70
           + v92 * v71
           + *((_QWORD *)&v94 + 1) * v69
           + v95 * v101
           + v93 * *((_QWORD *)&v101 + 1)
           + v103 / v102;
    v96[2] = v94 * v70
           + v92 * v71
           + *((_QWORD *)&v94 + 1) * v69
           + v95 * v101
           + v93 * *((_QWORD *)&v101 + 1)
           + v103 / v102;
    *v99 = v96;
  }
  else
  {
    v107 = 0;
    memset(v108, 0, 40);
    v104 = 0;
    v105 = 0;
    v106 = 0;
    ZinViewLayerUtils::ComputeIntervals((uint64_t *)&v118, v127, &v115, v103, v102, a2[22], &v107, v14, v108, (uint64_t)&v104);
    v72 = (char **)v99;
    *v99 = 0;
    v99[1] = 0;
    v99[2] = 0;
    v74 = v104;
    v73 = v105;
    if (v104 != v105)
    {
      v75 = 0;
      v76 = v99 + 2;
      do
      {
        v79 = *v74;
        v77 = v74 + 3;
        v78 = v79;
        while (1)
        {
          v80 = *(v77 - 2);
          if (v77 == v73)
            break;
          v81 = v77 + 3;
          v82 = *v77;
          v77 += 3;
          if (v80 != v82)
          {
            v74 = v81 - 3;
            goto LABEL_101;
          }
        }
        v74 = v73;
LABEL_101:
        v83 = v80 - v78;
        if ((unint64_t)v75 >= *v76)
        {
          v84 = *v72;
          v85 = 0xAAAAAAAAAAAAAAABLL * ((v75 - *v72) >> 3);
          v86 = v85 + 1;
          if (v85 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*v76 - (_QWORD)v84) >> 3) > v86)
            v86 = 0x5555555555555556 * ((uint64_t)(*v76 - (_QWORD)v84) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v76 - (_QWORD)v84) >> 3) >= 0x555555555555555)
            v87 = 0xAAAAAAAAAAAAAAALL;
          else
            v87 = v86;
          if (v87)
          {
            v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v76, v87);
            v84 = (char *)*v99;
            v75 = (char *)v99[1];
          }
          else
          {
            v88 = 0;
          }
          v89 = &v88[24 * v85];
          *(_QWORD *)v89 = v78;
          *((_QWORD *)v89 + 1) = v80;
          *((_QWORD *)v89 + 2) = v83;
          v90 = v89;
          if (v75 == v84)
          {
            v72 = (char **)v99;
          }
          else
          {
            v72 = (char **)v99;
            do
            {
              v91 = *(_OWORD *)(v75 - 24);
              *((_QWORD *)v90 - 1) = *((_QWORD *)v75 - 1);
              *(_OWORD *)(v90 - 24) = v91;
              v90 -= 24;
              v75 -= 24;
            }
            while (v75 != v84);
            v84 = (char *)*v99;
          }
          v75 = v89 + 24;
          *v72 = v90;
          v72[1] = v89 + 24;
          v72[2] = &v88[24 * v87];
          if (v84)
            operator delete(v84);
        }
        else
        {
          *(_QWORD *)v75 = v78;
          *((_QWORD *)v75 + 1) = v80;
          *((_QWORD *)v75 + 2) = v83;
          v75 += 24;
        }
        v72[1] = v75;
        v73 = v105;
      }
      while (v74 != v105);
      v74 = v104;
    }
    if (v74)
    {
      v105 = v74;
      operator delete(v74);
    }
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
}

void sub_206EB60D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52)
{
  uint64_t v52;
  void *v54;
  void *v55;
  void *v56;

  v54 = *(void **)(v52 - 240);
  if (v54)
  {
    *(_QWORD *)(v52 - 232) = v54;
    operator delete(v54);
  }
  if (__p)
    operator delete(__p);
  v55 = *(void **)(v52 - 216);
  if (v55)
  {
    *(_QWORD *)(v52 - 208) = v55;
    operator delete(v55);
  }
  v56 = *(void **)(v52 - 192);
  if (v56)
  {
    *(_QWORD *)(v52 - 184) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(exception_object);
}

void ZinViewLayerUtils::ComputeIntervals(uint64_t *a1, uint64_t *a2, _QWORD *a3, unint64_t a4, unint64_t a5, unint64_t a6, int *a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  int v25;
  uint64_t ValueAt;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;

  v12 = a10;
  v13 = *a7;
  v14 = *a1;
  v15 = (a1[1] - *a1) >> 2;
  if (v15 == v13)
  {
    v16 = a8 + *a9 * *a3 + a9[4] * a3[4] + a9[1] * a3[1] + a9[2] * a3[2] + a9[3] * a3[3];
    v17 = a4 / a5;
    v18 = v16 + a4 / a5;
    v19 = *(_QWORD *)(a10 + 16);
    v20 = *(uint64_t **)(a10 + 8);
    if ((unint64_t)v20 >= v19)
    {
      v30 = *(uint64_t **)a10;
      v31 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - *(_QWORD *)a10) >> 3);
      v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v30) >> 3);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x555555555555555)
        v34 = 0xAAAAAAAAAAAAAAALL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a10 + 16, v34);
        v12 = a10;
        v36 = v35;
        v30 = *(uint64_t **)a10;
        v20 = *(uint64_t **)(a10 + 8);
      }
      else
      {
        v36 = 0;
      }
      v38 = &v36[24 * v31];
      v39 = &v36[24 * v34];
      *(_QWORD *)v38 = v16;
      *((_QWORD *)v38 + 1) = v18;
      *((_QWORD *)v38 + 2) = v17;
      v21 = v38 + 24;
      if (v20 != v30)
      {
        do
        {
          v40 = *(_OWORD *)(v20 - 3);
          *((_QWORD *)v38 - 1) = *(v20 - 1);
          *(_OWORD *)(v38 - 24) = v40;
          v38 -= 24;
          v20 -= 3;
        }
        while (v20 != v30);
        v30 = *(uint64_t **)v12;
      }
      *(_QWORD *)v12 = v38;
      *(_QWORD *)(v12 + 8) = v21;
      *(_QWORD *)(v12 + 16) = v39;
      if (v30)
      {
        v41 = v12;
        operator delete(v30);
        v12 = v41;
      }
    }
    else
    {
      *v20 = v16;
      v20[1] = v18;
      v21 = v20 + 3;
      v20[2] = v17;
    }
    *(_QWORD *)(v12 + 8) = v21;
    return;
  }
  *a7 = v13 + 1;
  if (v15 <= v13)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v25 = *(_DWORD *)(v14 + 4 * v13);
  ValueAt = GetValueAtDimension<ZinTensorDimensions>(a2, v25);
  if (v25 == 2)
  {
    v28 = a2;
    v29 = (a6 + a2[1] - 1) / a6;
    if (!v29)
      goto LABEL_20;
  }
  else
  {
    v29 = ValueAt;
    v28 = a2;
    if (!ValueAt)
    {
LABEL_20:
      --*a7;
      return;
    }
  }
  v37 = 0;
  while (!SetValueAtDimension<ZinTensorPosition>(a9, v25, v37))
  {
    ZinViewLayerUtils::ComputeIntervals(a1, v28, a3, a4, a5, a6, a7, a8, a9, a10);
    if (v29 == ++v37)
      goto LABEL_20;
  }
}

uint64_t ZinViewLayerUtils::CascadeMultiDimensionalViews(uint64_t **this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  ZinIrOpLayer *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  _BYTE *v15;
  const void *v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  int *v23;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t ValueAt;
  ZinIrOpLayer *View;
  uint64_t v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int64x2_t v42;
  _QWORD v43[4];
  int v44;
  _OWORD v45[2];
  uint64_t v46;
  __int128 v47;
  int64x2_t v48;
  uint64_t v49;
  std::string v50;
  void *v51[2];
  int64x2_t v52;
  uint64_t v53;
  void *__p[2];
  __int128 v55;
  uint64_t v56;
  std::string v57;
  _QWORD v58[3];
  char v59;
  void *v60;
  int *v61;
  _OWORD v62[2];
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  _BYTE v66[32];
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 36)
    return 0;
  v5 = (ZinIrOpLayer *)**((_QWORD **)a2 + 11);
  v6 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
  v7 = *(_OWORD *)(v6 + 64);
  v64[0] = *(_OWORD *)(v6 + 48);
  v64[1] = v7;
  v65 = *(_QWORD *)(v6 + 80);
  v8 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v9 = *(_OWORD *)(v8 + 64);
  v62[0] = *(_OWORD *)(v8 + 48);
  v62[1] = v9;
  v63 = *(_QWORD *)(v8 + 80);
  ZinViewLayerUtils::GetAxesOfView((ZinViewLayerUtils *)v64, (const ZinTensorDimensions *)v62, (char **)&v60);
  v10 = (int *)v60;
  if ((unint64_t)((char *)v61 - (_BYTE *)v60) < 8)
  {
    v11 = 0;
    if (!v60)
      return v11;
    goto LABEL_57;
  }
  v12 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v13 = v12;
  if (*(char *)(v12 + 47) >= 0)
    v14 = *(unsigned __int8 *)(v12 + 47);
  else
    v14 = *(_QWORD *)(v12 + 32);
  v15 = v66;
  std::string::basic_string[abi:ne180100]((uint64_t)v66, v14 + 1);
  if (v66[23] < 0)
    v15 = *(_BYTE **)v66;
  if (v14)
  {
    if (*(char *)(v13 + 47) >= 0)
      v16 = (const void *)(v13 + 24);
    else
      v16 = *(const void **)(v13 + 24);
    memmove(v15, v16, v14);
  }
  *(_WORD *)&v15[v14] = 95;
  std::string::basic_string[abi:ne180100]<0>(&v57, "cascaded_view");
  v17 = std::string::append(&v57, "_xfm", 4uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v52.i64[0] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)v51 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v52.i8[7] >= 0)
    v19 = v51;
  else
    v19 = (void **)v51[0];
  if (v52.i8[7] >= 0)
    v20 = v52.u8[7];
  else
    v20 = (std::string::size_type)v51[1];
  v21 = std::string::append((std::string *)v66, (const std::string::value_type *)v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  *(_QWORD *)&v55 = *((_QWORD *)&v21->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v58, __p);
  if (SBYTE7(v55) < 0)
    operator delete(__p[0]);
  if (v52.i8[7] < 0)
    operator delete(v51[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if ((v66[23] & 0x80000000) != 0)
    operator delete(*(void **)v66);
  *(_QWORD *)v66 = a2;
  __p[0] = v66;
  __p[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v57, __p);
  v23 = (int *)v60;
  v24 = v61;
  if (v60 != v61)
  {
    v42 = vdupq_n_s64(1uLL);
    v25 = (uint64_t)v5;
    while (1)
    {
      v26 = *v23;
      ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v64, *v23);
      if (ValueAt == GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v62, v26))
      {
        View = (ZinIrOpLayer *)v25;
      }
      else
      {
        v29 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0, 0);
        v30 = *(_OWORD *)(v29 + 64);
        *(_OWORD *)__p = *(_OWORD *)(v29 + 48);
        v55 = v30;
        v56 = *(_QWORD *)(v29 + 80);
        v67 = 0;
        memset(v66, 0, sizeof(v66));
        *(int64x2_t *)v51 = v42;
        v52 = v42;
        v31 = (uint64_t *)(*((_QWORD *)a2 + 8) + 16);
        v53 = 1;
        v32 = GetValueAtDimension<ZinTensorPosition>(v31, v26);
        if (SetValueAtDimension<ZinTensorPosition>(v66, v26, v32)
          || (v33 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(*((_QWORD *)a2 + 8) + 56), v26),
              SetValueAtDimension<ZinTensorDimensions>(v51, v26, v33))
          || (v34 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v62, v26),
              SetValueAtDimension<ZinTensorDimensions>(__p, v26, v34)))
        {
          v11 = 3;
          goto LABEL_52;
        }
        v35 = *((_QWORD *)a2 + 2);
        ZinObjectNameFactory::CreateName((uint64_t)v58, 0, &v50);
        v36 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
        v45[0] = *(_OWORD *)v66;
        v45[1] = *(_OWORD *)&v66[16];
        v46 = v67;
        v47 = *(_OWORD *)v51;
        v48 = v52;
        v49 = v53;
        View = (ZinIrOpLayer *)ZinBuilder::CreateView(v35, (uint64_t)&v50, v36, (__int128 *)__p, (uint64_t)v45);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        v37 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)(v37 + 128);
        if (*(_BYTE *)(v37 + 144))
        {
          v38 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)View + 32))(View, 0, 0);
          v39 = *(unsigned __int8 *)(v38 + 144);
          *(_OWORD *)(v38 + 128) = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
          if (!v39)
            *(_BYTE *)(v38 + 144) = 1;
        }
        if (!ZinIrOpLayerGraph::AddNode(this, View, (ZinIrOpLayer ***)&v57)
          || (ZinIrOpLayerGraph::AddEdge((uint64_t)this, v25, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)
        {
          ZinAssertImpl("View Creation Internal Error", *(_OWORD *)&v42);
        }
        v25 = (uint64_t)View;
      }
      if (++v23 == v24)
        goto LABEL_49;
    }
  }
  View = v5;
LABEL_49:
  memset(v43, 0, sizeof(v43));
  v44 = 1065353216;
  v40 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)this, (uint64_t **)a2, View, v43);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v43);
  if (!v40 || !ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, a2, 0))
    ZinAssertImpl("View Creation Internal Error", *(_OWORD *)&v42);
  v11 = 0;
LABEL_52:
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  if (v57.__r_.__value_.__l.__size_)
  {
    v57.__r_.__value_.__r.__words[2] = v57.__r_.__value_.__l.__size_;
    operator delete((void *)v57.__r_.__value_.__l.__size_);
  }
  v58[0] = off_24C01FBB0;
  if (v59 < 0)
    operator delete((void *)v58[1]);
  v10 = (int *)v60;
  if (v60)
  {
LABEL_57:
    v61 = v10;
    operator delete(v10);
  }
  return v11;
}

void sub_206EB69BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  a43 = &unk_24C02BB18;
  if (__p)
  {
    a45 = (uint64_t)__p;
    operator delete(__p);
  }
  a47 = (uint64_t)off_24C01FBB0;
  if (a53 < 0)
    operator delete(a48);
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(uint64_t *a1, const ZinViewLayerUtils::ViewDecomposedDesc *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  ZinViewLayerUtils::ViewDecomposedDesc *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5F417D05F417D0)
    v9 = 0xBE82FA0BE82FA0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (ZinViewLayerUtils::ViewDecomposedDesc *)&v10[344 * v4];
  v16 = &v10[344 * v9];
  ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(v14, a2);
  v15 = (char *)v14 + 344;
  std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinViewLayerUtils::ViewDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206EB6BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinViewLayerUtils::ViewDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

ZinViewLayerUtils::ViewDecomposedDesc *ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(ZinViewLayerUtils::ViewDecomposedDesc *this, const ZinViewLayerUtils::ViewDecomposedDesc *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  __int128 v18;
  int v19;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 > 16)
  {
    if (v4 == 17)
    {
      *((_QWORD *)this + 1) = off_24C017CA0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v12 = *((_OWORD *)a2 + 1);
        *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
        *((_OWORD *)this + 1) = v12;
      }
      v19 = *((_DWORD *)a2 + 10);
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 10) = v19;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      *((_QWORD *)this + 1) = off_24C021970;
      *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
    }
    else if (v4 == 21)
    {
      *((_QWORD *)this + 1) = off_24C017CA0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v6 = *((_OWORD *)a2 + 1);
        *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
        *((_OWORD *)this + 1) = v6;
      }
      v17 = *((_DWORD *)a2 + 10);
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 10) = v17;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
      v18 = *(_OWORD *)((char *)a2 + 72);
      *((_QWORD *)this + 11) = 0;
      *(_OWORD *)((char *)this + 72) = v18;
      *((_QWORD *)this + 1) = off_24C021A98;
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 11, *((const void **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
    }
  }
  else if (v4 == 1)
  {
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinViewLayerUtils::ViewDecomposedDesc *)((char *)this + 8), (const ZinViewLayerUtils::ViewDecomposedDesc *)((char *)a2 + 8));
    *((_QWORD *)this + 1) = off_24C01CAD8;
    v7 = *(_OWORD *)((char *)a2 + 248);
    v8[16] = *(_OWORD *)((char *)a2 + 264);
    *(_OWORD *)((char *)this + 248) = v7;
    v9 = *(_OWORD *)((char *)a2 + 280);
    v10 = *(_OWORD *)((char *)a2 + 296);
    v11 = *(_OWORD *)((char *)a2 + 312);
    *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
    v8[18] = v10;
    v8[19] = v11;
    v8[17] = v9;
  }
  else if (v4 == 8)
  {
    *((_QWORD *)this + 1) = off_24C017CA0;
    if (*((char *)a2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
    }
    else
    {
      v5 = *((_OWORD *)a2 + 1);
      *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
      *((_OWORD *)this + 1) = v5;
    }
    v13 = *((_DWORD *)a2 + 10);
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 10) = v13;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
    *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 1) = &unk_24C01BA60;
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
    v14 = *(_OWORD *)((char *)a2 + 104);
    v15 = *(_OWORD *)((char *)a2 + 120);
    v16 = *(_OWORD *)((char *)a2 + 136);
    *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v16;
    *(_OWORD *)((char *)this + 120) = v15;
    *(_OWORD *)((char *)this + 104) = v14;
  }
  return this;
}

void sub_206EB6E8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinViewLayerUtils::ViewDecomposedDesc>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinViewLayerUtils::ViewDecomposedDesc>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  ZinViewLayerUtils::ViewDecomposedDesc *v12;

  v10 = 0;
  v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    v12 = (ZinViewLayerUtils::ViewDecomposedDesc *)(v11 + v10);
    v10 -= 344;
    ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(v12, (const ZinViewLayerUtils::ViewDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinViewLayerUtils::ViewDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 344;
    ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)(i - 344));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__assign_with_size[abi:ne180100]<ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__vdeallocate((void **)a1);
    if (a4 > 0xBE82FA0BE82FA0)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5F417D05F417D06 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x5F417D05F417D0)
      v11 = 0xBE82FA0BE82FA0;
    else
      v11 = v10;
    std::vector<LargeStrideConvPoolDecomposedDesc>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinViewLayerUtils::ViewDecomposedDesc>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinViewLayerUtils::ViewDecomposedDesc>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)(v16 - 344));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_206EB7198(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206EB71A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)(v3 - 344));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinViewLayerUtils::ViewDecomposedDesc>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)(a4 + v7), (const ZinViewLayerUtils::ViewDecomposedDesc *)(a2 + v7));
      v7 += 344;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206EB7260(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 344;
    do
    {
      ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)(v4 + v2));
      v2 -= 344;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      ZinViewLayerUtils::ViewDecomposedDesc::operator=(a3, v4);
      v4 += 344;
      a3 += 344;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t ZinViewLayerUtils::ViewDecomposedDesc::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (v4 > 16)
  {
    if (v4 == 17)
    {
      std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      if (a1 != a2)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 48), *(std::string **)(a2 + 48), *(__int128 **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      goto LABEL_17;
    }
    if (v4 == 21)
    {
      std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      if (a1 != a2)
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 48), *(std::string **)(a2 + 48), *(__int128 **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
      }
    }
  }
  else if (v4 == 1)
  {
    std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    if (a1 != a2)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 48), *(std::string **)(a2 + 48), *(__int128 **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v8 = *(_OWORD *)(a2 + 88);
      v9 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v9;
      *(_OWORD *)(a1 + 88) = v8;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 136), *(char **)(a2 + 136), *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 2);
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a1 + 160), *(char **)(a2 + 160), *(_QWORD *)(a2 + 168), (uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 3);
    }
    v10 = *(_OWORD *)(a2 + 184);
    v11 = *(_OWORD *)(a2 + 200);
    v12 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 228);
    *(_OWORD *)(a1 + 216) = v12;
    *(_OWORD *)(a1 + 200) = v11;
    *(_OWORD *)(a1 + 184) = v10;
    v14 = *(_OWORD *)(a2 + 296);
    v13 = *(_OWORD *)(a2 + 312);
    v15 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
    *(_OWORD *)(a1 + 296) = v14;
    *(_OWORD *)(a1 + 312) = v13;
    *(_OWORD *)(a1 + 280) = v15;
    v16 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = v16;
  }
  else if (v4 == 8)
  {
    std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    if (a1 != a2)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 48), *(std::string **)(a2 + 48), *(__int128 **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v5 = *(_OWORD *)(a2 + 120);
    v6 = *(_OWORD *)(a2 + 136);
    v7 = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 152) = v7;
    *(_OWORD *)(a1 + 136) = v6;
    *(_OWORD *)(a1 + 120) = v5;
LABEL_17:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  __int128 *v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  int v40;
  BOOL v41;
  __int128 *v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  int v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  __int128 *v65;
  __int128 *v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  int v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  int v74;
  BOOL v75;
  __int128 *v76;
  uint64_t v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  __int128 *v84;
  BOOL v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  int v101;
  int v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  _OWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  int v125;
  int v126;
  uint64_t v127;
  BOOL v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _OWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  int v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  int v147;
  uint64_t v148;
  int v149;
  _OWORD *v150;
  uint64_t v151;
  BOOL v152;
  int v153;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  int v159;
  uint64_t v160;
  int v161;
  _QWORD *v162;
  uint64_t v163;
  int v164;
  int v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*,0>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  int64_t v11;
  int64_t v12;
  BOOL v13;
  int v14;
  int64_t v15;
  int64_t v16;
  BOOL v17;
  int v18;
  int64_t v19;
  int64_t v20;
  BOOL v21;
  int v22;
  int64_t v23;
  int64_t v24;
  BOOL v25;
  int v26;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  v11 = a5->n128_i64[1];
  v12 = a4->n128_i64[1];
  v13 = v11 == v12;
  if (v11 < v12)
    v14 = -16777216;
  else
    v14 = 0x1000000;
  if (!v13
    || ((signed __int32)a5->n128_u32[0] < (signed __int32)a4->n128_u32[0] ? (v14 = -16777216) : (v14 = 0x1000000),
        a5->n128_u32[0] != a4->n128_u32[0]))
  {
    if (v14 >= 1)
    {
      result = *a4;
      *a4 = *a5;
      *a5 = result;
      v15 = a4->n128_i64[1];
      v16 = a3->n128_i64[1];
      v17 = v15 == v16;
      v18 = v15 < v16 ? -16777216 : 0x1000000;
      if (!v17
        || ((signed __int32)a4->n128_u32[0] < (signed __int32)a3->n128_u32[0] ? (v18 = -16777216) : (v18 = 0x1000000),
            a4->n128_u32[0] != a3->n128_u32[0]))
      {
        if (v18 >= 1)
        {
          result = *a3;
          *a3 = *a4;
          *a4 = result;
          v19 = a3->n128_i64[1];
          v20 = a2->n128_i64[1];
          v21 = v19 == v20;
          v22 = v19 < v20 ? -16777216 : 0x1000000;
          if (!v21
            || ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0]
              ? (v22 = -16777216)
              : (v22 = 0x1000000),
                a3->n128_u32[0] != a2->n128_u32[0]))
          {
            if (v22 >= 1)
            {
              result = *a2;
              *a2 = *a3;
              *a3 = result;
              v23 = a2->n128_i64[1];
              v24 = a1->n128_i64[1];
              v25 = v23 == v24;
              v26 = v23 < v24 ? -16777216 : 0x1000000;
              if (!v25
                || ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0]
                  ? (v26 = -16777216)
                  : (v26 = 0x1000000),
                    a2->n128_u32[0] != a1->n128_u32[0]))
              {
                if (v26 >= 1)
                {
                  result = *a1;
                  *a1 = *a2;
                  *a2 = result;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>(__int128 *result, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)result + 1);
  v5 = v3 == v4;
  if (v3 < v4)
    v6 = -16777216;
  else
    v6 = 0x1000000;
  if (v5
    && (*(_DWORD *)a2 < *(_DWORD *)result ? (v6 = -16777216) : (v6 = 0x1000000), *(_DWORD *)a2 == *(_DWORD *)result)
    || v6 <= 0)
  {
    v11 = *((_QWORD *)a3 + 1);
    v12 = v11 == v3;
    if (v11 < v3)
      v13 = -16777216;
    else
      v13 = 0x1000000;
    if (!v12 || (*(_DWORD *)a3 < *(_DWORD *)a2 ? (v13 = -16777216) : (v13 = 0x1000000), *(_DWORD *)a3 != *(_DWORD *)a2))
    {
      if (v13 >= 1)
      {
        v14 = *a2;
        *a2 = *a3;
        *a3 = v14;
        v15 = *((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)result + 1);
        v17 = v15 == v16;
        v18 = v15 < v16 ? -16777216 : 0x1000000;
        if (!v17
          || (*(_DWORD *)a2 < *(_DWORD *)result ? (v18 = -16777216) : (v18 = 0x1000000),
              *(_DWORD *)a2 != *(_DWORD *)result))
        {
          if (v18 >= 1)
          {
            v19 = *result;
            *result = *a2;
            *a2 = v19;
          }
        }
      }
    }
  }
  else
  {
    v7 = *((_QWORD *)a3 + 1);
    v8 = v7 == v3;
    if (v7 < v3)
      v9 = -16777216;
    else
      v9 = 0x1000000;
    if (!v8 || (*(_DWORD *)a3 < *(_DWORD *)a2 ? (v9 = -16777216) : (v9 = 0x1000000), *(_DWORD *)a3 != *(_DWORD *)a2))
    {
      if (v9 >= 1)
      {
        v10 = *result;
        *result = *a3;
LABEL_54:
        *a3 = v10;
        return result;
      }
    }
    v20 = *result;
    *result = *a2;
    *a2 = v20;
    v21 = *((_QWORD *)a3 + 1);
    v22 = *((_QWORD *)a2 + 1);
    v23 = v21 == v22;
    if (v21 < v22)
      v24 = -16777216;
    else
      v24 = 0x1000000;
    if (!v23 || (*(_DWORD *)a3 < *(_DWORD *)a2 ? (v24 = -16777216) : (v24 = 0x1000000), *(_DWORD *)a3 != *(_DWORD *)a2))
    {
      if (v24 >= 1)
      {
        v10 = *a2;
        *a2 = *a3;
        goto LABEL_54;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  int v28;
  BOOL v29;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v7 == v8;
      if (v7 < v8)
        v10 = -16777216;
      else
        v10 = 0x1000000;
      if (!v9
        || (*(_DWORD *)v6 < *(_DWORD *)a1 ? (v10 = -16777216) : (v10 = 0x1000000), *(_DWORD *)v6 != *(_DWORD *)a1))
      {
        if (v10 >= 1)
        {
          v11 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v6;
          *v6 = v11;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>((__int128 *)a1, (__int128 *)(a1 + 16), a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*,0>((__n128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a1 + 32));
      v13 = (__int128 *)(a1 + 48);
      if ((__int128 *)(a1 + 48) == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *((_QWORD *)v13 + 1);
    v17 = *((_QWORD *)v12 + 1);
    v18 = v16 == v17;
    v19 = v16 < v17 ? -16777216 : 0x1000000;
    if (!v18
      || (*(_DWORD *)v13 < *(_DWORD *)v12 ? (v19 = -16777216) : (v19 = 0x1000000), *(_DWORD *)v13 != *(_DWORD *)v12))
    {
      if (v19 >= 1)
      {
        v20 = *(_QWORD *)v13;
        v21 = *(_QWORD *)v13;
        v22 = v14;
        while (1)
        {
          v23 = a1 + v22;
          *(_OWORD *)(a1 + v22 + 48) = *(_OWORD *)(a1 + v22 + 32);
          if (v22 == -32)
          {
            v24 = (_QWORD *)a1;
            goto LABEL_40;
          }
          v24 = v12;
          v25 = *(_QWORD *)(v23 + 24);
          v26 = v16 == v25;
          v27 = v16 < v25 ? -16777216 : 0x1000000;
          if (v26)
          {
            v28 = *(_DWORD *)(v23 + 16);
            v29 = v21 == v28;
            v27 = v21 < v28 ? -16777216 : 0x1000000;
            if (v29)
              break;
          }
          --v12;
          v22 -= 16;
          if (v27 <= 0)
            goto LABEL_40;
        }
        v24 = (_QWORD *)(a1 + v22 + 32);
LABEL_40:
        *v24 = v20;
        v24[1] = v16;
        if (++v15 == 8)
          return v13 + 1 == a2;
      }
    }
    v12 = v13;
    v14 += 16;
    if (++v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 8);
  v11 = v9 == v10;
  if (v9 < v10)
    v12 = -16777216;
  else
    v12 = 0x1000000;
  if (!v11 || (*(_DWORD *)a4 < *(_DWORD *)a3 ? (v12 = -16777216) : (v12 = 0x1000000), *(_DWORD *)a4 != *(_DWORD *)a3))
  {
    if (v12 >= 1)
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(__n128 *)a4 = result;
      v13 = *(_QWORD *)(a3 + 8);
      v14 = *(_QWORD *)(a2 + 8);
      v15 = v13 == v14;
      v16 = v13 < v14 ? -16777216 : 0x1000000;
      if (!v15
        || (*(_DWORD *)a3 < *(_DWORD *)a2 ? (v16 = -16777216) : (v16 = 0x1000000), *(_DWORD *)a3 != *(_DWORD *)a2))
      {
        if (v16 >= 1)
        {
          result = *(__n128 *)a2;
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(__n128 *)a3 = result;
          v17 = *(_QWORD *)(a2 + 8);
          v18 = *(_QWORD *)(a1 + 8);
          v19 = v17 == v18;
          v20 = v17 < v18 ? -16777216 : 0x1000000;
          if (!v19
            || (*(_DWORD *)a2 < *(_DWORD *)a1 ? (v20 = -16777216) : (v20 = 0x1000000), *(_DWORD *)a2 != *(_DWORD *)a1))
          {
            if (v20 >= 1)
            {
              result = *(__n128 *)a1;
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(__n128 *)a2 = result;
            }
          }
        }
      }
    }
  }
  return result;
}

ZinDeconvLargeStrides::DeconvStride4SamePad *ZinDeconvLargeStrides::DeconvStride4SamePad::DeconvStride4SamePad(ZinDeconvLargeStrides::DeconvStride4SamePad *this, ZinIrPixelShuffleUnitInfo *a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)this = 31;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C023650;
  v6 = *((_QWORD *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 11) = v6;
  return this;
}

void sub_206EB8550(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ZinDeconvLargeStrides::DeconvStride4SamePad::~DeconvStride4SamePad(ZinDeconvLargeStrides::DeconvStride4SamePad *this)
{
  void **v2;
  void *v3;
  void *v4;

  if (*(_DWORD *)this == 1)
  {
    *((_QWORD *)this + 1) = off_24C01ED88;
    v2 = (void **)((char *)this + 8);
    v3 = (void *)*((_QWORD *)this + 20);
    if (v3)
    {
      *((_QWORD *)this + 21) = v3;
      operator delete(v3);
    }
    v4 = (void *)*((_QWORD *)this + 17);
    if (v4)
    {
      *((_QWORD *)this + 18) = v4;
      operator delete(v4);
    }
  }
  else
  {
    if (*(_DWORD *)this != 31)
      return;
    v2 = (void **)((char *)this + 8);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
}

ZinDeconvLargeStrides::DeconvStride4SamePad *ZinDeconvLargeStrides::DeconvStride4SamePad::DeconvStride4SamePad(ZinDeconvLargeStrides::DeconvStride4SamePad *this, const ZinDeconvLargeStrides::DeconvStride4SamePad *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 == 1)
  {
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinDeconvLargeStrides::DeconvStride4SamePad *)((char *)this + 8), (const ZinDeconvLargeStrides::DeconvStride4SamePad *)((char *)a2 + 8));
    *((_QWORD *)this + 1) = off_24C01CAD8;
    v6 = *(_OWORD *)((char *)a2 + 248);
    v7[16] = *(_OWORD *)((char *)a2 + 264);
    *(_OWORD *)((char *)this + 248) = v6;
    v8 = *(_OWORD *)((char *)a2 + 280);
    v9 = *(_OWORD *)((char *)a2 + 296);
    v10 = *(_OWORD *)((char *)a2 + 312);
    *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
    v7[18] = v9;
    v7[19] = v10;
    v7[17] = v8;
  }
  else if (v4 == 31)
  {
    *((_QWORD *)this + 1) = off_24C017CA0;
    if (*((char *)a2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
    }
    else
    {
      v5 = *((_OWORD *)a2 + 1);
      *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
      *((_OWORD *)this + 1) = v5;
    }
    v11 = *((_DWORD *)a2 + 10);
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 10) = v11;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
    *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 1) = off_24C023650;
    v12 = *((_QWORD *)a2 + 11);
    *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
    *((_QWORD *)this + 11) = v12;
  }
  return this;
}

void sub_206EB8718(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(__int128 *a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, char **a7, uint64_t *a8)
{
  uint64_t i;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  BOOL v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  _OWORD *v83;
  __int128 v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  void *v106[4];
  int v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  void (**v115)(ZinIrConvUnitInfo *__hidden);
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _QWORD v121[4];
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  int v135;
  char v136;
  __int16 v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[28];
  _QWORD v149[5];

  v16 = *a8;
  for (i = a8[1];
        i != v16;
  a8[1] = v16;
  v17 = *a7;
  a7[1] = *a7;
  v18 = (unint64_t)a7[2];
  if ((unint64_t)v17 >= v18)
  {
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (_QWORD)v17) >> 3);
    v23 = 2 * v22;
    if (2 * v22 <= 1)
      v23 = 1;
    if (v22 >= 0x333333333333333)
      v24 = 0x666666666666666;
    else
      v24 = v23;
    v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a7 + 2), v24);
    v27 = &v25[40 * v26];
    v28 = *a1;
    v29 = a1[1];
    *((_QWORD *)v25 + 4) = *((_QWORD *)a1 + 4);
    *(_OWORD *)v25 = v28;
    *((_OWORD *)v25 + 1) = v29;
    v21 = v25 + 40;
    v31 = *a7;
    v30 = a7[1];
    if (v30 != *a7)
    {
      do
      {
        v32 = *(_OWORD *)(v30 - 40);
        v33 = *(_OWORD *)(v30 - 24);
        *((_QWORD *)v25 - 1) = *((_QWORD *)v30 - 1);
        *(_OWORD *)(v25 - 24) = v33;
        *(_OWORD *)(v25 - 40) = v32;
        v25 -= 40;
        v30 -= 40;
      }
      while (v30 != v31);
      v30 = *a7;
    }
    *a7 = v25;
    a7[1] = v21;
    a7[2] = v27;
    if (v30)
      operator delete(v30);
  }
  else
  {
    v19 = *a1;
    v20 = a1[1];
    *((_QWORD *)v17 + 4) = *((_QWORD *)a1 + 4);
    *(_OWORD *)v17 = v19;
    *((_OWORD *)v17 + 1) = v20;
    v21 = v17 + 40;
  }
  a7[1] = v21;
  if ((*(_BYTE *)(a4 + 272) & 0x40) == 0
    || (v34 = *(_DWORD *)(a4 + 164), v35 = *(_DWORD *)(a4 + 168), v34 != 4) && v35 != 4)
  {
    v36 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v36)
      ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(v36, v37, v38, v39, v40, v41, v42, v43);
    return 3;
  }
  v44 = *(_DWORD *)(a4 + 172);
  if (v44 > 2 || (v45 = *(_QWORD *)(a4 + 104), v45 >= 2))
  {
    v46 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v46)
      ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(v46, v47, v48, v49, v50, v51, v52, v53);
    return 3;
  }
  if (*(int *)(a4 + 208) > 1 || *(int *)(a4 + 212) > 1 || *(int *)(a4 + 216) >= 2)
  {
    v85 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v85)
      ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(v85, v86, v87, v88, v89, v90, v91, v92);
    return 3;
  }
  v102 = *(_QWORD *)(a4 + 88);
  v103 = *(_QWORD *)(a4 + 96);
  v149[0] = v103;
  v149[1] = v102;
  v105 = v45;
  v149[2] = v45;
  if (!ZinLargeKernelUtils::IsSamePadding(a1, (_QWORD *)a2, (int *)(a4 + 164), v149, (_DWORD *)(a4 + 176)))
  {
    v93 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v93)
      ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(v93, v94, v95, v96, v97, v98, v99, v100);
    return 3;
  }
  v55 = v35;
  v122 = 0;
  v123 = 0u;
  v124 = 0u;
  v125 = -1;
  v126 = 0;
  v127 = -1;
  v128 = -1;
  v129 = -1;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v130 = -1;
  v134 = 0;
  v135 = 1;
  v136 = 0;
  v137 = 0;
  v138 = -1;
  v139 = -1;
  v140 = -1;
  v141 = -1;
  v142 = 0x3F80000000000006;
  memset(&v121[1], 0, 24);
  v121[0] = off_24C01CAD8;
  BYTE4(v144) = 0;
  *((_QWORD *)&v146 + 1) = 0x100000001;
  LODWORD(v147) = 1;
  v143 = 0;
  LODWORD(v144) = 3;
  if (v35 == 4)
    v56 = 2;
  else
    v56 = v35;
  v57 = v103;
  *((_QWORD *)&v147 + 1) = __PAIR64__(v44, v56);
  v58 = (v102 + v35 - 1) / v35 * v35;
  v59 = 1;
  if (v34 == 4)
    v60 = 2;
  else
    v60 = v34;
  DWORD1(v147) = v60;
  if (v34 == 4)
  {
    v61 = v103 + 3;
    if (v103 + 3 <= 0)
      v62 = -(-(v103 + 3) & 3);
    else
      v62 = (v103 + 3) & 3;
    v63 = v61 < v62;
    v64 = v61 - v62;
    if (v63)
      ++v64;
    v57 = v64 >> 1;
    v59 = 2;
  }
  v65 = v55 == 4;
  v66 = v55 == 4;
  v67 = v58 / 2;
  if (v65)
    v68 = 2;
  else
    v68 = 1;
  if (!v65)
    v67 = v102;
  v101 = v68;
  v69 = *(_OWORD *)(a2 + 16);
  v118 = *(_OWORD *)a2;
  v119 = v69;
  v70 = *(_QWORD *)(a2 + 32);
  v71 = *((_QWORD *)&v69 + 1) / (uint64_t)v59;
  *((_QWORD *)&v119 + 1) = v71;
  v120 = v70;
  v72 = (uint64_t)v69 / v68;
  v104 = v66;
  if (v34 == 4)
    ++v66;
  *((_QWORD *)&v118 + 1) <<= v66;
  *(_QWORD *)&v119 = (uint64_t)v119 / v68;
  v73 = *(_DWORD *)(a4 + 156);
  v74 = v57 + (v71 - 1) * *(_DWORD *)(a4 + 152) - *((_DWORD *)a1 + 6) * v60;
  if (v74 - v60 + 1 >= 0)
    v75 = v74 - v60 + 1;
  else
    v75 = v74 - v60 + 2;
  *((_QWORD *)&v145 + 1) = v67;
  *(_QWORD *)&v146 = v105;
  *(_DWORD *)v148 = v74 - (v75 >> 1);
  *(_DWORD *)&v148[4] = v75 >> 1;
  v76 = v67 + (v72 - 1) * v73 - *((_DWORD *)a1 + 4) * v56;
  if (v76 - v56 + 1 >= 0)
    v77 = v76 - v56 + 1;
  else
    v77 = v76 - v56 + 2;
  *(_DWORD *)&v148[8] = v76 - (v77 >> 1);
  *(_DWORD *)&v148[12] = v77 >> 1;
  v78 = v105 - *((_DWORD *)a1 + 8) * v44 + (v120 - 1) * *(_DWORD *)(a4 + 160);
  if (v78 - v44 + 1 >= 0)
    v79 = v78 - v44 + 1;
  else
    v79 = v78 - v44 + 2;
  *(_DWORD *)&v148[16] = v78 - (v79 >> 1);
  *(_DWORD *)&v148[20] = v79 >> 1;
  HIDWORD(v126) = a5;
  v125 = v56 * (uint64_t)v60 * v44 * *(_QWORD *)(a2 + 8);
  v80 = *(_QWORD *)(a4 + 224);
  *(_QWORD *)&v145 = v57;
  *((_QWORD *)&v144 + 1) = v80;
  *(_DWORD *)&v148[24] = *(_DWORD *)(a4 + 200);
  DWORD2(v124) = a3;
  std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v118);
  v114 = 1;
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v115, (const ZinIrKernelUnitInfo *)v121);
  v81 = v146;
  v82 = *(_OWORD *)v148;
  v83[18] = v147;
  v83[19] = v82;
  v117 = *(_OWORD *)&v148[12];
  v84 = v144;
  v83[16] = v145;
  v83[17] = v81;
  v115 = off_24C01CAD8;
  v116 = v84;
  std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::push_back[abi:ne180100](a8, (const ZinDeconvLargeStrides::DeconvStride4SamePad *)&v114);
  ZinDeconvLargeStrides::DeconvStride4SamePad::~DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)&v114);
  v108 = 0u;
  v109 = 0u;
  v110 = -1;
  v106[0] = off_24C023650;
  memset(&v106[1], 0, 24);
  v107 = 31;
  v111 = v59;
  v112 = v101;
  v113 = 1;
  *((uint64_t *)&v118 + 1) /= (uint64_t)(v101 << (v34 == 4));
  *(_QWORD *)&v119 = (_QWORD)v119 << v104;
  *((_QWORD *)&v119 + 1) <<= v34 == 4;
  std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v118);
  ZinDeconvLargeStrides::DeconvStride4SamePad::DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)&v114, (ZinIrPixelShuffleUnitInfo *)v106);
  std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::push_back[abi:ne180100](a8, (const ZinDeconvLargeStrides::DeconvStride4SamePad *)&v114);
  ZinDeconvLargeStrides::DeconvStride4SamePad::~DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)&v114);
  ZinIrUnitInfo::~ZinIrUnitInfo(v106);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)v121);
  return 0;
}

void sub_206EB8CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  ZinDeconvLargeStrides::DeconvStride4SamePad::~DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)&a26);
  ZinIrUnitInfo::~ZinIrUnitInfo(&a14);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x208]);
  _Unwind_Resume(a1);
}

void std::vector<ZinTensorDimensions>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x333333333333333)
      v14 = 0x666666666666666;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[40 * v11];
    v17 = &v15[40 * v14];
    v18 = *a2;
    v19 = a2[1];
    *((_QWORD *)v16 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v16 = v18;
    *((_OWORD *)v16 + 1) = v19;
    v10 = v16 + 40;
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 40);
        v23 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v16 - 24) = v23;
        *(_OWORD *)(v16 - 40) = v22;
        v16 -= 40;
        v20 -= 40;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v8 = *a2;
    v9 = a2[1];
    *(_QWORD *)(v7 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    v10 = (char *)(v7 + 40);
  }
  a1[1] = v10;
}

BOOL ZinLargeKernelUtils::IsSamePadding(_QWORD *a1, _QWORD *a2, int *a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a3;
  if (a2[3] != a1[3] * v5)
    return 0;
  v6 = a3[1];
  if (a2[2] != a1[2] * v6)
    return 0;
  v7 = a3[2];
  if (a2[4] != a1[4] * v7)
    return 0;
  if ((int)v5 >= 2)
  {
    v8 = *a4 - 1;
    v9 = (v5 - 1);
    v10 = __OFSUB__(v8, v9);
    v11 = v8 - v9;
    if (v11 < 0 != v10)
      ++v11;
    if (v8 - (v11 >> 1) != *a5)
      return 0;
  }
  if ((int)v6 >= 2)
  {
    v12 = a4[1] - 1;
    v13 = (v6 - 1);
    v10 = __OFSUB__(v12, v13);
    v14 = v12 - v13;
    if (v14 < 0 != v10)
      ++v14;
    if (v12 - (v14 >> 1) != a5[2])
      return 0;
  }
  if ((int)v7 < 2)
    return 1;
  v15 = a4[2] - 1;
  v16 = (v7 - 1);
  v10 = __OFSUB__(v15, v16);
  v17 = v15 - v16;
  if (v17 < 0 != v10)
    ++v17;
  return v15 - (v17 >> 1) == a5[4];
}

uint64_t std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::push_back[abi:ne180100](uint64_t *a1, const ZinDeconvLargeStrides::DeconvStride4SamePad *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride4SamePad>(a1, a2);
  }
  else
  {
    ZinDeconvLargeStrides::DeconvStride4SamePad::DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)a1[1], a2);
    result = v3 + 344;
    a1[1] = v3 + 344;
  }
  a1[1] = result;
  return result;
}

void sub_206EB8F90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t ZinDeconvLargeStrides::ApplyStride4SamePadDecomposition(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  ZinIrKernel **v10;
  size_t v11;
  __int128 *v12;
  const void *v13;
  const void *v14;
  std::string *v15;
  std::string *v16;
  ZinIrKernel **v17;
  __int128 v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  char v27;
  int v28;
  size_t v29;
  std::string *v30;
  const void *v31;
  std::string *v32;
  __int128 v33;
  ZinIrKernel **v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  ZinIrKernel *v53;
  uint64_t v54;
  int UnderlyingType;
  ZinIrKernel *v56;
  uint64_t v57;
  ZinIrKernel *v58;
  uint64_t v59;
  _DWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::string *v73;
  __int128 v74;
  int64_t v75;
  std::string::size_type size;
  int64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  ZinIrKernel *i;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  ZinIrKernel **v94;
  ZinIrKernel *v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  ZinIrKernel *v107;
  ZinIrKernel *v108;
  int v109;
  uint64_t v110;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t **v115;
  uint64_t v116;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  ZinKernelSparsityCache *KernelSparsityCache;
  int v122;
  unint64_t v123;
  unint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  ZinIrOpLayer *PixelShuffleLayer;
  uint64_t v130;
  int64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD v136[4];
  int v137;
  ZinIrKernel *v138;
  void *__p[2];
  std::string::size_type v140;
  uint64_t v141;
  unsigned int v142;
  char v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  __int128 v149;
  uint64_t v150;
  int v151;
  uint64_t v152[4];
  int v153;
  int v154;
  int v155;
  char v156;
  _QWORD v157[3];
  char v158;
  ZinIrKernel *v159;
  int v160;
  _BYTE v161[32];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  void *v167[2];
  std::string::size_type v168;
  uint64_t v169;
  _DWORD v170[6];
  _QWORD v171[3];
  char v172;
  void *v173[2];
  char v174;
  ZinIrKernel *v175[2];
  int64_t v176;
  uint64_t v177;
  _QWORD v178[5];
  std::string v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  int v187;
  std::string v188;
  int v189;
  int v190;
  int v191;
  char v192;
  uint64_t v193;

  v7 = a1;
  v193 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD **)(a1 + 200);
  v8 = *(_QWORD *)(a1 + 208);
  if ((ZinConvLayer::HasLargeKernelStrides((ZinConvLayer *)v9) & 1) == 0)
    ZinAssertImpl("Error: large kernel stride is not supported for lowering");
  v10 = **(ZinIrKernel ****)(v7 + 88);
  v126 = *(_QWORD *)(v7 + 16);
  if (*((char *)v9 + 47) >= 0)
    v11 = *((unsigned __int8 *)v9 + 47);
  else
    v11 = v9[4];
  v12 = &v180;
  std::string::basic_string[abi:ne180100]((uint64_t)&v180, v11 + 1);
  v13 = v9 + 3;
  if (SBYTE7(v181) < 0)
    v12 = (__int128 *)v180;
  if (v11)
  {
    if (*((char *)v9 + 47) >= 0)
      v14 = v9 + 3;
    else
      v14 = (const void *)v9[3];
    memmove(v12, v14, v11);
  }
  *(_WORD *)((char *)v12 + v11) = 95;
  v15 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v188, "lkss_s4");
  v16 = std::string::append(v15, "_xfm", 4uLL);
  v17 = v10;
  v18 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(_QWORD *)&v161[16] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
  *(_OWORD *)v161 = v18;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (v161[23] >= 0)
    v19 = v161;
  else
    v19 = *(const std::string::value_type **)v161;
  if (v161[23] >= 0)
    v20 = v161[23];
  else
    v20 = *(_QWORD *)&v161[8];
  v21 = std::string::append((std::string *)&v180, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v140 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = ZinObjectNameFactory::ZinObjectNameFactory(v157, __p);
  if (SHIBYTE(v140) < 0)
    operator delete(__p[0]);
  if ((v161[23] & 0x80000000) != 0)
    operator delete(*(void **)v161);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  if (SBYTE7(v181) < 0)
    operator delete((void *)v180);
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, __n128))(*v9 + 136))(v152, v9, v23);
  if (!v156)
  {
    v110 = 3;
    goto LABEL_149;
  }
  v24 = *a4;
  if (a4[1] == *a4)
LABEL_157:
    ZinAssertImpl("Error: decomposition of Deconv with large stride fails. A pixel shuffle unit is expected");
  v25 = 0;
  PixelShuffleLayer = 0;
  if (v155 == 4)
    v26 = 2;
  else
    v26 = 1;
  if (v154 == 4)
    v27 = (v153 == 4) + 1;
  else
    v27 = v153 == 4;
  v112 = (v26 << v27);
  v119 = v8;
  v127 = 1;
  v118 = v9 + 3;
  v115 = a2;
  v116 = v7;
  v113 = v9;
  v114 = a4;
  do
  {
    ZinDeconvLargeStrides::DeconvStride4SamePad::DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)__p, (const ZinDeconvLargeStrides::DeconvStride4SamePad *)(v24 + 344 * v25));
    if (LODWORD(__p[0]) != 31)
    {
      if (LODWORD(__p[0]) != 1)
        ZinAssertImpl("Error: the decomposed unit is unknown");
      v128 = (uint64_t)v17;
      *((_QWORD *)&v184 + 1) = 0x100000001;
      DWORD1(v186) = 0;
      v180 = v145;
      *(_QWORD *)&v181 = v146;
      v183 = v149;
      *(_QWORD *)&v184 = v150;
      *((_QWORD *)&v181 + 1) = 0x100000001;
      LODWORD(v182) = 1;
      *(_QWORD *)((char *)&v182 + 4) = v147;
      HIDWORD(v182) = v148;
      LOBYTE(v186) = v143;
      BYTE1(v186) = 1;
      *((_QWORD *)&v185 + 1) = v144;
      v28 = v151;
      LODWORD(v185) = 1;
      DWORD1(v185) = v151;
      if (*((char *)v9 + 47) >= 0)
        v29 = *((unsigned __int8 *)v9 + 47);
      else
        v29 = v9[4];
      std::string::basic_string[abi:ne180100]((uint64_t)&v188, v29 + 1);
      if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v188;
      else
        v30 = (std::string *)v188.__r_.__value_.__r.__words[0];
      if (v29)
      {
        if (*((char *)v9 + 47) >= 0)
          v31 = v13;
        else
          v31 = (const void *)v9[3];
        memmove(v30, v31, v29);
      }
      *(_WORD *)((char *)&v30->__r_.__value_.__l.__data_ + v29) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v179, "lkss_s2");
      v32 = std::string::append(&v179, "_xfm", 4uLL);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v176 = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)v175 = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (v176 >= 0)
        v34 = v175;
      else
        v34 = (ZinIrKernel **)v175[0];
      if (v176 >= 0)
        v35 = HIBYTE(v176);
      else
        v35 = (std::string::size_type)v175[1];
      v36 = std::string::append(&v188, (const std::string::value_type *)v34, v35);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      *(_QWORD *)&v161[16] = *((_QWORD *)&v36->__r_.__value_.__l + 2);
      *(_OWORD *)v161 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = ZinObjectNameFactory::ZinObjectNameFactory(v171, v161);
      if ((v161[23] & 0x80000000) != 0)
        operator delete(*(void **)v161);
      if (SHIBYTE(v176) < 0)
        operator delete(v175[0]);
      if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v179.__r_.__value_.__l.__data_);
      if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v188.__r_.__value_.__l.__data_);
      (*(void (**)(std::string *__return_ptr, _QWORD *, __n128))(*v9 + 136))(&v188, v9, v38);
      if (!v192)
      {
        v138 = 0;
        v69 = v119;
LABEL_131:
        v171[0] = off_24C01FBB0;
        if (v172 < 0)
          operator delete((void *)v171[1]);
        v97 = v25;
        v98 = *(_OWORD *)((char *)v138 + 472);
        v180 = *(_OWORD *)((char *)v138 + 456);
        v181 = v98;
        *(_QWORD *)&v186 = *((_QWORD *)v138 + 69);
        v99 = *(_OWORD *)((char *)v138 + 520);
        v185 = *(_OWORD *)((char *)v138 + 536);
        v184 = v99;
        v100 = *(_OWORD *)((char *)v138 + 504);
        v182 = *(_OWORD *)((char *)v138 + 488);
        v183 = v100;
        v101 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v9 + 32))(v9, 0, 0) + 56);
        v102 = DWORD1(v182);
        v103 = DWORD2(v182);
        v104 = SHIDWORD(v182);
        v105 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0, 0);
        v188.__r_.__value_.__r.__words[0] = 0x100000001;
        LODWORD(v188.__r_.__value_.__r.__words[1]) = 1;
        ZinGetOutputTensorDimension(v105 + 48, &v180, (unsigned int *)&v181 + 2, (unsigned int *)&v182 + 1, (int *)&v183, v101 * v103 * (uint64_t)v102 * v104, (int *)&v188, (uint64_t)v161);
        v13 = v118;
        if (!ZinTensorDimensions::IsValid((ZinTensorDimensions *)v161))
          ZinAssertImpl("Invalid output dimension");
        v25 = v97;
        if (v69 && (v106 = *(_QWORD *)(v69 + 136)) != 0)
        {
          ZinObjectNameFactory::CreateName((uint64_t)v157, 2u, &v188);
          ZinIrKernel::DuplicateChannels(v106, (__int128 *)&v188, v112, (uint64_t *)v175);
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v188.__r_.__value_.__l.__data_);
        }
        else
        {
          v175[0] = 0;
        }
        v17 = ZinConvCompositeLayer::CreateDecomposedPartition(v7, &v138, v175, 0, 0, (__int128 *)v161, v126, a2, (const ZinConvLayer *)v157, v128);
        if (!v17)
          ZinAssertImpl("Unexpected null partition!!!");
        v107 = v175[0];
        v175[0] = 0;
        if (v107)
        {
          ZinIrKernel::~ZinIrKernel(v107);
          MEMORY[0x20BD002F8]();
        }
        v108 = v138;
        v138 = 0;
        if (v108)
        {
          ZinIrKernel::~ZinIrKernel(v108);
          MEMORY[0x20BD002F8]();
        }
        goto LABEL_144;
      }
      v40 = v189;
      v39 = v190;
      v41 = v191;
      v42 = v188.__r_.__value_.__l.__size_ + v190 - 1;
      v43 = (int64_t)(v188.__r_.__value_.__r.__words[2] + v41 - 1) % v41;
      v44 = v40 - 1 - (int64_t)(v188.__r_.__value_.__r.__words[0] + v40 - 1) % v40;
      if (v40 - (int64_t)(v188.__r_.__value_.__r.__words[0] + v40 - 1) % v40 >= 0)
        v45 = v189 - (int64_t)(v188.__r_.__value_.__r.__words[0] + v189 - 1) % v189;
      else
        v45 = v44 + 2;
      v46 = v45 >> 1;
      if (v44 < 0)
        v44 = v189 - (int64_t)(v188.__r_.__value_.__r.__words[0] + v189 - 1) % v189;
      v170[0] = v46;
      v170[1] = (unint64_t)v44 >> 1;
      v47 = v190 - 1 - v42 % v190;
      if (v190 - v42 % v190 >= 0)
        v48 = v190 - v42 % v190;
      else
        v48 = v47 + 2;
      v49 = v48 >> 1;
      if (v47 < 0)
        v47 = v190 - v42 % v190;
      v170[2] = v49;
      v170[3] = (unint64_t)v47 >> 1;
      v50 = v191 - 1 - v43;
      if (v191 - v43 >= 0)
        v51 = v191 - v43;
      else
        v51 = v50 + 2;
      v52 = v51 >> 1;
      if (v50 < 0)
        v50 = v191 - v43;
      v170[4] = v52;
      v170[5] = (unint64_t)v50 >> 1;
      v169 = 0;
      v53 = (ZinIrKernel *)v9[17];
      if (v53)
      {
        v54 = *((_QWORD *)v53 + 73);
        if (!v54)
        {
          if (ZinIrKernel::HasZeroPoint(v53))
            ZinAssertImpl("Invalid configuration.");
          UnderlyingType = ZinKernelFormatGetUnderlyingType(*(_DWORD *)(v9[17] + 176));
          ZinIrWeight::FillWeight(UnderlyingType, (int64x2_t *)(v9[17] + 248), 1262703187, (uint64_t *)v161, 1.0);
          v179.__r_.__value_.__r.__words[0] = 0;
          (*(void (**)(ZinIrKernel **__return_ptr, _QWORD, _DWORD *, uint64_t, std::string *))(**(_QWORD **)v161 + 32))(v175, *(_QWORD *)v161, v170, 1262703187, &v179);
          v56 = v175[0];
          v175[0] = 0;
          v57 = v169;
          v169 = (uint64_t)v56;
          if (v57)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
            v58 = v175[0];
            v175[0] = 0;
            if (v58)
              (*(void (**)(ZinIrKernel *))(*(_QWORD *)v58 + 16))(v58);
          }
          v59 = v179.__r_.__value_.__r.__words[0];
          v179.__r_.__value_.__r.__words[0] = 0;
          if (v59)
            std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v179, v59);
          goto LABEL_95;
        }
      }
      else
      {
        v54 = MEMORY[0x248];
      }
      (*(void (**)(_BYTE *__return_ptr, uint64_t, _DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v54 + 32))(v161, v54, v170, 1262703187, (_QWORD *)v53 + 74);
      v70 = *(_QWORD *)v161;
      *(_QWORD *)v161 = 0;
      v71 = v169;
      v169 = v70;
      if (!v71)
      {
LABEL_97:
        ZinObjectNameFactory::CreateName((uint64_t)v171, 2u, (std::string *)v161);
        v73 = std::string::append((std::string *)v161, "_padded_kernel", 0xEuLL);
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v168 = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)v167 = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        if ((v161[23] & 0x80000000) != 0)
          operator delete(*(void **)v161);
        v166 = v186;
        v164 = v184;
        v165 = v185;
        *(_OWORD *)v161 = v180;
        *(_OWORD *)&v161[16] = v181;
        v162 = v182;
        v163 = v183;
        BYTE1(v166) = 0;
        v75 = v188.__r_.__value_.__r.__words[0];
        if ((_DWORD)v40 == 4)
          v75 = (int64_t)(v188.__r_.__value_.__r.__words[0] + v40 - 1) / v40 * v40;
        size = v188.__r_.__value_.__l.__size_;
        if ((_DWORD)v39 == 4)
          size = (int64_t)(v188.__r_.__value_.__l.__size_ + v39 - 1) / v39 * v39;
        v77 = v188.__r_.__value_.__r.__words[2];
        if ((_DWORD)v41 == 4)
          v77 = (int64_t)(v188.__r_.__value_.__r.__words[2] + v41 - 1) / v41 * v41;
        *(_QWORD *)v161 = v75;
        *(_QWORD *)&v161[8] = size;
        *(_QWORD *)&v161[16] = v77;
        if (HIDWORD(v141) == 6)
          v78 = 4;
        else
          v78 = *(_DWORD *)(v169 + 8);
        v160 = v78;
        v175[0] = 0;
        v179.__r_.__value_.__r.__words[0] = 0;
        std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat &,ZinIrConvInfo &,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr)>((__int128 *)v167, &v160, (__int128 *)v161, &v169, (uint64_t *)&v159);
        v122 = v28;
        v123 = v25;
        v79 = *(_QWORD *)(v9[17] + 248);
        v80 = SDWORD1(v182);
        v81 = SDWORD2(v182);
        v82 = SHIDWORD(v182);
        KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache((ZinIrContext *)v9[2]);
        ZinIrKernel::GetWeightDimensions(v159, (uint64_t)&v179);
        v83 = v79 * (int)v82 * (uint64_t)((int)v81 * (int)v80);
        v178[0] = v83;
        v178[1] = v179.__r_.__value_.__l.__size_;
        v178[2] = *((_QWORD *)&v180 + 1);
        v84 = v180;
        v178[3] = v180;
        v178[4] = v181;
        v131 = v179.__r_.__value_.__l.__size_;
        v134 = *((_QWORD *)&v180 + 1);
        details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)v175, v179.__r_.__value_.__l.__size_ * v83 * *((_QWORD *)&v180 + 1) * v180 * v181);
        v120 = v82;
        if (v83 >= 1)
        {
          v85 = 0;
          v86 = 0;
          v87 = (int)v81 * (uint64_t)(int)v80;
          v132 = (v84 - 1) * v80;
          v133 = v84;
          v130 = v83;
          do
          {
            if (v131 >= 1)
            {
              for (i = 0; i != (ZinIrKernel *)v131; i = (ZinIrKernel *)((char *)i + 1))
              {
                if (v134 >= 1)
                {
                  v89 = 0;
                  do
                  {
                    v135 = v89;
                    if (v84 >= 1)
                    {
                      v90 = (v134 + ~v89) * v81;
                      v91 = 40 * v86;
                      v92 = v132;
                      do
                      {
                        v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                 + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v94 = (ZinIrKernel **)(v177 + v91);
                        if (!v93)
                          v94 = v175;
                        ++v86;
                        *v94 = (ZinIrKernel *)(v85 / v87);
                        v94[1] = i;
                        v94[2] = (ZinIrKernel *)(v85 % v87 / v81 + v90);
                        v94[3] = (ZinIrKernel *)(v92 + v85 % v80);
                        v94[4] = 0;
                        v92 -= v80;
                        v91 += 40;
                        --v84;
                      }
                      while (v84);
                    }
                    v89 = v135 + 1;
                    v84 = v133;
                  }
                  while (v135 + 1 != v134);
                }
              }
            }
            ++v85;
          }
          while (v85 != v130);
        }
        (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(v171[0] + 16))(v173, v171, 2);
        ZinIrKernel::ShuffleKernel((uint64_t)v159, (__int128 *)v173, (uint64_t)v175, 1, 1, 1, v80, v81, (uint64_t *)&v138, v120, (uint64_t)v178, a3, KernelSparsityCache, &v183, 1, v122);
        a2 = v115;
        v7 = v116;
        a4 = v114;
        v25 = v123;
        v69 = v119;
        if (v174 < 0)
          operator delete(v173[0]);
        details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)v175);
        v9 = v113;
        if (!v138)
          ZinAssertImpl("Failed to create ShuffledPaddedKernel");
        v95 = v159;
        v159 = 0;
        if (v95)
        {
          ZinIrKernel::~ZinIrKernel(v95);
          MEMORY[0x20BD002F8]();
        }
        if (SHIBYTE(v168) < 0)
          operator delete(v167[0]);
        v96 = v169;
        v169 = 0;
        if (v96)
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
        goto LABEL_131;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
LABEL_95:
      v72 = *(_QWORD *)v161;
      *(_QWORD *)v161 = 0;
      if (v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
      goto LABEL_97;
    }
    (*((void (**)(__int128 *__return_ptr, ZinIrKernel **, _QWORD, _QWORD))*v17 + 10))(&v180, v17, 0, 0);
    v60 = operator new(0x78uLL);
    *(_QWORD *)&v161[16] = v60 + 30;
    v60[28] = v187;
    v61 = v186;
    v62 = v184;
    *((_OWORD *)v60 + 5) = v185;
    *((_OWORD *)v60 + 6) = v61;
    v63 = v181;
    *(_OWORD *)v60 = v180;
    *((_OWORD *)v60 + 1) = v63;
    v64 = v183;
    *((_OWORD *)v60 + 2) = v182;
    *((_OWORD *)v60 + 3) = v64;
    *((_OWORD *)v60 + 4) = v62;
    *(_QWORD *)v161 = v60;
    *(_QWORD *)&v161[8] = v60 + 30;
    v65 = *(_QWORD *)(a5 + 8);
    v66 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v9 + 32))(v9, 0, 0);
    v125 = v125 & 0xFFFFFFFF00000000 | v142;
    PixelShuffleLayer = (ZinIrOpLayer *)ZinBuilder::CreatePixelShuffleLayer(v126, (uint64_t)v157, (uint64_t)v161, (__int128 *)(v65 - 40), *(_DWORD *)(v66 + 88), v141, v142);
    if (*(_QWORD *)v161)
    {
      *(_QWORD *)&v161[8] = *(_QWORD *)v161;
      operator delete(*(void **)v161);
    }
    v188.__r_.__value_.__r.__words[0] = *(_QWORD *)(v7 + 200);
    *(_QWORD *)v161 = &v188;
    *(_QWORD *)&v161[8] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v180, v161);
    v67 = ZinIrOpLayerGraph::AddNode(a2, PixelShuffleLayer, (ZinIrOpLayer ***)&v180);
    *(_QWORD *)&v180 = &unk_24C02BB18;
    if (*((_QWORD *)&v180 + 1))
    {
      *(_QWORD *)&v181 = *((_QWORD *)&v180 + 1);
      operator delete(*((void **)&v180 + 1));
    }
    v68 = (uint64_t)v17;
    v17 = (ZinIrKernel **)PixelShuffleLayer;
    v127 &= v67 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v68, (uint64_t)PixelShuffleLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
LABEL_144:
    ZinDeconvLargeStrides::DeconvStride4SamePad::~DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)__p);
    ++v25;
    v24 = *a4;
  }
  while (0x82FA0BE82FA0BE83 * ((uint64_t)(a4[1] - *a4) >> 3) > v25);
  if (!PixelShuffleLayer)
    goto LABEL_157;
  memset(v136, 0, sizeof(v136));
  v137 = 1065353216;
  v109 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)v7, PixelShuffleLayer, v136);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v136);
  if ((v127 & v109 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)v7, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: Deconv graph manipulation error");
  v110 = 0;
LABEL_149:
  v157[0] = off_24C01FBB0;
  if (v158 < 0)
    operator delete((void *)v157[1]);
  return v110;
}

void sub_206EB9DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a47);
  STACK[0x318] = (unint64_t)off_24C01FBB0;
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  _Unwind_Resume(a1);
}

ZinDeconvLargeStrides::DeconvStride3And4 *ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4(ZinDeconvLargeStrides::DeconvStride3And4 *this, ZinIrConcatUnitInfo *a2)
{
  __int128 v4;
  int v5;
  int v6;

  *(_DWORD *)this = 3;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C01EAB0;
  v6 = *((_DWORD *)a2 + 20);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 84);
  *((_DWORD *)this + 22) = v6;
  return this;
}

void sub_206EBA1A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinDeconvLargeStrides::DeconvStride3And4 *ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4(ZinDeconvLargeStrides::DeconvStride3And4 *this, ZinIrInputViewUnitInfo *a2)
{
  __int128 v4;
  int v5;

  *(_DWORD *)this = 17;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C021970;
  *(_OWORD *)((char *)this + 88) = *((_OWORD *)a2 + 5);
  return this;
}

void sub_206EBA284(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4(ZinDeconvLargeStrides::DeconvStride3And4 *this)
{
  int v2;
  void **v3;
  void *v4;
  void *v5;

  v2 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1)
  {
    *((_QWORD *)this + 1) = off_24C01ED88;
    v3 = (void **)((char *)this + 8);
    v4 = (void *)*((_QWORD *)this + 20);
    if (v4)
    {
      *((_QWORD *)this + 21) = v4;
      operator delete(v4);
    }
    v5 = (void *)*((_QWORD *)this + 17);
    if (v5)
    {
      *((_QWORD *)this + 18) = v5;
      operator delete(v5);
    }
    goto LABEL_9;
  }
  if (v2 == 17 || v2 == 3)
  {
    v3 = (void **)((char *)this + 8);
LABEL_9:
    ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  }
}

ZinDeconvLargeStrides::DeconvStride3And4 *ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4(ZinDeconvLargeStrides::DeconvStride3And4 *this, const ZinDeconvLargeStrides::DeconvStride3And4 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  switch(v4)
  {
    case 1:
      ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinDeconvLargeStrides::DeconvStride3And4 *)((char *)this + 8), (const ZinDeconvLargeStrides::DeconvStride3And4 *)((char *)a2 + 8));
      *((_QWORD *)this + 1) = off_24C01CAD8;
      v6 = *(_OWORD *)((char *)a2 + 248);
      v7[16] = *(_OWORD *)((char *)a2 + 264);
      *(_OWORD *)((char *)this + 248) = v6;
      v8 = *(_OWORD *)((char *)a2 + 280);
      v9 = *(_OWORD *)((char *)a2 + 296);
      v10 = *(_OWORD *)((char *)a2 + 312);
      *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
      v7[18] = v9;
      v7[19] = v10;
      v7[17] = v8;
      break;
    case 17:
      *((_QWORD *)this + 1) = off_24C017CA0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v11 = *((_OWORD *)a2 + 1);
        *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
        *((_OWORD *)this + 1) = v11;
      }
      v14 = *((_DWORD *)a2 + 10);
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 10) = v14;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      *((_QWORD *)this + 1) = off_24C021970;
      *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
      break;
    case 3:
      *((_QWORD *)this + 1) = off_24C017CA0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v5 = *((_OWORD *)a2 + 1);
        *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
        *((_OWORD *)this + 1) = v5;
      }
      v12 = *((_DWORD *)a2 + 10);
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 10) = v12;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      *((_QWORD *)this + 1) = off_24C01EAB0;
      v13 = *((_DWORD *)a2 + 22);
      *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
      *((_DWORD *)this + 22) = v13;
      break;
  }
  return this;
}

void sub_206EBA4F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, int a5, uint64_t a6, char **a7, uint64_t *a8)
{
  uint64_t i;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  int AbsMod;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  __int128 v143;
  __int128 v144;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  __int128 v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  _OWORD v167[3];
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  void (**v171)(ZinIrKernelUnitInfo *__hidden);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 __p;
  uint64_t v187;
  int v188;
  char v189;
  __int16 v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  _BYTE v197[64];
  _BYTE v198[28];
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  _OWORD v205[2];
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  v13 = *a8;
  for (i = a8[1];
        i != v13;
  a8[1] = v13;
  v14 = *a7;
  a7[1] = *a7;
  v16 = (uint64_t)(a7 + 2);
  v15 = (unint64_t)a7[2];
  if ((unint64_t)v14 >= v15)
  {
    v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - (_QWORD)v14) >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= 1)
      v21 = 1;
    if (v20 >= 0x333333333333333)
      v22 = 0x666666666666666;
    else
      v22 = v21;
    v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a7 + 2), v22);
    v25 = &v23[40 * v24];
    v26 = *(_OWORD *)a1;
    v27 = *(_OWORD *)(a1 + 16);
    *((_QWORD *)v23 + 4) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v23 = v26;
    *((_OWORD *)v23 + 1) = v27;
    v19 = v23 + 40;
    v29 = *a7;
    v28 = a7[1];
    if (v28 != *a7)
    {
      do
      {
        v30 = *(_OWORD *)(v28 - 40);
        v31 = *(_OWORD *)(v28 - 24);
        *((_QWORD *)v23 - 1) = *((_QWORD *)v28 - 1);
        *(_OWORD *)(v23 - 24) = v31;
        *(_OWORD *)(v23 - 40) = v30;
        v23 -= 40;
        v28 -= 40;
      }
      while (v28 != v29);
      v28 = *a7;
    }
    *a7 = v23;
    a7[1] = v19;
    a7[2] = v25;
    if (v28)
      operator delete(v28);
  }
  else
  {
    v17 = *(_OWORD *)a1;
    v18 = *(_OWORD *)(a1 + 16);
    *((_QWORD *)v14 + 4) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v14 = v17;
    *((_OWORD *)v14 + 1) = v18;
    v19 = v14 + 40;
  }
  a7[1] = v19;
  if ((*(_BYTE *)(a4 + 272) & 0x40) == 0)
    ZinAssertImpl("Error: only deconv is supported");
  v32 = *(_DWORD *)(a4 + 168);
  v163 = *(int *)(a4 + 164);
  if ((int)v163 <= 2 && v32 <= 2)
    ZinAssertImpl("Error: deconv does not have large kernel stride in width or height axis");
  if (*(_DWORD *)(a4 + 172) != 1)
    ZinAssertImpl("Error: deconv with stride > 1 is not supported along depth axis");
  if (*(_QWORD *)(a4 + 104) != 1)
    ZinAssertImpl("Error: deconv with stride > 2 does not support kernel depth > 1");
  if (*(_DWORD *)(a4 + 208) != 1 || *(_DWORD *)(a4 + 212) != 1 || *(_DWORD *)(a4 + 216) != 1)
    ZinAssertImpl("Dilation factor should be 1 for Deconv with stride > 2");
  v33 = v32;
  v34 = a2[2];
  v35 = a2[3];
  v36 = *(int *)(a4 + 164);
  v37 = v163 - v35 % v163;
  if (v35 % v163)
    v38 = v163 - v35 % v163;
  else
    v38 = 0;
  if (!(v35 % v163))
    v37 = 0;
  v39 = v33 - v34 % v33;
  if (v34 % v33)
    v40 = v33 - v34 % v33;
  else
    v40 = 0;
  if (!(v34 % v33))
    v39 = 0;
  if ((int)v33 >= 1)
  {
    v146 = (uint64_t)(a7 + 2);
    v41 = 0;
    v157 = a2[4];
    v158 = *a2;
    v164 = *(_DWORD *)(a4 + 184);
    v156 = *(_DWORD *)(a4 + 192);
    v155 = *(_DWORD *)(a4 + 196);
    v148 = *(_DWORD *)(a4 + 200);
    v147 = *(_QWORD *)(a4 + 224);
    v42 = *(_DWORD *)(a4 + 176);
    v154 = v38 + *(_DWORD *)(a4 + 180);
    v43 = v35 + v37;
    v153 = v40 + *(_DWORD *)(a4 + 188);
    v159 = *(_QWORD *)(a4 + 88);
    v44 = v163 + ~(v42 % (int)v163);
    v152 = *(_QWORD *)(a4 + 96) + v44;
    v151 = v44 + v42;
    v149 = a2[1];
    *((_QWORD *)&v150 + 1) = v43 / v163;
    *(_QWORD *)&v150 = (v34 + v39) / v33;
    v45 = *(int *)(a4 + 164);
    do
    {
      v172 = 0;
      v173 = 0;
      v175 = 0;
      v174 = 0;
      v176 = 0u;
      v177 = 0u;
      v179 = 0;
      LODWORD(v180) = -1;
      v181 = -1;
      v182 = -1;
      v183 = -1;
      v184 = 0u;
      v185 = 0u;
      __p = 0u;
      v187 = 0;
      v188 = 1;
      v189 = 0;
      v190 = 0;
      v191 = -1;
      v192 = -1;
      v193 = -1;
      v194 = -1;
      v195 = 0x3F80000000000006;
      v178 = -1;
      v171 = off_24C01CAD8;
      v197[4] = 0;
      *(int64x2_t *)&v197[8] = vdupq_n_s64(1uLL);
      memset(v198, 0, 24);
      *(_DWORD *)&v198[24] = 1;
      v196 = 0;
      *(_DWORD *)v197 = 1;
      *(_QWORD *)&v46 = 0x100000001;
      *((_QWORD *)&v46 + 1) = 0x100000001;
      *(_OWORD *)&v197[24] = *(_OWORD *)&v197[8];
      *(_OWORD *)&v197[40] = v46;
      *(_QWORD *)&v197[56] = 0x100000001;
      AbsMod = GetAbsMod(-v152, v45);
      v48 = v33 + ~(v164 % (int)v33);
      v49 = v159 + v48;
      v50 = GetAbsMod(-v49, v33);
      v51 = GetAbsMod(-1, 1);
      *(_QWORD *)&v197[16] = (v152 + AbsMod) / v163;
      *(_QWORD *)&v197[24] = (v49 + v50) / v33;
      *(_QWORD *)&v197[32] = v51 + 1;
      v52 = v154 + AbsMod;
      v45 = v163;
      *(_DWORD *)v198 = v151 / (int)v163;
      *(_DWORD *)&v198[4] = v52 / (int)v163;
      *(_DWORD *)&v198[8] = (v48 + v164) / (int)v33;
      *(_DWORD *)&v198[12] = (v153 + v50) / (int)v33;
      *(_DWORD *)&v198[16] = v156;
      *(_DWORD *)&v198[20] = v51 + v155;
      v169 = v150;
      v170 = v157;
      *(_QWORD *)&v168 = v158;
      *((_QWORD *)&v168 + 1) = v149 * v163;
      *(_QWORD *)&v199 = 0x100000001;
      DWORD2(v199) = 1;
      v165 = 0x100000001;
      v166 = 1;
      ZinGetOutputTensorDimension(a1, &v197[16], (unsigned int *)&v197[52], (unsigned int *)&v199, (int *)v198, v149 * v163, (int *)&v165, (uint64_t)v167);
      if (!ZinTensorDimensionsEqual(v167, &v168))
        ZinAssertImpl("Error: large kernel stride decomposition fails");
      HIDWORD(v179) = a5;
      v178 = v149 * *(int *)&v197[52];
      *(_QWORD *)&v197[8] = v147;
      *(_DWORD *)&v198[24] = v148;
      DWORD2(v177) = a3;
      v53 = (unint64_t)a7[1];
      v54 = (unint64_t)a7[2];
      if (v53 >= v54)
      {
        v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - (_QWORD)*a7) >> 3);
        v59 = v58 + 1;
        if (v58 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - (_QWORD)*a7) >> 3);
        if (2 * v60 > v59)
          v59 = 2 * v60;
        if (v60 >= 0x333333333333333)
          v61 = 0x666666666666666;
        else
          v61 = v59;
        if (v61)
          v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v146, v61);
        else
          v62 = 0;
        v63 = &v62[40 * v58];
        v64 = v168;
        v65 = v169;
        *((_QWORD *)v63 + 4) = v170;
        *(_OWORD *)v63 = v64;
        *((_OWORD *)v63 + 1) = v65;
        v67 = *a7;
        v66 = a7[1];
        v68 = v63;
        if (v66 != *a7)
        {
          do
          {
            v69 = *(_OWORD *)(v66 - 40);
            v70 = *(_OWORD *)(v66 - 24);
            *((_QWORD *)v68 - 1) = *((_QWORD *)v66 - 1);
            *(_OWORD *)(v68 - 24) = v70;
            *(_OWORD *)(v68 - 40) = v69;
            v68 -= 40;
            v66 -= 40;
          }
          while (v66 != v67);
          v66 = *a7;
        }
        v57 = v63 + 40;
        *a7 = v68;
        a7[1] = v63 + 40;
        a7[2] = &v62[40 * v61];
        if (v66)
          operator delete(v66);
      }
      else
      {
        v55 = v168;
        v56 = v169;
        *(_QWORD *)(v53 + 32) = v170;
        *(_OWORD *)v53 = v55;
        *(_OWORD *)(v53 + 16) = v56;
        v57 = (char *)(v53 + 40);
      }
      a7[1] = v57;
      LODWORD(v199) = 1;
      ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)((char *)&v199 + 8), (const ZinIrKernelUnitInfo *)&v171);
      *((_QWORD *)&v199 + 1) = off_24C01CAD8;
      v203 = *(_OWORD *)&v197[32];
      v204 = *(_OWORD *)&v197[48];
      v205[0] = *(_OWORD *)v198;
      *(_OWORD *)((char *)v205 + 12) = *(_OWORD *)&v198[12];
      v201 = *(_OWORD *)v197;
      v202 = *(_OWORD *)&v197[16];
      v71 = a8[1];
      if (v71 >= a8[2])
      {
        v72 = std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride3And4>(a8, (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
      }
      else
      {
        ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)a8[1], (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
        v72 = v71 + 344;
        a8[1] = v71 + 344;
      }
      a8[1] = v72;
      ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
      v171 = off_24C01ED88;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (*((_QWORD *)&v184 + 1))
      {
        *(_QWORD *)&v185 = *((_QWORD *)&v184 + 1);
        operator delete(*((void **)&v184 + 1));
      }
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v171);
      ++v41;
    }
    while (v41 != (_DWORD)v33);
    v16 = (uint64_t)(a7 + 2);
    v36 = v163;
    if ((int)v33 > 1)
    {
      v173 = 0;
      v174 = 0;
      v176 = 0u;
      v177 = 0u;
      v178 = -1;
      v171 = off_24C01EAB0;
      v172 = 0;
      BYTE4(v179) = 0;
      v175 = 3;
      LODWORD(v179) = 3;
      ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v199, (ZinIrConcatUnitInfo *)&v171);
      v73 = a8[1];
      if (v73 >= a8[2])
      {
        v74 = std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride3And4>(a8, (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
      }
      else
      {
        ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)a8[1], (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
        v74 = v73 + 344;
        a8[1] = v73 + 344;
      }
      a8[1] = v74;
      ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
      v75 = (unint64_t)a7[1];
      v76 = (unint64_t)a7[2];
      v199 = *(_OWORD *)(v75 - 40);
      v77 = *(_QWORD *)(v75 - 24);
      v168 = *(_OWORD *)(v75 - 16);
      v78 = v77 * v33;
      if (v75 >= v76)
      {
        v80 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v75 - (_QWORD)*a7) >> 3);
        v81 = v80 + 1;
        if (v80 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v82 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v76 - (_QWORD)*a7) >> 3);
        if (2 * v82 > v81)
          v81 = 2 * v82;
        if (v82 >= 0x333333333333333)
          v83 = 0x666666666666666;
        else
          v83 = v81;
        if (v83)
          v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v146, v83);
        else
          v84 = 0;
        v85 = &v84[40 * v80];
        v86 = &v84[40 * v83];
        *(_OWORD *)v85 = v199;
        *((_QWORD *)v85 + 2) = v78;
        *(_OWORD *)(v85 + 24) = v168;
        v79 = v85 + 40;
        v88 = *a7;
        v87 = a7[1];
        if (v87 != *a7)
        {
          do
          {
            v89 = *(_OWORD *)(v87 - 40);
            v90 = *(_OWORD *)(v87 - 24);
            *((_QWORD *)v85 - 1) = *((_QWORD *)v87 - 1);
            *(_OWORD *)(v85 - 24) = v90;
            *(_OWORD *)(v85 - 40) = v89;
            v85 -= 40;
            v87 -= 40;
          }
          while (v87 != v88);
          v87 = *a7;
        }
        *a7 = v85;
        a7[1] = v79;
        a7[2] = v86;
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(_OWORD *)v75 = *(_OWORD *)(v75 - 40);
        *(_QWORD *)(v75 + 16) = v78;
        *(_OWORD *)(v75 + 24) = *(_OWORD *)(v75 - 16);
        v79 = (char *)(v75 + 40);
      }
      a7[1] = v79;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v171);
      v36 = v163;
    }
  }
  v91 = (unint64_t)a7[1];
  v92 = (unint64_t)a7[2];
  v168 = *(_OWORD *)(v91 - 40);
  v93 = *(_QWORD *)(v91 - 24);
  v94 = *(_QWORD *)(v91 - 8);
  v95 = *(_QWORD *)(v91 - 16) * v36;
  if (v91 >= v92)
  {
    v97 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v91 - (_QWORD)*a7) >> 3);
    v98 = v97 + 1;
    if (v97 + 1 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v92 - (_QWORD)*a7) >> 3);
    if (2 * v99 > v98)
      v98 = 2 * v99;
    if (v99 >= 0x333333333333333)
      v100 = 0x666666666666666;
    else
      v100 = v98;
    if (v100)
      v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v16, v100);
    else
      v101 = 0;
    v102 = &v101[40 * v97];
    v103 = &v101[40 * v100];
    *(_OWORD *)v102 = v168;
    *((_QWORD *)v102 + 2) = v93;
    *((_QWORD *)v102 + 3) = v95;
    *((_QWORD *)v102 + 4) = v94;
    v96 = v102 + 40;
    v105 = *a7;
    v104 = a7[1];
    if (v104 != *a7)
    {
      do
      {
        v106 = *(_OWORD *)(v104 - 40);
        v107 = *(_OWORD *)(v104 - 24);
        *((_QWORD *)v102 - 1) = *((_QWORD *)v104 - 1);
        *(_OWORD *)(v102 - 24) = v107;
        *(_OWORD *)(v102 - 40) = v106;
        v102 -= 40;
        v104 -= 40;
      }
      while (v104 != v105);
      v104 = *a7;
    }
    *a7 = v102;
    a7[1] = v96;
    a7[2] = v103;
    if (v104)
      operator delete(v104);
  }
  else
  {
    *(_OWORD *)v91 = *(_OWORD *)(v91 - 40);
    *(_QWORD *)(v91 + 16) = v93;
    *(_QWORD *)(v91 + 24) = v95;
    *(_QWORD *)(v91 + 32) = v94;
    v96 = (char *)(v91 + 40);
  }
  a7[1] = v96;
  v108 = a2[3];
  if (v95 != v108)
  {
    v175 = 0;
    v173 = 0;
    v174 = 0;
    v176 = 0u;
    v177 = 0u;
    v178 = -1;
    v171 = off_24C021970;
    v172 = 0;
    v180 = 0x400000001;
    LODWORD(v179) = 0;
    HIDWORD(v179) = v108;
    ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v199, (ZinIrInputViewUnitInfo *)&v171);
    v109 = a8[1];
    if (v109 >= a8[2])
    {
      v110 = std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride3And4>(a8, (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
    }
    else
    {
      ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)a8[1], (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
      v110 = v109 + 344;
      a8[1] = v109 + 344;
    }
    a8[1] = v110;
    ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
    v111 = (unint64_t)a7[1];
    v112 = (unint64_t)a7[2];
    v199 = *(_OWORD *)(v111 - 40);
    v200 = *(_QWORD *)(v111 - 24);
    v113 = *(_QWORD *)(v111 - 8);
    v114 = a2[3];
    if (v111 >= v112)
    {
      v116 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v111 - (_QWORD)*a7) >> 3);
      v117 = v116 + 1;
      if (v116 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v118 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v112 - (_QWORD)*a7) >> 3);
      if (2 * v118 > v117)
        v117 = 2 * v118;
      if (v118 >= 0x333333333333333)
        v119 = 0x666666666666666;
      else
        v119 = v117;
      if (v119)
        v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v16, v119);
      else
        v120 = 0;
      v121 = &v120[40 * v116];
      v122 = &v120[40 * v119];
      *((_QWORD *)v121 + 2) = v200;
      *(_OWORD *)v121 = v199;
      *((_QWORD *)v121 + 3) = v114;
      *((_QWORD *)v121 + 4) = v113;
      v115 = v121 + 40;
      v124 = *a7;
      v123 = a7[1];
      if (v123 != *a7)
      {
        do
        {
          v125 = *(_OWORD *)(v123 - 40);
          v126 = *(_OWORD *)(v123 - 24);
          *((_QWORD *)v121 - 1) = *((_QWORD *)v123 - 1);
          *(_OWORD *)(v121 - 24) = v126;
          *(_OWORD *)(v121 - 40) = v125;
          v121 -= 40;
          v123 -= 40;
        }
        while (v123 != v124);
        v123 = *a7;
      }
      *a7 = v121;
      a7[1] = v115;
      a7[2] = v122;
      if (v123)
        operator delete(v123);
    }
    else
    {
      *(_OWORD *)v111 = *(_OWORD *)(v111 - 40);
      *(_QWORD *)(v111 + 16) = *(_QWORD *)(v111 - 24);
      *(_QWORD *)(v111 + 24) = v114;
      *(_QWORD *)(v111 + 32) = v113;
      v115 = (char *)(v111 + 40);
    }
    a7[1] = v115;
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v171);
  }
  v127 = a2[2];
  if (v93 != v127)
  {
    v175 = 0;
    v173 = 0;
    v174 = 0;
    v176 = 0u;
    v177 = 0u;
    v178 = -1;
    v171 = off_24C021970;
    v172 = 0;
    v180 = 0x300000001;
    LODWORD(v179) = 0;
    HIDWORD(v179) = v127;
    ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v199, (ZinIrInputViewUnitInfo *)&v171);
    v128 = a8[1];
    if (v128 >= a8[2])
    {
      v129 = std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride3And4>(a8, (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
    }
    else
    {
      ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)a8[1], (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
      v129 = v128 + 344;
      a8[1] = v128 + 344;
    }
    a8[1] = v129;
    ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v199);
    v130 = (unint64_t)a7[1];
    v131 = (unint64_t)a7[2];
    v199 = *(_OWORD *)(v130 - 40);
    v167[0] = *(_OWORD *)(v130 - 16);
    v132 = a2[2];
    if (v130 >= v131)
    {
      v134 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v130 - (_QWORD)*a7) >> 3);
      v135 = v134 + 1;
      if (v134 + 1 > 0x666666666666666)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v136 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v131 - (_QWORD)*a7) >> 3);
      if (2 * v136 > v135)
        v135 = 2 * v136;
      if (v136 >= 0x333333333333333)
        v137 = 0x666666666666666;
      else
        v137 = v135;
      if (v137)
        v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v16, v137);
      else
        v138 = 0;
      v139 = &v138[40 * v134];
      v140 = &v138[40 * v137];
      *(_OWORD *)v139 = v199;
      *((_QWORD *)v139 + 2) = v132;
      *(_OWORD *)(v139 + 24) = v167[0];
      v133 = v139 + 40;
      v142 = *a7;
      v141 = a7[1];
      if (v141 != *a7)
      {
        do
        {
          v143 = *(_OWORD *)(v141 - 40);
          v144 = *(_OWORD *)(v141 - 24);
          *((_QWORD *)v139 - 1) = *((_QWORD *)v141 - 1);
          *(_OWORD *)(v139 - 24) = v144;
          *(_OWORD *)(v139 - 40) = v143;
          v139 -= 40;
          v141 -= 40;
        }
        while (v141 != v142);
        v141 = *a7;
      }
      *a7 = v139;
      a7[1] = v133;
      a7[2] = v140;
      if (v141)
        operator delete(v141);
    }
    else
    {
      *(_OWORD *)v130 = *(_OWORD *)(v130 - 40);
      *(_QWORD *)(v130 + 16) = v132;
      *(_OWORD *)(v130 + 24) = *(_OWORD *)(v130 - 16);
      v133 = (char *)(v130 + 40);
    }
    a7[1] = v133;
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v171);
  }
  return 0;
}

void sub_206EBB2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&STACK[0x2B0]);
  ZinIrUnitInfo::~ZinIrUnitInfo(&a53);
  _Unwind_Resume(a1);
}

uint64_t ZinDeconvLargeStrides::ApplyDRAMDecomposition(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  size_t v6;
  _BYTE *v7;
  const void *v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  __n128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  std::string *v29;
  const void *v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int64x2_t v52;
  ZinIrKernel *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  std::string::size_type v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t **v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  size_t v69;
  std::string *v70;
  const void *v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  unint64_t v86;
  const void **v87;
  int v88;
  __n128 v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t i;
  uint64_t j;
  uint64_t v100;
  uint64_t v101;
  int v102;
  __int128 *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  std::string::size_type v107;
  std::string::size_type v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  int64x2_t v114;
  char *v115;
  std::string::size_type v116;
  std::string::size_type v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  ZinIrTensor *v122;
  uint64_t Interleave;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  _QWORD *v141;
  int v142;
  uint64_t v143;
  __int128 v144;
  ZinIrTensor *v145;
  BOOL IsLiveOut;
  ZinIrTensor *v147;
  BOOL v148;
  ZinIrTensor *v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  std::string::size_type v154;
  std::string::size_type v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  std::string::size_type v162;
  std::string::size_type v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t Hal;
  _QWORD *v171;
  ZinIrKernel **v172;
  char *v173;
  void *v174;
  int64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  ZinIrKernel *v183;
  ZinIrKernel *v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  char v189;
  int v190;
  _DWORD *v191;
  ZinIrOpLayer *Reshape;
  _BOOL4 v193;
  int v194;
  uint64_t v195;
  int v196;
  ZinIrOpLayer *View;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  _BOOL4 v201;
  uint64_t v202;
  ZinIrOpLayer *v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  _BOOL4 v207;
  int v208;
  uint64_t v210;
  char v211;
  char *__format;
  uint64_t *v213;
  const void *v214;
  uint64_t v215;
  const void **v217;
  uint64_t v218;
  ZinKernelSparsityCache *KernelSparsityCache;
  int v220;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v227;
  int64x2_t v228;
  uint64_t v229;
  int __val[2];
  uint64_t v231;
  int64_t v232;
  int v233;
  int64x2_t v234;
  uint64_t v235;
  _OWORD v236[2];
  int v237;
  _OWORD v238[2];
  uint64_t v239;
  int64x2_t v240;
  int64x2_t v241;
  uint64_t v242;
  _OWORD v243[2];
  uint64_t v244;
  int64x2_t v245;
  int64x2_t v246;
  uint64_t v247;
  _QWORD *v248;
  const void **v249;
  std::string v250;
  std::string v251;
  char v252;
  _BYTE __p[44];
  int v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int v259;
  uint64_t v260;
  char v261;
  char v262;
  int v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  _BYTE v272[28];
  void *v273;
  void *v274;
  unint64_t v275;
  int64x2_t v276;
  char *v277;
  uint64_t v278;
  void *v279[2];
  int64_t v280;
  int v281;
  int v282;
  int v283[10];
  char v284;
  _QWORD v285[3];
  char v286;
  std::string v287;
  char v288;
  _BYTE v289[32];
  _BYTE v290[32];
  __int128 v291;
  __int128 v292;
  uint64_t v293;
  std::string v294;
  __int128 v295;
  std::string v296;
  uint64_t v297;
  _BYTE v298[32];
  char **v299;
  int v300;
  char v301;
  std::string v302;
  uint64_t v303;
  uint64_t v304;
  std::string v305;
  char v306;
  uint64_t v307;

  v307 = *MEMORY[0x24BDAC8D0];
  if (a4[1] == *a4)
    ZinAssertImpl("Error: failed to get the decomposed conv info");
  v5 = *(_QWORD *)(a1 + 200);
  v223 = **(_QWORD **)(a1 + 88);
  v224 = *(_QWORD *)(a1 + 16);
  if (*(char *)(a1 + 47) >= 0)
    v6 = *(unsigned __int8 *)(a1 + 47);
  else
    v6 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)v298, v6 + 2);
  if (v298[23] >= 0)
    v7 = v298;
  else
    v7 = *(_BYTE **)v298;
  if (v6)
  {
    if (*(char *)(a1 + 47) >= 0)
      v8 = (const void *)(a1 + 24);
    else
      v8 = *(const void **)(a1 + 24);
    memmove(v7, v8, v6);
  }
  strcpy(&v7[v6], "__");
  std::string::basic_string[abi:ne180100]<0>(&v295, "stride_3_4");
  v9 = std::string::append((std::string *)&v295, "_xfm", 4uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v280 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v279 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v280 >= 0)
    v11 = v279;
  else
    v11 = (void **)v279[0];
  if (v280 >= 0)
    v12 = HIBYTE(v280);
  else
    v12 = (std::string::size_type)v279[1];
  v13 = std::string::append((std::string *)v298, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(_QWORD *)&v289[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)v289 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append((std::string *)v289, "_", 1uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = ZinObjectNameFactory::ZinObjectNameFactory(v285, __p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v289[23] & 0x80000000) != 0)
    operator delete(*(void **)v289);
  if (SHIBYTE(v280) < 0)
    operator delete(v279[0]);
  if (v296.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)v295);
  if ((v298[23] & 0x80000000) != 0)
    operator delete(*(void **)v298);
  (*(void (**)(void **__return_ptr, uint64_t, __n128))(*(_QWORD *)v5 + 136))(v279, v5, v17);
  if (!v284)
    ZinAssertImpl("Error: failed to get the conv kernel info");
  v225 = v282;
  if (v282 <= 2)
    v18 = 1;
  else
    v18 = v282;
  v213 = (uint64_t *)(v5 + 136);
  ZinLargeKernelUtils::CreatePaddedWeight((ZinIrKernel **)(v5 + 136), &v281, v283, 0, &v278);
  v19 = v278;
  if (!v278)
    ZinAssertImpl("Failed to create padded weight");
  v20 = *a4;
  v278 = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v223 + 32))(v223, 0, 0);
  v276 = 0uLL;
  v277 = 0;
  v257 = 0x100000001;
  v263 = 0;
  *(_OWORD *)__p = *(_OWORD *)(v20 + 264);
  v21 = *(_QWORD *)(v20 + 280);
  v255 = *(_OWORD *)(v20 + 312);
  v256 = *(_QWORD *)(v20 + 328);
  v22 = *(_QWORD *)(v20 + 300);
  *(_QWORD *)&__p[16] = v21;
  *(_QWORD *)&__p[24] = v22;
  LODWORD(v22) = *(_DWORD *)(v20 + 308);
  *(_QWORD *)&__p[36] = 0x100000001;
  *(_DWORD *)&__p[32] = v22;
  v254 = 1;
  v261 = *(_BYTE *)(v20 + 252);
  v262 = 0;
  v260 = *(_QWORD *)(v20 + 256);
  LODWORD(v22) = *(_DWORD *)(v20 + 336);
  v258 = 1;
  v259 = v22;
  v222 = a1;
  v214 = (const void *)(a1 + 24);
  v233 = v18;
  if (*(_DWORD *)(v20 + 92) == 6)
    v23 = 4;
  else
    v23 = *(_DWORD *)(v19 + 8);
  v24 = v225;
  v227 = v5;
  if ((int)v225 >= 1)
  {
    v25 = 0;
    v26 = *v213;
    v27 = (const void *)(v5 + 24);
    v234 = vdupq_n_s64(1uLL);
    do
    {
      *(_QWORD *)&v289[24] = 0;
      *(_OWORD *)v289 = 0u;
      *(_QWORD *)v290 = 0;
      *(_QWORD *)&v289[16] = v25;
      *(_OWORD *)&v290[8] = *(_OWORD *)(v19 + 56);
      *(_QWORD *)&v290[24] = *(_QWORD *)(v19 + 72) / v24;
      v291 = *(_OWORD *)(v19 + 80);
      v295 = (__int128)v234;
      v296.__r_.__value_.__r.__words[0] = v24;
      *(int64x2_t *)&v296.__r_.__value_.__r.__words[1] = v234;
      if (*(char *)(v5 + 47) >= 0)
        v28 = *(unsigned __int8 *)(v5 + 47);
      else
        v28 = *(_QWORD *)(v5 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&v287, v28 + 1);
      if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v287;
      else
        v29 = (std::string *)v287.__r_.__value_.__r.__words[0];
      if (v28)
      {
        if (*(char *)(v227 + 47) >= 0)
          v30 = v27;
        else
          v30 = *(const void **)(v227 + 24);
        memmove(v29, v30, v28);
      }
      *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + v28) = 95;
      std::to_string(&v251, v25);
      if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v251;
      else
        v31 = (std::string *)v251.__r_.__value_.__r.__words[0];
      if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v251.__r_.__value_.__r.__words[2]);
      else
        size = v251.__r_.__value_.__l.__size_;
      v33 = std::string::append(&v287, (const std::string::value_type *)v31, size);
      v5 = v227;
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v302.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v302.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v302, "_", 1uLL);
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      *(_QWORD *)&v298[16] = *((_QWORD *)&v35->__r_.__value_.__l + 2);
      *(_OWORD *)v298 = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(&v305, v298);
      if ((v298[23] & 0x80000000) != 0)
        operator delete(*(void **)v298);
      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v302.__r_.__value_.__l.__data_);
      if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v251.__r_.__value_.__l.__data_);
      if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v287.__r_.__value_.__l.__data_);
      ZinObjectNameFactory::CreateName((uint64_t)&v305, 2u, &v302);
      ZinIrWeight::SliceWeight(v19, (uint64_t)v289, (uint64_t *)&v295, (uint64_t *)&v287);
      if (!v287.__r_.__value_.__r.__words[0])
        ZinAssertImpl("Failed to create sliced padded weight");
      v37 = *(_QWORD *)(v26 + 568);
      if (v37)
        std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v37, (uint64_t *)&v251);
      else
        v251.__r_.__value_.__r.__words[0] = 0;
      v38 = *(_QWORD *)(v26 + 592);
      if (v38)
        std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v38, (uint64_t *)&v294);
      else
        v294.__r_.__value_.__r.__words[0] = 0;
      v39 = (void *)operator new();
      ZinIrKernel::ZinIrKernel((uint64_t)v39, (__int128 *)&v302, v23, (__int128 *)__p, (uint64_t *)&v287, (uint64_t *)&v251, (uint64_t *)&v294, 0, 2);
      v273 = v39;
      v40 = v276.i64[1];
      if (v276.i64[1] >= (unint64_t)v277)
      {
        v41 = (v276.i64[1] - v276.i64[0]) >> 3;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v43 = (uint64_t)&v277[-v276.i64[0]];
        if ((uint64_t)&v277[-v276.i64[0]] >> 2 > v42)
          v42 = v43 >> 2;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        v299 = &v277;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v277, v44);
        else
          v45 = 0;
        v46 = &v45[8 * v41];
        v47 = &v45[8 * v44];
        *(_QWORD *)&v298[24] = v47;
        v273 = 0;
        *(_QWORD *)v46 = v39;
        v48 = v46 + 8;
        *(_QWORD *)&v298[16] = v46 + 8;
        v49 = (_QWORD *)v276.i64[1];
        v50 = (_QWORD *)v276.i64[0];
        if (v276.i64[1] == v276.i64[0])
        {
          v53 = 0;
          v52 = vdupq_n_s64(v276.u64[1]);
        }
        else
        {
          do
          {
            v51 = *--v49;
            *v49 = 0;
            *((_QWORD *)v46 - 1) = v51;
            v46 -= 8;
          }
          while (v49 != v50);
          v52 = v276;
          v48 = *(_QWORD **)&v298[16];
          v47 = *(char **)&v298[24];
          v53 = (ZinIrKernel *)v273;
        }
        v276.i64[0] = (uint64_t)v46;
        v276.i64[1] = (uint64_t)v48;
        *(int64x2_t *)&v298[8] = v52;
        v54 = v277;
        v277 = v47;
        *(_QWORD *)&v298[24] = v54;
        *(_QWORD *)v298 = v52.i64[0];
        std::__split_buffer<std::unique_ptr<ZinIrKernel>>::~__split_buffer((uint64_t)v298);
        v276.i64[1] = (uint64_t)v48;
        v24 = v225;
        if (v53)
        {
          ZinIrKernel::~ZinIrKernel(v53);
          MEMORY[0x20BD002F8]();
        }
      }
      else
      {
        *(_QWORD *)v276.i64[1] = v39;
        v276.i64[1] = v40 + 8;
      }
      v55 = v294.__r_.__value_.__r.__words[0];
      v294.__r_.__value_.__r.__words[0] = 0;
      if (v55)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v294, v55);
      v56 = v251.__r_.__value_.__r.__words[0];
      v251.__r_.__value_.__r.__words[0] = 0;
      if (v56)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v251, v56);
      v57 = v287.__r_.__value_.__r.__words[0];
      v287.__r_.__value_.__r.__words[0] = 0;
      if (v57)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v57 + 16))(v57);
      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v302.__r_.__value_.__l.__data_);
      v305.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
      if (v306 < 0)
        operator delete((void *)v305.__r_.__value_.__l.__size_);
      ++v25;
    }
    while (v25 != v24);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  if (v24 != (v276.i64[1] - v276.i64[0]) >> 3)
    ZinAssertImpl("Error: failed to slice the kernel");
  v274 = 0;
  v273 = 0;
  v275 = 0;
  v58 = *a4;
  v59 = v222;
  v60 = a2;
  if (a4[1] == *a4)
LABEL_309:
    ZinAssertImpl("Error: failed to apply the decomposed components");
  v61 = 0;
  v62 = 0;
  v215 = *(_QWORD *)(v222 + 208);
  v217 = (const void **)(v5 + 24);
  v228 = vdupq_n_s64(1uLL);
  v231 = v24;
  __format = "Invalid output dimension";
  do
  {
    v63 = *(_DWORD *)(v58 + 344 * v61);
    *(_QWORD *)__val = v61;
    if (v63 == 3)
    {
      if (v24 != ((_BYTE *)v274 - (_BYTE *)v273) >> 3)
        ZinAssertImpl("Error: failed to slice the kernel");
      memset(&v287, 0, sizeof(v287));
      memset(&v251, 0, sizeof(v251));
      v104 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v273 + 32))(*(_QWORD *)v273, 0, 0);
      v105 = *(_OWORD *)(v104 + 48);
      *(_OWORD *)&v296.__r_.__value_.__l.__data_ = *(_OWORD *)(v104 + 64);
      v295 = v105;
      v296.__r_.__value_.__r.__words[2] = *(_QWORD *)(v104 + 80);
      v296.__r_.__value_.__r.__words[0] = 0;
      if ((int)v24 >= 1)
      {
        v106 = 0;
        do
        {
          v107 = v251.__r_.__value_.__l.__size_;
          if (v251.__r_.__value_.__l.__size_ >= v251.__r_.__value_.__r.__words[2])
          {
            v109 = 0xCCCCCCCCCCCCCCCDLL
                 * ((uint64_t)(v251.__r_.__value_.__l.__size_ - v251.__r_.__value_.__r.__words[0]) >> 4);
            v110 = v109 + 1;
            if (v109 + 1 > 0x333333333333333)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL
               * ((uint64_t)(v251.__r_.__value_.__r.__words[2] - v251.__r_.__value_.__r.__words[0]) >> 4) > v110)
              v110 = 0x999999999999999ALL
                   * ((uint64_t)(v251.__r_.__value_.__r.__words[2] - v251.__r_.__value_.__r.__words[0]) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL
               * ((uint64_t)(v251.__r_.__value_.__r.__words[2] - v251.__r_.__value_.__r.__words[0]) >> 4) >= 0x199999999999999)
              v111 = 0x333333333333333;
            else
              v111 = v110;
            if (v111)
              v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v251.__r_.__value_.__r.__words[2], v111);
            else
              v112 = 0;
            v113 = &v112[80 * v109];
            *(_QWORD *)v113 = 0;
            *((_QWORD *)v113 + 1) = 0;
            *((_QWORD *)v113 + 3) = 0;
            *((_QWORD *)v113 + 4) = 0;
            *((_QWORD *)v113 + 2) = v106;
            v114 = vdupq_n_s64(1uLL);
            *(int64x2_t *)(v113 + 40) = v114;
            *((_QWORD *)v113 + 7) = v24;
            *((int64x2_t *)v113 + 4) = v114;
            v115 = (char *)v251.__r_.__value_.__l.__size_;
            v116 = v251.__r_.__value_.__r.__words[0];
            v117 = (std::string::size_type)v113;
            if (v251.__r_.__value_.__l.__size_ != v251.__r_.__value_.__r.__words[0])
            {
              do
              {
                *(_OWORD *)(v117 - 80) = *((_OWORD *)v115 - 5);
                v118 = *((_OWORD *)v115 - 4);
                v119 = *((_OWORD *)v115 - 3);
                v120 = *((_OWORD *)v115 - 1);
                *(_OWORD *)(v117 - 32) = *((_OWORD *)v115 - 2);
                *(_OWORD *)(v117 - 16) = v120;
                *(_OWORD *)(v117 - 64) = v118;
                *(_OWORD *)(v117 - 48) = v119;
                v117 -= 80;
                v115 -= 80;
              }
              while (v115 != (char *)v116);
              v115 = (char *)v116;
            }
            v108 = (std::string::size_type)(v113 + 80);
            v251.__r_.__value_.__r.__words[0] = v117;
            v251.__r_.__value_.__l.__size_ = (std::string::size_type)(v113 + 80);
            v251.__r_.__value_.__r.__words[2] = (std::string::size_type)&v112[80 * v111];
            if (v115)
              operator delete(v115);
          }
          else
          {
            *(_OWORD *)v251.__r_.__value_.__l.__size_ = 0uLL;
            *(_QWORD *)(v107 + 24) = 0;
            *(_QWORD *)(v107 + 32) = 0;
            *(_QWORD *)(v107 + 16) = v106;
            *(int64x2_t *)(v107 + 40) = v228;
            *(_QWORD *)(v107 + 56) = v24;
            v108 = v107 + 80;
            *(int64x2_t *)(v107 + 64) = v228;
          }
          v251.__r_.__value_.__l.__size_ = v108;
          v121 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v273 + 32))(*(_QWORD *)v273, 0, 0);
          v296.__r_.__value_.__r.__words[0] += *(_QWORD *)(v121 + 64);
          ++v106;
        }
        while (v106 != v231);
      }
      v122 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v273 + 32))(*(_QWORD *)v273, 0, 0);
      Interleave = ZinIrTensor::GetInterleave(v122);
      v125 = v124;
      DimensionOrderHint::DimensionOrderHint(&v302, 2);
      v126 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
      ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)&v295, *(_DWORD *)(v126 + 88), 2, (uint64_t)&v302, *(_QWORD *)(a3 + 528), Interleave, v125, (int64x2_t *)&v305);
      v127 = operator new();
      ZinIrTensor::MirInfo::MirInfo(v127, 2, Interleave, v125, &v302, &v305);
      v250.__r_.__value_.__r.__words[0] = 0;
      v248 = (_QWORD *)v127;
      ZinBuilder::CreateConcat(v224, (uint64_t)v285, &v295, (_QWORD **)&v273, (uint64_t)&v251, 6, 1, &v248, (void **)__p, 0);
      if (v287.__r_.__value_.__r.__words[0])
      {
        v287.__r_.__value_.__l.__size_ = v287.__r_.__value_.__r.__words[0];
        operator delete(v287.__r_.__value_.__l.__data_);
      }
      v287 = *(std::string *)__p;
      memset(__p, 0, 24);
      v128 = v248;
      v248 = 0;
      if (v128)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v248, v128);
      v129 = *a4 + 344 * *(_QWORD *)__val;
      v130 = v129 + 8;
      *(_QWORD *)v289 = off_24C017CA0;
      if (*(char *)(v129 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v289[8], *(const std::string::value_type **)(v129 + 16), *(_QWORD *)(v129 + 24));
      }
      else
      {
        v131 = *(_OWORD *)(v129 + 16);
        *(_QWORD *)&v289[24] = *(_QWORD *)(v129 + 32);
        *(_OWORD *)&v289[8] = v131;
      }
      *(_DWORD *)v290 = *(_DWORD *)(v130 + 32);
      memset(&v290[8], 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v290[8], *(__int128 **)(v130 + 40), *(__int128 **)(v130 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v130 + 48) - *(_QWORD *)(v130 + 40)) >> 3));
      v291 = *(_OWORD *)(v130 + 64);
      *(_QWORD *)v289 = off_24C01EAB0;
      v139 = *(_DWORD *)(v130 + 80);
      BYTE4(v292) = *(_BYTE *)(v130 + 84);
      LODWORD(v292) = v139;
      memset(&v294, 0, sizeof(v294));
      v140 = v273;
      v141 = v274;
      while (v140 != v141)
      {
        memset(&v298[3], 0, 20);
        v142 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0)+ 88);
        v143 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0);
        v144 = *(_OWORD *)(v143 + 64);
        *(_OWORD *)&__p[4] = *(_OWORD *)(v143 + 48);
        *(_OWORD *)&__p[20] = v144;
        *(_QWORD *)&__p[36] = *(_QWORD *)(v143 + 80);
        v145 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0);
        if (*((_QWORD *)v145 + 14) || !ZinIrTensor::IsLiveInLiveStateOrConstTensor(v145))
        {
          v147 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0);
          IsLiveOut = ZinIrTensor::IsLiveOut(v147);
        }
        else
        {
          IsLiveOut = 1;
        }
        v148 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0)+ 112) != 0;
        v149 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v140 + 32))(*v140, 0, 0);
        v150 = ZinIrTensor::GetInterleave(v149);
        v152 = v150;
        v153 = v151;
        v154 = v294.__r_.__value_.__l.__size_;
        if (v294.__r_.__value_.__l.__size_ >= v294.__r_.__value_.__r.__words[2])
        {
          v156 = 0xEEEEEEEEEEEEEEEFLL
               * ((uint64_t)(v294.__r_.__value_.__l.__size_ - v294.__r_.__value_.__r.__words[0]) >> 3);
          v157 = v156 + 1;
          if (v156 + 1 > 0x222222222222222)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          if (0xDDDDDDDDDDDDDDDELL
             * ((uint64_t)(v294.__r_.__value_.__r.__words[2] - v294.__r_.__value_.__r.__words[0]) >> 3) > v157)
            v157 = 0xDDDDDDDDDDDDDDDELL
                 * ((uint64_t)(v294.__r_.__value_.__r.__words[2] - v294.__r_.__value_.__r.__words[0]) >> 3);
          if (0xEEEEEEEEEEEEEEEFLL
             * ((uint64_t)(v294.__r_.__value_.__r.__words[2] - v294.__r_.__value_.__r.__words[0]) >> 3) >= 0x111111111111111)
            v158 = 0x222222222222222;
          else
            v158 = v157;
          if (v158)
            v159 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrTensorInfo>>((uint64_t)&v294.__r_.__value_.__r.__words[2], v158);
          else
            v159 = 0;
          v160 = &v159[120 * v156];
          *(_DWORD *)v160 = v142;
          *(_OWORD *)(v160 + 4) = *(_OWORD *)__p;
          *(_OWORD *)(v160 + 20) = *(_OWORD *)&__p[16];
          *((_OWORD *)v160 + 2) = *(_OWORD *)&__p[28];
          v160[48] = IsLiveOut;
          v160[49] = v148;
          *((_QWORD *)v160 + 7) = v152;
          v160[64] = v153;
          v160[72] = 0;
          v160[92] = 0;
          *(_OWORD *)(v160 + 93) = *(_OWORD *)v298;
          *(_QWORD *)(v160 + 108) = *(_QWORD *)&v298[15];
          v161 = (char *)v294.__r_.__value_.__l.__size_;
          v162 = v294.__r_.__value_.__r.__words[0];
          v163 = (std::string::size_type)v160;
          if (v294.__r_.__value_.__l.__size_ != v294.__r_.__value_.__r.__words[0])
          {
            do
            {
              v164 = *(_OWORD *)(v161 - 120);
              v165 = *(_OWORD *)(v161 - 104);
              v166 = *(_OWORD *)(v161 - 88);
              *(_OWORD *)(v163 - 72) = *(_OWORD *)(v161 - 72);
              *(_OWORD *)(v163 - 88) = v166;
              *(_OWORD *)(v163 - 104) = v165;
              *(_OWORD *)(v163 - 120) = v164;
              v167 = *(_OWORD *)(v161 - 56);
              v168 = *(_OWORD *)(v161 - 40);
              v169 = *(_OWORD *)(v161 - 24);
              *(_DWORD *)(v163 - 8) = *((_DWORD *)v161 - 2);
              *(_OWORD *)(v163 - 24) = v169;
              *(_OWORD *)(v163 - 40) = v168;
              *(_OWORD *)(v163 - 56) = v167;
              v163 -= 120;
              v161 -= 120;
            }
            while (v161 != (char *)v162);
            v161 = (char *)v162;
          }
          v155 = (std::string::size_type)(v160 + 120);
          v294.__r_.__value_.__r.__words[0] = v163;
          v294.__r_.__value_.__l.__size_ = (std::string::size_type)(v160 + 120);
          v294.__r_.__value_.__r.__words[2] = (std::string::size_type)&v159[120 * v158];
          if (v161)
            operator delete(v161);
        }
        else
        {
          *(_DWORD *)v294.__r_.__value_.__l.__size_ = v142;
          *(_OWORD *)(v154 + 4) = *(_OWORD *)__p;
          *(_OWORD *)(v154 + 20) = *(_OWORD *)&__p[16];
          *(_OWORD *)(v154 + 32) = *(_OWORD *)&__p[28];
          *(_BYTE *)(v154 + 48) = IsLiveOut;
          *(_BYTE *)(v154 + 49) = v148;
          *(_QWORD *)(v154 + 56) = v150;
          *(_BYTE *)(v154 + 64) = v151;
          *(_BYTE *)(v154 + 72) = 0;
          *(_BYTE *)(v154 + 92) = 0;
          *(_OWORD *)(v154 + 93) = *(_OWORD *)v298;
          *(_QWORD *)(v154 + 108) = *(_QWORD *)&v298[15];
          v155 = v154 + 120;
        }
        v294.__r_.__value_.__l.__size_ = v155;
        ++v140;
      }
      Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v224 + 160));
      *(_QWORD *)v298 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
      *(_OWORD *)&v298[8] = (unint64_t)(v224 + 176);
      *(_QWORD *)&v298[24] = 0;
      v299 = 0;
      v300 = 0;
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)__p, (uint64_t)v298, (uint64_t)v289, v294.__r_.__value_.__l.__data_, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v294.__r_.__value_.__l.__size_ - v294.__r_.__value_.__r.__words[0]) >> 3));
      v59 = v222;
      v24 = v225;
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)__p);
      if (*(_QWORD *)&__p[24])
        ZinAssertImpl("Validation failed for concat layer");
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)__p);
      if (SHIBYTE(v299) < 0)
        operator delete(*(void **)&v298[16]);
      if (v294.__r_.__value_.__r.__words[0])
      {
        v294.__r_.__value_.__l.__size_ = v294.__r_.__value_.__r.__words[0];
        operator delete(v294.__r_.__value_.__l.__data_);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)v289);
      *(_QWORD *)v298 = *(_QWORD *)(v222 + 200);
      *(_QWORD *)v289 = v298;
      *(_QWORD *)&v289[8] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, v289);
      ZinBuilder::AddConcatToGraph(v60, (uint64_t *)&v273, &v287, (ZinIrOpLayer ***)__p);
      *(_QWORD *)__p = &unk_24C02BB18;
      if (*(_QWORD *)&__p[8])
      {
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      v62 = *(_QWORD *)(v287.__r_.__value_.__l.__size_ - 8);
      v171 = (_QWORD *)v250.__r_.__value_.__r.__words[0];
      v250.__r_.__value_.__r.__words[0] = 0;
      if (v171)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v250, v171);
      if (v302.__r_.__value_.__r.__words[0])
      {
        v302.__r_.__value_.__l.__size_ = v302.__r_.__value_.__r.__words[0];
        operator delete(v302.__r_.__value_.__l.__data_);
      }
      if (v251.__r_.__value_.__r.__words[0])
      {
        v251.__r_.__value_.__l.__size_ = v251.__r_.__value_.__r.__words[0];
        operator delete(v251.__r_.__value_.__l.__data_);
      }
      if (v287.__r_.__value_.__r.__words[0])
      {
        v287.__r_.__value_.__l.__size_ = v287.__r_.__value_.__r.__words[0];
        operator delete(v287.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (v63 != 1)
        goto LABEL_266;
      v64 = (_OWORD *)(v58 + 344 * v61 + 8);
      ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)__p, (const ZinIrKernelUnitInfo *)v64);
      *(_QWORD *)__p = off_24C01CAD8;
      v65 = v64[16];
      v268 = v64[15];
      v269 = v65;
      v66 = v64[17];
      v67 = v64[18];
      v68 = v64[19];
      *(_OWORD *)&v272[12] = *(_OWORD *)((char *)v64 + 316);
      v271 = v67;
      *(_OWORD *)v272 = v68;
      v270 = v66;
      if (*(char *)(v59 + 47) >= 0)
        v69 = *(unsigned __int8 *)(v59 + 47);
      else
        v69 = *(_QWORD *)(v59 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&v302, v69 + 2);
      if ((v302.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = &v302;
      else
        v70 = (std::string *)v302.__r_.__value_.__r.__words[0];
      if (v69)
      {
        if (*(char *)(v59 + 47) >= 0)
          v71 = v214;
        else
          v71 = *(const void **)(v59 + 24);
        memmove(v70, v71, v69);
      }
      strcpy((char *)v70 + v69, "__");
      std::string::basic_string[abi:ne180100]<0>(&v294, "stride_3_4_conv");
      v72 = std::string::append(&v294, "_xfm", 4uLL);
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v287.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v287;
      else
        v74 = (std::string *)v287.__r_.__value_.__r.__words[0];
      if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = HIBYTE(v287.__r_.__value_.__r.__words[2]);
      else
        v75 = v287.__r_.__value_.__l.__size_;
      v76 = std::string::append(&v302, (const std::string::value_type *)v74, v75);
      v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v305.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v305.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      v78 = std::string::append(&v305, "_", 1uLL);
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v296.__r_.__value_.__r.__words[0] = v78->__r_.__value_.__r.__words[2];
      v295 = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v250, __val[0]);
      if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v250;
      else
        v80 = (std::string *)v250.__r_.__value_.__r.__words[0];
      if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
      else
        v81 = v250.__r_.__value_.__l.__size_;
      v82 = std::string::append((std::string *)&v295, (const std::string::value_type *)v80, v81);
      v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      *(_QWORD *)&v298[16] = *((_QWORD *)&v82->__r_.__value_.__l + 2);
      *(_OWORD *)v298 = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      v84 = std::string::append((std::string *)v298, "_", 1uLL);
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      *(_QWORD *)&v289[16] = *((_QWORD *)&v84->__r_.__value_.__l + 2);
      *(_OWORD *)v289 = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(&v251, v289);
      v86 = *(_QWORD *)__val;
      if ((v289[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v289);
        v86 = *(_QWORD *)__val;
      }
      if ((v298[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v298);
        v86 = *(_QWORD *)__val;
      }
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v250.__r_.__value_.__l.__data_);
        v86 = *(_QWORD *)__val;
      }
      if (v296.__r_.__value_.__s.__data_[7] < 0)
      {
        operator delete((void *)v295);
        v86 = *(_QWORD *)__val;
      }
      if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v305.__r_.__value_.__l.__data_);
        v86 = *(_QWORD *)__val;
      }
      if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v287.__r_.__value_.__l.__data_);
        v86 = *(_QWORD *)__val;
      }
      if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v294.__r_.__value_.__l.__data_);
        v86 = *(_QWORD *)__val;
      }
      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v302.__r_.__value_.__l.__data_);
        v86 = *(_QWORD *)__val;
      }
      v87 = *(const void ***)(v276.i64[0] + 8 * v86);
      *(_QWORD *)(v276.i64[0] + 8 * v86) = 0;
      v249 = v87;
      *((_QWORD *)&v291 + 1) = 0x100000001;
      HIDWORD(v293) = 0;
      *(_OWORD *)v289 = v269;
      *(_QWORD *)&v289[16] = v270;
      *(_OWORD *)&v290[16] = *(_OWORD *)v272;
      *(_QWORD *)&v291 = *(_QWORD *)&v272[16];
      *(_QWORD *)&v289[24] = *(_QWORD *)((char *)&v271 + 4);
      *(_DWORD *)v290 = HIDWORD(v271);
      *(_QWORD *)&v290[4] = 0x100000001;
      *(_DWORD *)&v290[12] = 1;
      LOWORD(v293) = BYTE4(v268);
      *((_QWORD *)&v292 + 1) = *((_QWORD *)&v268 + 1);
      v88 = *(_DWORD *)&v272[24];
      LODWORD(v292) = 1;
      DWORD1(v292) = *(_DWORD *)&v272[24];
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v217, v87, (uint64_t)v298);
      v89 = ZinObjectNameFactory::ZinObjectNameFactory(&v287, v298);
      if ((v298[23] & 0x80000000) != 0)
        operator delete(*(void **)v298);
      (*(void (**)(_BYTE *__return_ptr, uint64_t, __n128))(*(_QWORD *)v5 + 136))(v298, v5, v89);
      if (v301)
      {
        v220 = v88;
        v90 = HIDWORD(v299);
        v91 = *(_QWORD *)(*(_QWORD *)(v5 + 136) + 248);
        KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v5 + 16));
        ZinIrKernel::GetWeightDimensions((ZinIrKernel *)v87, (uint64_t)&v305);
        v92 = v90;
        v93 = v91 * v90;
        v302.__r_.__value_.__r.__words[0] = v93;
        v302.__r_.__value_.__l.__size_ = v305.__r_.__value_.__l.__size_;
        v94 = *(_QWORD *)&v289[8];
        v302.__r_.__value_.__r.__words[2] = *(_QWORD *)&v289[8];
        v303 = *(_QWORD *)v289;
        v304 = *(_QWORD *)&v289[16];
        v232 = v305.__r_.__value_.__l.__size_;
        v235 = *(_QWORD *)v289;
        details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)&v295, v305.__r_.__value_.__l.__size_ * v93 * *(_QWORD *)&v289[8] * *(_QWORD *)v289 * *(_QWORD *)&v289[16]);
        v218 = (uint64_t)v87;
        v95 = v235;
        if (v93 >= 1)
        {
          v96 = 0;
          v97 = 0;
          v229 = v93;
          do
          {
            if (v232 >= 1)
            {
              for (i = 0; i != v232; ++i)
              {
                if (v94 >= 1)
                {
                  for (j = 0; j != v94; ++j)
                  {
                    if (v95 >= 1)
                    {
                      v100 = 40 * v97;
                      v101 = (v235 - 1) * v92;
                      do
                      {
                        v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                  + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                        v103 = (__int128 *)(v297 + v100);
                        if (!v102)
                          v103 = &v295;
                        ++v97;
                        *(_QWORD *)v103 = v96 / v92;
                        *((_QWORD *)v103 + 1) = i;
                        *((_QWORD *)v103 + 2) = v94 + ~j;
                        *((_QWORD *)v103 + 3) = v101 + v96 % v92;
                        *((_QWORD *)v103 + 4) = 0;
                        v101 -= v92;
                        v100 += 40;
                        --v95;
                      }
                      while (v95);
                    }
                    v95 = v235;
                  }
                }
              }
            }
            ++v96;
          }
          while (v96 != v229);
        }
        (*(void (**)(std::string *__return_ptr, std::string *, uint64_t))(v287.__r_.__value_.__r.__words[0]
                                                                                  + 16))(&v294, &v287, 2);
        v87 = (const void **)v218;
        ZinIrKernel::ShuffleKernel(v218, (__int128 *)&v294, (uint64_t)&v295, *(int *)&v289[24], *(int *)&v289[28], *(int *)v290, 1, 1, (uint64_t *)&v250, 1, (uint64_t)&v302, a3, KernelSparsityCache, (__int128 *)&v290[16], 0, v220);
        v59 = v222;
        v60 = a2;
        v5 = v227;
        v24 = v225;
        if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v294.__r_.__value_.__l.__data_);
        details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)&v295);
      }
      else
      {
        v250.__r_.__value_.__r.__words[0] = 0;
      }
      v287.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
      if (v288 < 0)
        operator delete((void *)v287.__r_.__value_.__l.__size_);
      v249 = 0;
      ZinIrKernel::~ZinIrKernel((ZinIrKernel *)v87);
      MEMORY[0x20BD002F8]();
      v132 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0) + 56);
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v5 + 136))(v289, v5);
      v133 = *(int *)&v290[4];
      v134 = *(_OWORD *)(v250.__r_.__value_.__r.__words[0] + 536);
      v291 = *(_OWORD *)(v250.__r_.__value_.__r.__words[0] + 520);
      v292 = v134;
      v293 = *(_QWORD *)(v250.__r_.__value_.__r.__words[0] + 552);
      v135 = *(_OWORD *)(v250.__r_.__value_.__r.__words[0] + 472);
      *(_OWORD *)v289 = *(_OWORD *)(v250.__r_.__value_.__r.__words[0] + 456);
      *(_OWORD *)&v289[16] = v135;
      v136 = *(_OWORD *)(v250.__r_.__value_.__r.__words[0] + 488);
      *(_OWORD *)&v290[16] = *(_OWORD *)(v250.__r_.__value_.__r.__words[0] + 504);
      *(_OWORD *)v290 = v136;
      v137 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v223 + 32))(v223, 0, 0);
      *(_QWORD *)v298 = 0x100000001;
      *(_DWORD *)&v298[8] = 1;
      ZinGetOutputTensorDimension(v137 + 48, v289, (unsigned int *)&v289[24], (unsigned int *)&v290[4], (int *)&v290[16], v132 * v133, (int *)v298, (uint64_t)&v295);
      if (!ZinTensorDimensions::IsValid((ZinTensorDimensions *)&v295))
        goto LABEL_306;
      if (!v250.__r_.__value_.__r.__words[0])
      {
        __format = "Error: failed to create the shuffled kernel";
LABEL_306:
        ZinAssertImpl(__format);
      }
      if (v215)
      {
        v138 = *(_QWORD *)(v215 + 136);
        ZinObjectNameFactory::CreateName((uint64_t)v285, 2u, (std::string *)v298);
        ZinIrKernel::DuplicateChannels(v138, (__int128 *)v298, v233, (uint64_t *)&v305);
        if ((v298[23] & 0x80000000) != 0)
          operator delete(*(void **)v298);
      }
      else
      {
        v305.__r_.__value_.__r.__words[0] = 0;
      }
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v5 + 136))(v298, v5);
      v172 = ZinConvCompositeLayer::CreateDecomposedPartition(v59, (ZinIrKernel **)&v250, (ZinIrKernel **)&v305, SHIDWORD(v299), 1, &v295, v224, v60, (const ZinConvLayer *)v285, v223);
      v62 = (uint64_t)v172;
      if (!v172)
        ZinAssertImpl("Unexpected null partition!!!");
      v173 = (char *)v274;
      if ((unint64_t)v274 >= v275)
      {
        v175 = ((_BYTE *)v274 - (_BYTE *)v273) >> 3;
        if ((unint64_t)(v175 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v176 = (uint64_t)(v275 - (_QWORD)v273) >> 2;
        if (v176 <= v175 + 1)
          v176 = v175 + 1;
        if (v275 - (unint64_t)v273 >= 0x7FFFFFFFFFFFFFF8)
          v177 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v177 = v176;
        if (v177)
          v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v275, v177);
        else
          v178 = 0;
        v179 = (uint64_t *)&v178[8 * v175];
        *v179 = v62;
        v174 = v179 + 1;
        v180 = (char *)v274;
        v181 = (char *)v273;
        if (v274 != v273)
        {
          do
          {
            v182 = *((_QWORD *)v180 - 1);
            v180 -= 8;
            *--v179 = v182;
          }
          while (v180 != v181);
          v180 = (char *)v273;
        }
        v273 = v179;
        v274 = v174;
        v275 = (unint64_t)&v178[8 * v177];
        if (v180)
          operator delete(v180);
      }
      else
      {
        *(_QWORD *)v274 = v172;
        v174 = v173 + 8;
      }
      v274 = v174;
      v183 = (ZinIrKernel *)v305.__r_.__value_.__r.__words[0];
      v305.__r_.__value_.__r.__words[0] = 0;
      if (v183)
      {
        ZinIrKernel::~ZinIrKernel(v183);
        MEMORY[0x20BD002F8]();
      }
      v184 = (ZinIrKernel *)v250.__r_.__value_.__r.__words[0];
      v250.__r_.__value_.__r.__words[0] = 0;
      if (v184)
      {
        ZinIrKernel::~ZinIrKernel(v184);
        MEMORY[0x20BD002F8]();
      }
      v251.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
      if (v252 < 0)
        operator delete((void *)v251.__r_.__value_.__l.__size_);
      *(_QWORD *)__p = off_24C01ED88;
      if (v266)
      {
        v267 = v266;
        operator delete(v266);
      }
      if (v264)
      {
        v265 = v264;
        operator delete(v264);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)__p);
    }
    v61 = *(_QWORD *)__val;
LABEL_266:
    ++v61;
    v58 = *a4;
  }
  while (0x82FA0BE82FA0BE83 * ((a4[1] - *a4) >> 3) > v61);
  if (!v62)
    goto LABEL_309;
  v185 = *(int *)(*v213 + 340);
  v186 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0, 0);
  v187 = *(_OWORD *)(v186 + 64);
  *(_OWORD *)__p = *(_OWORD *)(v186 + 48);
  *(_OWORD *)&__p[16] = v187;
  *(_QWORD *)&__p[32] = *(_QWORD *)(v186 + 80);
  *(_QWORD *)v289 = *(_QWORD *)__p;
  *(_QWORD *)&v289[8] = *(_QWORD *)&__p[8] / v185;
  *(_QWORD *)&v289[16] = v187;
  *(_QWORD *)&v289[24] = *((_QWORD *)&v187 + 1) * v185;
  *(_QWORD *)v290 = *(_QWORD *)&__p[32];
  if (!ZinIrTensor::HasInterleaveOtherThanOne((ZinIrTensor *)v186))
    ZinAssertImpl("Input not interleaved for NOOP Reshape.");
  v188 = ZinIrTensor::GetInterleave((ZinIrTensor *)v186);
  if (!v189 || v188 != v185)
  {
    v210 = ZinIrTensor::GetInterleave((ZinIrTensor *)v186);
    if (!v211)
      std::__throw_bad_optional_access[abi:ne180100]();
    ZinAssertImpl("Input has unexpected interleave for NOOP Reshape. Expects: %d; Actual: %lu", v185, v210);
  }
  v190 = *(_DWORD *)(v186 + 88);
  v191 = operator new(0x14uLL);
  v296.__r_.__value_.__r.__words[0] = (std::string::size_type)(v191 + 5);
  v191[4] = 4;
  *(_OWORD *)v191 = xmmword_207AA84A8;
  *(_QWORD *)&v295 = v191;
  *((_QWORD *)&v295 + 1) = v191 + 5;
  DimensionOrderHint::DimensionOrderHint(v298, &v295);
  Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v224, (uint64_t)v285, (uint64_t)__p, v190, (__int128 *)v289, (const DimensionOrderHint *)v298);
  if (*(_QWORD *)v298)
  {
    *(_QWORD *)&v298[8] = *(_QWORD *)v298;
    operator delete(*(void **)v298);
  }
  if ((_QWORD)v295)
  {
    *((_QWORD *)&v295 + 1) = v295;
    operator delete((void *)v295);
  }
  v305.__r_.__value_.__r.__words[0] = *(_QWORD *)(v59 + 200);
  *(_QWORD *)&v295 = &v305;
  *((_QWORD *)&v295 + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v298, &v295);
  v193 = ZinIrOpLayerGraph::AddNode(v60, Reshape, (ZinIrOpLayer ***)v298);
  *(_QWORD *)v298 = &unk_24C02BB18;
  if (*(_QWORD *)&v298[8])
  {
    *(_QWORD *)&v298[16] = *(_QWORD *)&v298[8];
    operator delete(*(void **)&v298[8]);
  }
  v194 = ZinIrOpLayerGraph::AddEdge((uint64_t)v60, v62, (uint64_t)Reshape, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v195 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0)+ 72);
  v196 = v193 & v194;
  if (v195 == *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0) + 72))
  {
    View = Reshape;
  }
  else
  {
    v198 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
    v199 = *(_OWORD *)(v198 + 64);
    *(_OWORD *)v298 = *(_OWORD *)(v198 + 48);
    *(_OWORD *)&v298[16] = v199;
    v299 = *(char ***)(v198 + 80);
    *(_QWORD *)&v298[24] = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0)+ 72);
    ZinObjectNameFactory::CreateName((uint64_t)v285, 0, (std::string *)&v295);
    v200 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
    memset(v243, 0, sizeof(v243));
    v245 = vdupq_n_s64(1uLL);
    v246 = v245;
    v244 = 0;
    v247 = 1;
    View = (ZinIrOpLayer *)ZinBuilder::CreateView(v224, (uint64_t)&v295, v200, (__int128 *)v298, (uint64_t)v243);
    if (v296.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v295);
    v302.__r_.__value_.__r.__words[0] = *(_QWORD *)(v59 + 200);
    v305.__r_.__value_.__r.__words[0] = (std::string::size_type)&v302;
    v305.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v295, &v305);
    v201 = ZinIrOpLayerGraph::AddNode(a2, View, (ZinIrOpLayer ***)&v295);
    *(_QWORD *)&v295 = &unk_24C02BB18;
    if (*((_QWORD *)&v295 + 1))
    {
      v296.__r_.__value_.__r.__words[0] = *((_QWORD *)&v295 + 1);
      operator delete(*((void **)&v295 + 1));
    }
    v196 &= v201 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Reshape, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  v202 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)View + 32))(View, 0, 0)+ 64);
  if (v202 == *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0) + 64))
  {
    v203 = View;
  }
  else
  {
    v204 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)View + 32))(View, 0, 0);
    v205 = *(_OWORD *)(v204 + 64);
    *(_OWORD *)v298 = *(_OWORD *)(v204 + 48);
    *(_OWORD *)&v298[16] = v205;
    v299 = *(char ***)(v204 + 80);
    *(_QWORD *)&v298[16] = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0)+ 64);
    ZinObjectNameFactory::CreateName((uint64_t)v285, 0, (std::string *)&v295);
    v206 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)View + 32))(View, 0, 0);
    v239 = 0;
    memset(v238, 0, sizeof(v238));
    v240 = vdupq_n_s64(1uLL);
    v241 = v240;
    v242 = 1;
    v203 = (ZinIrOpLayer *)ZinBuilder::CreateView(v224, (uint64_t)&v295, v206, (__int128 *)v298, (uint64_t)v238);
    if (v296.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v295);
    v302.__r_.__value_.__r.__words[0] = *(_QWORD *)(v59 + 200);
    v305.__r_.__value_.__r.__words[0] = (std::string::size_type)&v302;
    v305.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v295, &v305);
    v207 = ZinIrOpLayerGraph::AddNode(a2, v203, (ZinIrOpLayer ***)&v295);
    *(_QWORD *)&v295 = &unk_24C02BB18;
    if (*((_QWORD *)&v295 + 1))
    {
      v296.__r_.__value_.__r.__words[0] = *((_QWORD *)&v295 + 1);
      operator delete(*((void **)&v295 + 1));
    }
    v196 &= v207 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)View, (uint64_t)v203, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  memset(v236, 0, sizeof(v236));
  v237 = 1065353216;
  v208 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)v59, v203, v236);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v236);
  if ((v196 & v208 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)v59, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: Deconv graph manipulation error");
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  *(_QWORD *)__p = &v276;
  std::vector<std::unique_ptr<ZinIrKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v278)
    (*(void (**)(uint64_t))(*(_QWORD *)v278 + 16))(v278);
  v285[0] = off_24C01FBB0;
  if (v286 < 0)
    operator delete((void *)v285[1]);
  return 0;
}

void sub_206EBD2A0(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x448];
  if (STACK[0x448])
  {
    STACK[0x450] = (unint64_t)v2;
    operator delete(v2);
  }
  STACK[0x2F0] = (unint64_t)&STACK[0x460];
  std::vector<std::unique_ptr<ZinIrKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  if (STACK[0x478])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x478] + 16))(STACK[0x478]);
  STACK[0x4E8] = (unint64_t)off_24C01FBB0;
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  _Unwind_Resume(a1);
}

_QWORD *ZinLargeKernelUtils::CreatePaddedWeight@<X0>(ZinIrKernel **a1@<X0>, int *a2@<X1>, int *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  ZinIrKernel *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int AbsMod;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v30;
  ZinIrKernel *v31;
  uint64_t v32;
  int UnderlyingType;
  uint64_t v34;
  _QWORD *result;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v8 = *a1;
  v9 = *((_BYTE *)*a1 + 448);
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v10 = *((_QWORD *)v8 + 33);
  v11 = *((_QWORD *)v8 + 34);
  if ((v9 & 0x40) != 0)
  {
    v36 = a5;
    v19 = *((_QWORD *)v8 + 35);
    v20 = *a2;
    v21 = a2[1];
    v22 = a2[2];
    v23 = *a2 - 1;
    AbsMod = GetAbsMod(-(v11 + v23 + *a3 / v20 * v20 - *a3), *a2);
    v18 = v23 + *a3 / v20 * v20 - *a3;
    v24 = GetAbsMod(-(v10 + (int)v21 - 1 + a3[2] / (int)v21 * (int)v21 - a3[2]), v21);
    v25 = v21 - 1 + a3[2] / (int)v21 * v21 - a3[2];
    v26 = v19 + (int)v22 - 1 + a3[4] / (int)v22 * (int)v22 - a3[4];
    a5 = v36;
    v27 = GetAbsMod(-v26, v22);
    v28 = v22 - 1 + a3[4] / (int)v22 * v22 - a3[4];
  }
  else
  {
    v13 = *a2;
    v14 = a2[1];
    if ((int)v13 <= 2 && a4 == 0)
    {
      AbsMod = 0;
      v18 = 0;
    }
    else
    {
      AbsMod = GetAbsMod(-(uint64_t)*a3, *a2);
      v17 = GetAbsMod(-(uint64_t)*a3, v13);
      v18 = GetAbsMod(-(v11 + v17), v13);
    }
    if ((int)v14 <= 2 && a4 == 0)
    {
      v24 = 0;
      v25 = 0;
    }
    else
    {
      v24 = GetAbsMod(-(uint64_t)a3[2], v14);
      v30 = GetAbsMod(-(uint64_t)a3[2], v14);
      v25 = GetAbsMod(-(v10 + v30), v14);
    }
    v27 = 0;
    v28 = 0;
  }
  v40 = __PAIR64__(v18, AbsMod);
  v41 = __PAIR64__(v25, v24);
  v42 = __PAIR64__(v28, v27);
  *a5 = 0;
  v31 = *a1;
  if (!*a1)
  {
    v32 = MEMORY[0x248];
    goto LABEL_24;
  }
  v32 = *((_QWORD *)v31 + 73);
  if (v32)
  {
LABEL_24:
    result = (*(_QWORD *(**)(_QWORD **__return_ptr, uint64_t, unint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v32 + 32))(&v39, v32, &v40, 1262703187, (_QWORD *)v31 + 74);
    *a5 = v39;
    return result;
  }
  if (ZinIrKernel::HasZeroPoint(v31))
    ZinAssertImpl("Zero point is not supported for unity kernel.");
  UnderlyingType = ZinKernelFormatGetUnderlyingType(*((_DWORD *)*a1 + 44));
  ZinIrWeight::FillWeight(UnderlyingType, (int64x2_t *)((char *)*a1 + 248), 1262703187, (uint64_t *)&v39, 1.0);
  v37 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, unint64_t *, uint64_t, uint64_t *))(*v39 + 32))(&v38, v39, &v40, 1262703187, &v37);
  v34 = v37;
  *a5 = v38;
  v37 = 0;
  v38 = 0;
  if (v34)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v37, v34);
  result = v39;
  v39 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  return result;
}

void sub_206EBDBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a11;
  a11 = 0;
  if (v15)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a11, v15);
  v16 = a13;
  a13 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  *v13 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t ZinDeconvLargeStrides::HandleDeconvLargeKernelStrides(ZinDeconvLargeStrides *this, uint64_t **a2, ZinIrOpLayerGraph *a3, const ZinIrHalParameters *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  __int128 *v15;
  const void *v16;
  std::string *v17;
  __int128 v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  int32x4_t v26;
  unint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  ZinIrKernel *v40;
  int WeightFormat;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  ZinIrKernel *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v60;
  unint64_t v61;
  int v62;
  ZinKernelSparsityCache *KernelSparsityCache;
  double WeightDimensions;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t i;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  int v75;
  ZinIrOpLayer *v76;
  ZinIrKernel *v77;
  _BOOL4 v78;
  int v79;
  uint64_t v80;
  __int128 v81;
  _OWORD *v82;
  ZinIrOpLayer *Transpose;
  _BOOL4 v84;
  int v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _DWORD *v90;
  ZinIrOpLayer *v91;
  _BOOL4 v92;
  int v93;
  int v94;
  ZinIrKernel *v95;
  uint64_t v96;
  int v97;
  ZinIrOpLayerGraph *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  ZinDeconvLargeStrides *v103;
  ZinIrOpLayerGraph *v104;
  int v105;
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  char *v117;
  void *v118;
  void *v119;
  _OWORD *v120;
  ZinIrKernel *v121;
  ZinIrKernel *v122;
  __int128 __p;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  char v131[2];
  int v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _QWORD v136[3];
  char v137;
  _BYTE v138[32];
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  int v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, const ZinIrHalParameters *))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0, a4);
  v8 = (*(uint64_t (**)(ZinDeconvLargeStrides *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v104 = a3;
  if (*((_QWORD *)a3 + 52) == 1)
  {
    v99 = (uint64_t *)*((_QWORD *)this + 11);
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v99 + 32))(*v99, 0, 0);
    v10 = *(_DWORD *)(v9 + 88);
    v102 = (*(uint64_t (**)(ZinDeconvLargeStrides *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
    v11 = *((_QWORD *)this + 2);
    v100 = *((_QWORD *)this + 25);
    v12 = *(_QWORD *)(v100 + 136);
    v13 = *(_QWORD *)(v12 + 272);
    if (*((char *)this + 47) >= 0)
      v14 = *((unsigned __int8 *)this + 47);
    else
      v14 = *((_QWORD *)this + 4);
    std::string::basic_string[abi:ne180100]((uint64_t)&v141, v14 + 2);
    v103 = this;
    if ((SBYTE7(v142) & 0x80u) == 0)
      v15 = &v141;
    else
      v15 = (__int128 *)v141;
    if (v14)
    {
      if (*((char *)v103 + 47) >= 0)
        v16 = (char *)v103 + 24;
      else
        v16 = (const void *)*((_QWORD *)v103 + 3);
      memmove(v15, v16, v14);
    }
    strcpy((char *)v15 + v14, "__");
    std::string::basic_string[abi:ne180100]<0>(&v133, "u1_stride_gt_2");
    v17 = std::string::append((std::string *)&v133, "_xfm", 4uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(_QWORD *)&v149 = *((_QWORD *)&v17->__r_.__value_.__l + 2);
    v148 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v149) & 0x80u) == 0)
      v19 = (const std::string::value_type *)&v148;
    else
      v19 = (const std::string::value_type *)v148;
    if ((SBYTE7(v149) & 0x80u) == 0)
      v20 = BYTE7(v149);
    else
      v20 = *((_QWORD *)&v148 + 1);
    v21 = std::string::append((std::string *)&v141, v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    *(_QWORD *)&v138[16] = *((_QWORD *)&v21->__r_.__value_.__l + 2);
    *(_OWORD *)v138 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append((std::string *)v138, "_", 1uLL);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v124 = v23->__r_.__value_.__r.__words[2];
    __p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v136, &__p);
    if (SHIBYTE(v124) < 0)
      operator delete((void *)__p);
    if ((v138[23] & 0x80000000) != 0)
      operator delete(*(void **)v138);
    if (SBYTE7(v149) < 0)
      operator delete((void *)v148);
    if (SBYTE7(v134) < 0)
      operator delete((void *)v133);
    if (SBYTE7(v142) < 0)
      operator delete((void *)v141);
    if (*(_QWORD *)(v9 + 64) == 1
      && *(_QWORD *)(v102 + 56) == 1
      && *(_QWORD *)(v12 + 400) == 1
      && (v25 = *(int *)(v12 + 340), v13 / v25 == 2)
      && ((*(int32x2_t *)v26.i8 = vrev64_s32(*(int32x2_t *)(v12 + 352)),
           v26.i64[1] = *(_QWORD *)(v12 + 368),
           LODWORD(v27) = 0,
           HIDWORD(v27) = v25 - 1,
           (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v26, (int32x4_t)v27)), 0xFuLL))) & 1) != 0)
       || !*(_DWORD *)(v12 + 360)
       || !*(_DWORD *)(v12 + 364)))
    {
      v96 = v11;
      v97 = v10;
      v60 = *(_OWORD *)(v102 + 64);
      v133 = *(_OWORD *)(v102 + 48);
      v134 = v60;
      v135 = *(_QWORD *)(v102 + 80);
      *((_QWORD *)&v134 + 1) = *(_QWORD *)(v102 + 72) / v25;
      *((_QWORD *)&v133 + 1) = v25;
      *(_QWORD *)&v60 = 0x100000001;
      *((_QWORD *)&v60 + 1) = 0x100000001;
      v125 = v60;
      v126 = 0x100000001;
      v127 = 0uLL;
      v129 = v60;
      v128 = 0;
      v130 = 1;
      *(_WORD *)v131 = 0;
      v132 = 0;
      __p = xmmword_207A7D4F0;
      v124 = 1;
      v61 = *(_QWORD *)(v12 + 340);
      v62 = *(_DWORD *)(v12 + 348);
      KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*((ZinIrContext **)v103 + 2));
      WeightDimensions = ZinIrKernel::GetWeightDimensions(*(ZinIrKernel **)(v100 + 136), (uint64_t)&v141);
      if (HIDWORD(v61) != 1 || v62 != 1)
        ZinAssertImpl("Only W can have large stride\n", WeightDimensions);
      v65 = *((_QWORD *)&v141 + 1);
      *(_QWORD *)&v148 = v141 * (int)v61;
      *((_QWORD *)&v148 + 1) = *((_QWORD *)&v141 + 1);
      v66 = *((_QWORD *)&v142 + 1) / (int)v61;
      *(_QWORD *)&v149 = *((_QWORD *)&__p + 1);
      *((_QWORD *)&v149 + 1) = v66;
      v150 = v124;
      v101 = v148;
      v67 = *((_QWORD *)&v141 + 1) * v148 * v66;
      details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)v138, v67 * *((_QWORD *)&__p + 1) * v124);
      v98 = (ZinIrOpLayerGraph *)a2;
      if (v67 != *((_QWORD *)&v141 + 1) * (_QWORD)v141 * *((_QWORD *)&v142 + 1))
        ZinAssertImpl("Mismatch in shuffled kernel dims\n");
      if (v101 >= 1)
      {
        v68 = 0;
        v69 = 0;
        do
        {
          ++v68;
          if (v65 >= 1)
          {
            for (i = 0; i != v65; ++i)
            {
              if (v66 >= 1)
              {
                v71 = 0;
                v72 = 40 * v69;
                do
                {
                  v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                           + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                  v74 = (_QWORD *)(v140 + v72);
                  if (!v73)
                    v74 = v138;
                  *v74 = 0;
                  v74[1] = i;
                  v74[2] = 0;
                  v74[3] = ((uint64_t)(int)v61 << (v71 & 1)) - v68;
                  v74[4] = 0;
                  ++v71;
                  v72 += 40;
                }
                while (v66 != v71);
                v69 += v71;
              }
            }
          }
        }
        while (v68 != v101);
      }
      (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(v136[0] + 16))(&v144, v136, 2);
      ZinIrKernel::ShuffleKernel(*(_QWORD *)(v100 + 136), &v144, (uint64_t)v138, v125, SDWORD1(v125), SDWORD2(v125), SHIDWORD(v125), v126, (uint64_t *)&v122, SHIDWORD(v126), (uint64_t)&v148, (uint64_t)v104, KernelSparsityCache, &v127, v131[1], SHIDWORD(v129));
      if (SBYTE7(v145) < 0)
        operator delete((void *)v144);
      details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)v138);
      v75 = *(_DWORD *)(v102 + 88);
      v121 = v122;
      v122 = 0;
      v76 = (ZinIrOpLayer *)ZinBuilder::CreateConv(v96, (uint64_t)v136, (uint64_t)&v133, v10, v75, &v121);
      v77 = v121;
      v121 = 0;
      if (v77)
      {
        ZinIrKernel::~ZinIrKernel(v77);
        MEMORY[0x20BD002F8]();
      }
      *(_QWORD *)&v148 = *((_QWORD *)v103 + 25);
      *(_QWORD *)&v141 = &v148;
      *((_QWORD *)&v141 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v138, &v141);
      v78 = ZinIrOpLayerGraph::AddNode((uint64_t **)v98, v76, (ZinIrOpLayer ***)v138);
      *(_QWORD *)v138 = &unk_24C02BB18;
      if (*(_QWORD *)&v138[8])
      {
        *(_QWORD *)&v138[16] = *(_QWORD *)&v138[8];
        operator delete(*(void **)&v138[8]);
      }
      v79 = ZinIrOpLayerGraph::AddEdge((uint64_t)v98, *v99, (uint64_t)v76, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v80 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0, 0);
      v105 = v79;
      v81 = *(_OWORD *)(v80 + 64);
      *(_OWORD *)v138 = *(_OWORD *)(v80 + 48);
      *(_OWORD *)&v138[16] = v81;
      v139 = *(_QWORD *)(v80 + 80);
      v82 = operator new(0x10uLL);
      v118 = v82;
      *v82 = xmmword_207A8A860;
      v119 = v82 + 1;
      v120 = v82 + 1;
      Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v96, (uint64_t)v136, (uint64_t)v138, v97, (uint64_t)&v118);
      *(_QWORD *)&v144 = *((_QWORD *)v103 + 25);
      *(_QWORD *)&v148 = &v144;
      *((_QWORD *)&v148 + 1) = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v141, &v148);
      v84 = ZinIrOpLayerGraph::AddNode((uint64_t **)v98, Transpose, (ZinIrOpLayer ***)&v141);
      *(_QWORD *)&v141 = &unk_24C02BB18;
      if (*((_QWORD *)&v141 + 1))
      {
        *(_QWORD *)&v142 = *((_QWORD *)&v141 + 1);
        operator delete(*((void **)&v141 + 1));
      }
      v85 = ZinIrOpLayerGraph::AddEdge((uint64_t)v98, (uint64_t)v76, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v86 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
      v87 = *(_OWORD *)(v86 + 64);
      v141 = *(_OWORD *)(v86 + 48);
      v142 = v87;
      v143 = *(_QWORD *)(v86 + 80);
      v88 = *(_OWORD *)(v86 + 64);
      v148 = *(_OWORD *)(v86 + 48);
      v149 = v88;
      v89 = *(_QWORD *)(v86 + 80);
      *((_QWORD *)&v149 + 1) = *((_QWORD *)&v88 + 1) * *((_QWORD *)&v141 + 1);
      v150 = v89;
      *((_QWORD *)&v148 + 1) = 1;
      v90 = operator new(0x14uLL);
      v116 = (uint64_t)(v90 + 5);
      v117 = (char *)(v90 + 5);
      v90[4] = 4;
      *(_OWORD *)v90 = xmmword_207AA84A8;
      v115 = v90;
      DimensionOrderHint::DimensionOrderHint(&v144, &v115);
      v91 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v96, (uint64_t)v136, (uint64_t)&v141, v97, &v148, (const DimensionOrderHint *)&v144);
      if ((_QWORD)v144)
      {
        *((_QWORD *)&v144 + 1) = v144;
        operator delete((void *)v144);
      }
      if (v115)
      {
        v116 = (uint64_t)v115;
        operator delete(v115);
      }
      v147 = *((_QWORD *)v103 + 25);
      v115 = &v147;
      v116 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v144, &v115);
      v92 = ZinIrOpLayerGraph::AddNode((uint64_t **)v98, v91, (ZinIrOpLayer ***)&v144);
      *(_QWORD *)&v144 = &unk_24C02BB18;
      if (*((_QWORD *)&v144 + 1))
      {
        *(_QWORD *)&v145 = *((_QWORD *)&v144 + 1);
        operator delete(*((void **)&v144 + 1));
      }
      v93 = ZinIrOpLayerGraph::AddEdge((uint64_t)v98, (uint64_t)Transpose, (uint64_t)v91, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v144 = 0u;
      v145 = 0u;
      v146 = 1065353216;
      v94 = ZinIrOpLayerGraph::MoveOutgoingEdges(v98, (uint64_t **)v103, v91, &v144);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v144);
      if ((v78 & v105 & v84 & v85 & v92 & v93 & v94 & ZinIrOpLayerGraph::RemoveNode(v98, v103, 0)) != 0)
        v36 = 0;
      else
        v36 = 3;
      if (v118)
      {
        v119 = v118;
        operator delete(v118);
      }
      v95 = v122;
      v122 = 0;
      if (v95)
      {
        ZinIrKernel::~ZinIrKernel(v95);
        MEMORY[0x20BD002F8]();
      }
    }
    else
    {
      v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v28)
        ZinDeconvLargeStrides::HandleDeconvLargeKernelStrides(v28, v29, v30, v31, v32, v33, v34, v35);
      v36 = 3;
    }
    v136[0] = off_24C01FBB0;
    if (v137 < 0)
      operator delete((void *)v136[1]);
  }
  else
  {
    v37 = v8;
    v38 = *((_QWORD *)this + 25);
    v39 = *(_DWORD *)(v7 + 88);
    v40 = *(ZinIrKernel **)(v38 + 136);
    WeightFormat = ZinIrKernel::GetWeightFormat(v40);
    v42 = v7 + 48;
    v43 = (uint64_t *)(v37 + 48);
    if (ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride((__int128 *)(v7 + 48), (uint64_t)v43, v39, (uint64_t)v40 + 176, WeightFormat, v44, (char **)&v106, &v112)|| (v50 = v112, v49 = v113, v113 == v112))
    {
      v45 = *(_DWORD *)(v7 + 88);
      v46 = *(ZinIrKernel **)(v38 + 136);
      v47 = ZinIrKernel::GetWeightFormat(v46);
      ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(v42, v43, v45, (uint64_t)v46 + 176, v47, v48, (char **)&v106, &v109);
      v50 = v112;
      v49 = v113;
    }
    if (v49 == v50)
    {
      if (v110 == v109)
      {
        v51 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v51)
          ZinDeconvLargeStrides::HandleDeconvLargeKernelStrides(v51, v52, v53, v54, v55, v56, v57, v58);
        v36 = 3;
      }
      else
      {
        ZinDeconvLargeStrides::ApplyDRAMDecomposition((uint64_t)this, a2, (uint64_t)v104, &v109);
        v36 = 0;
      }
    }
    else
    {
      v36 = ZinDeconvLargeStrides::ApplyStride4SamePadDecomposition((uint64_t)this, a2, (uint64_t)v104, &v112, (uint64_t)&v106);
    }
  }
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  *(_QWORD *)&__p = &v109;
  std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&__p = &v112;
  std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v36;
}

void sub_206EBE670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,ZinIrKernel *a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t v68;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v68 - 192);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a42, 0);
  a62 = (uint64_t)off_24C01FBB0;
  if (a68 < 0)
    operator delete(a63);
  a57 = &a29;
  std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  a57 = &a32;
  std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  _Unwind_Resume(a1);
}

ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *this, ZinIrPadUnitInfo *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  *(_DWORD *)this = 44;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)this + 8), a2);
  *((_QWORD *)this + 1) = &off_24C01BAC0;
  v4 = *(_OWORD *)((char *)a2 + 156);
  v5 = *(_OWORD *)((char *)a2 + 172);
  v6 = *(_QWORD *)((char *)a2 + 188);
  *((_QWORD *)this + 26) = 0;
  *(_QWORD *)((char *)this + 196) = v6;
  *(_OWORD *)((char *)this + 180) = v5;
  *(_OWORD *)((char *)this + 164) = v4;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 26, *((const void **)a2 + 25), *((_QWORD *)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3);
  *((_WORD *)this + 116) = *((_WORD *)a2 + 112);
  return this;
}

void sub_206EBE914(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo *v1;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v1);
  _Unwind_Resume(a1);
}

ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *this, ZinIrInputViewUnitInfo *a2)
{
  __int128 v4;
  int v5;

  *(_DWORD *)this = 17;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C021970;
  *(_OWORD *)((char *)this + 88) = *((_OWORD *)a2 + 5);
  return this;
}

void sub_206EBE9EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *this, ZinIrPixelUnshuffleUnitInfo *a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)this = 32;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C024450;
  v6 = *((_QWORD *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 11) = v6;
  return this;
}

void sub_206EBEAD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc(ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *this)
{
  int v2;
  void *v3;
  void **v4;
  void *v5;
  void *v6;

  v2 = *(_DWORD *)this;
  if (*(int *)this <= 31)
  {
    if (v2 == 1)
    {
      *((_QWORD *)this + 1) = off_24C01ED88;
      v5 = (void *)*((_QWORD *)this + 20);
      if (v5)
      {
        *((_QWORD *)this + 21) = v5;
        operator delete(v5);
      }
      v6 = (void *)*((_QWORD *)this + 17);
      if (v6)
      {
        *((_QWORD *)this + 18) = v6;
        operator delete(v6);
      }
      v4 = (void **)((char *)this + 8);
      goto LABEL_16;
    }
    if (v2 != 17)
      return;
LABEL_10:
    v4 = (void **)((char *)this + 8);
LABEL_16:
    ZinIrUnitInfo::~ZinIrUnitInfo(v4);
    return;
  }
  if (v2 == 32)
    goto LABEL_10;
  if (v2 == 44)
  {
    *((_QWORD *)this + 1) = &off_24C01BAC0;
    v3 = (void *)*((_QWORD *)this + 26);
    if (v3)
    {
      *((_QWORD *)this + 27) = v3;
      operator delete(v3);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)this + 8));
  }
}

ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *this, const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  uint64_t v17;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 > 31)
  {
    if (v4 == 32)
    {
      *((_QWORD *)this + 1) = off_24C017CA0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v14 = *((_OWORD *)a2 + 1);
        *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
        *((_OWORD *)this + 1) = v14;
      }
      v16 = *((_DWORD *)a2 + 10);
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 10) = v16;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      *((_QWORD *)this + 1) = off_24C024450;
      v17 = *((_QWORD *)a2 + 11);
      *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
      *((_QWORD *)this + 11) = v17;
    }
    else if (v4 == 44)
    {
      ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)this + 8), (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)a2 + 8));
      *((_QWORD *)this + 1) = &off_24C01BAC0;
      v6 = *(_OWORD *)((char *)a2 + 164);
      v7 = *(_OWORD *)((char *)a2 + 180);
      v8 = *(_QWORD *)((char *)a2 + 196);
      *((_QWORD *)this + 26) = 0;
      *(_QWORD *)((char *)this + 196) = v8;
      *(_OWORD *)((char *)this + 180) = v7;
      *(_OWORD *)((char *)this + 164) = v6;
      *((_QWORD *)this + 27) = 0;
      *((_QWORD *)this + 28) = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 26, *((const void **)a2 + 26), *((_QWORD *)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 3);
      *((_WORD *)this + 116) = *((_WORD *)a2 + 116);
    }
  }
  else if (v4 == 1)
  {
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)this + 8), (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)a2 + 8));
    *((_QWORD *)this + 1) = off_24C01CAD8;
    v9 = *(_OWORD *)((char *)a2 + 248);
    v10[16] = *(_OWORD *)((char *)a2 + 264);
    *(_OWORD *)((char *)this + 248) = v9;
    v11 = *(_OWORD *)((char *)a2 + 280);
    v12 = *(_OWORD *)((char *)a2 + 296);
    v13 = *(_OWORD *)((char *)a2 + 312);
    *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
    v10[18] = v12;
    v10[19] = v13;
    v10[17] = v11;
  }
  else if (v4 == 17)
  {
    *((_QWORD *)this + 1) = off_24C017CA0;
    if (*((char *)a2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
    }
    else
    {
      v5 = *((_OWORD *)a2 + 1);
      *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
      *((_OWORD *)this + 1) = v5;
    }
    v15 = *((_DWORD *)a2 + 10);
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 10) = v15;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
    *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 1) = off_24C021970;
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  }
  return this;
}

void sub_206EBEDF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ZinConvLargeStrides::DecomposeConvWithLargeStride(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, _QWORD *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t *v17;
  int v19;
  int v20;
  ZinMirConvUtils *v21;
  uint64_t v22;
  unint64_t *v23;
  BOOL v24;
  int v25;
  uint64_t i;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int AbsMod;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  int v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  unint64_t v125;
  int v126;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  _QWORD v137[3];
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[5];
  void (**v141)(ZinIrConvUnitInfo *__hidden);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  _BYTE v151[76];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  _BYTE v158[48];
  __int128 v159;
  _BYTE v160[28];
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  _OWORD v164[2];
  __int128 v165;
  _OWORD v166[2];
  __int128 v167;
  void *__p;
  void *v169;
  uint64_t v170;
  int8x16_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _OWORD v180[2];
  uint64_t v181;

  v181 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a4 + 272) & 0x40) != 0)
    ZinAssertImpl("Large stride deconv should be handle at HandleDeconvLargeKernelStrides");
  if (*(int *)(a4 + 160) > 2)
    return 3;
  v9 = *(_QWORD *)(a4 + 104);
  if (v9 > 1)
    return 3;
  v12 = a8;
  v17 = (uint64_t *)a2;
  v19 = *(_DWORD *)(a4 + 152);
  if (v19 > 2)
  {
    v20 = *(_DWORD *)(a4 + 156);
    if (v20 >= 3 && v19 != v20)
      return 3;
  }
  v10 = 3;
  if (*(int *)(a4 + 208) < 2 && *(int *)(a4 + 212) <= 1 && *(int *)(a4 + 216) <= 1)
  {
    v21 = *(ZinMirConvUtils **)(a4 + 224);
    if (v21 != (ZinMirConvUtils *)1)
    {
      v22 = 1;
      *(_QWORD *)&v173 = 1;
      if (!ZinMirConvUtils::IsChannelwiseConvolution(*(ZinMirConvUtils **)(a1 + 8), *(ZinMirConvUtils **)(a2 + 8), v21))
      {
        if (!ZinMirConvUtils::CalculateGroupConvUnicastCin(*(_QWORD *)(a4 + 224), (uint64_t *)a1, (const ZinTensorDimensions *)v17, (const ZinTensorDimensions *)&v173, v23))return v10;
        v22 = v173;
      }
      if ((unint64_t)(v22 * *(int *)(a4 + 152) * *(int *)(a4 + 156)) > a6[95])
        return v10;
      v9 = *(_QWORD *)(a4 + 104);
      v12 = a8;
    }
    v171 = vextq_s8(*(int8x16_t *)(a4 + 88), *(int8x16_t *)(a4 + 88), 8uLL);
    v172 = v9;
    v169 = 0;
    __p = 0;
    v170 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&__p, a6 + 207, a6 + 211, 4uLL);
    v167 = 0u;
    memset(v166, 0, sizeof(v166));
    if (!Factorize(*(_DWORD *)(a4 + 152), (int **)&__p, v166) || *((_QWORD *)&v167 + 1) > 2uLL)
      goto LABEL_152;
    v165 = 0u;
    memset(v164, 0, sizeof(v164));
    if (!Factorize(*(_DWORD *)(a4 + 156), (int **)&__p, v164)
      || *((_QWORD *)&v165 + 1) > 2uLL
      || (*((_QWORD *)&v165 + 1) != 2 ? (v24 = *((_QWORD *)&v167 + 1) == 2) : (v24 = 1),
          !v24 ? (v25 = 0) : (v25 = 1),
          (v124 = v25, v24)
       && (*((_QWORD *)&v167 + 1) != *((_QWORD *)&v165 + 1)
        || !std::operator==[abi:ne180100]<int,std::allocator<int>>(v166, v164))))
    {
LABEL_151:
      std::deque<int>::~deque[abi:ne180100](v164);
LABEL_152:
      std::deque<int>::~deque[abi:ne180100](v166);
      if (__p)
      {
        v169 = __p;
        operator delete(__p);
      }
      return v10;
    }
    v28 = v12;
    v27 = *v12;
    for (i = v28[1];
          i != v27;
    a8[1] = v27;
    *(_QWORD *)(a7 + 8) = *(_QWORD *)a7;
    std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, (__int128 *)a1);
    v119 = *(int *)(a4 + 152);
    v120 = *(int *)(a4 + 156);
    v116 = *(unsigned int *)(a4 + 160);
    v29 = *(_OWORD *)(a1 + 16);
    v161 = *(_OWORD *)a1;
    v162 = v29;
    v163 = *(_QWORD *)(a1 + 32);
    LODWORD(v117) = *(_DWORD *)(a4 + 184);
    HIDWORD(v117) = *(_DWORD *)(a4 + 176);
    LODWORD(v115) = *(_DWORD *)(a4 + 188);
    HIDWORD(v115) = *(_DWORD *)(a4 + 180);
    v114 = *(_QWORD *)(a4 + 192);
    if (v124 && !ZinLargeKernelUtils::IsSameOrValidPadding((_QWORD *)a1, v17, (int *)(a4 + 152), &v171, a4 + 176))
    {
      v145 = 0;
      v143 = 0;
      v144 = 0;
      v146 = 0u;
      v147 = 0u;
      v148 = -1;
      v149 = 0u;
      v150 = 0u;
      memset(v151, 0, 42);
      v141 = &off_24C01BAC0;
      v142 = 0;
      v155 = 0;
      v153 = 0;
      v154 = 0;
      LOWORD(v156) = 0;
      v152 = 0;
      *(_QWORD *)&v151[68] = 0;
      *(_OWORD *)&v151[44] = *(_OWORD *)(a4 + 176);
      *(_QWORD *)&v151[60] = *(_QWORD *)(a4 + 192);
      v30 = *(_DWORD *)&v151[48];
      v31 = *((_QWORD *)&v162 + 1) + *(_DWORD *)&v151[48] + *(_DWORD *)&v151[44];
      v32 = *(_DWORD *)&v151[52];
      v33 = *(_DWORD *)&v151[56];
      v34 = v162 + *(_DWORD *)&v151[56] + *(_DWORD *)&v151[52];
      *((_QWORD *)&v162 + 1) = v31;
      *(_QWORD *)&v162 = v34;
      v35 = v163 + *(int *)&v151[64] + (uint64_t)*(int *)&v151[60];
      v163 = v35;
      if (v31 % v119)
      {
        v36 = v119 - v31 % v119;
        v30 = v36 + *(_DWORD *)&v151[48];
        *(_DWORD *)&v151[48] += v36;
        *((_QWORD *)&v162 + 1) = v31 + v36;
        v37 = a6[18] >= (unint64_t)(v36 + HIDWORD(v115));
        v38 = v120;
        if (!v37)
        {
LABEL_45:
          ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&v141);
          v10 = 3;
          goto LABEL_151;
        }
      }
      else
      {
        v38 = v120;
      }
      if (v34 % v38)
      {
        v39 = v38 - v34 % v38;
        v33 = v39 + *(_DWORD *)&v151[56];
        *(_DWORD *)&v151[56] += v39;
        *(_QWORD *)&v162 = v34 + v39;
        if (a6[19] < (unint64_t)(v39 + (int)v115))
          goto LABEL_45;
      }
      v40 = v35 % (int)v116;
      if (v40)
      {
        v41 = v116 - v40;
        *(_DWORD *)&v151[64] += v41;
        v163 = v35 + v41;
        if (a6[20] < (unint64_t)(v41 + HIDWORD(v114)))
          goto LABEL_45;
      }
      if (*(int *)&v151[44] > 0 || v30 >= 1)
      {
        *(_QWORD *)&v173 = 0x100000004;
        std::vector<ZinIrOpLayer *>::push_back[abi:ne180100]((void **)&v153, &v173);
        v32 = *(_DWORD *)&v151[52];
        v33 = *(_DWORD *)&v151[56];
      }
      if (v32 > 0 || v33 >= 1)
      {
        *(_QWORD *)&v173 = 0x100000003;
        std::vector<ZinIrOpLayer *>::push_back[abi:ne180100]((void **)&v153, &v173);
      }
      if (*(int *)&v151[60] > 0 || *(int *)&v151[64] >= 1)
      {
        *(_QWORD *)&v173 = 0x100000001;
        std::vector<ZinIrOpLayer *>::push_back[abi:ne180100]((void **)&v153, &v173);
      }
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173, (ZinIrPadUnitInfo *)&v141);
      std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
      std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v161);
      ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&v141);
      v117 = 0;
      v114 = 0;
      v115 = 0;
    }
    v42 = v119;
    v43 = v120;
    if (GetAbsMod(-*((_QWORD *)&v162 + 1), v119)
      || GetAbsMod(-(uint64_t)v162, v120)
      || GetAbsMod(-v163, (int)v116))
    {
      v145 = 0;
      v143 = 0;
      v144 = 0;
      v146 = 0u;
      v147 = 0u;
      v148 = -1;
      v149 = 0u;
      v150 = 0u;
      memset(v151, 0, 42);
      v141 = &off_24C01BAC0;
      v142 = 0;
      memset(&v151[44], 0, 32);
      v152 = 0;
      v153 = 0;
      v154 = 0;
      LOWORD(v156) = 0;
      v155 = 0;
      if ((int)GetAbsMod(-*((_QWORD *)&v162 + 1), v119) >= 1)
      {
        AbsMod = GetAbsMod(-*((_QWORD *)&v162 + 1), v119);
        *(_DWORD *)&v151[48] = AbsMod;
        *(_DWORD *)&v151[44] = 0;
        *(_QWORD *)&v173 = 0x100000004;
        std::vector<ZinIrOpLayer *>::push_back[abi:ne180100]((void **)&v153, &v173);
        *((_QWORD *)&v162 + 1) += AbsMod;
        v43 = v120;
      }
      if ((int)GetAbsMod(-(uint64_t)v162, v43) >= 1)
      {
        v45 = GetAbsMod(-(uint64_t)v162, v43);
        *(_DWORD *)&v151[56] = v45;
        *(_DWORD *)&v151[52] = 0;
        *(_QWORD *)&v173 = 0x100000003;
        std::vector<ZinIrOpLayer *>::push_back[abi:ne180100]((void **)&v153, &v173);
        *(_QWORD *)&v162 = v162 + v45;
      }
      if ((int)GetAbsMod(-v163, (int)v116) >= 1)
      {
        v46 = GetAbsMod(-v163, (int)v116);
        *(_DWORD *)&v151[60] = 0;
        *(_DWORD *)&v151[64] = v46;
        *(_QWORD *)&v173 = 0x100000001;
        std::vector<ZinIrOpLayer *>::push_back[abi:ne180100]((void **)&v153, &v173);
        v163 += v46;
      }
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173, (ZinIrPadUnitInfo *)&v141);
      std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
      LODWORD(v43) = v120;
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
      std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v161);
      ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&v141);
    }
    if (v124)
    {
      if (*((_QWORD *)&v167 + 1))
      {
        v47 = 0;
        v118 = v17;
        do
        {
          if ((int)v42 < 3)
          {
            v48 = 1;
          }
          else if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v166[0] + 1)
                                          + ((((unint64_t)v167 + v47) >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * ((v167 + v47) & 0x3FF)) >= (int)v42)
          {
            v48 = v42;
          }
          else
          {
            v48 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v166[0] + 1)
                                        + ((((unint64_t)v167 + v47) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v167 + v47) & 0x3FF));
          }
          v125 = v47;
          if ((int)v43 < 3)
          {
            v49 = 1;
          }
          else
          {
            if (*((_QWORD *)&v165 + 1) <= v47)
              std::__throw_out_of_range[abi:ne180100]("deque");
            if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v164[0] + 1)
                                       + ((((unint64_t)v165 + v47) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * ((v165 + v47) & 0x3FF)) >= (int)v43)
              v49 = v43;
            else
              v49 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v164[0] + 1)
                                          + ((((unint64_t)v165 + v47) >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * ((v165 + v47) & 0x3FF));
          }
          v50 = *(_QWORD *)(a7 + 8);
          v51 = *(_QWORD *)(v50 - 32);
          v52 = *(_QWORD *)(v50 - 24);
          v53 = *(_QWORD *)(v50 - 16);
          v121 = *(_QWORD *)(v50 - 40);
          v122 = *(_QWORD *)(v50 - 8);
          v142 = 0;
          v143 = 0;
          v145 = 0;
          v144 = 0;
          v146 = 0u;
          v147 = 0u;
          v148 = -1;
          v141 = off_24C024450;
          *(_QWORD *)&v149 = __PAIR64__(v49, v48);
          DWORD2(v149) = 1;
          ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173, (ZinIrPixelUnshuffleUnitInfo *)&v141);
          v54 = a8[1];
          if (v54 >= a8[2])
          {
            v55 = std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__push_back_slow_path<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>(a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
            v56 = a8;
          }
          else
          {
            ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)a8[1], (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
            v55 = v54 + 344;
            v56 = a8;
            a8[1] = v54 + 344;
          }
          v57 = v49 * (uint64_t)v48 * v51;
          v58 = v52 / v49;
          v56[1] = v55;
          v59 = v53 / v48;
          ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
          v61 = *(_QWORD **)(a7 + 8);
          v60 = *(_QWORD *)(a7 + 16);
          if ((unint64_t)v61 >= v60)
          {
            v63 = *(_QWORD **)a7;
            v64 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v61 - *(_QWORD *)a7) >> 3);
            v65 = v64 + 1;
            v17 = v118;
            LODWORD(v43) = v120;
            if (v64 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v66 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v60 - (_QWORD)v63) >> 3);
            if (2 * v66 > v65)
              v65 = 2 * v66;
            if (v66 >= 0x333333333333333)
              v67 = 0x666666666666666;
            else
              v67 = v65;
            if (v67)
            {
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(a7 + 16, v67);
              v63 = *(_QWORD **)a7;
              v61 = *(_QWORD **)(a7 + 8);
            }
            else
            {
              v68 = 0;
            }
            v69 = &v68[40 * v64];
            *(_QWORD *)v69 = v121;
            *((_QWORD *)v69 + 1) = v57;
            *((_QWORD *)v69 + 2) = v58;
            *((_QWORD *)v69 + 3) = v59;
            *((_QWORD *)v69 + 4) = v122;
            v70 = v69;
            if (v61 == v63)
            {
              v42 = v119;
            }
            else
            {
              v42 = v119;
              do
              {
                v71 = *(_OWORD *)(v61 - 5);
                v72 = *(_OWORD *)(v61 - 3);
                *((_QWORD *)v70 - 1) = *(v61 - 1);
                *(_OWORD *)(v70 - 24) = v72;
                *(_OWORD *)(v70 - 40) = v71;
                v70 -= 40;
                v61 -= 5;
              }
              while (v61 != v63);
              v63 = *(_QWORD **)a7;
            }
            v62 = v69 + 40;
            *(_QWORD *)a7 = v70;
            *(_QWORD *)(a7 + 8) = v69 + 40;
            *(_QWORD *)(a7 + 16) = &v68[40 * v67];
            if (v63)
              operator delete(v63);
          }
          else
          {
            LODWORD(v43) = v120;
            *v61 = v121;
            v61[1] = v57;
            v61[2] = v58;
            v61[3] = v59;
            v62 = v61 + 5;
            v61[4] = v122;
            v17 = v118;
            v42 = v119;
          }
          *(_QWORD *)(a7 + 8) = v62;
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v141);
          v47 = v125 + 1;
        }
        while (*((_QWORD *)&v167 + 1) > v125 + 1);
      }
    }
    else
    {
      if ((int)v119 <= 2)
        v73 = 1;
      else
        v73 = v119;
      if ((int)v43 <= 2)
        v74 = 1;
      else
        v74 = v43;
      *(_QWORD *)&v128 = v161;
      *((_QWORD *)&v128 + 1) = v74 * (uint64_t)v73 * *((_QWORD *)&v161 + 1);
      *(_QWORD *)&v129 = (uint64_t)v162 / v74;
      *((_QWORD *)&v129 + 1) = *((_QWORD *)&v162 + 1) / v73;
      v130 = v163;
      v145 = 0;
      v143 = 0;
      v144 = 0;
      v146 = 0u;
      v147 = 0u;
      v148 = -1;
      v141 = off_24C024450;
      v142 = 0;
      *(_QWORD *)&v149 = __PAIR64__(v74, v73);
      DWORD2(v149) = 1;
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173, (ZinIrPixelUnshuffleUnitInfo *)&v141);
      std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
      std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v128);
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v141);
    }
    v145 = 0;
    v143 = 0;
    v144 = 0;
    v146 = 0u;
    v147 = 0u;
    v148 = -1;
    *(_QWORD *)&v149 = 0;
    DWORD2(v149) = -1;
    *(_QWORD *)&v150 = -1;
    DWORD2(v150) = -1;
    memset(&v151[8], 0, 56);
    *(_QWORD *)v151 = -1;
    *(_DWORD *)&v151[64] = 1;
    v151[68] = 0;
    *(_WORD *)&v151[72] = 0;
    HIDWORD(v152) = -1;
    v153 = -1;
    LODWORD(v154) = -1;
    v155 = -1;
    v156 = 0x3F80000000000006;
    v141 = off_24C01CAD8;
    v142 = 0;
    v158[4] = 0;
    *(int64x2_t *)&v158[8] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v158[24] = *(_OWORD *)&v158[8];
    *(_QWORD *)&v158[40] = 0x100000001;
    LODWORD(v159) = 1;
    memset(v160, 0, 24);
    *(_DWORD *)&v160[24] = 1;
    v157 = 0;
    *(_DWORD *)v158 = 1;
    if ((int)v42 > 2)
      v75 = 1;
    else
      v75 = v119;
    if ((int)v43 > 2)
      v76 = 1;
    else
      v76 = v43;
    if ((int)v116 > 2)
      v77 = 1;
    else
      v77 = v116;
    *(_QWORD *)((char *)&v159 + 4) = __PAIR64__(v76, v75);
    HIDWORD(v159) = v77;
    v126 = GetAbsMod(-HIDWORD(v117), v42);
    v78 = v171.i64[0];
    v79 = GetAbsMod(-HIDWORD(v117), v119);
    v80 = GetAbsMod(-(v78 + v79), v119);
    v123 = GetAbsMod(-(int)v117, v120);
    v81 = v171.i64[1];
    v82 = GetAbsMod(-(int)v117, v120);
    v83 = GetAbsMod(-(v81 + v82), v120);
    if ((int)v119 >= 3)
      v78 = (v78 + v126 + v80) / v119;
    v84 = HIDWORD(v117);
    if ((int)v120 >= 3)
      v81 = (v81 + v123 + v83) / v120;
    v85 = v172;
    if ((int)v116 >= 3)
      v85 = v172 / v116;
    *(_QWORD *)&v158[16] = v78;
    *(_QWORD *)&v158[24] = v81;
    *(_QWORD *)&v158[32] = v85;
    if ((int)v119 < 3)
    {
      v87 = HIDWORD(v114);
      v86 = HIDWORD(v115);
    }
    else
    {
      v84 = (v126 + HIDWORD(v117)) / (int)v119;
      v86 = (v80 + HIDWORD(v115)) / (int)v119;
      v87 = HIDWORD(v114);
    }
    v88 = v117;
    *(_DWORD *)v160 = v84;
    *(_DWORD *)&v160[4] = v86;
    if ((int)v120 < 3)
    {
      v89 = v115;
    }
    else
    {
      v88 = (v123 + (int)v117) / (int)v120;
      v89 = (v83 + (int)v115) / (int)v120;
    }
    v90 = v114;
    *(_DWORD *)&v160[8] = v88;
    *(_DWORD *)&v160[12] = v89;
    if ((int)v116 < 3)
    {
      v91 = 1;
    }
    else
    {
      v90 = (int)v114 / (int)v116;
      v87 /= (int)v116;
      v91 = v116;
    }
    *(_DWORD *)&v160[16] = v90;
    *(_DWORD *)&v160[20] = v87;
    if ((int)v119 <= 2)
      v92 = 1;
    else
      v92 = v119;
    if ((int)v120 <= 2)
      v93 = 1;
    else
      v93 = v120;
    v140[0] = v161;
    v140[1] = *((_QWORD *)&v161 + 1) * (int)(v93 * v92 * v91);
    v140[4] = v163 / v91;
    v140[2] = (uint64_t)v162 / v93;
    v140[3] = *((_QWORD *)&v162 + 1) / v92;
    *(_QWORD *)&v173 = 0x100000001;
    DWORD2(v173) = 1;
    v94 = v17[1];
    *(_QWORD *)&v128 = 0x100000001;
    DWORD2(v128) = 1;
    ZinGetOutputTensorDimension((uint64_t)v140, &v158[16], (unsigned int *)&v159 + 1, (unsigned int *)&v173, (int *)v160, v94, (int *)&v128, (uint64_t)v137);
    DWORD1(v149) = a5;
    v148 = v17[1];
    *(_QWORD *)&v158[8] = *(_QWORD *)(a4 + 224);
    *(_DWORD *)&v160[24] = *(_DWORD *)(a4 + 200);
    DWORD2(v147) = a3;
    v158[4] = *(_BYTE *)(a4 + 272) >> 7;
    LODWORD(v173) = 1;
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)((char *)&v173 + 8), (const ZinIrKernelUnitInfo *)&v141);
    v179 = v159;
    v180[0] = *(_OWORD *)v160;
    *(_OWORD *)((char *)v180 + 12) = *(_OWORD *)&v160[12];
    v177 = *(_OWORD *)&v158[16];
    v178 = *(_OWORD *)&v158[32];
    *((_QWORD *)&v173 + 1) = off_24C01CAD8;
    v176 = *(_OWORD *)v158;
    std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
    std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, (__int128 *)v17);
    if (ZinTensorDimensionsEqual(v137, v17))
      goto LABEL_149;
    v95 = v138;
    v96 = v17[3];
    if (v138 > v96)
    {
      LODWORD(v130) = 0;
      v129 = 0uLL;
      v131 = 0u;
      v132 = 0u;
      v133 = -1;
      *(_QWORD *)&v128 = off_24C021970;
      *((_QWORD *)&v128 + 1) = 0;
      v136 = 0x400000001;
      v134 = 0;
      v135 = v96;
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173, (ZinIrInputViewUnitInfo *)&v128);
      std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
      v97 = *(_QWORD *)(a7 + 8);
      v98 = *(_QWORD *)(v97 - 8);
      v99 = *(_OWORD *)(v97 - 24);
      v173 = *(_OWORD *)(v97 - 40);
      v174 = v99;
      v100 = v17[3];
      v175 = v98;
      *((_QWORD *)&v174 + 1) = v100;
      std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v173);
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v128);
    }
    v101 = v17[2];
    if (v137[2] <= v101)
    {
      v109 = v17[4];
      v107 = v17 + 4;
      v106 = v109;
      if (v139 <= v109)
      {
        if (v95 <= v96)
        {
          v10 = 3;
          goto LABEL_150;
        }
LABEL_149:
        v10 = 0;
LABEL_150:
        ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&v141);
        goto LABEL_151;
      }
    }
    else
    {
      LODWORD(v130) = 0;
      v129 = 0uLL;
      v131 = 0u;
      v132 = 0u;
      v133 = -1;
      *(_QWORD *)&v128 = off_24C021970;
      *((_QWORD *)&v128 + 1) = 0;
      v136 = 0x300000001;
      v134 = 0;
      v135 = v101;
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173, (ZinIrInputViewUnitInfo *)&v128);
      std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
      v102 = *(_QWORD *)(a7 + 8);
      v103 = *(_QWORD *)(v102 - 8);
      v104 = *(_OWORD *)(v102 - 24);
      v173 = *(_OWORD *)(v102 - 40);
      v174 = v104;
      v105 = v17[2];
      v175 = v103;
      *(_QWORD *)&v174 = v105;
      std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v173);
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v128);
      v108 = v17[4];
      v107 = v17 + 4;
      v106 = v108;
      if (v139 <= v108)
        goto LABEL_149;
    }
    LODWORD(v130) = 0;
    v129 = 0uLL;
    v131 = 0u;
    v132 = 0u;
    v133 = -1;
    *(_QWORD *)&v128 = off_24C021970;
    *((_QWORD *)&v128 + 1) = 0;
    v136 = 0x100000001;
    v134 = 0;
    v135 = v106;
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173, (ZinIrInputViewUnitInfo *)&v128);
    std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v173);
    v110 = *(_QWORD *)(a7 + 8);
    v111 = *(_QWORD *)(v110 - 8);
    v112 = *(_OWORD *)(v110 - 24);
    v173 = *(_OWORD *)(v110 - 40);
    v174 = v112;
    v113 = *v107;
    v175 = v111;
    *(_QWORD *)&v174 = v113;
    std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v173);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v128);
    goto LABEL_149;
  }
  return v10;
}

void sub_206EBFE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  void *v48;

  ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&a47);
  std::deque<int>::~deque[abi:ne180100](&STACK[0x2B0]);
  std::deque<int>::~deque[abi:ne180100](&STACK[0x2E0]);
  v48 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<int,std::allocator<int>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _BOOL8 result;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;

  v2 = a1[5];
  if (v2 != a2[5])
    return 0;
  v3 = a1[4];
  v4 = a1[1];
  v5 = (_QWORD *)(v4 + 8 * (v3 >> 10));
  if (a1[2] == v4)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = (_DWORD *)(*v5 + 4 * (a1[4] & 0x3FFLL));
    v7 = *(_QWORD *)(v4 + (((v3 + v2) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v3 + v2) & 0x3FF);
  }
  v9 = a2[1];
  v10 = (_QWORD *)(v9 + 8 * (a2[4] >> 10));
  if (a2[2] == v9)
    v11 = 0;
  else
    v11 = (_DWORD *)(*v10 + 4 * (a2[4] & 0x3FFLL));
  if (v6 == (_DWORD *)v7)
    return 1;
  do
  {
    result = *v6 == *v11;
    if (*v6 != *v11)
      break;
    if ((_DWORD *)((char *)++v6 - *v5) == (_DWORD *)4096)
    {
      v12 = (_DWORD *)v5[1];
      ++v5;
      v6 = v12;
    }
    if ((_DWORD *)((char *)++v11 - *v10) == (_DWORD *)4096)
    {
      v13 = (_DWORD *)v10[1];
      ++v10;
      v11 = v13;
    }
  }
  while (v6 != (_DWORD *)v7);
  return result;
}

BOOL ZinLargeKernelUtils::IsSameOrValidPadding(_QWORD *a1, _QWORD *a2, int *a3, _QWORD *a4, uint64_t a5)
{
  _BOOL8 result;

  result = ZinLargeKernelUtils::IsSamePadding(a1, a2, a3, a4, (_DWORD *)a5);
  if ((*a3 < 2 || !*(_QWORD *)a5) && (a3[1] < 2 || !*(_QWORD *)(a5 + 8)) && (a3[2] < 2 || !*(_QWORD *)(a5 + 16)))
    return 1;
  return result;
}

uint64_t std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](uint64_t *a1, const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__push_back_slow_path<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>(a1, a2);
  }
  else
  {
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)a1[1], a2);
    result = v3 + 344;
    a1[1] = v3 + 344;
  }
  a1[1] = result;
  return result;
}

void sub_206EC017C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t ZinConvLargeStrides::ApplyDecomposition(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  ZinIrOpLayer *PixelUnshuffleLayer;
  size_t v10;
  std::string *v11;
  const void *v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _DWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  ZinIrOpLayer *PadLayer;
  _BOOL4 v41;
  _QWORD *v42;
  int v43;
  int v45;
  BOOL v46;
  unint64_t v48;
  uint64_t v49;
  int v50;
  ZinIrOpLayer *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _BOOL4 v62;
  _QWORD *v63;
  int v64;
  uint64_t *v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  _DWORD *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  int v76;
  _OWORD *v79;
  __int128 v80;
  unsigned __int128 v81;
  __int128 v82;
  __int128 v83;
  size_t v84;
  uint64_t v85;
  std::string *v86;
  const void *v87;
  __n128 v88;
  ZinIrKernel *v89;
  int *v90;
  uint64_t **v91;
  int v92;
  int v93;
  ZinIrKernel *v94;
  int v95;
  ZinIrKernel **v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  ZinIrKernel *v102;
  ZinIrKernel *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  ZinKernelSparsityCache *v107;
  uint64_t v108;
  ZinIrKernel *v109;
  uint64_t v110;
  ZinIrKernel *v111;
  __int128 v112;
  char v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  ZinIrKernel **v120;
  ZinIrOpLayer *View;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  const std::string::value_type **v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 *v132;
  uint64_t v133;
  _BOOL4 v134;
  int v135;
  ZinIrKernel *v136;
  ZinIrKernel *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  ZinIrKernel *v145;
  ZinKernelSparsityCache *KernelSparsityCache;
  uint64_t v147;
  uint64_t v148;
  ZinIrKernel *v149;
  char *v150;
  char *__format;
  char *__formata;
  uint64_t v153;
  uint64_t v154;
  ZinIrKernel **v155;
  int WeightFormat;
  uint64_t v158;
  uint64_t v159;
  uint64_t **v160;
  ZinConvCompositeLayer *v162;
  _OWORD v163[2];
  int v164;
  _QWORD v165[2];
  std::string v166;
  _OWORD v167[2];
  uint64_t v168;
  int64x2_t v169;
  int64x2_t v170;
  uint64_t v171;
  void *v172[2];
  __int128 v173;
  uint64_t v174;
  ZinIrKernel *v175;
  void *v176;
  uint64_t *v177;
  uint64_t *v178;
  void *v179[2];
  __int128 v180;
  __int128 v181;
  void *v182;
  void *v183;
  uint64_t v184;
  _BYTE v185[48];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  int v190;
  _QWORD v191[3];
  char v192;
  ZinIrKernel *v193;
  uint64_t v194;
  ZinIrKernel *v195;
  void *__p[2];
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  int v203;
  void *v204;
  void *v205;
  _BYTE v206[20];
  __int128 v207;
  uint64_t v208;
  void *v209;
  void *v210;
  uint64_t v211;
  __int16 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  unsigned __int128 v216;
  _BYTE v217[28];
  uint64_t v218;
  std::string v219;
  std::string::size_type v220;
  int v221;
  std::string v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  char v226;
  char v227;
  uint64_t v228;

  v228 = *MEMORY[0x24BDAC8D0];
  v5 = a4[1] - *a4;
  if (!v5 || 0xCCCCCCCCCCCCCCCDLL * ((a5[1] - *a5) >> 3) != 0x82FA0BE82FA0BE83 * (v5 >> 3) + 1)
    return 3;
  PixelUnshuffleLayer = **(ZinIrOpLayer ***)(a1 + 88);
  v159 = *(_QWORD *)(a1 + 16);
  if (*(char *)(a1 + 47) >= 0)
    v10 = *(unsigned __int8 *)(a1 + 47);
  else
    v10 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)&v219, v10 + 2);
  if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v219;
  else
    v11 = (std::string *)v219.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*(char *)(a1 + 47) >= 0)
      v12 = (const void *)(a1 + 24);
    else
      v12 = *(const void **)(a1 + 24);
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "__");
  v13 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v225, "stride_3_4_decomp");
  v14 = std::string::append(v13, "_xfm", 4uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)&v180 = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)v179 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v180) & 0x80u) == 0)
    v16 = v179;
  else
    v16 = (void **)v179[0];
  if ((SBYTE7(v180) & 0x80u) == 0)
    v17 = BYTE7(v180);
  else
    v17 = (std::string::size_type)v179[1];
  v18 = std::string::append(&v219, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)&v185[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)v185 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append((std::string *)v185, "_", 1uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  *(_QWORD *)&v197 = *((_QWORD *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v191, __p);
  if (SBYTE7(v197) < 0)
    operator delete(__p[0]);
  if ((v185[23] & 0x80000000) != 0)
    operator delete(*(void **)v185);
  if (SBYTE7(v180) < 0)
    operator delete(v179[0]);
  if (v226 < 0)
    operator delete((void *)v225);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  v154 = *(_QWORD *)(a1 + 200);
  v22 = *(char **)(v154 + 136);
  v155 = (ZinIrKernel **)(v154 + 136);
  v23 = *a4;
  v162 = (ZinConvCompositeLayer *)a1;
  v160 = a2;
  v153 = a3;
  if (a4[1] == *a4)
  {
    LODWORD(v27) = 0;
  }
  else
  {
    __format = *(char **)(v154 + 136);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v150 = "Create pad layer failed in Large Stride Conv";
    while (*(_DWORD *)(v23 + v26) == 44)
    {
      ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)__p, (const ZinIrTextureUnitInfo *)(v23 + v26 + 8));
      __p[0] = &off_24C01BAC0;
      v28 = *(_OWORD *)(v23 + v26 + 164);
      v29 = *(_OWORD *)(v23 + v26 + 180);
      v208 = *(_QWORD *)(v23 + v26 + 196);
      *(_OWORD *)&v206[4] = v28;
      v207 = v29;
      v210 = 0;
      v211 = 0;
      v209 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v209, *(const void **)(v23 + v26 + 208), *(_QWORD *)(v23 + v26 + 216), (uint64_t)(*(_QWORD *)(v23 + v26 + 216) - *(_QWORD *)(v23 + v26 + 208)) >> 3);
      v212 = *(_WORD *)(v23 + v26 + 232);
      ZinConvCompositeLayer::GetDequantizedPadInfo((ZinIrKernel *)a1, (ZinIrPadUnitInfo *)__p);
      (*(void (**)(_BYTE *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PixelUnshuffleLayer + 80))(v185, PixelUnshuffleLayer, 0, 0);
      v30 = *a5;
      v31 = *a5 + v25;
      v32 = *(_QWORD *)(v31 + 32);
      v33 = *(_OWORD *)(v31 + 16);
      *(_OWORD *)&v185[8] = *(_OWORD *)v31;
      *(_OWORD *)&v185[24] = v33;
      *(_QWORD *)&v185[40] = v32;
      v34 = operator new(0x78uLL);
      v219.__r_.__value_.__l.__size_ = (std::string::size_type)(v34 + 30);
      v219.__r_.__value_.__r.__words[2] = (std::string::size_type)(v34 + 30);
      v34[28] = v190;
      v35 = v189;
      v36 = v187;
      *((_OWORD *)v34 + 5) = v188;
      *((_OWORD *)v34 + 6) = v35;
      v37 = *(_OWORD *)&v185[16];
      *(_OWORD *)v34 = *(_OWORD *)v185;
      *((_OWORD *)v34 + 1) = v37;
      v38 = v186;
      *((_OWORD *)v34 + 2) = *(_OWORD *)&v185[32];
      *((_OWORD *)v34 + 3) = v38;
      *((_OWORD *)v34 + 4) = v36;
      v219.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      v39 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PixelUnshuffleLayer + 32))(PixelUnshuffleLayer, 0, 0);
      PadLayer = (ZinIrOpLayer *)ZinBuilder::CreatePadLayer(v159, (uint64_t)v191, (uint64_t)&v219, (__int128 *)(v30 + v25 + 40), *(_DWORD *)(v39 + 88), (const ZinIrPadUnitInfo *)__p);
      if (v219.__r_.__value_.__r.__words[0])
      {
        v219.__r_.__value_.__l.__size_ = v219.__r_.__value_.__r.__words[0];
        operator delete(v219.__r_.__value_.__l.__data_);
      }
      if (!PadLayer)
        goto LABEL_216;
      *(_QWORD *)&v225 = *(_QWORD *)(a1 + 200);
      v179[0] = &v225;
      v179[1] = (void *)1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v219, v179);
      v41 = ZinIrOpLayerGraph::AddNode(a2, PadLayer, (ZinIrOpLayer ***)&v219);
      v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v219.__r_.__value_.__l.__size_)
      {
        v219.__r_.__value_.__r.__words[2] = v219.__r_.__value_.__l.__size_;
        operator delete((void *)v219.__r_.__value_.__l.__size_);
      }
      v42 = operator new(8uLL);
      v219.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *v42 = PixelUnshuffleLayer;
      v219.__r_.__value_.__l.__size_ = (std::string::size_type)(v42 + 1);
      v219.__r_.__value_.__r.__words[2] = (std::string::size_type)(v42 + 1);
      v43 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)&v219, (uint64_t)PadLayer);
      if (v219.__r_.__value_.__r.__words[0])
      {
        v219.__r_.__value_.__l.__size_ = v219.__r_.__value_.__r.__words[0];
        operator delete(v219.__r_.__value_.__l.__data_);
      }
      if ((v41 & v43 & 1) == 0)
      {
        v150 = "Add new pad layer into graph failed";
LABEL_216:
        ZinAssertImpl(v150);
      }
      __p[0] = &off_24C01BAC0;
      if (v209)
      {
        v210 = v209;
        operator delete(v209);
      }
      ++v27;
      ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)__p);
      v23 = *a4;
      v26 += 344;
      v25 += 40;
      PixelUnshuffleLayer = PadLayer;
      if (0x82FA0BE82FA0BE83 * ((a4[1] - *a4) >> 3) <= v27)
        goto LABEL_48;
    }
    PadLayer = PixelUnshuffleLayer;
LABEL_48:
    PixelUnshuffleLayer = PadLayer;
    v22 = __format;
    a3 = v153;
  }
  v182 = 0;
  v183 = 0;
  v184 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v182, (uint64_t *)(a3 + 1656), (uint64_t *)(a3 + 1688), 4uLL);
  v180 = 0u;
  v181 = 0u;
  *(_OWORD *)v179 = 0u;
  if (*((int *)v22 + 82) <= 2)
    v45 = 1;
  else
    v45 = *((_DWORD *)v22 + 82);
  v46 = Factorize(v45, (int **)&v182, v179);
  if (*((_QWORD *)&v181 + 1) >= 3uLL || !v46)
    ZinAssertImpl("Error: fail to factorize the stride for large stride conv");
  v176 = 0;
  v177 = 0;
  v178 = 0;
  std::vector<ZinIrDims3D>::reserve((char **)&v176, 2uLL);
  v48 = v27;
  v49 = *a4;
  v50 = *(_DWORD *)(*a4 + 344 * v27);
  if (v50 == 32)
  {
    __formata = "Create pixel unshuffle layer failed in Large Stride Conv";
    do
    {
      v51 = PixelUnshuffleLayer;
      v52 = v49 + 344 * v48;
      v53 = *(_QWORD *)(v52 + 88);
      v54 = *(unsigned int *)(v52 + 96);
      v55 = *a5;
      (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v51 + 80))(__p, v51, 0, 0);
      v56 = operator new(0x78uLL);
      *(_QWORD *)&v185[8] = v56 + 30;
      *(_QWORD *)&v185[16] = v56 + 30;
      v56[28] = v203;
      v57 = v202;
      v58 = v200;
      *((_OWORD *)v56 + 5) = v201;
      *((_OWORD *)v56 + 6) = v57;
      v59 = v197;
      *(_OWORD *)v56 = *(_OWORD *)__p;
      *((_OWORD *)v56 + 1) = v59;
      v60 = v199;
      *((_OWORD *)v56 + 2) = v198;
      *((_OWORD *)v56 + 3) = v60;
      *((_OWORD *)v56 + 4) = v58;
      *(_QWORD *)v185 = v56;
      v61 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0, 0);
      ++v48;
      v24 = v24 & 0xFFFFFFFF00000000 | v54;
      PixelUnshuffleLayer = (ZinIrOpLayer *)ZinBuilder::CreatePixelUnshuffleLayer(v159, (uint64_t)v191, (uint64_t)v185, (__int128 *)(v55 + 40 * v48), *(_DWORD *)(v61 + 88), v53, v24);
      if (*(_QWORD *)v185)
      {
        *(_QWORD *)&v185[8] = *(_QWORD *)v185;
        operator delete(*(void **)v185);
      }
      if (!PixelUnshuffleLayer)
        goto LABEL_214;
      v219.__r_.__value_.__r.__words[0] = *((_QWORD *)v162 + 25);
      *(_QWORD *)v185 = &v219;
      *(_QWORD *)&v185[8] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, v185);
      v62 = ZinIrOpLayerGraph::AddNode(a2, PixelUnshuffleLayer, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        *(void **)&v197 = __p[1];
        operator delete(__p[1]);
      }
      v63 = operator new(8uLL);
      __p[0] = v63;
      *v63 = v51;
      *(_QWORD *)&v197 = v63 + 1;
      __p[1] = v63 + 1;
      v64 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)__p, (uint64_t)PixelUnshuffleLayer);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((v62 & v64 & 1) == 0)
      {
        __formata = "Add new pixel unshuffle layer into graph failed";
LABEL_214:
        ZinAssertImpl(__formata);
      }
      v65 = v177;
      if (v177 >= v178)
      {
        v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)v177 - (_BYTE *)v176) >> 2);
        v68 = v67 + 1;
        if (v67 + 1 > 0x1555555555555555)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v178 - (_BYTE *)v176) >> 2) > v68)
          v68 = 0x5555555555555556 * (((char *)v178 - (_BYTE *)v176) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v178 - (_BYTE *)v176) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v69 = 0x1555555555555555;
        else
          v69 = v68;
        if (v69)
          v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)&v178, v69);
        else
          v70 = 0;
        v71 = &v70[12 * v67];
        *(_QWORD *)v71 = v53;
        *((_DWORD *)v71 + 2) = v54;
        v73 = v176;
        v72 = v177;
        v74 = v71;
        if (v177 != v176)
        {
          do
          {
            v75 = *(_QWORD *)(v72 - 3);
            v72 -= 3;
            v76 = v72[2];
            *(_QWORD *)(v74 - 12) = v75;
            v74 -= 12;
            *((_DWORD *)v74 + 2) = v76;
          }
          while (v72 != v73);
          v72 = v176;
        }
        v66 = (uint64_t *)(v71 + 12);
        v176 = v74;
        v177 = (uint64_t *)(v71 + 12);
        v178 = (uint64_t *)&v70[12 * v69];
        if (v72)
          operator delete(v72);
      }
      else
      {
        *v177 = v53;
        *((_DWORD *)v65 + 2) = v54;
        v66 = (uint64_t *)((char *)v65 + 12);
      }
      v177 = v66;
      v49 = *a4;
      v50 = *(_DWORD *)(*a4 + 344 * v48);
    }
    while (v50 == 32);
    LODWORD(v27) = v48;
    a3 = v153;
  }
  else
  {
    PixelUnshuffleLayer = 0;
  }
  if (0x82FA0BE82FA0BE83 * ((a4[1] - v49) >> 3) <= v48 || v50 != 1 || PixelUnshuffleLayer == 0)
    ZinAssertImpl("Error: conv and pixel unshuffle units are expected for decomposed large stride conv");
  v79 = (_OWORD *)(v49 + 344 * v48 + 8);
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)__p, (const ZinIrKernelUnitInfo *)v79);
  __p[0] = off_24C01CAD8;
  v80 = v79[17];
  v81 = v79[18];
  v82 = v79[19];
  *(_OWORD *)&v217[12] = *(_OWORD *)((char *)v79 + 316);
  v83 = v79[16];
  v213 = v79[15];
  v214 = v83;
  v216 = v81;
  *(_OWORD *)v217 = v82;
  v215 = v80;
  *((_QWORD *)&v187 + 1) = 0x100000001;
  DWORD1(v189) = 0;
  *(_OWORD *)v185 = v83;
  v186 = v82;
  *(_QWORD *)&v187 = *(_QWORD *)&v217[16];
  *(_QWORD *)&v185[16] = v80;
  *(_QWORD *)&v185[24] = v81 >> 32;
  *(_DWORD *)&v185[32] = HIDWORD(v81);
  *(_QWORD *)&v185[36] = 0x100000001;
  *(_DWORD *)&v185[44] = 1;
  LOWORD(v189) = BYTE4(v213);
  *((_QWORD *)&v188 + 1) = *((_QWORD *)&v213 + 1);
  LODWORD(v188) = 1;
  DWORD1(v188) = *(_DWORD *)&v217[24];
  if (*(char *)(v154 + 47) >= 0)
    v84 = *(unsigned __int8 *)(v154 + 47);
  else
    v84 = *(_QWORD *)(v154 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)&v219, v84 + 7);
  v85 = (uint64_t)v162;
  if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = &v219;
  else
    v86 = (std::string *)v219.__r_.__value_.__r.__words[0];
  if (v84)
  {
    if (*(char *)(v154 + 47) >= 0)
      v87 = (const void *)(v154 + 24);
    else
      v87 = *(const void **)(v154 + 24);
    memmove(v86, v87, v84);
  }
  strcpy((char *)v86 + v84, "_s_3_4_");
  v88 = ZinObjectNameFactory::ZinObjectNameFactory(&v225, &v219);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, uint64_t, __n128))(*(_QWORD *)v154 + 136))(&v219, v154, v88);
  if (BYTE8(v224) && (v89 = *v155) != 0)
  {
    v166.__r_.__value_.__r.__words[0] = v220;
    LODWORD(v166.__r_.__value_.__r.__words[1]) = v221;
    if ((char *)v177 - (_BYTE *)v176 == 12)
    {
      v90 = (int *)&v222.__r_.__value_.__r.__words[1];
      v165[0] = 0;
LABEL_115:
      v94 = 0;
      *(_QWORD *)&v185[24] = *(_QWORD *)((char *)&v216 + 4);
      *(_DWORD *)&v185[32] = HIDWORD(v216);
      goto LABEL_116;
    }
    v90 = (int *)v217;
    v165[0] = 0;
    if ((char *)v177 - (_BYTE *)v176 != 24)
      goto LABEL_115;
    v92 = *((_DWORD *)v177 - 3);
    if (v92 == *((_DWORD *)v177 - 2))
    {
      if ((int)v220 < 3)
        v93 = 1;
      else
        v93 = SLODWORD(v166.__r_.__value_.__l.__data_) / v92;
      LODWORD(v166.__r_.__value_.__l.__data_) = v93;
      if (SHIDWORD(v220) < 3)
        v138 = 1;
      else
        v138 = SHIDWORD(v166.__r_.__value_.__r.__words[0]) / v92;
      HIDWORD(v166.__r_.__value_.__r.__words[0]) = v138;
      ZinLargeKernelUtils::CreatePaddedWeight(v155, (int *)&v166, (int *)v217, 1, &v195);
      *(_QWORD *)&v185[24] = v166.__r_.__value_.__r.__words[0];
      *(_DWORD *)&v185[32] = v166.__r_.__value_.__r.__words[1];
      if ((int)v220 < 3)
        v139 = *(_QWORD *)v185;
      else
        v139 = *((_QWORD *)v195 + 10) / v93;
      *(_QWORD *)v185 = v139;
      if (SHIDWORD(v220) < 3)
        v140 = *(_QWORD *)&v185[8];
      else
        v140 = *((_QWORD *)v195 + 9) / v138;
      *(_QWORD *)&v185[8] = v140;
      v141 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PixelUnshuffleLayer
                                                                                   + 32))(PixelUnshuffleLayer, 0, 0)+ 56);
      v142 = *((_QWORD *)&v188 + 1);
      v143 = *((_QWORD *)v89 + 71);
      if (v143)
        std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v143, &v218);
      else
        v218 = 0;
      v144 = *((_QWORD *)v89 + 74);
      if (v144)
        std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v144, &v194);
      else
        v194 = 0;
      ZinObjectNameFactory::CreateName((uint64_t)&v225, 2u, (std::string *)v172);
      WeightFormat = ZinIrKernel::GetWeightFormat(*v155);
      v145 = (ZinIrKernel *)operator new();
      ZinIrKernel::ZinIrKernel((uint64_t)v145, (__int128 *)v172, WeightFormat, (__int128 *)v185, (uint64_t *)&v195, &v218, &v194, 0, 2);
      v193 = v145;
      if (SBYTE7(v173) < 0)
        operator delete(v172[0]);
      v158 = v166.__r_.__value_.__r.__words[0];
      KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v154 + 16));
      ZinConvLargeStrides::ShuffledPaddedKernel_v3(&v193, (uint64_t *)v185, v141 / (v92 * v92) / v142, v158, (uint64_t)&v225, v153, 1, (uint64_t *)v172, KernelSparsityCache);
      v94 = (ZinIrKernel *)v172[0];
      v165[0] = v172[0];
      LODWORD(v166.__r_.__value_.__l.__data_) = v92;
      HIDWORD(v166.__r_.__value_.__r.__words[0]) = v92;
      ZinIrKernel::~ZinIrKernel(v145);
      MEMORY[0x20BD002F8]();
      v147 = v194;
      v194 = 0;
      if (v147)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v194, v147);
      v148 = v218;
      v218 = 0;
      a3 = v153;
      if (v148)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v218, v148);
      v149 = v195;
      v195 = 0;
      if (v149)
        (*(void (**)(ZinIrKernel *))(*(_QWORD *)v149 + 16))(v149);
      *(_QWORD *)&v185[24] = *(_QWORD *)((char *)&v216 + 4);
      *(_DWORD *)&v185[32] = HIDWORD(v216);
      if (v92 > 1)
      {
        v96 = (ZinIrKernel **)v165;
        v95 = 1;
        goto LABEL_117;
      }
LABEL_116:
      v95 = 0;
      v96 = (ZinIrKernel **)(v154 + 136);
LABEL_117:
      ZinLargeKernelUtils::CreatePaddedWeight(v96, (int *)&v166, v90, v95, &v195);
      if (ZinIrKernel::GetWeightFormat(*v155) == 6)
        v97 = 4;
      else
        v97 = *((_DWORD *)v195 + 2);
      if ((int)v220 < 3)
        v98 = *(_QWORD *)v185;
      else
        v98 = *((_QWORD *)v195 + 10) / SLODWORD(v166.__r_.__value_.__l.__data_);
      *(_QWORD *)v185 = v98;
      if (SHIDWORD(v220) < 3)
        v99 = *(_QWORD *)&v185[8];
      else
        v99 = *((_QWORD *)v195 + 9) / SHIDWORD(v166.__r_.__value_.__r.__words[0]);
      *(_QWORD *)&v185[8] = v99;
      v100 = *((_QWORD *)v89 + 71);
      if (v100)
        std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v100, &v218);
      else
        v218 = 0;
      v101 = *((_QWORD *)v89 + 74);
      if (v101)
        std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>(v101, &v194);
      else
        v194 = 0;
      ZinObjectNameFactory::CreateName((uint64_t)&v225, 2u, (std::string *)v172);
      v102 = (ZinIrKernel *)operator new();
      v103 = v94;
      ZinIrKernel::ZinIrKernel((uint64_t)v102, (__int128 *)v172, v97, (__int128 *)v185, (uint64_t *)&v195, &v218, &v194, 0, 2);
      v193 = v102;
      if (SBYTE7(v173) < 0)
        operator delete(v172[0]);
      v104 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PixelUnshuffleLayer
                                                                                   + 32))(PixelUnshuffleLayer, 0, 0)+ 56);
      v105 = *((_QWORD *)&v188 + 1);
      v106 = v166.__r_.__value_.__r.__words[0];
      v107 = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v154 + 16));
      ZinConvLargeStrides::ShuffledPaddedKernel_v3(&v193, (uint64_t *)v185, v104 / v105, v106, (uint64_t)&v225, a3, v95, (uint64_t *)&v175, v107);
      if (!v175)
        ZinAssertImpl("Failed to create ShuffledPaddedKernel_v3");
      ZinIrKernel::~ZinIrKernel(v102);
      MEMORY[0x20BD002F8]();
      v108 = v194;
      v194 = 0;
      v91 = v160;
      v109 = v103;
      v85 = (uint64_t)v162;
      if (v108)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v194, v108);
      v110 = v218;
      v218 = 0;
      if (v110)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v218, v110);
      v111 = v195;
      v195 = 0;
      if (v111)
        (*(void (**)(ZinIrKernel *))(*(_QWORD *)v111 + 16))(v111);
      v165[0] = 0;
      if (v109)
      {
        ZinIrKernel::~ZinIrKernel(v109);
        MEMORY[0x20BD002F8]();
      }
      goto LABEL_143;
    }
    v175 = 0;
    v85 = (uint64_t)v162;
  }
  else
  {
    v175 = 0;
  }
  v91 = v160;
LABEL_143:
  *(_QWORD *)&v225 = off_24C01FBB0;
  if (v227 < 0)
    operator delete(*((void **)&v225 + 1));
  v112 = *(_OWORD *)((char *)v175 + 536);
  v187 = *(_OWORD *)((char *)v175 + 520);
  v188 = v112;
  *(_QWORD *)&v189 = *((_QWORD *)v175 + 69);
  v113 = v189;
  v114 = *(_OWORD *)((char *)v175 + 472);
  *(_OWORD *)v185 = *(_OWORD *)((char *)v175 + 456);
  *(_OWORD *)&v185[16] = v114;
  v115 = *(_OWORD *)((char *)v175 + 504);
  *(_OWORD *)&v185[32] = *(_OWORD *)((char *)v175 + 488);
  v186 = v115;
  v116 = *((_QWORD *)*v155 + 31);
  v117 = *((_QWORD *)&v188 + 1);
  v118 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PixelUnshuffleLayer + 32))(PixelUnshuffleLayer, 0, 0);
  if (v113)
    v119 = v117;
  else
    v119 = 1;
  v219.__r_.__value_.__r.__words[0] = 0x100000001;
  LODWORD(v219.__r_.__value_.__r.__words[1]) = 1;
  ZinGetOutputTensorDimension(v118 + 48, v185, (unsigned int *)&v185[24], (unsigned int *)&v185[36], (int *)&v186, v119 * v116, (int *)&v219, (uint64_t)&v225);
  if (!ZinTensorDimensions::IsValid((ZinTensorDimensions *)&v225))
    ZinAssertImpl("Invalid output dimension");
  v195 = 0;
  v120 = ZinConvCompositeLayer::CreateDecomposedPartition(v85, &v175, &v195, 0, 0, &v225, v159, v91, (const ZinConvLayer *)v191, (uint64_t)PixelUnshuffleLayer);
  View = (ZinIrOpLayer *)v120;
  if (!v120)
    ZinAssertImpl("Failed to create convComposite partition");
  v122 = (v27 + 1);
  v123 = *a4;
  if (0x82FA0BE82FA0BE83 * ((a4[1] - *a4) >> 3) <= v122)
  {
    v126 = 1;
    goto LABEL_169;
  }
  v124 = 344 * v122 + 88;
  v125 = (uint64_t)v120;
  v126 = 1;
  while (1)
  {
    v127 = v123 + v124;
    if (*(_DWORD *)(v123 + v124 - 88) != 17)
      break;
    v219.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C017CA0;
    v128 = (const std::string::value_type **)(v127 - 72);
    if (*(char *)(v127 - 49) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v219.__r_.__value_.__r.__words[1], *v128, *(_QWORD *)(v123 + v124 - 64));
    }
    else
    {
      v129 = *(_OWORD *)v128;
      v220 = *(_QWORD *)(v127 - 56);
      *(_OWORD *)&v219.__r_.__value_.__r.__words[1] = v129;
    }
    v221 = *(_DWORD *)(v123 + v124 - 48);
    memset(&v222, 0, sizeof(v222));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v222, *(__int128 **)(v123 + v124 - 40), *(__int128 **)(v123 + v124 - 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v123 + v124 - 32) - *(_QWORD *)(v123 + v124 - 40)) >> 3));
    v223 = *(_OWORD *)(v123 + v124 - 16);
    v219.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C021970;
    v224 = *(_OWORD *)(v123 + v124);
    v130 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0, 0);
    v131 = *(_OWORD *)(v130 + 64);
    *(_OWORD *)v172 = *(_OWORD *)(v130 + 48);
    v173 = v131;
    v174 = *(_QWORD *)(v130 + 80);
    if (HIDWORD(v224) == 3)
    {
      v132 = &v173;
    }
    else
    {
      v132 = (__int128 *)((char *)&v173 + 8);
      if (HIDWORD(v224) != 4)
        goto LABEL_161;
    }
    *(_QWORD *)v132 = SDWORD1(v224);
LABEL_161:
    ZinObjectNameFactory::CreateName((uint64_t)v191, 0, &v166);
    v133 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0, 0);
    memset(v167, 0, sizeof(v167));
    v169 = vdupq_n_s64(1uLL);
    v170 = v169;
    v168 = 0;
    v171 = 1;
    View = (ZinIrOpLayer *)ZinBuilder::CreateView(v159, (uint64_t)&v166, v133, (__int128 *)v172, (uint64_t)v167);
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
    v218 = *((_QWORD *)v162 + 25);
    v165[0] = &v218;
    v165[1] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v166, v165);
    v134 = ZinIrOpLayerGraph::AddNode(v160, View, (ZinIrOpLayer ***)&v166);
    v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (v166.__r_.__value_.__l.__size_)
    {
      v166.__r_.__value_.__r.__words[2] = v166.__r_.__value_.__l.__size_;
      operator delete((void *)v166.__r_.__value_.__l.__size_);
    }
    v126 &= v134 & ZinIrOpLayerGraph::AddEdge((uint64_t)v160, v125, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v219.__r_.__value_.__l.__data_);
    ++v122;
    v123 = *a4;
    v124 += 344;
    v125 = (uint64_t)View;
    if (0x82FA0BE82FA0BE83 * ((a4[1] - *a4) >> 3) <= v122)
      goto LABEL_169;
  }
  View = (ZinIrOpLayer *)v125;
LABEL_169:
  memset(v163, 0, sizeof(v163));
  v164 = 1065353216;
  v135 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v160, (uint64_t **)v162, View, v163);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v163);
  if ((v126 & v135 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v160, v162, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: large stride conv graph manipulation error");
  v136 = v195;
  v195 = 0;
  if (v136)
  {
    ZinIrKernel::~ZinIrKernel(v136);
    MEMORY[0x20BD002F8]();
  }
  v137 = v175;
  v175 = 0;
  if (v137)
  {
    ZinIrKernel::~ZinIrKernel(v137);
    MEMORY[0x20BD002F8]();
  }
  __p[0] = off_24C01ED88;
  if (*(_QWORD *)v206)
  {
    *(_QWORD *)&v206[8] = *(_QWORD *)v206;
    operator delete(*(void **)v206);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(__p);
  if (v176)
  {
    v177 = (uint64_t *)v176;
    operator delete(v176);
  }
  std::deque<int>::~deque[abi:ne180100](v179);
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  v191[0] = off_24C01FBB0;
  if (v192 < 0)
    operator delete((void *)v191[1]);
  return 0;
}

void sub_206EC15C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,ZinIrKernel *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t v63;
  uint64_t v65;
  unint64_t v66;

  v65 = *(_QWORD *)(v63 - 248);
  *(_QWORD *)(v63 - 248) = 0;
  if (v65)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v63 - 248, v65);
  v66 = STACK[0x278];
  STACK[0x278] = 0;
  if (v66)
    (*(void (**)(unint64_t))(*(_QWORD *)v66 + 16))(v66);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a29, 0);
  *(_QWORD *)(v63 - 144) = off_24C01FBB0;
  if (*(char *)(v63 - 113) < 0)
    operator delete(*(void **)(v63 - 136));
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x280]);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  std::deque<int>::~deque[abi:ne180100](&a55);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  STACK[0x240] = (unint64_t)off_24C01FBB0;
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  _Unwind_Resume(a1);
}

void std::vector<ZinIrDims3D>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = (a1[1] - *a1) / 12;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v14 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t ZinConvLargeStrides::HandleConvLargeKernelStrides(ZinConvLargeStrides *this, uint64_t **a2, ZinIrOpLayerGraph *a3, const ZinIrHalParameters *a4)
{
  int64x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int WeightFormat;
  int v12;
  ZinIrKernel *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t v23;
  int v24;
  int v25;
  size_t v26;
  __int128 *v27;
  char *v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  int32x4_t v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v57;
  ZinIrKernel **v58;
  uint64_t v59;
  ZinIrOpLayer *Transpose;
  _BOOL4 v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  ZinIrKernel *v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  int8x16_t v71;
  int8x16_t v72;
  uint64_t v73;
  __int128 v74;
  unint64_t *v75;
  unint64_t v76;
  _OWORD *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t **v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL8 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  ZinIrOpLayer *Reshape;
  _OWORD *v101;
  ZinIrOpLayer *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  ZinIrOpLayer *v108;
  int v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  ZinIrKernel *v114;
  uint64_t KernelSparsityCache;
  ZinIrKernel **v116;
  double WeightDimensions;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t i;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD *v126;
  ZinIrKernel **v127;
  uint64_t v128;
  int v129;
  _OWORD *v130;
  uint64_t v131;
  ZinIrOpLayer *v132;
  _BOOL4 v133;
  int v134;
  ZinIrKernel *v135;
  ZinIrKernel *v136;
  _BOOL4 v137;
  int v138;
  _BOOL4 v139;
  int v140;
  _BOOL4 v141;
  _BOOL4 v142;
  ZinIrOpLayerGraph *v143;
  uint64_t v144;
  int v145;
  ZinKernelSparsityCache *v146;
  ZinKernelSparsityCache *v147;
  ZinIrOpLayerGraph *v148;
  int v149;
  ZinIrKernel **v150;
  int v151;
  ZinIrOpLayerGraph *v152;
  int v153;
  uint64_t v154;
  ZinIrOpLayerGraph *v155;
  ZinIrOpLayerGraph *v156;
  uint64_t v157;
  ZinIrOpLayerGraph *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE __p[96];
  char v166[8];
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  int64x2_t v178;
  int64x2_t v179;
  _BYTE v180[24];
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187[3];
  uint64_t v188[3];
  __int128 v189;
  ZinIrOpLayerGraph *v190;
  ZinIrOpLayerGraph *v191;
  ZinKernelSparsityCache *v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  void *v196;
  void *v197;
  _OWORD *v198;
  std::string v199;
  uint64_t v200;
  uint64_t v201;
  ZinIrKernel *v202;
  int v203;
  _QWORD v204[3];
  char v205;
  ZinIrKernel *v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  _BYTE v211[32];
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  _OWORD *v215;
  uint64_t v216;
  uint64_t v217;
  ZinIrKernel *v218;
  __int128 v219;
  char v220;
  __int128 v221;
  int8x16_t v222;
  uint64_t v223;
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  memset(v188, 0, sizeof(v188));
  memset(v187, 0, sizeof(v187));
  v185 = 0;
  v184 = 0;
  v186 = 0;
  v7 = (int64x2_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, const ZinIrHalParameters *))(***((_QWORD ***)this + 11)
                                                                                                  + 32))(**((_QWORD **)this + 11), 0, 0, a4);
  v8 = (*(uint64_t (**)(ZinConvLargeStrides *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v9 = *((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 25);
  WeightFormat = ZinIrKernel::GetWeightFormat(*(ZinIrKernel **)(v10 + 136));
  if (ZinKernelFormatIsPalette(WeightFormat))
    ZinAssertImpl("Error: does not support palettized weight with large kernel stride");
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 668))
    ZinAssertImpl("Error: Large stride conv cannot support dynamic shape");
  v12 = v7[5].i32[2];
  v13 = *(ZinIrKernel **)(v10 + 136);
  v14 = ZinIrKernel::GetWeightFormat(v13);
  if (!ZinConvLargeStrides::DecomposeConvWithLargeStride((uint64_t)v7[3].i64, v8 + 48, v12, (uint64_t)v13 + 176, v14, a3, (uint64_t)&v184, v188))
  {
    v38 = ZinConvLargeStrides::ApplyDecomposition((uint64_t)this, a2, (uint64_t)a3, v188, (uint64_t *)&v184);
    goto LABEL_56;
  }
  if (*((_QWORD *)a3 + 52) == 1)
  {
    v15 = **((_QWORD **)this + 11);
    v16 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
    v210 = *(_QWORD *)(v16 + 80);
    v17 = *(_OWORD *)(v16 + 64);
    v208 = *(_OWORD *)(v16 + 48);
    v209 = v17;
    v153 = *(_DWORD *)(v16 + 88);
    v18 = (*(uint64_t (**)(ZinConvLargeStrides *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
    v207 = *(_OWORD *)(v18 + 48);
    v155 = *(ZinIrOpLayerGraph **)(v18 + 64);
    v146 = *(ZinKernelSparsityCache **)(v18 + 80);
    v148 = *(ZinIrOpLayerGraph **)(v18 + 72);
    v157 = *((_QWORD *)this + 2);
    v158 = (ZinIrOpLayerGraph *)a2;
    v19 = *((_QWORD *)this + 25);
    v20 = *(_QWORD *)(v19 + 136);
    v150 = (ZinIrKernel **)(v19 + 136);
    v152 = a3;
    v21 = *(_QWORD *)(v20 + 256);
    v22 = *(_QWORD *)(v20 + 272);
    v159 = *(_QWORD *)(v20 + 264);
    v161 = *(_QWORD *)(v20 + 328);
    v145 = *(_DWORD *)(v20 + 336);
    v23 = *(int32x2_t *)(v20 + 352);
    v24 = *(_DWORD *)(v20 + 360);
    v25 = *(_DWORD *)(v20 + 364);
    v163 = *(_QWORD *)(v20 + 368);
    if (*((char *)this + 47) >= 0)
      v26 = *((unsigned __int8 *)this + 47);
    else
      v26 = *((_QWORD *)this + 4);
    v206 = 0;
    std::string::basic_string[abi:ne180100]((uint64_t)&v221, v26 + 2);
    if (v222.i8[7] >= 0)
      v27 = &v221;
    else
      v27 = (__int128 *)v221;
    if (v26)
    {
      if (*((char *)this + 47) >= 0)
        v28 = (char *)this + 24;
      else
        v28 = (char *)*((_QWORD *)this + 3);
      memmove(v27, v28, v26);
    }
    strcpy((char *)v27 + v26, "__");
    std::string::basic_string[abi:ne180100]<0>(&v199, "u1_stride_gt_2");
    v29 = std::string::append(&v199, "_xfm", 4uLL);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v215 = (_OWORD *)v29->__r_.__value_.__r.__words[2];
    v214 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v215) >= 0)
      v31 = (const std::string::value_type *)&v214;
    else
      v31 = (const std::string::value_type *)v214;
    if (SHIBYTE(v215) >= 0)
      v32 = HIBYTE(v215);
    else
      v32 = *((_QWORD *)&v214 + 1);
    v33 = std::string::append((std::string *)&v221, v31, v32);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    *(_QWORD *)&v211[16] = *((_QWORD *)&v33->__r_.__value_.__l + 2);
    *(_OWORD *)v211 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append((std::string *)v211, "_", 1uLL);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v35->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v204, __p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v211[23] & 0x80000000) != 0)
      operator delete(*(void **)v211);
    if (SHIBYTE(v215) < 0)
      operator delete((void *)v214);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v199.__r_.__value_.__l.__data_);
    if (v222.i8[7] < 0)
      operator delete((void *)v221);
    v37 = (_QWORD)v209 == 1 && v22 % (int)v161 == 0;
    v45 = *((_QWORD *)&v209 + 1);
    v46 = *((_QWORD *)&v209 + 1) == 1 && v159 % (v161 >> 32) == 0;
    if ((v37 || v46)
      && ((*(int32x2_t *)v47.i8 = vrev64_s32(v23),
           v47.i64[1] = v163,
           (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v47))) & 1) != 0)
       || !v24
       || !v25))
    {
      v142 = v46;
      if (v46)
      {
        v57 = operator new(0x10uLL);
        v58 = v150;
        *(_QWORD *)&v214 = v57;
        *v57 = xmmword_207A8D550;
        *((_QWORD *)&v214 + 1) = v57 + 1;
        v215 = v57 + 1;
        v59 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
        Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v157, (uint64_t)v204, v59 + 48, v153, (uint64_t)&v214);
        *(_QWORD *)&v221 = *((_QWORD *)this + 25);
        *(_QWORD *)v211 = &v221;
        *(_QWORD *)&v211[8] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, v211);
        v61 = ZinIrOpLayerGraph::AddNode((uint64_t **)v158, Transpose, (ZinIrOpLayer ***)__p);
        *(_QWORD *)__p = &unk_24C02BB18;
        if (*(_QWORD *)&__p[8])
        {
          *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
          operator delete(*(void **)&__p[8]);
        }
        v62 = ZinIrOpLayerGraph::AddEdge((uint64_t)v158, v15, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v63 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
        v64 = *(_OWORD *)(v63 + 64);
        v208 = *(_OWORD *)(v63 + 48);
        v209 = v64;
        v210 = *(_QWORD *)(v63 + 80);
        v65 = *v150;
        v66 = (_OWORD *)((char *)*v150 + 456);
        v67 = *(_OWORD *)((char *)*v150 + 472);
        *(_OWORD *)__p = *v66;
        *(_OWORD *)&__p[16] = v67;
        *(_QWORD *)v166 = *((_QWORD *)v65 + 69);
        v68 = v66[5];
        *(_OWORD *)&__p[64] = v66[4];
        *(_OWORD *)&__p[80] = v68;
        v69 = v66[3];
        *(_OWORD *)&__p[32] = v66[2];
        *(_OWORD *)&__p[48] = v69;
        *(_QWORD *)__p = v159;
        *(_QWORD *)&__p[8] = v22;
        *(_DWORD *)&__p[24] = HIDWORD(v161);
        *(_DWORD *)&__p[28] = v161;
        v196 = 0;
        v70 = *((_QWORD *)v65 + 73);
        v71 = vextq_s8(*(int8x16_t *)(v70 + 72), *(int8x16_t *)(v70 + 72), 8uLL);
        *(_OWORD *)v211 = *(_OWORD *)(v70 + 56);
        *(int8x16_t *)&v211[16] = v71;
        v212 = *(_QWORD *)(v70 + 88);
        v72 = vextq_s8(*(int8x16_t *)(v70 + 112), *(int8x16_t *)(v70 + 112), 8uLL);
        v221 = *(_OWORD *)(v70 + 96);
        v222 = v72;
        v223 = *(_QWORD *)(v70 + 128);
        std::allocate_shared[abi:ne180100]<ZinIrTransformWeightAlias,std::allocator<ZinIrTransformWeightAlias>,ZinKernelDimensions &,ZinKernelDimensions &,void>((__int128 *)v211, (uint64_t)&v221, &v189);
        v73 = *((_QWORD *)*v150 + 73);
        v74 = v189;
        v219 = v189;
        if (*((_QWORD *)&v189 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        memset(&v199, 0, sizeof(v199));
        *(_QWORD *)&v193 = &v199;
        BYTE8(v193) = 0;
        v77 = operator new(0x10uLL);
        v199.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        v199.__r_.__value_.__l.__size_ = (std::string::size_type)v77;
        v199.__r_.__value_.__r.__words[2] = (std::string::size_type)(v77 + 1);
        *v77 = v74;
        if (*((_QWORD *)&v74 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        v199.__r_.__value_.__l.__size_ = (std::string::size_type)(v77 + 1);
        ZinIrWeight::Transform(v73, (uint64_t)&v199, (uint64_t *)&v196);
        *(_QWORD *)&v193 = &v199;
        std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
        if (*((_QWORD *)&v74 + 1))
        {
          v80 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v74 + 1) + 16))(*((_QWORD *)&v74 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v74 + 1));
          }
        }
        ZinObjectNameFactory::CreateName((uint64_t)v204, 2u, &v199);
        v82 = (uint64_t **)v158;
        v203 = ZinIrKernel::GetWeightFormat(*v150);
        v202 = 0;
        v218 = *v150;
        *(_QWORD *)&v219 = 0;
        std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat,ZinIrConvInfo &,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr),ZinIrKernel*>((__int128 *)&v199, &v203, (__int128 *)__p, (uint64_t *)&v196, (uint64_t *)&v218, (uint64_t *)&v193);
        v206 = (ZinIrKernel *)v193;
        *(_QWORD *)&v193 = 0;
        if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v199.__r_.__value_.__l.__data_);
        v83 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
        if (*((_QWORD *)&v189 + 1))
        {
          v84 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v86 = v196;
        v196 = 0;
        if (v86)
          (*(void (**)(void *))(*(_QWORD *)v86 + 16))(v86);
        v87 = v61 & v62;
        if ((_QWORD)v214)
        {
          *((_QWORD *)&v214 + 1) = v214;
          operator delete((void *)v214);
        }
        v45 = *((_QWORD *)&v209 + 1);
        v143 = v148;
        v88 = HIDWORD(v161);
      }
      else
      {
        v87 = 1;
        v143 = v155;
        v155 = v148;
        v88 = v161;
        v159 = v22;
        v161 = HIDWORD(v161);
        Transpose = (ZinIrOpLayer *)v15;
        v82 = (uint64_t **)v158;
        v58 = v150;
      }
      v89 = v88;
      v164 = v88 * v21;
      if ((unint64_t)v164 <= *((_QWORD *)v152 + 46))
      {
        v90 = v45 / v88;
        if ((unint64_t)(v90 * v21) <= *((_QWORD *)v152 + 42))
        {
          v199.__r_.__value_.__r.__words[0] = v208;
          v201 = v210;
          v200 = v88;
          v199.__r_.__value_.__l.__size_ = 1;
          v199.__r_.__value_.__r.__words[2] = v90 * v21;
          v99 = operator new(0x14uLL);
          *(_QWORD *)&v211[16] = v99 + 5;
          v99[4] = 4;
          *(_OWORD *)v99 = xmmword_207AA84A8;
          *(_QWORD *)v211 = v99;
          *(_QWORD *)&v211[8] = v99 + 5;
          DimensionOrderHint::DimensionOrderHint(__p, v211);
          Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v157, (uint64_t)v204, (uint64_t)&v208, v153, (__int128 *)&v199, (const DimensionOrderHint *)__p);
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          if (*(_QWORD *)v211)
          {
            *(_QWORD *)&v211[8] = *(_QWORD *)v211;
            operator delete(*(void **)v211);
          }
          *(_QWORD *)&v221 = *((_QWORD *)this + 25);
          *(_QWORD *)v211 = &v221;
          *(_QWORD *)&v211[8] = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(__p, v211);
          v141 = ZinIrOpLayerGraph::AddNode(v82, Reshape, (ZinIrOpLayer ***)__p);
          *(_QWORD *)__p = &unk_24C02BB18;
          if (*(_QWORD *)&__p[8])
          {
            *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
            operator delete(*(void **)&__p[8]);
          }
          v140 = ZinIrOpLayerGraph::AddEdge((uint64_t)v82, (uint64_t)Transpose, (uint64_t)Reshape, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v101 = operator new(0x10uLL);
          v196 = v101;
          *v101 = xmmword_207A8A860;
          v198 = v101 + 1;
          v197 = v101 + 1;
          v102 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v157, (uint64_t)v204, (uint64_t)&v199, v153, (uint64_t)&v196);
          *(_QWORD *)&v221 = *((_QWORD *)this + 25);
          *(_QWORD *)v211 = &v221;
          *(_QWORD *)&v211[8] = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(__p, v211);
          v139 = ZinIrOpLayerGraph::AddNode(v82, v102, (ZinIrOpLayer ***)__p);
          *(_QWORD *)__p = &unk_24C02BB18;
          if (*(_QWORD *)&__p[8])
          {
            *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
            operator delete(*(void **)&__p[8]);
          }
          v138 = ZinIrOpLayerGraph::AddEdge((uint64_t)v82, (uint64_t)Reshape, (uint64_t)v102, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v103 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v102 + 32))(v102, 0, 0);
          v104 = *(_OWORD *)(v103 + 64);
          v193 = *(_OWORD *)(v103 + 48);
          v194 = v104;
          v105 = *(_QWORD *)(v103 + 80);
          *((_QWORD *)&v193 + 1) = v164;
          *(_QWORD *)&v194 = 1;
          v195 = v105;
          *((_QWORD *)&v194 + 1) = v90;
          v106 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v102 + 32))(v102, 0, 0);
          v107 = operator new(0x14uLL);
          *(_QWORD *)&v211[16] = v107 + 5;
          v107[4] = 4;
          *(_OWORD *)v107 = xmmword_207AA84A8;
          *(_QWORD *)v211 = v107;
          *(_QWORD *)&v211[8] = v107 + 5;
          DimensionOrderHint::DimensionOrderHint(__p, v211);
          v108 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v157, (uint64_t)v204, v106 + 48, v153, &v193, (const DimensionOrderHint *)__p);
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          if (*(_QWORD *)v211)
          {
            *(_QWORD *)&v211[8] = *(_QWORD *)v211;
            operator delete(*(void **)v211);
          }
          *(_QWORD *)&v221 = *((_QWORD *)this + 25);
          *(_QWORD *)v211 = &v221;
          *(_QWORD *)&v211[8] = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(__p, v211);
          v137 = ZinIrOpLayerGraph::AddNode(v82, v108, (ZinIrOpLayer ***)__p);
          *(_QWORD *)__p = &unk_24C02BB18;
          if (*(_QWORD *)&__p[8])
          {
            *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
            operator delete(*(void **)&__p[8]);
          }
          v109 = ZinIrOpLayerGraph::AddEdge((uint64_t)v82, (uint64_t)v102, (uint64_t)v108, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v149 = v87;
          v154 = v18;
          v189 = v207;
          v190 = v143;
          v191 = v155;
          v192 = v146;
          v110 = *(_QWORD *)(*((_QWORD *)this + 25) + 136);
          v111 = *(_OWORD *)(v110 + 472);
          *(_OWORD *)__p = *(_OWORD *)(v110 + 456);
          *(_OWORD *)&__p[16] = v111;
          *(_QWORD *)v166 = *(_QWORD *)(v110 + 552);
          v112 = *(_OWORD *)(v110 + 504);
          *(_OWORD *)&__p[32] = *(_OWORD *)(v110 + 488);
          *(_OWORD *)&__p[48] = v112;
          v113 = *(_OWORD *)(v110 + 536);
          *(_OWORD *)&__p[64] = *(_OWORD *)(v110 + 520);
          *(_OWORD *)&__p[80] = v113;
          *(_QWORD *)__p = v159 / v89;
          *(int64x2_t *)&__p[8] = vdupq_n_s64(1uLL);
          *(_QWORD *)&__p[24] = 0x100000001;
          *(_DWORD *)&__p[32] = 1;
          v114 = v206;
          KernelSparsityCache = ZinIrContext::GetKernelSparsityCache(*((ZinIrContext **)this + 2));
          if (v114)
            v116 = &v206;
          else
            v116 = v58;
          WeightDimensions = ZinIrKernel::GetWeightDimensions(*v116, (uint64_t)&v221);
          if ((_DWORD)v161 != 1 || v145 != 1)
            ZinAssertImpl("Only W can have large stride\n", WeightDimensions);
          *(_QWORD *)&v214 = v221;
          *((_QWORD *)&v214 + 1) = v164;
          v215 = *(_OWORD **)&__p[8];
          v216 = *(_QWORD *)__p;
          v217 = *(_QWORD *)&__p[16];
          v160 = v221;
          v162 = *(_QWORD *)__p;
          v118 = *(_QWORD *)__p * v164;
          details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)v211, *(_QWORD *)&__p[8] * v221 * *(_QWORD *)__p * v164 * *(_QWORD *)&__p[16]);
          v147 = (ZinKernelSparsityCache *)KernelSparsityCache;
          v151 = v109;
          v144 = (uint64_t)v108;
          v156 = this;
          if (v118 != v222.i64[1] * *((_QWORD *)&v221 + 1))
            ZinAssertImpl("Mismatch in shuffled kernel dims\n");
          v119 = v162;
          if (v160 >= 1)
          {
            v120 = 0;
            v121 = 0;
            do
            {
              if (v164 >= 1)
              {
                for (i = 0; i != v164; ++i)
                {
                  if (v119 >= 1)
                  {
                    v123 = 0;
                    v124 = 40 * v121;
                    do
                    {
                      v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_
                                                                + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                      v126 = (_QWORD *)(v213 + v124);
                      if (!v125)
                        v126 = v211;
                      ++v121;
                      *v126 = v120;
                      v126[1] = i % v21;
                      v126[2] = 0;
                      v126[3] = v123 + i / v21;
                      v126[4] = 0;
                      v123 += v89;
                      v124 += 40;
                      --v119;
                    }
                    while (v119);
                  }
                  v119 = v162;
                }
              }
              ++v120;
            }
            while (v120 != v160);
          }
          (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(v204[0] + 16))(&v219, v204, 2);
          ZinIrKernel::ShuffleKernel((uint64_t)*v116, &v219, (uint64_t)v211, *(int *)&__p[24], *(int *)&__p[28], *(int *)&__p[32], *(int *)&__p[36], *(int *)&__p[40], (uint64_t *)&v202, *(int *)&__p[44], (uint64_t)&v214, (uint64_t)v152, v147, (__int128 *)&__p[48], v166[1], *(int *)&__p[84]);
          if (v220 < 0)
            operator delete((void *)v219);
          details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)v211);
          *(_QWORD *)&v219 = 0;
          v127 = ZinConvCompositeLayer::CreateDecomposedPartition((uint64_t)this, &v202, (ZinIrKernel **)&v219, 0, 0, &v189, v157, (uint64_t **)v158, (const ZinConvLayer *)v204, v144);
          v128 = (uint64_t)v127;
          if (!v127)
            ZinAssertImpl("Failed to create convComposite partition");
          v129 = v149 & v141 & v140 & v139 & v138 & v137 & v151;
          if (v142)
          {
            v130 = operator new(0x10uLL);
            *(_QWORD *)&v221 = v130;
            *v130 = xmmword_207A8D550;
            *((_QWORD *)&v221 + 1) = v130 + 1;
            v222.i64[0] = (uint64_t)(v130 + 1);
            v131 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0, 0);
            v132 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v157, (uint64_t)v204, v131 + 48, *(_DWORD *)(v154 + 88), (uint64_t)&v221);
            v218 = (ZinIrKernel *)*((_QWORD *)v156 + 25);
            *(_QWORD *)&v214 = &v218;
            *((_QWORD *)&v214 + 1) = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(v211, &v214);
            v133 = ZinIrOpLayerGraph::AddNode((uint64_t **)v158, v132, (ZinIrOpLayer ***)v211);
            *(_QWORD *)v211 = &unk_24C02BB18;
            if (*(_QWORD *)&v211[8])
            {
              *(_QWORD *)&v211[16] = *(_QWORD *)&v211[8];
              operator delete(*(void **)&v211[8]);
            }
            v129 &= v133 & ZinIrOpLayerGraph::AddEdge((uint64_t)v158, v128, (uint64_t)v132, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
            if ((_QWORD)v221)
            {
              *((_QWORD *)&v221 + 1) = v221;
              operator delete((void *)v221);
            }
          }
          else
          {
            v132 = (ZinIrOpLayer *)v127;
          }
          memset(v211, 0, sizeof(v211));
          LODWORD(v212) = 1065353216;
          v134 = ZinIrOpLayerGraph::MoveOutgoingEdges(v158, (uint64_t **)v156, v132, v211);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v211);
          if ((v129 & v134 & ZinIrOpLayerGraph::RemoveNode(v158, v156, 0)) != 0)
            v38 = 0;
          else
            v38 = 3;
          v135 = (ZinIrKernel *)v219;
          *(_QWORD *)&v219 = 0;
          if (v135)
          {
            ZinIrKernel::~ZinIrKernel(v135);
            MEMORY[0x20BD002F8]();
          }
          v136 = v202;
          v202 = 0;
          if (v136)
          {
            ZinIrKernel::~ZinIrKernel(v136);
            MEMORY[0x20BD002F8]();
          }
          if (v196)
          {
            v197 = v196;
            operator delete(v196);
          }
          goto LABEL_52;
        }
      }
      v91 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v91)
        ZinConvLargeStrides::HandleConvLargeKernelStrides(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      v48 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v48)
        ZinConvLargeStrides::HandleConvLargeKernelStrides(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    v38 = 3;
LABEL_52:
    v204[0] = off_24C01FBB0;
    if (v205 < 0)
      operator delete((void *)v204[1]);
    if (v206)
    {
      ZinIrKernel::~ZinIrKernel(v206);
      MEMORY[0x20BD002F8]();
    }
    goto LABEL_56;
  }
  v39 = *(_QWORD *)(v10 + 136);
  v177 = 0u;
  v174 = 0u;
  v173 = 0u;
  v172 = 0u;
  v167 = 0xFFFFFFFFLL;
  *(_DWORD *)&__p[92] = 0;
  *(_OWORD *)&__p[72] = 0u;
  memset(&__p[8], 0, 64);
  *(_QWORD *)&__p[72] = -1;
  *(_QWORD *)&__p[84] = 0xFFFFFFFF00000000;
  *(_QWORD *)v166 = -1;
  v168 = -1;
  v169 = 0u;
  v170 = 0u;
  v171 = 0u;
  *(_QWORD *)&v172 = 0;
  DWORD2(v172) = 1;
  DWORD2(v173) = -1;
  *(_QWORD *)&v174 = -1;
  DWORD2(v174) = -1;
  v175 = -1;
  v176 = 0x3F80000000000006;
  *(_QWORD *)__p = off_24C01CAD8;
  BYTE12(v177) = 0;
  v178 = vdupq_n_s64(1uLL);
  v179 = v178;
  *(_QWORD *)&v40 = 0x100000001;
  *((_QWORD *)&v40 + 1) = 0x100000001;
  *(_OWORD *)v180 = v40;
  *(_QWORD *)&v180[16] = 0x100000001;
  v181 = 0uLL;
  v182 = 0;
  v183 = 1;
  *(_DWORD *)&__p[32] = 1;
  v41 = ZinIrKernel::GetWeightFormat((ZinIrKernel *)v39);
  v42 = v7[5].i32[2];
  *(_DWORD *)&__p[84] = v41;
  *(_DWORD *)&__p[64] = v42;
  v43 = *(_QWORD *)(v39 + 264);
  v44 = *(_QWORD *)(v39 + 280);
  v178.i64[1] = *(_QWORD *)(v39 + 272);
  v179.i64[0] = v43;
  v179.i64[1] = v44;
  *(_DWORD *)&v180[8] = *(_DWORD *)(v39 + 392);
  *(_QWORD *)v180 = *(_QWORD *)(v39 + 384);
  *(_QWORD *)&v180[12] = *(_QWORD *)(v39 + 328);
  *(_DWORD *)&v180[20] = *(_DWORD *)(v39 + 336);
  v181 = *(_OWORD *)(v39 + 352);
  v182 = *(_QWORD *)(v39 + 368);
  LODWORD(v183) = *(_DWORD *)(v39 + 376);
  if (ZinConvPoolLargeStride::DecomposeLargeStrideConv(v42, (ZinConvLayerUtils *)__p, (uint64_t)a3, v7 + 3, *(_QWORD *)(v8 + 56), (int64x2_t **)&v184, v187))ZinAssertImpl("Large stride Conv decomposition failed");
  v38 = ZinConvPoolLargeStride::LargeStrideConvLower(v9, a2, (uint64_t)v187, &v184, (uint64_t)this);
  *(_QWORD *)__p = off_24C01ED88;
  if ((_QWORD)v171)
  {
    *((_QWORD *)&v171 + 1) = v171;
    operator delete((void *)v171);
  }
  if (*((_QWORD *)&v169 + 1))
  {
    *(_QWORD *)&v170 = *((_QWORD *)&v169 + 1);
    operator delete(*((void **)&v169 + 1));
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)__p);
LABEL_56:
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  *(_QWORD *)__p = v187;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_QWORD *)__p = v188;
  std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v38;
}

void sub_206EC2C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  STACK[0x380] = v33 + 16;
  v36 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v36;
    operator delete(v36);
  }
  v37 = *(void **)(v34 - 160);
  if (v37)
  {
    *(_QWORD *)(v34 - 152) = v37;
    operator delete(v37);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v34 - 184), 0);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&STACK[0x300], 0);
  v38 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v38;
    operator delete(v38);
  }
  STACK[0x310] = (unint64_t)off_24C01FBB0;
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete((void *)STACK[0x318]);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&STACK[0x338], 0);
  v39 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v39;
    operator delete(v39);
  }
  a33 = &STACK[0x230];
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = &STACK[0x248];
  std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t HandleLargeKernelStrides(ZinConvLargeStrides *this, uint64_t **a2, ZinIrOpLayerGraph *a3, const ZinIrHalParameters *a4)
{
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 25) + 136) + 448) & 0x40) != 0)
    return ZinDeconvLargeStrides::HandleDeconvLargeKernelStrides(this, a2, a3, a4);
  else
    return ZinConvLargeStrides::HandleConvLargeKernelStrides(this, a2, a3, a4);
}

uint64_t std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride4SamePad>(uint64_t *a1, const ZinDeconvLargeStrides::DeconvStride4SamePad *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  ZinDeconvLargeStrides::DeconvStride4SamePad *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5F417D05F417D0)
    v9 = 0xBE82FA0BE82FA0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (ZinDeconvLargeStrides::DeconvStride4SamePad *)&v10[344 * v4];
  v16 = &v10[344 * v9];
  ZinDeconvLargeStrides::DeconvStride4SamePad::DeconvStride4SamePad(v14, a2);
  v15 = (char *)v14 + 344;
  std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinDeconvLargeStrides::DeconvStride4SamePad>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206EC30CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinDeconvLargeStrides::DeconvStride4SamePad>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinDeconvLargeStrides::DeconvStride4SamePad>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride4SamePad*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride4SamePad*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride4SamePad*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinDeconvLargeStrides::DeconvStride4SamePad>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride4SamePad*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride4SamePad*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride4SamePad*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  ZinDeconvLargeStrides::DeconvStride4SamePad *v12;

  v10 = 0;
  v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    v12 = (ZinDeconvLargeStrides::DeconvStride4SamePad *)(v11 + v10);
    v10 -= 344;
    ZinDeconvLargeStrides::DeconvStride4SamePad::DeconvStride4SamePad(v12, (const ZinDeconvLargeStrides::DeconvStride4SamePad *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinDeconvLargeStrides::DeconvStride4SamePad>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 344;
    ZinDeconvLargeStrides::DeconvStride4SamePad::~DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)(i - 344));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride3And4>(uint64_t *a1, const ZinDeconvLargeStrides::DeconvStride3And4 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  ZinDeconvLargeStrides::DeconvStride3And4 *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5F417D05F417D0)
    v9 = 0xBE82FA0BE82FA0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (ZinDeconvLargeStrides::DeconvStride3And4 *)&v10[344 * v4];
  v16 = &v10[344 * v9];
  ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4(v14, a2);
  v15 = (char *)v14 + 344;
  std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinDeconvLargeStrides::DeconvStride3And4>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206EC3338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinDeconvLargeStrides::DeconvStride3And4>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinDeconvLargeStrides::DeconvStride3And4>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinDeconvLargeStrides::DeconvStride3And4>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  ZinDeconvLargeStrides::DeconvStride3And4 *v12;

  v10 = 0;
  v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    v12 = (ZinDeconvLargeStrides::DeconvStride3And4 *)(v11 + v10);
    v10 -= 344;
    ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4(v12, (const ZinDeconvLargeStrides::DeconvStride3And4 *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinDeconvLargeStrides::DeconvStride3And4>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 344;
    ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)(i - 344));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<ZinIrKernel>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<ZinIrKernel>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  ZinIrKernel **v2;
  ZinIrKernel **v4;
  void *v5;

  v1 = *a1;
  v2 = (ZinIrKernel **)**a1;
  if (v2)
  {
    v4 = (ZinIrKernel **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__push_back_slow_path<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>(uint64_t *a1, const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5F417D05F417D0)
    v9 = 0xBE82FA0BE82FA0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v10[344 * v4];
  v16 = &v10[344 * v9];
  ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(v14, a2);
  v15 = (char *)v14 + 344;
  std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206EC3668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *v12;

  v10 = 0;
  v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    v12 = (ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)(v11 + v10);
    v10 -= 344;
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(v12, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 344;
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)(i - 344));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ZinConvLargeStrides::ShuffledPaddedKernel_v3@<X0>(ZinIrKernel **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t *a8@<X8>, ZinKernelSparsityCache *a9)
{
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t i;
  uint64_t j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v35;
  uint64_t *v36;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void *__p[2];
  char v55;
  _BYTE v56[48];
  uint64_t v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[6];

  v17 = HIDWORD(a4);
  ZinIrKernel::GetWeightDimensions(*a1, (uint64_t)v62);
  v58[0] = v62[0];
  v58[1] = a3;
  v18 = *a2;
  v59 = a2[1];
  v60 = v18;
  v61 = a2[2];
  v43 = v62[0];
  v44 = a3;
  v45 = v59;
  v53 = v18;
  details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)v56, v62[0] * a3 * v59 * v18 * v61);
  v19 = (int)a4;
  v47 = v17;
  v48 = a4 >> 32;
  v40 = a6;
  v41 = a8;
  v38 = (uint64_t *)a1;
  v39 = a2;
  v42 = a5;
  v52 = a4;
  if ((int)v17 >= 3 && (int)a4 >= 3 || a7)
  {
    v51 = (int)a4 * (uint64_t)SHIDWORD(a4);
  }
  else
  {
    v51 = a4 >> 32;
    if ((int)a4 < 3)
    {
      v50 = 1;
      v51 = a4 >> 32;
      goto LABEL_6;
    }
  }
  v50 = a4 >> 32;
LABEL_6:
  if (v43 < 1)
    goto LABEL_48;
  v20 = 0;
  v21 = 0;
  if ((int)v17 > 2)
    v22 = 1;
  else
    v22 = a7;
  if ((int)a4 > 2)
    v23 = 1;
  else
    v23 = a7;
  v49 = v23;
  do
  {
    if (v44 < 1)
      goto LABEL_47;
    for (i = 0; i < v44; ++i)
    {
      if (v45 < 1)
        continue;
      for (j = 0; j < v45; ++j)
      {
        if (v53 < 1)
          continue;
        v26 = 0;
        v46 = v21;
        v27 = 40 * v21;
        do
        {
          if (v22)
          {
            v28 = i % v51 / v50 + j * v48;
            if ((v49 & 1) != 0)
            {
              v29 = i % v19 + v26 * v19;
              v30 = v19;
LABEL_31:
              v31 = v48;
              goto LABEL_33;
            }
            v30 = 1;
            v29 = v26;
            if (v47 >= 3)
              goto LABEL_31;
            v30 = 1;
            v29 = v26;
            v31 = 1;
          }
          else
          {
            if (v52 >= 3)
              v30 = v19;
            else
              v30 = 1;
            if (v52 >= 3)
              v29 = i % v19 + v26 * v19;
            else
              v29 = v26;
            v31 = 1;
            v28 = j;
          }
LABEL_33:
          v32 = i / (v31 * (uint64_t)v30);
          if (v32 >= v62[1] || v28 >= v62[2] || v29 >= v62[3])
            ZinAssertImpl("Read from out side of original weight");
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
          v36 = (uint64_t *)(v57 + v27);
          if (!v35)
            v36 = (uint64_t *)v56;
          *v36 = v20;
          v36[1] = v32;
          v36[2] = v28;
          v36[3] = v29;
          v36[4] = 0;
          ++v26;
          v27 += 40;
        }
        while (v53 > v26);
        v21 = v46 + v26;
      }
    }
LABEL_47:
    ++v20;
  }
  while (v43 > v20);
LABEL_48:
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(__p, v42, 2);
  ZinIrKernel::ShuffleKernel(*v38, (__int128 *)__p, (uint64_t)v56, *((_DWORD *)v39 + 6), *((_DWORD *)v39 + 7), *((_DWORD *)v39 + 8), *((_DWORD *)v39 + 9), *((_DWORD *)v39 + 10), v41, *((int *)v39 + 11), (uint64_t)v58, v40, a9, (__int128 *)v39 + 3, *((_BYTE *)v39 + 97), *((_DWORD *)v39 + 21));
  if (!*v41)
    ZinAssertImpl("Failed to generate new kernel in ShuffledPaddedKernel_v3");
  if (v55 < 0)
    operator delete(__p[0]);
  return details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)v56);
}

void sub_206EC3B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  ZinIrKernel **v38;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v38, 0);
  if (a37 < 0)
    operator delete(__p);
  details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat,ZinIrConvInfo &,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr),ZinIrKernel*>@<X0>(__int128 *a1@<X0>, int *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X6>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = operator new();
  v13 = *a2;
  v17 = 0;
  v18 = 0;
  result = ZinIrKernel::ZinIrKernel(v12, a1, v13, a3, a4, &v18, &v17, *a5, 2);
  *a6 = v12;
  v15 = v17;
  v17 = 0;
  if (v15)
    result = std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v17, v15);
  v16 = v18;
  v18 = 0;
  if (v16)
    return std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v18, v16);
  return result;
}

void sub_206EC3C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a11;
  a11 = 0;
  if (v14)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a11, v14);
  v15 = a12;
  a12 = 0;
  if (v15)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a12, v15);
  MEMORY[0x20BD002F8](v12, 0x1032C40DEE44497);
  _Unwind_Resume(a1);
}

void ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Deconv stride should be 4 on both width and height axis", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Deconv with stride > 2 is not yet supported on depth axis\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Dilation factor should be 1 for Deconv with stride > 2\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Deconv with stride 4 is supported only for SAME mode\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinDeconvLargeStrides::HandleDeconvLargeKernelStrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Criterias for large kernel strides for Deconv are not met\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Large stride deconv is not lowered\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinConvLargeStrides::HandleConvLargeKernelStrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Criterias for large kernel strides are not met\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Criterias for large kernel strides are not met due to large tensor dimensions\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinIrParallelExecution::FindFirstQualifiedPELayer(uint64_t a1, const ZinIrOpLayer *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)a2;
  if (a3 >= (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3)
    return 0;
  v4 = a3;
  while (!ZinIrParallelExecution::IsQualifiedPE(*(ZinIrParallelExecution **)(v3 + 8 * v4), a2))
  {
    ++v4;
    v3 = *(_QWORD *)a2;
    if (v4 >= (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)a2 + 8 * v4);
}

BOOL ZinIrParallelExecution::IsQualifiedPE(ZinIrParallelExecution *this, const ZinIrOpLayer *a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;

  result = ZinIrOpLayer::IsPELayer(this);
  if (result)
  {
    if (*((_QWORD *)this + 25))
    {
      v5 = *((_QWORD *)this + 11);
      v4 = *((_QWORD *)this + 12);
      if (v5 == v4)
      {
        return 1;
      }
      else
      {
        v6 = v5 + 8;
        do
        {
          v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 8);
          result = v7 == 28;
          v8 = v7 != 28 || v6 == v4;
          v6 += 8;
        }
        while (!v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ZinIrParallelExecution::FindQualifiedConsecutiveNELayers(ZinIrHalParameters ***a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v14;
  double v15;
  ZinIrOpLayer *v16;
  ZinIrOpLayer **v17;
  ZinIrOpLayer **v18;
  _QWORD *v19;
  uint64_t v20;
  ZinANELayer **v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  ZinIrOpLayer *v27;
  BOOL IsPELayer;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  ZinIrOpLayer **v34;
  char *v35;
  char *v36;
  ZinIrOpLayer *v37;
  ZinANELayer **v38;
  int v39;
  double v40;
  uint64_t v41;
  __int128 __p;
  char *v44;
  _BYTE v45[872];
  __int128 v46[2];
  _BYTE v47[32];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;

  v71 = 0;
  v72 = 0;
  v73 = 0;
  v58 = 0;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  memset(v47, 0, sizeof(v47));
  v8 = operator new(8uLL);
  v59 = v8;
  *v8 = 0;
  v61 = v8 + 1;
  v60 = v8 + 1;
  v62 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v64 = _Q0;
  v65 = _Q0;
  v66 = _Q0;
  v67 = _Q0;
  v63 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  ZinIrHalParameters::GetOperationCondition(**a1, *((double *)(*a1)[1] + 13), *((_DWORD *)(*a1)[1] + 28), *((_DWORD *)(*a1)[1] + 29), (uint64_t)v46);
  v14 = (uint64_t)**a1;
  LOWORD(__p) = 257;
  BYTE2(__p) = 1;
  *(_DWORD *)((char *)&__p + 3) = 0;
  *(_DWORD *)((char *)&__p + 6) = 0;
  BYTE10(__p) = 1;
  *(_DWORD *)((char *)&__p + 11) = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)v45, v14, v46, (uint64_t *)&__p);
  if (a3 >= a4)
  {
LABEL_52:
    v41 = 0;
    goto LABEL_53;
  }
  v15 = 0.0;
  do
  {
    v16 = *(ZinIrOpLayer **)(*a2 + 8 * a3);
    if (!ZinIrOpLayer::IsNELayer(v16))
      goto LABEL_39;
    v17 = (ZinIrOpLayer **)*((_QWORD *)v16 + 11);
    v18 = (ZinIrOpLayer **)*((_QWORD *)v16 + 12);
    while (v17 != v18)
    {
      if (ZinIrOpLayer::IsPELayer(*v17))
        goto LABEL_39;
      ++v17;
    }
    __p = 0uLL;
    v44 = 0;
    v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v44, 1uLL);
    *v19 = v16;
    v21 = (ZinANELayer **)(v19 + 1);
    v22 = (char *)*((_QWORD *)&__p + 1);
    v23 = (char *)__p;
    v24 = v19;
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      do
      {
        v25 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *--v24 = v25;
      }
      while (v22 != v23);
      v22 = (char *)__p;
    }
    *(_QWORD *)&__p = v24;
    *((_QWORD *)&__p + 1) = v19 + 1;
    v44 = (char *)&v19[v20];
    if (v22)
      operator delete(v22);
    *((_QWORD *)&__p + 1) = v21;
    v26 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(*a2 + 8 * v26)))
        {
          v27 = *(ZinIrOpLayer **)(*a2 + 8 * v26);
          IsPELayer = ZinIrOpLayer::IsPELayer(v27);
          v21 = (ZinANELayer **)*((_QWORD *)&__p + 1);
          if (IsPELayer)
            goto LABEL_35;
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v44)
          {
            v30 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
            if ((unint64_t)(v30 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v31 = (uint64_t)&v44[-__p] >> 2;
            if (v31 <= v30 + 1)
              v31 = v30 + 1;
            if ((unint64_t)&v44[-__p] >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            if (v32)
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v44, v32);
            else
              v33 = 0;
            v34 = (ZinIrOpLayer **)&v33[8 * v30];
            *v34 = v27;
            v29 = v34 + 1;
            v35 = (char *)*((_QWORD *)&__p + 1);
            v36 = (char *)__p;
            if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
            {
              do
              {
                v37 = (ZinIrOpLayer *)*((_QWORD *)v35 - 1);
                v35 -= 8;
                *--v34 = v37;
              }
              while (v35 != v36);
              v35 = (char *)__p;
            }
            *(_QWORD *)&__p = v34;
            *((_QWORD *)&__p + 1) = v29;
            v44 = &v33[8 * v32];
            if (v35)
              operator delete(v35);
          }
          else
          {
            **((_QWORD **)&__p + 1) = v27;
            v29 = v21 + 1;
          }
          *((_QWORD *)&__p + 1) = v29;
        }
        ++v26;
      }
      while (v26 != a4);
      v21 = (ZinANELayer **)*((_QWORD *)&__p + 1);
      v26 = a4;
    }
LABEL_35:
    v38 = (ZinANELayer **)__p;
    if ((unint64_t)((unint64_t)v21 - __p) < 0x28)
    {
      v39 = 4;
      if (!(_QWORD)__p)
        goto LABEL_38;
LABEL_37:
      *((_QWORD *)&__p + 1) = v38;
      operator delete(v38);
      goto LABEL_38;
    }
    v40 = 0.0;
    while (v38 != v21)
    {
      if (ZinANELayer::CalculatePerf(*v38, (ZinIrPerf *)v45, (ZinPerfDescriptor *)v47))
      {
        v39 = 1;
        goto LABEL_49;
      }
      v40 = v40 + *((double *)&v48 + 1);
      ++v38;
    }
    if (v40 <= v15)
    {
      v39 = 0;
      a3 = v26;
    }
    else
    {
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v71, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
      v39 = 0;
      a3 = v26;
      v15 = v40;
    }
LABEL_49:
    v38 = (ZinANELayer **)__p;
    if ((_QWORD)__p)
      goto LABEL_37;
LABEL_38:
    if ((v39 | 4) != 4)
      goto LABEL_52;
LABEL_39:
    ++a3;
  }
  while (a3 < a4);
  if (v15 == 0.0)
    goto LABEL_52;
  v41 = *v71;
LABEL_53:
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v45);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  return v41;
}

void sub_206EC4290(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a5);
  if (__p)
    operator delete(__p);
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)va);
  v7 = (void *)STACK[0x478];
  if (STACK[0x478])
  {
    STACK[0x480] = (unint64_t)v7;
    operator delete(v7);
  }
  v8 = *(void **)(v5 - 120);
  if (v8)
  {
    *(_QWORD *)(v5 - 112) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void ZinIrParallelExecution::PromoteEngineLayerSchedule(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t *i;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *__p;
  char *v52;
  char *v53;

  __p = 0;
  v52 = 0;
  v53 = 0;
  v7 = (uint64_t *)a3[11];
  v8 = (uint64_t *)a3[12];
  if (v7 == v8)
  {
    v9 = 0;
    v19 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *v7;
      if ((*(_DWORD *)(*(_QWORD *)(*v7 + 64) + 8) - 28) <= 2 && *(_QWORD *)(v10 + 48) > a4)
      {
        if (v9 >= v53)
        {
          v11 = (v9 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v12 = (v53 - (_BYTE *)__p) >> 2;
          if (v12 <= v11 + 1)
            v12 = v11 + 1;
          if ((unint64_t)(v53 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v13);
          else
            v14 = 0;
          v15 = &v14[8 * v11];
          *(_QWORD *)v15 = v10;
          v9 = v15 + 8;
          v17 = (char *)__p;
          v16 = v52;
          if (v52 != __p)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            v16 = (char *)__p;
          }
          __p = v15;
          v52 = v9;
          v53 = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v9 = v10;
          v9 += 8;
        }
        v52 = v9;
      }
      ++v7;
    }
    while (v7 != v8);
    v19 = v53;
    if (v9 < v53)
    {
      *(_QWORD *)v9 = a3;
      v20 = v9 + 8;
      goto LABEL_40;
    }
  }
  v21 = (v9 - (_BYTE *)__p) >> 3;
  if ((unint64_t)(v21 + 1) >> 61)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v22 = v19 - (_BYTE *)__p;
  v23 = v22 >> 2;
  if (v22 >> 2 <= (unint64_t)(v21 + 1))
    v23 = v21 + 1;
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
    v24 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v24 = v23;
  if (v24)
    v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v24);
  else
    v25 = 0;
  v26 = &v25[8 * v21];
  v27 = &v25[8 * v24];
  *(_QWORD *)v26 = a3;
  v20 = v26 + 8;
  v29 = (char *)__p;
  v28 = v52;
  if (v52 != __p)
  {
    do
    {
      v30 = *((_QWORD *)v28 - 1);
      v28 -= 8;
      *((_QWORD *)v26 - 1) = v30;
      v26 -= 8;
    }
    while (v28 != v29);
    v28 = (char *)__p;
  }
  __p = v26;
  v52 = v20;
  v53 = v27;
  if (v28)
    operator delete(v28);
LABEL_40:
  v52 = v20;
  v32 = (uint64_t *)a3[14];
  for (i = (uint64_t *)a3[15]; v32 != i; ++v32)
  {
    v33 = *v32;
    if (*(_DWORD *)(*(_QWORD *)(*v32 + 64) + 8) == 31 && *(_QWORD *)(v33 + 48) > a4)
    {
      if (v20 >= v53)
      {
        v34 = (v20 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v34 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v35 = (v53 - (_BYTE *)__p) >> 2;
        if (v35 <= v34 + 1)
          v35 = v34 + 1;
        if ((unint64_t)(v53 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v36);
        else
          v37 = 0;
        v38 = &v37[8 * v34];
        *(_QWORD *)v38 = v33;
        v20 = v38 + 8;
        v40 = (char *)__p;
        v39 = v52;
        if (v52 != __p)
        {
          do
          {
            v41 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            *((_QWORD *)v38 - 1) = v41;
            v38 -= 8;
          }
          while (v39 != v40);
          v39 = (char *)__p;
        }
        __p = v38;
        v52 = v20;
        v53 = &v37[8 * v36];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_QWORD *)v20 = v33;
        v20 += 8;
      }
      v52 = v20;
    }
  }
  v42 = (char *)__p;
  if (__p == v20)
  {
    v44 = v20;
  }
  else
  {
    v43 = *(_QWORD **)(a2 + 8);
    do
    {
      v50 = *(_QWORD *)v42;
      v43 = std::remove[abi:ne180100]<std::__wrap_iter<ZinIrOpLayer **>,ZinIrOpLayer *>(*(_QWORD **)a2, v43, &v50);
      if (*(_QWORD **)(a2 + 8) != v43)
        *(_QWORD *)(a2 + 8) = v43;
      v42 += 8;
    }
    while (v42 != v20);
    v44 = (char *)__p;
    v20 = v52;
  }
  std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>(a2, *(_QWORD *)a2 + 8 * a4, v44, v20, (v20 - v44) >> 3);
  v45 = *(_QWORD *)a2;
  v46 = *(_QWORD *)(a2 + 8);
  v47 = v46 - *(_QWORD *)a2;
  if (v46 != *(_QWORD *)a2)
  {
    v48 = 0;
    v49 = v47 >> 3;
    if (v49 <= 1)
      v49 = 1;
    do
    {
      *(_QWORD *)(*(_QWORD *)(v45 + 8 * v48) + 48) = v48;
      ++v48;
    }
    while (v49 != v48);
  }
  if (__p)
  {
    v52 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206EC46C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::remove[abi:ne180100]<std::__wrap_iter<ZinIrOpLayer **>,ZinIrOpLayer *>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *i;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i != *a3)
        *result++ = *i;
    }
  }
  return result;
}

void ZinIrParallelExecution::PromoteParallelExecution(uint64_t QualifiedConsecutiveNELayers, const ZinIrOpLayer *a2)
{
  ZinIrHalParameters ***v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t FirstQualifiedPELayer;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint8_t buf[4];
  _QWORD *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (ZinIrHalParameters ***)QualifiedConsecutiveNELayers;
  v4 = 0;
  v16 = *MEMORY[0x24BDAC8D0];
  v5 = MEMORY[0x24BDACB70];
  do
  {
    FirstQualifiedPELayer = ZinIrParallelExecution::FindFirstQualifiedPELayer(QualifiedConsecutiveNELayers, a2, v4);
    if (!FirstQualifiedPELayer)
      break;
    v7 = FirstQualifiedPELayer;
    QualifiedConsecutiveNELayers = ZinIrParallelExecution::FindQualifiedConsecutiveNELayers(v3, a2, v4, *(_QWORD *)(FirstQualifiedPELayer + 48));
    v8 = *(_QWORD *)(v7 + 48);
    if (QualifiedConsecutiveNELayers)
    {
      v9 = QualifiedConsecutiveNELayers;
      ZinIrParallelExecution::PromoteEngineLayerSchedule(QualifiedConsecutiveNELayers, (uint64_t)a2, (_QWORD *)v7, *(_QWORD *)(QualifiedConsecutiveNELayers + 48));
      QualifiedConsecutiveNELayers = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
      if ((_DWORD)QualifiedConsecutiveNELayers)
      {
        v10 = (_QWORD *)(v7 + 24);
        if (*(char *)(v7 + 47) < 0)
          v10 = (_QWORD *)*v10;
        v11 = *(_QWORD *)(v9 + 48);
        *(_DWORD *)buf = 136315394;
        v13 = v10;
        v14 = 2048;
        v15 = v11;
        _os_log_impl(&dword_2069AB000, v5, OS_LOG_TYPE_INFO, "[ZinIrParallelExecution] promote layer %s to schedule %ld", buf, 0x16u);
      }
    }
    v4 = v8 + 1;
  }
  while (v8 + 1 < (unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
}

uint64_t ZinIrOpt::TransposeReshapeCollapser::TransposeReshapeCollapser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *__p[4];
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 32) = 0;
  v7 = a1 + 32;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = a3;
  *(_QWORD *)(a1 + 112) = a4;
  *(_QWORD *)(a1 + 120) = a5;
  *(_QWORD *)(a1 + 128) = a6;
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112), 0, 0);
  DimensionOrderHint::DimensionOrderHint(__p, 2);
  ZinReshapeLayerUtils::GetReshapedDimensions((ZinReshapeLayerUtils *)(v8 + 48), (const ZinTensorDimensions *)(v9 + 48), (const ZinTensorDimensions *)__p, 0, (char **)&v13);
  v10 = *(void **)v7;
  if (*(_QWORD *)v7)
  {
    *(_QWORD *)(a1 + 40) = v10;
    operator delete(v10);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  v14 = 0;
  v13 = 0uLL;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 24) = ZinIrOpt::TransposeReshapeCollapser::QualificationCheck((ZinIrOpt::TransposeReshapeCollapser *)a1);
  return a1;
}

void sub_206EC49A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  if (*(_BYTE *)(v10 + 88))
  {
    v13 = *(void **)(v10 + 56);
    if (v13)
    {
      *(_QWORD *)(v10 + 64) = v13;
      operator delete(v13);
    }
  }
  v14 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinIrOpt::TransposeReshapeCollapser::QualificationCheck(ZinIrOpt::TransposeReshapeCollapser *this)
{
  ZinIrOpLayer **v1;
  ZinIrTensor *v3;
  ZinIrTensor *v4;
  _BYTE *v5;
  void (**v6)(ZinIrReshapeUnitInfo *__hidden);
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  _BOOL8 IsTensorFamilyCompatibleWithDimensionOrder;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ZinReshapeLayer **InputTensor;
  void *v21;
  void *v22;
  char v23;
  void *__p;
  _BYTE *v25;
  uint64_t v26;
  void (**v27)(ZinIrReshapeUnitInfo *__hidden);
  void (**v28)(ZinIrReshapeUnitInfo *__hidden);
  void *v29;
  void *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  int64x2_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;

  v1 = *(ZinIrOpLayer ***)(*((_QWORD *)this + 12) + 88);
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 96) - (_QWORD)v1 > 8uLL
    || *(_QWORD *)(*((_QWORD *)this + 13) + 120) - *(_QWORD *)(*((_QWORD *)this + 13) + 112) > 8uLL
    || !ZinIrOpLayer::IsIntermediate(*v1)
    || !ZinIrOpLayer::IsIntermediate(**(ZinIrOpLayer ***)(*((_QWORD *)this + 13) + 112)))
  {
    return 0;
  }
  v3 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 14) + 32))(*((_QWORD *)this + 14), 0, 0);
  if (ZinIrTensor::HasFlexDimensionOrderHint(v3))
    goto LABEL_24;
  v4 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 14) + 32))(*((_QWORD *)this + 14), 0, 0);
  ZinIrTensor::GetDimensionOrderHint(v4, (uint64_t)&__p);
  DimensionOrderHint::DimensionOrderHint(&v27, 2);
  v5 = __p;
  if ((char *)v28 - (char *)v27 == v25 - (_BYTE *)__p)
  {
    if (v27 == v28)
    {
      v10 = 0;
    }
    else
    {
      v6 = (void (**)(ZinIrReshapeUnitInfo *__hidden))((char *)v27 + 4);
      v7 = (int *)__p;
      do
      {
        v8 = *v7++;
        v9 = *((_DWORD *)v6 - 1);
        v10 = v9 != v8;
        v11 = v9 != v8 || v6 == v28;
        v6 = (void (**)(ZinIrReshapeUnitInfo *__hidden))((char *)v6 + 4);
      }
      while (!v11);
    }
  }
  else
  {
    v10 = 1;
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
    v5 = __p;
  }
  if (v5)
  {
    v25 = v5;
    operator delete(v5);
  }
  if (v10)
    return 0;
LABEL_24:
  v14 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12), 0, 0)+ 88);
  ZinIrOpLayer::GetInputTensorDimensions(*((ZinIrOpLayer **)this + 12), &__p);
  v31 = v14;
  v15 = *(_OWORD *)__p;
  v16 = *((_OWORD *)__p + 1);
  v34 = *((_QWORD *)__p + 4);
  v33 = v16;
  v32 = v15;
  v35 = 0;
  v36 = vdupq_n_s64(1uLL);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v25 = __p;
  operator delete(__p);
  v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), 0, 0);
  ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v27, v17 + 48);
  ZinReshapeValidator<ZinIrReshapeUnitInfo,ZinIrTensorInfo>::ZinReshapeValidator((uint64_t)&__p, *((_QWORD *)this + 15), (uint64_t)&v27, (__int128 *)&v31);
  ZinReshapeValidator<ZinIrReshapeUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&__p);
  if (v26)
    goto LABEL_36;
  ZinIrOpLayer::GetInputTensorDimensions(*((ZinIrOpLayer **)this + 12), &v21);
  v18 = *((_QWORD *)v21 + 3);
  v19 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), 0, 0)+ 72);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v18 != v19)
    goto LABEL_36;
  LODWORD(v21) = 4;
  if (!ZinIrOpt::TransposeReshapeCollapser::BuildDimensionMapping((uint64_t)this, (unsigned int *)&v21)
    || *((_DWORD *)this + 5) != 4)
  {
    goto LABEL_36;
  }
  ZinIrOpt::TransposeReshapeCollapser::InferDimensionOrderHintForNewReshape((ZinReshapeLayer **)this, (uint64_t)&v21);
  std::__optional_storage_base<DimensionOrderHint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DimensionOrderHint,false>>((uint64_t)this + 56, (uint64_t)&v21);
  if (v23 && v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (*((_BYTE *)this + 88)
    && DimensionOrderHint::IsSupported((ZinIrOpt::TransposeReshapeCollapser *)((char *)this + 56)))
  {
    InputTensor = (ZinReshapeLayer **)ZinIrOpLayer::GetInputTensor(*((ZinIrOpLayer **)this + 12), 0);
    IsTensorFamilyCompatibleWithDimensionOrder = ZinIrTensor::IsTensorFamilyCompatibleWithDimensionOrder(InputTensor, (ZinIrOpt::TransposeReshapeCollapser *)((char *)this + 56));
  }
  else
  {
LABEL_36:
    IsTensorFamilyCompatibleWithDimensionOrder = 0;
  }
  ZinReshapeValidator<ZinIrReshapeUnitInfo,ZinIrTensorInfo>::~ZinReshapeValidator((uint64_t)&__p);
  v27 = off_24C01FAB8;
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v27);
  return IsTensorFamilyCompatibleWithDimensionOrder;
}

void sub_206EC4CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  ZinReshapeValidator<ZinIrReshapeUnitInfo,ZinIrTensorInfo>::~ZinReshapeValidator((uint64_t)&a14);
  ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&a54);
  _Unwind_Resume(a1);
}

BOOL ZinIrOpt::TransposeReshapeCollapser::BuildDimensionMapping(uint64_t a1, unsigned int *a2)
{
  int v4;
  uint64_t ReshapeInfo;
  int DstDimension;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = *a2;
  ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*(ZinReshapeLayer **)(a1 + 96));
  DstDimension = ZinIrTransposeInfo::GetDstDimension(ReshapeInfo, *a2);
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = DstDimension;
  v7 = ZinIrOpt::TransposeReshapeCollapser::ComputeDimensionMappingDuringReshape(a1, (int *)(a1 + 4));
  v8 = v7 & 0xFF00000000;
  if ((v7 & 0xFF00000000) != 0)
  {
    v9 = v7;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 12) = v7;
    v10 = ZinReshapeLayer::GetReshapeInfo(*(ZinReshapeLayer **)(a1 + 104));
    v11 = ZinIrTransposeInfo::GetDstDimension(v10, v9);
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 20) = v11;
  }
  return v8 != 0;
}

uint64_t ZinIrOpt::TransposeReshapeCollapser::InferDimensionOrderHintForNewReshape@<X0>(ZinReshapeLayer **this@<X0>, uint64_t a2@<X8>)
{
  ZinIrTransposeInfo *ReshapeInfo;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  ZinReshapeLayer *v12;
  unint64_t v13;
  int v14;
  uint64_t ValueAt;
  uint64_t v16;
  __int128 v17;
  char *v18;
  int64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  std::vector<int>::pointer begin;
  char *v25;
  int v26;
  std::vector<int> v28;
  void *v29;
  char *v30;
  void *v31;
  _DWORD *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  __int128 __p;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  int v45;
  _QWORD v46[4];
  int v47;

  memset(v46, 0, sizeof(v46));
  v47 = 1065353216;
  ReshapeInfo = (ZinIrTransposeInfo *)ZinReshapeLayer::GetReshapeInfo(this[12]);
  ZinIrTransposeInfo::GetInverseMappings(ReshapeInfo, (char **)v41);
  v6 = (_QWORD *)*((_QWORD *)&v41[0] + 1);
  v5 = *(_QWORD **)&v41[0];
  if (*(_QWORD *)&v41[0] != *((_QWORD *)&v41[0] + 1))
  {
    do
    {
      *(_QWORD *)&v33 = *v5;
      v7 = DWORD1(v33);
      *(_QWORD *)&__p = &v33;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDimension>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDimension>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDimension>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDimension>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v46, (int *)&v33, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v7;
      ++v5;
    }
    while (v5 != v6);
    v5 = *(_QWORD **)&v41[0];
  }
  if (v5)
  {
    *((_QWORD *)&v41[0] + 1) = v5;
    operator delete(v5);
  }
  ZinIrOpt::TransposeReshapeCollapser::FindNewDimensionOrderCandidate((uint64_t)this, v46, (uint64_t)&v43);
  ZinIrOpLayer::GetInputTensorDimensions(this[12], (void **)&__p);
  v9 = *(_OWORD *)__p;
  v8 = *(_OWORD *)(__p + 16);
  v42 = *(_QWORD *)(__p + 32);
  v41[0] = v9;
  v41[1] = v8;
  *((_QWORD *)&__p + 1) = __p;
  operator delete((void *)__p);
  v10 = (*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)this[14] + 32))(this[14], 0, 0);
  v11 = *(_OWORD *)(v10 + 64);
  __p = *(_OWORD *)(v10 + 48);
  v39 = v11;
  v40 = *(_QWORD *)(v10 + 80);
  ZinIrOpt::TransposeReshapeCollapser::GetPreTransposeAxesToBeReshaped((uint64_t)this, v46, (int **)&v36);
  v12 = this[4];
  if (this[5] != v12)
  {
    v13 = 0;
    do
    {
      if (v13 >= (v37 - (_BYTE *)v36) >> 2)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v14 = *((_DWORD *)v36 + v13);
      ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&__p, *((_DWORD *)v12 + v13));
      if (SetValueAtDimension<ZinTensorDimensions>(v41, v14, ValueAt))
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 32) = 0;
        goto LABEL_42;
      }
      ++v13;
      v12 = this[4];
    }
    while (v13 < (this[5] - v12) >> 2);
  }
  v16 = (*(uint64_t (**)(ZinReshapeLayer *, _QWORD, _QWORD))(*(_QWORD *)this[13] + 32))(this[13], 0, 0);
  v17 = *(_OWORD *)(v16 + 64);
  v33 = *(_OWORD *)(v16 + 48);
  v34 = v17;
  v35 = *(_QWORD *)(v16 + 80);
  ZinReshapeLayerUtils::GetReshapedDimensions((ZinReshapeLayerUtils *)v41, (const ZinTensorDimensions *)&v33, (const ZinTensorDimensions *)&v43, 0, (char **)&v31);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)&v43, &v29);
  v18 = (char *)v29 + 16;
  v19 = v30 - ((_BYTE *)v29 + 20);
  if (v30 != (char *)v29 + 20)
    memmove((char *)v29 + 16, (char *)v29 + 20, v30 - ((_BYTE *)v29 + 20));
  v30 = &v18[v19];
  v20 = v32;
  while (v20 != v31)
  {
    v21 = *--v20;
    v22 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v41, v21);
    if (v22 != 1 && v22 != *((_QWORD *)&v34 + 1))
    {
      FindDimension((const ZinTensorDimensions *)&v33, v22, &v28);
      begin = v28.__begin_;
      if (v28.__begin_ == v28.__end_)
      {
        v26 = 1;
        if (!v28.__begin_)
          goto LABEL_34;
      }
      else
      {
        while (1)
        {
          if (*v20 != *begin)
          {
            v25 = (char *)v29;
            if (v29 != v30)
            {
              while (*(_DWORD *)v25 != *begin)
              {
                v25 += 4;
                if (v25 == v30)
                {
                  v25 = v30;
                  break;
                }
              }
            }
            if (v25 == v30)
              break;
            v30 = v25;
            if (v29 == v25)
              break;
          }
          if (++begin == v28.__end_)
          {
            v26 = 1;
            goto LABEL_32;
          }
        }
        v26 = 0;
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 32) = 0;
LABEL_32:
        begin = v28.__begin_;
        if (!v28.__begin_)
          goto LABEL_34;
      }
      v28.__end_ = begin;
      operator delete(begin);
LABEL_34:
      if (!v26)
        goto LABEL_37;
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)a2, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 2);
  *(_DWORD *)(a2 + 24) = v45;
  *(_BYTE *)(a2 + 32) = 1;
LABEL_37:
  if (v29)
  {
    v30 = (char *)v29;
    operator delete(v29);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
LABEL_42:
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v46);
}

void sub_206EC516C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  void *v36;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a24)
    operator delete(a24);
  v36 = *(void **)(v34 - 160);
  if (v36)
  {
    *(_QWORD *)(v34 - 152) = v36;
    operator delete(v36);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v34 - 128);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::TransposeReshapeCollapser::ComputeDimensionMappingDuringReshape(uint64_t a1, int *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t ValueAt;
  int *i;
  uint64_t v11;
  uint64_t v12;
  void *__p[3];

  v2 = *(_DWORD **)(a1 + 32);
  v3 = *(_DWORD **)(a1 + 40);
  v4 = *a2;
  if (v2 == v3)
  {
LABEL_4:
    v7 = v4 & 0xFFFFFF00;
    v8 = 0x100000000;
  }
  else
  {
    while (v4 != *v2)
    {
      if (++v2 == v3)
        goto LABEL_4;
    }
    ZinIrOpLayer::GetInputTensorDimensions(*(ZinIrOpLayer **)(a1 + 112), __p);
    ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)__p[0], *a2);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    for (i = *(int **)(a1 + 32); i != *(int **)(a1 + 40); ++i)
    {
      v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112), 0, 0);
      v12 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v11 + 48), *i);
      if (v12 != 1)
      {
        if (v12 == ValueAt)
        {
          v4 = *i;
          goto LABEL_4;
        }
        break;
      }
    }
    v8 = 0;
    LOBYTE(v4) = 0;
    v7 = 0;
  }
  return v8 | v7 | v4;
}

void sub_206EC5310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrOpt::TransposeReshapeCollapser::GetPreTransposeAxesToBeReshaped(uint64_t a1@<X0>, _QWORD *a2@<X1>, int **a3@<X8>)
{
  int *v3;
  int *v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  int *v11;
  int v12;
  unint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  int v27;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(int **)(a1 + 32);
  v4 = *(int **)(a1 + 40);
  if (v3 != v4)
  {
    v7 = (uint64_t)(a3 + 2);
    do
    {
      v27 = *v3;
      v8 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v27);
      v9 = v8;
      if (v8)
      {
        v11 = a3[1];
        v10 = (unint64_t)a3[2];
        if ((unint64_t)v11 >= v10)
        {
          v15 = *a3;
          v16 = v11 - *a3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            goto LABEL_37;
          v18 = v10 - (_QWORD)v15;
          if (v18 >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(v7, v19);
            v15 = *a3;
            v11 = a3[1];
          }
          else
          {
            v20 = 0;
          }
          v24 = &v20[4 * v16];
          *(_DWORD *)v24 = *((_DWORD *)v9 + 5);
          v14 = (int *)(v24 + 4);
          while (v11 != v15)
          {
            v25 = *--v11;
            *((_DWORD *)v24 - 1) = v25;
            v24 -= 4;
          }
LABEL_33:
          *a3 = (int *)v24;
          a3[1] = v14;
          a3[2] = (int *)&v20[4 * v19];
          if (v15)
            operator delete(v15);
          goto LABEL_35;
        }
        v12 = *((_DWORD *)v8 + 5);
      }
      else
      {
        v11 = a3[1];
        v13 = (unint64_t)a3[2];
        if ((unint64_t)v11 >= v13)
        {
          v15 = *a3;
          v21 = v11 - *a3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
LABEL_37:
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v23 = v13 - (_QWORD)v15;
          if (v23 >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v22;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(v7, v19);
            v15 = *a3;
            v11 = a3[1];
          }
          else
          {
            v20 = 0;
          }
          v24 = &v20[4 * v21];
          *(_DWORD *)v24 = v27;
          v14 = (int *)(v24 + 4);
          while (v11 != v15)
          {
            v26 = *--v11;
            *((_DWORD *)v24 - 1) = v26;
            v24 -= 4;
          }
          goto LABEL_33;
        }
        v12 = v27;
      }
      *v11 = v12;
      v14 = v11 + 1;
LABEL_35:
      a3[1] = v14;
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_206EC54F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrOpt::TransposeReshapeCollapser::FindNewDimensionOrderCandidate(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t i;
  int v7;
  std::vector<int>::pointer end;
  int *v9;
  std::vector<int>::pointer begin;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  char *v15;
  int *v16;
  int v17;
  std::vector<int>::pointer v18;
  std::vector<int>::pointer v19;
  uint64_t *v20;
  uint64_t *v21;
  std::vector<int>::pointer v22;
  int v23;
  int *v24;
  std::vector<int>::pointer v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  int *v34;
  int v35;
  int v36;
  int *v37;
  std::vector<int>::pointer v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  int *v44;
  int *v45;
  int v46;
  int v47;
  std::vector<int> v48;
  std::vector<int> v49;

  memset(&v49, 0, sizeof(v49));
  std::vector<unsigned int>::reserve(&v49, 5uLL);
  for (i = 0; i != 5; ++i)
  {
    v7 = dword_207AA854C[i];
    if (v7 != *(_DWORD *)(a1 + 8))
    {
      end = v49.__end_;
      if (v49.__end_ >= v49.__end_cap_.__value_)
      {
        begin = v49.__begin_;
        v11 = v49.__end_ - v49.__begin_;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v13 = (char *)v49.__end_cap_.__value_ - (char *)v49.__begin_;
        if (((char *)v49.__end_cap_.__value_ - (char *)v49.__begin_) >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v49.__end_cap_, v14);
          begin = v49.__begin_;
          end = v49.__end_;
        }
        else
        {
          v15 = 0;
        }
        v16 = (int *)&v15[4 * v11];
        *v16 = v7;
        v9 = v16 + 1;
        while (end != begin)
        {
          v17 = *--end;
          *--v16 = v17;
        }
        v49.__begin_ = v16;
        v49.__end_ = v9;
        v49.__end_cap_.__value_ = (int *)&v15[4 * v14];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *v49.__end_ = v7;
        v9 = end + 1;
      }
      v49.__end_ = v9;
    }
  }
  memset(&v48, 0, sizeof(v48));
  std::vector<unsigned int>::reserve(&v48, 5uLL);
  v18 = v49.__begin_;
  v19 = v49.__end_;
  if (v49.__begin_ != v49.__end_)
  {
    while (1)
    {
      v47 = 0;
      v47 = *v18;
      v20 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v47);
      v21 = v20;
      if (v20)
      {
        v22 = v48.__end_;
        if (v48.__end_ >= v48.__end_cap_.__value_)
        {
          v25 = v48.__begin_;
          v26 = v48.__end_ - v48.__begin_;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            goto LABEL_78;
          v28 = (char *)v48.__end_cap_.__value_ - (char *)v48.__begin_;
          if (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v48.__end_cap_, v29);
            v25 = v48.__begin_;
            v22 = v48.__end_;
          }
          else
          {
            v30 = 0;
          }
          v34 = (int *)&v30[4 * v26];
          *v34 = *((_DWORD *)v21 + 5);
          v24 = v34 + 1;
          while (v22 != v25)
          {
            v35 = *--v22;
            *--v34 = v35;
          }
LABEL_52:
          v48.__begin_ = v34;
          v48.__end_ = v24;
          v48.__end_cap_.__value_ = (int *)&v30[4 * v29];
          if (v25)
            operator delete(v25);
          goto LABEL_54;
        }
        v23 = *((_DWORD *)v20 + 5);
      }
      else
      {
        v22 = v48.__end_;
        if (v48.__end_ >= v48.__end_cap_.__value_)
        {
          v25 = v48.__begin_;
          v31 = v48.__end_ - v48.__begin_;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62)
LABEL_78:
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v33 = (char *)v48.__end_cap_.__value_ - (char *)v48.__begin_;
          if (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 1 > v32)
            v32 = v33 >> 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v32;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v48.__end_cap_, v29);
            v25 = v48.__begin_;
            v22 = v48.__end_;
          }
          else
          {
            v30 = 0;
          }
          v34 = (int *)&v30[4 * v31];
          *v34 = v47;
          v24 = v34 + 1;
          while (v22 != v25)
          {
            v36 = *--v22;
            *--v34 = v36;
          }
          goto LABEL_52;
        }
        v23 = v47;
      }
      *v22 = v23;
      v24 = v22 + 1;
LABEL_54:
      v48.__end_ = v24;
      if (++v18 == v19)
        goto LABEL_57;
    }
  }
  v24 = v48.__end_;
LABEL_57:
  if (v24 >= v48.__end_cap_.__value_)
  {
    v38 = v48.__begin_;
    v39 = v24 - v48.__begin_;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v41 = (char *)v48.__end_cap_.__value_ - (char *)v48.__begin_;
    if (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 1 > v40)
      v40 = v41 >> 1;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
      v42 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    if (v42)
    {
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v48.__end_cap_, v42);
      v38 = v48.__begin_;
      v24 = v48.__end_;
    }
    else
    {
      v43 = 0;
    }
    v44 = (int *)&v43[4 * v39];
    v45 = (int *)&v43[4 * v42];
    *v44 = 4;
    v37 = v44 + 1;
    while (v24 != v38)
    {
      v46 = *--v24;
      *--v44 = v46;
    }
    v48.__begin_ = v44;
    v48.__end_ = v37;
    v48.__end_cap_.__value_ = v45;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *v24 = 4;
    v37 = v24 + 1;
  }
  v48.__end_ = v37;
  DimensionOrderHint::DimensionOrderHint(a3, &v48);
  if (v48.__begin_)
  {
    v48.__end_ = v48.__begin_;
    operator delete(v48.__begin_);
  }
  if (v49.__begin_)
  {
    v49.__end_ = v49.__begin_;
    operator delete(v49.__begin_);
  }
}

void sub_206EC58D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpt::TransposeReshapeCollapser::ExecuteTransform(ZinIrOpt::TransposeReshapeCollapser *this)
{
  uint64_t v2;
  size_t v3;
  void **v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  ZinIrOpLayer *Reshape;
  uint64_t v14;
  char *v15;
  uint64_t **v16;
  _BOOL4 v17;
  int v18;
  ZinIrOpLayerGraph *v19;
  uint64_t **v20;
  int v21;
  _BOOL4 v22;
  _BOOL4 v23;
  ZinIrTensor *v24;
  uint64_t v25;
  int8x16_t v27;
  _OWORD v28[2];
  int v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  char *v35;
  void *__p[2];
  char v37;
  char v38;
  _QWORD v39[3];
  char v40;

  v2 = *((_QWORD *)this + 14);
  if (*(char *)(v2 + 47) >= 0)
    v3 = *(unsigned __int8 *)(v2 + 47);
  else
    v3 = *(_QWORD *)(v2 + 32);
  v4 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v3 + 27);
  if (v37 < 0)
    v4 = (void **)__p[0];
  if (v3)
  {
    v7 = *(char **)(v2 + 24);
    v6 = (char *)(v2 + 24);
    v5 = v7;
    if (v6[23] >= 0)
      v8 = v6;
    else
      v8 = v5;
    memmove(v4, v8, v3);
  }
  strcpy((char *)v4 + v3, "transpose-reshape-collapser");
  ZinObjectNameFactory::ZinObjectNameFactory(v39, __p);
  if (v37 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(*((_QWORD *)this + 14) + 16);
  std::__optional_copy_base<DimensionOrderHint,false>::__optional_copy_base[abi:ne180100]((uint64_t)__p, (uint64_t)this + 56);
  ZinIrOpLayer::GetInputTensorDimensions(*((ZinIrOpLayer **)this + 12), &v30);
  v10 = v30;
  v11 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 14) + 32))(*((_QWORD *)this + 14), 0, 0)+ 88);
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), 0, 0);
  Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v9, (uint64_t)v39, (uint64_t)v10, v11, (__int128 *)(v12 + 48), (const DimensionOrderHint *)__p);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  v14 = *((_QWORD *)this + 12);
  v27 = *(int8x16_t *)((char *)this + 104);
  v15 = (char *)operator new(0x18uLL);
  v34 = v15 + 24;
  v35 = v15 + 24;
  *(_QWORD *)v15 = v14;
  *(int8x16_t *)(v15 + 8) = vextq_s8(v27, v27, 8uLL);
  v33 = v15;
  v16 = (uint64_t **)*((_QWORD *)this + 16);
  Layer2TDMapper::SourceLayer::SourceLayer<std::vector<ZinIrOpLayer *>>(&v30, (uint64_t **)&v33);
  v17 = ZinIrOpLayerGraph::AddNode(v16, Reshape, (ZinIrOpLayer ***)&v30);
  v30 = &unk_24C02BB18;
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  v18 = ZinIrOpLayerGraph::MoveIncomingEdges(*((ZinIrOpLayerGraph **)this + 16), *((ZinIrOpLayer **)this + 12), Reshape);
  v19 = (ZinIrOpLayerGraph *)*((_QWORD *)this + 16);
  v20 = (uint64_t **)*((_QWORD *)this + 13);
  memset(v28, 0, sizeof(v28));
  v29 = 1065353216;
  v21 = ZinIrOpLayerGraph::MoveOutgoingEdges(v19, v20, Reshape, v28);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v28);
  v22 = ZinIrOpLayerGraph::RemoveNode(*((ZinIrOpLayerGraph **)this + 16), *((ZinIrOpLayer **)this + 12), 0);
  v23 = ZinIrOpLayerGraph::RemoveNode(*((ZinIrOpLayerGraph **)this + 16), *((ZinIrOpLayer **)this + 13), 0);
  if ((v17 & v18 & v21 & v22 & v23 & ZinIrOpLayerGraph::RemoveNode(*((ZinIrOpLayerGraph **)this + 16), *((ZinIrOpLayer **)this + 14), 0) & 1) != 0)
  {
    v24 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Reshape + 32))(Reshape, 0, 0);
    if (ZinMirTensorTransform::FixDimensionOrder(v24, *((uint64_t ***)this + 16), (DimensionOrderHint *)__p, 1))v25 = 3;
    else
      v25 = 0;
  }
  else
  {
    v25 = 3;
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v38 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v39[0] = off_24C01FBB0;
  if (v40 < 0)
    operator delete((void *)v39[1]);
  return v25;
}

void sub_206EC5C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a30 && a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  *(_QWORD *)(v30 - 104) = off_24C01FBB0;
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::CollapseTransposeReshape(_QWORD *a1, uint64_t a2)
{
  void ***v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  void ***v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char **v24;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD *v27;
  void **v28;
  char v29;
  void ***v30;
  __int128 v31;
  _QWORD v32[4];
  uint64_t v33;
  _QWORD v34[3];
  _QWORD v35[4];
  uint64_t v36;
  _QWORD v37[3];
  _QWORD v38[4];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[23];
  _QWORD v42[4];

  v42[3] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v31, "pre_transpose");
  v32[0] = &unk_24C0537D8;
  v32[1] = ZinIrOpt::IsTranspose;
  v32[3] = v32;
  v20 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v33, &v20, 1);
  std::string::basic_string[abi:ne180100]<0>(v34, "reshape");
  v35[0] = &unk_24C0537D8;
  v35[1] = ZinIrOpt::IsReshape;
  v35[3] = v35;
  v19 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v36, &v19, 1);
  std::string::basic_string[abi:ne180100]<0>(v37, "post_transpose");
  v38[0] = &unk_24C0537D8;
  v38[1] = ZinIrOpt::IsTranspose;
  v38[3] = v38;
  v18 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v39, &v18, 1);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v28 = (void **)&v21;
  v29 = 0;
  v21 = (char *)operator new(0x120uLL);
  v22 = (uint64_t)v21;
  v23 = v21 + 288;
  v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v23, (uint64_t)&v31, (uint64_t)&v40, (uint64_t)v21);
  v30 = 0;
  ZinLinearPattern::ZinLinearPattern(v41, &v21, a2, 0, &v28, 0);
  v4 = v30;
  if (v30 == &v28)
  {
    v5 = 4;
    v4 = &v28;
    goto LABEL_5;
  }
  if (v30)
  {
    v5 = 5;
LABEL_5:
    ((void (*)(void))(*v4)[v5])();
  }
  v24 = &v21;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v6 = 36;
  do
  {
    v7 = &v32[v6 - 1];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&(&v27)[v6]);
    v8 = *(void ****)((char *)&v26 + v6 * 8);
    if (&v25[v6 - 1] == v8)
    {
      v8 = (void ***)(v7 - 9);
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_12;
      v9 = 5;
    }
    ((void (*)(void))(*v8)[v9])();
LABEL_12:
    if (*((char *)&v23 + v6 * 8 + 7) < 0)
      operator delete((void *)*(v7 - 12));
    v6 -= 12;
  }
  while (v6 * 8);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern&,void>(v41, &v31);
  v17 = v31;
  v41[0] = (uint64_t)&off_24C01BCC8;
  *(_QWORD *)&v31 = v42;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  ZinPattern::~ZinPattern((ZinPattern *)v41);
  v25[0] = &off_24C004098;
  v25[1] = &v17;
  v26 = a2;
  v27 = v25;
  v10 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v25, 1);
  v11 = v27;
  if (v27 == v25)
  {
    v12 = 4;
    v11 = v25;
LABEL_19:
    (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
  }
  else if (v27)
  {
    v12 = 5;
    goto LABEL_19;
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v10;
}

void sub_206EC5FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<DimensionOrderHint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DimensionOrderHint,false>>(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      if (a1 != a2)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = 1;
  }
}

uint64_t std::__optional_copy_base<DimensionOrderHint,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  std::__optional_storage_base<DimensionOrderHint,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<DimensionOrderHint,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_206EC61D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32))
    ZinIrVersion::ZinIrVersion(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<DimensionOrderHint,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<DimensionOrderHint,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;

  if (*(_BYTE *)(a2 + 32))
  {
    v3 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(result, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    *((_DWORD *)v3 + 6) = *(_DWORD *)(a2 + 24);
    *((_BYTE *)v3 + 32) = 1;
  }
  return result;
}

void std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C004098;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C004098;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t SingleMatch;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;

  v4 = *a2;
  if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(***(_QWORD ***)(a1 + 8) + 8))(**(_QWORD **)(a1 + 8), *a2, *a3))return 0;
  v5 = **(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "pre_transpose");
  if (ZinPattern::HasMatched(v5, (unsigned __int8 *)__p))
  {
    v6 = **(_QWORD **)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v22, "reshape");
    if (ZinPattern::HasMatched(v6, (unsigned __int8 *)v22))
    {
      v7 = **(_QWORD **)(a1 + 8);
      std::string::basic_string[abi:ne180100]<0>(v20, "post_transpose");
      v8 = ZinPattern::HasMatched(v7, (unsigned __int8 *)v20);
      if (v21 < 0)
        operator delete(v20[0]);
    }
    else
    {
      v8 = 0;
    }
    if (v23 < 0)
      operator delete(v22[0]);
  }
  else
  {
    v8 = 0;
  }
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if ((v8 & 1) != 0)
      goto LABEL_12;
    return 0;
  }
  if ((v8 & 1) == 0)
    return 0;
LABEL_12:
  v9 = **(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "pre_transpose");
  SingleMatch = ZinPattern::GetSingleMatch(v9, (unsigned __int8 *)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  v11 = **(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  v12 = ZinPattern::GetSingleMatch(v11, (unsigned __int8 *)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  v13 = **(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "post_transpose");
  v14 = ZinPattern::GetSingleMatch(v13, (unsigned __int8 *)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  ZinIrOpt::TransposeReshapeCollapser::TransposeReshapeCollapser((uint64_t)__p, SingleMatch, v14, v12, *(_QWORD *)(a1 + 16), v4);
  if (v19)
    v15 = ZinIrOpt::TransposeReshapeCollapser::ExecuteTransform((ZinIrOpt::TransposeReshapeCollapser *)__p);
  else
    v15 = 0;
  ZinIrOpt::TransposeReshapeCollapser::~TransposeReshapeCollapser((ZinIrOpt::TransposeReshapeCollapser *)__p);
  return v15;
}

void sub_206EC64FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 - 73) < 0)
    operator delete(*(void **)(v15 - 96));
  if (*(char *)(v15 - 49) < 0)
    operator delete(*(void **)(v15 - 72));
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t ZinMirDartThrashingOptimizer::IsQualifiedForPaddingForDartThrashingOpt(ZinIrTensor *this, uint64_t a2, uint64_t a3, uint64_t a4, ZinTensorFamilyUtil *a5)
{
  uint64_t v5;
  const void **TensorFamily;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t Interleave;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  ZinIrTensor *v26;
  uint64_t v27;
  char v28;
  char v29;
  ZinMirDartThrashingOptimizer *v30;
  unint64_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  ZinIrOpLayer *v35;
  unint64_t v36;
  ZinIrTensor *InputTensor;
  _QWORD *v38;
  ZinMirDartThrashingOptimizer *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  char v43;
  uint64_t v44;
  unint64_t *v45;
  _OWORD v47[2];
  uint64_t v48;
  _OWORD v49[5];
  _BYTE v50[48];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56[8];
  _QWORD *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t *v65;
  uint64_t v66;

  if (*(_BYTE *)(a4 + 529))
    return 0;
  if (*((_BYTE *)a5 + 104))
  {
    TensorFamily = (const void **)ZinTensorFamilyUtil::GetTensorFamily(a5, this);
    v65 = 0;
    v66 = 0;
    v64 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v64, *TensorFamily, (uint64_t)TensorFamily[1], ((_BYTE *)TensorFamily[1] - (_BYTE *)*TensorFamily) >> 3);
  }
  else
  {
    ZinIrTensor::GetTensorFamily(this, (uint64_t)&v64);
  }
  if ((ZinMirDartThrashingOptimizer::IsFunctionallyValidForDartThrashingPadding((ZinOpLayerUtils **)this, (uint64_t *)&v64) & 1) == 0)
  {
    v5 = 0;
    goto LABEL_44;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  ZinIrRegAllocUtil::FindSortedConsumersAndProducers(this, (uint64_t *)&v61, (uint64_t *)&v58, a5);
  std::set<ZinIrTensor *>::set[abi:ne180100]<std::__wrap_iter<ZinIrTensor * const*>>((uint64_t)v56, v64, v65);
  ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)this, (_QWORD *)a2);
  v12 = v11;
  v13 = *(_OWORD *)(a2 + 176);
  v53 = *(_OWORD *)(a2 + 160);
  v54 = v13;
  v55 = *(_OWORD *)(a2 + 192);
  v14 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v50[16] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v50[32] = v14;
  v15 = *(_OWORD *)(a2 + 144);
  v51 = *(_OWORD *)(a2 + 128);
  v52 = v15;
  v16 = *(_OWORD *)(a2 + 48);
  v49[2] = *(_OWORD *)(a2 + 32);
  v49[3] = v16;
  v17 = *(_OWORD *)(a2 + 80);
  v49[4] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v50 = v17;
  v18 = *(_OWORD *)(a2 + 16);
  v49[0] = *(_OWORD *)a2;
  v49[1] = v18;
  Interleave = ZinIrTensor::GetInterleave(this);
  if (v20)
    v21 = Interleave;
  else
    v21 = 1;
  ZinMirDartThrashingOptimizer::ComputeOptimizedStridesForDartThrashingOpt(this, (const ZinIrTensor *)v21, a3, (uint64_t)v47);
  *(_OWORD *)&v50[8] = v47[0];
  *(_OWORD *)&v50[24] = v47[1];
  *(_QWORD *)&v50[40] = v48;
  ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)this, v49);
  if ((float)((float)v12 * 1.5) < (float)v22)
  {
LABEL_11:
    v5 = 0;
    goto LABEL_40;
  }
  v23 = v61;
  v24 = v62;
  while (1)
  {
    if (v23 == v24)
    {
      v33 = v58;
      v34 = v59;
      while (1)
      {
        if (v33 == v34)
          goto LABEL_11;
        v35 = *(ZinIrOpLayer **)v33;
        if (*(_QWORD *)(*(_QWORD *)v33 + 96) == *(_QWORD *)(*(_QWORD *)v33 + 88))
          goto LABEL_38;
        v36 = 0;
        do
        {
          InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v35, v36);
          v38 = v57;
          if (!v57)
            goto LABEL_37;
          v39 = InputTensor;
          while (1)
          {
            v40 = v38[4];
            if ((unint64_t)InputTensor >= v40)
              break;
LABEL_29:
            v38 = (_QWORD *)*v38;
            if (!v38)
              goto LABEL_37;
          }
          if (v40 < (unint64_t)InputTensor)
          {
            ++v38;
            goto LABEL_29;
          }
          v41 = ZinIrTensor::GetInterleave(InputTensor);
          if (v43)
            v44 = v41;
          else
            v44 = 1;
          v45 = (unint64_t *)(a3 + 1400);
          if (v36)
            v45 = (unint64_t *)(a3 + 1408);
          if (ZinMirDartThrashingOptimizer::IsTensorQualifiedForDartThrashingOptUtil(v39, v44, *v45, *(_QWORD *)(a3 + 1440), *(_QWORD *)(a3 + 1392), *(_BYTE *)(a3 + 1448), (unint64_t *)v47, v42))
          {
            goto LABEL_39;
          }
LABEL_37:
          ++v36;
        }
        while (v36 < (uint64_t)(*((_QWORD *)v35 + 12) - *((_QWORD *)v35 + 11)) >> 3);
LABEL_38:
        v33 += 8;
      }
    }
    v25 = *v23;
    v26 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v23 + 32))(*v23, 0, 0);
    v27 = ZinIrTensor::GetInterleave(v26);
    v29 = v28;
    v30 = (ZinMirDartThrashingOptimizer *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0, 0);
    v32 = v29 ? v27 : 1;
    if (ZinMirDartThrashingOptimizer::IsTensorQualifiedForDartThrashingOptUtil(v30, v32, *(_QWORD *)(a3 + 1416), *(_QWORD *)(a3 + 1440), *(_QWORD *)(a3 + 1392), *(_BYTE *)(a3 + 1448), (unint64_t *)v47, v31))
    {
      break;
    }
    ++v23;
  }
LABEL_39:
  v5 = 1;
LABEL_40:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v56, v57);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
LABEL_44:
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  return v5;
}

void sub_206EC68BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 160, *(_QWORD **)(v1 - 152));
  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(_QWORD *)(v1 - 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 88);
  if (v5)
  {
    *(_QWORD *)(v1 - 80) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirDartThrashingOptimizer::IsFunctionallyValidForDartThrashingPadding(ZinOpLayerUtils **a1, uint64_t *a2)
{
  const ZinIrOpLayer *v4;
  ZinIrTensor::MirInfo *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  ZinReshapeLayer *v10;
  int v11;
  uint64_t ReshapeInfo;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  ZinIrOpLayer *v16;

  if (ZinIrTensor::IsLiveInLiveStateOrConstTensor((ZinIrTensor *)a1))
    return 0;
  if (ZinIrTensor::IsLiveOut((ZinIrTensor *)a1))
    return 0;
  if (ZinOpLayerUtils::IsConnectedToLiveOut(a1[12], v4))
    return 0;
  v5 = a1[13];
  if (v5)
  {
    if (ZinIrTensor::MirInfo::HasCustomStrides(v5))
      return 0;
  }
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *(ZinReshapeLayer **)(*(_QWORD *)v6 + 96);
      v11 = *(_DWORD *)(*((_QWORD *)v10 + 8) + 8);
      if (v11 == 37)
      {
        ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v10);
        v8 |= ZinIrTransposeInfo::HasDimension(ReshapeInfo, 2);
        v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 96) + 64) + 8);
      }
      v9 |= v11 == 35;
      v6 += 8;
    }
    while (v6 != v7);
    if ((v8 & v9 & 1) != 0)
      return 0;
  }
  v15 = *a2;
  v14 = a2[1];
  if (v15 == v14)
    return 1;
  do
  {
    v16 = *(ZinIrOpLayer **)(*(_QWORD *)v15 + 96);
    if (*(_DWORD *)(*((_QWORD *)v16 + 8) + 8) == 35)
    {
      result = ZinReshapeLayerUtils::IsReshapeValidAfterStridePadding(v16, 2, 2);
      if (!(_DWORD)result)
        break;
    }
    v15 += 8;
    result = 1;
  }
  while (v15 != v14);
  return result;
}

void ZinMirDartThrashingOptimizer::ComputeOptimizedStridesForDartThrashingOpt(ZinMirDartThrashingOptimizer *this@<X0>, const ZinIrTensor *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  int *v12;
  int *v13;
  int v14;
  uint64_t Dimension;
  uint64_t v16;
  int *v17;
  int *v18;
  void *__p;
  void *v20;
  _BYTE v21[88];
  _OWORD v22[2];
  uint64_t v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  ZinIrTensor::GetDimensionOrderHint(this, (uint64_t)&__p);
  v25 = 0;
  ZinIrTensor::InferDescriptor((unsigned __int8 *)this, 2, (uint64_t)&__p, (uint64_t)a2, 1, (uint64_t)v24, (uint64_t)v21);
  v9 = v25;
  if (v25 == v24)
  {
    v10 = 4;
    v9 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v11 = v22[1];
  *(_OWORD *)a4 = v22[0];
  *(_OWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 32) = v23;
  *(_QWORD *)(a4 + 8) += *(_QWORD *)(a3 + 1392);
  ZinMirDartThrashingOptimizer::GetDimensionOrderHint(this, (uint64_t)&__p);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)&__p, &v17);
  v12 = v17;
  v13 = v18;
  if (v17 != v18)
  {
    do
    {
      v14 = *v12;
      Dimension = ZinTensorDimensions::GetDimension((uint64_t *)v22, *v12);
      if (Dimension >= *((uint64_t *)&v22[0] + 1))
      {
        v16 = ZinTensorDimensions::GetDimension((uint64_t *)v22, v14);
        ZinTensorDimensions::SetDimension((_QWORD *)a4, v14, *(_QWORD *)(a4 + 8) * (v16 / *((_QWORD *)&v22[0] + 1)));
      }
      ++v12;
    }
    while (v12 != v13);
    v12 = v17;
  }
  if (v12)
  {
    v18 = v12;
    operator delete(v12);
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_206EC6BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinMirDartThrashingOptimizer::IsTensorQualifiedForDartThrashingOptUtil(ZinMirDartThrashingOptimizer *this, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, char a6, unint64_t *a7, unint64_t *a8)
{
  uint64_t v15;
  _BOOL8 v16;
  __int128 v18;
  int *v19;
  int *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  _QWORD v31[26];
  _OWORD v32[2];
  uint64_t v33;
  int *v34;
  int *v35;
  void *v36[4];
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v15 = *((_QWORD *)this + 13);
  if (v15 && *(_DWORD *)(v15 + 96) == 1 || *((_BYTE *)this + 164) || (ZinIrTensor::IsTensorLayoutMACI(this) & 1) != 0)
    return 0;
  ZinMirDartThrashingOptimizer::GetDimensionOrderHint(this, (uint64_t)v36);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)v36, &v34);
  v18 = *((_OWORD *)this + 4);
  v32[0] = *((_OWORD *)this + 3);
  v32[1] = v18;
  v33 = *((_QWORD *)this + 10);
  v19 = v34;
  v20 = v35;
  if (v34 == v35)
  {
    v16 = 0;
    goto LABEL_28;
  }
  while (1)
  {
    v21 = *v19;
    if (GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v32, *v19) >= 2)
      break;
    if (++v19 == v20)
      goto LABEL_26;
  }
  if (v21 != 2)
  {
LABEL_26:
    v16 = 0;
    goto LABEL_27;
  }
  v38 = 0;
  ZinIrTensor::InferDescriptor((unsigned __int8 *)this, 2, (uint64_t)v36, a2, 1, (uint64_t)v37, (uint64_t)v31);
  v22 = v38;
  if (v38 == v37)
  {
    v23 = 4;
    v22 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_18;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_18:
  v16 = 0;
  v24 = (float)(v31[12] / a5);
  v25 = (unint64_t)v24;
  if ((unint64_t)v24 && (a6 & 1) == 0)
  {
    v26 = *((_QWORD *)&v32[0] + 1);
    *a7 = -1;
    if (a3 < 2)
      goto LABEL_26;
    v27 = a3;
    v28 = (a2 + v26 - 1) / a2;
    while (v25 % v27)
    {
      v29 = v27 > 3;
      v27 >>= 1;
      if (!v29)
        goto LABEL_26;
    }
    v30 = a3 / v27 * a4;
    *a7 = v30;
    if ((float)((float)(v24 - (float)v25) * (float)v30) > 1.0)
      goto LABEL_26;
    v16 = v28 > v30;
  }
LABEL_27:
  v19 = v34;
LABEL_28:
  if (v19)
  {
    v35 = v19;
    operator delete(v19);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  return v16;
}

void sub_206EC6EAC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v4 = *(_QWORD **)(v2 - 104);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 128);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(void **)(v2 - 184);
  if (v6)
  {
    *(_QWORD *)(v2 - 176) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v2 - 160);
  if (v7)
  {
    *(_QWORD *)(v2 - 152) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void ZinMirDartThrashingOptimizer::GetDimensionOrderHint(ZinMirDartThrashingOptimizer *this@<X0>, uint64_t a2@<X8>)
{
  void *__p;
  _BYTE *v5;
  int v6;

  ZinIrTensor::GetDimensionOrderHint(this, a2);
  if (!DimensionOrderHint::IsSet((DimensionOrderHint *)a2) && !DimensionOrderHint::IsSet((DimensionOrderHint *)a2))
  {
    DimensionOrderHint::DimensionOrderHint(&__p, 2);
    if (&__p != (void **)a2)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2, (char *)__p, (uint64_t)v5, (v5 - (_BYTE *)__p) >> 2);
    *(_DWORD *)(a2 + 24) = v6;
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
  }
}

void sub_206EC6FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  if (__p)
    operator delete(__p);
  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<ZinIrTensor *>::set[abi:ne180100]<std::__wrap_iter<ZinIrTensor * const*>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  _QWORD *v4;
  unint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)a1, v4, v6, (uint64_t *)v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_206EC7040(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *ZinIrRingBufferWriterUnit::ZinIrRingBufferWriterUnit(_QWORD *a1, const ZinIrRingBufferUnitInfo *a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = ZinIrUnit::ZinIrUnit(a1, a3);
  *v5 = &off_24C023780;
  ZinIrRingBufferUnitInfo::ZinIrRingBufferUnitInfo((ZinIrRingBufferUnitInfo *)(v5 + 7), a2);
  return a1;
}

void sub_206EC7098(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRingBufferWriterUnit::TensorDimensions(ZinIrRingBufferWriterUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;

  v4 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - v4 == 240)
  {
    result = 0;
    v6 = *(_OWORD *)(v4 + 8);
    v7 = *(_OWORD *)(v4 + 24);
    *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
    *(_OWORD *)a3 = v6;
    *((_OWORD *)a3 + 1) = v7;
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, CFSTR("InvalidBottomCount"));
    return 3;
  }
  return result;
}

ZinIrRingBufferWriterInfo *ZinIrRingBufferWriterUnit::CreateOpcode@<X0>(ZinIrRingBufferWriterUnit *this@<X0>, uint64_t a2@<X8>)
{
  const ZinIrRingBufferUnitInfo *v4;
  ZinIrRingBufferWriterInfo *v5;
  ZinIrRingBufferWriterInfo *result;

  v4 = (ZinIrRingBufferWriterUnit *)((char *)this + 56);
  v5 = (ZinIrRingBufferWriterInfo *)operator new();
  result = ZinIrRingBufferWriterInfo::ZinIrRingBufferWriterInfo(v5, v4);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

void sub_206EC7154(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C402233485ALL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRingBufferWriterUnit::CreateLayer(ZinIrRingBufferWriterUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  ZinIrRingBufferWriterUnit::CreateOpcode(a1, (uint64_t)&v17);
  if (v17)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v15 = **a3;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinRingBufferWriterLayer::ZinRingBufferWriterLayer(v6, &v18, &v15, (char *)a1 + 64);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_206EC7288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinBufferDescriptor::GetMACIBufferSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ZinIrTensor *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  ZinIrTensor::GetDimensionOrderHint(v6, (uint64_t)__p);
  v7 = DWORD2(v17);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7 != 1)
    ZinAssertImpl("Layout must be MACI\n");
  v30 = 0;
  ZinIrTensor::InferDescriptor(v6, (uint64_t)v29, (uint64_t)__p);
  v8 = v27;
  *(_OWORD *)(a4 + 160) = v26;
  *(_OWORD *)(a4 + 176) = v8;
  *(_OWORD *)(a4 + 192) = v28;
  v9 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v9;
  v10 = v25;
  *(_OWORD *)(a4 + 128) = v24;
  *(_OWORD *)(a4 + 144) = v10;
  v11 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v11;
  v12 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v12;
  v13 = v17;
  *(_OWORD *)a4 = *(_OWORD *)__p;
  *(_OWORD *)(a4 + 16) = v13;
  v14 = v30;
  if (v30 == v29)
  {
    v15 = 4;
    v14 = v29;
    goto LABEL_8;
  }
  if (v30)
  {
    v15 = 5;
LABEL_8:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  *(_QWORD *)(a4 + 64) = *(_QWORD *)(a1 + 16);
  ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)v6, (_QWORD *)a4);
}

void sub_206EC7458(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinParseDynamicGOCUnit(const __CFDictionary *a1, uint64_t a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  uint64_t FloatFormat;
  const __CFString *v9;
  const __CFString *v10;
  CFTypeID v11;
  int v13;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    v13 = 0;
    FloatFormat = ZinGetFloatFormat(v6, CFSTR("PreScaleType"), &v13, a3);
    if (!(_DWORD)FloatFormat)
    {
      ZinParseFloatingPoint(v6, CFSTR("PreScale"), &v13, (float *)(a2 + 80), 1.0);
      ZinParseBoolean(v6, CFSTR("NegateInput"), (BOOL *)(a2 + 84));
      ZinParseBoolean(v6, CFSTR("NegateBias"), (BOOL *)(a2 + 85));
      ZinParseBoolean(v6, CFSTR("BiasOnly"), (BOOL *)(a2 + 209));
      v9 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("ScaleBiasType"));
      if (v9)
      {
        v10 = v9;
        v11 = CFGetTypeID(v9);
        if (v11 == CFStringGetTypeID())
        {
          if (ZinCFStringEquals(v10, CFSTR("Scale")))
          {
            *(_BYTE *)(a2 + 210) = 1;
          }
          else if (ZinCFStringEquals(v10, CFSTR("Bias")))
          {
            *(_BYTE *)(a2 + 209) = 1;
          }
        }
      }
    }
  }
  else
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
    return 3;
  }
  return FloatFormat;
}

uint64_t ZinIrIOInfo::SetCustomInterleaveFactors(uint64_t result, int **a2, uint64_t a3)
{
  int *v3;
  int *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string v16;
  std::string v17;

  if (!*(_BYTE *)(a3 + 24))
    goto LABEL_19;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  v6 = *(_BYTE **)a3;
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != v5)
    ZinAssertImpl("interleave factors need to be specified for each dimension");
  if (v4 == v3)
  {
LABEL_19:
    v8 = -1;
  }
  else
  {
    if (v5 <= 1)
      v7 = 1;
    else
      v7 = v4 - *a2;
    v8 = -1;
    do
    {
      v10 = *v3++;
      v9 = v10;
      switch(v10)
      {
        case 0:
          if (*v6 != 1)
          {
            std::to_string(&v16, *v6);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unsupported N interleave: ", &v16, &v17);
            if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v14 = &v17;
            else
              v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
            ZinAssertImpl("%s", (const char *)v14);
          }
          return result;
        case 1:
          if (*v6 != 1)
          {
            std::to_string(&v16, *v6);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unsupported D interleave: ", &v16, &v17);
            if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v13 = &v17;
            else
              v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
            ZinAssertImpl("%s", (const char *)v13);
          }
          return result;
        case 2:
          v8 = *v6;
          break;
        case 3:
          if (*v6 != 1)
          {
            std::to_string(&v16, *v6);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unsupported H interleave: ", &v16, &v17);
            if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v12 = &v17;
            else
              v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
            ZinAssertImpl("%s", (const char *)v12);
          }
          return result;
        case 4:
          if (*v6 != 1)
          {
            std::to_string(&v16, *v6);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unsupported W interleave: ", &v16, &v17);
            if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v11 = &v17;
            else
              v11 = (std::string *)v17.__r_.__value_.__r.__words[0];
            ZinAssertImpl("%s", (const char *)v11);
          }
          return result;
        default:
          std::to_string(&v16, v9);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unexpected dimension when setting custom interleave: ", &v16, &v17);
          if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v15 = &v17;
          else
            v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
          ZinAssertImpl("%s", (const char *)v15);
      }
      ++v6;
      --v7;
    }
    while (v7);
  }
  *(_QWORD *)(result + 144) = v8;
  return result;
}

void sub_206EC7848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t ZinCachePrefetchDma::ZinCachePrefetchDma(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_DWORD *)result = a2;
  v4 = *a3;
  v3 = a3[1];
  *(_WORD *)(result + 4) = *(_WORD *)(v3 + 372);
  *(_BYTE *)(result + 6) = *(_BYTE *)(v3 + 132);
  *(_QWORD *)(result + 8) = *(_QWORD *)(v4 + 1280);
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = a3[1];
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  v5 = *(_BYTE *)(*a3 + 1271);
  if (v5)
    v5 = *(_BYTE *)(a3[1] + 130) == 0;
  *(_BYTE *)(result + 7) = v5;
  return result;
}

BOOL ZinCachePrefetchDma::NeedBarIdForCachePrefetch(ZinCachePrefetchDma *this)
{
  return *((_BYTE *)this + 7) && (*((_WORD *)this + 2) & 1) == 0;
}

uint64_t ZinCachePrefetchDma::Run(unint64_t a1, unint64_t *a2, ZinIrOpLayer ***a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;

  if (!*(_BYTE *)(a1 + 7))
    return 0;
  if ((*(_WORD *)(a1 + 4) & 1) == 0)
  {
    ZinCachePrefetchDma::FindCachePrefetchGroups(a1, a3);
    if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32))
    {
      ZinCachePrefetchDma::UpdateCachePrefetchGroups((ZinCachePrefetchDma *)a1);
      v8 = ZinCachePrefetchDma::ValidatePrefetchAllocation((ZinCachePrefetchDma *)a1);
      if ((_DWORD)v8)
      {
        v9 = v8;
        v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v10)
          ZinCachePrefetchDma::Run(v10, v11, v12);
        return v9;
      }
      v13 = ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(a1, a3);
      if ((_DWORD)v13)
      {
        v9 = v13;
        v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v14)
          ZinCachePrefetchDma::Run(v14, v15, v16);
        return v9;
      }
      ZinCachePrefetchDma::PrintDebugInfo((ZinCachePrefetchDma *)a1);
      ZinCachePrefetchDma::SetMirInfo(a1);
      ZinCachePrefetchDma::CalculateMCachePrefetchQuotaforDriver((ZinCachePrefetchDma *)a1, a2);
    }
  }
  v17 = *a4;
  v18 = a4[1];
  if (*a4 == v18)
    return 0;
  while (1)
  {
    v19 = *(_QWORD *)(*(_QWORD *)v17 + 264);
    if (*(_BYTE *)(v19 + 1264))
      break;
    *(_BYTE *)(v19 + 1264) = 1;
    v17 += 8;
    if (v17 == v18)
      return 0;
  }
  v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v21)
    ZinCachePrefetchDma::Run(v21, v22, v23);
  return 3;
}

uint64_t ZinCachePrefetchDma::FindCachePrefetchGroups(uint64_t a1, ZinIrOpLayer ***a2)
{
  BOOL v3;
  __int16 v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer **v6;
  double v7;
  ZinIrOpLayer *v13;
  _QWORD *v14;
  const ZinANELayer *v15;
  int v16;
  _BOOL4 v17;
  double v18;
  unint64_t v19;
  double v20;
  double v21;
  int v22;
  char v23;
  ZinIrKernel *v24;
  ZinIrKernel *v25;
  ZinIrOpLayer *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  ZinIrOpLayer **v33;
  char *v34;
  char *v35;
  ZinIrOpLayer *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  __int128 v42;
  char v43;
  char v44[15];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  void *__p;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  _BYTE v70[80];
  double v71;
  __int128 v72[2];
  uint64_t v73;
  __int16 v74;
  char v75;
  int v76;
  __int128 v77;
  __int128 v78;

  if (*(_DWORD *)a1)
  {
    v3 = 1;
  }
  else
  {
    v4 = *(_WORD *)(a1 + 4);
    v3 = (v4 & 1) != 0 || (v4 & 2) != 0;
  }
  v77 = 0u;
  v78 = 0u;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
    return 0;
  v41 = 0;
  v7 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v42 = _Q0;
  while (!ZinIrOpLayer::IsANELayer(*v5))
  {
LABEL_79:
    if (++v5 == v6)
      goto LABEL_86;
  }
  v13 = *v5;
  v73 = 0x101000000010101;
  v74 = 256;
  v75 = 1;
  v76 = 0;
  ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)(a1 + 16), *(double *)(*(_QWORD *)(a1 + 24) + 104), *(_DWORD *)(*(_QWORD *)(a1 + 24) + 112), *(_DWORD *)(*(_QWORD *)(a1 + 24) + 116), (uint64_t)v72);
  ZinIrPerf::ZinIrPerf((uint64_t)v70, *(_QWORD *)(a1 + 16), v72, &v73);
  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = 0;
  v59 = v14 + 1;
  v60 = v14 + 1;
  v61 = 0;
  v62 = 0;
  v63 = v42;
  v64 = v42;
  v65 = v42;
  v66 = v42;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  if (ZinANELayer::CalculatePerf(v13, (ZinIrPerf *)v70, (ZinPerfDescriptor *)&v45))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinCachePrefetchDma::FindCachePrefetchGroups(&v43, v44);
    std::vector<CachePrefetchGroup>::__clear[abi:ne180100]((uint64_t *)(a1 + 32));
    v16 = 1;
    goto LABEL_75;
  }
  v17 = 0;
  v18 = v71;
  v19 = v69;
  v20 = *(double *)&v46;
  if (*(double *)&v46 < *((double *)&v46 + 1))
    v20 = *((double *)&v46 + 1);
  v21 = v20 * 0.001;
  if ((_QWORD)v77 && (double)(unint64_t)v53 / v21 > v71)
  {
    if (ZinCachePrefetchUtil::IsKernelPrefetchSupported(v13, v15))
    {
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v13 + 120))(v13))
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 17) + 600) + 96) + 48) <= *(_QWORD *)(v77 + 48);
      else
        v17 = 1;
    }
    else
    {
      v17 = 0;
    }
  }
  v22 = (_QWORD)v78 == *((_QWORD *)&v77 + 1);
  v23 = (_QWORD)v78 == *((_QWORD *)&v77 + 1) || v3;
  if ((v23 & 1) == 0)
  {
    v24 = *(ZinIrKernel **)(**((_QWORD **)&v77 + 1) + 136);
    if (!v24
      || *((_QWORD *)v24 + 75)
      || (ZinIrKernel::IsMutable(v24) & 1) != 0
      || (v25 = (ZinIrKernel *)*((_QWORD *)v13 + 17)) == 0
      || *((_QWORD *)v25 + 75))
    {
      v22 = 0;
    }
    else
    {
      v22 = ZinIrKernel::IsMutable(v25) ^ 1;
    }
  }
  if ((double)v19 / v21 >= v18)
  {
    v26 = (ZinIrOpLayer *)v77;
  }
  else
  {
    v26 = (ZinIrOpLayer *)v77;
    if ((_QWORD)v78 == *((_QWORD *)&v77 + 1))
    {
      if ((_QWORD)v77)
      {
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 2034))
          goto LABEL_57;
      }
      else if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 2034)
             || (*(_DWORD *)(*((_QWORD *)v13 + 33) + 1632) - 1) >= 2)
      {
        *(_QWORD *)&v77 = v13;
        v26 = v13;
LABEL_57:
        v7 = v7 + *((double *)&v47 + 1);
        goto LABEL_58;
      }
      if ((*(_DWORD *)(*((_QWORD *)v13 + 33) + 1632) - 1) <= 1)
      {
        *(_QWORD *)&v77 = 0;
        v16 = 3;
        v7 = 0.0;
        goto LABEL_75;
      }
      goto LABEL_57;
    }
  }
  if (v26 && v17 && ((v22 ^ 1) & 1) == 0)
  {
    if (*((_QWORD *)v13 + 45) > *((_QWORD *)v26 + 45) + 1)
    {
      v27 = v78;
      if ((unint64_t)v78 >= *((_QWORD *)&v78 + 1))
      {
        v29 = (uint64_t)(v78 - *((_QWORD *)&v77 + 1)) >> 3;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v30 = (uint64_t)(*((_QWORD *)&v78 + 1) - *((_QWORD *)&v77 + 1)) >> 2;
        if (v30 <= v29 + 1)
          v30 = v29 + 1;
        if (*((_QWORD *)&v78 + 1) - *((_QWORD *)&v77 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v78 + 8, v31);
        else
          v32 = 0;
        v33 = (ZinIrOpLayer **)&v32[8 * v29];
        *v33 = v13;
        v28 = v33 + 1;
        v35 = (char *)*((_QWORD *)&v77 + 1);
        v34 = (char *)v78;
        if ((_QWORD)v78 != *((_QWORD *)&v77 + 1))
        {
          do
          {
            v36 = (ZinIrOpLayer *)*((_QWORD *)v34 - 1);
            v34 -= 8;
            *--v33 = v36;
          }
          while (v34 != v35);
          v34 = (char *)*((_QWORD *)&v77 + 1);
        }
        *((_QWORD *)&v77 + 1) = v33;
        *(_QWORD *)&v78 = v28;
        *((_QWORD *)&v78 + 1) = &v32[8 * v31];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_QWORD *)v78 = v13;
        v28 = (_QWORD *)(v27 + 8);
      }
      *(_QWORD *)&v78 = v28;
      v41 += v53;
      if (!(_QWORD)v77)
        goto LABEL_74;
    }
    goto LABEL_67;
  }
LABEL_58:
  if (!v26)
    goto LABEL_74;
LABEL_67:
  v37 = *(_QWORD *)(a1 + 16);
  if ((_QWORD)v78 == *((_QWORD *)&v77 + 1))
    goto LABEL_74;
  v16 = 0;
  if (v41 <= *(_QWORD *)(v37 + 480) * *(int *)(v37 + 8) || v7 <= 0.01)
    goto LABEL_75;
  if (!*(_BYTE *)(v37 + 2034) || (*(_DWORD *)(*((_QWORD *)v13 + 33) + 1632) - 1) > 1)
  {
LABEL_74:
    v16 = 0;
    goto LABEL_75;
  }
  v38 = *(_QWORD *)(a1 + 40);
  if (v38 >= *(_QWORD *)(a1 + 48))
  {
    v39 = std::vector<CachePrefetchGroup>::__push_back_slow_path<CachePrefetchGroup const&>((uint64_t *)(a1 + 32), (uint64_t)&v77);
  }
  else
  {
    std::vector<CachePrefetchGroup>::__construct_one_at_end[abi:ne180100]<CachePrefetchGroup const&>(a1 + 32, (uint64_t)&v77);
    v39 = v38 + 32;
  }
  *(_QWORD *)(a1 + 40) = v39;
  *(_QWORD *)&v77 = 0;
  if (*((_QWORD *)&v77 + 1))
  {
    *(_QWORD *)&v78 = *((_QWORD *)&v77 + 1);
    operator delete(*((void **)&v77 + 1));
  }
  v41 = 0;
  v16 = 0;
  *((_QWORD *)&v77 + 1) = 0;
  v78 = 0uLL;
  v7 = 0.0;
LABEL_75:
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v70);
  if (v16 == 3 || !v16)
    goto LABEL_79;
LABEL_86:
  if (*((_QWORD *)&v77 + 1))
  {
    *(_QWORD *)&v78 = *((_QWORD *)&v77 + 1);
    operator delete(*((void **)&v77 + 1));
  }
  return 0;
}

void sub_206EC7FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  void *v61;

  if (__p)
    operator delete(__p);
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&a59);
  v61 = *(void **)(v59 - 184);
  if (v61)
  {
    *(_QWORD *)(v59 - 176) = v61;
    operator delete(v61);
  }
  _Unwind_Resume(a1);
}

void ZinCachePrefetchDma::UpdateCachePrefetchGroups(ZinCachePrefetchDma *this)
{
  char v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *i;
  void *v13;
  _QWORD *v14;
  ZinIrKernel *v15;
  uint64_t *v16;
  _QWORD v17[2];
  char v18;

  if (!*(_DWORD *)this && (*((_WORD *)this + 2) & 3) == 0)
  {
    v2 = *((_BYTE *)this + 6);
    v17[0] = 0;
    v17[1] = 0;
    v18 = v2;
    v16 = v17;
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = (_QWORD *)*((_QWORD *)this + 5);
    if (v3 == v4)
    {
      v14 = 0;
    }
    else
    {
      do
      {
        v6 = v3[1];
        v5 = v3[2];
        if (v5 - v6 == 8)
        {
          v3 += 4;
        }
        else
        {
          if (v5 == v6)
            goto LABEL_15;
          do
          {
            v15 = *(ZinIrKernel **)(*(_QWORD *)v6 + 136);
            std::__tree<ZinIrKernel *,ZinIrConstManager::Compare,std::allocator<ZinIrKernel *>>::__emplace_unique_key_args<ZinIrKernel *,ZinIrKernel * const&>(&v16, &v15, (uint64_t *)&v15);
            if ((v7 & 1) != 0)
            {
              v6 += 8;
              v10 = v3[2];
            }
            else
            {
              v8 = v3[2];
              v9 = v8 - (v6 + 8);
              if (v8 != v6 + 8)
                memmove((void *)v6, (const void *)(v6 + 8), v8 - (v6 + 8));
              v10 = v6 + v9;
              v3[2] = v6 + v9;
            }
          }
          while (v10 != v6);
          if (v10 == v3[1])
          {
LABEL_15:
            std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CachePrefetchGroup *,CachePrefetchGroup *,CachePrefetchGroup *,0>(v3 + 4, *((_QWORD **)this + 5), v3);
            v4 = v11;
            for (i = (_QWORD *)*((_QWORD *)this + 5); i != v4; i -= 4)
            {
              v13 = (void *)*(i - 3);
              if (v13)
              {
                *(i - 2) = v13;
                operator delete(v13);
              }
            }
            *((_QWORD *)this + 5) = v4;
          }
          else
          {
            v3 += 4;
            v4 = (_QWORD *)*((_QWORD *)this + 5);
          }
        }
      }
      while (v3 != v4);
      v14 = (_QWORD *)v17[0];
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v14);
  }
}

void sub_206EC8174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t ZinCachePrefetchDma::ValidatePrefetchAllocation(ZinCachePrefetchDma *this)
{
  uint64_t v1;
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const ZinIrSymbol **v10;
  const ZinIrSymbol *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v22[2];
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v24 = 1065353216;
  v1 = *((_QWORD *)this + 4);
  for (i = *((_QWORD *)this + 5); v1 != i; v1 += 32)
  {
    AddKernelPrefetchAllocation(v1 + 8, *((_QWORD *)this + 1), *(_QWORD *)(*((_QWORD *)this + 2) + 528), v22);
    v4 = *(_QWORD **)(v1 + 8);
    v5 = *(_QWORD **)(v1 + 16);
    while (v4 != v5)
    {
      v6 = (_QWORD *)*v4;
      v7 = *((_QWORD *)this + 1);
      v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 528);
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v4 + 120))(*v4))
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v6 + 128))(&v25, v6);
        v9 = *(_QWORD *)(v25 + 104);
        if (!v9 || (v10 = *(const ZinIrSymbol ***)(v9 + 40), v10 == *(const ZinIrSymbol ***)(v9 + 48)))
          v11 = 0;
        else
          v11 = *v10;
        ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation((ZinMemCacheUtil::MemCacheAllocationState *)((char *)v22 + 8), v11, v8);
        v13 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      else
      {
        v12 = ZinAlignPower2(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6[17] + 784) + 40) + 16), v7);
        *(_QWORD *)&v22[0] -= v12;
      }
      ++v4;
    }
  }
  v16 = ZinMemCacheUtil::MemCacheAllocationState::CalculateSize((ZinMemCacheUtil::MemCacheAllocationState *)((char *)v22 + 8));
  if (v16 | *(_QWORD *)&v22[0])
  {
    v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v17)
      ZinCachePrefetchDma::ValidatePrefetchAllocation(v17, v18, v19);
    v20 = 3;
  }
  else
  {
    v20 = 0;
  }
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)v22 + 8);
  return v20;
}

void sub_206EC8344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  ZinANELayer **v6;
  ZinANELayer **v7;
  unint64_t v9;
  unint64_t v10;
  ZinANELayer *v16;
  _QWORD *v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  double v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  ZinANELayer **v36;
  __int128 v37;
  char v38;
  char v39[15];
  char v40;
  char v41[15];
  _OWORD v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  void *__p;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  _BYTE v66[80];
  double v67;
  __int128 v68[2];
  uint64_t v69;
  __int16 v70;
  char v71;
  int v72;

  if ((*(_WORD *)(a1 + 4) & 5) != 0)
    return 0;
  v7 = *(ZinANELayer ***)(a1 + 32);
  v6 = *(ZinANELayer ***)(a1 + 40);
  if (v7 == v6)
    return 0;
  v9 = 0;
  v10 = (uint64_t)(a2[1] - *a2) >> 3;
  __asm { FMOV            V0.2D, #-1.0 }
  v37 = _Q0;
  v36 = *(ZinANELayer ***)(a1 + 40);
  while (*v7)
  {
    if (v9 == v10)
    {
      v33 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v33)
        ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(v33, v34, v35);
      return 3;
    }
    if (v9 >= v10)
    {
LABEL_13:
      v3 = v2;
    }
    else
    {
      while (1)
      {
        if (ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(*a2 + 8 * v9)))
        {
          v16 = *(ZinANELayer **)(*a2 + 8 * v9);
          if (v16 == *v7)
            break;
        }
        if (v10 == ++v9)
        {
          v9 = v10;
          goto LABEL_13;
        }
      }
      v69 = 0x101000000010101;
      v70 = 256;
      v71 = 1;
      v72 = 0;
      ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)(a1 + 16), *(double *)(*(_QWORD *)(a1 + 24) + 104), *(_DWORD *)(*(_QWORD *)(a1 + 24) + 112), *(_DWORD *)(*(_QWORD *)(a1 + 24) + 116), (uint64_t)v68);
      ZinIrPerf::ZinIrPerf((uint64_t)v66, *(_QWORD *)(a1 + 16), v68, &v69);
      v53 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      memset(v42, 0, sizeof(v42));
      v17 = operator new(8uLL);
      __p = v17;
      *v17 = 0;
      v55 = v17 + 1;
      v56 = v17 + 1;
      v57 = 0;
      v58 = 0;
      v59 = v37;
      v60 = v37;
      v61 = v37;
      v62 = v37;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      if (*((_QWORD *)v16 + 45) >= *(_QWORD *)(*(_QWORD *)v7[1] + 360))
      {
        v18 = 0;
        v19 = 0.0;
LABEL_24:
        v22 = v67;
        v23 = CalculatePrefetchBufferSize(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 1280), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 528), (uint64_t)(v7 + 1));
        v24 = *((_QWORD *)*v7 + 33);
        v6 = v36;
        if (v24)
        {
          v25 = -((double)v18 - v22 * v19);
          v26 = *(_QWORD **)(a1 + 16);
          v27 = v26[161];
          while ((unint64_t)++v27 <= v26[162])
          {
            v28 = v26[171];
            if (v28 >= (unint64_t)v25)
              v28 = (unint64_t)v25;
            if (v23 >> v27 < v28)
            {
              *(_QWORD *)(v24 + 1328) = v27;
              v29 = 1;
              goto LABEL_38;
            }
          }
          v29 = 1;
          *(_QWORD *)(v24 + 1328) = 1;
LABEL_38:
          v3 = v2;
        }
        else
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(&v38, v39);
          v29 = 0;
          v3 = 3;
        }
      }
      else
      {
        v18 = 0;
        v19 = 0.0;
        v20 = v9;
        while (1)
        {
          v3 = ZinANELayer::CalculatePerf(v16, (ZinIrPerf *)v66, (ZinPerfDescriptor *)v42);
          if ((_DWORD)v3)
            break;
          v19 = v19 + *((double *)&v43 + 1) * 0.001;
          v18 += v65;
          while (!ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(*a2 + 8 * v20++ + 8)))
            ;
          v16 = *(ZinANELayer **)(*a2 + 8 * v20);
          if (*((_QWORD *)v16 + 45) >= *(_QWORD *)(*(_QWORD *)v7[1] + 360))
            goto LABEL_24;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(&v40, v41);
        v29 = 0;
        v6 = v36;
      }
      if (__p)
      {
        v55 = __p;
        operator delete(__p);
      }
      ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v66);
      if ((v29 & 1) == 0)
        return v3;
    }
    v7 += 4;
    v2 = v3;
    if (v7 == v6)
      return 0;
  }
  v30 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v30)
    ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(v30, v31, v32);
  return 3;
}

void sub_206EC8704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (__p)
    operator delete(__p);
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&a62);
  _Unwind_Resume(a1);
}

void ZinCachePrefetchDma::PrintDebugInfo(ZinCachePrefetchDma *this)
{
  _QWORD *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t buf[4];
  _BYTE v12[14];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*((_QWORD *)this + 3) + 96) & 8) != 0)
  {
    v2 = (_QWORD *)*((_QWORD *)this + 4);
    if (v2 != *((_QWORD **)this + 5))
    {
      v3 = 0;
      v4 = MEMORY[0x24BDACB70];
      do
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          v5 = *(_QWORD *)(*v2 + 360);
          v6 = (uint64_t)(v2[2] - v2[1]) >> 3;
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)v12 = v3;
          *(_WORD *)&v12[4] = 2048;
          *(_QWORD *)&v12[6] = v5;
          v13 = 2048;
          v14 = v6;
          _os_log_impl(&dword_2069AB000, v4, OS_LOG_TYPE_INFO, "group = %d, prefetch_tid = %zd, consumer size = %lu\n", buf, 0x1Cu);
        }
        v8 = v2[1];
        v7 = v2[2];
        while (v8 != v7)
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
          {
            v9 = *(_QWORD *)(*(_QWORD *)v8 + 360);
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)v12 = v9;
            _os_log_impl(&dword_2069AB000, v4, OS_LOG_TYPE_INFO, "consumer_tid = %zd\n", buf, 0xCu);
            v7 = v2[2];
          }
          v8 += 8;
        }
        if ((*((_WORD *)this + 2) & 5) == 0 && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          v10 = *(_QWORD *)(*(_QWORD *)(*v2 + 264) + 1328);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)v12 = v10;
          _os_log_impl(&dword_2069AB000, v4, OS_LOG_TYPE_INFO, "sieve factor = %zd\n", buf, 0xCu);
        }
        ++v3;
        v2 += 4;
      }
      while (v2 != *((_QWORD **)this + 5));
    }
  }
}

unint64_t ZinCachePrefetchDma::SetMirInfo(unint64_t this)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(_QWORD **)(this + 32);
  v17 = *(_QWORD **)(this + 40);
  if (v1 != v17)
  {
    v2 = (uint64_t *)this;
    do
    {
      v3 = (uint64_t *)v1[1];
      v4 = (uint64_t *)v1[2];
      v5 = *v1;
      if (v3 != v4)
      {
        v6 = *(_QWORD *)(v5 + 360);
        do
        {
          v7 = *v3++;
          v8 = *(_QWORD *)(v7 + 264);
          *(_DWORD *)(v8 + 1360) = 1;
          *(_QWORD *)(v8 + 1368) = v6;
          *(_WORD *)(v8 + 1376) = 257;
          *(_DWORD *)(v8 + 1416) = 3;
        }
        while (v3 != v4);
      }
      v9 = *(_QWORD *)(v5 + 264);
      *(_DWORD *)(v9 + 1268) = 1;
      *(_BYTE *)(v9 + 1264) = 1;
      if (*(_BYTE *)(v2[2] + 1304))
      {
        *(_WORD *)(v9 + 1336) = 257;
        *(_BYTE *)(v9 + 1338) = 1;
        *(_DWORD *)(v9 + 1340) = 1000;
        *(_WORD *)(v9 + 1344) = 257;
        *(_BYTE *)(v9 + 1346) = 1;
        *(_QWORD *)(v9 + 1348) = 0x1000003E8;
      }
      *(_DWORD *)(v9 + 1356) = ZinCachePrefetchDma::CalculatePrefetchRateLog2((ZinCachePrefetchDma *)v2);
      v10 = v2[2];
      if (*(_BYTE *)(v10 + 2034))
      {
        v11 = *(_QWORD *)(*v1 + 360);
        v12 = *(_QWORD *)(*(_QWORD *)v1[1] + 360) - v11;
        v13 = *(_QWORD *)(*(_QWORD *)(v1[2] - 8) + 360) - v11;
      }
      else
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v1[2] - 8) + 360) - *(_QWORD *)(*v1 + 360);
        v12 = v13;
      }
      v14 = *(_QWORD *)(v9 + 1328);
      v15 = (unint64_t)CalculatePrefetchBufferSize(v2[1], *(_QWORD *)(v10 + 528), (uint64_t)(v1 + 1)) >> v14;
      if (*(_QWORD *)(v2[2] + 1368) < v15)
        v15 = *(_QWORD *)(v2[2] + 1368);
      this = ZinAlignPower2(v15 << v14, v2[1]);
      v16 = v2[2];
      *(_QWORD *)(v9 + 1272) = this / v2[1];
      *(_QWORD *)(v9 + 1280) = v13;
      *(_BYTE *)(v9 + 1288) = 1;
      *(_QWORD *)(v9 + 1296) = v12;
      *(_BYTE *)(v9 + 1320) = 1;
      if (*(_BYTE *)(v16 + 2034))
        *(_BYTE *)(v9 + 1321) = 1;
      v1 += 4;
    }
    while (v1 != v17);
  }
  return this;
}

uint64_t ZinCachePrefetchDma::CalculateMCachePrefetchQuotaforDriver(ZinCachePrefetchDma *this, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t *i;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *a2 = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  for (i = (uint64_t *)*((_QWORD *)this + 5); v2 != i; *a2 = v8)
  {
    v6 = CalculatePrefetchBufferSize(*(_QWORD *)(*((_QWORD *)this + 2) + 1280), *(_QWORD *)(*((_QWORD *)this + 2) + 528), (uint64_t)(v2 + 1));
    v7 = *v2;
    v2 += 4;
    v8 = v6 >> *(_QWORD *)(*(_QWORD *)(v7 + 264) + 1328);
    if (*a2 > v8)
      v8 = *a2;
  }
  return 0;
}

BOOL ZinCachePrefetchUtil::IsKernelClubbingAllowed(ZinCachePrefetchUtil *this, char a2)
{
  _BOOL4 v2;

  v2 = (a2 & 2) == 0;
  if ((a2 & 1) != 0)
    v2 = 0;
  return !(_DWORD)this && v2;
}

uint64_t ZinCachePrefetchUtil::IsKernelPrefetchSupported(ZinCachePrefetchUtil *this, const ZinANELayer *a2)
{
  ZinIrKernel *v2;
  int v3;
  unsigned int v4;

  v2 = (ZinIrKernel *)*((_QWORD *)this + 17);
  v3 = **(unsigned __int8 **)(*((_QWORD *)v2 + 98) + 40);
  if (*((_QWORD *)v2 + 75))
    v4 = 1;
  else
    v4 = ZinIrKernel::IsMutable(v2) ^ 1;
  if (v3)
    return 0;
  else
    return v4;
}

BOOL ZinCachePrefetchDma::CalculatePrefetchRateLog2(ZinCachePrefetchDma *this)
{
  ZinIrHalParameters *v2;
  _BYTE v4[24];
  double v5;
  double v6;

  v2 = (ZinIrHalParameters *)*((_QWORD *)this + 2);
  if (!*((_BYTE *)v2 + 1305))
    return 0;
  ZinIrHalParameters::GetOperationCondition(v2, *(double *)(*((_QWORD *)this + 3) + 104), *(_DWORD *)(*((_QWORD *)this + 3) + 112), *(_DWORD *)(*((_QWORD *)this + 3) + 116), (uint64_t)v4);
  return v5 <= v6;
}

uint64_t CalculatePrefetchBufferSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[2];
  uint64_t v7;
  int v8;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v8 = 1065353216;
  AddKernelPrefetchAllocation(a3, a1, a2, v6);
  v3 = ZinMemCacheUtil::MemCacheAllocationState::CalculateSize((ZinMemCacheUtil::MemCacheAllocationState *)((char *)v6 + 8));
  v4 = *(_QWORD *)&v6[0] + v3;
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)v6 + 8);
  return v4;
}

void sub_206EC8C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AddKernelPrefetchAllocation(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const ZinIrSymbol **v12;
  const ZinIrSymbol *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v7)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = (_QWORD *)*v6;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 120))(*v6))
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v10 + 128))(&v18, v10);
        v11 = *(_QWORD *)(v18 + 104);
        if (!v11 || (v12 = *(const ZinIrSymbol ***)(v11 + 40), v12 == *(const ZinIrSymbol ***)(v11 + 48)))
          v13 = 0;
        else
          v13 = *v12;
        ZinMemCacheUtil::MemCacheAllocationState::AddAllocation((ZinMemCacheUtil::MemCacheAllocationState *)(a4 + 1), v13, a3);
        v14 = v19;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      else
      {
        v9 += ZinAlignPower2(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10[17] + 784) + 40) + 16), a2);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  result = ZinAlignPower2(v9, a2);
  *a4 += result;
  return result;
}

void sub_206EC8DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CachePrefetchGroup>::__construct_one_at_end[abi:ne180100]<CachePrefetchGroup const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = *(_QWORD *)a2;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  result = std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v3 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 4;
  return result;
}

void sub_206EC8E14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CachePrefetchGroup>::__push_back_slow_path<CachePrefetchGroup const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ControlEdgeInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)v11 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v15 += 32;
  std::vector<CachePrefetchGroup>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<LayerSourcePair>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_206EC8F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LayerSourcePair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CachePrefetchGroup>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CachePrefetchGroup>,std::reverse_iterator<CachePrefetchGroup*>,std::reverse_iterator<CachePrefetchGroup*>,std::reverse_iterator<CachePrefetchGroup*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CachePrefetchGroup>,std::reverse_iterator<CachePrefetchGroup*>,std::reverse_iterator<CachePrefetchGroup*>,std::reverse_iterator<CachePrefetchGroup*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CachePrefetchGroup>,std::reverse_iterator<CachePrefetchGroup*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CachePrefetchGroup>,std::reverse_iterator<CachePrefetchGroup*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<LayerSourcePair>,std::reverse_iterator<LayerSourcePair*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CachePrefetchGroup *,CachePrefetchGroup *,CachePrefetchGroup *,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = (__n128 *)(v4 + 1);
    v7 = *v4;
    v4 += 4;
    v8 = (uint64_t)(a3 + 1);
    *a3 = v7;
    a3 += 4;
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__move_assign(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

void ZinCachePrefetchDma::Run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[Cache Prefetch] Last non-NoOp layer cannot be a candidate for prefetcher.\n", v3);
  OUTLINED_FUNCTION_1();
}

{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "CalculateSieveFactor() failed\n", v3);
  OUTLINED_FUNCTION_1();
}

{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ValidatePrefetchAllocation() failed\n", v3);
  OUTLINED_FUNCTION_1();
}

void ZinCachePrefetchDma::FindCachePrefetchGroups(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "[Cache Prefetch] No cache prefetching as perf model failed\n", v3);
}

void ZinCachePrefetchDma::ValidatePrefetchAllocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Cache prefetch allocation leak!\n", v3);
  OUTLINED_FUNCTION_1();
}

void ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Prefetcher cannot be null\n", v3);
  OUTLINED_FUNCTION_1();
}

{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Prefetcher is not null, but the last layer in the graph has been reached\n", v3);
  OUTLINED_FUNCTION_1();
}

void ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "Prefetcher MirInfo cannot be nullptr\n", v3);
}

{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "[SetSieveFactorForPrefetchGroups] Perf Model failed", v3);
}

_QWORD *ZinBasicBlockInLayer::ZinBasicBlockInLayer(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  ZinIrKernel *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  ZinIrKernel *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v6 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v6, 79);
  v7 = a2[1];
  v18 = *a2;
  v19 = (std::__shared_weak_count *)v7;
  v20 = v6;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v17 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v20, &v18, a3, &v17);
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    ZinIrKernel::~ZinIrKernel(v10);
    MEMORY[0x20BD002F8](v11, 0x1032C40DEE44497);
  }
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *a1 = &off_24BFF21E0;
  return a1;
}

void sub_206EC93C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinBasicBlockInLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *GroupId;
  uint64_t v16[2];

  v6 = (_QWORD *)operator new();
  v7 = (uint64_t)v6;
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v16[0] = v8;
  v16[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ZinBasicBlockInLayer::ZinBasicBlockInLayer(v6, v16, a3);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId(v7, *GroupId);
  return v7;
}

void sub_206EC94E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v9, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinBasicBlockInLayer::HasOutputParentTensor(ZinBasicBlockInLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 14);
  v2 = *((_QWORD *)this + 15);
  if (v1 == v2)
    return 0;
  v3 = v1 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 104))(*(_QWORD *)(v3 - 8));
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

__CFDictionary *ZinCreatePEPoolUnit(const ZinIrPEPoolUnitInfo *a1)
{
  __CFDictionary *Unit;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  Unit = ZinCreateUnit(a1);
  v6[0] = &off_24C053FC0;
  v7 = v6;
  ZinCreatePEUnit((uint64_t)a1, (uint64_t)v6, Unit);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return Unit;
}

void sub_206EC961C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C053FC0;
  return result;
}

void std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C053FC0;
}

void std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::operator()(uint64_t a1, uint64_t a2, std::vector<std::string> *a3, __CFDictionary **a4)
{
  __CFDictionary *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  size_t v10;
  std::string *p_str;
  _QWORD *v12;
  std::vector<std::string>::pointer begin;
  __int128 v14;
  __CFDictionary *PoolUnit;
  std::string *p_p;
  CFStringRef v17;
  void (**v18)(ZinIrUnitInfo *__hidden);
  std::string __p;
  int v20;
  std::string v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  void *v29;
  _QWORD v30[2];
  unsigned __int8 v31;
  __int128 v32;
  void (**v33)(ZinIrUnitInfo *__hidden);
  std::string __s;
  int v35;
  std::string v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  std::string __str;
  __int128 v45;

  *(_QWORD *)&v45 = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  ZinIrPEUnitInfo::ZinIrPEUnitInfo((ZinIrPEUnitInfo *)&v29, (const ZinIrPEUnitInfo *)a2);
  v29 = &unk_24C01F000;
  v33 = off_24C017CA0;
  if (*(char *)(a2 + 999) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a2 + 976), *(_QWORD *)(a2 + 984));
  else
    __s = *(std::string *)(a2 + 976);
  v35 = *(_DWORD *)(a2 + 1000);
  memset(&v36, 0, sizeof(v36));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, *(__int128 **)(a2 + 1008), *(__int128 **)(a2 + 1016), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 1016) - *(_QWORD *)(a2 + 1008)) >> 3));
  v33 = (void (**)(ZinIrUnitInfo *__hidden))&unk_24C01CC78;
  v7 = *(_OWORD *)(a2 + 1112);
  v41 = *(_OWORD *)(a2 + 1096);
  v42 = v7;
  v8 = *(_OWORD *)(a2 + 1048);
  v37 = *(_OWORD *)(a2 + 1032);
  v38 = v8;
  v9 = *(_OWORD *)(a2 + 1080);
  v39 = *(_OWORD *)(a2 + 1064);
  v40 = v9;
  v43 = *(_DWORD *)(a2 + 1128);
  v18 = off_24C017CA0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    __p = __s;
  v20 = v35;
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, (__int128 *)v36.__r_.__value_.__l.__data_, (__int128 *)v36.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36.__r_.__value_.__l.__size_ - v36.__r_.__value_.__r.__words[0]) >> 3));
  v26 = v41;
  v27 = v42;
  v22 = v37;
  v23 = v38;
  v18 = (void (**)(ZinIrUnitInfo *__hidden))&unk_24C01CC78;
  v28 = v43;
  if ((v31 & 0x80u) == 0)
    v10 = v31;
  else
    v10 = v30[1];
  v24 = v39;
  v25 = v40;
  p_str = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v10 + 5);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if ((v31 & 0x80u) == 0)
      v12 = v30;
    else
      v12 = (_QWORD *)v30[0];
    memmove(p_str, v12, v10);
  }
  strcpy((char *)p_str + v10, ".pool");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  v22 = v32;
  begin = a3->__begin_;
  if (SHIBYTE(a3->__begin_->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v21, &__str, &v45, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __str = __p;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(a3, &__str, &v45, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  PoolUnit = ZinCreatePoolUnit((const ZinIrPoolUnitInfo *)&v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)p_p, 0x8000100u);
  CFDictionaryAddValue(v6, v17, PoolUnit);
  CFRelease(v17);
  CFRelease(PoolUnit);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v18);
  v29 = &unk_24C01F000;
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v33);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(&v29);
}

void sub_206EC9A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void **v30;
  uint64_t v31;

  ZinIrUnitInfo::~ZinIrUnitInfo(&a9);
  a30 = v31 + 16;
  ZinIrUnitInfo::~ZinIrUnitInfo(v30);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo((void **)&a30);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::target_type()
{
}

uint64_t ZinMirUnitGraphDeadCodeEliminator(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6[0] = &off_24C054178;
  v7 = v6;
  v1 = ZinMirUnitGraph::Traverse(a1, (uint64_t)v6, &v5);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_206EC9BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C054178;
  return result;
}

void std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C054178;
}

uint64_t std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::operator()(uint64_t a1, uint64_t *a2, ZinDynamicOffsetCustomBarCmd **a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a2;
  if (std::__tree<std::shared_ptr<ZinMirUnit>,ZinIrSharedPointerNameComparator<ZinMirUnit>,std::allocator<std::shared_ptr<ZinMirUnit>>>::__count_unique<std::shared_ptr<ZinMirUnit>>(*a2, a3)&& !RemoveNodeWithNoOutgoingEdges(v4, a3))
  {
    goto LABEL_11;
  }
  result = std::__tree<std::shared_ptr<ZinMirUnit>,ZinIrSharedPointerNameComparator<ZinMirUnit>,std::allocator<std::shared_ptr<ZinMirUnit>>>::__count_unique<std::shared_ptr<ZinMirUnit>>(v4, a3);
  if (!result)
    return result;
  if (RemoveNodeWithNoIncomingEdges(v4, a3))
    return 0;
LABEL_11:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::operator()(a3);
  return 3;
}

uint64_t std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::target_type()
{
}

BOOL RemoveNodeWithNoOutgoingEdges(uint64_t a1, ZinMirUnit **a2)
{
  uint64_t **v4;
  _QWORD *v5;
  _BOOL8 result;
  uint64_t **v7;
  uint64_t **v8;
  char v9;
  unint64_t ***v10;
  unint64_t ***v11;
  int v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  void *__p;
  unint64_t ***v23;
  uint64_t v24;

  if (ZinMirUnit::IsOutput(*a2))
    return 1;
  __p = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 24), (unint64_t **)&__p);
  v5 = v4 + 3;
  if (!v4)
    v5 = (_QWORD *)(a1 + 104);
  if (v5[1] != *v5)
    return 1;
  v20 = (unint64_t *)a2;
  v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 64), &v20);
  v8 = v7 + 3;
  if (!v7)
    v8 = (uint64_t **)(a1 + 104);
  v23 = 0;
  v24 = 0;
  __p = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *v8, (uint64_t)v8[1], v8[1] - *v8);
  v9 = ZinMirUnitGraph::RemoveNode(a1, a2);
  v10 = (unint64_t ***)__p;
  if ((v9 & 1) != 0)
  {
    v11 = v23;
    v12 = 1;
    if (__p != v23)
    {
      do
      {
        v13 = (*v10)[1];
        v20 = **v10;
        v21 = (std::__shared_weak_count *)v13;
        if (v13)
        {
          v14 = v13 + 1;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = RemoveNodeWithNoOutgoingEdges(a1, &v20);
        if ((_BYTE)v12)
          v12 = v16;
        else
          v12 = 0;
        v17 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        ++v10;
      }
      while (v10 != v11);
      v10 = (unint64_t ***)__p;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v10)
  {
    v23 = v10;
    operator delete(v10);
  }
  result = v12 != 0;
  if ((v9 & 1) == 0)
    return 0;
  return result;
}

void sub_206EC9ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL RemoveNodeWithNoIncomingEdges(uint64_t a1, ZinMirUnit **a2)
{
  uint64_t **v4;
  _QWORD *v5;
  _BOOL8 result;
  uint64_t **v7;
  uint64_t **v8;
  char v9;
  unint64_t ***v10;
  unint64_t ***v11;
  int v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  void *__p;
  unint64_t ***v23;
  uint64_t v24;

  if (ZinMirUnit::IsInput(*a2) || ZinMirUnit::IsConstIn(*a2))
    return 1;
  __p = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 64), (unint64_t **)&__p);
  v5 = v4 + 3;
  if (!v4)
    v5 = (_QWORD *)(a1 + 104);
  if (v5[1] != *v5)
    return 1;
  v20 = (unint64_t *)a2;
  v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a1 + 24), &v20);
  v8 = v7 + 3;
  if (!v7)
    v8 = (uint64_t **)(a1 + 104);
  v23 = 0;
  v24 = 0;
  __p = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *v8, (uint64_t)v8[1], v8[1] - *v8);
  v9 = ZinMirUnitGraph::RemoveNode(a1, a2);
  v10 = (unint64_t ***)__p;
  if ((v9 & 1) != 0)
  {
    v11 = v23;
    v12 = 1;
    if (__p != v23)
    {
      do
      {
        v13 = (*v10)[1];
        v20 = **v10;
        v21 = (std::__shared_weak_count *)v13;
        if (v13)
        {
          v14 = v13 + 1;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = RemoveNodeWithNoIncomingEdges(a1, &v20);
        if ((_BYTE)v12)
          v12 = v16;
        else
          v12 = 0;
        v17 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        ++v10;
      }
      while (v10 != v11);
      v10 = (unint64_t ***)__p;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v10)
  {
    v23 = v10;
    operator delete(v10);
  }
  result = v12 != 0;
  if ((v9 & 1) == 0)
    return 0;
  return result;
}

void sub_206ECA08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::operator()(ZinDynamicOffsetCustomBarCmd **a1)
{
  uint64_t DynamicOffsetInfo;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*a1);
  if (*(char *)(DynamicOffsetInfo + 23) >= 0)
    v2 = DynamicOffsetInfo;
  else
    v2 = *(_QWORD *)DynamicOffsetInfo;
  v3 = 136315138;
  v4 = v2;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: DeadCodeEliminator fails in %s.", (uint8_t *)&v3, 0xCu);
}

void ZinMirConstInUnit::ZinMirConstInUnit(ZinMirConstInUnit *this, ZinMirUnit::CommonUnitInfo *a2)
{
  *(_QWORD *)ZinMirUnit::ZinMirUnit((uint64_t)this, 29, (__int128 *)a2) = &off_24C01D238;
}

uint64_t ZinMirConstInUnit::DynamicShapeOutputTensorDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a1 + 152);
  v4 = *(_OWORD *)(a1 + 168);
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(a1 + 184);
  *(_OWORD *)a3 = v3;
  *(_OWORD *)(a3 + 16) = v4;
  return 0;
}

uint64_t ZinMirConstInUnit::CreateLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v4 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v4, 29);
  v17 = v4;
  v5 = operator new();
  v6 = v5;
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 8);
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  ZinConstInLayer::ZinConstInLayer(v5, &v17, &v15, a1 + 8);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v6;
}

void sub_206ECA28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t ZinMirConstInUnit::SetSymbolInfo(ZinMirConstInUnit *this, int a2)
{
  *((_DWORD *)this + 72) = a2;
  return 0;
}

void ZinMirConstInUnit::~ZinMirConstInUnit(ZinMirConstInUnit *this)
{
  ZinMirUnit::~ZinMirUnit(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinTEPadFactory::Create(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  std::vector<unsigned int>::size_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  float v22;
  std::vector<unsigned int>::pointer begin;
  float v24;
  int v25;
  _DWORD *v26;
  char *v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float v38;
  std::vector<unsigned int>::pointer v39;
  float v40;
  int v41;
  int v42;
  float v43;
  float v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  _QWORD *v77;
  std::vector<unsigned int>::value_type __x[2];
  char *v79;
  uint64_t v80;
  _QWORD v81[4];
  int v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 __p;
  _QWORD v87[4];
  _WORD v88[16];
  std::vector<unsigned int> __src;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v82 = 0;
  v83 = 0u;
  v84 = 0u;
  v85 = -1;
  v81[0] = &unk_24C01FAF8;
  memset(&v81[1], 0, 24);
  __p = 0u;
  memset(v87, 0, sizeof(v87));
  memset(v88, 0, 26);
  *(_OWORD *)&__src.__begin_ = xmmword_207A8D4D0;
  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v88, (char *)&__src, (uint64_t)&__src.__end_cap_, 2uLL);
  DWORD2(v84) = *(_DWORD *)(a1 + 64);
  if (&v87[1] != (_QWORD *)(a1 + 200))
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v87[1], *(char **)(a1 + 200), *(_QWORD *)(a1 + 208), (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3);
  v88[12] = *(_WORD *)(a1 + 224);
  v8 = *(_QWORD *)(*a2 + 72);
  v71 = *(_QWORD *)(*a2 + 64);
  v9 = *(_QWORD *)(a4 + 2072);
  __x[0] = 0;
  std::vector<unsigned int>::vector(&__src, v9, __x);
  v10 = *(int *)(a1 + 156);
  v12 = *(int *)(a1 + 164);
  v11 = *(int *)(a1 + 168);
  v13 = *(int **)(a1 + 200);
  v14 = *(int **)(a1 + 208);
  v68 = a4;
  v69 = a3;
  v70 = v8;
  if (v13 == v14)
  {
    v17 = 1;
LABEL_17:
    v25 = 0;
    v24 = (float)-(int)v10;
    v21 = 25;
    begin = __src.__begin_;
    goto LABEL_19;
  }
  v15 = v8 - (*(int *)(a1 + 160) + v10);
  v16 = 1;
  v17 = 1;
  do
  {
    v18 = *v13;
    v19 = v13[1];
    v13 += 2;
    if (v18 == 3)
      v20 = v19;
    else
      v20 = v17;
    if (v18 == 4)
      v16 = v19;
    else
      v17 = v20;
  }
  while (v13 != v14);
  if (v16 == 3)
    goto LABEL_15;
  if (v16 != 5)
  {
    if (v16 == 6)
    {
LABEL_15:
      v21 = 0;
      v22 = (float)(v15 - 1);
      begin = __src.__begin_;
      *(float *)__src.__begin_ = 1.0 / v22;
      v24 = (float)-*(_DWORD *)(a1 + 156) / v22;
      v25 = 2;
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  v21 = 0;
  begin = __src.__begin_;
  *(float *)__src.__begin_ = 1.0 / (float)v15;
  v24 = (float)((float)-*(_DWORD *)(a1 + 156) + 0.5) / (float)v15;
  v25 = 1;
LABEL_19:
  *((float *)begin + 2) = v24;
  v26 = (_DWORD *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1) >= v87[0])
  {
    v28 = (_DWORD *)__p;
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
    v30 = v29 + 1;
    if (v29 + 1 > 0x1555555555555555)
      goto LABEL_77;
    if (0x5555555555555556 * ((uint64_t)(v87[0] - __p) >> 2) > v30)
      v30 = 0x5555555555555556 * ((uint64_t)(v87[0] - __p) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87[0] - __p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v31 = 0x1555555555555555;
    else
      v31 = v30;
    if (v31)
    {
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)v87, v31);
      v26 = (_DWORD *)*((_QWORD *)&__p + 1);
      v28 = (_DWORD *)__p;
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[12 * v29];
    v34 = &v32[12 * v31];
    *(_QWORD *)v33 = 4;
    *((_DWORD *)v33 + 2) = v25;
    v27 = v33 + 12;
    if (v26 != v28)
    {
      do
      {
        v35 = *(_QWORD *)(v26 - 3);
        v26 -= 3;
        v36 = v26[2];
        *(_QWORD *)(v33 - 12) = v35;
        v33 -= 12;
        *((_DWORD *)v33 + 2) = v36;
      }
      while (v26 != v28);
      v28 = (_DWORD *)__p;
    }
    *(_QWORD *)&__p = v33;
    *((_QWORD *)&__p + 1) = v27;
    v87[0] = v34;
    if (v28)
      operator delete(v28);
  }
  else
  {
    **((_QWORD **)&__p + 1) = 4;
    v26[2] = v25;
    v27 = (char *)(v26 + 3);
  }
  v37 = v71 - (v12 + v11);
  *((_QWORD *)&__p + 1) = v27;
  switch(v17)
  {
    case 6:
      goto LABEL_38;
    case 5:
      v43 = (float)v37;
      v44 = 1.0 / (float)v37;
      v39 = __src.__begin_;
      *((float *)__src.__begin_ + 1) = v44;
      v40 = (float)((float)-*(_DWORD *)(a1 + 164) + 0.5) / v43;
      v42 = 1;
      v41 = 1;
      break;
    case 3:
LABEL_38:
      v38 = (float)(v37 - 1);
      v39 = __src.__begin_;
      *((float *)__src.__begin_ + 1) = 1.0 / v38;
      v40 = (float)-*(_DWORD *)(a1 + 164) / v38;
      v41 = 2;
      v42 = 1;
      break;
    default:
      v41 = 0;
      v40 = (float)-*(_DWORD *)(a1 + 164);
      v42 = 25;
      v39 = __src.__begin_;
      break;
  }
  *((float *)v39 + 3) = v40;
  if ((unint64_t)v27 < v87[0])
  {
    *(_QWORD *)v27 = 3;
    *((_DWORD *)v27 + 2) = v41;
    v45 = v27 + 12;
    goto LABEL_57;
  }
  v46 = (char *)__p;
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-__p] >> 2);
  v48 = v47 + 1;
  if (v47 + 1 > 0x1555555555555555)
LABEL_77:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(v87[0] - __p) >> 2) > v48)
    v48 = 0x5555555555555556 * ((uint64_t)(v87[0] - __p) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87[0] - __p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
    v49 = 0x1555555555555555;
  else
    v49 = v48;
  if (v49)
  {
    v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)v87, v49);
    v27 = (char *)*((_QWORD *)&__p + 1);
    v46 = (char *)__p;
  }
  else
  {
    v50 = 0;
  }
  v51 = &v50[12 * v47];
  v52 = &v50[12 * v49];
  *(_QWORD *)v51 = 3;
  *((_DWORD *)v51 + 2) = v41;
  v45 = v51 + 12;
  if (v27 != v46)
  {
    do
    {
      v53 = *(_QWORD *)(v27 - 12);
      v27 -= 12;
      v54 = *((_DWORD *)v27 + 2);
      *(_QWORD *)(v51 - 12) = v53;
      v51 -= 12;
      *((_DWORD *)v51 + 2) = v54;
    }
    while (v27 != v46);
    v46 = (char *)__p;
  }
  *(_QWORD *)&__p = v51;
  *((_QWORD *)&__p + 1) = v45;
  v87[0] = v52;
  if (v46)
    operator delete(v46);
LABEL_57:
  *((_QWORD *)&__p + 1) = v45;
  *(_QWORD *)__x = 0;
  v79 = 0;
  v80 = 0;
  std::vector<ZinTECropModeLayer::TexCropCfgElem>::resize((uint64_t)__x, 4uLL);
  v55 = *(char **)__x;
  **(_QWORD **)__x = 0x800000000;
  *((_DWORD *)v55 + 2) = v21;
  *(_OWORD *)(v55 + 12) = xmmword_207AA88C0;
  *(_QWORD *)(v55 + 28) = 0x400000000;
  *((_DWORD *)v55 + 9) = 8;
  *((_DWORD *)v55 + 10) = v42;
  *(_OWORD *)(v55 + 44) = xmmword_207AA88D0;
  *((_DWORD *)v55 + 15) = 0;
  v56 = operator new();
  v57 = (_QWORD *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)v57, 97);
  *v57 = &unk_24C018D30;
  v58 = (std::__shared_weak_count *)a2[1];
  v75 = *a2;
  v76 = v58;
  v77 = v57;
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldxr(p_shared_owners);
    while (__stxr(v60 + 1, p_shared_owners));
  }
  ZinTECropModeLayer::ZinTECropModeLayer(v56, &v77, &v75, v69);
  v61 = v76;
  if (v76)
  {
    v62 = (unint64_t *)&v76->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v77;
  v77 = 0;
  if (v64)
    (*(void (**)(_QWORD *))(*v64 + 8))(v64);
  v73 = 0;
  v74 = 0;
  v72 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v72, __src.__begin_, (uint64_t)__src.__end_, __src.__end_ - __src.__begin_);
  v65 = ZinTECropModeLayer::Configure(v56, (const ZinIrTextureUnitInfo *)4, (ZinIrTextureUnitInfo *)v81, v71, v70, 8, 8, 1, (uint64_t)&v72, __x, *(_BYTE *)(v68 + 1253));
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (*(_QWORD *)__x)
  {
    v79 = *(char **)__x;
    operator delete(*(void **)__x);
  }
  if (__src.__begin_)
  {
    __src.__end_ = __src.__begin_;
    operator delete(__src.__begin_);
  }
  if (v65)
    v66 = v56;
  else
    v66 = 0;
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v81);
  return v66;
}

void sub_206ECA9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&a25);
  _Unwind_Resume(a1);
}

void ZinMirAneKernelCoeff::ZinMirBuildNEKernelDataSharedKmem(ZinMirAneKernelCoeff *this, int a2, int a3, int a4)
{
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v6 = (_QWORD *)*((_QWORD *)this + 4);
  v7 = a2 / a4;
  if (a2 / a4)
  {
    v8 = 0;
    v9 = v6 + 2;
    v10 = v6 + 4;
    v11 = (char *)v6[3];
    *(_QWORD *)&v12 = -1;
    *((_QWORD *)&v12 + 1) = -1;
    do
    {
      if ((unint64_t)v11 >= *v10)
      {
        v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v11[-*v9] >> 3);
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) > 0x492492492492492)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v10 - *v9) >> 3) > v14)
          v14 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v10 - *v9) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v10 - *v9) >> 3)) >= 0x249249249249249)
          v15 = 0x492492492492492;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>((uint64_t)(v6 + 4), v15);
          *(_QWORD *)&v12 = -1;
          *((_QWORD *)&v12 + 1) = -1;
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[56 * v13];
        *(_DWORD *)v17 = a3;
        *((_DWORD *)v17 + 1) = a4;
        *(_OWORD *)(v17 + 8) = v12;
        *(_OWORD *)(v17 + 24) = v12;
        *((_QWORD *)v17 + 5) = -1;
        *((_QWORD *)v17 + 6) = 0;
        v19 = (char *)v6[2];
        v18 = (char *)v6[3];
        v20 = v17;
        if (v18 != v19)
        {
          do
          {
            v21 = *(_OWORD *)(v18 - 56);
            v22 = *(_OWORD *)(v18 - 40);
            v23 = *(_OWORD *)(v18 - 24);
            *((_QWORD *)v20 - 1) = *((_QWORD *)v18 - 1);
            *(_OWORD *)(v20 - 24) = v23;
            *(_OWORD *)(v20 - 40) = v22;
            *(_OWORD *)(v20 - 56) = v21;
            v20 -= 56;
            v18 -= 56;
          }
          while (v18 != v19);
          v18 = (char *)*v9;
        }
        v11 = v17 + 56;
        v6[2] = v20;
        v6[3] = v17 + 56;
        v6[4] = &v16[56 * v15];
        if (v18)
        {
          operator delete(v18);
          *(_QWORD *)&v12 = -1;
          *((_QWORD *)&v12 + 1) = -1;
        }
      }
      else
      {
        *(_DWORD *)v11 = a3;
        *((_DWORD *)v11 + 1) = a4;
        *(_OWORD *)(v11 + 24) = v12;
        *(_OWORD *)(v11 + 8) = v12;
        *((_QWORD *)v11 + 5) = -1;
        *((_QWORD *)v11 + 6) = 0;
        v11 += 56;
      }
      v6[3] = v11;
      a3 += a4;
      ++v8;
    }
    while (v8 != v7);
  }
  v24 = a2 - v7 * a4;
  if (v24)
  {
    v25 = v6[4];
    v26 = v6[3];
    if (v26 >= v25)
    {
      v29 = v6[2];
      v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v26 - v29) >> 3);
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) > 0x492492492492492)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v32 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - v29) >> 3);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x249249249249249)
        v33 = 0x492492492492492;
      else
        v33 = v31;
      if (v33)
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>((uint64_t)(v6 + 4), v33);
      else
        v34 = 0;
      v35 = &v34[56 * v30];
      v36 = &v34[56 * v33];
      *(_DWORD *)v35 = a3;
      *((_DWORD *)v35 + 1) = v24;
      *(_QWORD *)&v37 = -1;
      *((_QWORD *)&v37 + 1) = -1;
      *(_OWORD *)(v35 + 8) = v37;
      *(_OWORD *)(v35 + 24) = v37;
      *((_QWORD *)v35 + 5) = -1;
      *((_QWORD *)v35 + 6) = 0;
      v28 = v35 + 56;
      v39 = (char *)v6[2];
      v38 = (char *)v6[3];
      if (v38 != v39)
      {
        do
        {
          v40 = *(_OWORD *)(v38 - 56);
          v41 = *(_OWORD *)(v38 - 40);
          v42 = *(_OWORD *)(v38 - 24);
          *((_QWORD *)v35 - 1) = *((_QWORD *)v38 - 1);
          *(_OWORD *)(v35 - 24) = v42;
          *(_OWORD *)(v35 - 40) = v41;
          *(_OWORD *)(v35 - 56) = v40;
          v35 -= 56;
          v38 -= 56;
        }
        while (v38 != v39);
        v38 = (char *)v6[2];
      }
      v6[2] = v35;
      v6[3] = v28;
      v6[4] = v36;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_DWORD *)v26 = a3;
      *(_DWORD *)(v26 + 4) = v24;
      *(_QWORD *)&v27 = -1;
      *((_QWORD *)&v27 + 1) = -1;
      *(_OWORD *)(v26 + 8) = v27;
      *(_OWORD *)(v26 + 24) = v27;
      *(_QWORD *)(v26 + 40) = -1;
      *(_QWORD *)(v26 + 48) = 0;
      v28 = (char *)(v26 + 56);
    }
    v6[3] = v28;
  }
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinKernelDescriptor *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + v5);
  *(_QWORD *)this += 4;
  v7 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)a2 + 4);
  if ((_DWORD)v7)
  {
    v6 = v7;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v8 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)a2 + 12);
    if ((_DWORD)v8)
    {
      v6 = v8;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      v9 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)a2 + 20);
      if ((_DWORD)v9)
      {
        v6 = v9;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        v10 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (_QWORD *)a2 + 4);
        if ((_DWORD)v10)
        {
          v6 = v10;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          v11 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (_QWORD *)a2 + 14);
          if ((_DWORD)v11)
          {
            v6 = v11;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
          else
          {
            v12 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 38);
            if ((_DWORD)v12)
            {
              v6 = v12;
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinSerial::Deserializer::Deserialize();
            }
            else
            {
              v13 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 41);
              if ((_DWORD)v13)
              {
                v6 = v13;
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
              }
              else
              {
                v14 = ZinSerial::Deserializer::Deserialize(this, (ZinKernelDescriptor *)((char *)a2 + 176));
                if ((_DWORD)v14)
                {
                  v6 = v14;
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinSerial::Deserializer::Deserialize();
                }
                else
                {
                  v17 = *(_QWORD *)this;
                  v16 = *((_QWORD *)this + 1);
                  if (v16 && (unint64_t)(v17 + 4) > *((_QWORD *)this + 2))
                  {
                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                      ZinSerial::Deserializer::Deserialize();
                    return 3;
                  }
                  *((_DWORD *)a2 + 50) = *(_DWORD *)(v16 + v17);
                  v19 = *(_QWORD *)this;
                  v18 = *((_QWORD *)this + 1);
                  v20 = *(_QWORD *)this + 4;
                  *(_QWORD *)this = v20;
                  if (v18 && (unint64_t)(v19 + 8) > *((_QWORD *)this + 2))
                  {
                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                      ZinSerial::Deserializer::Deserialize();
                    return 3;
                  }
                  *((_DWORD *)a2 + 51) = *(_DWORD *)(v18 + v20);
                  *(_QWORD *)this += 4;
                  v21 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 52);
                  if (!(_DWORD)v21)
                  {
                    v22 = *(_QWORD *)this;
                    v23 = *(_QWORD *)this + 8;
                    v24 = *((_QWORD *)this + 2);
                    if (v23 <= v24)
                    {
                      v25 = *((_QWORD *)this + 1);
                      v26 = *(_QWORD *)(v25 + v22);
                      *(_QWORD *)this = v23;
                      *((_QWORD *)a2 + 28) = v26;
                      if (v22 + 12 <= v24)
                      {
                        *((_DWORD *)a2 + 58) = *(_DWORD *)(v25 + v23);
                        v27 = *(_QWORD *)this;
                        v28 = *(_QWORD *)this + 4;
                        *(_QWORD *)this = v28;
                        v29 = v27 + 12;
                        v30 = *((_QWORD *)this + 2);
                        if (v27 + 12 <= v30)
                        {
                          v31 = *((_QWORD *)this + 1);
                          v32 = *(_QWORD *)(v31 + v28);
                          *(_QWORD *)this = v29;
                          *((_QWORD *)a2 + 30) = v32;
                          v33 = v27 + 20;
                          if (v27 + 20 <= v30)
                          {
                            v34 = *(_QWORD *)(v31 + v29);
                            *(_QWORD *)this = v33;
                            *((_QWORD *)a2 + 31) = v34;
                            v35 = v27 + 28;
                            if (v27 + 28 <= v30)
                            {
                              v36 = *(_QWORD *)(v31 + v33);
                              *(_QWORD *)this = v35;
                              *((_QWORD *)a2 + 32) = v36;
                              v37 = v27 + 36;
                              if (v27 + 36 <= v30)
                              {
                                v38 = *(_QWORD *)(v31 + v35);
                                *(_QWORD *)this = v37;
                                *((_QWORD *)a2 + 33) = v38;
                                if (v27 + 40 <= v30)
                                {
                                  v6 = 0;
                                  *((_DWORD *)a2 + 68) = *(_DWORD *)(v31 + v37);
                                  *(_QWORD *)this += 4;
                                  return v6;
                                }
                                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                  ZinSerial::Deserializer::Deserialize();
                              }
                              else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                              {
                                ZinSerial::Deserializer::Deserialize();
                              }
                            }
                            else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                            {
                              ZinSerial::Deserializer::Deserialize();
                            }
                          }
                          else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                          {
                            ZinSerial::Deserializer::Deserialize();
                          }
                        }
                        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        {
                          ZinSerial::Deserializer::Deserialize();
                        }
                      }
                      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                      {
                        ZinSerial::Deserializer::Deserialize();
                      }
                    }
                    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    {
                      ZinSerial::Deserializer::Deserialize();
                    }
                    return 3;
                  }
                  v6 = v21;
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinSerial::Deserializer::Deserialize();
                }
              }
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t ZinSerial::Deserializer::Deserialize(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    v5 = *a1;
    v4 = a1[1];
    v6 = *a1 + 4;
    *a1 = v6;
    if (v4 && v5 + 5 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *(_BYTE *)(a2 + 4) = *(_BYTE *)(v4 + v6);
      v7 = *a1;
      v8 = a1[1];
      v9 = *a1 + 1;
      *a1 = v9;
      if (!v8 || v7 + 2 <= (unint64_t)a1[2])
      {
        v10 = 0;
        *(_BYTE *)(a2 + 5) = *(_BYTE *)(v8 + v9);
        ++*a1;
        return v10;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    v4 = *a1;
    v5 = *a1 + 4;
    *a1 = v5;
    v6 = v4 + 12;
    v7 = a1[2];
    if (v4 + 12 <= v7)
    {
      v8 = a1[1];
      v9 = *(_QWORD *)(v8 + v5);
      *a1 = v6;
      *(_QWORD *)(a2 + 8) = v9;
      v10 = v4 + 20;
      if (v4 + 20 <= v7)
      {
        v11 = *(_QWORD *)(v8 + v6);
        *a1 = v10;
        *(_QWORD *)(a2 + 16) = v11;
        v12 = v4 + 28;
        if (v4 + 28 <= v7)
        {
          v13 = *(_QWORD *)(v8 + v10);
          *a1 = v12;
          *(_QWORD *)(a2 + 24) = v13;
          v14 = v4 + 36;
          if (v4 + 36 <= v7)
          {
            v15 = *(_QWORD *)(v8 + v12);
            *a1 = v14;
            *(_QWORD *)(a2 + 32) = v15;
            v16 = v4 + 44;
            if (v4 + 44 <= v7)
            {
              v17 = *(_QWORD *)(v8 + v14);
              *a1 = v16;
              *(_QWORD *)(a2 + 40) = v17;
              v18 = v4 + 52;
              if (v4 + 52 <= v7)
              {
                v19 = *(_QWORD *)(v8 + v16);
                *a1 = v18;
                *(_QWORD *)(a2 + 48) = v19;
                if (v4 + 53 <= v7)
                {
                  v20 = 0;
                  *(_BYTE *)(a2 + 56) = *(_BYTE *)(v8 + v18);
                  ++*a1;
                  return v20;
                }
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
              }
              else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 1 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *(_BYTE *)a2 = *(_BYTE *)(v2 + v3);
    v5 = *a1;
    v4 = a1[1];
    v6 = *a1 + 1;
    *a1 = v6;
    if (v4 && v5 + 5 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(v4 + v6);
      v7 = *a1;
      v8 = *a1 + 4;
      *a1 = v8;
      v9 = v7 + 12;
      v10 = a1[2];
      if (v7 + 12 <= v10)
      {
        v11 = a1[1];
        v12 = *(_QWORD *)(v11 + v8);
        *a1 = v9;
        *(_QWORD *)(a2 + 8) = v12;
        v13 = v7 + 20;
        if (v7 + 20 <= v10)
        {
          v14 = *(_QWORD *)(v11 + v9);
          *a1 = v13;
          *(_QWORD *)(a2 + 16) = v14;
          if (v7 + 21 <= v10)
          {
            *(_BYTE *)(a2 + 24) = *(_BYTE *)(v11 + v13);
            v15 = *a1;
            v16 = *a1 + 1;
            *a1 = v16;
            v17 = v15 + 9;
            v18 = a1[2];
            if (v15 + 9 <= v18)
            {
              v19 = a1[1];
              v20 = *(_QWORD *)(v19 + v16);
              *a1 = v17;
              *(_QWORD *)(a2 + 32) = v20;
              if (v15 + 10 <= v18)
              {
                *(_BYTE *)(a2 + 40) = *(_BYTE *)(v19 + v17);
                v21 = *a1;
                v22 = *a1 + 1;
                *a1 = v22;
                v23 = v21 + 9;
                v24 = a1[2];
                if (v21 + 9 <= v24)
                {
                  v25 = a1[1];
                  v26 = *(_QWORD *)(v25 + v22);
                  *a1 = v23;
                  *(_QWORD *)(a2 + 48) = v26;
                  if (v21 + 10 <= v24)
                  {
                    *(_BYTE *)(a2 + 56) = *(_BYTE *)(v25 + v23);
                    v28 = *a1;
                    v27 = a1[1];
                    v29 = *a1 + 1;
                    *a1 = v29;
                    if (v27 && v28 + 2 > (unint64_t)a1[2])
                    {
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        ZinSerial::Deserializer::Deserialize();
                    }
                    else
                    {
                      *(_BYTE *)(a2 + 57) = *(_BYTE *)(v27 + v29);
                      v30 = *a1;
                      v31 = *a1 + 1;
                      *a1 = v31;
                      v32 = v30 + 9;
                      v33 = a1[2];
                      if (v30 + 9 <= v33)
                      {
                        v34 = a1[1];
                        v35 = *(_QWORD *)(v34 + v31);
                        *a1 = v32;
                        *(_QWORD *)(a2 + 64) = v35;
                        if (v30 + 10 <= v33)
                        {
                          *(_BYTE *)(a2 + 72) = *(_BYTE *)(v34 + v32);
                          v37 = *a1;
                          v36 = a1[1];
                          v38 = *a1 + 1;
                          *a1 = v38;
                          if (v36 && v37 + 2 > (unint64_t)a1[2])
                          {
                            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                              ZinSerial::Deserializer::Deserialize();
                          }
                          else
                          {
                            *(_BYTE *)(a2 + 73) = *(_BYTE *)(v36 + v38);
                            v40 = *a1;
                            v39 = a1[1];
                            v41 = *a1 + 1;
                            *a1 = v41;
                            if (v39 && v40 + 2 > (unint64_t)a1[2])
                            {
                              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                ZinSerial::Deserializer::Deserialize();
                            }
                            else
                            {
                              *(_BYTE *)(a2 + 74) = *(_BYTE *)(v39 + v41);
                              v43 = *a1;
                              v42 = a1[1];
                              v44 = *a1 + 1;
                              *a1 = v44;
                              if (v42 && v43 + 5 > (unint64_t)a1[2])
                              {
                                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                  ZinSerial::Deserializer::Deserialize();
                              }
                              else
                              {
                                *(_DWORD *)(a2 + 76) = *(_DWORD *)(v42 + v44);
                                v46 = *a1;
                                v45 = a1[1];
                                v47 = *a1 + 4;
                                *a1 = v47;
                                if (v45 && v46 + 5 > (unint64_t)a1[2])
                                {
                                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                    ZinSerial::Deserializer::Deserialize();
                                }
                                else
                                {
                                  *(_BYTE *)(a2 + 80) = *(_BYTE *)(v45 + v47);
                                  v49 = *a1;
                                  v48 = a1[1];
                                  v50 = *a1 + 1;
                                  *a1 = v50;
                                  if (v48 && v49 + 2 > (unint64_t)a1[2])
                                  {
                                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                      ZinSerial::Deserializer::Deserialize();
                                  }
                                  else
                                  {
                                    *(_BYTE *)(a2 + 81) = *(_BYTE *)(v48 + v50);
                                    v52 = *a1;
                                    v51 = a1[1];
                                    v53 = *a1 + 1;
                                    *a1 = v53;
                                    if (v51 && v52 + 2 > (unint64_t)a1[2])
                                    {
                                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                        ZinSerial::Deserializer::Deserialize();
                                    }
                                    else
                                    {
                                      *(_BYTE *)(a2 + 82) = *(_BYTE *)(v51 + v53);
                                      v55 = *a1;
                                      v54 = a1[1];
                                      v56 = *a1 + 1;
                                      *a1 = v56;
                                      if (v54 && v55 + 5 > (unint64_t)a1[2])
                                      {
                                        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                          ZinSerial::Deserializer::Deserialize();
                                      }
                                      else
                                      {
                                        *(_DWORD *)(a2 + 84) = *(_DWORD *)(v54 + v56);
                                        v58 = *a1;
                                        v57 = a1[1];
                                        v59 = *a1 + 4;
                                        *a1 = v59;
                                        if (v57 && v58 + 8 > (unint64_t)a1[2])
                                        {
                                          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                            ZinSerial::Deserializer::Deserialize();
                                        }
                                        else
                                        {
                                          *(_DWORD *)(a2 + 88) = *(_DWORD *)(v57 + v59);
                                          v61 = *a1;
                                          v60 = a1[1];
                                          v62 = *a1 + 4;
                                          *a1 = v62;
                                          if (v60 && v61 + 8 > (unint64_t)a1[2])
                                          {
                                            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                              ZinSerial::Deserializer::Deserialize();
                                          }
                                          else
                                          {
                                            *(_DWORD *)(a2 + 88) = *(_DWORD *)(v60 + v62);
                                            v64 = *a1;
                                            v63 = a1[1];
                                            v65 = *a1 + 4;
                                            *a1 = v65;
                                            if (v63 && v64 + 8 > (unint64_t)a1[2])
                                            {
                                              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                                ZinSerial::Deserializer::Deserialize();
                                            }
                                            else
                                            {
                                              *(_DWORD *)(a2 + 96) = *(_DWORD *)(v63 + v65);
                                              v66 = *a1;
                                              v67 = *a1 + 4;
                                              *a1 = v67;
                                              v68 = v66 + 12;
                                              v69 = a1[2];
                                              if (v66 + 12 <= v69)
                                              {
                                                v70 = a1[1];
                                                v71 = *(_QWORD *)(v70 + v67);
                                                *a1 = v68;
                                                *(_QWORD *)(a2 + 104) = v71;
                                                if (v66 + 13 <= v69)
                                                {
                                                  *(_BYTE *)(a2 + 112) = *(_BYTE *)(v70 + v68);
                                                  v72 = *a1;
                                                  v73 = a1[1];
                                                  v74 = *a1 + 1;
                                                  *a1 = v74;
                                                  if (!v73 || v72 + 2 <= (unint64_t)a1[2])
                                                  {
                                                    v75 = 0;
                                                    *(_BYTE *)(a2 + 113) = *(_BYTE *)(v73 + v74);
                                                    ++*a1;
                                                    return v75;
                                                  }
                                                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                                    ZinSerial::Deserializer::Deserialize();
                                                }
                                                else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                                {
                                                  ZinSerial::Deserializer::Deserialize();
                                                }
                                              }
                                              else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                              {
                                                ZinSerial::Deserializer::Deserialize();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        {
                          ZinSerial::Deserializer::Deserialize();
                        }
                      }
                      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                      {
                        ZinSerial::Deserializer::Deserialize();
                      }
                    }
                  }
                  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  {
                    ZinSerial::Deserializer::Deserialize();
                  }
                }
                else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    v4 = *a1;
    v5 = a1[1];
    v6 = *a1 + 4;
    *a1 = v6;
    v7 = v4 + 12;
    if (!v5 || v7 <= a1[2])
    {
      v8 = 0;
      v9 = *(_QWORD *)(v5 + v6);
      *a1 = v7;
      *(_QWORD *)(a2 + 8) = v9;
      return v8;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *a1;
  v4 = a1[1];
  if (v4 && v5 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + v5);
  v7 = *a1;
  v6 = a1[1];
  v8 = *a1 + 4;
  *a1 = v8;
  if (v6 && v7 + 8 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(v6 + v8);
  *a1 += 4;
  v9 = ZinSerial::BufferReader::Read(a1, (std::string *)(a2 + 8));
  if ((_DWORD)v9)
  {
    v10 = v9;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v11 = *a1;
    v12 = *a1 + 8;
    v13 = a1[2];
    if (v12 > v13)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    v14 = a1[1];
    v15 = *(_QWORD *)(v14 + v11);
    *a1 = v12;
    *(_QWORD *)(a2 + 32) = v15;
    v16 = v11 + 16;
    if (v11 + 16 > v13)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    v17 = *(_QWORD *)(v14 + v12);
    *a1 = v16;
    *(_QWORD *)(a2 + 40) = v17;
    v18 = v11 + 24;
    if (v18 > v13)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    v20 = *(_QWORD *)(v14 + v16);
    *a1 = v18;
    *(_QWORD *)(a2 + 48) = v20;
    v21 = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinLiveRange *)(a2 + 56));
    if ((_DWORD)v21)
    {
      v10 = v21;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      v22 = ZinSerial::Deserializer::Deserialize<ZinTensorDescriptor>((unint64_t *)a1, a2 + 72);
      if ((_DWORD)v22)
      {
        v10 = v22;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        v25 = 0;
        v23 = ZinSerial::Deserializer::Deserialize<AddrWrapInfo,int,int>((unint64_t *)a1, a2 + 288, (int *)&v25 + 1, (int *)&v25);
        if ((_DWORD)v23)
        {
          v10 = v23;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          v24 = ZinSerial::Deserializer::Deserialize<StaticWrapInfo>((unint64_t *)a1, a2 + 312);
          if ((_DWORD)v24)
          {
            v10 = v24;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
          else
          {
            v10 = ZinSerial::Deserializer::Deserialize<unsigned int>((unint64_t *)a1, a2 + 344);
            if ((_DWORD)v10 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
        }
      }
    }
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 1 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *(_BYTE *)a2 = *(_BYTE *)(v2 + v3);
    v5 = *a1;
    v4 = a1[1];
    v6 = *a1 + 1;
    *a1 = v6;
    if (v4 && v5 + 2 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *(_BYTE *)(a2 + 1) = *(_BYTE *)(v4 + v6);
      v8 = *a1;
      v7 = a1[1];
      v9 = *a1 + 1;
      *a1 = v9;
      if (v7 && v8 + 5 > (unint64_t)a1[2])
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(v7 + v9);
        v10 = *a1;
        v11 = *a1 + 4;
        *a1 = v11;
        v12 = v10 + 12;
        v13 = a1[2];
        if (v10 + 12 <= v13)
        {
          v14 = a1[1];
          v15 = *(_QWORD *)(v14 + v11);
          *a1 = v12;
          *(_QWORD *)(a2 + 8) = v15;
          v16 = v10 + 20;
          if (v10 + 20 <= v13)
          {
            v17 = *(_QWORD *)(v14 + v12);
            *a1 = v16;
            *(_QWORD *)(a2 + 16) = v17;
            v18 = v10 + 28;
            if (v10 + 28 <= v13)
            {
              v19 = *(_QWORD *)(v14 + v16);
              *a1 = v18;
              *(_QWORD *)(a2 + 24) = v19;
              v20 = v10 + 36;
              if (v10 + 36 <= v13)
              {
                v21 = 0;
                v23 = *(_QWORD *)(v14 + v18);
                *a1 = v20;
                *(_QWORD *)(a2 + 32) = v23;
                return v21;
              }
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinSerial::Deserializer::Deserialize();
            }
            else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    v5 = *a1;
    v4 = a1[1];
    v6 = *a1 + 4;
    *a1 = v6;
    if (v4 && v5 + 8 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(v4 + v6);
      v7 = *a1;
      v8 = *a1 + 4;
      *a1 = v8;
      v9 = v7 + 12;
      v10 = a1[2];
      if (v7 + 12 <= v10)
      {
        v11 = a1[1];
        v12 = *(_QWORD *)(v11 + v8);
        *a1 = v9;
        *(_QWORD *)(a2 + 8) = v12;
        v13 = v7 + 20;
        if (v7 + 20 <= v10)
        {
          v14 = *(_QWORD *)(v11 + v9);
          *a1 = v13;
          *(_QWORD *)(a2 + 16) = v14;
          v15 = v7 + 28;
          if (v7 + 28 <= v10)
          {
            v16 = *(_QWORD *)(v11 + v13);
            *a1 = v15;
            *(_QWORD *)(a2 + 24) = v16;
            v17 = v7 + 36;
            if (v7 + 36 <= v10)
            {
              v18 = *(_QWORD *)(v11 + v15);
              *a1 = v17;
              *(_QWORD *)(a2 + 32) = v18;
              v19 = v7 + 44;
              if (v7 + 44 <= v10)
              {
                v20 = *(_QWORD *)(v11 + v17);
                *a1 = v19;
                *(_QWORD *)(a2 + 40) = v20;
                v21 = v7 + 52;
                if (v7 + 52 <= v10)
                {
                  v22 = 0;
                  v24 = *(_QWORD *)(v11 + v19);
                  *a1 = v21;
                  *(_QWORD *)(a2 + 48) = v24;
                  return v22;
                }
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
              }
              else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return 3;
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a1;
  v3 = *a1 + 8;
  v4 = a1[2];
  if (v3 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v7 = a1[1];
  v8 = *(_QWORD *)(v7 + v2);
  *a1 = v3;
  *(_QWORD *)a2 = v8;
  v9 = v2 + 16;
  if (v9 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v12 = *(_QWORD *)(v7 + v3);
  *a1 = v9;
  *(_QWORD *)(a2 + 8) = v12;
  v17 = 0;
  v13 = ZinSerial::Deserializer::Deserialize<ZinOcgKernelData,int,int>(a1, (void **)(a2 + 16), (_DWORD *)&v17 + 1, (int *)&v17);
  if (!(_DWORD)v13)
  {
    v14 = a1[1];
    v15 = *a1 + 8;
    if (!v14 || v15 <= a1[2])
    {
      v10 = 0;
      v16 = *(_QWORD *)(v14 + *a1);
      *a1 = v15;
      *(_QWORD *)(a2 + 40) = v16;
      return v10;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v10 = v13;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinSerial::Deserializer::Deserialize();
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    v4 = *a1;
    v5 = a1[1];
    v6 = *a1 + 4;
    *a1 = v6;
    if (!v5 || v4 + 5 <= (unint64_t)a1[2])
    {
      v7 = 0;
      *(_BYTE *)(a2 + 4) = *(_BYTE *)(v5 + v6);
      ++*a1;
      return v7;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 0;
  v3 = *a1;
  while (1)
  {
    v4 = a1[1];
    if (v4)
    {
      if (v3 + 1 > (unint64_t)a1[2])
        break;
    }
    *(_BYTE *)(a2 + v2) = *(_BYTE *)(v4 + v3);
    v3 = *a1 + 1;
    *a1 = v3;
    if (++v2 == 144)
      return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinSerial::Deserializer::Deserialize();
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    v4 = *a1;
    v5 = a1[1];
    v6 = *a1 + 4;
    *a1 = v6;
    v7 = v4 + 12;
    if (!v5 || v7 <= a1[2])
    {
      v8 = 0;
      v9 = *(_QWORD *)(v5 + v6);
      *a1 = v7;
      *(_QWORD *)(a2 + 8) = v9;
      return v8;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 8 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_QWORD *)a2 = *(_QWORD *)(v2 + v3);
  v5 = *a1;
  v4 = a1[1];
  v6 = *a1 + 8;
  *a1 = v6;
  v7 = v5 + 16;
  if (v4 && v7 > a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v9 = *(_QWORD *)(v4 + v6);
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  v8 = ZinSerial::Deserializer::Deserialize<ZinMirUnitBasicBlock::EdgeInfo>(a1, (void **)(a2 + 16));
  if ((_DWORD)v8 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinSerial::Deserializer::Deserialize();
  return v8;
}

uint64_t ZinSerial::Deserializer::Deserialize(unint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = ZinSerial::Deserializer::Deserialize(a1, a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v5 = ZinSerial::Deserializer::Deserialize(a1, a2 + 5);
    if ((_DWORD)v5 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v5;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *a1;
  v3 = *a1 + 8;
  v4 = a1[2];
  if (v3 <= v4)
  {
    v5 = a1[1];
    v6 = *(_QWORD *)(v5 + v2);
    *a1 = v3;
    *a2 = v6;
    v7 = v2 + 16;
    if (v2 + 16 <= v4)
    {
      v8 = *(_QWORD *)(v5 + v3);
      *a1 = v7;
      a2[1] = v8;
      v9 = v2 + 24;
      if (v2 + 24 <= v4)
      {
        v10 = *(_QWORD *)(v5 + v7);
        *a1 = v9;
        a2[2] = v10;
        v11 = v2 + 32;
        if (v2 + 32 <= v4)
        {
          v12 = *(_QWORD *)(v5 + v9);
          *a1 = v11;
          a2[3] = v12;
          v13 = v2 + 40;
          if (v2 + 40 <= v4)
          {
            v14 = 0;
            v16 = *(_QWORD *)(v5 + v11);
            *a1 = v13;
            a2[4] = v16;
            return v14;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *a1;
  v3 = *a1 + 8;
  v4 = a1[2];
  if (v3 <= v4)
  {
    v5 = a1[1];
    v6 = *(_QWORD *)(v5 + v2);
    *a1 = v3;
    *a2 = v6;
    v7 = v2 + 16;
    if (v2 + 16 <= v4)
    {
      v8 = *(_QWORD *)(v5 + v3);
      *a1 = v7;
      a2[1] = v8;
      v9 = v2 + 24;
      if (v2 + 24 <= v4)
      {
        v10 = *(_QWORD *)(v5 + v7);
        *a1 = v9;
        a2[2] = v10;
        v11 = v2 + 32;
        if (v2 + 32 <= v4)
        {
          v12 = *(_QWORD *)(v5 + v9);
          *a1 = v11;
          a2[3] = v12;
          v13 = v2 + 40;
          if (v2 + 40 <= v4)
          {
            v14 = 0;
            v16 = *(_QWORD *)(v5 + v11);
            *a1 = v13;
            a2[4] = v16;
            return v14;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = *a1;
  v3 = *a1 + 8;
  v4 = a1[2];
  if (v3 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v6 = a1[1];
  v7 = *(_QWORD *)(v6 + v2);
  *a1 = v3;
  *a2 = v7;
  v8 = v2 + 16;
  if (v2 + 16 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v9 = *(_QWORD *)(v6 + v3);
  *a1 = v8;
  a2[1] = v9;
  v10 = v2 + 24;
  if (v10 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  result = 0;
  v12 = *(_QWORD *)(v6 + v8);
  *a1 = v10;
  a2[2] = v12;
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *a1;
  v3 = *a1 + 8;
  v4 = a1[2];
  if (v3 <= v4)
  {
    v5 = a1[1];
    v6 = *(_QWORD *)(v5 + v2);
    *a1 = v3;
    *a2 = v6;
    v7 = v2 + 16;
    if (v2 + 16 <= v4)
    {
      v8 = *(_QWORD *)(v5 + v3);
      *a1 = v7;
      a2[1] = v8;
      v9 = v2 + 24;
      if (v2 + 24 <= v4)
      {
        v10 = *(_QWORD *)(v5 + v7);
        *a1 = v9;
        a2[2] = v10;
        v11 = v2 + 32;
        if (v2 + 32 <= v4)
        {
          v12 = *(_QWORD *)(v5 + v9);
          *a1 = v11;
          a2[3] = v12;
          v13 = v2 + 40;
          if (v2 + 40 <= v4)
          {
            v14 = 0;
            v16 = *(_QWORD *)(v5 + v11);
            *a1 = v13;
            a2[4] = v16;
            return v14;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    v5 = *a1;
    v4 = a1[1];
    v6 = *a1 + 4;
    *a1 = v6;
    if (v4 && v5 + 8 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      a2[1] = *(_DWORD *)(v4 + v6);
      v7 = *a1;
      v8 = a1[1];
      v9 = *a1 + 4;
      *a1 = v9;
      if (!v8 || v7 + 8 <= (unint64_t)a1[2])
      {
        v10 = 0;
        a2[2] = *(_DWORD *)(v8 + v9);
        *a1 += 4;
        return v10;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    v5 = *a1;
    v4 = a1[1];
    v6 = *a1 + 4;
    *a1 = v6;
    if (v4 && v5 + 8 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      a2[1] = *(_DWORD *)(v4 + v6);
      v8 = *a1;
      v7 = a1[1];
      v9 = *a1 + 4;
      *a1 = v9;
      if (v7 && v8 + 8 > (unint64_t)a1[2])
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        a2[2] = *(_DWORD *)(v7 + v9);
        v10 = *a1;
        v11 = a1[1];
        v12 = *a1 + 4;
        *a1 = v12;
        if (!v11 || v10 + 8 <= (unint64_t)a1[2])
        {
          v13 = 0;
          a2[3] = *(_DWORD *)(v11 + v12);
          *a1 += 4;
          return v13;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    v4 = *a1;
    v5 = a1[1];
    v6 = *a1 + 4;
    *a1 = v6;
    if (!v5 || v4 + 8 <= (unint64_t)a1[2])
    {
      v7 = 0;
      a2[1] = *(_DWORD *)(v5 + v6);
      *a1 += 4;
      return v7;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    *a1 += 4;
    v4 = ZinSerial::Deserializer::Deserialize(a1, a2 + 1);
    if ((_DWORD)v4 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    v4 = *a1;
    v5 = a1[1];
    v6 = *a1 + 4;
    *a1 = v6;
    if (!v5 || v4 + 8 <= (unint64_t)a1[2])
    {
      v7 = 0;
      a2[1] = *(_DWORD *)(v5 + v6);
      *a1 += 4;
      return v7;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrPadding *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    v5 = *(_QWORD *)this;
    v4 = *((_QWORD *)this + 1);
    v6 = *(_QWORD *)this + 4;
    *(_QWORD *)this = v6;
    if (v4 && (unint64_t)(v5 + 8) > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *((_DWORD *)a2 + 1) = *(_DWORD *)(v4 + v6);
      v8 = *(_QWORD *)this;
      v7 = *((_QWORD *)this + 1);
      v9 = *(_QWORD *)this + 4;
      *(_QWORD *)this = v9;
      if (v7 && (unint64_t)(v8 + 8) > *((_QWORD *)this + 2))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        *((_DWORD *)a2 + 2) = *(_DWORD *)(v7 + v9);
        v11 = *(_QWORD *)this;
        v10 = *((_QWORD *)this + 1);
        v12 = *(_QWORD *)this + 4;
        *(_QWORD *)this = v12;
        if (v10 && (unint64_t)(v11 + 8) > *((_QWORD *)this + 2))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          *((_DWORD *)a2 + 3) = *(_DWORD *)(v10 + v12);
          v14 = *(_QWORD *)this;
          v13 = *((_QWORD *)this + 1);
          v15 = *(_QWORD *)this + 4;
          *(_QWORD *)this = v15;
          if (v13 && (unint64_t)(v14 + 8) > *((_QWORD *)this + 2))
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
          else
          {
            *((_DWORD *)a2 + 4) = *(_DWORD *)(v13 + v15);
            v16 = *(_QWORD *)this;
            v17 = *((_QWORD *)this + 1);
            v18 = *(_QWORD *)this + 4;
            *(_QWORD *)this = v18;
            if (!v17 || (unint64_t)(v16 + 8) <= *((_QWORD *)this + 2))
            {
              v19 = 0;
              *((_DWORD *)a2 + 5) = *(_DWORD *)(v17 + v18);
              *(_QWORD *)this += 4;
              return v19;
            }
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
        }
      }
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t result;
  int v9;

  v2 = *a1;
  v3 = *a1 + 4;
  v4 = a1[2];
  if (v3 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v5 = a1[1];
  v6 = *(_DWORD *)(v5 + v2);
  *a1 = v3;
  v7 = v2 + 5;
  if (v7 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v9 = *(unsigned __int8 *)(v5 + v3);
  *a1 = v7;
  result = 0;
  if (v9)
  {
    *(_BYTE *)(a2 + 4) = 1;
    *(_DWORD *)a2 = 1065353216;
  }
  else
  {
    *(_DWORD *)a2 = v6;
    *(_BYTE *)(a2 + 4) = 0;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = ZinSerial::Deserializer::Deserialize(a1, a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return v5;
  }
  v7 = *a1;
  v6 = a1[1];
  if (v6 && v7 + 4 > a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(v6 + v7);
  v9 = *a1;
  v8 = a1[1];
  v10 = *a1 + 4;
  *a1 = v10;
  if (v8 && v9 + 5 > a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_BYTE *)(a2 + 92) = *(_BYTE *)(v8 + v10);
  ++*a1;
  v11 = ZinSerial::Deserializer::Deserialize(a1, a2 + 96);
  if (!(_DWORD)v11)
  {
    v13 = *a1;
    v12 = a1[1];
    if (!v12 || v13 + 4 <= a1[2])
    {
      v5 = 0;
      *(_DWORD *)(a2 + 104) = *(_DWORD *)(v12 + v13);
      *a1 += 4;
      return v5;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v5 = v11;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinSerial::Deserializer::Deserialize();
  return v5;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = ZinSerial::Deserializer::Deserialize(a1, (_QWORD *)a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v6 = ZinSerial::Deserializer::Deserialize((uint64_t *)a1, (_DWORD *)(a2 + 24));
    if ((_DWORD)v6)
    {
      v5 = v6;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      v7 = ZinSerial::Deserializer::Deserialize((uint64_t *)a1, (_DWORD *)(a2 + 36));
      if ((_DWORD)v7)
      {
        v5 = v7;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        v8 = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinIrPadding *)(a2 + 48));
        if ((_DWORD)v8)
        {
          v5 = v8;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          v9 = ZinSerial::Deserializer::Deserialize((uint64_t *)a1, (_DWORD *)(a2 + 72));
          if ((_DWORD)v9)
          {
            v5 = v9;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
          else
          {
            v11 = *a1;
            v10 = a1[1];
            if (v10 && v11 + 4 > a1[2])
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinSerial::Deserializer::Deserialize();
              return 3;
            }
            else
            {
              v5 = 0;
              *(_DWORD *)(a2 + 84) = *(_DWORD *)(v10 + v11);
              *a1 += 4;
            }
          }
        }
      }
    }
  }
  return v5;
}

{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *a1;
  v4 = a1[1];
  if (v4 && v5 + 1 > a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_BYTE *)a2 = *(_BYTE *)(v4 + v5);
  ++*a1;
  v7 = ZinSerial::Deserializer::Deserialize<unsigned long>(a1, a2 + 8);
  if ((_DWORD)v7)
  {
    v6 = v7;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v8 = ZinSerial::Deserializer::Deserialize<unsigned long>(a1, a2 + 24);
    if ((_DWORD)v8)
    {
      v6 = v8;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      v9 = a1[1];
      v10 = *a1 + 8;
      if (v9 && v10 > a1[2])
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
        return 3;
      }
      v11 = *(_QWORD *)(v9 + *a1);
      *a1 = v10;
      *(_QWORD *)(a2 + 40) = v11;
      v6 = ZinSerial::Deserializer::Deserialize<long>(a1, a2 + 48);
      if ((_DWORD)v6 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
  }
  return v6;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int v15;

  v2 = *a1;
  v3 = *a1 + 8;
  v4 = a1[2];
  if (v3 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + v2);
  *a1 = v3;
  v7 = v2 + 16;
  if (v2 + 16 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v8 = *(_QWORD *)(v5 + v3);
  *a1 = v7;
  v9 = v2 + 24;
  if (v2 + 24 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v10 = *(_QWORD *)(v5 + v7);
  *a1 = v9;
  v11 = v2 + 32;
  if (v2 + 32 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v12 = *(_QWORD *)(v5 + v9);
  *a1 = v11;
  v13 = v2 + 33;
  if (v2 + 33 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v15 = *(unsigned __int8 *)(v5 + v11);
  *a1 = v13;
  result = 0;
  if (!*(_BYTE *)(a2 + 33))
  {
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v12;
    *(_BYTE *)(a2 + 32) = v15 != 0;
  }
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = *a1;
  v3 = *a1 + 8;
  v4 = a1[2];
  if (v3 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + v2);
  *a1 = v3;
  v7 = v2 + 16;
  if (v7 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v9 = *(_QWORD *)(v5 + v3);
  *a1 = v7;
  result = 0;
  if (!*(_BYTE *)(a2 + 16))
  {
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;

  v4 = ZinSerial::Deserializer::Deserialize<ZinMirDmaConfig::DramAccess,2ul>(a1, (void *)a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v5 = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinMirDmaConfig::DramAccess *)(a2 + 192));
    if ((_DWORD)v5 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v5;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a1;
  v4 = a1[1];
  if (v4 && v5 + 4 > a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + v5);
  v7 = *a1;
  v6 = a1[1];
  v8 = *a1 + 4;
  *a1 = v8;
  if (v6 && v7 + 5 > a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(v6 + v8);
  ++*a1;
  v10 = ZinSerial::Deserializer::Deserialize<unsigned char>(a1, a2 + 5);
  if ((_DWORD)v10)
  {
    v9 = v10;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v9 = ZinSerial::Deserializer::Deserialize<unsigned char>(a1, a2 + 7);
    if ((_DWORD)v9 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v9;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrPoolingInfo *a2)
{
  uint64_t v2;

  v2 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (uint64_t)a2 + 16);
  if ((_DWORD)v2 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinSerial::Deserializer::Deserialize();
  return v2;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrBroadcastInfo *a2)
{
  uint64_t v2;

  v2 = ZinSerial::Deserializer::Deserialize<ZinIrDimension,unsigned long>((unint64_t *)this, (uint64_t)a2 + 16);
  if ((_DWORD)v2 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinSerial::Deserializer::Deserialize();
  return v2;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinIrDimension,unsigned long>(unint64_t *a1, uint64_t a2)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;

  if (*(_QWORD *)(a2 + 24))
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(_DWORD *)(v5 + *a1);
  *a1 = v6;
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__rehash<true>(a2, vcvtps_u32_f32((float)v7 / *(float *)(a2 + 32)));
  if (v7)
  {
    while (1)
    {
      v9 = *a1;
      v8 = a1[1];
      v10 = a1[2];
      v11 = *a1 + 4;
      if (v8 && v11 > v10)
        break;
      v13 = *(_DWORD *)(v8 + v9);
      *a1 = v11;
      v14 = v9 + 12;
      if (v14 > v10)
        break;
      v15 = *(_QWORD *)(v8 + v11);
      *a1 = v14;
      LODWORD(v16) = v13;
      *((_QWORD *)&v16 + 1) = v15;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>(a2, (int *)&v16, &v16);
      if (!--v7)
        return 0;
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrTransposeInfo *a2)
{
  uint64_t v3;
  void *v4;
  void *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  void *__p;
  void *v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  v3 = ZinSerial::Deserializer::Deserialize<DimensionMapping>((uint64_t *)this, (char **)&__p);
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)&v6, (uint64_t)&__p);
    v4 = (void *)*((_QWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v7;
    if (v4)
    {
      *((_QWORD *)a2 + 3) = v4;
      operator delete(v4);
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
    }
    *((_OWORD *)a2 + 1) = v8;
    *((_QWORD *)a2 + 4) = v9;
    v9 = 0;
    v8 = 0uLL;
    v6 = &unk_24C01E1F0;
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v6);
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_206ECBD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize<DimensionMapping>(uint64_t *a1, char **a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a2[1] != *a2)
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<ZinIrOpLayer *>::reserve((void **)a2, v7);
  if (!(_DWORD)v7)
    return 0;
  v8 = 0;
  while (1)
  {
    v21 = 0;
    result = ZinSerial::Deserializer::Deserialize(a1, &v21);
    if ((_DWORD)result)
      break;
    v10 = a2[1];
    v9 = (unint64_t)a2[2];
    if ((unint64_t)v10 >= v9)
    {
      v11 = (v10 - *a2) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v13 = v9 - (_QWORD)*a2;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v14);
      else
        v15 = 0;
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v21;
      v17 = v16 + 8;
      v19 = *a2;
      v18 = a2[1];
      if (v18 != *a2)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *((_QWORD *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        v18 = *a2;
      }
      *a2 = v16;
      a2[1] = v17;
      a2[2] = &v15[8 * v14];
      if (v18)
        operator delete(v18);
      a2[1] = v17;
    }
    else
    {
      *(_QWORD *)v10 = v21;
      a2[1] = v10 + 8;
    }
    if (++v8 == (_DWORD)v7)
      return 0;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<long>(unint64_t *a1, uint64_t a2)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<unsigned long>::reserve((void **)a2, v7);
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (1)
    {
      v9 = a1[1];
      v10 = *a1 + 8;
      if (v9)
      {
        if (v10 > a1[2])
          break;
      }
      v11 = *(_QWORD *)(v9 + *a1);
      *a1 = v10;
      v13 = *(_QWORD **)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *(_QWORD **)a2;
        v16 = ((uint64_t)v13 - *(_QWORD *)a2) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a2 + 16, v19);
          v15 = *(_QWORD **)a2;
          v13 = *(_QWORD **)(a2 + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v11;
        v14 = v21 + 8;
        while (v13 != v15)
        {
          v22 = *--v13;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        *(_QWORD *)a2 = v21;
        *(_QWORD *)(a2 + 8) = v14;
        *(_QWORD *)(a2 + 16) = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v13 = v11;
        v14 = v13 + 1;
      }
      *(_QWORD *)(a2 + 8) = v14;
      if (++v8 == (_DWORD)v7)
        return 0;
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinMirL2Config::NE *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  char v24;

  v23 = 0;
  v24 = 0;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)this + 8;
  v4 = *((_QWORD *)this + 2);
  if (v3 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v5 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v5 + v2);
  *(_QWORD *)this = v3;
  v7 = v2 + 16;
  if (v2 + 16 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v8 = *(_QWORD *)(v5 + v3);
  *(_QWORD *)this = v7;
  v9 = v2 + 24;
  if (v2 + 24 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v10 = *(_QWORD *)(v5 + v7);
  *(_QWORD *)this = v9;
  v11 = v2 + 28;
  if (v2 + 28 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v12 = *(_DWORD *)(v5 + v9);
  *(_QWORD *)this = v11;
  v13 = v2 + 29;
  if (v2 + 29 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v14 = *(unsigned __int8 *)(v5 + v11);
  *(_QWORD *)this = v13;
  v15 = v2 + 30;
  if (v15 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v19 = *(unsigned __int8 *)(v5 + v13);
  *(_QWORD *)this = v15;
  v20 = ZinSerial::Deserializer::Deserialize(this, (MirInfoChannelAssignment *)v21);
  if ((_DWORD)v20)
  {
    v16 = v20;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    if (!*((_BYTE *)a2 + 30))
    {
      *(_QWORD *)a2 = v6;
      *((_QWORD *)a2 + 1) = v8;
      *((_QWORD *)a2 + 2) = v10;
    }
    ZinMirL2Config::NE::SetSmallSourceMode((uint64_t)a2, v12);
    *((_BYTE *)a2 + 28) = v14 != 0;
    *((_BYTE *)a2 + 32) = v19 != 0;
    ZinMirL2Config::NE::SetChannelAssignment(a2, (const MirInfoChannelAssignment *)v21);
    return 0;
  }
  return v16;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, MirInfoChannelAssignment *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v14;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)this + 8;
  v4 = *((_QWORD *)this + 2);
  if (v3 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(v6 + v2);
  *(_QWORD *)this = v3;
  v8 = v2 + 16;
  if (v2 + 16 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v9 = *(_QWORD *)(v6 + v3);
  *(_QWORD *)this = v8;
  v10 = v2 + 17;
  if (v2 + 17 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v11 = *(unsigned __int8 *)(v6 + v8);
  *(_QWORD *)this = v10;
  v12 = v2 + 25;
  if (v12 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v14 = *(_QWORD *)(v6 + v10);
  *(_QWORD *)this = v12;
  MirInfoChannelAssignment::SetNumNeededNEs(a2, v7);
  MirInfoChannelAssignment::SetOCGSize(a2, v9);
  MirInfoChannelAssignment::SetFatTileEnable(a2, v11 != 0);
  MirInfoChannelAssignment::SetWUStackLog2(a2, v14);
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize(unint64_t *a1, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 4 > a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    *a1 += 4;
    v4 = ZinSerial::Deserializer::Deserialize<ZinDependencyOffsetDim,long>(a1, (uint64_t)(a2 + 2));
    if ((_DWORD)v4 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v4;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinDependencyOffsetDim,long>(unint64_t *a1, uint64_t a2)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;

  if (*(_QWORD *)(a2 + 24))
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(_DWORD *)(v5 + *a1);
  *a1 = v6;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a2, vcvtps_u32_f32((float)v7 / *(float *)(a2 + 32)));
  if (v7)
  {
    while (1)
    {
      v9 = *a1;
      v8 = a1[1];
      v10 = a1[2];
      v11 = *a1 + 4;
      if (v8 && v11 > v10)
        break;
      v13 = *(_DWORD *)(v8 + v9);
      *a1 = v11;
      v14 = v9 + 12;
      if (v14 > v10)
        break;
      v15 = *(_QWORD *)(v8 + v11);
      *a1 = v14;
      LODWORD(v16) = v13;
      *((_QWORD *)&v16 + 1) = v15;
      std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__emplace_unique_key_args<ZinDependencyOffsetDim,std::pair<ZinDependencyOffsetDim const,long> const&>(a2, (int *)&v16, &v16);
      if (!--v7)
        return 0;
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinMirL2Config *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _OWORD v31[2];
  int v32;
  int v33;
  _OWORD v34[2];
  int v35;
  int v36;
  _OWORD v37[2];
  int v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  uint64_t v56;

  v51 = 0;
  v56 = 0;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0;
  v45 = 0;
  v50 = 0;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0;
  v39 = 0;
  v44 = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0;
  v36 = 0;
  memset(v37, 0, sizeof(v37));
  v38 = 1065353216;
  v33 = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 1065353216;
  v30 = 0;
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  v4 = ZinSerial::Deserializer::Deserialize(this, a2);
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    goto LABEL_33;
  }
  v5 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (uint64_t)a2 + 80);
  if ((_DWORD)v5)
  {
    v4 = v5;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    goto LABEL_33;
  }
  v6 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (uint64_t)a2 + 120);
  if ((_DWORD)v6)
  {
    v4 = v6;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    goto LABEL_33;
  }
  v8 = *(_QWORD *)this;
  v7 = *((_QWORD *)this + 1);
  if (v7 && (unint64_t)(v8 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
LABEL_32:
    v4 = 3;
    goto LABEL_33;
  }
  *((_DWORD *)a2 + 36) = *(_DWORD *)(v7 + v8);
  v9 = *(_QWORD *)this;
  v10 = *(_QWORD *)this + 4;
  *(_QWORD *)this = v10;
  v11 = v9 + 12;
  v12 = *((_QWORD *)this + 2);
  if (v9 + 12 > v12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    goto LABEL_32;
  }
  v13 = *((_QWORD *)this + 1);
  v14 = *(_QWORD *)(v13 + v10);
  *(_QWORD *)this = v11;
  *((_QWORD *)a2 + 19) = v14;
  v15 = v9 + 20;
  if (v9 + 20 > v12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    goto LABEL_32;
  }
  v16 = *(_QWORD *)(v13 + v11);
  *(_QWORD *)this = v15;
  *((_QWORD *)a2 + 20) = v16;
  v17 = v9 + 28;
  if (v9 + 28 > v12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    goto LABEL_32;
  }
  v18 = *(_QWORD *)(v13 + v15);
  *(_QWORD *)this = v17;
  *((_QWORD *)a2 + 21) = v18;
  v19 = v9 + 36;
  if (v9 + 36 > v12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v13 + v17);
  *(_QWORD *)this = v19;
  *((_QWORD *)a2 + 22) = v20;
  v21 = v9 + 44;
  if (v9 + 44 > v12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    goto LABEL_32;
  }
  v22 = *(_QWORD *)(v13 + v19);
  *(_QWORD *)this = v21;
  *((_QWORD *)a2 + 23) = v22;
  if (v9 + 45 > v12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    goto LABEL_32;
  }
  *((_BYTE *)a2 + 192) = *(_BYTE *)(v13 + v21);
  ++*(_QWORD *)this;
  v24 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_BYTE *)a2 + 208);
  if ((_DWORD)v24)
  {
    v4 = v24;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v26 = *(_QWORD *)this;
    v25 = *((_QWORD *)this + 1);
    if (v25 && (unint64_t)(v26 + 1) > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      goto LABEL_32;
    }
    *((_BYTE *)a2 + 224) = *(_BYTE *)(v25 + v26);
    ++*(_QWORD *)this;
    v27 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)&v51);
    if ((_DWORD)v27)
    {
      v4 = v27;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      v28 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)&v45);
      if ((_DWORD)v28)
      {
        v4 = v28;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        v29 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)&v39);
        if ((_DWORD)v29)
        {
          v4 = v29;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          v4 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, &v36);
          if ((_DWORD)v4)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
          else
          {
            v4 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, &v33);
            if ((_DWORD)v4)
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinSerial::Deserializer::Deserialize();
            }
            else
            {
              v4 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, &v30);
              if ((_DWORD)v4)
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
              }
              else
              {
                ZinMirL2Config::SetTileSrc((uint64_t)a2, (uint64_t)&v51, 0);
                ZinMirL2Config::SetTileSrc((uint64_t)a2, (uint64_t)&v45, 1);
                ZinMirL2Config::SetTileSrc((uint64_t)a2, (uint64_t)&v39, 2);
                ZinMirL2Config::SetL2SrcDep(a2, (uint64_t)&v36, 0);
                ZinMirL2Config::SetL2SrcDep(a2, (uint64_t)&v33, 1);
                ZinMirL2Config::SetL2SrcDep(a2, (uint64_t)&v30, 2);
                v4 = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_33:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v31);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v34);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v37);
  return v4;
}

void sub_206ECCE94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Deserializer::Deserialize(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = *a1;
  v2 = a1[1];
  if (v2 && v3 + 1 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *a2 = *(_BYTE *)(v2 + v3);
    v5 = *a1;
    v4 = a1[1];
    v6 = *a1 + 1;
    *a1 = v6;
    if (v4 && v5 + 2 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      a2[1] = *(_BYTE *)(v4 + v6);
      v8 = *a1;
      v7 = a1[1];
      v9 = *a1 + 1;
      *a1 = v9;
      if (v7 && v8 + 2 > (unint64_t)a1[2])
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        a2[2] = *(_BYTE *)(v7 + v9);
        v11 = *a1;
        v10 = a1[1];
        v12 = *a1 + 1;
        *a1 = v12;
        if (v10 && v11 + 2 > (unint64_t)a1[2])
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          a2[3] = *(_BYTE *)(v10 + v12);
          v14 = *a1;
          v13 = a1[1];
          v15 = *a1 + 1;
          *a1 = v15;
          if (v13 && v14 + 2 > (unint64_t)a1[2])
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
          else
          {
            a2[4] = *(_BYTE *)(v13 + v15);
            v17 = *a1;
            v16 = a1[1];
            v18 = *a1 + 1;
            *a1 = v18;
            if (v16 && v17 + 2 > (unint64_t)a1[2])
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinSerial::Deserializer::Deserialize();
            }
            else
            {
              a2[5] = *(_BYTE *)(v16 + v18);
              v20 = *a1;
              v19 = a1[1];
              v21 = *a1 + 1;
              *a1 = v21;
              if (v19 && v20 + 2 > (unint64_t)a1[2])
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
              }
              else
              {
                a2[6] = *(_BYTE *)(v19 + v21);
                v23 = *a1;
                v22 = a1[1];
                v24 = *a1 + 1;
                *a1 = v24;
                if (v22 && v23 + 2 > (unint64_t)a1[2])
                {
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinSerial::Deserializer::Deserialize();
                }
                else
                {
                  a2[7] = *(_BYTE *)(v22 + v24);
                  v26 = *a1;
                  v25 = a1[1];
                  v27 = *a1 + 1;
                  *a1 = v27;
                  if (v25 && v26 + 2 > (unint64_t)a1[2])
                  {
                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                      ZinSerial::Deserializer::Deserialize();
                  }
                  else
                  {
                    a2[8] = *(_BYTE *)(v25 + v27);
                    v29 = *a1;
                    v28 = a1[1];
                    v30 = *a1 + 1;
                    *a1 = v30;
                    if (v28 && v29 + 2 > (unint64_t)a1[2])
                    {
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        ZinSerial::Deserializer::Deserialize();
                    }
                    else
                    {
                      a2[9] = *(_BYTE *)(v28 + v30);
                      v32 = *a1;
                      v31 = a1[1];
                      v33 = *a1 + 1;
                      *a1 = v33;
                      if (v31 && v32 + 2 > (unint64_t)a1[2])
                      {
                        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                          ZinSerial::Deserializer::Deserialize();
                      }
                      else
                      {
                        a2[10] = *(_BYTE *)(v31 + v33);
                        v35 = *a1;
                        v34 = a1[1];
                        v36 = *a1 + 1;
                        *a1 = v36;
                        if (v34 && v35 + 2 > (unint64_t)a1[2])
                        {
                          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                            ZinSerial::Deserializer::Deserialize();
                        }
                        else
                        {
                          a2[11] = *(_BYTE *)(v34 + v36);
                          v38 = *a1;
                          v37 = a1[1];
                          v39 = *a1 + 1;
                          *a1 = v39;
                          if (v37 && v38 + 2 > (unint64_t)a1[2])
                          {
                            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                              ZinSerial::Deserializer::Deserialize();
                          }
                          else
                          {
                            a2[12] = *(_BYTE *)(v37 + v39);
                            v41 = *a1;
                            v40 = a1[1];
                            v42 = *a1 + 1;
                            *a1 = v42;
                            if (v40 && v41 + 2 > (unint64_t)a1[2])
                            {
                              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                ZinSerial::Deserializer::Deserialize();
                            }
                            else
                            {
                              a2[13] = *(_BYTE *)(v40 + v42);
                              v44 = *a1;
                              v43 = a1[1];
                              v45 = *a1 + 1;
                              *a1 = v45;
                              if (v43 && v44 + 2 > (unint64_t)a1[2])
                              {
                                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                  ZinSerial::Deserializer::Deserialize();
                              }
                              else
                              {
                                a2[14] = *(_BYTE *)(v43 + v45);
                                v46 = *a1;
                                v47 = a1[1];
                                v48 = *a1 + 1;
                                *a1 = v48;
                                if (!v47 || v46 + 2 <= (unint64_t)a1[2])
                                {
                                  v49 = 0;
                                  a2[15] = *(_BYTE *)(v47 + v48);
                                  ++*a1;
                                  return v49;
                                }
                                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                  ZinSerial::Deserializer::Deserialize();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinMirDmaConfig::DramAccess *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    v4 = *(_QWORD *)this;
    v5 = *(_QWORD *)this + 4;
    *(_QWORD *)this = v5;
    v6 = v4 + 12;
    v7 = *((_QWORD *)this + 2);
    if (v4 + 12 <= v7)
    {
      v8 = *((_QWORD *)this + 1);
      v9 = *(_QWORD *)(v8 + v5);
      *(_QWORD *)this = v6;
      *((_QWORD *)a2 + 1) = v9;
      v10 = v4 + 20;
      if (v4 + 20 <= v7)
      {
        v11 = *(_QWORD *)(v8 + v6);
        *(_QWORD *)this = v10;
        *((_QWORD *)a2 + 2) = v11;
        v12 = v4 + 28;
        if (v4 + 28 <= v7)
        {
          v13 = *(_QWORD *)(v8 + v10);
          *(_QWORD *)this = v12;
          *((_QWORD *)a2 + 3) = v13;
          v14 = v4 + 36;
          if (v4 + 36 <= v7)
          {
            v15 = *(_QWORD *)(v8 + v12);
            *(_QWORD *)this = v14;
            *((_QWORD *)a2 + 4) = v15;
            v16 = v4 + 44;
            if (v4 + 44 <= v7)
            {
              v17 = *(_QWORD *)(v8 + v14);
              *(_QWORD *)this = v16;
              *((_QWORD *)a2 + 6) = v17;
              v18 = v4 + 52;
              if (v4 + 52 <= v7)
              {
                v19 = *(_QWORD *)(v8 + v16);
                *(_QWORD *)this = v18;
                *((_QWORD *)a2 + 7) = v19;
                v20 = v4 + 60;
                if (v4 + 60 <= v7)
                {
                  v21 = 0;
                  v23 = *(_QWORD *)(v8 + v18);
                  *(_QWORD *)this = v20;
                  *((_QWORD *)a2 + 8) = v23;
                  return v21;
                }
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
              }
              else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinMirDmaConfig::DramAccess,2ul>(unint64_t *a1, void *a2)
{
  uint64_t v3;
  _BYTE *v4;
  void *__src;
  _BYTE *v7;
  uint64_t v8;

  __src = 0;
  v7 = 0;
  v8 = 0;
  v3 = ZinSerial::Deserializer::Deserialize<ZinMirDmaConfig::DramAccess>(a1, &__src);
  v4 = __src;
  if ((_DWORD)v3)
  {
    if (!__src)
      return v3;
    goto LABEL_7;
  }
  if (v7 - (_BYTE *)__src == 192)
  {
    memmove(a2, __src, 0xC0uLL);
    v3 = 0;
LABEL_7:
    v7 = v4;
    operator delete(v4);
    return v3;
  }
  v3 = 3;
  if (__src)
    goto LABEL_7;
  return v3;
}

void sub_206ECD61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinDramDependentInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + v5);
  *(_QWORD *)this += 4;
  v6 = ZinSerial::Deserializer::Deserialize<ZinDramDependentSrcType>((unint64_t *)this, (std::vector<int> *)((char *)a2 + 8));
  if ((_DWORD)v6)
  {
    v7 = v6;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v9 = *(_QWORD *)this;
    v8 = *((_QWORD *)this + 1);
    if (v8 && (unint64_t)(v9 + 4) > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    *((_DWORD *)a2 + 8) = *(_DWORD *)(v8 + v9);
    *(_QWORD *)this += 4;
    v7 = ZinSerial::Deserializer::Deserialize<ZinDependencyOffsetDim,long>((unint64_t *)this, (uint64_t)a2 + 40);
    if ((_DWORD)v7 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v7;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinDramDependentSrcType>(unint64_t *a1, std::vector<int> *this)
{
  unint64_t v5;
  unint64_t v6;
  std::vector<int>::size_type v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int *value;
  std::vector<int>::pointer end;
  int *v14;
  std::vector<int>::pointer begin;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int *v21;
  int v22;

  if (this->__end_ != this->__begin_)
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<unsigned int>::reserve(this, v7);
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (1)
    {
      v9 = a1[1];
      v10 = *a1 + 4;
      if (v9)
      {
        if (v10 > a1[2])
          break;
      }
      v11 = *(_DWORD *)(v9 + *a1);
      *a1 = v10;
      end = this->__end_;
      value = this->__end_cap_.__value_;
      if (end >= value)
      {
        begin = this->__begin_;
        v16 = end - this->__begin_;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v18 = (char *)value - (char *)begin;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&this->__end_cap_, v19);
          begin = this->__begin_;
          end = this->__end_;
        }
        else
        {
          v20 = 0;
        }
        v21 = (int *)&v20[4 * v16];
        *v21 = v11;
        v14 = v21 + 1;
        while (end != begin)
        {
          v22 = *--end;
          *--v21 = v22;
        }
        this->__begin_ = v21;
        this->__end_ = v14;
        this->__end_cap_.__value_ = (int *)&v20[4 * v19];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v11;
        v14 = end + 1;
      }
      this->__end_ = v14;
      if (++v8 == (_DWORD)v7)
        return 0;
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinEngineLayerMirInfo *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  int v91;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)this + 1;
  v4 = *((_QWORD *)this + 2);
  if (v3 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *(unsigned __int8 *)(v6 + v2);
  *(_QWORD *)this = v3;
  if (v2 + 2 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_BYTE *)a2 = *(_BYTE *)(v6 + v3);
  v10 = *(_QWORD *)this;
  v9 = *((_QWORD *)this + 1);
  v11 = *(_QWORD *)this + 1;
  *(_QWORD *)this = v11;
  if (v9 && (unint64_t)(v10 + 2) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_BYTE *)a2 + 1) = *(_BYTE *)(v9 + v11);
  v13 = *(_QWORD *)this;
  v12 = *((_QWORD *)this + 1);
  v14 = *(_QWORD *)this + 1;
  *(_QWORD *)this = v14;
  if (v12 && (unint64_t)(v13 + 2) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_BYTE *)a2 + 2) = *(_BYTE *)(v12 + v14);
  ++*(_QWORD *)this;
  v15 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (uint64_t)a2 + 8);
  if ((_DWORD)v15)
  {
    v16 = v15;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v17 = *(_QWORD *)this;
    v18 = *(_QWORD *)this + 8;
    v19 = *((_QWORD *)this + 2);
    if (v18 > v19)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    v20 = *((_QWORD *)this + 1);
    v21 = *(_QWORD *)(v20 + v17);
    *(_QWORD *)this = v18;
    *((_QWORD *)a2 + 10) = v21;
    v22 = v17 + 16;
    if (v17 + 16 > v19)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    v23 = *(_QWORD *)(v20 + v18);
    *(_QWORD *)this = v22;
    *((_QWORD *)a2 + 11) = v23;
    v24 = v17 + 24;
    if (v17 + 24 > v19)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    v25 = *(_QWORD *)(v20 + v22);
    *(_QWORD *)this = v24;
    *((_QWORD *)a2 + 12) = v25;
    v26 = v17 + 32;
    if (v17 + 32 > v19)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    v27 = *(_QWORD *)(v20 + v24);
    *(_QWORD *)this = v26;
    *((_QWORD *)a2 + 13) = v27;
    if (v17 + 36 > v19)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    *((_DWORD *)a2 + 28) = *(_DWORD *)(v20 + v26);
    *(_QWORD *)this += 4;
    v29 = ZinSerial::Deserializer::Deserialize(this, (ZinEngineLayerMirInfo *)((char *)a2 + 120));
    if ((_DWORD)v29)
    {
      v16 = v29;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      v30 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (uint64_t)a2 + 712);
      if ((_DWORD)v30)
      {
        v16 = v30;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        v31 = ZinSerial::Deserializer::Deserialize<ZinDramDependentInfo,2ul>((unint64_t *)this, (_DWORD *)a2 + 250);
        if ((_DWORD)v31)
        {
          v16 = v31;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          v32 = ZinSerial::Deserializer::Deserialize(this, (ZinEngineLayerMirInfo *)((char *)a2 + 1160));
          if ((_DWORD)v32)
          {
            v16 = v32;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
          else
          {
            v33 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)a2 + 1264);
            if ((_DWORD)v33)
            {
              v16 = v33;
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinSerial::Deserializer::Deserialize();
            }
            else
            {
              v35 = *(_QWORD *)this;
              v34 = *((_QWORD *)this + 1);
              if (v34 && (unint64_t)(v35 + 4) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 349) = *(_DWORD *)(v34 + v35);
              v37 = *(_QWORD *)this;
              v36 = *((_QWORD *)this + 1);
              v38 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v38;
              if (v36 && (unint64_t)(v37 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 350) = *(_DWORD *)(v36 + v38);
              v40 = *(_QWORD *)this;
              v39 = *((_QWORD *)this + 1);
              v41 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v41;
              if (v39 && (unint64_t)(v40 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 351) = *(_DWORD *)(v39 + v41);
              v43 = *(_QWORD *)this;
              v42 = *((_QWORD *)this + 1);
              v44 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v44;
              if (v42 && (unint64_t)(v43 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 352) = *(_DWORD *)(v42 + v44);
              v46 = *(_QWORD *)this;
              v45 = *((_QWORD *)this + 1);
              v47 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v47;
              if (v45 && (unint64_t)(v46 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 353) = *(_DWORD *)(v45 + v47);
              v49 = *(_QWORD *)this;
              v48 = *((_QWORD *)this + 1);
              v50 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v50;
              if (v48 && (unint64_t)(v49 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 354) = *(_DWORD *)(v48 + v50);
              v52 = *(_QWORD *)this;
              v51 = *((_QWORD *)this + 1);
              v53 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v53;
              if (v51 && (unint64_t)(v52 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 355) = *(_DWORD *)(v51 + v53);
              v55 = *(_QWORD *)this;
              v54 = *((_QWORD *)this + 1);
              v56 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v56;
              if (v54 && (unint64_t)(v55 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 356) = *(_DWORD *)(v54 + v56);
              v58 = *(_QWORD *)this;
              v57 = *((_QWORD *)this + 1);
              v59 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v59;
              if (v57 && (unint64_t)(v58 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 357) = *(_DWORD *)(v57 + v59);
              v61 = *(_QWORD *)this;
              v60 = *((_QWORD *)this + 1);
              v62 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v62;
              if (v60 && (unint64_t)(v61 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 358) = *(_DWORD *)(v60 + v62);
              v64 = *(_QWORD *)this;
              v63 = *((_QWORD *)this + 1);
              v65 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v65;
              if (v63 && (unint64_t)(v64 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 359) = *(_DWORD *)(v63 + v65);
              v67 = *(_QWORD *)this;
              v66 = *((_QWORD *)this + 1);
              v68 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v68;
              if (v66 && (unint64_t)(v67 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 360) = *(_DWORD *)(v66 + v68);
              v70 = *(_QWORD *)this;
              v69 = *((_QWORD *)this + 1);
              v71 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v71;
              if (v69 && (unint64_t)(v70 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
                return 3;
              }
              *((_DWORD *)a2 + 361) = *(_DWORD *)(v69 + v71);
              *(_QWORD *)this += 4;
              v72 = ZinSerial::Deserializer::Deserialize<unsigned int,2ul>((unint64_t *)this, (_QWORD *)a2 + 181);
              if ((_DWORD)v72)
              {
                v16 = v72;
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
              }
              else
              {
                v74 = *(_QWORD *)this;
                v73 = *((_QWORD *)this + 1);
                if (v73 && (unint64_t)(v74 + 4) > *((_QWORD *)this + 2))
                {
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinSerial::Deserializer::Deserialize();
                  return 3;
                }
                *((_DWORD *)a2 + 364) = *(_DWORD *)(v73 + v74);
                *(_QWORD *)this += 4;
                v75 = ZinSerial::Deserializer::Deserialize<std::bitset<4ul>,2ul>((unint64_t *)this, (ZinEngineLayerMirInfo *)((char *)a2 + 1464));
                if ((_DWORD)v75)
                {
                  v16 = v75;
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinSerial::Deserializer::Deserialize();
                }
                else
                {
                  v76 = *((_QWORD *)this + 1);
                  v77 = *(_QWORD *)this + 8;
                  if (v76 && v77 > *((_QWORD *)this + 2))
                  {
                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                      ZinSerial::Deserializer::Deserialize();
                    return 3;
                  }
                  v78 = *(_QWORD *)(v76 + *(_QWORD *)this);
                  *(_QWORD *)this = v77;
                  *((_QWORD *)a2 + 185) = v78 & 0xF;
                  v79 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 372);
                  if ((_DWORD)v79)
                  {
                    v16 = v79;
                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                      ZinSerial::Deserializer::Deserialize();
                  }
                  else
                  {
                    v81 = *(_QWORD *)this;
                    v80 = *((_QWORD *)this + 1);
                    if (v80 && (unint64_t)(v81 + 1) > *((_QWORD *)this + 2))
                    {
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        ZinSerial::Deserializer::Deserialize();
                      return 3;
                    }
                    *((_BYTE *)a2 + 1504) = *(_BYTE *)(v80 + v81);
                    v82 = *(_QWORD *)this;
                    v83 = *(_QWORD *)this + 1;
                    *(_QWORD *)this = v83;
                    v84 = v82 + 2;
                    v85 = *((_QWORD *)this + 2);
                    if (v82 + 2 > v85)
                    {
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        ZinSerial::Deserializer::Deserialize();
                      return 3;
                    }
                    v86 = *((_QWORD *)this + 1);
                    v87 = *(unsigned __int8 *)(v86 + v83);
                    *(_QWORD *)this = v84;
                    v88 = v82 + 3;
                    if (v82 + 3 > v85)
                    {
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        ZinSerial::Deserializer::Deserialize();
                      return 3;
                    }
                    v89 = *(unsigned __int8 *)(v86 + v84);
                    *(_QWORD *)this = v88;
                    v90 = v82 + 4;
                    if (v90 > v85)
                    {
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        ZinSerial::Deserializer::Deserialize();
                      return 3;
                    }
                    v91 = *(unsigned __int8 *)(v86 + v88);
                    *(_QWORD *)this = v90;
                    if (v7 != *((unsigned __int8 *)a2 + 1680))
                      *((_BYTE *)a2 + 1680) = 1;
                    ZinEngineLayerMirInfo::SetNeedInputDMACached((uint64_t)a2, 0, v87 != 0);
                    ZinEngineLayerMirInfo::SetNeedInputDMACached((uint64_t)a2, 1, v89 != 0);
                    v16 = 0;
                    *((_BYTE *)a2 + 1642) = v91 != 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v16;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinDramDependentInfo,2ul>(unint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void **v9;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v3 = ZinSerial::Deserializer::Deserialize<ZinDramDependentInfo>(a1, &v5);
  if (!(_DWORD)v3)
  {
    if (v6 - v5 == 160)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDramDependentInfo *,ZinDramDependentInfo *,ZinDramDependentInfo *>((uint64_t)&v8, v5, v5 + 160, a2);
      v3 = 0;
    }
    else
    {
      v3 = 3;
    }
  }
  v9 = (void **)&v5;
  std::vector<ZinDramDependentInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
  return v3;
}

void sub_206ECEA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 24) = &a10;
  std::vector<ZinDramDependentInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned int,2ul>(unint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int *begin;
  std::vector<int> __p;

  memset(&__p, 0, sizeof(__p));
  v3 = ZinSerial::Deserializer::Deserialize<ZinDramDependentSrcType>(a1, &__p);
  begin = __p.__begin_;
  if ((_DWORD)v3)
  {
    if (!__p.__begin_)
      return v3;
    goto LABEL_7;
  }
  if ((std::vector<int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) == (std::vector<int>::pointer)8)
  {
    v3 = 0;
    *a2 = *(_QWORD *)__p.__begin_;
LABEL_7:
    __p.__end_ = begin;
    operator delete(begin);
    return v3;
  }
  v3 = 3;
  if (__p.__begin_)
    goto LABEL_7;
  return v3;
}

void sub_206ECEAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize<std::bitset<4ul>,2ul>(unint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  _BYTE *v4;
  void *__p;
  _BYTE *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  v3 = ZinSerial::Deserializer::Deserialize<std::bitset<4ul>>(a1, (char **)&__p);
  v4 = __p;
  if ((_DWORD)v3)
  {
    if (!__p)
      return v3;
    goto LABEL_7;
  }
  if (v7 - (_BYTE *)__p == 16)
  {
    v3 = 0;
    *a2 = *(_OWORD *)__p;
LABEL_7:
    v7 = v4;
    operator delete(v4);
    return v3;
  }
  v3 = 3;
  if (__p)
    goto LABEL_7;
  return v3;
}

void sub_206ECEB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinLiveRange *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)this + 8;
  v4 = *((_QWORD *)this + 2);
  if (v3 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(v6 + v2);
  *(_QWORD *)this = v3;
  *(_QWORD *)a2 = v7;
  v8 = v2 + 16;
  if (v8 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  result = 0;
  v10 = *(_QWORD *)(v6 + v3);
  *(_QWORD *)this = v8;
  *((_QWORD *)a2 + 1) = v10;
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinTensorDimensions *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)this + 8;
  v4 = *((_QWORD *)this + 2);
  if (v3 <= v4)
  {
    v5 = *((_QWORD *)this + 1);
    v6 = *(_QWORD *)(v5 + v2);
    *(_QWORD *)this = v3;
    *(_QWORD *)a2 = v6;
    v7 = v2 + 16;
    if (v2 + 16 <= v4)
    {
      v8 = *(_QWORD *)(v5 + v3);
      *(_QWORD *)this = v7;
      *((_QWORD *)a2 + 1) = v8;
      v9 = v2 + 24;
      if (v2 + 24 <= v4)
      {
        v10 = *(_QWORD *)(v5 + v7);
        *(_QWORD *)this = v9;
        *((_QWORD *)a2 + 2) = v10;
        v11 = v2 + 32;
        if (v2 + 32 <= v4)
        {
          v12 = *(_QWORD *)(v5 + v9);
          *(_QWORD *)this = v11;
          *((_QWORD *)a2 + 3) = v12;
          v13 = v2 + 40;
          if (v2 + 40 <= v4)
          {
            v14 = 0;
            v16 = *(_QWORD *)(v5 + v11);
            *(_QWORD *)this = v13;
            *((_QWORD *)a2 + 4) = v16;
            return v14;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinTensorRegion *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v5 = ZinSerial::Deserializer::Deserialize(this, (ZinTensorRegion *)((char *)a2 + 40));
    if ((_DWORD)v5 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  else
  {
    *a2 = *(_DWORD *)(v4 + v5);
    *(_QWORD *)this += 4;
    v7 = ZinSerial::Deserializer::Deserialize(this, (ZinTensorRegion *)(a2 + 2));
    if ((_DWORD)v7)
    {
      v6 = v7;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      v8 = ZinSerial::Deserializer::Deserialize(this, (ZinTensorDimensions *)(a2 + 22));
      if ((_DWORD)v8)
      {
        v6 = v8;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        v9 = ZinSerial::Deserializer::Deserialize(this, (ZinTensorDimensions *)(a2 + 32));
        if ((_DWORD)v9)
        {
          v6 = v9;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          v6 = ZinSerial::Deserializer::Deserialize(this, (ZinTensorDimensions *)(a2 + 42));
          if ((_DWORD)v6 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
      }
    }
  }
  return v6;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, AddrWrapInfo *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)this + 8;
  v4 = *((_QWORD *)this + 2);
  if (v3 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(v6 + v2);
  *(_QWORD *)this = v3;
  *(_QWORD *)a2 = v7;
  v8 = v2 + 16;
  if (v8 > v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  result = 0;
  v10 = *(_QWORD *)(v6 + v3);
  *(_QWORD *)this = v8;
  *((_QWORD *)a2 + 1) = v10;
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, StaticWrapInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    v7 = *(_QWORD *)this + 8;
    if (v6 && v7 > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    else
    {
      v5 = 0;
      v8 = *(_QWORD *)(v6 + *(_QWORD *)this);
      *(_QWORD *)this = v7;
      *((_QWORD *)a2 + 2) = v8;
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinTensorDescriptor>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;

  if (*(_BYTE *)(a2 + 208))
    return 3;
  v4 = a1[1];
  v5 = *a1 + 1;
  if (v4)
  {
    if (v5 > a1[2])
      return 3;
  }
  v6 = *(unsigned __int8 *)(v4 + *a1);
  *a1 = v5;
  if (!v6)
    return 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = vdupq_n_s64(1uLL);
  v18 = v17;
  v19 = v17;
  v20 = v17;
  v21 = v17;
  v22 = v17;
  v23 = v17;
  v24 = v17;
  v25 = v17;
  v26 = v17;
  result = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, &v14);
  if (!(_DWORD)result)
  {
    v7 = *(unsigned __int8 *)(a2 + 208);
    v8 = v25;
    *(int64x2_t *)(a2 + 160) = v24;
    *(int64x2_t *)(a2 + 176) = v8;
    *(int64x2_t *)(a2 + 192) = v26;
    v9 = v21;
    *(int64x2_t *)(a2 + 96) = v20;
    *(int64x2_t *)(a2 + 112) = v9;
    v10 = v23;
    *(int64x2_t *)(a2 + 128) = v22;
    *(int64x2_t *)(a2 + 144) = v10;
    v11 = v17;
    *(_OWORD *)(a2 + 32) = v16;
    *(int64x2_t *)(a2 + 48) = v11;
    v12 = v19;
    *(int64x2_t *)(a2 + 64) = v18;
    *(int64x2_t *)(a2 + 80) = v12;
    v13 = v15;
    *(_OWORD *)a2 = v14;
    *(_OWORD *)(a2 + 16) = v13;
    if (!v7)
      *(_BYTE *)(a2 + 208) = 1;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<AddrWrapInfo,int,int>(unint64_t *a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;

  if (*(_BYTE *)(a2 + 16))
    return 3;
  v6 = a1[1];
  v7 = *a1 + 1;
  if (v6)
  {
    if (v7 > a1[2])
      return 3;
  }
  v8 = *(unsigned __int8 *)(v6 + *a1);
  *a1 = v7;
  if (!v8)
    return 0;
  v9 = *a4;
  *(_QWORD *)&v11 = *a3;
  *((_QWORD *)&v11 + 1) = v9;
  result = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (AddrWrapInfo *)&v11);
  if (!(_DWORD)result)
  {
    v10 = *(unsigned __int8 *)(a2 + 16);
    *(_OWORD *)a2 = v11;
    if (!v10)
      *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<StaticWrapInfo>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;

  if (*(_BYTE *)(a2 + 24))
    return 3;
  v4 = a1[1];
  v5 = *a1 + 1;
  if (v4)
  {
    if (v5 > a1[2])
      return 3;
  }
  v6 = *(unsigned __int8 *)(v4 + *a1);
  *a1 = v5;
  if (!v6)
    return 0;
  v8 = 5uLL;
  v9 = 0;
  result = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (StaticWrapInfo *)&v8);
  if (!(_DWORD)result)
  {
    v7 = *(unsigned __int8 *)(a2 + 24);
    *(_OWORD *)a2 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    if (!v7)
      *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinOcgKernelData,int,int>(uint64_t *a1, void **a2, _DWORD *a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  __int128 v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  _BYTE v32[48];
  uint64_t v33;

  if (a2[1] != *a2)
    return 3;
  v9 = a1[1];
  v10 = *a1 + 4;
  if (v9)
  {
    if (v10 > a1[2])
      return 3;
  }
  v11 = *(unsigned int *)(v9 + *a1);
  *a1 = v10;
  std::vector<ZinOcgKernelData>::reserve(a2, v11);
  if (!(_DWORD)v11)
    return 0;
  v12 = 0;
  while (1)
  {
    v13 = *a4;
    *(_DWORD *)v32 = *a3;
    *(_DWORD *)&v32[4] = v13;
    *(_QWORD *)&v14 = -1;
    *((_QWORD *)&v14 + 1) = -1;
    *(_OWORD *)&v32[8] = v14;
    *(_OWORD *)&v32[24] = v14;
    *(_QWORD *)&v32[40] = -1;
    v33 = 0;
    result = ZinSerial::Deserializer::Deserialize(a1, (uint64_t)v32);
    if ((_DWORD)result)
      break;
    v15 = (char *)a2[1];
    v16 = (char *)a2[2];
    if (v15 >= v16)
    {
      v18 = 0x6DB6DB6DB6DB6DB7 * ((v15 - (_BYTE *)*a2) >> 3);
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) > 0x492492492492492)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v20 = 0x6DB6DB6DB6DB6DB7 * ((v16 - (_BYTE *)*a2) >> 3);
      if (2 * v20 > v19)
        v19 = 2 * v20;
      if (v20 >= 0x249249249249249)
        v21 = 0x492492492492492;
      else
        v21 = v19;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>((uint64_t)(a2 + 2), v21);
      else
        v22 = 0;
      v23 = &v22[56 * v18];
      v24 = *(_OWORD *)&v32[16];
      *(_OWORD *)v23 = *(_OWORD *)v32;
      *((_OWORD *)v23 + 1) = v24;
      *((_OWORD *)v23 + 2) = *(_OWORD *)&v32[32];
      *((_QWORD *)v23 + 6) = v33;
      v26 = (char *)*a2;
      v25 = (char *)a2[1];
      v27 = v23;
      if (v25 != *a2)
      {
        do
        {
          v28 = *(_OWORD *)(v25 - 56);
          v29 = *(_OWORD *)(v25 - 40);
          v30 = *(_OWORD *)(v25 - 24);
          *((_QWORD *)v27 - 1) = *((_QWORD *)v25 - 1);
          *(_OWORD *)(v27 - 24) = v30;
          *(_OWORD *)(v27 - 40) = v29;
          *(_OWORD *)(v27 - 56) = v28;
          v27 -= 56;
          v25 -= 56;
        }
        while (v25 != v26);
        v25 = (char *)*a2;
      }
      v31 = v23 + 56;
      *a2 = v27;
      a2[1] = v23 + 56;
      a2[2] = &v22[56 * v21];
      if (v25)
        operator delete(v25);
      a2[1] = v31;
    }
    else
    {
      v17 = *(_OWORD *)&v32[16];
      *(_OWORD *)v15 = *(_OWORD *)v32;
      *((_OWORD *)v15 + 1) = v17;
      *((_OWORD *)v15 + 2) = *(_OWORD *)&v32[32];
      *((_QWORD *)v15 + 6) = v33;
      a2[1] = v15 + 56;
    }
    if (++v12 == (_DWORD)v11)
      return 0;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinMirAneKernelCoeff *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (unint64_t)(v3 + 1) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *(_BYTE *)a2 = *(_BYTE *)(v2 + v3);
  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)this + 1;
  *(_QWORD *)this = v6;
  if (v4 && (unint64_t)(v5 + 5) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_DWORD *)a2 + 1) = *(_DWORD *)(v4 + v6);
  v7 = *(_QWORD *)this;
  v8 = *(_QWORD *)this + 4;
  *(_QWORD *)this = v8;
  v9 = v7 + 12;
  v10 = *((_QWORD *)this + 2);
  if (v7 + 12 > v10)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v11 = *((_QWORD *)this + 1);
  v12 = *(_QWORD *)(v11 + v8);
  *(_QWORD *)this = v9;
  *((_QWORD *)a2 + 1) = v12;
  v13 = v7 + 20;
  if (v7 + 20 > v10)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v14 = *(_QWORD *)(v11 + v9);
  *(_QWORD *)this = v13;
  *((_QWORD *)a2 + 2) = v14;
  v15 = v7 + 28;
  if (v15 > v10)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v18 = *(_QWORD *)(v11 + v13);
  *(_QWORD *)this = v15;
  *((_QWORD *)a2 + 3) = v18;
  v16 = ZinSerial::Deserializer::Deserialize<ZinNeKernelData>((uint64_t *)this, (uint64_t *)a2 + 4);
  if ((_DWORD)v16 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinSerial::Deserializer::Deserialize();
  return v16;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinNeKernelData>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *__p[2];
  _QWORD v16[3];

  if (a2[1] != *a2)
    return 3;
  v7 = a1[1];
  v8 = *a1 + 4;
  if (v7)
  {
    if (v8 > a1[2])
      return 3;
  }
  v9 = *(unsigned int *)(v7 + *a1);
  *a1 = v8;
  std::vector<ZinNeKernelData>::reserve(a2, v9);
  if (!(_DWORD)v9)
    return 0;
  while (1)
  {
    *(_QWORD *)&v14 = -1;
    *((_QWORD *)&v14 + 1) = -1;
    *(_OWORD *)__p = 0u;
    memset(v16, 0, sizeof(v16));
    v10 = ZinSerial::Deserializer::Deserialize(a1, (uint64_t)&v14);
    v11 = v10;
    v3 = v10;
    if (!(_DWORD)v10)
    {
      v12 = a2[1];
      if (v12 >= a2[2])
      {
        v13 = std::vector<ZinNeKernelData>::__push_back_slow_path<ZinNeKernelData>(a2, (uint64_t)&v14);
      }
      else
      {
        *(_OWORD *)v12 = v14;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_OWORD *)(v12 + 16) = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 32) = v16[0];
        __p[0] = 0;
        __p[1] = 0;
        v16[0] = 0;
        *(_OWORD *)(v12 + 40) = *(_OWORD *)&v16[1];
        v13 = v12 + 56;
      }
      a2[1] = v13;
      v3 = v2;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v11)
      break;
    v2 = v3;
    LODWORD(v9) = v9 - 1;
    if (!(_DWORD)v9)
      return 0;
  }
  return v3;
}

void sub_206ED010C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrNameMaps *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = ZinSerial::Deserializer::Deserialize<std::string,std::string>((uint64_t *)this, (uint64_t)a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v6 = ZinSerial::Deserializer::Deserialize<std::string,std::string>((uint64_t *)this, (uint64_t)a2 + 24);
    if ((_DWORD)v6)
    {
      v5 = v6;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      v7 = ZinSerial::Deserializer::Deserialize<std::string,std::string>((uint64_t *)this, (uint64_t)a2 + 48);
      if ((_DWORD)v7)
      {
        v5 = v7;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        v5 = ZinSerial::Deserializer::Deserialize<std::string,std::string>((uint64_t *)this, (uint64_t)a2 + 72);
        if ((_DWORD)v5 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrLiveIORankMaps *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = ZinSerial::Deserializer::Deserialize<std::string,long>((uint64_t *)this, (uint64_t)a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v5 = ZinSerial::Deserializer::Deserialize<std::string,long>((uint64_t *)this, (uint64_t)a2 + 24);
    if ((_DWORD)v5 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize<std::string,long>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  void *__p[2];
  std::string::size_type v17;
  uint64_t v18;
  std::string v19;

  if (*(_QWORD *)(a2 + 16))
    return 3;
  v7 = a1[1];
  v8 = *a1 + 4;
  if (v7)
  {
    if (v8 > a1[2])
      return 3;
  }
  v9 = *(_DWORD *)(v7 + *a1);
  *a1 = v8;
  if (!v9)
    return 0;
  while (1)
  {
    memset(&v19, 0, sizeof(v19));
    v10 = ZinSerial::BufferReader::Read(a1, &v19);
    v3 = v10;
    if ((_DWORD)v10)
    {
      v11 = 0;
      v2 = v10;
    }
    else
    {
      v12 = a1[1];
      v13 = *a1 + 8;
      if (v12 && v13 > a1[2])
      {
        v11 = 0;
        v3 = 3;
        v2 = 3;
      }
      else
      {
        v14 = *(_QWORD *)(v12 + *a1);
        *a1 = v13;
        *(_OWORD *)__p = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
        v15 = v19.__r_.__value_.__r.__words[2];
        memset(&v19, 0, sizeof(v19));
        v17 = v15;
        v18 = v14;
        std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,long>>((uint64_t **)a2, __p, (uint64_t)__p);
        if (SHIBYTE(v17) < 0)
          operator delete(__p[0]);
        v3 = 0;
        v11 = 1;
      }
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if ((v11 & 1) == 0)
      break;
    if (!--v9)
      return v3;
  }
  return v2;
}

void sub_206ED03C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned char>(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  __int16 v9;

  if (*(_BYTE *)(a2 + 1))
    return 3;
  v4 = *a1;
  v5 = a1[1];
  v6 = *a1 + 1;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(unsigned __int8 *)(v5 + v4);
  *a1 = v6;
  if (!v7)
    return 0;
  v8 = v4 + 2;
  if (v4 + 2 > a1[2])
    return 3;
  v2 = 0;
  v9 = *(unsigned __int8 *)(v5 + v6);
  *a1 = v8;
  *(_WORD *)a2 = v9 | 0x100;
  return v2;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinBarUsage *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = ZinSerial::Deserializer::Deserialize<BarIdType,unsigned char>((unint64_t *)this, (uint64_t)a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v5 = ZinSerial::Deserializer::Deserialize<std::string,ZinIOBarInfo>((uint64_t *)this, (uint64_t)a2 + 24);
    if ((_DWORD)v5 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize<BarIdType,unsigned char>(unint64_t *a1, uint64_t a2)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  unint64_t v14;
  char v15;
  uint64_t v16;

  if (*(_QWORD *)(a2 + 16))
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(_DWORD *)(v5 + *a1);
  *a1 = v6;
  if (v7)
  {
    while (1)
    {
      v9 = *a1;
      v8 = a1[1];
      v10 = a1[2];
      v11 = *a1 + 4;
      if (v8 && v11 > v10)
        break;
      v13 = *(_DWORD *)(v8 + v9);
      *a1 = v11;
      v14 = v9 + 5;
      if (v14 > v10)
        break;
      v15 = *(_BYTE *)(v8 + v11);
      *a1 = v14;
      LODWORD(v16) = v13;
      BYTE4(v16) = v15;
      std::__tree<std::__value_type<ZinIrNonLinearMode,unsigned int>,std::__map_value_compare<ZinIrNonLinearMode,std::__value_type<ZinIrNonLinearMode,unsigned int>,std::less<ZinIrNonLinearMode>,true>,std::allocator<std::__value_type<ZinIrNonLinearMode,unsigned int>>>::__emplace_unique_key_args<ZinIrNonLinearMode,std::pair<ZinIrNonLinearMode const,unsigned int>>((uint64_t **)a2, (int *)&v16, &v16);
      if (!--v7)
        return 0;
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize<std::string,ZinIOBarInfo>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  std::string v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  std::string __p;

  if (*(_QWORD *)(a2 + 16))
    return 3;
  v7 = a1[1];
  v8 = *a1 + 4;
  if (v7)
  {
    if (v8 > a1[2])
      return 3;
  }
  v9 = *(_DWORD *)(v7 + *a1);
  *a1 = v8;
  if (!v9)
    return 0;
  while (1)
  {
    memset(&__p, 0, sizeof(__p));
    LOBYTE(v15) = 0;
    HIDWORD(v14) = 0;
    v3 = ZinSerial::BufferReader::Read(a1, &__p);
    if ((_DWORD)v3 || (v3 = ZinSerial::Deserializer::Deserialize((unint64_t *)a1, (uint64_t)&v14), (_DWORD)v3))
    {
      v10 = 0;
      v2 = v3;
    }
    else
    {
      v11 = __p;
      memset(&__p, 0, sizeof(__p));
      v12 = v14;
      v13 = v15;
      std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ZinIOBarInfo>>((uint64_t **)a2, (void **)&v11.__r_.__value_.__l.__data_, (uint64_t)&v11);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      v3 = 0;
      v10 = 1;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v10 & 1) == 0)
      break;
    if (!--v9)
      return v3;
  }
  return v2;
}

void sub_206ED0808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrInputViewUnitInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *((_DWORD *)a2 + 20) = *(_DWORD *)(v2 + v3);
    v5 = *(_QWORD *)this;
    v4 = *((_QWORD *)this + 1);
    v6 = *(_QWORD *)this + 4;
    *(_QWORD *)this = v6;
    if (v4 && (unint64_t)(v5 + 8) > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *((_DWORD *)a2 + 21) = *(_DWORD *)(v4 + v6);
      v8 = *(_QWORD *)this;
      v7 = *((_QWORD *)this + 1);
      v9 = *(_QWORD *)this + 4;
      *(_QWORD *)this = v9;
      if (v7 && (unint64_t)(v8 + 8) > *((_QWORD *)this + 2))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        *((_DWORD *)a2 + 22) = *(_DWORD *)(v7 + v9);
        v10 = *(_QWORD *)this;
        v11 = *((_QWORD *)this + 1);
        v12 = *(_QWORD *)this + 4;
        *(_QWORD *)this = v12;
        if (!v11 || (unint64_t)(v10 + 8) <= *((_QWORD *)this + 2))
        {
          v13 = 0;
          *((_DWORD *)a2 + 23) = *(_DWORD *)(v11 + v12);
          *(_QWORD *)this += 4;
          return v13;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(unint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;
  _BYTE v9[48];
  __int128 v10;
  int64x2_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v4 = ZinSerial::Deserializer::Deserialize(a1, &v13);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v10 = xmmword_207A80930;
    v11 = vdupq_n_s64(1uLL);
    v12 = 1;
    v5 = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinTensorDimensions *)&v10);
    if ((_DWORD)v5)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *(_QWORD *)v9 = v15;
      v6 = v13;
      v8 = v14;
      *(_OWORD *)&v9[8] = v10;
      *(int64x2_t *)&v9[24] = v11;
      *(_QWORD *)&v9[40] = v12;
      a2[3] = *(_OWORD *)&v9[16];
      a2[4] = *(_OWORD *)&v9[32];
      a2[1] = v8;
      a2[2] = *(_OWORD *)v9;
      *a2 = v6;
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrConcatInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  else
  {
    *((_DWORD *)a2 + 3) = *(_DWORD *)(v2 + v3);
    *(_QWORD *)this += 4;
    v4 = ZinSerial::Deserializer::Deserialize<ZinIrTensor::ViewOriginAndStep>((unint64_t *)this, (void **)a2 + 2);
    if ((_DWORD)v4 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v4;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinIrTensor::ViewOriginAndStep>(unint64_t *a1, void **a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  char *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  int64x2_t v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[48];

  if (a2[1] != *a2)
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<ZinIrTensor::ViewOriginAndStep>::reserve(a2, v7);
  if (!(_DWORD)v7)
    return 0;
  v8 = 0;
  v29 = vdupq_n_s64(1uLL);
  while (1)
  {
    *(_QWORD *)v32 = 0;
    v30 = 0u;
    v31 = 0u;
    *(int64x2_t *)&v32[8] = v29;
    *(int64x2_t *)&v32[24] = v29;
    *(_QWORD *)&v32[40] = 1;
    result = ZinSerial::Deserializer::Deserialize(a1, &v30);
    if ((_DWORD)result)
      break;
    v9 = (char *)a2[1];
    v10 = (unint64_t)a2[2];
    if ((unint64_t)v9 >= v10)
    {
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - (_BYTE *)*a2) >> 4);
      v14 = v13 + 1;
      if (v13 + 1 > 0x333333333333333)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)*a2) >> 4);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x199999999999999)
        v16 = 0x333333333333333;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a2 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[80 * v13];
      v19 = *(_OWORD *)&v32[32];
      v20 = *(_OWORD *)v32;
      *((_OWORD *)v18 + 3) = *(_OWORD *)&v32[16];
      *((_OWORD *)v18 + 4) = v19;
      v21 = v31;
      *(_OWORD *)v18 = v30;
      *((_OWORD *)v18 + 1) = v21;
      *((_OWORD *)v18 + 2) = v20;
      v23 = (char *)*a2;
      v22 = (char *)a2[1];
      v24 = v18;
      if (v22 != *a2)
      {
        do
        {
          *((_OWORD *)v24 - 5) = *((_OWORD *)v22 - 5);
          v25 = *((_OWORD *)v22 - 4);
          v26 = *((_OWORD *)v22 - 3);
          v27 = *((_OWORD *)v22 - 1);
          *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
          *((_OWORD *)v24 - 1) = v27;
          *((_OWORD *)v24 - 4) = v25;
          *((_OWORD *)v24 - 3) = v26;
          v24 -= 80;
          v22 -= 80;
        }
        while (v22 != v23);
        v22 = (char *)*a2;
      }
      v28 = v18 + 80;
      *a2 = v24;
      a2[1] = v18 + 80;
      a2[2] = &v17[80 * v16];
      if (v22)
        operator delete(v22);
      a2[1] = v28;
    }
    else
    {
      v11 = *(_OWORD *)&v32[16];
      *((_OWORD *)v9 + 2) = *(_OWORD *)v32;
      *((_OWORD *)v9 + 3) = v11;
      *((_OWORD *)v9 + 4) = *(_OWORD *)&v32[32];
      v12 = v31;
      *(_OWORD *)v9 = v30;
      *((_OWORD *)v9 + 1) = v12;
      a2[1] = v9 + 80;
    }
    if (++v8 == (_DWORD)v7)
      return 0;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrElementWiseInfo *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (v3 && (unint64_t)(v4 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  else
  {
    result = 0;
    *((_DWORD *)a2 + 3) = *(_DWORD *)(v3 + v4);
    *(_QWORD *)this += 4;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrIndexInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *((_DWORD *)a2 + 3) = *(_DWORD *)(v2 + v3);
    v4 = *(_QWORD *)this;
    v5 = *(_QWORD *)this + 4;
    *(_QWORD *)this = v5;
    v6 = v4 + 12;
    v7 = *((_QWORD *)this + 2);
    if (v4 + 12 <= v7)
    {
      v8 = *((_QWORD *)this + 1);
      v9 = *(_QWORD *)(v8 + v5);
      *(_QWORD *)this = v6;
      *((_QWORD *)a2 + 2) = v9;
      if (v4 + 13 <= v7)
      {
        v10 = 0;
        *((_BYTE *)a2 + 24) = *(_BYTE *)(v8 + v6);
        ++*(_QWORD *)this;
        return v10;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrReductionInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *((_DWORD *)a2 + 3) = *(_DWORD *)(v2 + v3);
    v5 = *(_QWORD *)this;
    v4 = *((_QWORD *)this + 1);
    v6 = *(_QWORD *)this + 4;
    *(_QWORD *)this = v6;
    if (v4 && (unint64_t)(v5 + 8) > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *((_DWORD *)a2 + 4) = *(_DWORD *)(v4 + v6);
      v8 = *(_QWORD *)this;
      v7 = *((_QWORD *)this + 1);
      v9 = *(_QWORD *)this + 4;
      *(_QWORD *)this = v9;
      v10 = v8 + 12;
      if (v7 && v10 > *((_QWORD *)this + 2))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        v11 = *(_QWORD *)(v7 + v9);
        *(_QWORD *)this = v10;
        *((_QWORD *)a2 + 3) = v11 & 0x1F;
        v13 = *(_QWORD *)this;
        v12 = *((_QWORD *)this + 1);
        if (v12 && (unint64_t)(v13 + 4) > *((_QWORD *)this + 2))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          *((_DWORD *)a2 + 8) = *(_DWORD *)(v12 + v13);
          v15 = *(_QWORD *)this;
          v14 = *((_QWORD *)this + 1);
          v16 = *(_QWORD *)this + 4;
          *(_QWORD *)this = v16;
          if (v14 && (unint64_t)(v15 + 8) > *((_QWORD *)this + 2))
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
          else
          {
            *((_DWORD *)a2 + 9) = *(_DWORD *)(v14 + v16);
            v18 = *(_QWORD *)this;
            v17 = *((_QWORD *)this + 1);
            v19 = *(_QWORD *)this + 4;
            *(_QWORD *)this = v19;
            if (v17 && (unint64_t)(v18 + 8) > *((_QWORD *)this + 2))
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinSerial::Deserializer::Deserialize();
            }
            else
            {
              *((_DWORD *)a2 + 10) = *(_DWORD *)(v17 + v19);
              v21 = *(_QWORD *)this;
              v20 = *((_QWORD *)this + 1);
              v22 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v22;
              if (v20 && (unint64_t)(v21 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
              }
              else
              {
                *((_DWORD *)a2 + 11) = *(_DWORD *)(v20 + v22);
                v24 = *(_QWORD *)this;
                v23 = *((_QWORD *)this + 1);
                v25 = *(_QWORD *)this + 4;
                *(_QWORD *)this = v25;
                if (v23 && (unint64_t)(v24 + 5) > *((_QWORD *)this + 2))
                {
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinSerial::Deserializer::Deserialize();
                }
                else
                {
                  *((_BYTE *)a2 + 48) = *(_BYTE *)(v23 + v25);
                  v26 = *(_QWORD *)this;
                  v27 = *((_QWORD *)this + 1);
                  v28 = *(_QWORD *)this + 1;
                  *(_QWORD *)this = v28;
                  if (!v27 || (unint64_t)(v26 + 2) <= *((_QWORD *)this + 2))
                  {
                    v29 = 0;
                    *((_BYTE *)a2 + 49) = *(_BYTE *)(v27 + v28);
                    ++*(_QWORD *)this;
                    return v29;
                  }
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinSerial::Deserializer::Deserialize();
                }
              }
            }
          }
        }
      }
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrScaledEWInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    *((_DWORD *)a2 + 3) = *(_DWORD *)(v2 + v3);
    v5 = *(_QWORD *)this;
    v4 = *((_QWORD *)this + 1);
    v6 = *(_QWORD *)this + 4;
    *(_QWORD *)this = v6;
    if (v4 && (unint64_t)(v5 + 8) > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *((_DWORD *)a2 + 4) = *(_DWORD *)(v4 + v6);
      v8 = *(_QWORD *)this;
      v7 = *((_QWORD *)this + 1);
      v9 = *(_QWORD *)this + 4;
      *(_QWORD *)this = v9;
      if (v7 && (unint64_t)(v8 + 8) > *((_QWORD *)this + 2))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        *((_DWORD *)a2 + 5) = *(_DWORD *)(v7 + v9);
        v11 = *(_QWORD *)this;
        v10 = *((_QWORD *)this + 1);
        v12 = *(_QWORD *)this + 4;
        *(_QWORD *)this = v12;
        if (v10 && (unint64_t)(v11 + 8) > *((_QWORD *)this + 2))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          *((_DWORD *)a2 + 6) = *(_DWORD *)(v10 + v12);
          v14 = *(_QWORD *)this;
          v13 = *((_QWORD *)this + 1);
          v15 = *(_QWORD *)this + 4;
          *(_QWORD *)this = v15;
          if (v13 && (unint64_t)(v14 + 5) > *((_QWORD *)this + 2))
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
          else
          {
            *((_BYTE *)a2 + 28) = *(_BYTE *)(v13 + v15);
            v16 = *(_QWORD *)this;
            v17 = *((_QWORD *)this + 1);
            v18 = *(_QWORD *)this + 1;
            *(_QWORD *)this = v18;
            if (!v17 || (unint64_t)(v16 + 2) <= *((_QWORD *)this + 2))
            {
              v19 = 0;
              *((_BYTE *)a2 + 29) = *(_BYTE *)(v17 + v18);
              ++*(_QWORD *)this;
              return v19;
            }
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
        }
      }
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrPoolUnitInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_DWORD *)a2 + 20) = *(_DWORD *)(v4 + v5);
  *(_QWORD *)this += 4;
  v7 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (_QWORD *)a2 + 11);
  if ((_DWORD)v7)
  {
    v6 = v7;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v8 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 28);
    if ((_DWORD)v8)
    {
      v6 = v8;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      v9 = ZinSerial::Deserializer::Deserialize(this, (ZinIrPoolUnitInfo *)((char *)a2 + 124));
      if (!(_DWORD)v9)
      {
        v12 = *(_QWORD *)this;
        v11 = *((_QWORD *)this + 1);
        if (v11 && (unint64_t)(v12 + 1) > *((_QWORD *)this + 2))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          *((_BYTE *)a2 + 148) = *(_BYTE *)(v11 + v12);
          v14 = *(_QWORD *)this;
          v13 = *((_QWORD *)this + 1);
          v15 = *(_QWORD *)this + 1;
          *(_QWORD *)this = v15;
          if (v13 && (unint64_t)(v14 + 5) > *((_QWORD *)this + 2))
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinSerial::Deserializer::Deserialize();
          }
          else
          {
            *((_DWORD *)a2 + 38) = *(_DWORD *)(v13 + v15);
            v17 = *(_QWORD *)this;
            v16 = *((_QWORD *)this + 1);
            v18 = *(_QWORD *)this + 4;
            *(_QWORD *)this = v18;
            if (v16 && (unint64_t)(v17 + 8) > *((_QWORD *)this + 2))
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinSerial::Deserializer::Deserialize();
            }
            else
            {
              *((_DWORD *)a2 + 39) = *(_DWORD *)(v16 + v18);
              v20 = *(_QWORD *)this;
              v19 = *((_QWORD *)this + 1);
              v21 = *(_QWORD *)this + 4;
              *(_QWORD *)this = v21;
              if (v19 && (unint64_t)(v20 + 8) > *((_QWORD *)this + 2))
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
              }
              else
              {
                *((_DWORD *)a2 + 40) = *(_DWORD *)(v19 + v21);
                v23 = *(_QWORD *)this;
                v22 = *((_QWORD *)this + 1);
                v24 = *(_QWORD *)this + 4;
                *(_QWORD *)this = v24;
                v25 = v23 + 12;
                if (!v22 || v25 <= *((_QWORD *)this + 2))
                {
                  v6 = 0;
                  v26 = *(_QWORD *)(v22 + v24);
                  *(_QWORD *)this = v25;
                  *((_QWORD *)a2 + 9) = v26;
                  return v6;
                }
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinSerial::Deserializer::Deserialize();
              }
            }
          }
        }
        return 3;
      }
      v6 = v9;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
  }
  return v6;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  ZinLargeStridePoolTransform *v18;
  uint64_t v19;
  ZinLargeStridePoolTransform *v20;
  uint64_t v21;
  ZinResizeTransform *v22;
  uint64_t v23;
  ZinResizeTransform *v24;
  ZinResizeTransform *v25;
  ZinLargeStridePoolTransform *v26[4];
  int v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[26];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  if (*a2)
    return 3;
  v7 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 1);
  v8 = *(_QWORD *)a1 + 1;
  if (v6 && v8 > *((_QWORD *)a1 + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v9 = *(unsigned __int8 *)(v6 + v7);
  *(_QWORD *)a1 = v8;
  if (!v9)
  {
    v2 = 0;
    *a2 = 0;
    return v2;
  }
  v10 = v7 + 5;
  if (v10 > *((_QWORD *)a1 + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v11 = *(_DWORD *)(v6 + v8);
  *(_QWORD *)a1 = v10;
  v2 = 3;
  switch(v11)
  {
    case 0:
      std::make_unique[abi:ne180100]<ZinLargeStridePoolTransform>(v26);
      v2 = ZinSerial::Deserializer::Deserialize(a1, v26[0]);
      if (!(_DWORD)v2)
        goto LABEL_27;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      goto LABEL_29;
    case 1:
      v12 = operator new();
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = &off_24C0233A8;
      *(_QWORD *)(v12 + 8) = v12 + 16;
      v2 = ZinSerial::Deserializer::Deserialize(a1, (ZinSpatialSplitTransform *)v12);
      if ((_DWORD)v2)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      else
      {
        v21 = *a2;
        *a2 = v12;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        return 0;
      }
      return v2;
    case 2:
      v28 = 0u;
      v29 = 0u;
      v30 = -1;
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      memset(v34, 0, sizeof(v34));
      v26[0] = (ZinLargeStridePoolTransform *)&off_24C01F040;
      memset(&v26[1], 0, 24);
      v35 = 0x100000001;
      __asm { FMOV            V0.2S, #-1.0 }
      v36 = _D0;
      v38 = 0;
      v39 = 0;
      v37 = 0;
      v40 = 0;
      v27 = 41;
      std::make_unique[abi:ne180100]<ZinResizeTransform,ZinIrResizeUnitInfo &>((const ZinIrResizeUnitInfo *)v26, &v25);
      v2 = ZinSerial::Deserializer::Deserialize(a1, v25);
      if ((_DWORD)v2)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        v22 = v25;
        v25 = 0;
        v23 = *a2;
        *a2 = (uint64_t)v22;
        if (!v23)
          goto LABEL_38;
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      v24 = v25;
      v25 = 0;
      if (v24)
        (*(void (**)(ZinResizeTransform *))(*(_QWORD *)v24 + 8))(v24);
LABEL_38:
      ZinIrResizeUnitInfo::~ZinIrResizeUnitInfo((ZinIrResizeUnitInfo *)v26);
      return v2;
    case 3:
      std::make_unique[abi:ne180100]<ZinPixelShuffleUnshuffleTransform>((uint64_t *)v26);
      v2 = ZinSerial::Deserializer::Deserialize(a1, v26[0]);
      if ((_DWORD)v2)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
LABEL_27:
        v18 = v26[0];
        v26[0] = 0;
        v19 = *a2;
        *a2 = (uint64_t)v18;
        if (!v19)
          return v2;
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
LABEL_29:
      v20 = v26[0];
      v26[0] = 0;
      if (v20)
        (*(void (**)(ZinLargeStridePoolTransform *))(*(_QWORD *)v20 + 8))(v20);
      break;
    case 4:
      return v2;
    default:
      return 0;
  }
  return v2;
}

void sub_206ED18BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  ZinIrResizeUnitInfo::~ZinIrResizeUnitInfo((ZinIrResizeUnitInfo *)va);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinLargeStridePoolTransform>(ZinLargeStridePoolTransform **a1@<X8>)
{
  ZinLargeStridePoolTransform *v2;

  v2 = (ZinLargeStridePoolTransform *)operator new();
  ZinLargeStridePoolTransform::ZinLargeStridePoolTransform(v2);
  *a1 = v2;
}

void sub_206ED1964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C4053614EC0);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinLargeStridePoolTransform *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = ZinSerial::Deserializer::Deserialize(this, (ZinLargeStridePoolTransform *)((char *)a2 + 8));
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v7 = *(_QWORD *)this;
    v6 = *((_QWORD *)this + 1);
    if (v6 && (unint64_t)(v7 + 1) > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    else
    {
      v5 = 0;
      *((_BYTE *)a2 + 176) = *(_BYTE *)(v6 + v7);
      ++*(_QWORD *)this;
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinSpatialSplitTransform *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = ZinSerial::Deserializer::Deserialize<unsigned long long>((unint64_t *)this, (uint64_t)a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v5 = ZinSerial::Deserializer::Deserialize<ZinSpatialSplitTransformPadding>((unint64_t *)this, (uint64_t)a2 + 32);
    if ((_DWORD)v5 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v5;
}

ZinResizeTransform *std::make_unique[abi:ne180100]<ZinResizeTransform,ZinIrResizeUnitInfo &>@<X0>(const ZinIrResizeUnitInfo *a1@<X0>, ZinResizeTransform **a2@<X8>)
{
  ZinResizeTransform *v4;
  ZinResizeTransform *result;

  v4 = (ZinResizeTransform *)operator new();
  result = ZinResizeTransform::ZinResizeTransform(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206ED1B0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40487B577ELL);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinResizeTransform *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char **v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;

  v4 = *((_QWORD *)this + 1);
  v5 = *(_QWORD *)this + 4;
  if (v4 && v5 > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v6 = *(unsigned int *)(v4 + *(_QWORD *)this);
  *(_QWORD *)this = v5;
  v7 = *((_QWORD *)a2 + 25);
  v8 = (char **)((char *)a2 + 184);
  v9 = (uint64_t *)*((_QWORD *)a2 + 24);
  if ((unint64_t)v9 >= v7)
  {
    v11 = ((char *)v9 - *v8) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      goto LABEL_95;
    v12 = v7 - (_QWORD)*v8;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)a2 + 200, v14);
    else
      v15 = 0;
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = (v6 << 32) | 4;
    v10 = v16 + 1;
    v19 = (char *)*((_QWORD *)a2 + 23);
    v18 = (char *)*((_QWORD *)a2 + 24);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = *v8;
    }
    *((_QWORD *)a2 + 23) = v16;
    *((_QWORD *)a2 + 24) = v10;
    *((_QWORD *)a2 + 25) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v9 = (v6 << 32) | 4;
    v10 = v9 + 1;
  }
  *((_QWORD *)a2 + 24) = v10;
  v21 = *((_QWORD *)a2 + 25);
  if ((unint64_t)v10 < v21)
  {
    *v10 = (v6 << 32) | 3;
    v22 = v10 + 1;
    goto LABEL_37;
  }
  v23 = ((char *)v10 - *v8) >> 3;
  if ((unint64_t)(v23 + 1) >> 61)
LABEL_95:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v24 = v21 - (_QWORD)*v8;
  v25 = v24 >> 2;
  if (v24 >> 2 <= (unint64_t)(v23 + 1))
    v25 = v23 + 1;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v26 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v26 = v25;
  if (v26)
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)a2 + 200, v26);
  else
    v27 = 0;
  v28 = (uint64_t *)&v27[8 * v23];
  v29 = &v27[8 * v26];
  *v28 = (v6 << 32) | 3;
  v22 = v28 + 1;
  v31 = (char *)*((_QWORD *)a2 + 23);
  v30 = (char *)*((_QWORD *)a2 + 24);
  if (v30 != v31)
  {
    do
    {
      v32 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      *--v28 = v32;
    }
    while (v30 != v31);
    v30 = *v8;
  }
  *((_QWORD *)a2 + 23) = v28;
  *((_QWORD *)a2 + 24) = v22;
  *((_QWORD *)a2 + 25) = v29;
  if (v30)
    operator delete(v30);
LABEL_37:
  *((_QWORD *)a2 + 24) = v22;
  v33 = *((_QWORD *)this + 1);
  v34 = *(_QWORD *)this + 4;
  if (v33 && v34 > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v35 = *(unsigned int *)(v33 + *(_QWORD *)this);
  *(_QWORD *)this = v34;
  v36 = *((_QWORD *)a2 + 19);
  v37 = (char **)((char *)a2 + 136);
  v38 = (uint64_t *)*((_QWORD *)a2 + 18);
  if ((unint64_t)v38 >= v36)
  {
    v40 = ((char *)v38 - *v37) >> 3;
    if ((unint64_t)(v40 + 1) >> 61)
      goto LABEL_96;
    v41 = v36 - (_QWORD)*v37;
    v42 = v41 >> 2;
    if (v41 >> 2 <= (unint64_t)(v40 + 1))
      v42 = v40 + 1;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
      v43 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v43 = v42;
    if (v43)
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)a2 + 152, v43);
    else
      v44 = 0;
    v45 = (uint64_t *)&v44[8 * v40];
    v46 = &v44[8 * v43];
    *v45 = (v35 << 32) | 4;
    v39 = v45 + 1;
    v48 = (char *)*((_QWORD *)a2 + 17);
    v47 = (char *)*((_QWORD *)a2 + 18);
    if (v47 != v48)
    {
      do
      {
        v49 = *((_QWORD *)v47 - 1);
        v47 -= 8;
        *--v45 = v49;
      }
      while (v47 != v48);
      v47 = *v37;
    }
    *((_QWORD *)a2 + 17) = v45;
    *((_QWORD *)a2 + 18) = v39;
    *((_QWORD *)a2 + 19) = v46;
    if (v47)
      operator delete(v47);
  }
  else
  {
    *v38 = (v35 << 32) | 4;
    v39 = v38 + 1;
  }
  *((_QWORD *)a2 + 18) = v39;
  v50 = *((_QWORD *)a2 + 19);
  if ((unint64_t)v39 < v50)
  {
    *v39 = (v35 << 32) | 3;
    v51 = v39 + 1;
    goto LABEL_73;
  }
  v52 = ((char *)v39 - *v37) >> 3;
  if ((unint64_t)(v52 + 1) >> 61)
LABEL_96:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v53 = v50 - (_QWORD)*v37;
  v54 = v53 >> 2;
  if (v53 >> 2 <= (unint64_t)(v52 + 1))
    v54 = v52 + 1;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v54;
  if (v55)
    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)a2 + 152, v55);
  else
    v56 = 0;
  v57 = (uint64_t *)&v56[8 * v52];
  v58 = &v56[8 * v55];
  *v57 = (v35 << 32) | 3;
  v51 = v57 + 1;
  v60 = (char *)*((_QWORD *)a2 + 17);
  v59 = (char *)*((_QWORD *)a2 + 18);
  if (v59 != v60)
  {
    do
    {
      v61 = *((_QWORD *)v59 - 1);
      v59 -= 8;
      *--v57 = v61;
    }
    while (v59 != v60);
    v59 = *v37;
  }
  *((_QWORD *)a2 + 17) = v57;
  *((_QWORD *)a2 + 18) = v51;
  *((_QWORD *)a2 + 19) = v58;
  if (v59)
    operator delete(v59);
LABEL_73:
  *((_QWORD *)a2 + 18) = v51;
  v63 = *(_QWORD *)this;
  v62 = *((_QWORD *)this + 1);
  if (v62 && (unint64_t)(v63 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_DWORD *)a2 + 19) = *(_DWORD *)(v62 + v63);
  v65 = *(_QWORD *)this;
  v64 = *((_QWORD *)this + 1);
  v66 = *(_QWORD *)this + 4;
  *(_QWORD *)this = v66;
  if (v64 && (unint64_t)(v65 + 12) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_QWORD *)a2 + 27) = *(_QWORD *)(v64 + v66);
  v68 = *(_QWORD *)this;
  v67 = *((_QWORD *)this + 1);
  v69 = *(_QWORD *)this + 8;
  *(_QWORD *)this = v69;
  if (v67 && (unint64_t)(v68 + 16) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_QWORD *)a2 + 28) = *(_QWORD *)(v67 + v69);
  v71 = *(_QWORD *)this;
  v70 = *((_QWORD *)this + 1);
  v72 = *(_QWORD *)this + 8;
  *(_QWORD *)this = v72;
  if (v70 && (unint64_t)(v71 + 16) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_QWORD *)a2 + 29) = *(_QWORD *)(v70 + v72);
  v74 = *(_QWORD *)this;
  v73 = *((_QWORD *)this + 1);
  v75 = *(_QWORD *)this + 8;
  *(_QWORD *)this = v75;
  if (v73 && (unint64_t)(v74 + 16) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  result = 0;
  *((_QWORD *)a2 + 30) = *(_QWORD *)(v73 + v75);
  *(_QWORD *)this += 8;
  return result;
}

double std::make_unique[abi:ne180100]<ZinPixelShuffleUnshuffleTransform>@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)v2 = &off_24C025C20;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v2 + 20) = 0x100000001;
  *(_DWORD *)(v2 + 28) = 1;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 32) = v2 + 40;
  *a1 = v2;
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinPixelShuffleUnshuffleTransform *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((_QWORD *)this + 1);
  v5 = *(_QWORD *)this + 8;
  if (v4 && v5 > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + *(_QWORD *)this);
    *(_QWORD *)this = v5;
    *((_QWORD *)a2 + 1) = v7;
    v8 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 4);
    if ((_DWORD)v8)
    {
      v6 = v8;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      v6 = ZinSerial::Deserializer::Deserialize<unsigned long long>((unint64_t *)this, (uint64_t)a2 + 32);
      if ((_DWORD)v6 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
  }
  return v6;
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned long long>(unint64_t *a1, uint64_t a2)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a2 + 16))
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(_DWORD *)(v5 + *a1);
  *a1 = v6;
  if (v7)
  {
    while (1)
    {
      v10 = 0;
      v8 = a1[1];
      v9 = *a1 + 8;
      if (v8)
      {
        if (v9 > a1[2])
          break;
      }
      v10 = *(_QWORD *)(v8 + *a1);
      *a1 = v9;
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)a2, (unint64_t *)&v10, &v10);
      if (!--v7)
        return 0;
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinSpatialSplitTransformPadding>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  _OWORD v8[2];

  if (*(_BYTE *)(a2 + 28))
    return 3;
  v4 = a1[1];
  v5 = *a1 + 1;
  if (v4)
  {
    if (v5 > a1[2])
      return 3;
  }
  v6 = *(unsigned __int8 *)(v4 + *a1);
  *a1 = v5;
  if (!v6)
    return 0;
  memset(v8, 0, 28);
  result = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinIrPadding *)v8);
  if (!(_DWORD)result)
  {
    v7 = *(unsigned __int8 *)(a2 + 28);
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)v8 + 12);
    if (!v7)
      *(_BYTE *)(a2 + 28) = 1;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrDynamicGOCInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_DWORD *)a2 + 3) = *(_DWORD *)(v4 + v5);
  v7 = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  v8 = *(_QWORD *)this + 4;
  *(_QWORD *)this = v8;
  if (v6 && (unint64_t)(v7 + 5) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_BYTE *)a2 + 16) = *(_BYTE *)(v6 + v8);
  v10 = *(_QWORD *)this;
  v9 = *((_QWORD *)this + 1);
  v11 = *(_QWORD *)this + 1;
  *(_QWORD *)this = v11;
  if (v9 && (unint64_t)(v10 + 2) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_BYTE *)a2 + 17) = *(_BYTE *)(v9 + v11);
  ++*(_QWORD *)this;
  v12 = ZinSerial::Deserializer::Deserialize(this, (ZinIrDynamicGOCInfo *)((char *)a2 + 24));
  if (!(_DWORD)v12)
  {
    v15 = *(_QWORD *)this;
    v14 = *((_QWORD *)this + 1);
    if (v14 && (unint64_t)(v15 + 1) > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *((_BYTE *)a2 + 80) = *(_BYTE *)(v14 + v15);
      v17 = *(_QWORD *)this;
      v16 = *((_QWORD *)this + 1);
      v18 = *(_QWORD *)this + 1;
      *(_QWORD *)this = v18;
      if (v16 && (unint64_t)(v17 + 2) > *((_QWORD *)this + 2))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        *((_BYTE *)a2 + 81) = *(_BYTE *)(v16 + v18);
        v20 = *(_QWORD *)this;
        v19 = *((_QWORD *)this + 1);
        v21 = *(_QWORD *)this + 1;
        *(_QWORD *)this = v21;
        if (!v19 || (unint64_t)(v20 + 2) <= *((_QWORD *)this + 2))
        {
          v13 = 0;
          *((_BYTE *)a2 + 82) = *(_BYTE *)(v19 + v21);
          ++*(_QWORD *)this;
          return v13;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
    }
    return 3;
  }
  v13 = v12;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinSerial::Deserializer::Deserialize();
  return v13;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, DimensionOrderHint *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  void *__p;
  _BYTE *v10;
  int v11;
  std::vector<int> v12;

  memset(&v12, 0, sizeof(v12));
  v4 = ZinSerial::Deserializer::Deserialize<ZinDramDependentSrcType>((unint64_t *)this, &v12);
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v5 = *((_QWORD *)this + 1);
    v6 = *(_QWORD *)this + 4;
    if (v5 && v6 > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      v4 = 3;
    }
    else
    {
      v7 = *(_DWORD *)(v5 + *(_QWORD *)this);
      *(_QWORD *)this = v6;
      DimensionOrderHint::DimensionOrderHint((uint64_t)&__p, (uint64_t)&v12, v7);
      if (&__p != (void **)a2)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2, (char *)__p, (uint64_t)v10, (v10 - (_BYTE *)__p) >> 2);
      *((_DWORD *)a2 + 6) = v11;
      if (__p)
      {
        v10 = __p;
        operator delete(__p);
      }
      v4 = 0;
    }
  }
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
  return v4;
}

void sub_206ED2658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, void **a2)
{
  uint64_t v4;
  void *v6;
  int v7;
  void *__p;
  _BYTE *v9;
  int v10;
  void *v11[4];

  DimensionOrderHint::DimensionOrderHint(v11, 0);
  v4 = ZinSerial::Deserializer::Deserialize(this, (DimensionOrderHint *)v11);
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    ZinIrReshapeInfo::ZinIrReshapeInfo((ZinIrReshapeInfo *)&v6, (const DimensionOrderHint *)v11);
    *((_DWORD *)a2 + 2) = v7;
    if (&v6 != a2)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2 + 16, (char *)__p, (uint64_t)v9, (v9 - (_BYTE *)__p) >> 2);
    *((_DWORD *)a2 + 10) = v10;
    v6 = &unk_24C01BB08;
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v6);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  return v4;
}

void sub_206ED2774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  ZinIrReshapeInfo::~ZinIrReshapeInfo((ZinIrReshapeInfo *)&a9);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrDMAConvertInfo *a2)
{
  uint64_t v3;
  int v4;
  _DWORD v6[4];
  char v7;
  uint64_t v8;

  LOBYTE(v8) = 0;
  BYTE4(v8) = 0;
  v3 = ZinSerial::Deserializer::Deserialize<unsigned int>((unint64_t *)this, (uint64_t)&v8);
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    ZinIrDMAConvertInfo::ZinIrDMAConvertInfo((uint64_t)v6, v8);
    v4 = v6[3];
    *((_DWORD *)a2 + 2) = v6[2];
    *((_DWORD *)a2 + 3) = v4;
    *((_BYTE *)a2 + 16) = v7;
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v6);
  }
  return v3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrStochasticRoundInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_DWORD *)a2 + 3) = *(_DWORD *)(v4 + v5);
  *(_QWORD *)this += 4;
  v6 = ZinSerial::Deserializer::Deserialize<unsigned int,4ul>((unint64_t *)this, (_OWORD *)a2 + 1);
  if (!(_DWORD)v6)
  {
    v8 = *((_QWORD *)this + 1);
    v9 = *(_QWORD *)this + 8;
    if (!v8 || v9 <= *((_QWORD *)this + 2))
    {
      v7 = 0;
      v10 = *(_QWORD *)(v8 + *(_QWORD *)this);
      *(_QWORD *)this = v9;
      *((_QWORD *)a2 + 4) = v10;
      return v7;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v7 = v6;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinSerial::Deserializer::Deserialize();
  return v7;
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned int,4ul>(unint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  int *begin;
  std::vector<int> __p;

  memset(&__p, 0, sizeof(__p));
  v3 = ZinSerial::Deserializer::Deserialize<ZinDramDependentSrcType>(a1, &__p);
  begin = __p.__begin_;
  if ((_DWORD)v3)
  {
    if (!__p.__begin_)
      return v3;
    goto LABEL_7;
  }
  if ((std::vector<int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) == (std::vector<int>::pointer)16)
  {
    v3 = 0;
    *a2 = *(_OWORD *)__p.__begin_;
LABEL_7:
    __p.__end_ = begin;
    operator delete(begin);
    return v3;
  }
  v3 = 3;
  if (__p.__begin_)
    goto LABEL_7;
  return v3;
}

void sub_206ED2990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *a1, ZinIrPadding *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = ZinSerial::Deserializer::Deserialize(a1, a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    v7 = *(_QWORD *)a1;
    v6 = *((_QWORD *)a1 + 1);
    if (v6 && (unint64_t)(v7 + 4) > *((_QWORD *)a1 + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
      return 3;
    }
    else
    {
      v5 = 0;
      *((_DWORD *)a2 + 6) = *(_DWORD *)(v6 + v7);
      *(_QWORD *)a1 += 4;
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrActivationParams *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  v4 = *(_DWORD *)(v2 + v3);
  *(_DWORD *)a2 = v4;
  v6 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)this + 4;
  *(_QWORD *)this = v7;
  if (v5 && (unint64_t)(v6 + 8) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_DWORD *)a2 + 1) = *(_DWORD *)(v5 + v7);
  v9 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 1);
  v10 = *(_QWORD *)this + 4;
  *(_QWORD *)this = v10;
  if (v8 && (unint64_t)(v9 + 8) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_DWORD *)a2 + 2) = *(_DWORD *)(v8 + v10);
  v12 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 1);
  v13 = *(_QWORD *)this + 4;
  *(_QWORD *)this = v13;
  if (v4 != 31)
  {
    if (v11 && (unint64_t)(v12 + 8) > *((_QWORD *)this + 2))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinSerial::Deserializer::Deserialize();
    }
    else
    {
      *((_DWORD *)a2 + 3) = *(_DWORD *)(v11 + v13);
      v17 = *(_QWORD *)this;
      v16 = *((_QWORD *)this + 1);
      v18 = *(_QWORD *)this + 4;
      *(_QWORD *)this = v18;
      if (v16 && (unint64_t)(v17 + 8) > *((_QWORD *)this + 2))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinSerial::Deserializer::Deserialize();
      }
      else
      {
        *((_DWORD *)a2 + 4) = *(_DWORD *)(v16 + v18);
        v20 = *(_QWORD *)this;
        v19 = *((_QWORD *)this + 1);
        v21 = *(_QWORD *)this + 4;
        *(_QWORD *)this = v21;
        if (v19 && (unint64_t)(v20 + 8) > *((_QWORD *)this + 2))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
        else
        {
          *((_DWORD *)a2 + 5) = *(_DWORD *)(v19 + v21);
          v23 = *(_QWORD *)this;
          v22 = *((_QWORD *)this + 1);
          v24 = *(_QWORD *)this + 4;
          *(_QWORD *)this = v24;
          if (!v22 || (unint64_t)(v23 + 8) <= *((_QWORD *)this + 2))
          {
            v15 = 0;
            *((_DWORD *)a2 + 6) = *(_DWORD *)(v22 + v24);
            *(_QWORD *)this += 4;
            return v15;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinSerial::Deserializer::Deserialize();
        }
      }
    }
    return 3;
  }
  if (v11 && (unint64_t)(v12 + 8) > *((_QWORD *)this + 2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
    return 3;
  }
  *((_DWORD *)a2 + 3) = *(_DWORD *)(v11 + v13);
  *(_QWORD *)this += 4;
  v14 = *((_DWORD *)a2 + 3);
  if (v14 == 1)
  {
    v15 = ZinSerial::Deserializer::Deserialize<unsigned short,43ul>((unint64_t *)this, (char *)a2 + 16);
    if ((_DWORD)v15 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  else
  {
    if (v14)
      ZinAssertImpl("Unknown custom LUT params version");
    v15 = ZinSerial::Deserializer::Deserialize<unsigned short,75ul>((unint64_t *)this, (char *)a2 + 16);
    if ((_DWORD)v15 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::Deserializer::Deserialize();
  }
  return v15;
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned short,75ul>(unint64_t *a1, void *a2)
{
  uint64_t v3;
  _BYTE *v4;
  void *__src;
  _BYTE *v7;
  uint64_t v8;

  __src = 0;
  v7 = 0;
  v8 = 0;
  v3 = ZinSerial::Deserializer::Deserialize<unsigned short>(a1, (uint64_t)&__src);
  v4 = __src;
  if ((_DWORD)v3)
  {
    if (!__src)
      return v3;
    goto LABEL_7;
  }
  if (v7 - (_BYTE *)__src == 150)
  {
    memmove(a2, __src, 0x96uLL);
    v3 = 0;
LABEL_7:
    v7 = v4;
    operator delete(v4);
    return v3;
  }
  v3 = 3;
  if (__src)
    goto LABEL_7;
  return v3;
}

void sub_206ED30AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned short,43ul>(unint64_t *a1, void *a2)
{
  uint64_t v3;
  _BYTE *v4;
  void *__src;
  _BYTE *v7;
  uint64_t v8;

  __src = 0;
  v7 = 0;
  v8 = 0;
  v3 = ZinSerial::Deserializer::Deserialize<unsigned short>(a1, (uint64_t)&__src);
  v4 = __src;
  if ((_DWORD)v3)
  {
    if (!__src)
      return v3;
    goto LABEL_7;
  }
  if (v7 - (_BYTE *)__src == 86)
  {
    memmove(a2, __src, 0x56uLL);
    v3 = 0;
LABEL_7:
    v7 = v4;
    operator delete(v4);
    return v3;
  }
  v3 = 3;
  if (__src)
    goto LABEL_7;
  return v3;
}

void sub_206ED3158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinMirUnitBasicBlock::EdgeInfo>(uint64_t *a1, void **a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;

  if (a2[1] != *a2)
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<ZinMirUnitBasicBlock::EdgeInfo>::reserve(a2, v7);
  if (!(_DWORD)v7)
    return 0;
  v8 = 0;
  while (1)
  {
    v21 = 0uLL;
    result = ZinSerial::Deserializer::Deserialize(a1, (uint64_t)&v21);
    if ((_DWORD)result)
      break;
    v10 = (char *)a2[1];
    v9 = (unint64_t)a2[2];
    if ((unint64_t)v10 >= v9)
    {
      v11 = (v10 - (_BYTE *)*a2) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v13 = v9 - (_QWORD)*a2;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a2 + 2), v14);
      else
        v15 = 0;
      v16 = &v15[16 * v11];
      *(_OWORD *)v16 = v21;
      v18 = (char *)*a2;
      v17 = (char *)a2[1];
      v19 = v16;
      if (v17 != *a2)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        v17 = (char *)*a2;
      }
      v20 = v16 + 16;
      *a2 = v19;
      a2[1] = v16 + 16;
      a2[2] = &v15[16 * v14];
      if (v17)
        operator delete(v17);
      a2[1] = v20;
    }
    else
    {
      *(_OWORD *)v10 = v21;
      a2[1] = v10 + 16;
    }
    if (++v8 == (_DWORD)v7)
      return 0;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinMirDmaConfig::DramAccess>(unint64_t *a1, void **a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  char *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  if (a2[1] != *a2)
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<ZinMirDmaConfig::DramAccess>::reserve(a2, v7);
  if (!(_DWORD)v7)
    return 0;
  v8 = 0;
  while (1)
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    result = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinMirDmaConfig::DramAccess *)&v31);
    if ((_DWORD)result)
      break;
    v9 = (char *)a2[1];
    v10 = (unint64_t)a2[2];
    if ((unint64_t)v9 >= v10)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (_BYTE *)*a2) >> 5);
      v15 = v14 + 1;
      if (v14 + 1 > 0x2AAAAAAAAAAAAAALL)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a2) >> 5);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x155555555555555)
        v17 = 0x2AAAAAAAAAAAAAALL;
      else
        v17 = v15;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>>((uint64_t)(a2 + 2), v17);
      else
        v18 = 0;
      v19 = &v18[96 * v14];
      v20 = v32;
      *(_OWORD *)v19 = v31;
      *((_OWORD *)v19 + 1) = v20;
      v21 = v36;
      *((_OWORD *)v19 + 4) = v35;
      *((_OWORD *)v19 + 5) = v21;
      v22 = v34;
      *((_OWORD *)v19 + 2) = v33;
      *((_OWORD *)v19 + 3) = v22;
      v24 = (char *)*a2;
      v23 = (char *)a2[1];
      v25 = v19;
      if (v23 != *a2)
      {
        do
        {
          v26 = *((_OWORD *)v23 - 5);
          *((_OWORD *)v25 - 6) = *((_OWORD *)v23 - 6);
          *((_OWORD *)v25 - 5) = v26;
          v27 = *((_OWORD *)v23 - 4);
          v28 = *((_OWORD *)v23 - 3);
          v29 = *((_OWORD *)v23 - 1);
          *((_OWORD *)v25 - 2) = *((_OWORD *)v23 - 2);
          *((_OWORD *)v25 - 1) = v29;
          *((_OWORD *)v25 - 4) = v27;
          *((_OWORD *)v25 - 3) = v28;
          v25 -= 96;
          v23 -= 96;
        }
        while (v23 != v24);
        v23 = (char *)*a2;
      }
      v30 = v19 + 96;
      *a2 = v25;
      a2[1] = v19 + 96;
      a2[2] = &v18[96 * v17];
      if (v23)
        operator delete(v23);
      a2[1] = v30;
    }
    else
    {
      v11 = v34;
      *((_OWORD *)v9 + 2) = v33;
      *((_OWORD *)v9 + 3) = v11;
      v12 = v36;
      *((_OWORD *)v9 + 4) = v35;
      *((_OWORD *)v9 + 5) = v12;
      v13 = v32;
      *(_OWORD *)v9 = v31;
      *((_OWORD *)v9 + 1) = v13;
      a2[1] = v9 + 96;
    }
    if (++v8 == (_DWORD)v7)
      return 0;
  }
  return result;
}

void std::vector<ZinMirDmaConfig::DramAccess>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 96;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>>(v3, a2);
    v7 = &v6[96 * v5];
    v9 = &v6[96 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v13;
        v14 = *((_OWORD *)v10 - 4);
        v15 = *((_OWORD *)v10 - 3);
        v16 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v16;
        *((_OWORD *)v12 - 4) = v14;
        *((_OWORD *)v12 - 3) = v15;
        v12 -= 96;
        v10 -= 96;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinDramDependentInfo>(unint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  void *__p[8];
  __int128 v15;

  if (a2[1] != *a2)
    return 3;
  v7 = a1[1];
  v8 = *a1 + 4;
  if (v7)
  {
    if (v8 > a1[2])
      return 3;
  }
  v9 = *(unsigned int *)(v7 + *a1);
  *a1 = v8;
  std::vector<ZinDramDependentInfo>::reserve(a2, v9);
  if (!(_DWORD)v9)
    return 0;
  while (1)
  {
    v15 = 0u;
    memset(__p, 0, sizeof(__p));
    DWORD2(v15) = 1065353216;
    v10 = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinDramDependentInfo *)__p);
    v11 = v10;
    v3 = v10;
    if (!(_DWORD)v10)
    {
      v12 = a2[1];
      if (v12 >= a2[2])
      {
        v13 = std::vector<ZinDramDependentInfo>::__push_back_slow_path<ZinDramDependentInfo>(a2, (uint64_t)__p);
      }
      else
      {
        *(_DWORD *)v12 = __p[0];
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 8) = 0;
        *(_OWORD *)(v12 + 8) = *(_OWORD *)&__p[1];
        *(void **)(v12 + 24) = __p[3];
        memset(&__p[1], 0, 24);
        *(_DWORD *)(v12 + 32) = __p[4];
        std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(v12 + 40, (uint64_t *)&__p[5]);
        v13 = v12 + 80;
      }
      a2[1] = v13;
      v3 = v2;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__p[5]);
    if (__p[1])
    {
      __p[2] = __p[1];
      operator delete(__p[1]);
    }
    if (v11)
      break;
    v2 = v3;
    LODWORD(v9) = v9 - 1;
    if (!(_DWORD)v9)
      return 0;
  }
  return v3;
}

void sub_206ED388C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ZinDramDependentInfo::~ZinDramDependentInfo((ZinDramDependentInfo *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinDramDependentInfo>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 80 * v6;
    std::vector<ZinDramDependentInfo>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<ZinDramDependentInfo>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_206ED393C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinDramDependentInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinDramDependentInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinDramDependentInfo>,std::reverse_iterator<ZinDramDependentInfo*>,std::reverse_iterator<ZinDramDependentInfo*>,std::reverse_iterator<ZinDramDependentInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinDramDependentInfo>,std::reverse_iterator<ZinDramDependentInfo*>,std::reverse_iterator<ZinDramDependentInfo*>,std::reverse_iterator<ZinDramDependentInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      v13 = a3 + v11;
      *(_DWORD *)(v12 - 80) = *(_DWORD *)(a3 + v11 - 80);
      *(_QWORD *)(v12 - 64) = 0;
      *(_QWORD *)(v12 - 56) = 0;
      *(_QWORD *)(v12 - 72) = 0;
      *(_OWORD *)(v12 - 72) = *(_OWORD *)(a3 + v11 - 72);
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(a3 + v11 - 56);
      *(_QWORD *)(v13 - 72) = 0;
      *(_QWORD *)(v13 - 64) = 0;
      *(_QWORD *)(v13 - 56) = 0;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a7 + v11 - 40, (uint64_t *)(a3 + v11 - 40));
      v11 -= 80;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

