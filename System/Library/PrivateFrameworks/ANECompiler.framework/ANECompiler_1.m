BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::glop::`anonymous namespace'::MatrixEntry *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  signed __int32 v7;
  __n128 *v8;
  BOOL v9;
  _BOOL4 v10;
  __n128 v11;
  __n128 *v12;
  signed __int32 v13;
  signed __int32 v14;
  BOOL v15;
  __n128 *v16;
  signed __int32 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  __n128 v20;
  __n128 *v21;
  signed __int32 v22;
  __n128 *v23;
  signed __int32 v24;
  signed __int32 v25;
  signed __int32 v26;
  signed __int32 v27;
  BOOL v28;
  signed __int32 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  __n128 v32;
  __n128 *v33;
  __n128 *v34;
  __n128 *v35;
  signed __int32 v36;
  signed __int32 v37;
  __n128 *v38;
  signed __int32 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  __n128 v42;
  signed __int32 v43;
  signed __int32 v44;
  _BOOL4 v45;
  __n128 v46;
  signed __int32 v47;
  signed __int32 v48;
  _BOOL4 v49;
  __n128 v50;
  signed __int32 v51;
  _BOOL4 v52;
  __n128 v53;
  __n128 v54;
  signed __int32 v55;
  _BOOL4 v56;
  __n128 v57;
  __n128 v58;
  signed __int32 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  __n128 v62;
  __n128 v63;
  signed __int32 v64;
  signed __int32 v65;
  _BOOL4 v66;
  __n128 v67;
  signed __int32 v68;
  _BOOL4 v69;
  __n128 *v70;
  uint64_t v71;
  int v72;
  signed __int32 v73;
  signed __int32 v74;
  signed __int32 v75;
  _BOOL4 v76;
  _BOOL4 v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  signed __int32 v81;
  BOOL v82;
  BOOL v83;
  char *v84;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2[-1].n128_i32[0];
      v8 = a2 - 1;
      v9 = v7 == a1->n128_u32[0];
      v10 = v7 < (signed __int32)a1->n128_u32[0];
      if (v9)
        v10 = (signed __int32)a2[-1].n128_u32[1] < (signed __int32)a1->n128_u32[1];
      if (v10)
      {
        v11 = *a1;
        *a1 = *v8;
        *v8 = v11;
      }
      return result;
    case 3:
      v12 = a1 + 1;
      v13 = a1[1].n128_i32[0];
      v14 = a1[1].n128_i32[1];
      v15 = v13 < (signed __int32)a1->n128_u32[0];
      if (v13 == a1->n128_u32[0])
        v15 = v14 < (signed __int32)a1->n128_u32[1];
      v17 = a2[-1].n128_i32[0];
      v16 = a2 - 1;
      v18 = (signed __int32)a2[-1].n128_u32[1] < v14;
      v9 = v17 == v13;
      v19 = v17 < v13;
      if (v9)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = *a1;
          *a1 = *v16;
LABEL_48:
          *v16 = v20;
          return result;
        }
        v63 = *a1;
        *a1 = *v12;
        *v12 = v63;
        v64 = a2[-1].n128_i32[0];
        v65 = a1[1].n128_i32[0];
        v9 = v64 == v65;
        v66 = v64 < v65;
        if (v9)
          v66 = (signed __int32)a2[-1].n128_u32[1] < (signed __int32)a1[1].n128_u32[1];
        if (v66)
        {
          v20 = *v12;
          *v12 = *v16;
          goto LABEL_48;
        }
      }
      else if (v19)
      {
        v54 = *v12;
        *v12 = *v16;
        *v16 = v54;
        v55 = a1[1].n128_i32[0];
        v9 = v55 == a1->n128_u32[0];
        v56 = v55 < (signed __int32)a1->n128_u32[0];
        if (v9)
          v56 = (signed __int32)a1[1].n128_u32[1] < (signed __int32)a1->n128_u32[1];
        if (v56)
        {
          v57 = *a1;
          *a1 = *v12;
          *v12 = v57;
        }
      }
      return result;
    case 4:
      return 1;
    case 5:
      v33 = a1 + 1;
      v34 = a1 + 2;
      v35 = a1 + 3;
      v36 = a2[-1].n128_i32[0];
      v37 = a2[-1].n128_i32[1];
      v38 = a2 - 1;
      v39 = a1[3].n128_i32[0];
      v40 = v37 < (signed __int32)a1[3].n128_u32[1];
      v9 = v36 == v39;
      v41 = v36 < v39;
      if (v9)
        v41 = v40;
      if (v41)
      {
        v42 = *v35;
        *v35 = *v38;
        *v38 = v42;
        v43 = a1[3].n128_i32[0];
        v44 = a1[2].n128_i32[0];
        v9 = v43 == v44;
        v45 = v43 < v44;
        if (v9)
          v45 = (signed __int32)a1[3].n128_u32[1] < (signed __int32)a1[2].n128_u32[1];
        if (v45)
        {
          v46 = *v34;
          *v34 = *v35;
          *v35 = v46;
          v47 = a1[2].n128_i32[0];
          v48 = a1[1].n128_i32[0];
          v9 = v47 == v48;
          v49 = v47 < v48;
          if (v9)
            v49 = (signed __int32)a1[2].n128_u32[1] < (signed __int32)a1[1].n128_u32[1];
          if (v49)
          {
            v50 = *v33;
            *v33 = *v34;
            *v34 = v50;
            v51 = a1[1].n128_i32[0];
            v9 = v51 == a1->n128_u32[0];
            v52 = v51 < (signed __int32)a1->n128_u32[0];
            if (v9)
              v52 = (signed __int32)a1[1].n128_u32[1] < (signed __int32)a1->n128_u32[1];
            if (v52)
            {
              v53 = *a1;
              *a1 = *v33;
              *v33 = v53;
            }
          }
        }
      }
      return 1;
    default:
      v21 = a1 + 2;
      v22 = a1[2].n128_i32[0];
      v23 = a1 + 1;
      v24 = a1[1].n128_i32[0];
      v25 = a1[1].n128_i32[1];
      v26 = a1->n128_u32[0];
      v27 = a1->n128_i32[1];
      v28 = v24 < (signed __int32)a1->n128_u32[0];
      if (v24 == a1->n128_u32[0])
        v28 = v25 < v27;
      v29 = a1[2].n128_i32[1];
      v30 = v29 < v25;
      v9 = v22 == v24;
      v31 = v22 < v24;
      if (v9)
        v31 = v30;
      if (v28)
      {
        if (v31)
        {
          v32 = *a1;
          *a1 = *v21;
LABEL_54:
          *v21 = v32;
          goto LABEL_55;
        }
        v67 = *a1;
        *a1 = *v23;
        *v23 = v67;
        v68 = a1[1].n128_i32[0];
        v9 = v22 == v68;
        v69 = v22 < v68;
        if (v9)
          v69 = v29 < (signed __int32)a1[1].n128_u32[1];
        if (v69)
        {
          v32 = *v23;
          *v23 = *v21;
          goto LABEL_54;
        }
      }
      else if (v31)
      {
        v58 = *v23;
        *v23 = *v21;
        *v21 = v58;
        v59 = a1[1].n128_i32[0];
        v60 = (signed __int32)a1[1].n128_u32[1] < v27;
        v9 = v59 == v26;
        v61 = v59 < v26;
        if (v9)
          v61 = v60;
        if (v61)
        {
          v62 = *a1;
          *a1 = *v23;
          *v23 = v62;
        }
      }
LABEL_55:
      v70 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v71 = 0;
      v72 = 0;
      while (1)
      {
        v73 = v70->n128_u32[0];
        v74 = v70->n128_i32[1];
        v75 = v21->n128_u32[0];
        v76 = v74 < (signed __int32)v21->n128_u32[1];
        v9 = v70->n128_u32[0] == v75;
        v77 = (signed __int32)v70->n128_u32[0] < v75;
        if (!v9)
          v76 = v77;
        if (v76)
          break;
LABEL_58:
        v21 = v70;
        v71 += 16;
        if (++v70 == a2)
          return 1;
      }
      v78 = v70->n128_u64[1];
      v79 = v71;
      do
      {
        v80 = (char *)a1 + v79;
        *(__n128 *)((char *)a1 + v79 + 48) = *(__n128 *)((char *)a1 + v79 + 32);
        if (v79 == -32)
        {
          a1->n128_u32[0] = v73;
          a1->n128_u32[1] = v74;
          a1->n128_u64[1] = v78;
          if (++v72 != 8)
            goto LABEL_58;
          return &v70[1] == a2;
        }
        v81 = *((_DWORD *)v80 + 4);
        v82 = v74 < *((_DWORD *)v80 + 5);
        v9 = v73 == v81;
        v83 = v73 < v81;
        if (!v9)
          v82 = v83;
        v79 -= 16;
      }
      while (v82);
      v84 = (char *)a1 + v79;
      *((_DWORD *)v84 + 12) = v73;
      *((_DWORD *)v84 + 13) = v74;
      *((_QWORD *)v84 + 7) = v78;
      if (++v72 != 8)
        goto LABEL_58;
      return &v70[1] == a2;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::glop::`anonymous namespace'::MatrixEntry *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  signed __int32 v5;
  signed __int32 v6;
  BOOL v7;
  _BOOL4 v8;
  BOOL v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;

  v5 = a2->n128_u32[0];
  v6 = a2->n128_i32[1];
  v7 = (signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0];
  if (a2->n128_u32[0] == a1->n128_u32[0])
    v7 = v6 < (signed __int32)a1->n128_u32[1];
  v8 = (signed __int32)a3->n128_u32[1] < v6;
  v9 = a3->n128_u32[0] == v5;
  v10 = (signed __int32)a3->n128_u32[0] < v5;
  if (v9)
    v10 = v8;
  if (v7)
  {
    if (v10)
    {
      result = *a1;
      *a1 = *a3;
LABEL_17:
      *a3 = result;
      goto LABEL_18;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    v12 = (signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0];
    if (a3->n128_u32[0] == a2->n128_u32[0])
      v12 = (signed __int32)a3->n128_u32[1] < (signed __int32)a2->n128_u32[1];
    if (v12)
    {
      result = *a2;
      *a2 = *a3;
      goto LABEL_17;
    }
  }
  else if (v10)
  {
    result = *a2;
    *a2 = *a3;
    *a3 = result;
    v11 = (signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0];
    if (a2->n128_u32[0] == a1->n128_u32[0])
      v11 = (signed __int32)a2->n128_u32[1] < (signed __int32)a1->n128_u32[1];
    if (v11)
    {
      result = *a1;
      *a1 = *a2;
      *a2 = result;
    }
  }
LABEL_18:
  v13 = (signed __int32)a4->n128_u32[0] < (signed __int32)a3->n128_u32[0];
  if (a4->n128_u32[0] == a3->n128_u32[0])
    v13 = (signed __int32)a4->n128_u32[1] < (signed __int32)a3->n128_u32[1];
  if (v13)
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    v14 = (signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0];
    if (a3->n128_u32[0] == a2->n128_u32[0])
      v14 = (signed __int32)a3->n128_u32[1] < (signed __int32)a2->n128_u32[1];
    if (v14)
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      v15 = (signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0];
      if (a2->n128_u32[0] == a1->n128_u32[0])
        v15 = (signed __int32)a2->n128_u32[1] < (signed __int32)a1->n128_u32[1];
      if (v15)
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

void std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  char v28;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 5)
  {
    if (a2)
    {
      if (((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_41;
      v16 = ((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v6 = &v5[4 * (v16 & 0xFFFFFFFFFFFFFFELL)];
      v17 = v5 + 4;
      v18 = v16 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v17 - 4) = 0;
        *v17 = 0;
        v17 += 8;
        v18 -= 2;
      }
      while (v18);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_41:
        do
        {
          *v6 = 0;
          v6 += 4;
        }
        while (v6 != &v5[4 * a2]);
      }
      v6 = &v5[4 * a2];
    }
    a1[1] = (uint64_t)v6;
    return;
  }
  v7 = ((uint64_t)v5 - *a1) >> 5;
  if ((v7 + a2) >> 59)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v8 = v4 - *a1;
  v9 = v8 >> 4;
  if (v8 >> 4 <= v7 + a2)
    v9 = v7 + a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10)
  {
    if (v10 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(32 * v10);
    v12 = (uint64_t)&v11[32 * v7];
    v13 = v12 + 32 * a2;
    v14 = (_QWORD *)v12;
    v15 = (a2 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (!v15)
      goto LABEL_24;
  }
  else
  {
    v11 = 0;
    v12 = 32 * v7;
    v13 = 32 * v7 + 32 * a2;
    v14 = (_QWORD *)(32 * v7);
    v15 = (a2 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (!v15)
    {
      do
      {
LABEL_24:
        *v14 = 0;
        v14 += 4;
      }
      while (v14 != (_QWORD *)v13);
      goto LABEL_25;
    }
  }
  v19 = v15 + 1;
  v14 = (_QWORD *)(v12 + 32 * (v19 & 0xFFFFFFFFFFFFFFELL));
  v20 = (_QWORD *)(v12 + 32);
  v21 = v19 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 4) = 0;
    *v20 = 0;
    v20 += 8;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0xFFFFFFFFFFFFFFELL))
    goto LABEL_24;
LABEL_25:
  v22 = &v11[32 * v10];
  v23 = (_QWORD *)*a1;
  if (v5 == (_QWORD *)*a1)
  {
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v22;
    if (v5)
LABEL_34:
      operator delete(v6);
  }
  else
  {
    do
    {
      v24 = *(v6 - 4);
      v6 -= 4;
      *(_QWORD *)(v12 - 32) = v24;
      v12 -= 32;
      v25 = *(_OWORD *)(v6 + 1);
      *(_QWORD *)(v12 + 24) = v6[3];
      *(_OWORD *)(v12 + 8) = v25;
      *v6 = 0;
    }
    while (v6 != v23);
    v26 = (_QWORD *)*a1;
    v6 = (_QWORD *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v22;
    if (v6 != v26)
    {
      v27 = v6;
      do
      {
        v28 = *((_BYTE *)v27 - 32);
        v27 -= 4;
        if ((v28 & 1) != 0)
          operator delete((void *)*(v6 - 3));
        v6 = v27;
      }
      while (v27 != v26);
      v6 = v26;
    }
    if (v6)
      goto LABEL_34;
  }
}

void std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v5 - 2) = v21;
            operator delete(v21);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

char *std::vector<operations_research::glop::SparseColumn>::__push_back_slow_path<operations_research::glop::SparseColumn>(void **a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  v9 = &v7[48 * v6];
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)v8 = v10;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 3);
  v8[40] = *((_BYTE *)a2 + 40);
  v11 = v8 + 48;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13)
      return v11;
    goto LABEL_20;
  }
  do
  {
    v14 = *((_QWORD *)v13 - 6);
    v13 -= 48;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v8 - 6) = v14;
    v8 -= 48;
    v15 = *(_OWORD *)(v13 + 8);
    v16 = *(_OWORD *)(v13 + 24);
    v8[40] = v13[40];
    *(_OWORD *)(v8 + 24) = v16;
    *(_OWORD *)(v8 + 8) = v15;
  }
  while (v13 != v12);
  v17 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v17)
  {
    do
    {
      v19 = *((_QWORD *)v13 - 6);
      v13 -= 48;
      v18 = v19;
      *(_QWORD *)v13 = 0;
      if (v19)
        MEMORY[0x22E31DF60](v18, 0x1000C8077774924);
    }
    while (v13 != v17);
    v13 = v17;
  }
  if (v13)
LABEL_20:
    operator delete(v13);
  return v11;
}

void InitDefaultsscc_info_GlopParameters_ortools_2fglop_2fparameters_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/glop/parameters.pb.cc", a4);
  qword_25408B150 = 0;
  operations_research::glop::_GlopParameters_default_instance_ = (uint64_t)off_24F97FFF0;
  *(uint64_t *)((char *)&qword_25408B150 + 7) = 0;
  qword_25408B160 = 0x100000001;
  dword_25408B168 = 1;
  xmmword_25408B170 = xmmword_22DCE67A0;
  unk_25408B180 = xmmword_22DCE67B0;
  xmmword_25408B190 = xmmword_22DCE67C0;
  qword_25408B1A0 = 0x201010101;
  unk_25408B1A8 = xmmword_22DCE67D0;
  qword_25408B1B8 = 0x3EB0C6F7A0B5ED8DLL;
  qword_25408B1C0 = 0x200000040;
  unk_25408B1C8 = xmmword_22DCE67E0;
  unk_25408B1D8 = xmmword_22DCE67F0;
  qword_25408B1E8 = -1;
  unk_25408B1F0 = 0x3CD203AF9EE75616;
  qword_25408B1F8 = 0x9600000003;
  dword_25408B200 = 16843009;
  word_25408B204 = 257;
  unk_25408B208 = xmmword_22DCE6800;
  unk_25408B218 = xmmword_22DCE6810;
  qword_25408B228 = 0x3F847AE147AE147BLL;
  qword_25408B230 = 0x100000001;
  unk_25408B238 = xmmword_22DCE6820;
  qword_25408B148 = 0;
  xmmword_25408B248 = xmmword_22DCE6830;
  unk_25408B258 = xmmword_22DCE6840;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::glop::_GlopParameters_default_instance_, v4);
}

uint64_t operations_research::glop::GlopParameters_PricingRule_descriptor(operations_research::glop *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0);
  return qword_255DB30D8;
}

double operations_research::glop::GlopParameters::GlopParameters(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_24F97FFF0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 23) = 0;
  *(_QWORD *)(a1 + 32) = 0x100000001;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = xmmword_22DCE67A0;
  *(_OWORD *)(a1 + 64) = xmmword_22DCE67B0;
  *(_OWORD *)(a1 + 80) = xmmword_22DCE67C0;
  *(_QWORD *)(a1 + 96) = 0x201010101;
  *(_OWORD *)(a1 + 104) = xmmword_22DCE67D0;
  *(_QWORD *)(a1 + 120) = 0x3EB0C6F7A0B5ED8DLL;
  *(_QWORD *)(a1 + 128) = 0x200000040;
  *(_OWORD *)(a1 + 136) = xmmword_22DCE67E0;
  *(_OWORD *)(a1 + 152) = xmmword_22DCE67F0;
  *(_QWORD *)(a1 + 168) = -1;
  *(_QWORD *)(a1 + 176) = 0x3CD203AF9EE75616;
  *(_QWORD *)(a1 + 184) = 0x9600000003;
  *(_WORD *)(a1 + 196) = 257;
  *(_DWORD *)(a1 + 192) = 16843009;
  *(_OWORD *)(a1 + 200) = xmmword_22DCE6800;
  *(_OWORD *)(a1 + 216) = xmmword_22DCE6810;
  *(_QWORD *)(a1 + 232) = 0x3F847AE147AE147BLL;
  *(_QWORD *)(a1 + 240) = 0x100000001;
  *(_OWORD *)(a1 + 248) = xmmword_22DCE6820;
  *(_QWORD *)(a1 + 264) = 0x3EE4F8B588E368F1;
  result = 0.0000001;
  *(_OWORD *)(a1 + 272) = xmmword_22DCE6850;
  *(_QWORD *)(a1 + 288) = 0x4A511B0EC57E649ALL;
  return result;
}

operations_research::glop::GlopParameters *operations_research::glop::GlopParameters::GlopParameters(operations_research::glop::GlopParameters *this, const operations_research::glop::GlopParameters *a2)
{
  uint64_t *v4;
  uint64_t v5;
  const google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = off_24F97FFF0;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 6) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v7, v6);
  }
  memcpy((char *)this + 28, (char *)a2 + 28, 0x10CuLL);
  return this;
}

void operations_research::glop::GlopParameters::~GlopParameters(operations_research::glop::GlopParameters *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v5;

  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    v3 = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(_QWORD *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x22E31DF78](v2, 0x20C40DC1BFBCFLL);
    }
  }
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v5;

  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    v3 = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v2 && v3 == 0)
    {
      v5 = *(void **)(v2 + 8);
      if (v5 != *(void **)(v2 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v2 + 8));
        v5 = *(void **)(v2 + 8);
      }
      if (v5)
      {
        *(_QWORD *)(v2 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x22E31DF78](v2, 0x20C40DC1BFBCFLL);
    }
  }
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::glop::GlopParameters::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void operations_research::glop::GlopParameters::Clear(operations_research::glop::GlopParameters *this)
{
  unsigned int v1;
  int v2;
  uint64_t v3;

  *((_BYTE *)this + 30) = 0;
  *((_WORD *)this + 14) = 0;
  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0xF8) != 0)
  {
    *((_QWORD *)this + 4) = 0x100000001;
    *((_DWORD *)this + 10) = 1;
    *((_OWORD *)this + 3) = xmmword_22DCE67A0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *((_OWORD *)this + 4) = xmmword_22DCE67B0;
    *((_OWORD *)this + 5) = xmmword_22DCE67C0;
    *((_DWORD *)this + 24) = 16843009;
  }
  if ((v1 & 0xFF0000) != 0)
  {
    *((_DWORD *)this + 25) = 2;
    *(_OWORD *)((char *)this + 104) = xmmword_22DCE67D0;
    *((_QWORD *)this + 15) = 0x3EB0C6F7A0B5ED8DLL;
    *((_QWORD *)this + 16) = 0x200000040;
    *(_OWORD *)((char *)this + 136) = xmmword_22DCE67E0;
  }
  if (HIBYTE(v1))
  {
    *(_OWORD *)((char *)this + 152) = xmmword_22DCE67F0;
    *((_QWORD *)this + 21) = -1;
    *((_QWORD *)this + 22) = 0x3CD203AF9EE75616;
    *((_QWORD *)this + 23) = 0x9600000003;
    *((_WORD *)this + 96) = 257;
  }
  v2 = *((_DWORD *)this + 5);
  if ((_BYTE)v2)
  {
    *(_DWORD *)((char *)this + 194) = 16843009;
    *(_OWORD *)((char *)this + 200) = xmmword_22DCE6800;
    *(_OWORD *)((char *)this + 216) = xmmword_22DCE6810;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *((_QWORD *)this + 29) = 0x3F847AE147AE147BLL;
    *((_QWORD *)this + 30) = 0x100000001;
    *(_OWORD *)((char *)this + 248) = xmmword_22DCE6820;
    *((_QWORD *)this + 33) = 0x3EE4F8B588E368F1;
    *((_OWORD *)this + 17) = xmmword_22DCE6850;
  }
  *((_QWORD *)this + 36) = 0x4A511B0EC57E649ALL;
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 1);
  if ((v3 & 1) != 0 && *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v3 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::glop::GlopParameters::_InternalParse(operations_research::glop::GlopParameters *this, google::protobuf::UnknownFieldSet *a2, int32x2_t *a3, uint64_t a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t *v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t TagFallback;
  unsigned int v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  const char *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  google::protobuf::UnknownFieldSet *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  google::protobuf::UnknownFieldSet *v68;
  google::protobuf::internal::ParseContext *v69;

  v8 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *(_QWORD *)&a3[1]) == (google::protobuf::UnknownFieldSet *)a3[3].i32[1])
        return a2;
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)a2, a3[11].i32[1]);
      if ((v67 & 1) != 0)
        return a2;
    }
    v9 = (char *)a2 + 1;
    v10 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0)
    {
      v11 = (v10 >> 3) - 1;
      goto LABEL_7;
    }
    v13 = v10 + (*v9 << 7);
    v10 = v13 - 128;
    if (*v9 < 0)
    {
      TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v13 - 128));
      if (!TagFallback)
        return 0;
      v9 = (char *)TagFallback;
      v10 = v15;
      v11 = (v15 >> 3) - 1;
      if (v11 > 0x3A)
        goto LABEL_17;
LABEL_7:
      switch(v11)
      {
        case 0u:
          if (v10 != 8)
            goto LABEL_17;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v12 = *v9;
          if (*v9 < 0)
          {
            v37 = v12 + (*(unsigned __int8 *)a2 << 7);
            v12 = (v37 - 128);
            if (*(char *)a2 < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)(v37 - 128));
              if (!a2)
                return a2;
              v12 = v62;
              if (v62 <= 2)
              {
LABEL_11:
                *((_DWORD *)this + 4) |= 0x10u;
                *((_DWORD *)this + 9) = v12;
                continue;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
              if (v12 <= 2)
                goto LABEL_11;
            }
          }
          else if (v12 <= 2)
          {
            goto LABEL_11;
          }
          if ((*v8 & 1) != 0)
            v38 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v38 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v39 = 1;
          goto LABEL_210;
        case 1u:
          if (v10 != 16)
            goto LABEL_17;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v12 = *v9;
          if (*v9 < 0)
          {
            v40 = v12 + (*(unsigned __int8 *)a2 << 7);
            v12 = (v40 - 128);
            if (*(char *)a2 < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)(v40 - 128));
              if (!a2)
                return a2;
              v12 = v63;
              if (v63 <= 2)
              {
LABEL_27:
                *((_DWORD *)this + 4) |= 0x20u;
                *((_DWORD *)this + 10) = v12;
                continue;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
              if (v12 <= 2)
                goto LABEL_27;
            }
          }
          else if (v12 <= 2)
          {
            goto LABEL_27;
          }
          if ((*v8 & 1) != 0)
            v38 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v38 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v39 = 2;
          goto LABEL_210;
        case 3u:
          if (v10 != 32)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x1000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v17 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_32;
          v17 = v17 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v17);
            *((_BYTE *)this + 96) = v44 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_32:
            *((_BYTE *)this + 96) = v17 != 0;
          }
          continue;
        case 4u:
          if (v10 != 40)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x2000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v18 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_37;
          v18 = v18 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v18);
            *((_BYTE *)this + 97) = v45 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_37:
            *((_BYTE *)this + 97) = v18 != 0;
          }
          continue;
        case 5u:
          if (v10 != 49)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x40u;
          *((_QWORD *)this + 6) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 7u:
          if (v10 != 65)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x80u;
          *((_QWORD *)this + 7) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 8u:
          if (v10 != 73)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x100u;
          *((_QWORD *)this + 8) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 9u:
          if (v10 != 81)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x200u;
          *((_QWORD *)this + 9) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xAu:
          if (v10 != 89)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x400u;
          *((_QWORD *)this + 10) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xBu:
          if (v10 != 97)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x800u;
          *((_QWORD *)this + 11) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xCu:
          if (v10 != 105)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x20000u;
          *((_QWORD *)this + 13) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xDu:
          if (v10 != 113)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x40000u;
          *((_QWORD *)this + 14) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xEu:
          if (v10 != 121)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x80000u;
          *((_QWORD *)this + 15) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0xFu:
          if (v10 != 128)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x4000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v19 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_60;
          v19 = v19 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v19);
            *((_BYTE *)this + 98) = v46 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_60:
            *((_BYTE *)this + 98) = v19 != 0;
          }
          continue;
        case 0x10u:
          if (v10 != 136)
            goto LABEL_17;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v12 = *v9;
          if (*v9 < 0)
          {
            v41 = v12 + (*(unsigned __int8 *)a2 << 7);
            v12 = (v41 - 128);
            if (*(char *)a2 < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)(v41 - 128));
              if (!a2)
                return a2;
              v12 = v64;
              if (v64 <= 3)
              {
LABEL_64:
                *((_DWORD *)this + 4) |= 0x10000u;
                *((_DWORD *)this + 25) = v12;
                continue;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
              if (v12 <= 3)
                goto LABEL_64;
            }
          }
          else if (v12 <= 3)
          {
            goto LABEL_64;
          }
          if ((*v8 & 1) != 0)
            v38 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v38 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v39 = 17;
          goto LABEL_210;
        case 0x11u:
          if (v10 != 144)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x8000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v20 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_69;
          v20 = v20 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v20);
            *((_BYTE *)this + 99) = v47 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_69:
            *((_BYTE *)this + 99) = v20 != 0;
          }
          continue;
        case 0x12u:
          if (v10 != 152)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x100000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          LODWORD(v21) = *v9;
          if ((v21 & 0x80) == 0)
            goto LABEL_74;
          v21 = (const char *)(v21 + (*(unsigned __int8 *)a2 << 7) - 128);
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v21);
            *((_DWORD *)this + 32) = v48;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_74:
            *((_DWORD *)this + 32) = (_DWORD)v21;
          }
          continue;
        case 0x13u:
          if (v10 != 160)
            goto LABEL_17;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v12 = *v9;
          if (*v9 < 0)
          {
            v42 = v12 + (*(unsigned __int8 *)a2 << 7);
            v12 = (v42 - 128);
            if (*(char *)a2 < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)(v42 - 128));
              if (!a2)
                return a2;
              v12 = v65;
              if (v65 <= 2)
              {
LABEL_78:
                *((_DWORD *)this + 4) |= 0x200000u;
                *((_DWORD *)this + 33) = v12;
                continue;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
              if (v12 <= 2)
                goto LABEL_78;
            }
          }
          else if (v12 <= 2)
          {
            goto LABEL_78;
          }
          if ((*v8 & 1) != 0)
            v38 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v38 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v39 = 20;
          goto LABEL_210;
        case 0x14u:
          if (v10 != 169)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x400000u;
          *((_QWORD *)this + 17) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x15u:
          if (v10 != 177)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x800000u;
          *((_QWORD *)this + 18) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x17u:
          if (v10 != 192)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 1u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v22 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_87;
          v22 = v22 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v22);
            *((_BYTE *)this + 194) = v49 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_87:
            *((_BYTE *)this + 194) = v22 != 0;
          }
          continue;
        case 0x18u:
          if (v10 != 201)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x1000000u;
          *((_QWORD *)this + 19) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x19u:
          if (v10 != 209)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x2000000u;
          *((_QWORD *)this + 20) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x1Au:
          if (v10 != 216)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x4000000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v23 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_96;
          v23 = v23 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v23);
            *((_QWORD *)this + 21) = v50;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_96:
            *((_QWORD *)this + 21) = v23;
          }
          continue;
        case 0x1Cu:
          if (v10 != 232)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x10000000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          LODWORD(v24) = *v9;
          if ((v24 & 0x80) == 0)
            goto LABEL_101;
          v24 = (const char *)(v24 + (*(unsigned __int8 *)a2 << 7) - 128);
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v24);
            *((_DWORD *)this + 46) = v51;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_101:
            *((_DWORD *)this + 46) = (_DWORD)v24;
          }
          continue;
        case 0x1Du:
          if (v10 != 241)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x8000000u;
          *((_QWORD *)this + 22) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x1Eu:
          if (v10 != 248)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 1u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v25 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_108;
          v25 = v25 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v25);
            *((_BYTE *)this + 28) = v52 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_108:
            *((_BYTE *)this + 28) = v25 != 0;
          }
          continue;
        case 0x1Fu:
          if ((_BYTE)v10)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 2u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v26 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_113;
          v26 = v26 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v26);
            *((_BYTE *)this + 29) = v53 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_113:
            *((_BYTE *)this + 29) = v26 != 0;
          }
          continue;
        case 0x20u:
          if (v10 != 8)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x20000000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          LODWORD(v27) = *v9;
          if ((v27 & 0x80) == 0)
            goto LABEL_118;
          v27 = (const char *)(v27 + (*(unsigned __int8 *)a2 << 7) - 128);
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v27);
            *((_DWORD *)this + 47) = v54;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_118:
            *((_DWORD *)this + 47) = (_DWORD)v27;
          }
          continue;
        case 0x21u:
          if (v10 != 16)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 4u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v28 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_123;
          v28 = v28 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v28);
            *((_BYTE *)this + 196) = v55 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_123:
            *((_BYTE *)this + 196) = v28 != 0;
          }
          continue;
        case 0x22u:
          if (v10 != 24)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 8u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v29 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_128;
          v29 = v29 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v29);
            *((_BYTE *)this + 197) = v56 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_128:
            *((_BYTE *)this + 197) = v29 != 0;
          }
          continue;
        case 0x23u:
          if (v10 != 32)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x40000000u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v30 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_133;
          v30 = v30 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v30);
            *((_BYTE *)this + 192) = v57 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_133:
            *((_BYTE *)this + 192) = v30 != 0;
          }
          continue;
        case 0x24u:
          if (v10 != 40)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 0x80000000;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v31 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_138;
          v31 = v31 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v31);
            *((_BYTE *)this + 193) = v58 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_138:
            *((_BYTE *)this + 193) = v31 != 0;
          }
          continue;
        case 0x25u:
          if (v10 != 49)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x10u;
          *((_QWORD *)this + 25) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x26u:
          if (v10 != 57)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x20u;
          *((_QWORD *)this + 26) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x27u:
          if (v10 != 65)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x40u;
          *((_QWORD *)this + 27) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x28u:
          if (v10 != 73)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x80u;
          *((_QWORD *)this + 28) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x29u:
          if (v10 != 81)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x100u;
          *((_QWORD *)this + 29) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x2Au:
          if (v10 != 88)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x200u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          LODWORD(v32) = *v9;
          if ((v32 & 0x80) == 0)
            goto LABEL_153;
          v32 = (const char *)(v32 + (*(unsigned __int8 *)a2 << 7) - 128);
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v32);
            *((_DWORD *)this + 60) = v59;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_153:
            *((_DWORD *)this + 60) = (_DWORD)v32;
          }
          continue;
        case 0x2Bu:
          if (v10 != 96)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x400u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          LODWORD(v33) = *v9;
          if ((v33 & 0x80) == 0)
            goto LABEL_3;
          v33 = (const char *)(v33 + (*(unsigned __int8 *)a2 << 7) - 128);
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, v33);
            *((_DWORD *)this + 61) = v34;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_3:
            *((_DWORD *)this + 61) = (_DWORD)v33;
          }
          continue;
        case 0x2Cu:
          if (v10 != 105)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x800u;
          *((_QWORD *)this + 31) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x33u:
          if (v10 != 161)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x1000u;
          *((_QWORD *)this + 32) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x34u:
          if (v10 != 168)
            goto LABEL_17;
          *((_DWORD *)this + 4) |= 4u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v35 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_167;
          v35 = v35 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v35);
            *((_BYTE *)this + 30) = v60 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_167:
            *((_BYTE *)this + 30) = v35 != 0;
          }
          continue;
        case 0x35u:
          if (v10 != 177)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x2000u;
          *((_QWORD *)this + 33) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x36u:
          if (v10 != 185)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x4000u;
          *((_QWORD *)this + 34) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x37u:
          if (v10 != 193)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x8000u;
          *((_QWORD *)this + 35) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        case 0x38u:
          if (v10 != 200)
            goto LABEL_17;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v12 = *v9;
          if (*v9 < 0)
          {
            v43 = v12 + (*(unsigned __int8 *)a2 << 7);
            v12 = (v43 - 128);
            if (*(char *)a2 < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)(v43 - 128));
              if (!a2)
                return a2;
              v12 = v66;
              if (v66 <= 2)
              {
LABEL_177:
                *((_DWORD *)this + 4) |= 8u;
                *((_DWORD *)this + 8) = v12;
                continue;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
              if (v12 <= 2)
                goto LABEL_177;
            }
          }
          else if (v12 <= 2)
          {
            goto LABEL_177;
          }
          if ((*v8 & 1) != 0)
            v38 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v38 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v39 = 57;
LABEL_210:
          google::protobuf::UnknownFieldSet::AddVarint(v38, v39, v12);
          break;
        case 0x39u:
          if (v10 != 208)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 2u;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 1);
          v36 = *v9;
          if ((*v9 & 0x80000000) == 0)
            goto LABEL_182;
          v36 = v36 + (*(unsigned __int8 *)a2 << 7) - 128;
          if (*(char *)a2 < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v9, (const char *)v36);
            *((_BYTE *)this + 195) = v61 != 0;
            if (!a2)
              return a2;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)(v9 + 2);
LABEL_182:
            *((_BYTE *)this + 195) = v36 != 0;
          }
          continue;
        case 0x3Au:
          if (v10 != 217)
            goto LABEL_17;
          *((_DWORD *)this + 5) |= 0x10000u;
          *((_QWORD *)this + 36) = *(_QWORD *)v9;
          a2 = (google::protobuf::UnknownFieldSet *)(v9 + 8);
          continue;
        default:
          goto LABEL_17;
      }
    }
    else
    {
      v9 = (char *)a2 + 2;
      v11 = (v10 >> 3) - 1;
      if (v11 <= 0x3A)
        goto LABEL_7;
LABEL_17:
      if (v10)
        v16 = (v10 & 7) == 4;
      else
        v16 = 1;
      if (v16)
      {
        a3[10].i32[0] = v10 - 1;
        return (google::protobuf::UnknownFieldSet *)v9;
      }
      if ((*v8 & 1) != 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL)+ 8), (google::protobuf::UnknownFieldSet *)v9, a3, a5);
        if (!a2)
          return a2;
      }
      else
      {
        v68 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v68, (google::protobuf::UnknownFieldSet *)v9, a3, v69);
        if (!a2)
          return a2;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::glop::GlopParameters::_InternalSerialize(operations_research::glop::GlopParameters *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;

  v6 = *((_DWORD *)this + 4);
  if ((v6 & 0x10) == 0)
  {
    if ((v6 & 0x20) == 0)
      goto LABEL_3;
LABEL_63:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v19 = *((int *)this + 10);
      *a2 = 16;
      if (v19 <= 0x7F)
      {
LABEL_65:
        a2[1] = v19;
        a2 += 2;
        if ((v6 & 0x1000) != 0)
          goto LABEL_74;
        goto LABEL_4;
      }
    }
    else
    {
      v19 = *((int *)this + 10);
      *a2 = 16;
      if (v19 <= 0x7F)
        goto LABEL_65;
    }
    a2[1] = v19 | 0x80;
    v20 = v19 >> 7;
    if (v19 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v20 | 0x80;
        v21 = v20 >> 7;
        ++a2;
        v22 = v20 >> 14;
        v20 >>= 7;
      }
      while (v22);
      *(a2 - 1) = v21;
      if ((v6 & 0x1000) != 0)
        goto LABEL_74;
    }
    else
    {
      a2[2] = v20;
      a2 += 3;
      if ((v6 & 0x1000) != 0)
        goto LABEL_74;
    }
LABEL_4:
    if ((v6 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_77;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = *((int *)this + 9);
    *a2 = 8;
    if (v15 <= 0x7F)
    {
LABEL_54:
      a2[1] = v15;
      a2 += 2;
      if ((v6 & 0x20) != 0)
        goto LABEL_63;
      goto LABEL_3;
    }
  }
  else
  {
    v15 = *((int *)this + 9);
    *a2 = 8;
    if (v15 <= 0x7F)
      goto LABEL_54;
  }
  a2[1] = v15 | 0x80;
  v16 = v15 >> 7;
  if (v15 >> 14)
  {
    a2 += 3;
    do
    {
      *(a2 - 1) = v16 | 0x80;
      v17 = v16 >> 7;
      ++a2;
      v18 = v16 >> 14;
      v16 >>= 7;
    }
    while (v18);
    *(a2 - 1) = v17;
    if ((v6 & 0x20) != 0)
      goto LABEL_63;
  }
  else
  {
    a2[2] = v16;
    a2 += 3;
    if ((v6 & 0x20) != 0)
      goto LABEL_63;
  }
LABEL_3:
  if ((v6 & 0x1000) == 0)
    goto LABEL_4;
LABEL_74:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v23 = *((_BYTE *)this + 96);
  *a2 = 32;
  a2[1] = v23;
  a2 += 2;
  if ((v6 & 0x2000) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_80;
  }
LABEL_77:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v24 = *((_BYTE *)this + 97);
  *a2 = 40;
  a2[1] = v24;
  a2 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_83;
  }
LABEL_80:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v25 = *((_QWORD *)this + 6);
  *a2 = 49;
  *(_QWORD *)(a2 + 1) = v25;
  a2 += 9;
  if ((v6 & 0x80) == 0)
  {
LABEL_7:
    if ((v6 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_86;
  }
LABEL_83:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v26 = *((_QWORD *)this + 7);
  *a2 = 65;
  *(_QWORD *)(a2 + 1) = v26;
  a2 += 9;
  if ((v6 & 0x100) == 0)
  {
LABEL_8:
    if ((v6 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_89;
  }
LABEL_86:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v27 = *((_QWORD *)this + 8);
  *a2 = 73;
  *(_QWORD *)(a2 + 1) = v27;
  a2 += 9;
  if ((v6 & 0x200) == 0)
  {
LABEL_9:
    if ((v6 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_92;
  }
LABEL_89:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v28 = *((_QWORD *)this + 9);
  *a2 = 81;
  *(_QWORD *)(a2 + 1) = v28;
  a2 += 9;
  if ((v6 & 0x400) == 0)
  {
LABEL_10:
    if ((v6 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_95;
  }
LABEL_92:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v29 = *((_QWORD *)this + 10);
  *a2 = 89;
  *(_QWORD *)(a2 + 1) = v29;
  a2 += 9;
  if ((v6 & 0x800) == 0)
  {
LABEL_11:
    if ((v6 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_98;
  }
LABEL_95:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v30 = *((_QWORD *)this + 11);
  *a2 = 97;
  *(_QWORD *)(a2 + 1) = v30;
  a2 += 9;
  if ((v6 & 0x20000) == 0)
  {
LABEL_12:
    if ((v6 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_101;
  }
LABEL_98:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v31 = *((_QWORD *)this + 13);
  *a2 = 105;
  *(_QWORD *)(a2 + 1) = v31;
  a2 += 9;
  if ((v6 & 0x40000) == 0)
  {
LABEL_13:
    if ((v6 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_104;
  }
LABEL_101:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v32 = *((_QWORD *)this + 14);
  *a2 = 113;
  *(_QWORD *)(a2 + 1) = v32;
  a2 += 9;
  if ((v6 & 0x80000) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_107;
  }
LABEL_104:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v33 = *((_QWORD *)this + 15);
  *a2 = 121;
  *(_QWORD *)(a2 + 1) = v33;
  a2 += 9;
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x10000) == 0)
      goto LABEL_16;
LABEL_110:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v35 = *((int *)this + 25);
      *(_WORD *)a2 = 392;
      if (v35 <= 0x7F)
      {
LABEL_112:
        a2[2] = v35;
        a2 += 3;
        if ((v6 & 0x8000) != 0)
          goto LABEL_121;
        goto LABEL_17;
      }
    }
    else
    {
      v35 = *((int *)this + 25);
      *(_WORD *)a2 = 392;
      if (v35 <= 0x7F)
        goto LABEL_112;
    }
    a2[2] = v35 | 0x80;
    v36 = v35 >> 7;
    if (v35 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v36 | 0x80;
        v37 = v36 >> 7;
        ++a2;
        v38 = v36 >> 14;
        v36 >>= 7;
      }
      while (v38);
      *(a2 - 1) = v37;
      if ((v6 & 0x8000) != 0)
        goto LABEL_121;
    }
    else
    {
      a2[3] = v36;
      a2 += 4;
      if ((v6 & 0x8000) != 0)
        goto LABEL_121;
    }
LABEL_17:
    if ((v6 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_124;
  }
LABEL_107:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v34 = *((_BYTE *)this + 98);
  *(_WORD *)a2 = 384;
  a2[2] = v34;
  a2 += 3;
  if ((v6 & 0x10000) != 0)
    goto LABEL_110;
LABEL_16:
  if ((v6 & 0x8000) == 0)
    goto LABEL_17;
LABEL_121:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v39 = *((_BYTE *)this + 99);
  *(_WORD *)a2 = 400;
  a2[2] = v39;
  a2 += 3;
  if ((v6 & 0x100000) == 0)
  {
LABEL_18:
    if ((v6 & 0x200000) == 0)
      goto LABEL_19;
LABEL_135:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v44 = *((int *)this + 33);
      *(_WORD *)a2 = 416;
      if (v44 <= 0x7F)
      {
LABEL_137:
        a2[2] = v44;
        a2 += 3;
        if ((v6 & 0x400000) != 0)
          goto LABEL_146;
        goto LABEL_20;
      }
    }
    else
    {
      v44 = *((int *)this + 33);
      *(_WORD *)a2 = 416;
      if (v44 <= 0x7F)
        goto LABEL_137;
    }
    a2[2] = v44 | 0x80;
    v45 = v44 >> 7;
    if (v44 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v45 | 0x80;
        v46 = v45 >> 7;
        ++a2;
        v47 = v45 >> 14;
        v45 >>= 7;
      }
      while (v47);
      *(a2 - 1) = v46;
      if ((v6 & 0x400000) != 0)
        goto LABEL_146;
    }
    else
    {
      a2[3] = v45;
      a2 += 4;
      if ((v6 & 0x400000) != 0)
        goto LABEL_146;
    }
LABEL_20:
    if ((v6 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_149;
  }
LABEL_124:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v40 = *((int *)this + 32);
    *(_WORD *)a2 = 408;
    if (v40 <= 0x7F)
    {
LABEL_126:
      a2[2] = v40;
      a2 += 3;
      if ((v6 & 0x200000) != 0)
        goto LABEL_135;
      goto LABEL_19;
    }
  }
  else
  {
    v40 = *((int *)this + 32);
    *(_WORD *)a2 = 408;
    if (v40 <= 0x7F)
      goto LABEL_126;
  }
  a2[2] = v40 | 0x80;
  v41 = v40 >> 7;
  if (v40 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v41 | 0x80;
      v42 = v41 >> 7;
      ++a2;
      v43 = v41 >> 14;
      v41 >>= 7;
    }
    while (v43);
    *(a2 - 1) = v42;
    if ((v6 & 0x200000) != 0)
      goto LABEL_135;
  }
  else
  {
    a2[3] = v41;
    a2 += 4;
    if ((v6 & 0x200000) != 0)
      goto LABEL_135;
  }
LABEL_19:
  if ((v6 & 0x400000) == 0)
    goto LABEL_20;
LABEL_146:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v48 = *((_QWORD *)this + 17);
  *(_WORD *)a2 = 425;
  *(_QWORD *)(a2 + 2) = v48;
  a2 += 10;
  if ((v6 & 0x800000) == 0)
  {
LABEL_21:
    if ((*((_BYTE *)this + 20) & 1) == 0)
      goto LABEL_22;
    goto LABEL_152;
  }
LABEL_149:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v49 = *((_QWORD *)this + 18);
  *(_WORD *)a2 = 433;
  *(_QWORD *)(a2 + 2) = v49;
  a2 += 10;
  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
LABEL_22:
    v7 = *((_DWORD *)this + 4);
    if ((v7 & 0x1000000) == 0)
      goto LABEL_23;
    goto LABEL_155;
  }
LABEL_152:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v50 = *((_BYTE *)this + 194);
  *(_WORD *)a2 = 448;
  a2[2] = v50;
  a2 += 3;
  v7 = *((_DWORD *)this + 4);
  if ((v7 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v7 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_158;
  }
LABEL_155:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v51 = *((_QWORD *)this + 19);
  *(_WORD *)a2 = 457;
  *(_QWORD *)(a2 + 2) = v51;
  a2 += 10;
  if ((v7 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v7 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_161;
  }
LABEL_158:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v52 = *((_QWORD *)this + 20);
  *(_WORD *)a2 = 465;
  *(_QWORD *)(a2 + 2) = v52;
  a2 += 10;
  if ((v7 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_26;
LABEL_172:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v57 = *((int *)this + 46);
      *(_WORD *)a2 = 488;
      if (v57 <= 0x7F)
      {
LABEL_174:
        a2[2] = v57;
        a2 += 3;
        if ((v7 & 0x8000000) != 0)
          goto LABEL_183;
        goto LABEL_27;
      }
    }
    else
    {
      v57 = *((int *)this + 46);
      *(_WORD *)a2 = 488;
      if (v57 <= 0x7F)
        goto LABEL_174;
    }
    a2[2] = v57 | 0x80;
    v58 = v57 >> 7;
    if (v57 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v58 | 0x80;
        v59 = v58 >> 7;
        ++a2;
        v60 = v58 >> 14;
        v58 >>= 7;
      }
      while (v60);
      *(a2 - 1) = v59;
      if ((v7 & 0x8000000) != 0)
        goto LABEL_183;
    }
    else
    {
      a2[3] = v58;
      a2 += 4;
      if ((v7 & 0x8000000) != 0)
        goto LABEL_183;
    }
LABEL_27:
    if ((v7 & 1) == 0)
      goto LABEL_28;
    goto LABEL_186;
  }
LABEL_161:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v53 = *((_QWORD *)this + 21);
    *(_WORD *)a2 = 472;
    if (v53 <= 0x7F)
    {
LABEL_163:
      a2[2] = v53;
      a2 += 3;
      if ((v7 & 0x10000000) != 0)
        goto LABEL_172;
      goto LABEL_26;
    }
  }
  else
  {
    v53 = *((_QWORD *)this + 21);
    *(_WORD *)a2 = 472;
    if (v53 <= 0x7F)
      goto LABEL_163;
  }
  a2[2] = v53 | 0x80;
  v54 = v53 >> 7;
  if (v53 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v54 | 0x80;
      v55 = v54 >> 7;
      ++a2;
      v56 = v54 >> 14;
      v54 >>= 7;
    }
    while (v56);
    *(a2 - 1) = v55;
    if ((v7 & 0x10000000) != 0)
      goto LABEL_172;
  }
  else
  {
    a2[3] = v54;
    a2 += 4;
    if ((v7 & 0x10000000) != 0)
      goto LABEL_172;
  }
LABEL_26:
  if ((v7 & 0x8000000) == 0)
    goto LABEL_27;
LABEL_183:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v61 = *((_QWORD *)this + 22);
  *(_WORD *)a2 = 497;
  *(_QWORD *)(a2 + 2) = v61;
  a2 += 10;
  if ((v7 & 1) == 0)
  {
LABEL_28:
    if ((v7 & 2) == 0)
      goto LABEL_29;
    goto LABEL_189;
  }
LABEL_186:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v62 = *((_BYTE *)this + 28);
  *(_WORD *)a2 = 504;
  a2[2] = v62;
  a2 += 3;
  if ((v7 & 2) == 0)
  {
LABEL_29:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_30;
LABEL_192:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v64 = *((int *)this + 47);
      *(_WORD *)a2 = 648;
      if (v64 <= 0x7F)
      {
LABEL_194:
        a2[2] = v64;
        a2 += 3;
        v8 = *((_DWORD *)this + 5);
        if ((v8 & 4) != 0)
          goto LABEL_203;
        goto LABEL_31;
      }
    }
    else
    {
      v64 = *((int *)this + 47);
      *(_WORD *)a2 = 648;
      if (v64 <= 0x7F)
        goto LABEL_194;
    }
    a2[2] = v64 | 0x80;
    v65 = v64 >> 7;
    if (v64 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v65 | 0x80;
        v66 = v65 >> 7;
        ++a2;
        v67 = v65 >> 14;
        v65 >>= 7;
      }
      while (v67);
      *(a2 - 1) = v66;
      v8 = *((_DWORD *)this + 5);
      if ((v8 & 4) != 0)
        goto LABEL_203;
    }
    else
    {
      a2[3] = v65;
      a2 += 4;
      v8 = *((_DWORD *)this + 5);
      if ((v8 & 4) != 0)
        goto LABEL_203;
    }
LABEL_31:
    if ((v8 & 8) == 0)
      goto LABEL_32;
    goto LABEL_206;
  }
LABEL_189:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v63 = *((_BYTE *)this + 29);
  *(_WORD *)a2 = 640;
  a2[2] = v63;
  a2 += 3;
  if ((v7 & 0x20000000) != 0)
    goto LABEL_192;
LABEL_30:
  v8 = *((_DWORD *)this + 5);
  if ((v8 & 4) == 0)
    goto LABEL_31;
LABEL_203:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v68 = *((_BYTE *)this + 196);
  *(_WORD *)a2 = 656;
  a2[2] = v68;
  a2 += 3;
  if ((v8 & 8) == 0)
  {
LABEL_32:
    v9 = *((_DWORD *)this + 4);
    if ((v9 & 0x40000000) == 0)
      goto LABEL_33;
    goto LABEL_209;
  }
LABEL_206:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v69 = *((_BYTE *)this + 197);
  *(_WORD *)a2 = 664;
  a2[2] = v69;
  a2 += 3;
  v9 = *((_DWORD *)this + 4);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_212;
  }
LABEL_209:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v70 = *((_BYTE *)this + 192);
  *(_WORD *)a2 = 672;
  a2[2] = v70;
  a2 += 3;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_34:
    v10 = *((_DWORD *)this + 5);
    if ((v10 & 0x10) == 0)
      goto LABEL_35;
    goto LABEL_215;
  }
LABEL_212:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v71 = *((_BYTE *)this + 193);
  *(_WORD *)a2 = 680;
  a2[2] = v71;
  a2 += 3;
  v10 = *((_DWORD *)this + 5);
  if ((v10 & 0x10) == 0)
  {
LABEL_35:
    if ((v10 & 0x20) == 0)
      goto LABEL_36;
    goto LABEL_218;
  }
LABEL_215:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v72 = *((_QWORD *)this + 25);
  *(_WORD *)a2 = 689;
  *(_QWORD *)(a2 + 2) = v72;
  a2 += 10;
  if ((v10 & 0x20) == 0)
  {
LABEL_36:
    if ((v10 & 0x40) == 0)
      goto LABEL_37;
    goto LABEL_221;
  }
LABEL_218:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v73 = *((_QWORD *)this + 26);
  *(_WORD *)a2 = 697;
  *(_QWORD *)(a2 + 2) = v73;
  a2 += 10;
  if ((v10 & 0x40) == 0)
  {
LABEL_37:
    if ((v10 & 0x80) == 0)
      goto LABEL_38;
    goto LABEL_224;
  }
LABEL_221:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v74 = *((_QWORD *)this + 27);
  *(_WORD *)a2 = 705;
  *(_QWORD *)(a2 + 2) = v74;
  a2 += 10;
  if ((v10 & 0x80) == 0)
  {
LABEL_38:
    if ((v10 & 0x100) == 0)
      goto LABEL_39;
    goto LABEL_227;
  }
LABEL_224:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v75 = *((_QWORD *)this + 28);
  *(_WORD *)a2 = 713;
  *(_QWORD *)(a2 + 2) = v75;
  a2 += 10;
  if ((v10 & 0x100) == 0)
  {
LABEL_39:
    if ((v10 & 0x200) == 0)
      goto LABEL_40;
    goto LABEL_230;
  }
LABEL_227:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v76 = *((_QWORD *)this + 29);
  *(_WORD *)a2 = 721;
  *(_QWORD *)(a2 + 2) = v76;
  a2 += 10;
  if ((v10 & 0x200) == 0)
  {
LABEL_40:
    if ((v10 & 0x400) == 0)
      goto LABEL_41;
LABEL_241:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v81 = *((int *)this + 61);
      *(_WORD *)a2 = 736;
      if (v81 <= 0x7F)
      {
LABEL_243:
        a2[2] = v81;
        a2 += 3;
        if ((v10 & 0x800) != 0)
          goto LABEL_252;
        goto LABEL_42;
      }
    }
    else
    {
      v81 = *((int *)this + 61);
      *(_WORD *)a2 = 736;
      if (v81 <= 0x7F)
        goto LABEL_243;
    }
    a2[2] = v81 | 0x80;
    v82 = v81 >> 7;
    if (v81 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v82 | 0x80;
        v83 = v82 >> 7;
        ++a2;
        v84 = v82 >> 14;
        v82 >>= 7;
      }
      while (v84);
      *(a2 - 1) = v83;
      if ((v10 & 0x800) != 0)
        goto LABEL_252;
    }
    else
    {
      a2[3] = v82;
      a2 += 4;
      if ((v10 & 0x800) != 0)
        goto LABEL_252;
    }
LABEL_42:
    if ((v10 & 0x1000) == 0)
      goto LABEL_43;
    goto LABEL_255;
  }
LABEL_230:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v77 = *((int *)this + 60);
    *(_WORD *)a2 = 728;
    if (v77 <= 0x7F)
    {
LABEL_232:
      a2[2] = v77;
      a2 += 3;
      if ((v10 & 0x400) != 0)
        goto LABEL_241;
      goto LABEL_41;
    }
  }
  else
  {
    v77 = *((int *)this + 60);
    *(_WORD *)a2 = 728;
    if (v77 <= 0x7F)
      goto LABEL_232;
  }
  a2[2] = v77 | 0x80;
  v78 = v77 >> 7;
  if (v77 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v78 | 0x80;
      v79 = v78 >> 7;
      ++a2;
      v80 = v78 >> 14;
      v78 >>= 7;
    }
    while (v80);
    *(a2 - 1) = v79;
    if ((v10 & 0x400) != 0)
      goto LABEL_241;
  }
  else
  {
    a2[3] = v78;
    a2 += 4;
    if ((v10 & 0x400) != 0)
      goto LABEL_241;
  }
LABEL_41:
  if ((v10 & 0x800) == 0)
    goto LABEL_42;
LABEL_252:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v85 = *((_QWORD *)this + 31);
  *(_WORD *)a2 = 745;
  *(_QWORD *)(a2 + 2) = v85;
  a2 += 10;
  if ((v10 & 0x1000) == 0)
  {
LABEL_43:
    if ((*((_BYTE *)this + 16) & 4) == 0)
      goto LABEL_44;
    goto LABEL_258;
  }
LABEL_255:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v86 = *((_QWORD *)this + 32);
  *(_WORD *)a2 = 929;
  *(_QWORD *)(a2 + 2) = v86;
  a2 += 10;
  if ((*((_BYTE *)this + 16) & 4) == 0)
  {
LABEL_44:
    v11 = *((_DWORD *)this + 5);
    if ((v11 & 0x2000) == 0)
      goto LABEL_45;
    goto LABEL_261;
  }
LABEL_258:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v87 = *((_BYTE *)this + 30);
  *(_WORD *)a2 = 936;
  a2[2] = v87;
  a2 += 3;
  v11 = *((_DWORD *)this + 5);
  if ((v11 & 0x2000) == 0)
  {
LABEL_45:
    if ((v11 & 0x4000) == 0)
      goto LABEL_46;
    goto LABEL_264;
  }
LABEL_261:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v88 = *((_QWORD *)this + 33);
  *(_WORD *)a2 = 945;
  *(_QWORD *)(a2 + 2) = v88;
  a2 += 10;
  if ((v11 & 0x4000) == 0)
  {
LABEL_46:
    if ((v11 & 0x8000) == 0)
      goto LABEL_47;
    goto LABEL_267;
  }
LABEL_264:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v89 = *((_QWORD *)this + 34);
  *(_WORD *)a2 = 953;
  *(_QWORD *)(a2 + 2) = v89;
  a2 += 10;
  if ((v11 & 0x8000) == 0)
  {
LABEL_47:
    if ((*((_BYTE *)this + 16) & 8) == 0)
      goto LABEL_48;
LABEL_270:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v91 = *((int *)this + 8);
      *(_WORD *)a2 = 968;
      if (v91 <= 0x7F)
      {
LABEL_272:
        a2[2] = v91;
        a2 += 3;
        v12 = *((_DWORD *)this + 5);
        if ((v12 & 2) != 0)
          goto LABEL_281;
        goto LABEL_49;
      }
    }
    else
    {
      v91 = *((int *)this + 8);
      *(_WORD *)a2 = 968;
      if (v91 <= 0x7F)
        goto LABEL_272;
    }
    a2[2] = v91 | 0x80;
    v92 = v91 >> 7;
    if (v91 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v92 | 0x80;
        v93 = v92 >> 7;
        ++a2;
        v94 = v92 >> 14;
        v92 >>= 7;
      }
      while (v94);
      *(a2 - 1) = v93;
      v12 = *((_DWORD *)this + 5);
      if ((v12 & 2) != 0)
        goto LABEL_281;
    }
    else
    {
      a2[3] = v92;
      a2 += 4;
      v12 = *((_DWORD *)this + 5);
      if ((v12 & 2) != 0)
        goto LABEL_281;
    }
LABEL_49:
    if ((v12 & 0x10000) == 0)
      goto LABEL_50;
LABEL_284:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v96 = *((_QWORD *)this + 36);
    *(_WORD *)a2 = 985;
    *(_QWORD *)(a2 + 2) = v96;
    a2 += 10;
    v13 = *((_QWORD *)this + 1);
    if ((v13 & 1) == 0)
      return (const google::protobuf::UnknownFieldSet *)a2;
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  }
LABEL_267:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v90 = *((_QWORD *)this + 35);
  *(_WORD *)a2 = 961;
  *(_QWORD *)(a2 + 2) = v90;
  a2 += 10;
  if ((*((_BYTE *)this + 16) & 8) != 0)
    goto LABEL_270;
LABEL_48:
  v12 = *((_DWORD *)this + 5);
  if ((v12 & 2) == 0)
    goto LABEL_49;
LABEL_281:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v95 = *((_BYTE *)this + 195);
  *(_WORD *)a2 = 976;
  a2[2] = v95;
  a2 += 3;
  if ((v12 & 0x10000) != 0)
    goto LABEL_284;
LABEL_50:
  v13 = *((_QWORD *)this + 1);
  if ((v13 & 1) == 0)
    return (const google::protobuf::UnknownFieldSet *)a2;
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::glop::GlopParameters::ByteSizeLong(operations_research::glop::GlopParameters *this)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  const google::protobuf::UnknownFieldSet *v30;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *((_DWORD *)this + 4);
  if (!(_BYTE)v1)
  {
    v2 = 0;
    if ((v1 & 0xFF00) == 0)
      goto LABEL_36;
    goto LABEL_20;
  }
  v2 = 3;
  if ((v1 & 1) == 0)
    v2 = 0;
  if ((v1 & 2) != 0)
    v2 += 3;
  if ((v1 & 4) != 0)
    v2 += 3;
  if ((v1 & 8) != 0)
  {
    v8 = *((_DWORD *)this + 8);
    v9 = (9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6;
    if (v8 >= 0)
      v10 = v9;
    else
      v10 = 10;
    v2 += v10 + 2;
    if ((v1 & 0x10) == 0)
    {
LABEL_10:
      if ((v1 & 0x20) == 0)
        goto LABEL_15;
      goto LABEL_11;
    }
  }
  else if ((v1 & 0x10) == 0)
  {
    goto LABEL_10;
  }
  v11 = *((_DWORD *)this + 9);
  v12 = (9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6;
  if (v11 >= 0)
    v13 = v12;
  else
    v13 = 10;
  v2 += v13 + 1;
  if ((v1 & 0x20) != 0)
  {
LABEL_11:
    v3 = *((_DWORD *)this + 10);
    v4 = (9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6;
    if (v3 >= 0)
      v5 = v4;
    else
      v5 = 10;
    v2 += v5 + 1;
  }
LABEL_15:
  if ((v1 & 0x40) != 0)
    v2 += 9;
  if ((v1 & 0x80) != 0)
    v2 += 9;
  if ((v1 & 0xFF00) != 0)
  {
LABEL_20:
    if ((v1 & 0x100) != 0)
      v2 += 9;
    if ((v1 & 0x200) != 0)
      v2 += 9;
    if ((v1 & 0x400) != 0)
      v2 += 9;
    if ((v1 & 0x800) != 0)
      v2 += 9;
    if ((v1 & 0x1000) != 0)
      v2 += 2;
    if ((v1 & 0x2000) != 0)
      v2 += 2;
    if ((v1 & 0x4000) != 0)
      v2 += 3;
    if ((v1 & 0x8000) != 0)
      v2 += 3;
  }
LABEL_36:
  if ((v1 & 0xFF0000) != 0)
  {
    if ((v1 & 0x10000) != 0)
    {
      v6 = *((_DWORD *)this + 25);
      if (v6 < 0)
        v7 = 10;
      else
        v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
      v2 += v7 + 2;
    }
    if ((v1 & 0x20000) != 0)
      v2 += 9;
    if ((v1 & 0x40000) != 0)
      v2 += 9;
    if ((v1 & 0x80000) != 0)
      v2 += 9;
    if ((v1 & 0x100000) != 0)
    {
      v14 = *((_DWORD *)this + 32);
      v15 = (9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6;
      if (v14 >= 0)
        v16 = v15;
      else
        v16 = 10;
      v2 += v16 + 2;
    }
    if ((v1 & 0x200000) != 0)
    {
      v17 = *((_DWORD *)this + 33);
      v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v17 >= 0)
        v19 = v18;
      else
        v19 = 12;
      v2 += v19;
    }
    if ((v1 & 0x400000) != 0)
      v2 += 10;
    if ((v1 & 0x800000) != 0)
      v2 += 10;
  }
  if (HIBYTE(v1))
  {
    if ((v1 & 0x1000000) != 0)
      v2 += 10;
    if ((v1 & 0x2000000) != 0)
      v2 += 10;
    if ((v1 & 0x4000000) != 0)
    {
      v2 += ((9 * (__clz(*((_QWORD *)this + 21) | 1) ^ 0x3F) + 73) >> 6) + 2;
      if ((v1 & 0x8000000) != 0)
        v2 += 10;
      if ((v1 & 0x10000000) == 0)
      {
LABEL_82:
        if ((v1 & 0x20000000) == 0)
        {
LABEL_87:
          if ((v1 & 0x40000000) != 0)
            v2 += 3;
          if (v1 < 0)
            v2 += 3;
          goto LABEL_91;
        }
LABEL_83:
        v20 = *((_DWORD *)this + 47);
        v21 = ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
        if (v20 >= 0)
          v22 = v21;
        else
          v22 = 12;
        v2 += v22;
        goto LABEL_87;
      }
    }
    else
    {
      if ((v1 & 0x8000000) != 0)
        v2 += 10;
      if ((v1 & 0x10000000) == 0)
        goto LABEL_82;
    }
    v32 = *((_DWORD *)this + 46);
    v33 = ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v32 >= 0)
      v34 = v33;
    else
      v34 = 12;
    v2 += v34;
    if ((v1 & 0x20000000) == 0)
      goto LABEL_87;
    goto LABEL_83;
  }
LABEL_91:
  v23 = *((_DWORD *)this + 5);
  if ((_BYTE)v23)
  {
    if ((v23 & 1) != 0)
      v2 += 3;
    if ((v23 & 2) != 0)
      v2 += 3;
    if ((v23 & 4) != 0)
      v2 += 3;
    if ((v23 & 8) != 0)
      v2 += 3;
    if ((v23 & 0x10) != 0)
      v2 += 10;
    if ((v23 & 0x20) != 0)
      v2 += 10;
    if ((v23 & 0x40) != 0)
      v2 += 10;
    if ((v23 & 0x80) != 0)
      v2 += 10;
  }
  if ((v23 & 0xFF00) != 0)
  {
    if ((v23 & 0x100) != 0)
      v2 += 10;
    if ((v23 & 0x200) != 0)
    {
      v24 = *((_DWORD *)this + 60);
      v25 = ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v24 >= 0)
        v26 = v25;
      else
        v26 = 12;
      v2 += v26;
    }
    if ((v23 & 0x400) != 0)
    {
      v27 = *((_DWORD *)this + 61);
      v28 = ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v27 >= 0)
        v29 = v28;
      else
        v29 = 12;
      v2 += v29;
    }
    if ((v23 & 0x800) != 0)
      v2 += 10;
    if ((v23 & 0x1000) != 0)
      v2 += 10;
    if ((v23 & 0x2000) != 0)
      v2 += 10;
    if ((v23 & 0x4000) != 0)
      v2 += 10;
    if ((v23 & 0x8000) != 0)
      v2 += 10;
  }
  if ((v23 & 0x10000) != 0)
    v30 = (const google::protobuf::UnknownFieldSet *)(v2 + 10);
  else
    v30 = (const google::protobuf::UnknownFieldSet *)v2;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::glop::GlopParameters *)((char *)this + 8), v30, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v30;
  return (char *)v30;
}

double operations_research::glop::GlopParameters::MergeFrom(operations_research::glop::GlopParameters *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  double result;

  if (*(void (***)(operations_research::glop::GlopParameters *__hidden))a2 == off_24F97FFF0)
    return operations_research::glop::GlopParameters::MergeFrom(this, a2);
  google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  return result;
}

double operations_research::glop::GlopParameters::MergeFrom(operations_research::glop::GlopParameters *this, const operations_research::glop::GlopParameters *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  double result;
  unsigned int v10;
  int v11;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v10 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v10)
  {
    if ((v10 & 1) != 0)
    {
      *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
      if ((v10 & 2) == 0)
      {
LABEL_8:
        if ((v10 & 4) == 0)
          goto LABEL_9;
        goto LABEL_75;
      }
    }
    else if ((v10 & 2) == 0)
    {
      goto LABEL_8;
    }
    *((_BYTE *)this + 29) = *((_BYTE *)a2 + 29);
    if ((v10 & 4) == 0)
    {
LABEL_9:
      if ((v10 & 8) == 0)
        goto LABEL_10;
      goto LABEL_76;
    }
LABEL_75:
    *((_BYTE *)this + 30) = *((_BYTE *)a2 + 30);
    if ((v10 & 8) == 0)
    {
LABEL_10:
      if ((v10 & 0x10) == 0)
        goto LABEL_11;
      goto LABEL_77;
    }
LABEL_76:
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    if ((v10 & 0x10) == 0)
    {
LABEL_11:
      if ((v10 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_78;
    }
LABEL_77:
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    if ((v10 & 0x20) == 0)
    {
LABEL_12:
      if ((v10 & 0x40) == 0)
        goto LABEL_13;
      goto LABEL_79;
    }
LABEL_78:
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    if ((v10 & 0x40) == 0)
    {
LABEL_13:
      if ((v10 & 0x80) == 0)
      {
LABEL_15:
        *((_DWORD *)this + 4) |= v10;
        goto LABEL_16;
      }
LABEL_14:
      result = *((double *)a2 + 7);
      *((double *)this + 7) = result;
      goto LABEL_15;
    }
LABEL_79:
    result = *((double *)a2 + 6);
    *((double *)this + 6) = result;
    if ((v10 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_16:
  if ((v10 & 0xFF00) == 0)
    goto LABEL_27;
  if ((v10 & 0x100) != 0)
  {
    result = *((double *)a2 + 8);
    *((double *)this + 8) = result;
    if ((v10 & 0x200) == 0)
    {
LABEL_19:
      if ((v10 & 0x400) == 0)
        goto LABEL_20;
      goto LABEL_83;
    }
  }
  else if ((v10 & 0x200) == 0)
  {
    goto LABEL_19;
  }
  result = *((double *)a2 + 9);
  *((double *)this + 9) = result;
  if ((v10 & 0x400) == 0)
  {
LABEL_20:
    if ((v10 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_84;
  }
LABEL_83:
  result = *((double *)a2 + 10);
  *((double *)this + 10) = result;
  if ((v10 & 0x800) == 0)
  {
LABEL_21:
    if ((v10 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_85;
  }
LABEL_84:
  result = *((double *)a2 + 11);
  *((double *)this + 11) = result;
  if ((v10 & 0x1000) == 0)
  {
LABEL_22:
    if ((v10 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_86;
  }
LABEL_85:
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  if ((v10 & 0x2000) == 0)
  {
LABEL_23:
    if ((v10 & 0x4000) == 0)
      goto LABEL_24;
LABEL_87:
    *((_BYTE *)this + 98) = *((_BYTE *)a2 + 98);
    if ((v10 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_86:
  *((_BYTE *)this + 97) = *((_BYTE *)a2 + 97);
  if ((v10 & 0x4000) != 0)
    goto LABEL_87;
LABEL_24:
  if ((v10 & 0x8000) != 0)
LABEL_25:
    *((_BYTE *)this + 99) = *((_BYTE *)a2 + 99);
LABEL_26:
  *((_DWORD *)this + 4) |= v10;
LABEL_27:
  if ((v10 & 0xFF0000) == 0)
    goto LABEL_38;
  if ((v10 & 0x10000) != 0)
  {
    *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
    if ((v10 & 0x20000) == 0)
    {
LABEL_30:
      if ((v10 & 0x40000) == 0)
        goto LABEL_31;
      goto LABEL_91;
    }
  }
  else if ((v10 & 0x20000) == 0)
  {
    goto LABEL_30;
  }
  result = *((double *)a2 + 13);
  *((double *)this + 13) = result;
  if ((v10 & 0x40000) == 0)
  {
LABEL_31:
    if ((v10 & 0x80000) == 0)
      goto LABEL_32;
    goto LABEL_92;
  }
LABEL_91:
  result = *((double *)a2 + 14);
  *((double *)this + 14) = result;
  if ((v10 & 0x80000) == 0)
  {
LABEL_32:
    if ((v10 & 0x100000) == 0)
      goto LABEL_33;
    goto LABEL_93;
  }
LABEL_92:
  result = *((double *)a2 + 15);
  *((double *)this + 15) = result;
  if ((v10 & 0x100000) == 0)
  {
LABEL_33:
    if ((v10 & 0x200000) == 0)
      goto LABEL_34;
    goto LABEL_94;
  }
LABEL_93:
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  if ((v10 & 0x200000) == 0)
  {
LABEL_34:
    if ((v10 & 0x400000) == 0)
      goto LABEL_35;
LABEL_95:
    result = *((double *)a2 + 17);
    *((double *)this + 17) = result;
    if ((v10 & 0x800000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_94:
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  if ((v10 & 0x400000) != 0)
    goto LABEL_95;
LABEL_35:
  if ((v10 & 0x800000) != 0)
  {
LABEL_36:
    result = *((double *)a2 + 18);
    *((double *)this + 18) = result;
  }
LABEL_37:
  *((_DWORD *)this + 4) |= v10;
LABEL_38:
  if (!HIBYTE(v10))
    goto LABEL_48;
  if ((v10 & 0x1000000) != 0)
  {
    result = *((double *)a2 + 19);
    *((double *)this + 19) = result;
    if ((v10 & 0x2000000) == 0)
    {
LABEL_41:
      if ((v10 & 0x4000000) == 0)
        goto LABEL_42;
      goto LABEL_115;
    }
  }
  else if ((v10 & 0x2000000) == 0)
  {
    goto LABEL_41;
  }
  result = *((double *)a2 + 20);
  *((double *)this + 20) = result;
  if ((v10 & 0x4000000) == 0)
  {
LABEL_42:
    if ((v10 & 0x8000000) == 0)
      goto LABEL_43;
    goto LABEL_116;
  }
LABEL_115:
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  if ((v10 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v10 & 0x10000000) == 0)
      goto LABEL_44;
    goto LABEL_117;
  }
LABEL_116:
  result = *((double *)a2 + 22);
  *((double *)this + 22) = result;
  if ((v10 & 0x10000000) == 0)
  {
LABEL_44:
    if ((v10 & 0x20000000) == 0)
      goto LABEL_45;
    goto LABEL_118;
  }
LABEL_117:
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_45:
    if ((v10 & 0x40000000) == 0)
      goto LABEL_46;
LABEL_119:
    *((_BYTE *)this + 192) = *((_BYTE *)a2 + 192);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_47;
LABEL_120:
    *((_BYTE *)this + 193) = *((_BYTE *)a2 + 193);
    goto LABEL_47;
  }
LABEL_118:
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  if ((v10 & 0x40000000) != 0)
    goto LABEL_119;
LABEL_46:
  if ((v10 & 0x80000000) != 0)
    goto LABEL_120;
LABEL_47:
  *((_DWORD *)this + 4) |= v10;
LABEL_48:
  v11 = *((_DWORD *)a2 + 5);
  if (!(_BYTE)v11)
    goto LABEL_59;
  if ((v11 & 1) != 0)
  {
    *((_BYTE *)this + 194) = *((_BYTE *)a2 + 194);
    if ((v11 & 2) == 0)
    {
LABEL_51:
      if ((v11 & 4) == 0)
        goto LABEL_52;
      goto LABEL_99;
    }
  }
  else if ((v11 & 2) == 0)
  {
    goto LABEL_51;
  }
  *((_BYTE *)this + 195) = *((_BYTE *)a2 + 195);
  if ((v11 & 4) == 0)
  {
LABEL_52:
    if ((v11 & 8) == 0)
      goto LABEL_53;
    goto LABEL_100;
  }
LABEL_99:
  *((_BYTE *)this + 196) = *((_BYTE *)a2 + 196);
  if ((v11 & 8) == 0)
  {
LABEL_53:
    if ((v11 & 0x10) == 0)
      goto LABEL_54;
    goto LABEL_101;
  }
LABEL_100:
  *((_BYTE *)this + 197) = *((_BYTE *)a2 + 197);
  if ((v11 & 0x10) == 0)
  {
LABEL_54:
    if ((v11 & 0x20) == 0)
      goto LABEL_55;
    goto LABEL_102;
  }
LABEL_101:
  result = *((double *)a2 + 25);
  *((double *)this + 25) = result;
  if ((v11 & 0x20) == 0)
  {
LABEL_55:
    if ((v11 & 0x40) == 0)
      goto LABEL_56;
LABEL_103:
    result = *((double *)a2 + 27);
    *((double *)this + 27) = result;
    if ((v11 & 0x80) == 0)
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_102:
  result = *((double *)a2 + 26);
  *((double *)this + 26) = result;
  if ((v11 & 0x40) != 0)
    goto LABEL_103;
LABEL_56:
  if ((v11 & 0x80) != 0)
  {
LABEL_57:
    result = *((double *)a2 + 28);
    *((double *)this + 28) = result;
  }
LABEL_58:
  *((_DWORD *)this + 5) |= v11;
LABEL_59:
  if ((v11 & 0xFF00) == 0)
    goto LABEL_70;
  if ((v11 & 0x100) != 0)
  {
    result = *((double *)a2 + 29);
    *((double *)this + 29) = result;
    if ((v11 & 0x200) == 0)
    {
LABEL_62:
      if ((v11 & 0x400) == 0)
        goto LABEL_63;
      goto LABEL_107;
    }
  }
  else if ((v11 & 0x200) == 0)
  {
    goto LABEL_62;
  }
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  if ((v11 & 0x400) == 0)
  {
LABEL_63:
    if ((v11 & 0x800) == 0)
      goto LABEL_64;
    goto LABEL_108;
  }
LABEL_107:
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  if ((v11 & 0x800) == 0)
  {
LABEL_64:
    if ((v11 & 0x1000) == 0)
      goto LABEL_65;
    goto LABEL_109;
  }
LABEL_108:
  result = *((double *)a2 + 31);
  *((double *)this + 31) = result;
  if ((v11 & 0x1000) == 0)
  {
LABEL_65:
    if ((v11 & 0x2000) == 0)
      goto LABEL_66;
    goto LABEL_110;
  }
LABEL_109:
  result = *((double *)a2 + 32);
  *((double *)this + 32) = result;
  if ((v11 & 0x2000) == 0)
  {
LABEL_66:
    if ((v11 & 0x4000) == 0)
      goto LABEL_67;
LABEL_111:
    result = *((double *)a2 + 34);
    *((double *)this + 34) = result;
    if ((v11 & 0x8000) == 0)
      goto LABEL_69;
    goto LABEL_68;
  }
LABEL_110:
  result = *((double *)a2 + 33);
  *((double *)this + 33) = result;
  if ((v11 & 0x4000) != 0)
    goto LABEL_111;
LABEL_67:
  if ((v11 & 0x8000) != 0)
  {
LABEL_68:
    result = *((double *)a2 + 35);
    *((double *)this + 35) = result;
  }
LABEL_69:
  *((_DWORD *)this + 5) |= v11;
LABEL_70:
  if ((v11 & 0x10000) != 0)
  {
    result = *((double *)a2 + 36);
    *((_DWORD *)this + 5) |= 0x10000u;
    *((double *)this + 36) = result;
  }
  return result;
}

double operations_research::glop::GlopParameters::CopyFrom(operations_research::glop::GlopParameters *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;
  double result;

  if (a2 != this)
  {
    operations_research::glop::GlopParameters::Clear(this);
    if (*(void (***)(operations_research::glop::GlopParameters *__hidden))a2 == off_24F97FFF0)
      return operations_research::glop::GlopParameters::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v4);
  }
  return result;
}

double operations_research::glop::GlopParameters::CopyFrom(operations_research::glop::GlopParameters *this, const operations_research::glop::GlopParameters *a2)
{
  double result;

  if (a2 != this)
  {
    operations_research::glop::GlopParameters::Clear(this);
    return operations_research::glop::GlopParameters::MergeFrom(this, a2);
  }
  return result;
}

uint64_t operations_research::glop::GlopParameters::IsInitialized(operations_research::glop::GlopParameters *this)
{
  return 1;
}

uint64_t operations_research::glop::GlopParameters::GetMetadata(operations_research::glop::GlopParameters *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fglop_2fparameters_2eproto, 0);
  return *off_25407A150;
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::glop::GlopParameters>(google::protobuf::Arena *this)
{
  unint64_t AlignedNoHook;
  double result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x128uLL);
  }
  else
  {
    AlignedNoHook = operator new();
  }
  *(_QWORD *)AlignedNoHook = off_24F97FFF0;
  *(_QWORD *)(AlignedNoHook + 8) = this;
  *(_QWORD *)(AlignedNoHook + 16) = 0;
  *(_QWORD *)(AlignedNoHook + 23) = 0;
  *(_QWORD *)(AlignedNoHook + 32) = 0x100000001;
  *(_DWORD *)(AlignedNoHook + 40) = 1;
  *(_OWORD *)(AlignedNoHook + 48) = xmmword_22DCE67A0;
  *(_OWORD *)(AlignedNoHook + 64) = xmmword_22DCE67B0;
  *(_OWORD *)(AlignedNoHook + 80) = xmmword_22DCE67C0;
  *(_QWORD *)(AlignedNoHook + 96) = 0x201010101;
  *(_OWORD *)(AlignedNoHook + 104) = xmmword_22DCE67D0;
  *(_QWORD *)(AlignedNoHook + 120) = 0x3EB0C6F7A0B5ED8DLL;
  *(_QWORD *)(AlignedNoHook + 128) = 0x200000040;
  *(_OWORD *)(AlignedNoHook + 136) = xmmword_22DCE67E0;
  *(_OWORD *)(AlignedNoHook + 152) = xmmword_22DCE67F0;
  *(_QWORD *)(AlignedNoHook + 168) = -1;
  *(_QWORD *)(AlignedNoHook + 176) = 0x3CD203AF9EE75616;
  *(_QWORD *)(AlignedNoHook + 184) = 0x9600000003;
  *(_WORD *)(AlignedNoHook + 196) = 257;
  *(_DWORD *)(AlignedNoHook + 192) = 16843009;
  *(_OWORD *)(AlignedNoHook + 200) = xmmword_22DCE6800;
  *(_OWORD *)(AlignedNoHook + 216) = xmmword_22DCE6810;
  *(_QWORD *)(AlignedNoHook + 232) = 0x3F847AE147AE147BLL;
  *(_QWORD *)(AlignedNoHook + 240) = 0x100000001;
  *(_OWORD *)(AlignedNoHook + 248) = xmmword_22DCE6820;
  *(_QWORD *)(AlignedNoHook + 264) = 0x3EE4F8B588E368F1;
  result = 0.0000001;
  *(_OWORD *)(AlignedNoHook + 272) = xmmword_22DCE6850;
  *(_QWORD *)(AlignedNoHook + 288) = 0x4A511B0EC57E649ALL;
  return result;
}

double operations_research::glop::GlopParameters::New(operations_research::glop::GlopParameters *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::glop::GlopParameters>(0);
}

double operations_research::glop::GlopParameters::New(operations_research::glop::GlopParameters *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::glop::GlopParameters>(a2);
}

uint64_t operations_research::glop::GlopParameters::GetCachedSize(operations_research::glop::GlopParameters *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t google::protobuf::MessageLite::InternalGetTable(google::protobuf::MessageLite *this)
{
  return 0;
}

uint64_t google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(uint64_t *a1)
{
  google::protobuf::internal::ArenaImpl *v2;
  uint64_t AlignedAndAddCleanup;

  v2 = (google::protobuf::internal::ArenaImpl *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  if ((*a1 & 1) != 0)
  {
    v2 = *(google::protobuf::internal::ArenaImpl **)v2;
    if (v2)
      goto LABEL_3;
LABEL_7:
    AlignedAndAddCleanup = operator new();
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if (*((_QWORD *)v2 + 14))
  AlignedAndAddCleanup = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v2, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<google::protobuf::UnknownFieldSet>>);
LABEL_8:
  *(_OWORD *)AlignedAndAddCleanup = 0u;
  *(_OWORD *)(AlignedAndAddCleanup + 16) = 0u;
  *a1 = AlignedAndAddCleanup | 1;
  *(_QWORD *)AlignedAndAddCleanup = v2;
  return AlignedAndAddCleanup + 8;
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<google::protobuf::UnknownFieldSet>>(uint64_t a1)
{
  void *v3;
  void *v4;
  google::protobuf::UnknownFieldSet *v5;

  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  v5 = (google::protobuf::UnknownFieldSet *)(a1 + 8);
  if (v3 != v4)
  {
    google::protobuf::UnknownFieldSet::ClearFallback(v5);
    v3 = *(void **)v5;
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
}

void _GLOBAL__sub_I_parameters_pb_cc()
{
  google::protobuf::internal::AddDescriptors((std::string::size_type)&descriptor_table_ortools_2fglop_2fparameters_2eproto);
}

operations_research::glop::PrimalEdgeNorms *operations_research::glop::PrimalEdgeNorms::PrimalEdgeNorms(operations_research::glop::PrimalEdgeNorms *this, const operations_research::glop::CompactSparseMatrix *a2, const operations_research::glop::VariablesInfo *a3, const operations_research::glop::BasisFactorization *a4)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)this + 24, 0);
  operations_research::glop::PrimalEdgeNorms::Stats::Stats((operations_research::glop::PrimalEdgeNorms *)((char *)this + 320));
  *(_WORD *)((char *)this + 721) = 257;
  *((_QWORD *)this + 99) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_QWORD *)this + 111) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  return this;
}

void sub_22DA0A05C(_Unwind_Exception *a1)
{
  operations_research::glop::GlopParameters *v1;

  operations_research::glop::GlopParameters::~GlopParameters(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::PrimalEdgeNorms::Clear(uint64_t this)
{
  *(_WORD *)(this + 721) = 257;
  return this;
}

uint64_t operations_research::glop::PrimalEdgeNorms::NeedsBasisRefactorization(operations_research::glop::PrimalEdgeNorms *this)
{
  return *((unsigned __int8 *)this + 721);
}

uint64_t operations_research::glop::PrimalEdgeNorms::GetEdgeSquaredNorms(operations_research::glop::PrimalEdgeNorms *this)
{
  if (*((_BYTE *)this + 721))
    operations_research::glop::PrimalEdgeNorms::ComputeEdgeSquaredNorms(this);
  return (uint64_t)this + 728;
}

void operations_research::glop::PrimalEdgeNorms::ComputeEdgeSquaredNorms(operations_research::glop::PrimalEdgeNorms *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t IsRelevantBitRow;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v37[3];

  v2 = *(int *)(*(_QWORD *)this + 4);
  v37[0] = 0;
  v3 = *((_QWORD *)this + 91);
  v4 = (*((_QWORD *)this + 92) - v3) >> 3;
  if (v2 <= v4)
  {
    if (v2 < v4)
      *((_QWORD *)this + 92) = v3 + 8 * v2;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 728, v2 - v4, v37);
  }
  IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                   + 1));
  v6 = IsRelevantBitRow;
  v7 = *(unint64_t **)(IsRelevantBitRow + 8);
  v8 = *(unint64_t **)(IsRelevantBitRow + 16);
  if (v7 == v8)
    goto LABEL_18;
  v9 = *v7;
  if (*v7)
  {
    v10 = 0;
    goto LABEL_21;
  }
  v11 = 0;
  v12 = (char *)v8 - (char *)v7;
  v13 = v12 >> 3;
  v14 = (int)((uint64_t)v12 >> 3);
  if ((int)(v12 >> 3) <= 1)
    v15 = 1;
  else
    v15 = v12 >> 3;
  if (v14 <= 1)
    v14 = 1;
  v16 = v14 - 1;
  while (v16 != v11)
  {
    v17 = v11 + 1;
    if (v7[++v11])
    {
      v15 = v17;
      break;
    }
  }
  if (v15 == (_DWORD)v13)
  {
LABEL_18:
    v19 = 0;
    v10 = 0;
    v20 = 0xFFFFFFFFLL;
    v21 = *(_DWORD *)(IsRelevantBitRow + 40);
    if (v21 != -1)
      goto LABEL_25;
    goto LABEL_35;
  }
  v9 = v7[v15];
  v10 = v15 << 6;
LABEL_21:
  v20 = __clz(__rbit64(v9)) & 0x3F | v10;
  v19 = (v9 - 1) & v9;
  v21 = *(_DWORD *)(IsRelevantBitRow + 40);
  if ((_DWORD)v20 != v21)
  {
    while (1)
    {
LABEL_25:
      v22 = *((_QWORD *)this + 2);
      v23 = *(_QWORD *)(*(_QWORD *)this + 56);
      v24 = 8 * (int)v20;
      v25 = *(_QWORD *)(v23 + v24);
      v26 = *(_QWORD *)(v23 + (((v20 << 32) + 0x100000000) >> 29)) - v25;
      v27 = *(_QWORD *)(*(_QWORD *)this + 32) + 4 * v25;
      v28 = *(_QWORD *)(*(_QWORD *)this + 8) + 8 * v25;
      v37[0] = v26;
      v37[1] = v27;
      v37[2] = v28;
      operations_research::glop::BasisFactorization::RightSolveSquaredNorm(v22, (unint64_t *)v37);
      *(double *)(*((_QWORD *)this + 91) + v24) = v29 + 1.0;
      if (v19)
        goto LABEL_24;
      v30 = *(_QWORD *)(v6 + 8);
      v31 = *(_QWORD *)(v6 + 16) - v30;
      v32 = (unint64_t)v31 >> 3;
      v33 = (int)(v31 >> 3);
      if ((v10 >> 6) + 1 > (int)v32)
        v34 = (v10 >> 6) + 1;
      else
        v34 = v32;
      v35 = ((uint64_t)v10 >> 6) + 1;
      while (v35 < v33)
      {
        if (*(_QWORD *)(v30 + 8 * v35++))
        {
          v34 = v35 - 1;
          break;
        }
      }
      if (v34 == (_DWORD)v32)
      {
        v19 = 0;
        v20 = 0xFFFFFFFFLL;
        if (v21 == -1)
          break;
      }
      else
      {
        v19 = *(_QWORD *)(v30 + 8 * v34);
        v10 = v34 << 6;
LABEL_24:
        v20 = (__clz(__rbit64(v19)) & 0x3F) + v10;
        v19 &= v19 - 1;
        if ((_DWORD)v20 == v21)
          break;
      }
    }
  }
LABEL_35:
  *((_BYTE *)this + 721) = 0;
}

uint64_t operations_research::glop::PrimalEdgeNorms::GetDevexWeights(operations_research::glop::PrimalEdgeNorms *this)
{
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t v6;

  if (*((_BYTE *)this + 722))
  {
    if (*((_BYTE *)this + 216))
    {
      v2 = (char *)*((_QWORD *)this + 94);
      v3 = (char *)*((_QWORD *)this + 95);
      if (v2 == v3)
      {
        operations_research::glop::PrimalEdgeNorms::ComputeMatrixColumnNorms(this);
        v2 = (char *)*((_QWORD *)this + 94);
        v3 = (char *)*((_QWORD *)this + 95);
      }
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 97, v2, v3, (v3 - v2) >> 3);
    }
    else
    {
      v4 = *(int *)(*(_QWORD *)this + 4);
      v6 = 0x3FF0000000000000;
      std::vector<double>::assign((uint64_t)this + 776, v4, &v6);
    }
    *((_DWORD *)this + 200) = 0;
    *((_BYTE *)this + 722) = 0;
  }
  return (uint64_t)this + 776;
}

char *operations_research::glop::PrimalEdgeNorms::GetMatrixColumnNorms(operations_research::glop::PrimalEdgeNorms *this)
{
  char *v1;

  v1 = (char *)this + 752;
  if (*((_QWORD *)this + 94) != *((_QWORD *)this + 95))
    return (char *)this + 752;
  operations_research::glop::PrimalEdgeNorms::ComputeMatrixColumnNorms(this);
  return v1;
}

double operations_research::glop::PrimalEdgeNorms::ComputeMatrixColumnNorms(operations_research::glop::PrimalEdgeNorms *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[3];

  v2 = *(_QWORD *)this;
  v3 = *(int *)(*(_QWORD *)this + 4);
  v13[0] = 0;
  v4 = *((_QWORD *)this + 94);
  v5 = (*((_QWORD *)this + 95) - v4) >> 3;
  if (v3 <= v5)
  {
    if (v3 < v5)
      *((_QWORD *)this + 95) = v4 + 8 * v3;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 752, v3 - v5, v13);
    v2 = *(_QWORD *)this;
  }
  if (*(int *)(v2 + 4) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(v2 + 56);
    do
    {
      v9 = 8 * v7;
      v10 = (_QWORD *)(v8 + 8 * v7++);
      v11 = *(_QWORD *)(v2 + 32) + 4 * *v10;
      v12 = *(_QWORD *)(v2 + 8) + 8 * *v10;
      v13[0] = v10[1] - *v10;
      v13[1] = v11;
      v13[2] = v12;
      result = sqrt(operations_research::glop::SquaredNorm((unint64_t *)v13));
      *(double *)(*((_QWORD *)this + 94) + v9) = result;
      v2 = *(_QWORD *)this;
      v8 = *(_QWORD *)(*(_QWORD *)this + 56);
      *((_QWORD *)this + 111) += *(_QWORD *)(v8 + v9 + 8) - *(_QWORD *)(v8 + v9);
    }
    while (v7 < *(int *)(v2 + 4));
  }
  return result;
}

void operations_research::glop::PrimalEdgeNorms::TestEnteringEdgeNormPrecision(uint64_t a1, const operations_research::glop::ScatteredColumn *a2, operations_research::glop *this)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  _BYTE v11[16];

  if (!*(_BYTE *)(a1 + 721))
  {
    v4 = 8 * (int)a2;
    v5 = *(double *)(*(_QWORD *)(a1 + 728) + v4);
    v6 = operations_research::glop::PreciseSquaredNorm(this, a2) + 1.0;
    *(double *)(*(_QWORD *)(a1 + 728) + v4) = v6;
    v7 = sqrt(v6);
    v8 = sqrt(v5);
    operations_research::RatioDistribution::Add(a1 + 560, (v7 - v8) / v7);
    if (fabs((v7 - v8) / v7) > *(double *)(a1 + 88))
    {
      if (*operations_research::glop::PrimalEdgeNorms::TestEnteringEdgeNormPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&)::vlocal__[0] >= 1
        && (operations_research::glop::PrimalEdgeNorms::TestEnteringEdgeNormPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::glop::PrimalEdgeNorms::TestEnteringEdgeNormPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/primal_edge_norms.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v11, (google::glog_internal_namespace_ *)"./ortools/glop/primal_edge_norms.cc", 79);
        v9 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Recomputing edge norms: ", 24);
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs ", 4);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v11);
      }
      *(_BYTE *)(a1 + 721) = 1;
    }
  }
}

void sub_22DA0A5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::PrimalEdgeNorms::UpdateBeforeBasisPivot(uint64_t result, int a2, int a3, signed int a4, char **a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v12;
  int v13;
  double v14;
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;

  v10 = result;
  if (*(_BYTE *)(result + 721))
  {
    if (*(_BYTE *)(result + 722))
      return result;
  }
  else
  {
    operations_research::glop::UpdateRow::ComputeUpdateRow((int **)a6, a4);
    operations_research::glop::PrimalEdgeNorms::ComputeDirectionLeftInverse((uint64_t *)v10, v12, a5);
    result = operations_research::glop::PrimalEdgeNorms::UpdateEdgeSquaredNorms((_QWORD *)v10, a2, a3, a4, a5, (operations_research::glop::UpdateRow *)a6);
    if (*(_BYTE *)(v10 + 722))
      return result;
  }
  v13 = *(_DWORD *)(v10 + 800);
  *(_DWORD *)(v10 + 800) = v13 + 1;
  if (v13 >= *(_DWORD *)(v10 + 212))
  {
    *(_BYTE *)(v10 + 722) = 1;
  }
  else
  {
    operations_research::glop::UpdateRow::ComputeUpdateRow((int **)a6, a4);
    v14 = fmax(sqrt(operations_research::glop::PreciseSquaredNorm((uint64_t)a5)) / fabs(*(double *)&(*a5)[8 * a4]), 1.0);
    result = operations_research::glop::UpdateRow::GetNonZeroPositions((operations_research::glop::UpdateRow *)a6);
    v15 = *(int **)result;
    v16 = *(int **)(result + 8);
    if (*(int **)result == v16)
    {
      v18 = *(_QWORD *)(v10 + 776);
    }
    else
    {
      v17 = *(_QWORD *)(a6 + 224);
      v18 = *(_QWORD *)(v10 + 776);
      do
      {
        v19 = *v15++;
        v20 = 8 * v19;
        v21 = *(double *)(v18 + 8 * v19);
        v22 = v14 * fabs(*(double *)(v17 + 8 * v19));
        if (v21 >= v22)
          v22 = v21;
        *(double *)(v18 + v20) = v22;
      }
      while (v15 != v16);
    }
    *(double *)(v18 + 8 * a3) = v14;
  }
  return result;
}

void operations_research::glop::PrimalEdgeNorms::ComputeDirectionLeftInverse(uint64_t *a1, uint64_t a2, char **a3)
{
  char *v5;
  uint64_t v6;
  double v7;
  void **v8;
  int **v9;
  int *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int64_t v25;
  int64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  v5 = a3[1];
  v6 = v5 - *a3;
  v7 = (double)(int)((unint64_t)v6 >> 3) * 0.05;
  v8 = (void **)(a1 + 101);
  v9 = (int **)(a1 + 105);
  v10 = (int *)a1[105];
  v11 = v10;
  v12 = (int *)a1[106];
  if (v10 == v12 || (v13 = v12 - v10, v7 + v7 <= (double)(unint64_t)(v13 + ((a3[5] - a3[4]) >> 2))))
  {
    if (v8 != (void **)a3)
    {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a1 + 101, *a3, v5, v6 >> 3);
      v11 = *v9;
    }
    a1[106] = (uint64_t)v11;
    v23 = a3[4];
    v24 = a3[5];
    v25 = (v24 - v23) >> 2;
  }
  else
  {
    if (v7 <= (double)(unint64_t)v13)
    {
      v35 = 0;
      v26 = (v6 << 29) & 0xFFFFFFFF00000000;
      v27 = (void *)a1[101];
      v28 = (a1[102] - (uint64_t)v27) >> 3;
      if (v26 >> 32 <= v28)
      {
        if (v26 >> 32 < v28)
          a1[102] = (uint64_t)v27 + 8 * (v26 >> 32);
      }
      else
      {
        std::vector<double>::__append((uint64_t)v8, (v26 >> 32) - v28, &v35);
        v27 = *v8;
      }
      bzero(v27, v26 >> 29);
    }
    else
    {
      v14 = *v8;
      v15 = (char *)v12 - (char *)v10 - 4;
      if (v15 < 4)
        goto LABEL_35;
      v16 = (v15 >> 2) + 1;
      v11 = &v10[v16 & 0x7FFFFFFFFFFFFFFELL];
      v17 = v10 + 1;
      v18 = v16 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v19 = *v17;
        v14[*(v17 - 1)] = 0;
        v14[v19] = 0;
        v17 += 2;
        v18 -= 2;
      }
      while (v18);
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          v20 = *v11++;
          v14[v20] = 0;
        }
        while (v11 != v12);
      }
      v35 = 0;
      v21 = (int)(v6 >> 3);
      v22 = (a1[102] - (uint64_t)v14) >> 3;
      if (v21 <= v22)
      {
        if (v21 < v22)
          a1[102] = (uint64_t)&v14[v21];
      }
      else
      {
        std::vector<double>::__append((uint64_t)(a1 + 101), v21 - v22, &v35);
      }
    }
    a1[106] = a1[105];
    v23 = a3[4];
    v24 = a3[5];
    v25 = (v24 - v23) >> 2;
    if (v24 - v23 >= 1)
    {
      v29 = 0;
      v30 = *a3;
      v31 = *v8;
      if (v25 <= 1)
        v32 = 1;
      else
        v32 = (v24 - v23) >> 2;
      v33 = 4 * v32;
      do
      {
        v31[*(int *)&v23[v29]] = *(_QWORD *)&v30[8 * *(int *)&v23[v29]];
        v29 += 4;
      }
      while (v33 != v29);
    }
  }
  if (v7 > (double)(unint64_t)v25 && v9 != (int **)(a3 + 4))
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v9, v23, v24, v25);
  operations_research::glop::BasisFactorization::LeftSolve(a1[2], (uint64_t)v8);
}

uint64_t operations_research::glop::PrimalEdgeNorms::UpdateEdgeSquaredNorms(_QWORD *a1, int a2, int a3, int a4, _QWORD *a5, operations_research::glop::UpdateRow *this)
{
  double v9;
  double v10;
  uint64_t NonZeroPositions;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  BOOL v24;
  uint64_t v25;
  int *v26;
  double *v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;

  v9 = *(double *)(*a5 + 8 * a4);
  v10 = fmax(*(double *)(a1[91] + 8 * a2) / (v9 * v9), 1.0);
  NonZeroPositions = operations_research::glop::UpdateRow::GetNonZeroPositions(this);
  v12 = *(int **)NonZeroPositions;
  v13 = *(int **)(NonZeroPositions + 8);
  v14 = a1[91];
  if (*(int **)NonZeroPositions == v13)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    v16 = *((_QWORD *)this + 28);
    v17 = *a1;
    v18 = *(_QWORD *)(*a1 + 56);
    v19 = a1[111];
    do
    {
      v20 = *v12;
      v21 = *(_QWORD *)(v18 + 8 * v20);
      v22 = *(_QWORD *)(v18 + (((v20 << 32) + 0x100000000) >> 29));
      v23 = 0.0;
      v24 = v22 <= v21;
      v25 = v22 - v21;
      if (!v24)
      {
        v26 = (int *)(*(_QWORD *)(v17 + 32) + 4 * v21);
        v27 = (double *)(*(_QWORD *)(v17 + 8) + 8 * v21);
        v28 = v25;
        do
        {
          v29 = *v27++;
          v30 = v29;
          v31 = *v26++;
          v23 = v23 + v30 * *(double *)(a1[101] + 8 * v31);
          --v28;
        }
        while (v28);
      }
      v32 = *(double *)(v16 + 8 * v20);
      v19 += v25;
      a1[111] = v19;
      v33 = *(double *)(v14 + 8 * v20) + v32 * (-2.0 / v9 * v23 + v32 * v10);
      *(double *)(v14 + 8 * v20) = v33;
      v34 = v32 / -v9 * (v32 / -v9) + 1.0;
      if (v33 < v34)
      {
        *(double *)(v14 + 8 * v20) = v34;
        ++v15;
      }
      ++v12;
    }
    while (v12 != v13);
  }
  *(double *)(v14 + 8 * a3) = v10;
  return operations_research::IntegerDistribution::Add((uint64_t)(a1 + 80), v15);
}

operations_research::glop::PrimalEdgeNorms::Stats *operations_research::glop::PrimalEdgeNorms::Stats::Stats(operations_research::glop::PrimalEdgeNorms::Stats *this)
{
  void *__p[4];

  strcpy((char *)this, "PrimalEdgeNorms");
  *((_BYTE *)this + 23) = 15;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_22DCE5C00;
  strcpy((char *)__p[0], "direction_left_inverse_density");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::PrimalEdgeNorms::Stats *)((char *)this + 80), (__int128 *)__p, this) = &unk_24F987C70;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_22DCE6550;
  strcpy((char *)__p[0], "direction_left_inverse_accuracy");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::PrimalEdgeNorms::Stats *)((char *)this + 160), (__int128 *)__p, this) = &unk_24F987CD0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "edges_norm_accuracy");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::PrimalEdgeNorms::Stats *)((char *)this + 240), (__int128 *)__p, this) = &unk_24F987CD0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "lower_bounded_norms");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::PrimalEdgeNorms::Stats *)((char *)this + 320), (__int128 *)__p, this) = &unk_24F987D30;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return this;
}

void sub_22DA0ACE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v14 + 240) = off_24F97FEB0;
  if (*(char *)(v14 + 271) < 0)
    operator delete(*(void **)(v14 + 248));
  *(_QWORD *)(v14 + 160) = off_24F97FEB0;
  if (*(char *)(v14 + 191) < 0)
    operator delete(*(void **)(v14 + 168));
  *(_QWORD *)(v14 + 80) = off_24F97FEB0;
  if (*(char *)(v14 + 111) < 0)
  {
    operator delete(*(void **)(v14 + 88));
    operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
    _Unwind_Resume(a1);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::ReducedCosts::ReducedCosts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  operations_research::glop::GlopParameters::GlopParameters(a1 + 48, 0);
  operations_research::glop::ReducedCosts::Stats::Stats((operations_research::glop::ReducedCosts::Stats *)(a1 + 344));
  *(_DWORD *)(a1 + 664) = 16843008;
  *(_WORD *)(a1 + 668) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_DWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 864) = a1 + 832;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_DWORD *)(a1 + 872) = -1;
  *(_BYTE *)(a1 + 888) = 0;
  return a1;
}

void sub_22DA0AE4C(_Unwind_Exception *a1)
{
  operations_research::glop::GlopParameters *v1;

  operations_research::glop::GlopParameters::~GlopParameters(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::ReducedCosts::NeedsBasisRefactorization(operations_research::glop::ReducedCosts *this)
{
  return *((unsigned __int8 *)this + 664);
}

uint64_t operations_research::glop::ReducedCosts::TestEnteringReducedCostPrecision(operations_research::glop::VariablesInfo **this, int a2, double **a3, double *a4)
{
  operations_research::glop::VariablesInfo *v8;
  double v9;
  int *v10;
  int *v11;
  uint64_t v12;
  operations_research::glop::VariablesInfo *v13;
  unint64_t v14;
  double *v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t CanDecreaseBitRow;
  uint64_t CanIncreaseBitRow;
  double v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  operations_research::glop::VariablesInfo *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  operations_research::glop::VariablesInfo *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  _QWORD *v46;
  _QWORD *v47;
  _BYTE *v48;
  _BYTE v49[16];

  if (*((_BYTE *)this + 666))
    operations_research::glop::ReducedCosts::ComputeBasicObjective((operations_research::glop::ReducedCosts *)this);
  v8 = this[90];
  v9 = *(double *)(*(_QWORD *)this[1] + 8 * a2) + *((double *)this[87] + a2);
  v10 = (int *)a3[4];
  v11 = (int *)a3[5];
  if (v10 != v11)
  {
    v12 = v11 - v10;
    if ((double)(int)((unint64_t)((char *)a3[1] - (char *)*a3) >> 3) * 0.8 >= (double)(unint64_t)v12)
    {
      if ((char *)v11 - (char *)v10 < 1)
      {
        v28 = *((double *)v8 + a2);
        v29 = v9 - 0.0;
        *((double *)v8 + a2) = v9 - 0.0;
        *a4 = v9 - 0.0;
        if (!*((_BYTE *)this + 888))
          goto LABEL_32;
        goto LABEL_19;
      }
      if (v12 <= 1)
        v12 = 1;
      v24 = 0.0;
      v25 = 0.0;
      do
      {
        v26 = *v10++;
        v27 = v25 + *((double *)this[84] + v26) * (*a3)[v26];
        v23 = v24 + v27;
        v25 = v27 + v24 - (v24 + v27);
        v24 = v23;
        --v12;
      }
      while (v12);
      goto LABEL_14;
    }
  }
  v13 = this[84];
  v14 = this[85] - v13;
  if ((int)(v14 >> 3) >= 1)
  {
    v15 = *a3;
    v16 = (v14 >> 3);
    v17 = 0.0;
    v18 = 0.0;
    do
    {
      v19 = *(double *)v13;
      v13 = (operations_research::glop::VariablesInfo *)((char *)v13 + 8);
      v20 = v19;
      v21 = *v15++;
      v22 = v18 + v20 * v21;
      v23 = v17 + v22;
      v18 = v22 + v17 - (v17 + v22);
      v17 = v23;
      --v16;
    }
    while (v16);
LABEL_14:
    v28 = *((double *)v8 + a2);
    v29 = v9 - v23;
    *((double *)v8 + a2) = v9 - v23;
    *a4 = v9 - v23;
    if (!*((_BYTE *)this + 888))
      goto LABEL_32;
    goto LABEL_19;
  }
  v28 = *((double *)v8 + a2);
  v29 = v9 - 0.0;
  *((double *)v8 + a2) = v9 - 0.0;
  *a4 = v9 - 0.0;
  if (!*((_BYTE *)this + 888))
    goto LABEL_32;
LABEL_19:
  v30 = *((double *)v8 + a2);
  CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(this[3]);
  CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(this[3]);
  v33 = *((double *)this + 103);
  v34 = (unint64_t)a2 >> 6;
  v35 = 1 << a2;
  v36 = (*(_QWORD *)(*(_QWORD *)(CanIncreaseBitRow + 8) + 8 * v34) & (1 << a2)) != 0 && v30 < -v33;
  if (v36
    || ((*(_QWORD *)(*(_QWORD *)(CanDecreaseBitRow + 8) + 8 * v34) & v35) != 0 ? (v37 = v30 <= v33) : (v37 = 1), !v37))
  {
    v42 = this[105];
    v43 = 8 * v34;
    v44 = *((_QWORD *)v42 + v34) | v35;
    *(_QWORD *)((char *)v42 + v43) = v44;
    if ((v44 & v35) != 0)
      goto LABEL_32;
LABEL_29:
    if (*((_BYTE *)this + 668))
      return 0;
    result = 0;
    *((_WORD *)this + 332) = 257;
    v48 = (char *)this + 667;
    goto LABEL_45;
  }
  v38 = this[105];
  v39 = 8 * v34;
  v40 = *((_QWORD *)v38 + v34) & ~v35;
  *(_QWORD *)((char *)v38 + v39) = v40;
  if ((v40 & v35) == 0)
    goto LABEL_29;
LABEL_32:
  if (*((_BYTE *)this + 667))
    return 1;
  v45 = fabs(v29) > 1.0 ? v29 : 1.0;
  operations_research::RatioDistribution::Add((uint64_t)(this + 63), (v28 - v29) / v45);
  if (vabdd_f64(v28, v29) / v45 <= *((double *)this + 13))
    return 1;
  if (*operations_research::glop::ReducedCosts::TestEnteringReducedCostPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,double *)::vlocal__[0] >= 1
    && (operations_research::glop::ReducedCosts::TestEnteringReducedCostPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,double *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::ReducedCosts::TestEnteringReducedCostPrecision(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::ScatteredColumn const&,double *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/reduced_costs.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v49, (google::glog_internal_namespace_ *)"./ortools/glop/reduced_costs.cc", 104);
    v46 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Recomputing reduced costs, value = ", 35);
    v47 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" error = ", 9);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v49);
  }
  if (*((_BYTE *)this + 668))
    return 1;
  v48 = (char *)this + 667;
  *((_WORD *)this + 332) = 257;
  result = 1;
LABEL_45:
  *v48 = 1;
  return result;
}

void sub_22DA0B1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::ReducedCosts::ComputeBasicObjective(operations_research::glop::ReducedCosts *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = **(int **)this;
  v2 = *(int *)(*(_QWORD *)this + 4);
  v14 = 0;
  v4 = *((_QWORD *)this + 87);
  v5 = (*((_QWORD *)this + 88) - v4) >> 3;
  if (v2 <= v5)
  {
    if (v2 < v5)
      *((_QWORD *)this + 88) = v4 + 8 * v2;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 696, v2 - v5, &v14);
  }
  v14 = 0;
  v6 = *((_QWORD *)this + 84);
  v7 = (*((_QWORD *)this + 85) - v6) >> 3;
  if (v3 <= v7)
  {
    if (v3 < v7)
      *((_QWORD *)this + 85) = v6 + 8 * v3;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 672, v3 - v7, &v14);
  }
  if ((int)v3 >= 1)
  {
    v8 = (int *)**((_QWORD **)this + 2);
    v9 = **((_QWORD **)this + 1);
    v10 = *((_QWORD *)this + 87);
    v11 = (double *)*((_QWORD *)this + 84);
    v12 = v3;
    do
    {
      v13 = *v8++;
      *v11++ = *(double *)(v9 + 8 * v13) + *(double *)(v10 + 8 * v13);
      --v12;
    }
    while (v12);
  }
  *(_WORD *)((char *)this + 665) = 1;
}

uint64_t operations_research::glop::ReducedCosts::MakeReducedCostsPrecise(uint64_t this)
{
  if (!*(_BYTE *)(this + 668))
  {
    *(_WORD *)(this + 664) = 257;
    *(_BYTE *)(this + 667) = 1;
  }
  return this;
}

double operations_research::glop::ReducedCosts::ComputeMaximumDualResidual(operations_research::glop::ReducedCosts *this)
{
  double v1;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float64x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  BOOL v31;
  uint64_t v32;
  int *v33;
  double *v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;

  v1 = 0.0;
  if (*((_BYTE *)this + 667))
    return v1;
  v3 = *(_QWORD **)this;
  v4 = **(int **)this;
  if (!(_DWORD)v4)
    return v1;
  if ((v4 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v5 = *(_DWORD *)(*(_QWORD *)this + 4) - v4;
  v6 = **(unsigned int **)this;
  v7 = (float64x2_t *)operator new(8 * v6);
  bzero(v7, 8 * v4);
  v8 = **((_QWORD **)this + 1);
  v9 = *((_QWORD *)this + 87);
  v10 = *((_QWORD *)this + 90);
  if (v4 < 0xA)
  {
    v11 = 0;
LABEL_6:
    v12 = &v7->f64[v11];
    v13 = 8 * (v11 + v5);
    v14 = (double *)(v10 + v13);
    v15 = (double *)(v9 + v13);
    v16 = (double *)(v8 + v13);
    v17 = v6 - v11;
    do
    {
      v18 = *v16++;
      v19 = v18;
      v20 = *v15++;
      v21 = v19 + v20;
      v22 = *v14++;
      *v12++ = v21 - v22;
      --v17;
    }
    while (v17);
    goto LABEL_8;
  }
  v11 = 0;
  v39 = 8 * v5;
  if ((unint64_t)v7 - v39 - v8 < 0x20)
    goto LABEL_6;
  if ((unint64_t)v7 - v39 - v9 < 0x20)
    goto LABEL_6;
  if ((unint64_t)v7 - v39 - v10 < 0x20)
    goto LABEL_6;
  v11 = v6 & 0xFFFFFFFC;
  v40 = v39 + 16;
  v41 = (float64x2_t *)(v10 + v39 + 16);
  v42 = v7 + 1;
  v43 = (float64x2_t *)(v9 + v40);
  v44 = (float64x2_t *)(v8 + v40);
  v45 = v11;
  do
  {
    v46 = vsubq_f64(vaddq_f64(v44[-1], v43[-1]), v41[-1]);
    v47 = vsubq_f64(vaddq_f64(*v44, *v43), *v41);
    v41 += 2;
    v42[-1] = v46;
    *v42 = v47;
    v42 += 2;
    v43 += 2;
    v44 += 2;
    v45 -= 4;
  }
  while (v45);
  if (v11 != v6)
    goto LABEL_6;
LABEL_8:
  v23 = 0;
  v24 = v3[7];
  v1 = 0.0;
  do
  {
    v26 = *(int *)(**((_QWORD **)this + 2) + 4 * v23);
    v27 = 8 * v26;
    v28 = *(_QWORD *)(v24 + 8 * v26);
    v29 = *(_QWORD *)(v24 + (((v26 << 32) + 0x100000000) >> 29));
    v30 = 0.0;
    v31 = v29 <= v28;
    v32 = v29 - v28;
    if (!v31)
    {
      v33 = (int *)(v3[4] + 4 * v28);
      v34 = (double *)(v3[1] + 8 * v28);
      do
      {
        v35 = *v34++;
        v36 = v35;
        v37 = *v33++;
        v30 = v30 + v36 * v7->f64[v37];
        --v32;
      }
      while (v32);
    }
    v25 = vabdd_f64(*(double *)(**((_QWORD **)this + 1) + v27) + *(double *)(*((_QWORD *)this + 87) + v27), v30);
    if (v1 < v25)
      v1 = v25;
    ++v23;
  }
  while (v23 != v6);
  operator delete(v7);
  return v1;
}

double operations_research::glop::ReducedCosts::ComputeMaximumDualInfeasibility(operations_research::glop::ReducedCosts *this)
{
  double v1;
  uint64_t CanDecreaseBitRow;
  uint64_t CanIncreaseBitRow;
  uint64_t IsRelevantBitRow;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  int v26;
  uint64_t v27;

  v1 = 0.0;
  if (*((_BYTE *)this + 667))
    return v1;
  CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                     + 3));
  CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                     + 3));
  IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                   + 3));
  v6 = *(unint64_t **)(IsRelevantBitRow + 8);
  v7 = *(unint64_t **)(IsRelevantBitRow + 16);
  if (v6 != v7)
  {
    v8 = *v6;
    if (*v6)
    {
      v9 = 0;
      goto LABEL_18;
    }
    v10 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    v11 = (int)(v7 - v6);
    if ((int)v10 <= 1)
      v12 = 1;
    else
      v12 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    if (v11 <= 1)
      v11 = 1;
    v13 = v11 - 1;
    while (v13 != v8)
    {
      v14 = v8 + 1;
      if (v6[++v8])
      {
        v12 = v14;
        break;
      }
    }
    if (v12 != (_DWORD)v10)
    {
      v8 = v6[v12];
      v9 = v12 << 6;
LABEL_18:
      v17 = __clz(__rbit64(v8)) & 0x3F | v9;
      v16 = (v8 - 1) & v8;
      v18 = *(_DWORD *)(IsRelevantBitRow + 40);
      if (v17 != v18)
        goto LABEL_19;
      return v1;
    }
  }
  v16 = 0;
  v9 = 0;
  v17 = -1;
  v18 = *(_DWORD *)(IsRelevantBitRow + 40);
  if (v18 != -1)
  {
LABEL_19:
    v19 = (char *)v7 - (char *)v6;
    v20 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    v21 = (int)(v19 >> 3);
    v1 = 0.0;
    while (1)
    {
      v22 = *(double *)(*((_QWORD *)this + 90) + 8 * v17);
      v23 = (unint64_t)v17 >> 6;
      v24 = 1 << v17;
      if ((*(_QWORD *)(*(_QWORD *)(CanIncreaseBitRow + 8) + 8 * v23) & v24) != 0 && v22 < 0.0
        || (*(_QWORD *)(*(_QWORD *)(CanDecreaseBitRow + 8) + 8 * v23) & v24) != 0 && v22 > 0.0)
      {
        v25 = fabs(v22);
        if (v1 < v25)
          v1 = v25;
      }
      if (v16)
        goto LABEL_21;
      if ((v9 >> 6) + 1 > (int)v20)
        v26 = (v9 >> 6) + 1;
      else
        v26 = v20;
      v27 = ((uint64_t)v9 >> 6) + 1;
      while (v27 < v21)
      {
        if (v6[v27++])
        {
          v26 = v27 - 1;
          break;
        }
      }
      if (v26 == (_DWORD)v20)
      {
        v16 = 0;
        v17 = -1;
        if (v18 == -1)
          return v1;
      }
      else
      {
        v16 = v6[v26];
        v9 = v26 << 6;
LABEL_21:
        v17 = (__clz(__rbit64(v16)) & 0x3F) + v9;
        v16 &= v16 - 1;
        if (v17 == v18)
          return v1;
      }
    }
  }
  return v1;
}

double operations_research::glop::ReducedCosts::ComputeSumOfDualInfeasibilities(operations_research::glop::ReducedCosts *this)
{
  double v1;
  uint64_t CanDecreaseBitRow;
  uint64_t CanIncreaseBitRow;
  uint64_t IsRelevantBitRow;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v1 = 0.0;
  if (*((_BYTE *)this + 667))
    return v1;
  CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                     + 3));
  CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                     + 3));
  IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                   + 3));
  v6 = *(unint64_t **)(IsRelevantBitRow + 8);
  v7 = *(unint64_t **)(IsRelevantBitRow + 16);
  if (v6 != v7)
  {
    v8 = *v6;
    if (*v6)
    {
      v9 = 0;
      goto LABEL_18;
    }
    v10 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    v11 = (int)(v7 - v6);
    if ((int)v10 <= 1)
      v12 = 1;
    else
      v12 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    if (v11 <= 1)
      v11 = 1;
    v13 = v11 - 1;
    while (v13 != v8)
    {
      v14 = v8 + 1;
      if (v6[++v8])
      {
        v12 = v14;
        break;
      }
    }
    if (v12 != (_DWORD)v10)
    {
      v8 = v6[v12];
      v9 = v12 << 6;
LABEL_18:
      v17 = __clz(__rbit64(v8)) & 0x3F | v9;
      v16 = (v8 - 1) & v8;
      v18 = *(_DWORD *)(IsRelevantBitRow + 40);
      if (v17 != v18)
        goto LABEL_19;
      return v1;
    }
  }
  v16 = 0;
  v9 = 0;
  v17 = -1;
  v18 = *(_DWORD *)(IsRelevantBitRow + 40);
  if (v18 != -1)
  {
LABEL_19:
    v19 = (char *)v7 - (char *)v6;
    v20 = (unint64_t)((char *)v7 - (char *)v6) >> 3;
    v21 = (int)(v19 >> 3);
    v1 = 0.0;
    while (1)
    {
      v22 = *(double *)(*((_QWORD *)this + 90) + 8 * v17);
      v23 = (unint64_t)v17 >> 6;
      v24 = 1 << v17;
      if ((*(_QWORD *)(*(_QWORD *)(CanIncreaseBitRow + 8) + 8 * v23) & v24) != 0 && v22 < 0.0
        || (*(_QWORD *)(*(_QWORD *)(CanDecreaseBitRow + 8) + 8 * v23) & v24) != 0 && v22 > 0.0)
      {
        v1 = v1 + fabs(v22);
      }
      if (v16)
        goto LABEL_21;
      if ((v9 >> 6) + 1 > (int)v20)
        v25 = (v9 >> 6) + 1;
      else
        v25 = v20;
      v26 = ((uint64_t)v9 >> 6) + 1;
      while (v26 < v21)
      {
        if (v6[v26++])
        {
          v25 = v26 - 1;
          break;
        }
      }
      if (v25 == (_DWORD)v20)
      {
        v16 = 0;
        v17 = -1;
        if (v18 == -1)
          return v1;
      }
      else
      {
        v16 = v6[v25];
        v9 = v25 << 6;
LABEL_21:
        v17 = (__clz(__rbit64(v16)) & 0x3F) + v9;
        v16 &= v16 - 1;
        if (v17 == v18)
          return v1;
      }
    }
  }
  return v1;
}

double operations_research::glop::ReducedCosts::UpdateBeforeBasisPivot(uint64_t a1, int a2, signed int a3, _QWORD *a4, operations_research::glop::UpdateRow *a5)
{
  uint64_t v8;
  int v9;
  uint64_t NonZeroPositions;
  double v11;
  uint64_t CanDecreaseBitRow;
  uint64_t CanIncreaseBitRow;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;

  v8 = a3;
  v9 = *(_DWORD *)(**(_QWORD **)(a1 + 16) + 4 * a3);
  if (*(_BYTE *)(a1 + 888))
    *(_QWORD *)(*(_QWORD *)(a1 + 840) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << a2);
  operations_research::glop::ReducedCosts::UpdateReducedCosts((int **)a1, a2, v9, a3, (uint64_t)a5, *(double *)(*a4 + 8 * a3));
  if (*(_BYTE *)(a1 + 888))
  {
    NonZeroPositions = operations_research::glop::UpdateRow::GetNonZeroPositions(a5);
    v11 = *(double *)(a1 + 824);
    CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*(operations_research::glop::VariablesInfo **)(a1 + 24));
    CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*(operations_research::glop::VariablesInfo **)(a1 + 24));
    v14 = *(int **)NonZeroPositions;
    v15 = *(int **)(NonZeroPositions + 8);
    if (*(int **)NonZeroPositions == v15)
    {
      v17 = *(_QWORD *)(a1 + 840);
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 720);
      v17 = *(_QWORD *)(a1 + 840);
      v18 = *(_QWORD *)(CanDecreaseBitRow + 8);
      v19 = *(_QWORD *)(CanIncreaseBitRow + 8);
      do
      {
        v20 = *v14++;
        *(_QWORD *)(v17 + 8 * ((uint64_t)(int)v20 >> 6)) = ((unint64_t)(*(double *)(v16 + 8 * v20) > v11) << v20) & *(_QWORD *)(v18 + 8 * ((uint64_t)(int)v20 >> 6)) ^ *(_QWORD *)(v17 + 8 * ((uint64_t)(int)v20 >> 6)) & ~(1 << v20) ^ *(_QWORD *)(v19 + 8 * ((uint64_t)(int)v20 >> 6)) & ((unint64_t)(*(double *)(v16 + 8 * v20) < -v11) << v20);
      }
      while (v14 != v15);
    }
    *(_QWORD *)(v17 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v9);
  }
  result = *(double *)(**(_QWORD **)(a1 + 8) + 8 * a2) + *(double *)(*(_QWORD *)(a1 + 696) + 8 * a2);
  *(double *)(*(_QWORD *)(a1 + 672) + 8 * v8) = result;
  *(_BYTE *)(a1 + 665) = 1;
  return result;
}

void operations_research::glop::ReducedCosts::UpdateReducedCosts(int **a1, int a2, int a3, unsigned int a4, uint64_t a5, double a6)
{
  double v8;
  _QWORD *v9;
  int v13;
  int v14;
  int v15;
  uint64_t NonZeroPositions;
  int *v17;
  int *v18;
  uint64_t v19;
  unint64_t *UnitRowLeftInverse;
  int *v21;
  int *v22;
  unint64_t v23;
  int *v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  unint64_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  int v39;
  double *v40;
  unint64_t v41;
  double v42;
  double v43;
  _BYTE v44[16];

  if (*((_BYTE *)a1 + 667))
    return;
  v8 = *(double *)&a1[90][2 * a2];
  if (v8 != 0.0)
  {
    *((_BYTE *)a1 + 669) = 0;
    operations_research::glop::UpdateRow::ComputeUpdateRow((int **)a5, a4);
    v14 = **a1;
    v13 = (*a1)[1];
    v15 = v13 - v14;
    v43 = v8 / -a6;
    NonZeroPositions = operations_research::glop::UpdateRow::GetNonZeroPositions((operations_research::glop::UpdateRow *)a5);
    v17 = *(int **)NonZeroPositions;
    v18 = *(int **)(NonZeroPositions + 8);
    if (*(int **)NonZeroPositions != v18)
    {
      do
      {
        v19 = *v17;
        if ((int)v19 >= v15)
          break;
        *(double *)&a1[90][2 * v19] = *(double *)&a1[90][2 * v19] + v43 * *(double *)(*(_QWORD *)(a5 + 224) + 8 * v19);
        ++v17;
      }
      while (v17 != v18);
    }
    *((_BYTE *)a1 + 668) = 0;
    UnitRowLeftInverse = (unint64_t *)operations_research::glop::UpdateRow::GetUnitRowLeftInverse((operations_research::glop::UpdateRow *)a5);
    v21 = (int *)UnitRowLeftInverse[4];
    v22 = (int *)UnitRowLeftInverse[5];
    if (v21 == v22)
    {
      v27 = *UnitRowLeftInverse;
      v28 = UnitRowLeftInverse[1] - *UnitRowLeftInverse;
      v24 = a1[90];
      if ((int)(v28 >> 3) < 1)
      {
        v25 = v8 / -a6;
      }
      else
      {
        v29 = (v28 >> 3);
        v25 = v8 / -a6;
        if (v29 >= 0xC
          && (int)((v28 >> 3) + v15 - 1) >= v15
          && ((v30 = (unint64_t)&v24[2 * v15], v27 < v30 + 8 * v29) ? (v31 = v30 >= v27 + 8 * v29) : (v31 = 1),
              v31))
        {
          v32 = (v28 >> 3) & 3;
          v33 = v29 - v32;
          v34 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43, 0);
          v35 = (float64x2_t *)(v27 + 16);
          v36 = v29 - v32;
          do
          {
            v37 = (float64x2_t *)&v24[2 * v15];
            v38 = vmlaq_f64(v37[1], *v35, v34);
            *v37 = vmlaq_f64(*v37, v35[-1], v34);
            v37[1] = v38;
            v35 += 2;
            v15 += 4;
            v36 -= 4;
          }
          while (v36);
          if (!v32)
            goto LABEL_33;
        }
        else
        {
          v33 = 0;
        }
        v39 = v13 + v33 - v14;
        v40 = (double *)(v27 + 8 * v33);
        v41 = v33 - v29;
        do
        {
          v42 = *v40++;
          *(double *)&v24[2 * v39] = *(double *)&v24[2 * v39] + v43 * v42;
          ++v39;
          v31 = __CFADD__(v41++, 1);
        }
        while (!v31);
      }
    }
    else
    {
      v23 = *UnitRowLeftInverse;
      v24 = a1[90];
      v25 = v8 / -a6;
      do
      {
        v26 = *v21++;
        *(double *)&v24[2 * (int)v26 + 2 * v15] = *(double *)&v24[2 * (int)v26 + 2 * v15]
                                                + v43 * *(double *)(v23 + 8 * v26);
      }
      while (v21 != v22);
    }
LABEL_33:
    *(double *)&v24[2 * a3] = v25;
    *(_QWORD *)&v24[2 * a2] = 0;
    return;
  }
  if (*operations_research::glop::ReducedCosts::UpdateReducedCosts(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double,operations_research::glop::UpdateRow *)::vlocal__[0] >= 2
    && (operations_research::glop::ReducedCosts::UpdateReducedCosts(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double,operations_research::glop::UpdateRow *)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::ReducedCosts::UpdateReducedCosts(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double,operations_research::glop::UpdateRow *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/reduced_costs.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v44, (google::glog_internal_namespace_ *)"./ortools/glop/reduced_costs.cc", 460);
    v9 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Reduced costs didn't change.", 28);
    google::LogMessage::~LogMessage((google::LogMessage *)v44);
  }
  *((_BYTE *)a1 + 668) = 0;
}

void sub_22DA0BD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::ReducedCosts::SetAndDebugCheckThatColumnIsDualFeasible(uint64_t result, int a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 840) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << a2);
  return result;
}

double operations_research::glop::ReducedCosts::SetNonBasicVariableCostToZero(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = 8 * a2;
  v4 = *(_QWORD *)(a1 + 720);
  result = *(double *)(v4 + v3) - *(double *)(**(_QWORD **)(a1 + 8) + v3);
  *(double *)(v4 + v3) = result;
  *a3 = 0;
  return result;
}

double operations_research::glop::ReducedCosts::SetParameters(operations_research::glop::ReducedCosts *this, const operations_research::glop::GlopParameters *a2)
{
  return operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::ReducedCosts *)((char *)this + 48), a2);
}

double operations_research::glop::ReducedCosts::ResetForNewObjective(operations_research::glop::ReducedCosts *this)
{
  double result;

  *(_QWORD *)&result = 65793;
  *(_DWORD *)((char *)this + 665) = 65793;
  return result;
}

uint64_t operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation(uint64_t this)
{
  *(_WORD *)(this + 665) = 257;
  return this;
}

void operations_research::glop::ReducedCosts::PerturbCosts(double ***this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  void **v10;
  uint64_t v11;
  double **v12;
  unint64_t v13;
  uint64_t i;
  double v15;
  double v16;
  double **v17;
  double *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28[2];

  if (*operations_research::glop::ReducedCosts::PerturbCosts(void)::vlocal__[0] >= 1
    && (operations_research::glop::ReducedCosts::PerturbCosts(void)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::glop::ReducedCosts::PerturbCosts(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/reduced_costs.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v28, (google::glog_internal_namespace_ *)"./ortools/glop/reduced_costs.cc", 242);
    v2 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Perturbing the costs ... ", 25);
    google::LogMessage::~LogMessage((google::LogMessage *)v28);
  }
  v3 = *((unsigned int *)*this + 1);
  v4 = (v3 - *(_DWORD *)*this);
  if ((int)v4 < 1)
  {
    v6 = 0.0;
  }
  else
  {
    v5 = *this[1];
    v6 = 0.0;
    v7 = (v3 - *(_DWORD *)*this);
    do
    {
      v8 = *v5++;
      v9 = fabs(v8);
      if (v6 < v9)
        v6 = v9;
      --v7;
    }
    while (v7);
  }
  v10 = (void **)(this + 87);
  v28[0] = 0;
  v11 = v3 << 32;
  v12 = this[87];
  v13 = this[88] - v12;
  if ((int)v3 <= v13)
  {
    if ((int)v3 < v13)
      this[88] = &v12[(int)v3];
  }
  else
  {
    std::vector<double>::__append((uint64_t)(this + 87), (int)v3 - v13, v28);
    v12 = (double **)*v10;
  }
  bzero(v12, v11 >> 29);
  if ((int)v4 >= 1)
  {
    for (i = 0; v4 != i; ++i)
    {
      v16 = (*this[1])[i];
      v17 = this[5];
      v18 = v17[312];
      v19 = ((unint64_t)v18 + 1) % 0x270;
      v20 = 4 * (_QWORD)v18;
      v21 = 4 * v19;
      LODWORD(v18) = *((_DWORD *)v17 + ((unint64_t)v18 + 397) % 0x270) ^ ((*((_DWORD *)v17 + v19) & 0x7FFFFFFE | *((_DWORD *)v17 + (_QWORD)v18) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)v17 + v19) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)((char *)v17 + v20) = (_DWORD)v18;
      LODWORD(v18) = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
      v22 = (double)(((_DWORD)v18 << 15) & 0xEFC60000 ^ v18 ^ ((((_DWORD)v18 << 15) & 0xEFC60000 ^ v18) >> 18));
      if (v19 == 623)
        v23 = 0;
      else
        v23 = v19 + 1;
      v24 = 397;
      if (v19 >= 0xE3)
        v24 = -227;
      v25 = *((_DWORD *)v17 + v24 + v19) ^ ((*((_DWORD *)v17 + v23) & 0x7FFFFFFE | *((_DWORD *)v17 + v19) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)v17 + v23) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)((char *)v17 + v21) = v25;
      v26 = ((v25 ^ (v25 >> 11)) << 7) & 0x9D2C5680 ^ v25 ^ (v25 >> 11);
      v17[312] = (double *)v23;
      v15 = (v6 * *((double *)this + 40) + *((double *)this + 39) * fabs(v16))
          * ((v22 + (double)((v26 << 15) & 0xEFC60000 ^ v26 ^ (((v26 << 15) & 0xEFC60000 ^ v26) >> 18)) * 4294967300.0)
           * 5.42101086e-20
           + 0.0
           + 1.0);
      v27 = *(unsigned __int8 *)(*(_QWORD *)operations_research::glop::VariablesInfo::GetTypeRow((operations_research::glop::VariablesInfo *)this[3])
                               + i);
      switch(v27)
      {
        case 1:
          goto LABEL_19;
        case 3:
          if (v16 > 0.0)
            goto LABEL_19;
          if (v16 >= 0.0)
            continue;
          break;
        case 2:
          break;
        default:
          continue;
      }
      v15 = -v15;
LABEL_19:
      *((double *)*v10 + i) = v15;
    }
  }
}

void sub_22DA0C0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

double operations_research::glop::ReducedCosts::ShiftCost(uint64_t a1, int a2)
{
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double result;

  v2 = *(double *)(a1 + 280);
  v3 = *(double *)(a1 + 824);
  v4 = *(_QWORD *)(a1 + 720);
  v5 = *(double *)(v4 + 8 * a2);
  if (v5 <= 0.0)
    v2 = -v2;
  *(double *)(*(_QWORD *)(a1 + 696) + 8 * a2) = *(double *)(*(_QWORD *)(a1 + 696) + 8 * a2) - (v5 + v3 * v2);
  result = -(v3 * v2);
  *(double *)(v4 + 8 * a2) = result;
  return result;
}

double operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts(operations_research::glop::ReducedCosts *this)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  double result;
  uint64_t v7;

  v2 = *(int *)(*(_QWORD *)this + 4);
  v7 = 0;
  v3 = *((_QWORD *)this + 88);
  v4 = (char *)*((_QWORD *)this + 87);
  v5 = (v3 - (uint64_t)v4) >> 3;
  if (v2 <= v5)
  {
    if (v2 < v5)
      *((_QWORD *)this + 88) = &v4[8 * v2];
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 696, v2 - v5, &v7);
    v4 = (char *)*((_QWORD *)this + 87);
  }
  bzero(v4, 8 * (int)v2);
  *(_QWORD *)&result = 65793;
  *(_DWORD *)((char *)this + 665) = 65793;
  return result;
}

_BYTE *operations_research::glop::ReducedCosts::MaintainDualInfeasiblePositions(_BYTE *this, int a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t IsRelevantBitRow;
  uint64_t v10;

  this[888] = a2;
  if (a2)
  {
    v2 = (uint64_t)this;
    if (!this[667])
    {
      v3 = *(_DWORD *)(*(_QWORD *)this + 4) & ~(*(int *)(*(_QWORD *)this + 4) >> 31);
      *((_DWORD *)this + 208) = v3;
      v4 = (v3 + 63) >> 6;
      v5 = (char *)*((_QWORD *)this + 105);
      v6 = *(_QWORD *)(v2 + 848) - (_QWORD)v5;
      v7 = v6 >> 3;
      v10 = 0;
      if (v4 <= v6 >> 3)
      {
        if (v4 < v6 >> 3)
          *(_QWORD *)(v2 + 848) = &v5[8 * v4];
      }
      else
      {
        std::vector<unsigned long long>::__append(v2 + 840, v4 - (v6 >> 3), &v10);
        v5 = *(char **)(v2 + 840);
      }
      if (v4 >= v7)
        v8 = v7;
      else
        v8 = v4;
      bzero(v5, 8 * v8);
      IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*(operations_research::glop::VariablesInfo **)(v2 + 24));
      return (_BYTE *)operations_research::glop::ReducedCosts::UpdateEnteringCandidates<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(v2, IsRelevantBitRow);
    }
  }
  return this;
}

uint64_t operations_research::glop::ReducedCosts::GetReducedCosts(operations_research::glop::ReducedCosts *this)
{
  operations_research::glop::ReducedCosts::RecomputeReducedCostsAndPrimalEnteringCandidatesIfNeeded(this);
  return (uint64_t)this + 720;
}

void operations_research::glop::ReducedCosts::RecomputeReducedCostsAndPrimalEnteringCandidatesIfNeeded(operations_research::glop::ReducedCosts *this)
{
  int v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t IsRelevantBitRow;
  uint64_t v9;

  if (operations_research::glop::BasisFactorization::IsRefactorized(*((operations_research::glop::BasisFactorization **)this
                                                                     + 4)))
    *((_BYTE *)this + 664) = 0;
  if (*((_BYTE *)this + 667))
  {
    operations_research::glop::ReducedCosts::ComputeReducedCosts(this);
    if (*((_BYTE *)this + 888))
    {
      v2 = *(_DWORD *)(*(_QWORD *)this + 4) & ~(*(int *)(*(_QWORD *)this + 4) >> 31);
      *((_DWORD *)this + 208) = v2;
      v3 = (v2 + 63) >> 6;
      v4 = (char *)*((_QWORD *)this + 105);
      v5 = *((_QWORD *)this + 106) - (_QWORD)v4;
      v6 = v5 >> 3;
      v9 = 0;
      if (v3 <= v5 >> 3)
      {
        if (v3 < v5 >> 3)
          *((_QWORD *)this + 106) = &v4[8 * v3];
      }
      else
      {
        std::vector<unsigned long long>::__append((uint64_t)this + 840, v3 - (v5 >> 3), &v9);
        v4 = (char *)*((_QWORD *)this + 105);
      }
      if (v3 >= v6)
        v7 = v6;
      else
        v7 = v3;
      bzero(v4, 8 * v7);
      IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                                       + 3));
      operations_research::glop::ReducedCosts::UpdateEnteringCandidates<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((uint64_t)this, IsRelevantBitRow);
    }
  }
}

uint64_t operations_research::glop::ReducedCosts::GetDualValues(operations_research::glop::ReducedCosts *this)
{
  if (*((_BYTE *)this + 666))
    operations_research::glop::ReducedCosts::ComputeBasicObjective(this);
  std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 93, *((char **)this + 84), *((char **)this + 85), (uint64_t)(*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 3);
  *((_QWORD *)this + 98) = *((_QWORD *)this + 97);
  operations_research::glop::BasisFactorization::LeftSolve(*((_QWORD *)this + 4), (uint64_t)this + 744);
  *((_BYTE *)this + 665) = 0;
  return (uint64_t)this + 744;
}

void operations_research::glop::ReducedCosts::ComputeReducedCosts(operations_research::glop::ReducedCosts *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t IsBasicBitRow;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  BOOL v20;
  uint64_t v21;
  int *v22;
  double *v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  _QWORD *v28;
  uint64_t v29[2];

  if (*((_BYTE *)this + 665))
  {
    if (*((_BYTE *)this + 666))
      operations_research::glop::ReducedCosts::ComputeBasicObjective(this);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 93, *((char **)this + 84), *((char **)this + 85), (uint64_t)(*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 3);
    *((_QWORD *)this + 98) = *((_QWORD *)this + 97);
    operations_research::glop::BasisFactorization::LeftSolve(*((_QWORD *)this + 4), (uint64_t)this + 744);
    *((_BYTE *)this + 665) = 0;
  }
  v2 = *(int *)(*(_QWORD *)this + 4);
  v29[0] = 0;
  v3 = *((_QWORD *)this + 90);
  v4 = (*((_QWORD *)this + 91) - v3) >> 3;
  if (v2 <= v4)
  {
    if (v2 < v4)
      *((_QWORD *)this + 91) = v3 + 8 * v2;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 720, v2 - v4, v29);
  }
  IsBasicBitRow = operations_research::glop::VariablesInfo::GetIsBasicBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                             + 3));
  if ((int)v2 < 1)
  {
    v13 = 0.0;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)this;
    v8 = **((_QWORD **)this + 1);
    v9 = *((_QWORD *)this + 87);
    v10 = *(_QWORD *)(*(_QWORD *)this + 56);
    v11 = *((_QWORD *)this + 90);
    v12 = *(_QWORD *)(IsBasicBitRow + 8);
    v13 = 0.0;
    do
    {
      v16 = *(_QWORD *)(v10 + 8 * v6);
      v17 = v6 + 1;
      v18 = *(_QWORD *)(v10 + 8 * (v6 + 1));
      v19 = 0.0;
      v20 = v18 <= v16;
      v21 = v18 - v16;
      if (!v20)
      {
        v22 = (int *)(*(_QWORD *)(v7 + 32) + 4 * v16);
        v23 = (double *)(*(_QWORD *)(v7 + 8) + 8 * v16);
        do
        {
          v24 = *v23++;
          v25 = v24;
          v26 = *v22++;
          v19 = v19 + v25 * *(double *)(*((_QWORD *)this + 93) + 8 * v26);
          --v21;
        }
        while (v21);
      }
      v14 = *(double *)(v8 + 8 * v6) + *(double *)(v9 + 8 * v6);
      *(double *)(v11 + 8 * v6) = v14 - v19;
      v15 = vabdd_f64(v14, v19);
      if (v13 >= v15)
        v15 = v13;
      if (((*(_QWORD *)(v12 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        v13 = v15;
      ++v6;
    }
    while (v17 != v2);
  }
  *((_BYTE *)this + 667) = 0;
  *((_BYTE *)this + 669) = 1;
  *((_BYTE *)this + 668) = operations_research::glop::BasisFactorization::IsRefactorized(*((operations_research::glop::BasisFactorization **)this
                                                                                         + 4));
  v27 = *((double *)this + 16);
  *((double *)this + 103) = v27;
  if (v13 > v27)
  {
    if (*operations_research::glop::ReducedCosts::ComputeReducedCosts(void)::vlocal__[0] >= 2
      && (operations_research::glop::ReducedCosts::ComputeReducedCosts(void)::vlocal__[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)operations_research::glop::ReducedCosts::ComputeReducedCosts(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/reduced_costs.cc", (const char *)2)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v29, (google::glog_internal_namespace_ *)"./ortools/glop/reduced_costs.cc", 422);
      v28 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Changing dual_feasibility_tolerance to ", 39);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v29);
    }
    *((double *)this + 103) = v13;
  }
}

void sub_22DA0C610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::ReducedCosts::UpdateEnteringCandidates<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t CanDecreaseBitRow;
  uint64_t result;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v4 = *(double *)(a1 + 824);
  CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(*(operations_research::glop::VariablesInfo **)(a1 + 24));
  result = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(*(operations_research::glop::VariablesInfo **)(a1 + 24));
  v7 = *(unint64_t **)(a2 + 8);
  v8 = *(unint64_t **)(a2 + 16);
  if (v7 != v8)
  {
    v9 = *v7;
    if (*v7)
    {
      v10 = 0;
      goto LABEL_17;
    }
    v11 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    v12 = (int)(v8 - v7);
    if ((int)v11 <= 1)
      v13 = 1;
    else
      v13 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    if (v12 <= 1)
      v12 = 1;
    v14 = v12 - 1;
    while (v14 != v9)
    {
      v15 = v9 + 1;
      if (v7[++v9])
      {
        v13 = v15;
        break;
      }
    }
    if (v13 != (_DWORD)v11)
    {
      v9 = v7[v13];
      v10 = v13 << 6;
LABEL_17:
      v18 = __clz(__rbit64(v9)) & 0x3F | v10;
      v17 = (v9 - 1) & v9;
      v19 = *(_DWORD *)(a2 + 40);
      if (v18 != v19)
        goto LABEL_18;
      return result;
    }
  }
  v17 = 0;
  v10 = 0;
  v18 = -1;
  v19 = *(_DWORD *)(a2 + 40);
  if (v19 != -1)
  {
LABEL_18:
    v20 = *(_QWORD *)(a1 + 720);
    v21 = *(_QWORD *)(a1 + 840);
    v22 = *(_QWORD *)(CanDecreaseBitRow + 8);
    v23 = *(_QWORD *)(result + 8);
    v24 = (char *)v8 - (char *)v7;
    v25 = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    v26 = (int)(v24 >> 3);
    result = 1;
    while (1)
    {
      *(_QWORD *)(v21 + 8 * ((uint64_t)v18 >> 6)) = *(_QWORD *)(v22 + 8 * ((uint64_t)v18 >> 6)) & ((unint64_t)(*(double *)(v20 + 8 * v18) > v4) << v18) ^ *(_QWORD *)(v21 + 8 * ((uint64_t)v18 >> 6)) & ~(1 << v18) ^ *(_QWORD *)(v23 + 8 * ((uint64_t)v18 >> 6)) & ((unint64_t)(*(double *)(v20 + 8 * v18) < -v4) << v18);
      if (v17)
        goto LABEL_20;
      if ((v10 >> 6) + 1 > (int)v25)
        v27 = (v10 >> 6) + 1;
      else
        v27 = v25;
      v28 = ((uint64_t)v10 >> 6) + 1;
      while (v28 < v26)
      {
        if (v7[v28++])
        {
          v27 = v28 - 1;
          break;
        }
      }
      if (v27 == (_DWORD)v25)
      {
        v17 = 0;
        v18 = -1;
        if (v19 == -1)
          return result;
      }
      else
      {
        v17 = v7[v27];
        v10 = v27 << 6;
LABEL_20:
        v18 = (__clz(__rbit64(v17)) & 0x3F) + v10;
        v17 &= v17 - 1;
        if (v18 == v19)
          return result;
      }
    }
  }
  return result;
}

operations_research::glop::ReducedCosts::Stats *operations_research::glop::ReducedCosts::Stats::Stats(operations_research::glop::ReducedCosts::Stats *this)
{
  void *__p[4];

  strcpy((char *)this, "ReducedCosts");
  *((_BYTE *)this + 23) = 12;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_22DCE7540;
  strcpy((char *)__p[0], "basic_objective_left_inverse_density");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::ReducedCosts::Stats *)((char *)this + 80), (__int128 *)__p, this) = &unk_24F987C70;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  strcpy((char *)__p, "reduced_costs_accuracy");
  HIBYTE(__p[2]) = 22;
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::ReducedCosts::Stats *)((char *)this + 160), (__int128 *)__p, this) = &unk_24F987CD0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "cost_shift");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::ReducedCosts::Stats *)((char *)this + 240), (__int128 *)__p, this) = &unk_24F987CD0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return this;
}

void sub_22DA0C98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v14 + 160) = off_24F97FEB0;
  if (*(char *)(v14 + 191) < 0)
    operator delete(*(void **)(v14 + 168));
  *(_QWORD *)(v14 + 80) = off_24F97FEB0;
  if (*(char *)(v14 + 111) < 0)
  {
    operator delete(*(void **)(v14 + 88));
    operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
    _Unwind_Resume(a1);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

operations_research::glop::RevisedSimplex *operations_research::glop::RevisedSimplex::RevisedSimplex(operations_research::glop::RevisedSimplex *this)
{
  const operations_research::glop::CompactSparseMatrix *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  const operations_research::glop::BasisFactorization *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  *(_BYTE *)this = 6;
  *(_QWORD *)((char *)this + 1) = 0;
  *(_DWORD *)((char *)this + 9) = 0;
  *((_OWORD *)this + 1) = 0u;
  v2 = (operations_research::glop::RevisedSimplex *)((char *)this + 16);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 12) = 0u;
  v3 = (char *)this + 216;
  v4 = (char *)this + 256;
  v5 = (char *)this + 280;
  *((_QWORD *)this + 49) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_QWORD *)this + 47) = 0;
  *((_DWORD *)this + 96) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 52) = (char *)this + 384;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 106) = -1;
  *((_QWORD *)this + 57) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_BYTE *)this + 464) = 0;
  v6 = (char *)this + 520;
  *((_BYTE *)this + 721) = 0;
  *((_QWORD *)this + 104) = 0;
  *((_OWORD *)this + 51) = 0u;
  v7 = (operations_research::glop::RevisedSimplex *)((char *)this + 840);
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  operations_research::glop::BasisFactorization::BasisFactorization((char *)this + 840, (char *)this + 16, (char *)this + 520);
  operations_research::glop::VariablesInfo::VariablesInfo((uint64_t)this + 5480, (uint64_t)v2, (uint64_t)v4, (uint64_t)v5);
  operations_research::glop::VariableValues::VariableValues((uint64_t)this + 5904, (uint64_t)this + 11616, (uint64_t)v2, (uint64_t)v6, (uint64_t)this + 5480, (uint64_t)v7);
  operations_research::glop::DualEdgeNorms::DualEdgeNorms((operations_research::glop::RevisedSimplex *)((char *)this + 6288), v7);
  operations_research::glop::PrimalEdgeNorms::PrimalEdgeNorms((operations_research::glop::RevisedSimplex *)((char *)this + 6944), v2, (operations_research::glop::RevisedSimplex *)((char *)this + 5480), v7);
  operations_research::glop::UpdateRow::UpdateRow();
  operations_research::glop::ReducedCosts::ReducedCosts((uint64_t)this + 8720, (uint64_t)v2, (uint64_t)v3, (uint64_t)v6, (uint64_t)this + 5480, (uint64_t)v7, (uint64_t)this + 16008);
  operations_research::glop::EnteringVariable::EnteringVariable();
  *((_QWORD *)this + 1289) = 0;
  *(_OWORD *)((char *)this + 10280) = 0u;
  *(_OWORD *)((char *)this + 10296) = 0u;
  *(_OWORD *)((char *)this + 10248) = 0u;
  *(_OWORD *)((char *)this + 10264) = 0u;
  *(_OWORD *)((char *)this + 10216) = 0u;
  *(_OWORD *)((char *)this + 10232) = 0u;
  operations_research::glop::RevisedSimplex::IterationStats::IterationStats((operations_research::glop::RevisedSimplex *)((char *)this + 10320));
  operations_research::glop::RevisedSimplex::RatioTestStats::RatioTestStats((operations_research::glop::RevisedSimplex *)((char *)this + 10896));
  strcpy((char *)this + 11536, "SimplexFunctionStats");
  *((_BYTE *)this + 11559) = 20;
  *((_DWORD *)this + 2890) = 0;
  *((_QWORD *)this + 1446) = 0;
  *((_QWORD *)this + 1448) = 0;
  *((_QWORD *)this + 1447) = 0;
  *((_QWORD *)this + 1451) = 0;
  *((_QWORD *)this + 1450) = 0;
  *((_QWORD *)this + 1449) = (char *)this + 11600;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)this + 11616, 0);
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)this + 11912, 0);
  operations_research::glop::LuFactorization::LuFactorization((operations_research::glop::RevisedSimplex *)((char *)this + 12208));
  v8 = 1;
  *((_BYTE *)this + 15932) = 1;
  *((_OWORD *)this + 996) = 0u;
  *((_OWORD *)this + 997) = 0u;
  *(_OWORD *)((char *)this + 15961) = 0u;
  *((_QWORD *)this + 1998) = 0;
  *((_QWORD *)this + 2000) = 0;
  v9 = 42;
  *((_QWORD *)this + 1999) = 0;
  v10 = 4003;
  *((_DWORD *)this + 4002) = 42;
  do
  {
    v11 = 1812433253 * (v9 ^ (v9 >> 30));
    v9 = v11 + v8;
    *((_DWORD *)this + v10) = v10 + v11 - 4002;
    ++v8;
    ++v10;
  }
  while (v10 != 4626);
  *((_QWORD *)this + 2313) = 0;
  operations_research::glop::RevisedSimplex::SetParameters(this, (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  return this;
}

void sub_22DA0CDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, operations_research::glop::RevisedSimplex::RatioTestStats *a10, operations_research::glop::RevisedSimplex::IterationStats *a11, operations_research::glop::EnteringVariable *a12, operations_research::glop::ReducedCosts *a13, operations_research::glop::UpdateRow *a14, operations_research::glop::DualEdgeNorms *a15, operations_research::glop::VariableValues *a16, operations_research::glop::ScatteredColumn *a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23)
{
  void **v23;
  void **v24;
  operations_research::glop::LuFactorization *v25;
  operations_research::glop::VariablesInfo *v26;
  operations_research::glop::GlopParameters *v27;
  operations_research::glop::GlopParameters *v28;
  operations_research::glop::ScatteredColumn *v29;
  uint64_t *v30;
  void **v31;
  operations_research::glop::BasisFactorization *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void **v42;
  void **v43;
  void *v44;
  void *v45;
  void **v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;

  v34 = *v23;
  if (*v23)
  {
    v24[1999] = v34;
    operator delete(v34);
  }
  operations_research::glop::RevisedSimplex::RevisedSimplex(v30, v25);
  operations_research::glop::GlopParameters::~GlopParameters(v27);
  operations_research::glop::GlopParameters::~GlopParameters(v28);
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)(v24 + 1442));
  operations_research::glop::RevisedSimplex::RatioTestStats::~RatioTestStats(a10);
  operations_research::glop::RevisedSimplex::IterationStats::~IterationStats(a11);
  v35 = v24[1280];
  if (v35)
  {
    v24[1281] = v35;
    operator delete(v35);
  }
  v36 = *v31;
  if (*v31)
  {
    v24[1278] = v36;
    operator delete(v36);
  }
  operations_research::glop::EnteringVariable::~EnteringVariable(a12);
  operations_research::glop::ReducedCosts::~ReducedCosts(a13);
  operations_research::glop::UpdateRow::~UpdateRow(a14);
  operations_research::glop::PrimalEdgeNorms::~PrimalEdgeNorms(*(operations_research::glop::PrimalEdgeNorms **)(v33 - 88));
  operations_research::glop::DualEdgeNorms::~DualEdgeNorms(a15);
  operations_research::glop::VariableValues::~VariableValues(a16);
  operations_research::glop::VariablesInfo::~VariablesInfo(v26);
  operations_research::glop::BasisFactorization::~BasisFactorization(v32);
  v37 = v24[102];
  if (v37)
  {
    v24[103] = v37;
    operator delete(v37);
  }
  operations_research::glop::ScatteredColumn::~ScatteredColumn(a17);
  v38 = v24[87];
  if (v38)
  {
    v24[88] = v38;
    operator delete(v38);
    v39 = v24[84];
    if (!v39)
    {
LABEL_11:
      v40 = v24[81];
      if (!v40)
        goto LABEL_12;
      goto LABEL_27;
    }
  }
  else
  {
    v39 = v24[84];
    if (!v39)
      goto LABEL_11;
  }
  v24[85] = v39;
  operator delete(v39);
  v40 = v24[81];
  if (!v40)
  {
LABEL_12:
    v41 = v24[78];
    if (!v41)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  v24[82] = v40;
  operator delete(v40);
  v41 = v24[78];
  if (!v41)
  {
LABEL_13:
    v42 = v24 + 68;
    v43 = v24 + 72;
    v44 = v24[75];
    if (!v44)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  v24[79] = v41;
  operator delete(v41);
  v42 = v24 + 68;
  v43 = v24 + 72;
  v44 = v24[75];
  if (!v44)
  {
LABEL_14:
    v45 = *v43;
    if (!*v43)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  v24[76] = v44;
  operator delete(v44);
  v45 = *v43;
  if (!*v43)
  {
LABEL_15:
    v46 = v24 + 49;
    operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector(v42);
    v47 = *a18;
    if (!*a18)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  v24[73] = v45;
  operator delete(v45);
  v46 = v24 + 49;
  operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector(v42);
  v47 = *a18;
  if (!*a18)
  {
LABEL_16:
    operations_research::glop::ScatteredColumn::~ScatteredColumn(v29);
    v48 = *v46;
    if (!*v46)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  v24[66] = v47;
  operator delete(v47);
  operations_research::glop::ScatteredColumn::~ScatteredColumn(v29);
  v48 = *v46;
  if (!*v46)
  {
LABEL_17:
    v49 = *a19;
    if (!*a19)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  v24[50] = v48;
  operator delete(v48);
  v49 = *a19;
  if (!*a19)
  {
LABEL_18:
    v50 = v24[41];
    if (!v50)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v24[46] = v49;
  operator delete(v49);
  v50 = v24[41];
  if (!v50)
  {
LABEL_19:
    v51 = v24[38];
    if (!v51)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v24[42] = v50;
  operator delete(v50);
  v51 = v24[38];
  if (!v51)
  {
LABEL_20:
    v52 = *a20;
    if (!*a20)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  v24[39] = v51;
  operator delete(v51);
  v52 = *a20;
  if (!*a20)
  {
LABEL_21:
    v53 = *a21;
    if (!*a21)
      goto LABEL_22;
    goto LABEL_37;
  }
LABEL_36:
  v24[36] = v52;
  operator delete(v52);
  v53 = *a21;
  if (!*a21)
  {
LABEL_22:
    v54 = *a22;
    if (!*a22)
      goto LABEL_23;
    goto LABEL_38;
  }
LABEL_37:
  v24[33] = v53;
  operator delete(v53);
  v54 = *a22;
  if (!*a22)
  {
LABEL_23:
    v55 = *a23;
    if (!*a23)
      goto LABEL_24;
    goto LABEL_39;
  }
LABEL_38:
  v24[28] = v54;
  operator delete(v54);
  v55 = *a23;
  if (!*a23)
  {
LABEL_24:
    operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix(*(operations_research::glop::CompactSparseMatrix **)(v33 - 104));
    operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix(*(operations_research::glop::CompactSparseMatrix **)(v33 - 96));
    _Unwind_Resume(a1);
  }
LABEL_39:
  v24[25] = v55;
  operator delete(v55);
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix(*(operations_research::glop::CompactSparseMatrix **)(v33 - 104));
  operations_research::glop::CompactSparseMatrix::~CompactSparseMatrix(*(operations_research::glop::CompactSparseMatrix **)(v33 - 96));
  _Unwind_Resume(a1);
}

void sub_22DA0D0C0()
{
  JUMPOUT(0x22DA0CE74);
}

void sub_22DA0D0C8()
{
  JUMPOUT(0x22DA0CE7CLL);
}

void sub_22DA0D0D0()
{
  JUMPOUT(0x22DA0CE84);
}

void sub_22DA0D0D8()
{
  JUMPOUT(0x22DA0CE8CLL);
}

void sub_22DA0D0E0()
{
  JUMPOUT(0x22DA0CE94);
}

void sub_22DA0D0E8()
{
  JUMPOUT(0x22DA0CE9CLL);
}

void sub_22DA0D0F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  operations_research::glop::BasisFactorization *v10;

  operations_research::glop::BasisFactorization::~BasisFactorization(v10);
  if (!*(_QWORD *)(v9 + 816))
    JUMPOUT(0x22DA0CEC0);
  JUMPOUT(0x22DA0CEB8);
}

void sub_22DA0D10C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 816))
    JUMPOUT(0x22DA0CEC0);
  JUMPOUT(0x22DA0CEB8);
}

double operations_research::glop::RevisedSimplex::SetParameters(operations_research::glop::RevisedSimplex *this, const operations_research::glop::GlopParameters *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v4 = 0;
  v5 = *((_DWORD *)a2 + 60);
  *((_DWORD *)this + 4002) = v5;
  v6 = 1;
  do
  {
    v7 = 1812433253 * (v5 ^ (v5 >> 30));
    v5 = v7 + v6;
    *((_DWORD *)this + v4 + 4003) = v4 + v7 + 1;
    ++v6;
    ++v4;
  }
  while (v4 != 623);
  *((_QWORD *)this + 2313) = 0;
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 11912), a2);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 11616), a2);
  *((_DWORD *)this + 427) = *((_DWORD *)this + 2936);
  *((_BYTE *)this + 1704) = *((_BYTE *)this + 11813);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 1008), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 3336), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 5176), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::EnteringVariable::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 9616), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::ReducedCosts::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 8720), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6608), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6968), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  return operations_research::glop::UpdateRow::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 7840), (operations_research::glop::RevisedSimplex *)((char *)this + 11616));
}

void operations_research::glop::RevisedSimplex::IterationStats::~IterationStats(operations_research::glop::RevisedSimplex::IterationStats *this)
{
  *((_QWORD *)this + 62) = off_24F97FEB0;
  if (*((char *)this + 527) < 0)
  {
    operator delete(*((void **)this + 63));
    *((_QWORD *)this + 49) = off_24F97FEB0;
    if ((*((char *)this + 423) & 0x80000000) == 0)
    {
LABEL_3:
      *((_QWORD *)this + 36) = off_24F97FEB0;
      if ((*((char *)this + 319) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    *((_QWORD *)this + 49) = off_24F97FEB0;
    if ((*((char *)this + 423) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*((void **)this + 50));
  *((_QWORD *)this + 36) = off_24F97FEB0;
  if ((*((char *)this + 319) & 0x80000000) == 0)
  {
LABEL_4:
    *((_QWORD *)this + 23) = off_24F97FEB0;
    if ((*((char *)this + 215) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_11:
    operator delete(*((void **)this + 24));
    *((_QWORD *)this + 10) = off_24F97FEB0;
    if ((*((char *)this + 111) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*((void **)this + 11));
    operations_research::StatsGroup::~StatsGroup(this);
    return;
  }
LABEL_10:
  operator delete(*((void **)this + 37));
  *((_QWORD *)this + 23) = off_24F97FEB0;
  if (*((char *)this + 215) < 0)
    goto LABEL_11;
LABEL_5:
  *((_QWORD *)this + 10) = off_24F97FEB0;
  if (*((char *)this + 111) < 0)
    goto LABEL_12;
LABEL_6:
  operations_research::StatsGroup::~StatsGroup(this);
}

void operations_research::glop::EnteringVariable::~EnteringVariable(operations_research::glop::EnteringVariable *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 72);
  if (v2)
  {
    *((_QWORD *)this + 73) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 69);
  if (v3)
  {
    *((_QWORD *)this + 70) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 63);
  if (v4)
  {
    *((_QWORD *)this + 64) = v4;
    operator delete(v4);
  }
  *((_QWORD *)this + 52) = off_24F97FEB0;
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::EnteringVariable *)((char *)this + 336));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::EnteringVariable *)((char *)this + 32));
}

void operations_research::glop::DualEdgeNorms::~DualEdgeNorms(operations_research::glop::DualEdgeNorms *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 78);
  if (v2)
  {
    *((_QWORD *)this + 79) = v2;
    operator delete(v2);
  }
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::DualEdgeNorms *)((char *)this + 320));
  *((_QWORD *)this + 30) = off_24F97FEB0;
  if ((*((char *)this + 271) & 0x80000000) == 0)
  {
    *((_QWORD *)this + 20) = off_24F97FEB0;
    if ((*((char *)this + 191) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_9:
    operator delete(*((void **)this + 21));
    *((_QWORD *)this + 10) = off_24F97FEB0;
    if ((*((char *)this + 111) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_10:
    operator delete(*((void **)this + 11));
    operations_research::StatsGroup::~StatsGroup(this);
    return;
  }
  operator delete(*((void **)this + 31));
  *((_QWORD *)this + 20) = off_24F97FEB0;
  if (*((char *)this + 191) < 0)
    goto LABEL_9;
LABEL_5:
  *((_QWORD *)this + 10) = off_24F97FEB0;
  if (*((char *)this + 111) < 0)
    goto LABEL_10;
LABEL_6:
  operations_research::StatsGroup::~StatsGroup(this);
}

void **operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t operations_research::glop::RevisedSimplex::ClearStateForNextSolve(uint64_t this)
{
  *(_QWORD *)(this + 704) = *(_QWORD *)(this + 696);
  return this;
}

char **operations_research::glop::RevisedSimplex::LoadStateForNextSolve(uint64_t a1, char **a2)
{
  char **result;

  result = (char **)(a1 + 696);
  if (result != a2)
    result = (char **)std::vector<operations_research::glop::VariableStatus>::__assign_with_size[abi:ne180100]<operations_research::glop::VariableStatus*,operations_research::glop::VariableStatus*>(result, *a2, a2[1], a2[1] - *a2);
  *(_BYTE *)(a1 + 720) = 1;
  return result;
}

uint64_t operations_research::glop::RevisedSimplex::NotifyThatMatrixIsUnchangedForNextSolve(uint64_t this)
{
  *(_BYTE *)(this + 721) = 1;
  return this;
}

void operations_research::glop::RevisedSimplex::Solve(operations_research::glop::RevisedSimplex *this@<X0>, const operations_research::glop::LinearProgram *a2@<X1>, operations_research::TimeLimit *a3@<X2>, uint64_t a4@<X8>)
{
  absl::lts_2020_02_25 *v8;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (***v12)();
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t NonBasicBoxedVariables;
  absl::lts_2020_02_25 *v28;
  double v29;
  uint64_t inited;
  _QWORD *v31;
  double v32;
  unsigned int v33;
  int v34;
  double v35;
  int v36;
  double v37;
  unsigned __int8 *v38;
  unsigned __int8 v39;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v41;
  uint64_t v42;
  absl::lts_2020_02_25 *v43;
  char v44;
  double v45;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v46;
  double v47;
  uint64_t v48;
  int v49;
  double v50;
  _QWORD *v51;
  char v52;
  double v53;
  double v54;
  double v55;
  double v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  char **DualValues;
  char **ReducedCosts;
  absl::lts_2020_02_25 *v62;
  float64x2_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  double v68;
  uint64_t v69;
  float64x2_t *v70;
  unint64_t v71;
  float64x2_t v72;
  unint64_t v73;
  double *v74;
  BOOL v75;
  float64x2_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  float64x2_t *v81;
  unint64_t v82;
  float64x2_t v83;
  unint64_t v84;
  double *v85;
  int v86;
  double v87;
  double v88;
  double v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t *v92;
  _BYTE v93[16];
  void *__p;
  __int128 v95;
  std::string v96;
  uint64_t (**v97)();
  __int128 v98;
  uint64_t (***v99)();
  uint64_t (**v100)();
  __int128 v101;
  uint64_t (***v102)();
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v14 = (char *)operator new(0x20uLL);
    strcpy(v14, "time_limit must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)&v100, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 137, 2);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v14, 28);
    google::LogMessage::~LogMessage((google::LogMessage *)&v100);
    std::string::__init_copy_ctor_external(&v96, v14, 0x1CuLL);
    operations_research::glop::Status::Status(a4, 3, (__int128 *)&v96);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    v16 = v14;
LABEL_21:
    operator delete(v16);
    return;
  }
  v8 = (absl::lts_2020_02_25 *)operations_research::glop::LinearProgram::IsInEquationForm(a2);
  if ((v8 & 1) == 0)
  {
    __p = operator new(0x30uLL);
    v95 = xmmword_22DCE6560;
    strcpy((char *)__p, "The problem is not in the equations form.");
    operations_research::glop::Status::Status(a4, 4, (__int128 *)&__p);
    if ((SHIBYTE(v95) & 0x80000000) == 0)
      return;
    v16 = __p;
    goto LABEL_21;
  }
  v97 = &off_24F9800E0;
  *(_QWORD *)&v98 = this;
  *((_QWORD *)&v98 + 1) = a3;
  v99 = &v97;
  v102 = &v100;
  v100 = &off_24F9800E0;
  v101 = v98;
  CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v8);
  v10 = *(_QWORD *)a3;
  operations_research::glop::RevisedSimplex::Initialize(this, a2, a4);
  if (!*(_DWORD *)a4)
  {
    if (*(char *)(a4 + 31) < 0)
      operator delete(*(void **)(a4 + 8));
    *((_QWORD *)this + 42) = *((_QWORD *)this + 41);
    operations_research::glop::UpdateRow::Invalidate((uint64_t)this + 7840);
    operations_research::glop::LuFactorization::Clear((operations_research::glop::RevisedSimplex *)((char *)this + 12208));
    *(_BYTE *)this = 6;
    *((_BYTE *)this + 15932) = 1;
    v11 = (_QWORD *)((char *)this + 10264);
    *(_OWORD *)((char *)this + 10264) = 0u;
    *(_OWORD *)((char *)this + 10280) = 0u;
    *(_OWORD *)((char *)this + 10296) = 0u;
    *((_BYTE *)this + 720) = 1;
    if (*_MergedGlobals_1[0] >= 1
      && (_MergedGlobals_1[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)_MergedGlobals_1, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyRows(this);
      operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyColumns(this);
      operations_research::glop::RevisedSimplex::DisplayBasicVariableStatistics(this);
      operations_research::glop::RevisedSimplex::DisplayProblem(this);
    }
    if (FLAGS_simplex_stop_after_first_basis)
    {
      operations_research::glop::RevisedSimplex::DisplayAllStats((size_t *)this);
      operations_research::glop::Status::Status(a4);
      goto LABEL_12;
    }
    v17 = *((unsigned __int8 *)this + 11644);
    if (*off_254079108[0] >= 1
      && (off_254079108[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079108, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 180);
      v18 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"------ ", 7);
      if (v17)
        v20 = "Dual simplex.";
      else
        v20 = "Primal simplex.";
      if (v17)
        v21 = 13;
      else
        v21 = 15;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
      google::LogMessage::~LogMessage((google::LogMessage *)v93);
    }
    if (*off_254079110[0] >= 1
      && (off_254079110[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079110, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 181);
      v22 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"The matrix has ", 15);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" rows, ", 7);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" columns, ", 10);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" entries.", 9);
      google::LogMessage::~LogMessage((google::LogMessage *)v93);
    }
    if (*off_254079118[0] >= 1
      && (off_254079118[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079118, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 187);
      v26 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"------ First phase: feasibility.", 32);
      google::LogMessage::~LogMessage((google::LogMessage *)v93);
    }
    operations_research::glop::EnteringVariable::SetPricingRule((uint64_t)this + 9616, *((_DWORD *)this + 2913));
    if (v17)
    {
      if (*((_BYTE *)this + 11646))
        operations_research::glop::ReducedCosts::PerturbCosts((double ***)this + 1090);
      operations_research::glop::VariablesInfo::MakeBoxedVariableRelevant((uint64_t)this + 5480, 0);
      operations_research::glop::RevisedSimplex::DualMinimize(this, a3, a4);
      if (*(_DWORD *)a4)
        goto LABEL_12;
      if (*(char *)(a4 + 31) < 0)
        operator delete(*(void **)(a4 + 8));
      operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
      if (*(_BYTE *)this != 2)
      {
        operations_research::glop::BasisFactorization::Refactorize((std::vector<int> *)this + 35, a4);
        if (*(_DWORD *)a4)
          goto LABEL_12;
        if (*(char *)(a4 + 31) < 0)
          operator delete(*(void **)(a4 + 8));
        operations_research::glop::RevisedSimplex::PermuteBasis(this);
        operations_research::glop::VariablesInfo::MakeBoxedVariableRelevant((uint64_t)this + 5480, 1);
        operations_research::glop::ReducedCosts::MakeReducedCostsPrecise((uint64_t)this + 8720);
        NonBasicBoxedVariables = operations_research::glop::VariablesInfo::GetNonBasicBoxedVariables((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
        operations_research::glop::RevisedSimplex::MakeBoxedVariableDualFeasible<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((double *)this, NonBasicBoxedVariables, 0);
        operations_research::glop::VariableValues::RecomputeBasicVariableValues((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
        operations_research::glop::VariableValues::ResetPrimalInfeasibilityInformation((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
      }
    }
    else
    {
      operations_research::glop::ReducedCosts::MaintainDualInfeasiblePositions((_BYTE *)this + 8720, 1);
      operations_research::glop::RevisedSimplex::Minimize(this, a3, a4);
      if (*(_DWORD *)a4)
        goto LABEL_12;
      if (*(char *)(a4 + 31) < 0)
        operator delete(*(void **)(a4 + 8));
      operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
      if (*(_BYTE *)this != 1)
      {
        operations_research::glop::RevisedSimplex::InitializeObjectiveAndTestIfUnchanged(this, a2);
        operations_research::glop::ReducedCosts::ResetForNewObjective((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      }
    }
    operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
    operations_research::glop::RevisedSimplex::DisplayErrors(this);
    *((_BYTE *)this + 15932) = 0;
    v29 = (double)(CurrentTimeNanos - v10) * 0.000000001;
    *((double *)this + 1287) = (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v28) - *(_QWORD *)a3) * 0.000000001
                             - v29;
    inited = operations_research::glop::EnteringVariable::SetPricingRule((uint64_t)this + 9616, *((_DWORD *)this + 2914));
    *((_QWORD *)this + 1284) = *((_QWORD *)this + 1283);
    if (*off_254079120[0] >= 1)
    {
      if (off_254079120[0] != &google::kLogSiteUninitialized
        || (inited = google::InitVLOG3__((google *)off_254079120, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1), (_DWORD)inited))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 241);
        v31 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"------ Second phase: optimization.", 34);
        google::LogMessage::~LogMessage((google::LogMessage *)v93);
      }
    }
    if (*((double *)this + 1487) < 0.0)
    {
LABEL_64:
      if (*((_BYTE *)this + 11811) && *(_BYTE *)this != 2)
      {
        v32 = *((double *)this + 1470);
        if (operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::RevisedSimplex *)((char *)this + 5904)) > v32
          || operations_research::glop::ReducedCosts::ComputeMaximumDualResidual((operations_research::glop::RevisedSimplex *)((char *)this + 8720)) > v32)
        {
          goto LABEL_141;
        }
        v33 = *(unsigned __int8 *)this;
        if (v33 > 8)
          goto LABEL_142;
        v34 = 1 << v33;
        if ((v34 & 0x94) != 0)
        {
          v35 = operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
        }
        else
        {
          if ((v34 & 0x122) == 0)
            goto LABEL_142;
          v35 = operations_research::glop::ReducedCosts::ComputeMaximumDualInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
        }
        if (v35 > v32)
LABEL_141:
          *(_BYTE *)this = 11;
      }
LABEL_142:
      operations_research::glop::RevisedSimplex::SaveState(this);
      *((double *)this + 71) = operations_research::glop::RevisedSimplex::ComputeInitialProblemObjectiveValue(this);
      DualValues = (char **)operations_research::glop::ReducedCosts::GetDualValues((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      if ((char **)((char *)this + 576) != DualValues)
        std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 72, *DualValues, DualValues[1], (DualValues[1] - *DualValues) >> 3);
      ReducedCosts = (char **)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      v62 = (operations_research::glop::RevisedSimplex *)((char *)this + 600);
      if ((char **)((char *)this + 600) != ReducedCosts)
        v62 = (absl::lts_2020_02_25 *)std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v62, *ReducedCosts, ReducedCosts[1], (ReducedCosts[1] - *ReducedCosts) >> 3);
      if (!*((_BYTE *)a2 + 440))
      {
        v67 = *(unsigned __int8 *)this;
        if ((v67 & 0xFE) == 4)
        {
          v68 = -INFINITY;
          if (v67 == 5)
            v68 = INFINITY;
          goto LABEL_173;
        }
LABEL_174:
        v88 = (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v62) - *(_QWORD *)a3) * 0.000000001 - v29;
        *((double *)this + 1286) = v88;
        *((double *)this + 1288) = v88 - *((double *)this + 1287);
        *((_QWORD *)this + 1285) = *((_QWORD *)this + 1283) - *((_QWORD *)this + 1284);
        operations_research::glop::RevisedSimplex::DisplayAllStats((size_t *)this);
        operations_research::glop::Status::Status(a4);
        goto LABEL_12;
      }
      v63 = (float64x2_t *)*((_QWORD *)this + 72);
      v64 = *((_QWORD *)this + 73) - (_QWORD)v63;
      if ((int)(v64 >> 3) >= 1)
      {
        v65 = (v64 >> 3);
        if (v65 < 4)
        {
          v66 = 0;
LABEL_157:
          v73 = v66 - v65;
          v74 = &v63->f64[v66];
          do
          {
            *v74 = -*v74;
            ++v74;
            v75 = __CFADD__(v73++, 1);
          }
          while (!v75);
          goto LABEL_160;
        }
        v69 = (v64 >> 3) & 3;
        v66 = v65 - v69;
        v70 = v63 + 1;
        v71 = v65 - v69;
        do
        {
          v72 = vnegq_f64(*v70);
          v70[-1] = vnegq_f64(v70[-1]);
          *v70 = v72;
          v70 += 2;
          v71 -= 4;
        }
        while (v71);
        if (v69)
          goto LABEL_157;
      }
LABEL_160:
      v76 = (float64x2_t *)*((_QWORD *)this + 75);
      v77 = *((_QWORD *)this + 76) - (_QWORD)v76;
      if ((int)(v77 >> 3) < 1)
        goto LABEL_169;
      v78 = (v77 >> 3);
      if (v78 >= 4)
      {
        v80 = (v77 >> 3) & 3;
        v79 = v78 - v80;
        v81 = v76 + 1;
        v82 = v78 - v80;
        do
        {
          v83 = vnegq_f64(*v81);
          v81[-1] = vnegq_f64(v81[-1]);
          *v81 = v83;
          v81 += 2;
          v82 -= 4;
        }
        while (v82);
        if (!v80)
        {
LABEL_169:
          v86 = *(unsigned __int8 *)this;
          if ((v86 & 0xFE) == 4)
          {
            v87 = -INFINITY;
            if (v86 == 5)
              v87 = INFINITY;
            v68 = -v87;
LABEL_173:
            *((double *)this + 71) = v68;
            goto LABEL_174;
          }
          goto LABEL_174;
        }
      }
      else
      {
        v79 = 0;
      }
      v84 = v79 - v78;
      v85 = &v76->f64[v79];
      do
      {
        *v85 = -*v85;
        ++v85;
        v75 = __CFADD__(v84++, 1);
      }
      while (!v75);
      goto LABEL_169;
    }
    v92 = (uint64_t *)((char *)this + 2880);
    v36 = 1;
    while (1)
    {
      if (*((_BYTE *)this + 15933) || *v11 && *v11 >= *((_QWORD *)this + 1473))
        goto LABEL_64;
      v38 = (unsigned __int8 *)*((_QWORD *)a3 + 15);
      if (v38)
      {
        v39 = atomic_load(v38);
        if ((v39 & 1) != 0)
          goto LABEL_64;
      }
      if (fmax(*((double *)a3 + 13) - *((double *)a3 + 14), 0.0) <= 0.0)
        goto LABEL_64;
      v40 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
      v41 = v40;
      v42 = *((_QWORD *)a3 + 3) <= v40 - *((_QWORD *)a3 + 1) ? v40 - *((_QWORD *)a3 + 1) : *((_QWORD *)a3 + 3);
      operations_research::RunningMax<long long>::Add((int *)a3 + 8, v42);
      *((_QWORD *)a3 + 1) = v41;
      if (*(_QWORD *)(*((_QWORD *)a3 + 5) + 8 * *((int *)a3 + 17)) + v41 >= *((_QWORD *)a3 + 2))
      {
        if (FLAGS_time_limit_use_usertime
          && ((v45 = *((double *)a3 + 12), !*((_BYTE *)a3 + 72))
            ? (v46 = *((_QWORD *)a3 + 11))
            : (v46 = absl::lts_2020_02_25::GetCurrentTimeNanos(v43) - *((_QWORD *)a3 + 10) + *((_QWORD *)a3 + 11)),
              v47 = v45 + (double)v46 * -0.000000001,
              v47 > 0.0001))
        {
          v44 = 0;
          v48 = *((_QWORD *)a3 + 1) + (uint64_t)(v47 * 1000000000.0);
        }
        else
        {
          v48 = 0;
          v44 = 1;
        }
        *((_QWORD *)a3 + 2) = v48;
      }
      else
      {
        v44 = 0;
      }
      if ((v44 & 1) != 0)
        goto LABEL_64;
      if (FLAGS_simplex_stop_after_feasibility)
        goto LABEL_64;
      v49 = *(unsigned __int8 *)this;
      if ((v49 - 7) >= 2)
        goto LABEL_64;
      if (v49 == 7)
      {
        operations_research::glop::ReducedCosts::MaintainDualInfeasiblePositions((_BYTE *)this + 8720, 1);
        operations_research::glop::RevisedSimplex::Minimize(this, a3, a4);
      }
      else
      {
        operations_research::glop::ReducedCosts::MaintainDualInfeasiblePositions((_BYTE *)this + 8720, 0);
        operations_research::glop::RevisedSimplex::DualMinimize(this, a3, a4);
      }
      if (*(_DWORD *)a4)
        goto LABEL_12;
      if (*(char *)(a4 + 31) < 0)
        operator delete(*(void **)(a4 + 8));
      operations_research::glop::VariableValues::ResetAllNonBasicVariableValues((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
      operations_research::glop::BasisFactorization::Refactorize((std::vector<int> *)this + 35, a4);
      if (*(_DWORD *)a4)
        goto LABEL_12;
      if (*(char *)(a4 + 31) < 0)
        operator delete(*(void **)(a4 + 8));
      if (*((_QWORD *)this + 360) != *((_QWORD *)this + 361))
      {
        operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(v92, (std::vector<int> *)((char *)this + 520));
        if (*((_QWORD *)this + 45) != *((_QWORD *)this + 46))
          operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>(v92, (char **)this + 45);
        operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation((uint64_t)this + 8720);
        operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation((uint64_t)this + 6288, v92);
        *((_QWORD *)this + 361) = *((_QWORD *)this + 360);
        *((_QWORD *)this + 364) = *((_QWORD *)this + 363);
      }
      operations_research::glop::VariableValues::RecomputeBasicVariableValues((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
      operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
      operations_research::glop::RevisedSimplex::DisplayErrors(this);
      if (*(_BYTE *)this)
      {
        if (*(_BYTE *)this == 5)
        {
          v89 = *((double *)this + 1470);
          if ((operations_research::glop::ReducedCosts::ComputeMaximumDualResidual((operations_research::glop::RevisedSimplex *)((char *)this + 8720)) > v89
             || operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::RevisedSimplex *)((char *)this + 5904)) > v89
             || operations_research::glop::ReducedCosts::ComputeMaximumDualInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 8720)) > v89)
            && *off_254079128[0] >= 1
            && (off_254079128[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_254079128, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 311);
            v90 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"DUAL_UNBOUNDED was reported, but the residual and/or ", 53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"dual infeasibility is above the tolerance", 41);
            google::LogMessage::~LogMessage((google::LogMessage *)v93);
          }
          goto LABEL_64;
        }
        goto LABEL_74;
      }
      v50 = *((double *)this + 1470);
      if (operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::RevisedSimplex *)((char *)this + 5904)) <= v50
        && operations_research::glop::ReducedCosts::ComputeMaximumDualResidual((operations_research::glop::RevisedSimplex *)((char *)this + 8720)) <= v50)
      {
        break;
      }
      if (*off_254079130[0] >= 1)
      {
        if (off_254079130[0] != &google::kLogSiteUninitialized
          || (inited = google::InitVLOG3__((google *)off_254079130, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1), (_DWORD)inited))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 325);
          v51 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"OPTIMAL was reported, yet one of the residuals is above the solution feasibility tolerance after the shift/perturbation are removed.", 132);
LABEL_117:
          google::LogMessage::~LogMessage((google::LogMessage *)v93);
        }
      }
LABEL_118:
      if (*((_BYTE *)this + 11811))
      {
        v52 = 11;
LABEL_120:
        *(_BYTE *)this = v52;
      }
LABEL_74:
      v37 = (double)v36++;
      if (*((double *)this + 1487) < v37)
        goto LABEL_64;
    }
    v53 = *((double *)this + 1461);
    v54 = *((double *)this + 1462);
    v55 = operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
    v56 = operations_research::glop::ReducedCosts::ComputeMaximumDualInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
    if (v55 <= v53 || v56 <= v54)
    {
      if (v55 <= v53)
      {
        if (v56 <= v54)
          goto LABEL_74;
        if (*off_254079148[0] >= 1)
        {
          if (off_254079148[0] != &google::kLogSiteUninitialized
            || (inited = google::InitVLOG3__((google *)off_254079148, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1), (_DWORD)inited))
          {
            google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 354);
            v59 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Re-optimizing with primal simplex ... ", 38);
            google::LogMessage::~LogMessage((google::LogMessage *)v93);
          }
        }
        v52 = 7;
      }
      else if (*off_254079140[0] < 1
             || off_254079140[0] == &google::kLogSiteUninitialized
             && (inited = google::InitVLOG3__((google *)off_254079140, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1), !(_DWORD)inited))
      {
        v52 = 8;
      }
      else
      {
        google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 351);
        v58 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Re-optimizing with dual simplex ... ", 36);
        google::LogMessage::~LogMessage((google::LogMessage *)v93);
        v52 = 8;
      }
      goto LABEL_120;
    }
    if (*off_254079138[0] < 1)
      goto LABEL_118;
    if (off_254079138[0] == &google::kLogSiteUninitialized)
    {
      inited = google::InitVLOG3__((google *)off_254079138, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1);
      if (!(_DWORD)inited)
        goto LABEL_118;
    }
    google::LogMessage::LogMessage((google::LogMessage *)v93, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 344);
    v57 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v93);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"OPTIMAL was reported, yet both of the infeasibility are above the tolerance after the shift/perturbation are removed.", 117);
    goto LABEL_117;
  }
LABEL_12:
  if (!v102)
    std::__throw_bad_function_call[abi:ne180100]();
  ((void (*)(uint64_t (***)()))(*v102)[6])(v102);
  v12 = v102;
  if (v102 == &v100)
  {
    v13 = 4;
    v12 = &v100;
    goto LABEL_24;
  }
  if (v102)
  {
    v13 = 5;
LABEL_24:
    (*v12)[v13]();
  }
}

void sub_22DA0E4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_22DA0E504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_22DA0E518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_22DA0E52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_22DA0E540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_22DA0E554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_22DA0E568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_22DA0E57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a17);
  _Unwind_Resume(a1);
}

void sub_22DA0E70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_22DA0E720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::Initialize(operations_research::glop::RevisedSimplex *this@<X0>, const operations_research::glop::LinearProgram *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  char *v6;
  const operations_research::glop::GlopParameters *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  _BOOL4 v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  uint64_t IsBasicBitRow;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  int *v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  int v76;
  _BOOL4 v77;
  operations_research::glop::EnteringVariable *v78;
  operations_research::glop::GlopParameters *v79;
  operations_research::glop::GlopParameters *v80;
  operations_research::glop::GlopParameters *v81;
  operations_research::glop::ReducedCosts *v83;
  int v84;
  void *__p;
  char v86;
  __int16 v87;
  int v88;

  v5 = (char *)this + 15933;
  v6 = (char *)this + 11644;
  v7 = (operations_research::glop::RevisedSimplex *)((char *)this + 11616);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 11616), (operations_research::glop::RevisedSimplex *)((char *)this + 11912));
  *((_DWORD *)this + 427) = *((_DWORD *)this + 2936);
  *((_BYTE *)this + 1704) = v6[169];
  v81 = (operations_research::glop::RevisedSimplex *)((char *)this + 1008);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 1008), v7);
  v80 = (operations_research::glop::RevisedSimplex *)((char *)this + 3336);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 3336), v7);
  v79 = (operations_research::glop::RevisedSimplex *)((char *)this + 5176);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 5176), v7);
  v78 = (operations_research::glop::RevisedSimplex *)((char *)this + 9616);
  operations_research::glop::EnteringVariable::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 9616), v7);
  v83 = (operations_research::glop::RevisedSimplex *)((char *)this + 8720);
  operations_research::glop::ReducedCosts::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 8720), v7);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6608), v7);
  operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6968), v7);
  operations_research::glop::UpdateRow::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 7840), v7);
  v88 = 0;
  v87 = 0;
  if (*((_QWORD *)this + 87) == *((_QWORD *)this + 88) || !*((_BYTE *)this + 721))
  {
    v9 = operations_research::glop::RevisedSimplex::InitializeMatrixAndTestIfUnchanged((uint64_t)this, (uint64_t)a2, (BOOL *)&v87 + 1, (BOOL *)&v87, &v88);
    if ((_BYTE)v87)
    {
      if (v88 >= 1)
      {
        v10 = *(int *)((char *)this + 9);
        v11 = v10 - v88;
        if ((int)v10 - v88 <= 0)
        {
          v13 = *((_QWORD *)a2 + 20);
          v14 = *((_QWORD *)a2 + 23);
LABEL_14:
          v15 = v10 - v88;
          while (*(double *)(v13 + 8 * v15) == 0.0 || *(double *)(v14 + 8 * v15) == 0.0)
          {
            if (++v15 >= v10)
            {
              v16 = *(int *)((char *)this + 5);
              if ((int)v10 >= (int)v16)
              {
                v76 = 1;
                v77 = 1;
                goto LABEL_24;
              }
              v17 = *((_QWORD *)this + 32);
              if (*(double *)(v17 + 8 * v11) == *(double *)(v13 + 8 * v10))
              {
                v18 = *((_QWORD *)this + 35);
                if (*(double *)(v18 + 8 * v11) == *(double *)(v14 + 8 * v10))
                {
                  v66 = 0;
                  v67 = 8 * v10 + 8;
                  v68 = v14 + v67;
                  v69 = v67 - 8 * v88;
                  v70 = v18 + v69;
                  v71 = v17 + v69;
                  v72 = v13 + v67;
                  do
                  {
                    v73 = v66;
                    if (~(_DWORD)v10 + (_DWORD)v16 == (_DWORD)v66)
                      break;
                    if (*(double *)(v71 + 8 * v66) != *(double *)(v72 + 8 * v66))
                      break;
                    v74 = *(double *)(v70 + 8 * v66);
                    v75 = *(double *)(v68 + 8 * v66++);
                  }
                  while (v74 == v75);
                  v77 = v10 + v73 + 1 >= v16;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
        else
        {
          v12 = 0;
          v13 = *((_QWORD *)a2 + 20);
          v14 = *((_QWORD *)a2 + 23);
          while (*(double *)(*((_QWORD *)this + 32) + v12) == *(double *)(v13 + v12)
               && *(double *)(*((_QWORD *)this + 35) + v12) == *(double *)(v14 + v12))
          {
            v12 += 8;
            if (8 * (v10 - v88) == v12)
              goto LABEL_14;
          }
        }
      }
      v77 = 0;
LABEL_23:
      v76 = 1;
    }
    else
    {
      v76 = 0;
      v77 = 0;
    }
LABEL_24:
    v8 = v9;
  }
  else
  {
    v76 = 0;
    v77 = 0;
    v8 = 1;
  }
  *((_BYTE *)this + 721) = 0;
  v19 = operations_research::glop::RevisedSimplex::InitializeObjectiveAndTestIfUnchanged(this, a2);
  v20 = operations_research::glop::RevisedSimplex::InitializeBoundsAndTestIfUnchanged(this, a2);
  v21 = v20;
  if (v8 && v6[1])
  {
    if (((v19 ^ 1 | v20) & 1) == 0)
    {
      *((_DWORD *)this + 2908) |= 1u;
      *v6 = 1;
      *((_DWORD *)this + 427) = *((_DWORD *)this + 2936);
      *((_BYTE *)this + 1704) = v6[169];
      operations_research::glop::GlopParameters::CopyFrom(v81, v7);
      operations_research::glop::GlopParameters::CopyFrom(v80, v7);
      operations_research::glop::GlopParameters::CopyFrom(v79, v7);
      operations_research::glop::EnteringVariable::SetParameters(v78, v7);
      operations_research::glop::ReducedCosts::SetParameters(v83, v7);
      operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6608), v7);
      operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6968), v7);
      operations_research::glop::UpdateRow::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 7840), v7);
    }
    if (((!v21 | v19) & 1) == 0)
    {
      *((_DWORD *)this + 2908) |= 1u;
      *v6 = 0;
      *((_DWORD *)this + 427) = *((_DWORD *)this + 2936);
      *((_BYTE *)this + 1704) = v6[169];
      operations_research::glop::GlopParameters::CopyFrom(v81, v7);
      operations_research::glop::GlopParameters::CopyFrom(v80, v7);
      operations_research::glop::GlopParameters::CopyFrom(v79, v7);
      operations_research::glop::EnteringVariable::SetParameters(v78, v7);
      operations_research::glop::ReducedCosts::SetParameters(v83, v7);
      operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6608), v7);
      operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::RevisedSimplex *)((char *)this + 6968), v7);
      operations_research::glop::UpdateRow::SetParameters((operations_research::glop::RevisedSimplex *)((char *)this + 7840), v7);
    }
  }
  *v5 = 0;
  v22 = *((double *)this + 1470);
  v24 = *((double *)this + 30);
  v23 = *((double *)this + 31);
  v25 = 1.0 - v22;
  v26 = 11840;
  if (v23 >= 0.0)
    v27 = 11840;
  else
    v27 = 11832;
  v28 = *(double *)((char *)this + v27) / v23 - v24;
  v29 = v22 + 1.0;
  v30 = fabs(v28);
  if (v23 >= 0.0)
    v26 = 11832;
  if (v30 >= 0x7FF0000000000000)
    v29 = 1.0;
  v31 = v28 * v29;
  v32 = *(double *)((char *)this + v26) / v23 - v24;
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    v33 = 1.0;
  else
    v33 = v25;
  *((double *)this + 22) = v32 * v33;
  *((double *)this + 23) = v31;
  if (*off_254079198[0] >= 1
    && (off_254079198[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079198, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    operations_research::glop::RevisedSimplex::SetVariableNames(this);
  }
  if (*((_QWORD *)this + 87) != *((_QWORD *)this + 88) && !*((_BYTE *)this + 720))
  {
    if (!*v6)
    {
      operations_research::glop::DualEdgeNorms::Clear((uint64_t)this + 6288);
      *((_QWORD *)this + 46) = *((_QWORD *)this + 45);
      if ((v8 & v21) != 1)
      {
        if ((v77 & v76) != 1)
          goto LABEL_47;
        v48 = v88;
        operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart((uint64_t)this, (uint64_t)this + 696, v88);
        v49 = (int *)*((_QWORD *)this + 65);
        v50 = (int *)*((_QWORD *)this + 66);
        if (v49 != v50)
        {
          v51 = *(_DWORD *)((char *)this + 9) - v48;
          do
          {
            if (*v49 >= v51)
              *v49 += v48;
            ++v49;
          }
          while (v49 != v50);
        }
        operations_research::glop::PrimalEdgeNorms::Clear((uint64_t)this + 6944);
      }
      operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts(v83);
      goto LABEL_113;
    }
    operations_research::glop::PrimalEdgeNorms::Clear((uint64_t)this + 6944);
    if (v19)
    {
      if (v8)
      {
        if (!v21)
        {
          operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart((uint64_t)this, (uint64_t)this + 696, 0);
          operations_research::glop::VariableValues::RecomputeBasicVariableValues((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
        }
        goto LABEL_113;
      }
      if (HIBYTE(v87))
      {
        operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart((uint64_t)this, (uint64_t)this + 696, 0);
        operations_research::glop::DualEdgeNorms::ResizeOnNewRows((uint64_t)this + 6288, *(_DWORD *)((char *)this + 1));
        operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts(v83);
        *((_QWORD *)this + 46) = *((_QWORD *)this + 45);
        operations_research::glop::RevisedSimplex::InitializeFirstBasis((uint64_t)this, (char **)this + 65, (uint64_t)&v84);
        v64 = v84;
        if (v86 < 0)
          operator delete(__p);
        if (!v64)
          goto LABEL_113;
      }
    }
  }
LABEL_47:
  if (*((_QWORD *)this + 87) == *((_QWORD *)this + 88))
    goto LABEL_98;
  operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart((uint64_t)this, (uint64_t)this + 696, 0);
  std::vector<int>::assign((std::vector<int> *)((char *)this + 520), *(int *)((char *)this + 1), &operations_research::glop::kInvalidCol);
  IsBasicBitRow = operations_research::glop::VariablesInfo::GetIsBasicBitRow((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
  v35 = *(unint64_t **)(IsBasicBitRow + 8);
  v36 = *(unint64_t **)(IsBasicBitRow + 16);
  if (v35 != v36)
  {
    v37 = *v35;
    if (*v35)
    {
      v38 = 0;
      goto LABEL_76;
    }
    v39 = (unint64_t)((char *)v36 - (char *)v35) >> 3;
    v40 = (int)(v36 - v35);
    if ((int)v39 <= 1)
      v41 = 1;
    else
      v41 = (unint64_t)((char *)v36 - (char *)v35) >> 3;
    if (v40 <= 1)
      v40 = 1;
    v42 = v40 - 1;
    while (v42 != v37)
    {
      v43 = v37 + 1;
      if (v35[++v37])
      {
        v41 = v43;
        break;
      }
    }
    if (v41 != (_DWORD)v39)
    {
      v37 = v35[v41];
      v38 = v41 << 6;
LABEL_76:
      v46 = __clz(__rbit64(v37)) & 0x3F | v38;
      v45 = (v37 - 1) & v37;
      v47 = *(_DWORD *)(IsBasicBitRow + 40);
      if (v46 != v47)
        goto LABEL_77;
      goto LABEL_90;
    }
  }
  v45 = 0;
  v38 = 0;
  v46 = -1;
  v47 = *(_DWORD *)(IsBasicBitRow + 40);
  if (v47 != -1)
  {
LABEL_77:
    v52 = 0;
    v53 = *((_QWORD *)this + 65);
    v54 = (char *)v36 - (char *)v35;
    v55 = (unint64_t)((char *)v36 - (char *)v35) >> 3;
    v56 = (int)(v54 >> 3);
    while (1)
    {
      *(_DWORD *)(v53 + 4 * v52) = v46;
      if (v45)
        goto LABEL_79;
      if ((v38 >> 6) + 1 > (int)v55)
        v57 = (v38 >> 6) + 1;
      else
        v57 = v55;
      v58 = ((uint64_t)v38 >> 6) + 1;
      while (v58 < v56)
      {
        if (v35[v58++])
        {
          v57 = v58 - 1;
          break;
        }
      }
      if (v57 == (_DWORD)v55)
      {
        v45 = 0;
        v46 = -1;
        ++v52;
        if (v47 == -1)
          break;
      }
      else
      {
        v45 = v35[v57];
        v38 = v57 << 6;
LABEL_79:
        v46 = (__clz(__rbit64(v45)) & 0x3F) + v38;
        v45 &= v45 - 1;
        ++v52;
        if (v46 == v47)
          break;
      }
    }
  }
LABEL_90:
  operations_research::glop::BasisFactorization::Clear((operations_research::glop::RevisedSimplex *)((char *)this + 840));
  operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts(v83);
  operations_research::glop::PrimalEdgeNorms::Clear((uint64_t)this + 6944);
  operations_research::glop::DualEdgeNorms::Clear((uint64_t)this + 6288);
  *((_QWORD *)this + 46) = *((_QWORD *)this + 45);
  operations_research::glop::RevisedSimplex::InitializeFirstBasis((uint64_t)this, (char **)this + 65, (uint64_t)&v84);
  v60 = v84;
  if ((v86 & 0x80000000) == 0)
  {
    if (!v84)
      goto LABEL_113;
    goto LABEL_94;
  }
  operator delete(__p);
  if (!v60)
  {
LABEL_113:
    v62 = a3;
    if (*off_2540791B0[0] >= 1
      && (off_2540791B0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_2540791B0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v84, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1323);
      v65 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Incremental solve.", 18);
      google::LogMessage::~LogMessage((google::LogMessage *)&v84);
    }
LABEL_117:
    operations_research::glop::Status::Status(v62);
    return;
  }
LABEL_94:
  if (*off_2540791A0[0] >= 1
    && (off_2540791A0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540791A0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v84, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1309);
    v61 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"RevisedSimplex is not using the warm start basis because it is not factorizable.", 80);
    google::LogMessage::~LogMessage((google::LogMessage *)&v84);
  }
LABEL_98:
  v62 = a3;
  if (*off_2540791A8[0] >= 1
    && (off_2540791A8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540791A8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v84, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1315);
    v63 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Solve from scratch.", 19);
    google::LogMessage::~LogMessage((google::LogMessage *)&v84);
  }
  operations_research::glop::BasisFactorization::Clear((operations_research::glop::RevisedSimplex *)((char *)this + 840));
  operations_research::glop::ReducedCosts::ClearAndRemoveCostShifts(v83);
  operations_research::glop::PrimalEdgeNorms::Clear((uint64_t)this + 6944);
  operations_research::glop::DualEdgeNorms::Clear((uint64_t)this + 6288);
  *((_QWORD *)this + 46) = *((_QWORD *)this + 45);
  operations_research::glop::RevisedSimplex::CreateInitialBasis(this, a3);
  if (!*(_DWORD *)a3)
  {
    if (*(char *)(a3 + 31) < 0)
      operator delete(*(void **)(a3 + 8));
    goto LABEL_117;
  }
}

void sub_22DA0F1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DA0F204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DA0F218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyRows(operations_research::glop::RevisedSimplex *this)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t result;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(int *)((char *)this + 1);
  v21 = 0;
  v22 = 0;
  v20 = 0;
  if (!(_DWORD)v2)
  {
    v4 = 0;
    v6 = *(unsigned int *)((char *)this + 5);
    if ((int)v6 < 1)
      goto LABEL_19;
    goto LABEL_13;
  }
  if ((v2 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v3 = operator new(8 * ((v2 - 1) >> 6) + 8);
  v4 = v3;
  if (v2 >= 0x41)
    v5 = (v2 - 1) >> 6;
  else
    v5 = 0;
  v3[v5] = 0;
  if (v2 >= 0x40)
    bzero(v3, 8 * (v2 >> 6));
  if ((v2 & 0x3F) != 0)
    v4[v2 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  v6 = *(unsigned int *)((char *)this + 5);
  if ((int)v6 >= 1)
  {
LABEL_13:
    v7 = 0;
    v8 = *((_QWORD *)this + 9);
    v9 = *((_QWORD *)this + 6);
    do
    {
      v10 = *(_QWORD *)(v8 + 8 * v7++);
      v11 = *(_QWORD *)(v8 + 8 * v7) - v10;
      if (v11 >= 1)
      {
        v12 = (int *)(v9 + 4 * v10);
        do
        {
          v13 = *v12++;
          *(_QWORD *)((char *)v4 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          --v11;
        }
        while (v11);
      }
    }
    while (v7 != v6);
  }
LABEL_19:
  if ((int)v2 < 1)
  {
    v15 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    do
    {
      if (((*(_QWORD *)((char *)v4 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        v15 = (v15 + 1);
        if (*operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyRows(void)::vlocal__[0] >= 1
          && (operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyRows(void)::vlocal__[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyRows(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1388);
          v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Row ", 4);
          v17 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is empty.", 10);
          google::LogMessage::~LogMessage((google::LogMessage *)v19);
        }
      }
      ++v14;
    }
    while ((uint64_t)v14 < *(int *)((char *)this + 1));
  }
  operator delete(v4);
  return v15;
}

void sub_22DA0F468(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DA0F480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyColumns(operations_research::glop::RevisedSimplex *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _BYTE v7[16];

  if (*(int *)((char *)this + 5) < 1)
    return 0;
  v2 = 0;
  v3 = 0;
  do
  {
    if (*(_QWORD *)(*((_QWORD *)this + 9) + 8 * v2 + 8) == *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v2))
    {
      v3 = (v3 + 1);
      if (*operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyColumns(void)::vlocal__[0] >= 1
        && (operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyColumns(void)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::glop::RevisedSimplex::ComputeNumberOfEmptyColumns(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v7, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1399);
        v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Column ", 7);
        v5 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" is empty.", 10);
        google::LogMessage::~LogMessage((google::LogMessage *)v7);
      }
    }
    ++v2;
  }
  while (v2 < *(int *)((char *)this + 5));
  return v3;
}

void sub_22DA0F5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::DisplayBasicVariableStatistics(operations_research::glop::RevisedSimplex *this)
{
  _QWORD *TypeRow;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  double v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  int v17;
  _BOOL4 v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _BYTE v26[16];

  TypeRow = (_QWORD *)operations_research::glop::VariablesInfo::GetTypeRow((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
  v3 = *(unsigned int *)((char *)this + 1);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *((double *)this + 1461);
    v10 = (int *)*((_QWORD *)this + 65);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = 8 * v12;
      v14 = *(double *)(*((_QWORD *)this + 743) + 8 * v12);
      if (!*(_BYTE *)(*TypeRow + v12))
        ++v5;
      v15 = *(double *)(*((_QWORD *)this + 35) + v13);
      v16 = *(double *)(*((_QWORD *)this + 32) + v13);
      v17 = v14 < v16 - v9 || v14 > v9 + v15;
      if (v11 >= *(_DWORD *)((char *)this + 9))
        ++v7;
      v18 = v14 == v15;
      v8 += v17;
      if (v14 == v16)
        v18 = 1;
      v19 = v6 + v18;
      if (v16 == v15)
        ++v4;
      else
        v6 = v19;
      --v3;
    }
    while (v3);
  }
  if (*off_2540791B8[0] > 0
    && (off_2540791B8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540791B8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1362);
    v20 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Basis size: ", 12);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*off_2540791C0[0] >= 1
    && (off_2540791C0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540791C0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1363);
    v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Number of basic infeasible variables: ", 38);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*off_2540791C8[0] >= 1
    && (off_2540791C8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540791C8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1365);
    v22 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Number of basic slack variables: ", 33);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*off_2540791D0[0] >= 1
    && (off_2540791D0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540791D0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1366);
    v23 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Number of basic variables at bound: ", 36);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*off_2540791D8[0] >= 1
    && (off_2540791D8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540791D8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1367);
    v24 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Number of basic fixed variables: ", 33);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
  if (*off_2540791E0[0] >= 1
    && (off_2540791E0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540791E0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1368);
    v25 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Number of basic free variables: ", 32);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
}

void sub_22DA0F9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DA0F9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DA0FA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DA0FA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DA0FA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DA0FA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::DisplayProblem(operations_research::glop::RevisedSimplex *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  double v5;
  BOOL v6;
  uint64_t v7;
  const char *p_p;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  double *v20;
  double v21;
  int v22;
  uint64_t v23;
  const char *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *__p;
  uint64_t v31;
  unsigned __int8 v32;
  void *v33;
  uint64_t v34;
  char v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (*off_254079300[0] >= 3
    && (off_254079300[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079300, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
  {
    operations_research::glop::RevisedSimplex::DisplayInfoOnVariables(this);
    v35 = 5;
    strcpy((char *)&v33, "min: ");
    if (*(int *)((char *)this + 5) < 1)
      goto LABEL_15;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(double *)(*((_QWORD *)this + 27) + 8 * v3);
      v6 = v5 != 0.0;
      operations_research::glop::StringifyMonomial(*((_QWORD *)this + 68) + v2, FLAGS_simplex_display_numbers_as_fractions, (uint64_t)&__p, v5);
      v7 = v32;
      if ((v32 & 0x80u) == 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      if ((v32 & 0x80u) != 0)
        v7 = v31;
      v36 = p_p;
      v37 = v7;
      absl::lts_2020_02_25::StrAppend((uint64_t)&v33, (uint64_t)&v36);
      if ((char)v32 < 0)
        operator delete(__p);
      v4 |= v6;
      ++v3;
      v2 += 24;
    }
    while (v3 < *(int *)((char *)this + 5));
    if ((v4 & 1) == 0)
    {
LABEL_15:
      v36 = " 0";
      v37 = 2;
      absl::lts_2020_02_25::StrAppend((uint64_t)&v33, (uint64_t)&v36);
    }
    if (*off_254079308[0] >= 3
      && (off_254079308[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079308, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v36, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 3131);
      v9 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v36);
      if (v35 >= 0)
        v10 = &v33;
      else
        v10 = v33;
      if (v35 >= 0)
        v11 = v35;
      else
        v11 = v34;
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)";", 1);
      google::LogMessage::~LogMessage((google::LogMessage *)&v36);
    }
    if (*(int *)((char *)this + 1) >= 1)
    {
      v13 = 0;
      do
      {
        MEMORY[0x22E31DC84](&v33, "");
        if (*(int *)((char *)this + 5) >= 1)
        {
          v14 = 0;
          do
          {
            v15 = *((_QWORD *)this + 9);
            v16 = *(_QWORD *)(v15 + 8 * v14);
            v17 = v14 + 1;
            v18 = *(_QWORD *)(v15 + 8 * (v14 + 1)) - v16;
            if (v18 < 1)
            {
              v21 = 0.0;
            }
            else
            {
              v19 = (int *)(*((_QWORD *)this + 6) + 4 * v16);
              v20 = (double *)(*((_QWORD *)this + 3) + 8 * v16);
              v21 = 0.0;
              do
              {
                v22 = *v19++;
                if (v22 == v13)
                  v21 = *v20;
                ++v20;
                --v18;
              }
              while (v18);
            }
            operations_research::glop::StringifyMonomial(*((_QWORD *)this + 68) + 24 * v14, FLAGS_simplex_display_numbers_as_fractions, (uint64_t)&__p, v21);
            v23 = v32;
            if ((v32 & 0x80u) == 0)
              v24 = (const char *)&__p;
            else
              v24 = (const char *)__p;
            if ((v32 & 0x80u) != 0)
              v23 = v31;
            v36 = v24;
            v37 = v23;
            absl::lts_2020_02_25::StrAppend((uint64_t)&v33, (uint64_t)&v36);
            if ((char)v32 < 0)
              operator delete(__p);
            v14 = v17;
          }
          while (v17 < *(int *)((char *)this + 5));
        }
        if (*off_254079310[0] > 2
          && (off_254079310[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_254079310, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v36, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 3140);
          v25 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v36);
          if (v35 >= 0)
            v26 = &v33;
          else
            v26 = v33;
          if (v35 >= 0)
            v27 = v35;
          else
            v27 = v34;
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" = 0;", 5);
          google::LogMessage::~LogMessage((google::LogMessage *)&v36);
        }
        ++v13;
      }
      while (v13 < *(_DWORD *)((char *)this + 1));
    }
    if (*off_254079318[0] > 2
      && (off_254079318[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079318, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v36, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 3142);
      v29 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"------", 6);
      google::LogMessage::~LogMessage((google::LogMessage *)&v36);
    }
    if (v35 < 0)
      operator delete(v33);
  }
}

void sub_22DA0FEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if ((a21 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::DisplayAllStats(size_t *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::string __p;
  std::string *p_p;
  uint64_t (*v7)(uint64_t, uint64_t, int, char *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (FLAGS_simplex_display_stats)
  {
    v2 = (uint64_t *)MEMORY[0x24BDAC8D8];
    v3 = *MEMORY[0x24BDAC8D8];
    operations_research::glop::RevisedSimplex::StatString(this, &__p);
    p_p = &__p;
    v7 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
    absl::lts_2020_02_25::str_format_internal::FprintF(v3, "%s", 2, (uint64_t)&p_p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v4 = *v2;
    operations_research::glop::RevisedSimplex::GetPrettySolverStats((operations_research::glop::RevisedSimplex *)this, (uint64_t)&__p);
    p_p = &__p;
    v7 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
    absl::lts_2020_02_25::str_format_internal::FprintF(v4, "%s", 2, (uint64_t)&p_p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22DA100C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (***operations_research::glop::RevisedSimplex::DualMinimize@<X0>(operations_research::glop::RevisedSimplex *this@<X0>, operations_research::TimeLimit *a2@<X1>, uint64_t a3@<X8>))()
{
  operations_research::TimeLimit *v3;
  _BOOL4 v6;
  char *v7;
  char *v8;
  operations_research::glop::BasisFactorization *v9;
  int **v10;
  uint64_t NonBasicBoxedVariables;
  double *v12;
  unint64_t v13;
  double *v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  _DWORD *v24;
  _DWORD *v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  absl::lts_2020_02_25 *v35;
  double v36;
  double v37;
  unsigned __int8 *v38;
  unsigned __int8 v39;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v41;
  uint64_t v42;
  absl::lts_2020_02_25 *v43;
  double v44;
  double v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  uint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  double v59;
  int v60;
  int v61;
  char **v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  _OWORD *v67;
  unint64_t *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t (***result)();
  uint64_t v78;
  char **UnitRowLeftInverse;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t NonZeroPositions;
  int *v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float64x2_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  float64x2_t *v94;
  unint64_t v95;
  float64x2_t v96;
  unint64_t v97;
  double *v98;
  BOOL v99;
  float64x2_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  float64x2_t *v105;
  unint64_t v106;
  float64x2_t v107;
  unint64_t v108;
  double *v109;
  char *v110;
  operations_research::TimeLimit *v111;
  unint64_t **v112;
  char *v113;
  int *v114;
  operations_research::glop::VariablesInfo *v115;
  int **v116;
  uint64_t *v117;
  int **v118;
  char *v119;
  operations_research::glop::VariableValues *v120;
  operations_research::glop::BasisFactorization *v121;
  operations_research::glop::ReducedCosts *v122;
  uint64_t v123[2];
  double v124;
  unsigned int v125;
  double v126;
  double v127;
  unsigned int v128;
  BOOL v129;
  uint64_t (**v130)();
  __int128 v131;
  uint64_t (***v132)();
  uint64_t (**v133)();
  __int128 v134;
  uint64_t (***v135)();
  uint64_t v136;

  v3 = a2;
  v6 = 0;
  v136 = *MEMORY[0x24BDAC8D0];
  v7 = (char *)this + 15932;
  v8 = (char *)this + 9387;
  v130 = &off_24F9801F0;
  *(_QWORD *)&v131 = this;
  *((_QWORD *)&v131 + 1) = a2;
  v132 = &v130;
  v118 = (int **)((char *)this + 10216);
  v135 = &v133;
  v112 = (unint64_t **)((char *)this + 10240);
  v133 = &off_24F9801F0;
  v9 = (operations_research::glop::RevisedSimplex *)((char *)this + 840);
  v120 = (operations_research::glop::RevisedSimplex *)((char *)this + 5904);
  v134 = v131;
  v116 = (int **)((char *)this + 760);
  v117 = (uint64_t *)((char *)this + 728);
  *((_DWORD *)this + 3982) = 0;
  v122 = (operations_research::glop::RevisedSimplex *)((char *)this + 8720);
  v129 = 0;
  v115 = (operations_research::glop::RevisedSimplex *)((char *)this + 5480);
  v10 = (int **)((char *)this + 7840);
  *((_QWORD *)this + 1278) = *((_QWORD *)this + 1277);
  v119 = (char *)this + 9616;
  v114 = (int *)((char *)a2 + 32);
  v113 = (char *)this + 6288;
  *((_QWORD *)this + 1281) = *((_QWORD *)this + 1280);
  v128 = 0;
  v126 = 0.0;
  v127 = 0.0;
  v125 = 0;
  v124 = 0.0;
  v121 = (operations_research::glop::RevisedSimplex *)((char *)this + 840);
  while (1)
  {
    operations_research::glop::RevisedSimplex::RefactorizeBasisIfNeeded(this, &v129, a3);
    if (*(_DWORD *)a3)
      break;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*(void **)(a3 + 8));
    if (operations_research::glop::BasisFactorization::IsRefactorized(v9))
    {
      if (*v7 || *v8 || v8[2] | v6)
        goto LABEL_11;
      if (operations_research::glop::ReducedCosts::ComputeMaximumDualResidual(v122) > *((double *)this + 1193))
      {
        if (*off_254079230[0] >= 1
          && (off_254079230[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_254079230, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2663);
          v58 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v123);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Recomputing reduced costs. Dual residual = ", 43);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)v123);
        }
LABEL_11:
        operations_research::glop::ReducedCosts::MakeReducedCostsPrecise((uint64_t)v122);
      }
      if (!*v7)
      {
        NonBasicBoxedVariables = operations_research::glop::VariablesInfo::GetNonBasicBoxedVariables(v115);
        operations_research::glop::RevisedSimplex::MakeBoxedVariableDualFeasible<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((double *)this, NonBasicBoxedVariables, 0);
        operations_research::glop::VariableValues::RecomputeBasicVariableValues(v120);
        operations_research::glop::VariableValues::ResetPrimalInfeasibilityInformation(v120);
        v12 = (double *)*((_QWORD *)this + 27);
        v13 = *((_QWORD *)this + 28) - (_QWORD)v12;
        if ((int)(v13 >> 3) < 1)
        {
          if (*((double *)this + 23) < 0.0)
            goto LABEL_128;
        }
        else
        {
          v14 = (double *)*((_QWORD *)this + 743);
          v15 = (v13 >> 3);
          v16 = 0.0;
          v17 = 0.0;
          do
          {
            v18 = *v12++;
            v19 = v18;
            v20 = *v14++;
            v21 = v17 + v19 * v20;
            v22 = v16 + v21;
            v17 = v21 + v16 - (v16 + v21);
            v16 = v22;
            --v15;
          }
          while (v15);
          if (v22 > *((double *)this + 23))
          {
LABEL_128:
            if (*off_254079238[0] >= 1
              && (off_254079238[0] != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)off_254079238, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2689);
              v74 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v123);
              v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Stopping the dual simplex because", 33);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" the objective limit ", 21);
              v76 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" has been reached.", 18);
              google::LogMessage::~LogMessage((google::LogMessage *)v123);
            }
            *(_BYTE *)this = 8;
            v7[1] = 1;
            goto LABEL_135;
          }
        }
      }
      operations_research::glop::ReducedCosts::GetReducedCosts(v122);
      operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
      goto LABEL_22;
    }
    if (*v7)
      goto LABEL_23;
    operations_research::glop::RevisedSimplex::MakeBoxedVariableDualFeasible<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((double *)this, v118, 1);
    *((_QWORD *)this + 1278) = *((_QWORD *)this + 1277);
    operations_research::glop::VariableValues::UpdatePrimalInfeasibilityInformation(v120, v116);
LABEL_22:
    if (!*v7)
    {
      operations_research::glop::RevisedSimplex::DualChooseLeavingVariableRow(this, (int *)&v128, &v127, &v126, a3);
      goto LABEL_25;
    }
LABEL_23:
    operations_research::glop::RevisedSimplex::DualPhaseIChooseLeavingVariableRow((uint64_t)this, (int *)&v128, &v127, &v126, a3);
LABEL_25:
    if (*(_DWORD *)a3)
      break;
    if (*(char *)(a3 + 31) < 0)
    {
      operator delete(*(void **)(a3 + 8));
      v23 = v128;
      if (v128 != -1)
        goto LABEL_28;
LABEL_36:
      if (operations_research::glop::BasisFactorization::IsRefactorized(v9))
      {
        v72 = *v7;
        if (*v7)
        {
          if (*((_DWORD *)this + 88))
            v72 = 2;
          else
            v72 = 8;
        }
        *(_BYTE *)this = v72;
        goto LABEL_135;
      }
      if (*off_254079240[0] >= 1
        && (off_254079240[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079240, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2726);
        v26 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v123);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Optimal reached, double checking.", 33);
LABEL_2:
        google::LogMessage::~LogMessage((google::LogMessage *)v123);
      }
LABEL_3:
      v6 = 1;
      v129 = 1;
    }
    else
    {
      v23 = v128;
      if (v128 == -1)
        goto LABEL_36;
LABEL_28:
      operations_research::glop::UpdateRow::ComputeUpdateRow(v10, v23);
      v24 = (_DWORD *)*((_QWORD *)this + 1280);
      v25 = (_DWORD *)*((_QWORD *)this + 1281);
      while (v24 != v25)
      {
        if (*v24 == v128)
          operations_research::glop::UpdateRow::IgnoreUpdatePosition((uint64_t)v10, v24[1]);
        v24 += 2;
      }
      if (*v7)
        operations_research::glop::EnteringVariable::DualPhaseIChooseEnteringColumn((operations_research::glop::UpdateRow *)v10, (uint64_t)v119, &v125, &v124, a3, v127);
      else
        operations_research::glop::EnteringVariable::DualChooseEnteringColumn((operations_research::glop::UpdateRow *)v10, (uint64_t)v119, v118, (int *)&v125, &v124, a3, v127);
      v9 = v121;
      if (*(_DWORD *)a3)
        break;
      if (*(char *)(a3 + 31) < 0)
      {
        operator delete(*(void **)(a3 + 8));
        v27 = v125;
        if (v125 != -1)
          goto LABEL_45;
LABEL_55:
        if (v8[1])
        {
          if (*v7)
          {
            if (*off_254079250[0] >= 1
              && (off_254079250[0] != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)off_254079250, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2771);
              v73 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v123);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Unbounded dual feasibility problem !?", 37);
              google::LogMessage::~LogMessage((google::LogMessage *)v123);
            }
            *(_BYTE *)this = 9;
            goto LABEL_135;
          }
          *(_BYTE *)this = 5;
          UnitRowLeftInverse = (char **)operations_research::glop::UpdateRow::GetUnitRowLeftInverse((operations_research::glop::UpdateRow *)v10);
          if ((char **)((char *)this + 648) != UnitRowLeftInverse)
            std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 81, *UnitRowLeftInverse, UnitRowLeftInverse[1], (UnitRowLeftInverse[1] - *UnitRowLeftInverse) >> 3);
          operations_research::glop::UpdateRow::RecomputeFullUpdateRow((uint64_t *)v10, v128);
          v80 = *(int *)((char *)this + 5);
          v123[0] = 0;
          v81 = (char *)*((_QWORD *)this + 84);
          v82 = (uint64_t)(*((_QWORD *)this + 85) - (_QWORD)v81) >> 3;
          if (v80 <= v82)
          {
            if (v80 < v82)
              *((_QWORD *)this + 85) = &v81[8 * v80];
          }
          else
          {
            std::vector<double>::__append((uint64_t)this + 672, v80 - v82, v123);
            v81 = (char *)*((_QWORD *)this + 84);
          }
          bzero(v81, 8 * (int)v80);
          NonZeroPositions = operations_research::glop::UpdateRow::GetNonZeroPositions((operations_research::glop::UpdateRow *)v10);
          v84 = *(int **)NonZeroPositions;
          v85 = *(int **)(NonZeroPositions + 8);
          if (*(int **)NonZeroPositions != v85)
          {
            v86 = *((_QWORD *)this + 1008);
            v87 = *((_QWORD *)this + 84);
            do
            {
              v88 = *v84++;
              *(_QWORD *)(v87 + 8 * v88) = *(_QWORD *)(v86 + 8 * v88);
            }
            while (v84 != v85);
          }
          if (v127 >= 0.0)
            goto LABEL_135;
          v89 = (float64x2_t *)*((_QWORD *)this + 81);
          v90 = *((_QWORD *)this + 82) - (_QWORD)v89;
          if ((int)(v90 >> 3) >= 1)
          {
            v91 = (v90 >> 3);
            if (v91 < 4)
            {
              v92 = 0;
              goto LABEL_159;
            }
            v93 = (v90 >> 3) & 3;
            v92 = v91 - v93;
            v94 = v89 + 1;
            v95 = v91 - v93;
            do
            {
              v96 = vnegq_f64(*v94);
              v94[-1] = vnegq_f64(v94[-1]);
              *v94 = v96;
              v94 += 2;
              v95 -= 4;
            }
            while (v95);
            if (v93)
            {
LABEL_159:
              v97 = v92 - v91;
              v98 = &v89->f64[v92];
              do
              {
                *v98 = -*v98;
                ++v98;
                v99 = __CFADD__(v97++, 1);
              }
              while (!v99);
            }
          }
          v100 = (float64x2_t *)*((_QWORD *)this + 84);
          v101 = *((_QWORD *)this + 85) - (_QWORD)v100;
          if ((int)(v101 >> 3) >= 1)
          {
            v102 = (v101 >> 3);
            if (v102 >= 4)
            {
              v104 = (v101 >> 3) & 3;
              v103 = v102 - v104;
              v105 = v100 + 1;
              v106 = v102 - v104;
              do
              {
                v107 = vnegq_f64(*v105);
                v105[-1] = vnegq_f64(v105[-1]);
                *v105 = v107;
                v105 += 2;
                v106 -= 4;
              }
              while (v106);
              if (!v104)
                goto LABEL_135;
            }
            else
            {
              v103 = 0;
            }
            v108 = v103 - v102;
            v109 = &v100->f64[v103];
            do
            {
              *v109 = -*v109;
              ++v109;
              v99 = __CFADD__(v108++, 1);
            }
            while (!v99);
          }
LABEL_135:
          operations_research::glop::Status::Status(a3);
          break;
        }
        if (*off_254079248[0] >= 1
          && (off_254079248[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_254079248, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2764);
          v34 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v123);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"No entering column. Double checking...", 38);
          goto LABEL_2;
        }
        goto LABEL_3;
      }
      v27 = v125;
      if (v125 == -1)
        goto LABEL_55;
LABEL_45:
      if (fabs(*(double *)(*((_QWORD *)this + 1008) + 8 * v27)) < *((double *)this + 1477) && !v8[1])
      {
        if (*off_254079258[0] >= 1
          && (off_254079258[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_254079258, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2795);
          v57 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v123);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Trying not to pivot by ", 23);
          std::ostream::operator<<();
          goto LABEL_2;
        }
        goto LABEL_3;
      }
      operations_research::glop::RevisedSimplex::ComputeDirection((uint64_t)this, v27);
      if (fabs(*(double *)(*((_QWORD *)this + 91) + 8 * (int)v128)) >= *((double *)this + 1467))
      {
        *((_QWORD *)this + 1281) = *((_QWORD *)this + 1280);
        v36 = operations_research::glop::BasisFactorization::DeterministicTime(v121)
            + (double)*((uint64_t *)this + 1012) * 0.000000002
            + (double)*((uint64_t *)this + 979) * 0.000000002;
        v37 = *((double *)v3 + 14) + v36 - *((double *)this + 1289);
        *((double *)v3 + 14) = v37;
        *((double *)this + 1289) = v36;
        if (*((_QWORD *)this + 1283) == *((_QWORD *)this + 1473))
          goto LABEL_135;
        v38 = (unsigned __int8 *)*((_QWORD *)v3 + 15);
        if (v38)
        {
          v39 = atomic_load(v38);
          if ((v39 & 1) != 0)
            goto LABEL_135;
          v37 = *((double *)v3 + 14);
        }
        if (fmax(*((double *)v3 + 13) - v37, 0.0) <= 0.0)
          goto LABEL_135;
        CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v35);
        v41 = CurrentTimeNanos;
        if (*((_QWORD *)v3 + 3) <= CurrentTimeNanos - *((_QWORD *)v3 + 1))
          v42 = CurrentTimeNanos - *((_QWORD *)v3 + 1);
        else
          v42 = *((_QWORD *)v3 + 3);
        operations_research::RunningMax<long long>::Add(v114, v42);
        *((_QWORD *)v3 + 1) = v41;
        if (*(_QWORD *)(*((_QWORD *)v3 + 5) + 8 * *((int *)v3 + 17)) + v41 >= *((_QWORD *)v3 + 2))
        {
          if (!FLAGS_time_limit_use_usertime)
            goto LABEL_134;
          v44 = *((double *)v3 + 12);
          if (*((_BYTE *)v3 + 72))
          {
            v45 = v44
                + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v43) - *((_QWORD *)v3 + 10) + *((_QWORD *)v3 + 11))
                * -0.000000001;
            if (v45 <= 0.0001)
              goto LABEL_134;
          }
          else
          {
            v45 = v44 + (double)*((uint64_t *)v3 + 11) * -0.000000001;
            if (v45 <= 0.0001)
            {
LABEL_134:
              *((_QWORD *)v3 + 2) = 0;
              goto LABEL_135;
            }
          }
          *((_QWORD *)v3 + 2) = *((_QWORD *)v3 + 1) + (uint64_t)(v45 * 1000000000.0);
        }
        if (*v7)
        {
          v59 = 0.0;
          operations_research::glop::RevisedSimplex::DualPhaseIUpdatePrice((uint64_t)this, v128, v125);
        }
        else
        {
          v59 = (*(double *)(*((_QWORD *)this + 743) + 8 * *(int *)(*((_QWORD *)this + 65) + 4 * (int)v128)) - v126)
              / *(double *)(*((_QWORD *)this + 91) + 8 * (int)v128);
          operations_research::glop::VariableValues::UpdateOnPivoting((uint64_t)v120, v117, v125, v59);
        }
        operations_research::glop::ReducedCosts::UpdateBeforeBasisPivot((uint64_t)v122, v125, v128, v117, (operations_research::glop::UpdateRow *)v10);
        v60 = v125;
        v61 = v128;
        v62 = (char **)operations_research::glop::UpdateRow::GetUnitRowLeftInverse((operations_research::glop::UpdateRow *)v10);
        operations_research::glop::DualEdgeNorms::UpdateBeforeBasisPivot((uint64_t)v113, v60, v61, v117, v62);
        v63 = *(_DWORD *)(*((_QWORD *)this + 65) + 4 * (int)v128);
        operations_research::glop::RevisedSimplex::UpdateAndPivot((uint64_t)this, v125, v128, a3, v126);
        if (*(_DWORD *)a3)
          break;
        if (*(char *)(a3 + 31) < 0)
          operator delete(*(void **)(a3 + 8));
        operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus(v120, v63);
        if (fabs(v59) * *((double *)this + 1461) <= 1.0)
        {
          v6 = v129;
        }
        else
        {
          v6 = 1;
          v129 = 1;
        }
        ++*((_QWORD *)this + 1283);
      }
      else
      {
        if (*off_254079260[0] >= 1
          && (off_254079260[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_254079260, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v123, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2807);
          v28 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v123);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Do not pivot by ", 16);
          v29 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" because the direction is ", 26);
          std::ostream::operator<<();
          google::LogMessage::~LogMessage((google::LogMessage *)v123);
        }
        v129 = 1;
        v30 = v128;
        v31 = (unint64_t *)*((_QWORD *)this + 1281);
        v32 = *((_QWORD *)this + 1282);
        if ((unint64_t)v31 < v32)
        {
          *v31 = v128 | ((unint64_t)v125 << 32);
          v33 = (uint64_t)(v31 + 1);
          v9 = v121;
          goto LABEL_116;
        }
        v110 = v8;
        v111 = v3;
        v46 = *v112;
        v47 = (char *)v31 - (char *)*v112;
        v48 = v47 >> 3;
        v49 = (v47 >> 3) + 1;
        if (v49 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v50 = v32 - (_QWORD)v46;
        if (v50 >> 2 > v49)
          v49 = v50 >> 2;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v52 = v125;
          v53 = v51;
          v54 = operator new(8 * v51);
          v51 = v53;
          v48 = v47 >> 3;
          v55 = (uint64_t *)&v54[8 * (v47 >> 3)];
          *v55 = v30 | (v52 << 32);
          v33 = (uint64_t)(v55 + 1);
          if (v31 == v46)
          {
LABEL_89:
            v9 = v121;
            *((_QWORD *)this + 1280) = v55;
            *((_QWORD *)this + 1281) = v33;
            *((_QWORD *)this + 1282) = &v54[8 * v51];
            v8 = v110;
            v3 = v111;
            if (v31)
              goto LABEL_115;
            goto LABEL_116;
          }
        }
        else
        {
          v54 = 0;
          v55 = (uint64_t *)(8 * v48);
          *(_QWORD *)(8 * v48) = v128 | ((unint64_t)v125 << 32);
          v33 = 8 * v48 + 8;
          if (v31 == v46)
            goto LABEL_89;
        }
        v56 = (char *)(v31 - 1) - (char *)v46;
        v9 = v121;
        if (v56 < 0x58)
          goto LABEL_177;
        if ((unint64_t)((char *)v31 - &v54[v47]) < 0x20)
          goto LABEL_177;
        v64 = (v56 >> 3) + 1;
        v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
        v66 = &v31[v65 / 0xFFFFFFFFFFFFFFF8];
        v55 = (uint64_t *)((char *)v55 - v65);
        v67 = &v54[8 * v48 - 16];
        v68 = v31 - 2;
        v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v70 = *(_OWORD *)v68;
          *(v67 - 1) = *((_OWORD *)v68 - 1);
          *v67 = v70;
          v67 -= 2;
          v68 -= 4;
          v69 -= 4;
        }
        while (v69);
        v31 = v66;
        if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_177:
          do
          {
            v71 = *--v31;
            *--v55 = v71;
          }
          while (v31 != v46);
        }
        v31 = *v112;
        *((_QWORD *)this + 1280) = v55;
        *((_QWORD *)this + 1281) = v33;
        *((_QWORD *)this + 1282) = &v54[8 * v51];
        v8 = v110;
        v3 = v111;
        if (v31)
LABEL_115:
          operator delete(v31);
LABEL_116:
        *((_QWORD *)this + 1281) = v33;
        v6 = 1;
      }
    }
  }
  if (!v135)
    std::__throw_bad_function_call[abi:ne180100]();
  ((void (*)(uint64_t (***)()))(*v135)[6])(v135);
  result = v135;
  if (v135 == &v133)
  {
    v78 = 4;
    result = &v133;
    return (uint64_t (***)())(*result)[v78]();
  }
  else if (v135)
  {
    v78 = 5;
    return (uint64_t (***)())(*result)[v78]();
  }
  return result;
}

void sub_22DA10FB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::DisplayIterationInfo(operations_research::glop::RevisedSimplex *this)
{
  _BYTE *v2;
  double v3;
  double *v4;
  unint64_t v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int *v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v26;
  _BYTE v27[16];
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  if (*off_254079268[0] < 1
    || off_254079268[0] == &google::kLogSiteUninitialized
    && !google::InitVLOG3__((google *)off_254079268, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1))
  {
    return;
  }
  v2 = (char *)this + 15932;
  if (*((_BYTE *)this + 15932))
  {
    if (*((_BYTE *)this + 11644))
      v3 = operations_research::glop::ReducedCosts::ComputeSumOfDualInfeasibilities((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
    else
      v3 = operations_research::glop::VariableValues::ComputeSumOfPrimalInfeasibilities((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
    v15 = v3;
    v16 = off_254079270[0];
    if (*off_254079270[0] < 1)
      return;
  }
  else
  {
    v4 = (double *)*((_QWORD *)this + 27);
    v5 = *((_QWORD *)this + 28) - (_QWORD)v4;
    if ((int)(v5 >> 3) < 1)
    {
      v14 = 0.0;
    }
    else
    {
      v6 = (double *)*((_QWORD *)this + 743);
      v7 = (v5 >> 3);
      v8 = 0.0;
      v9 = 0.0;
      do
      {
        v10 = *v4++;
        v11 = v10;
        v12 = *v6++;
        v13 = v9 + v11 * v12;
        v14 = v8 + v13;
        v9 = v13 + v8 - (v8 + v13);
        v8 = v14;
        --v7;
      }
      while (v7);
    }
    v15 = *((double *)this + 31) * (v14 + *((double *)this + 30));
    v16 = off_254079270[0];
    if (*off_254079270[0] < 1)
      return;
  }
  if (v16 != &google::kLogSiteUninitialized
    || google::InitVLOG3__((google *)off_254079270, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v27, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2951);
    v17 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v27);
    if (*v2)
      v18 = "Feasibility";
    else
      v18 = "Optimization";
    if (*v2)
      v19 = 11;
    else
      v19 = 12;
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" phase, iteration # ", 20);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", objective = ", 14);
    *(double *)v28 = v15;
    v28[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    absl::lts_2020_02_25::str_format_internal::FormatPack("%.15E", 5, (uint64_t)v28, 1, (uint64_t)__p);
    if ((v26 & 0x80u) == 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    if ((v26 & 0x80u) == 0)
      v24 = v26;
    else
      v24 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    if ((char)v26 < 0)
      operator delete(__p[0]);
    google::LogMessage::~LogMessage((google::LogMessage *)v27);
  }
}

void sub_22DA112E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a15);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a15);
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::PermuteBasis(operations_research::glop::RevisedSimplex *this)
{
  uint64_t *v2;

  if (*((_QWORD *)this + 360) != *((_QWORD *)this + 361))
  {
    v2 = (uint64_t *)((char *)this + 2880);
    operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((uint64_t *)this + 360, (std::vector<int> *)((char *)this + 520));
    if (*((_QWORD *)this + 45) != *((_QWORD *)this + 46))
      operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>(v2, (char **)this + 45);
    operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation((uint64_t)this + 8720);
    operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation((uint64_t)this + 6288, v2);
    *((_QWORD *)this + 361) = *((_QWORD *)this + 360);
    *((_QWORD *)this + 364) = *((_QWORD *)this + 363);
  }
}

void operations_research::glop::RevisedSimplex::MakeBoxedVariableDualFeasible<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(double *a1, uint64_t a2, char a3)
{
  double v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v18;
  int v19;
  int v20;
  double v21;
  int v22;
  int *v25;
  int *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  int *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _OWORD *v43;
  int *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _OWORD *v52;
  int *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int *v64;
  double *v65;
  char v66;
  _QWORD *v68;
  _QWORD *StatusRow;
  _QWORD *ReducedCosts;
  void *__p;
  int *v72;
  int *v73;

  __p = 0;
  v72 = 0;
  v73 = 0;
  ReducedCosts = (_QWORD *)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::ReducedCosts *)(a1 + 1090));
  v5 = a1[1193];
  v68 = a1 + 685;
  StatusRow = (_QWORD *)operations_research::glop::VariablesInfo::GetStatusRow((operations_research::glop::VariablesInfo *)(a1 + 685));
  v6 = *(unint64_t **)(a2 + 8);
  v7 = *(unint64_t **)(a2 + 16);
  v66 = a3;
  v65 = a1;
  if (v6 == v7)
    goto LABEL_14;
  v8 = *v6;
  if (*v6)
  {
    v9 = 0;
    goto LABEL_17;
  }
  v10 = 0;
  v11 = (char *)v7 - (char *)v6;
  v12 = v11 >> 3;
  v13 = (int)((uint64_t)v11 >> 3);
  if ((int)(v11 >> 3) <= 1)
    v14 = 1;
  else
    v14 = v11 >> 3;
  if (v13 <= 1)
    v13 = 1;
  v15 = v13 - 1;
  while (v15 != v10)
  {
    v16 = v10 + 1;
    if (v6[++v10])
    {
      v14 = v16;
      break;
    }
  }
  if (v14 == (_DWORD)v12)
  {
LABEL_14:
    v18 = 0;
    v9 = 0;
    v19 = -1;
    v20 = *(_DWORD *)(a2 + 40);
    if (v20 != -1)
      goto LABEL_21;
    goto LABEL_81;
  }
  v8 = v6[v14];
  v9 = v14 << 6;
LABEL_17:
  v19 = __clz(__rbit64(v8)) & 0x3F | v9;
  v18 = (v8 - 1) & v8;
  v20 = *(_DWORD *)(a2 + 40);
  if (v19 != v20)
  {
LABEL_21:
    while (1)
    {
      v21 = *(double *)(*ReducedCosts + 8 * v19);
      v22 = *(unsigned __int8 *)(*StatusRow + v19);
      if (v21 > v5 && v22 == 3)
        break;
      if (v21 < -v5 && v22 == 2)
      {
        operations_research::glop::VariablesInfo::Update(v68, v19, 3);
        v25 = v72;
        if (v72 >= v73)
        {
          v26 = (int *)__p;
          v27 = (char *)v72 - (_BYTE *)__p;
          v28 = ((char *)v72 - (_BYTE *)__p) >> 2;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
            goto LABEL_86;
          v30 = (char *)v73 - (_BYTE *)__p;
          if (((char *)v73 - (_BYTE *)__p) >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 >> 62)
              goto LABEL_87;
            v32 = operator new(4 * v31);
            v33 = (int *)&v32[4 * v28];
            *v33 = v19;
            v34 = (uint64_t)(v33 + 1);
            if (v25 == v26)
              goto LABEL_68;
          }
          else
          {
            v32 = 0;
            v33 = (int *)(4 * v28);
            *(_DWORD *)(4 * v28) = v19;
            v34 = 4 * v28 + 4;
            if (v25 == v26)
              goto LABEL_68;
          }
          v48 = (char *)(v25 - 1) - (char *)v26;
          if (v48 < 0x2C)
            goto LABEL_90;
          if ((unint64_t)((char *)v25 - &v32[v27]) < 0x20)
            goto LABEL_90;
          v49 = (v48 >> 2) + 1;
          v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
          v51 = &v25[v50 / 0xFFFFFFFFFFFFFFFCLL];
          v33 = (int *)((char *)v33 - v50);
          v52 = &v32[4 * v28 - 16];
          v53 = v25 - 4;
          v54 = v49 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v55 = *(_OWORD *)v53;
            *(v52 - 1) = *((_OWORD *)v53 - 1);
            *v52 = v55;
            v52 -= 2;
            v53 -= 8;
            v54 -= 8;
          }
          while (v54);
          v25 = v51;
          if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_90:
            do
            {
              v56 = *--v25;
              *--v33 = v56;
            }
            while (v25 != v26);
          }
          goto LABEL_68;
        }
LABEL_42:
        *v25 = v19;
        v34 = (uint64_t)(v25 + 1);
LABEL_70:
        v72 = (int *)v34;
      }
      if (v18)
        goto LABEL_20;
      v57 = *(_QWORD *)(a2 + 8);
      v58 = *(_QWORD *)(a2 + 16) - v57;
      v59 = (unint64_t)v58 >> 3;
      v60 = (int)(v58 >> 3);
      if ((v9 >> 6) + 1 > (int)v59)
        v61 = (v9 >> 6) + 1;
      else
        v61 = v59;
      v62 = ((uint64_t)v9 >> 6) + 1;
      while (v62 < v60)
      {
        if (*(_QWORD *)(v57 + 8 * v62++))
        {
          v61 = v62 - 1;
          break;
        }
      }
      if (v61 == (_DWORD)v59)
      {
        v18 = 0;
        v19 = -1;
        if (v20 == -1)
          goto LABEL_81;
      }
      else
      {
        v18 = *(_QWORD *)(v57 + 8 * v61);
        v9 = v61 << 6;
LABEL_20:
        v19 = (__clz(__rbit64(v18)) & 0x3F) + v9;
        v18 &= v18 - 1;
        if (v19 == v20)
          goto LABEL_81;
      }
    }
    operations_research::glop::VariablesInfo::Update(v68, v19, 2);
    v25 = v72;
    if (v72 < v73)
      goto LABEL_42;
    v26 = (int *)__p;
    v35 = (char *)v72 - (_BYTE *)__p;
    v36 = ((char *)v72 - (_BYTE *)__p) >> 2;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62)
LABEL_86:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v38 = (char *)v73 - (_BYTE *)__p;
    if (((char *)v73 - (_BYTE *)__p) >> 1 > v37)
      v37 = v38 >> 1;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
      v31 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v31 = v37;
    if (v31)
    {
      if (v31 >> 62)
LABEL_87:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v32 = operator new(4 * v31);
      v33 = (int *)&v32[4 * v36];
      *v33 = v19;
      v34 = (uint64_t)(v33 + 1);
      if (v25 == v26)
      {
LABEL_68:
        __p = v33;
        v73 = (int *)&v32[4 * v31];
        if (v26)
          operator delete(v26);
        goto LABEL_70;
      }
    }
    else
    {
      v32 = 0;
      v33 = (int *)(4 * v36);
      *(_DWORD *)(4 * v36) = v19;
      v34 = 4 * v36 + 4;
      if (v25 == v26)
        goto LABEL_68;
    }
    v39 = (char *)(v25 - 1) - (char *)v26;
    if (v39 < 0x2C)
      goto LABEL_91;
    if ((unint64_t)((char *)v25 - &v32[v35]) < 0x20)
      goto LABEL_91;
    v40 = (v39 >> 2) + 1;
    v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    v42 = &v25[v41 / 0xFFFFFFFFFFFFFFFCLL];
    v33 = (int *)((char *)v33 - v41);
    v43 = &v32[4 * v36 - 16];
    v44 = v25 - 4;
    v45 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 8;
      v45 -= 8;
    }
    while (v45);
    v25 = v42;
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_91:
      do
      {
        v47 = *--v25;
        *--v33 = v47;
      }
      while (v25 != v26);
    }
    goto LABEL_68;
  }
LABEL_81:
  v64 = (int *)__p;
  if (__p != v72)
  {
    operations_research::glop::VariableValues::UpdateGivenNonBasicVariables((uint64_t)(v65 + 738), (int **)&__p, v66);
    v64 = (int *)__p;
  }
  if (v64)
  {
    v72 = v64;
    operator delete(v64);
  }
}

void sub_22DA1185C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::Minimize(operations_research::glop::RevisedSimplex *this@<X0>, operations_research::TimeLimit *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  google::LogMessage *v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  int *v38;
  int *v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double *v50;
  unint64_t v51;
  double *v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  _QWORD *ReducedCosts;
  absl::lts_2020_02_25 *v62;
  double v63;
  double v64;
  unsigned __int8 *v65;
  unsigned __int8 v66;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68;
  uint64_t v69;
  absl::lts_2020_02_25 *v70;
  double v71;
  double v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  BOOL v81;
  BOOL v82;
  double v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  char v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t (***v94)();
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  float64x2_t *v99;
  int *v100;
  double *v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  float64x2_t *v109;
  unint64_t v110;
  float64x2_t v111;
  unint64_t v112;
  double *v113;
  uint64_t v115;
  operations_research::IntegerDistribution *v116;
  operations_research::glop::UpdateRow *v117;
  operations_research::glop::VariableValues *v118;
  _BYTE *v119;
  double v120;
  int v121;
  double v122;
  int v123;
  double v124;
  uint64_t v125[2];
  BOOL v126;
  std::string v127;
  uint64_t (**v128)();
  __int128 v129;
  uint64_t (***v130)();
  uint64_t (**v131)();
  __int128 v132;
  uint64_t (***v133)();
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v11 = (char *)operator new(0x20uLL);
    strcpy(v11, "time_limit must not be null.");
    v12 = google::LogMessage::LogMessage((google::LogMessage *)&v131, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2353, 2);
    v13 = (_QWORD *)google::LogMessage::stream(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v11, 28);
    google::LogMessage::~LogMessage((google::LogMessage *)&v131);
    std::string::__init_copy_ctor_external(&v127, v11, 0x1CuLL);
    operations_research::glop::Status::Status(a3, 3, (__int128 *)&v127);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    operator delete(v11);
    return;
  }
  v128 = &off_24F980170;
  *(_QWORD *)&v129 = this;
  *((_QWORD *)&v129 + 1) = a2;
  v130 = &v128;
  v133 = &v131;
  v131 = &off_24F980170;
  v132 = v129;
  *((_DWORD *)this + 3982) = 0;
  operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
  v6 = (char *)this + 15932;
  v126 = 0;
  if (*((_BYTE *)this + 15932))
  {
    v7 = (char *)*((_QWORD *)this + 27);
    v8 = *((_QWORD *)this + 28);
    v9 = *(int *)((char *)this + 5);
    v125[0] = 0;
    v10 = (v8 - (uint64_t)v7) >> 3;
    if (v9 <= v10)
    {
      if (v9 < v10)
        *((_QWORD *)this + 28) = &v7[8 * v9];
    }
    else
    {
      std::vector<double>::__append((uint64_t)this + 216, v9 - v10, v125);
      v7 = (char *)*((_QWORD *)this + 27);
    }
    bzero(v7, 8 * (int)v9);
    v14 = *(unsigned int *)((char *)this + 1);
    if ((int)v14 >= 1)
    {
      v15 = *(double *)(*((_QWORD *)this + 738) + 72);
      v16 = (int *)**((_QWORD **)this + 740);
      v17 = *((_QWORD *)this + 743);
      v18 = *((_QWORD *)this + 741);
      v19 = **(_QWORD **)(v18 + 16);
      v20 = *((_QWORD *)this + 27);
      do
      {
        v22 = *v16++;
        v21 = v22;
        v23 = *(double *)(v17 + 8 * v22);
        v24 = 1.0;
        if (v23 - *(double *)(v19 + 8 * v22) <= v15)
        {
          v24 = 0.0;
          if (*(double *)(**(_QWORD **)(v18 + 8) + 8 * v21) - v23 > v15)
            v24 = -1.0;
        }
        if (v24 != *(double *)(v20 + 8 * v21))
          *(double *)(v20 + 8 * v21) = v24;
        --v14;
      }
      while (v14);
    }
    operations_research::glop::ReducedCosts::ResetForNewObjective((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
  }
  v119 = (char *)this + 9388;
  v118 = (operations_research::glop::RevisedSimplex *)((char *)this + 5904);
  v117 = (operations_research::glop::RevisedSimplex *)((char *)this + 7840);
  v116 = (operations_research::glop::RevisedSimplex *)((char *)this + 10816);
  while (1)
  {
    operations_research::glop::RevisedSimplex::RefactorizeBasisIfNeeded(this, &v126, a3);
    if (*(_DWORD *)a3)
      break;
    if (*(char *)(a3 + 31) < 0)
      operator delete(*(void **)(a3 + 8));
    if (operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::RevisedSimplex *)((char *)this + 840)))
    {
      operations_research::glop::RevisedSimplex::CorrectErrorsOnVariableValues(this);
      operations_research::glop::RevisedSimplex::DisplayIterationInfo(this);
      if (!*v6)
        goto LABEL_51;
      v25 = *(unsigned int *)((char *)this + 1);
      if ((int)v25 >= 1)
      {
        v26 = 0;
        v27 = 0;
        v28 = *(double *)(*((_QWORD *)this + 738) + 72);
        v29 = **((_QWORD **)this + 740);
        v30 = *((_QWORD *)this + 743);
        v31 = *((_QWORD *)this + 741);
        v32 = **(_QWORD **)(v31 + 16);
        v33 = *((_QWORD *)this + 27);
        do
        {
          while (1)
          {
            v34 = *(int *)(v29 + 4 * v26);
            v35 = *(double *)(v30 + 8 * v34);
            v36 = 1.0;
            if (v35 - *(double *)(v32 + 8 * v34) <= v28)
            {
              v36 = 0.0;
              if (*(double *)(**(_QWORD **)(v31 + 8) + 8 * v34) - v35 > v28)
                v36 = -1.0;
            }
            if (v36 == *(double *)(v33 + 8 * v34))
              break;
            *(double *)(v33 + 8 * v34) = v36;
            v27 = 1;
            if (v25 - 1 == v26++)
              goto LABEL_50;
          }
          ++v26;
        }
        while (v25 != v26);
        if ((v27 & 1) == 0)
          goto LABEL_57;
LABEL_50:
        operations_research::glop::ReducedCosts::ResetForNewObjective((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
        if (!*v6)
        {
LABEL_51:
          v50 = (double *)*((_QWORD *)this + 27);
          v51 = *((_QWORD *)this + 28) - (_QWORD)v50;
          if ((int)(v51 >> 3) < 1)
          {
            if (*((double *)this + 22) > 0.0)
              goto LABEL_144;
          }
          else
          {
            v52 = (double *)*((_QWORD *)this + 743);
            v53 = (v51 >> 3);
            v54 = 0.0;
            v55 = 0.0;
            do
            {
              v56 = *v50++;
              v57 = v56;
              v58 = *v52++;
              v59 = v55 + v57 * v58;
              v60 = v54 + v59;
              v55 = v59 + v54 - (v54 + v59);
              v54 = v60;
              --v53;
            }
            while (v53);
            if (v60 < *((double *)this + 22))
            {
LABEL_144:
              if (*off_2540791F8[0] >= 1
                && (off_2540791F8[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_2540791F8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
              {
                google::LogMessage::LogMessage((google::LogMessage *)v125, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2393);
                v89 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v125);
                v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Stopping the primal simplex because", 35);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)" the objective limit ", 21);
                v91 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" has been reached.", 18);
                google::LogMessage::~LogMessage((google::LogMessage *)v125);
              }
              *(_BYTE *)this = 7;
              *((_BYTE *)this + 15933) = 1;
LABEL_157:
              operations_research::glop::Status::Status(a3);
              break;
            }
          }
        }
      }
    }
    else if (*v6)
    {
      v38 = (int *)*((_QWORD *)this + 95);
      v39 = (int *)*((_QWORD *)this + 96);
      if (v38 != v39)
      {
        v40 = 0;
        v41 = *(double *)(*((_QWORD *)this + 738) + 72);
        v42 = **((_QWORD **)this + 740);
        v43 = *((_QWORD *)this + 743);
        v44 = *((_QWORD *)this + 741);
        v45 = **(_QWORD **)(v44 + 16);
        v46 = *((_QWORD *)this + 27);
        do
        {
          while (1)
          {
            v47 = *(int *)(v42 + 4 * *v38);
            v48 = *(double *)(v43 + 8 * v47);
            v49 = 1.0;
            if (v48 - *(double *)(v45 + 8 * v47) <= v41)
            {
              v49 = 0.0;
              if (*(double *)(**(_QWORD **)(v44 + 8) + 8 * v47) - v48 > v41)
                v49 = -1.0;
            }
            if (v49 == *(double *)(v46 + 8 * v47))
              break;
            *(double *)(v46 + 8 * v47) = v49;
            ++v38;
            v40 = 1;
            if (v38 == v39)
              goto LABEL_48;
          }
          ++v38;
        }
        while (v38 != v39);
        if ((v40 & 1) == 0)
          goto LABEL_57;
LABEL_48:
        operations_research::glop::ReducedCosts::ResetForNewObjective((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      }
    }
LABEL_57:
    v124 = 0.0;
    v123 = -1;
    operations_research::glop::EnteringVariable::PrimalChooseEnteringColumn((operations_research::glop::RevisedSimplex *)((char *)this + 9616), &v123, a3);
    if (*(_DWORD *)a3)
      break;
    if (*(char *)(a3 + 31) < 0)
    {
      operator delete(*(void **)(a3 + 8));
      if (v123 != -1)
        goto LABEL_60;
LABEL_75:
      if (*v119
        && operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::RevisedSimplex *)((char *)this + 840)))
      {
        v88 = *v6;
        if (*v6)
        {
          if (operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility(v118) >= *((double *)this + 1461))
          {
            if (*off_254079200[0] >= 1
              && (off_254079200[0] != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)off_254079200, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
            {
              google::LogMessage::LogMessage((google::LogMessage *)v125, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2423);
              v92 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v125);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Infeasible problem! infeasibility = ", 36);
              std::ostream::operator<<();
              google::LogMessage::~LogMessage((google::LogMessage *)v125);
            }
            v88 = 1;
          }
          else
          {
            v88 = 7;
          }
        }
LABEL_154:
        *(_BYTE *)this = v88;
        goto LABEL_155;
      }
      if (*off_254079208[0] >= 1
        && (off_254079208[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079208, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v125, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2432);
        v73 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v125);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Optimal reached, double checking...", 35);
        google::LogMessage::~LogMessage((google::LogMessage *)v125);
      }
      operations_research::glop::ReducedCosts::MakeReducedCostsPrecise((uint64_t)this + 8720);
      v126 = 1;
    }
    else
    {
      if (v123 == -1)
        goto LABEL_75;
LABEL_60:
      ReducedCosts = (_QWORD *)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      v124 = *(double *)(*ReducedCosts + 8 * v123);
      operations_research::glop::RevisedSimplex::ComputeDirection((uint64_t)this, v123);
      operations_research::glop::PrimalEdgeNorms::TestEnteringEdgeNormPrecision((uint64_t)this + 6944, (const operations_research::glop::ScatteredColumn *)v123, (operations_research::glop::RevisedSimplex *)((char *)this + 728));
      if ((operations_research::glop::ReducedCosts::TestEnteringReducedCostPrecision((operations_research::glop::VariablesInfo **)this + 1090, v123, (double **)this + 91, &v124) & 1) != 0)
      {
        v63 = operations_research::glop::BasisFactorization::DeterministicTime((operations_research::glop::RevisedSimplex *)((char *)this + 840))
            + (double)*((uint64_t *)this + 1012) * 0.000000002
            + (double)*((uint64_t *)this + 979) * 0.000000002;
        v64 = *((double *)a2 + 14) + v63 - *((double *)this + 1289);
        *((double *)a2 + 14) = v64;
        *((double *)this + 1289) = v63;
        if (*((_QWORD *)this + 1283) == *((_QWORD *)this + 1473))
          goto LABEL_155;
        v65 = (unsigned __int8 *)*((_QWORD *)a2 + 15);
        if (v65)
        {
          v66 = atomic_load(v65);
          if ((v66 & 1) != 0)
            goto LABEL_155;
          v64 = *((double *)a2 + 14);
        }
        if (fmax(*((double *)a2 + 13) - v64, 0.0) <= 0.0)
          goto LABEL_155;
        CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v62);
        v68 = CurrentTimeNanos;
        if (*((_QWORD *)a2 + 3) <= CurrentTimeNanos - *((_QWORD *)a2 + 1))
          v69 = CurrentTimeNanos - *((_QWORD *)a2 + 1);
        else
          v69 = *((_QWORD *)a2 + 3);
        operations_research::RunningMax<long long>::Add((int *)a2 + 8, v69);
        *((_QWORD *)a2 + 1) = v68;
        if (*(_QWORD *)(*((_QWORD *)a2 + 5) + 8 * *((int *)a2 + 17)) + v68 >= *((_QWORD *)a2 + 2))
        {
          if (!FLAGS_time_limit_use_usertime)
            goto LABEL_140;
          v71 = *((double *)a2 + 12);
          if (*((_BYTE *)a2 + 72))
          {
            v72 = v71
                + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v70) - *((_QWORD *)a2 + 10) + *((_QWORD *)a2 + 11))
                * -0.000000001;
            if (v72 <= 0.0001)
              goto LABEL_140;
          }
          else
          {
            v72 = v71 + (double)*((uint64_t *)a2 + 11) * -0.000000001;
            if (v72 <= 0.0001)
            {
LABEL_140:
              *((_QWORD *)a2 + 2) = 0;
              goto LABEL_155;
            }
          }
          *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 1) + (uint64_t)(v72 * 1000000000.0);
        }
        v122 = 0.0;
        v121 = 0;
        v120 = 0.0;
        if (*v6)
        {
          operations_research::glop::RevisedSimplex::PrimalPhaseIChooseLeavingVariableRow((uint64_t)this, v123, &v126, &v121, &v122, &v120, v124);
LABEL_92:
          if (!v126)
          {
LABEL_93:
            if (fabs(v122) == INFINITY)
            {
              if (operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::RevisedSimplex *)((char *)this + 840))
                && *v119)
              {
                if (*v6)
                {
                  if (*off_254079220[0] >= 1
                    && (off_254079220[0] != &google::kLogSiteUninitialized
                     || google::InitVLOG3__((google *)off_254079220, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
                  {
                    google::LogMessage::LogMessage((google::LogMessage *)v125, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2486);
                    v96 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v125);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"Unbounded feasibility problem !?", 32);
                    google::LogMessage::~LogMessage((google::LogMessage *)v125);
                  }
                  v88 = 9;
                  goto LABEL_154;
                }
                if (*off_254079228[0] >= 1
                  && (off_254079228[0] != &google::kLogSiteUninitialized
                   || google::InitVLOG3__((google *)off_254079228, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
                {
                  google::LogMessage::LogMessage((google::LogMessage *)v125, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2489);
                  v97 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v125);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Unbounded problem.", 18);
                  google::LogMessage::~LogMessage((google::LogMessage *)v125);
                }
                *(_BYTE *)this = 4;
                operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double>::AssignToZero((char **)this + 78, *(unsigned int *)((char *)this + 5));
                v98 = *(unsigned int *)((char *)this + 1);
                v99 = (float64x2_t *)*((_QWORD *)this + 78);
                if ((int)v98 >= 1)
                {
                  v100 = (int *)*((_QWORD *)this + 65);
                  v101 = (double *)*((_QWORD *)this + 91);
                  do
                  {
                    v103 = *v100++;
                    v102 = v103;
                    v104 = *v101++;
                    v99->f64[v102] = -v104;
                    --v98;
                  }
                  while (v98);
                }
                v99->f64[v123] = 1.0;
                if (v122 == -INFINITY)
                {
                  v105 = *((_QWORD *)this + 79) - (_QWORD)v99;
                  if ((int)(v105 >> 3) >= 1)
                  {
                    v106 = (v105 >> 3);
                    if (v106 >= 4)
                    {
                      v108 = (v105 >> 3) & 3;
                      v107 = v106 - v108;
                      v109 = v99 + 1;
                      v110 = v106 - v108;
                      do
                      {
                        v111 = vnegq_f64(*v109);
                        v109[-1] = vnegq_f64(v109[-1]);
                        *v109 = v111;
                        v109 += 2;
                        v110 -= 4;
                      }
                      while (v110);
                      if (!v108)
                        goto LABEL_155;
                    }
                    else
                    {
                      v107 = 0;
                    }
                    v112 = v107 - v106;
                    v113 = &v99->f64[v107];
                    do
                    {
                      *v113 = -*v113;
                      ++v113;
                    }
                    while (!__CFADD__(v112++, 1));
                  }
                }
LABEL_155:
                v93 = *((unsigned int *)this + 3982);
                if ((int)v93 >= 1)
                  operations_research::IntegerDistribution::Add((uint64_t)v116, v93);
                goto LABEL_157;
              }
              if (*off_254079218[0] >= 1
                && (off_254079218[0] != &google::kLogSiteUninitialized
                 || google::InitVLOG3__((google *)off_254079218, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
              {
                google::LogMessage::LogMessage((google::LogMessage *)v125, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2480);
                v76 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v125);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Infinite step length, double checking...", 40);
                google::LogMessage::~LogMessage((google::LogMessage *)v125);
              }
              operations_research::glop::ReducedCosts::MakeReducedCostsPrecise((uint64_t)this + 8720);
            }
            else
            {
              if (v124 <= 0.0)
                v77 = v122;
              else
                v77 = -v122;
              if (*v6)
              {
                if (v121 == -1)
                  goto LABEL_117;
                v115 = *(int *)(*((_QWORD *)this + 65) + 4 * v121);
                v78 = *(double *)(*((_QWORD *)this + 743) + 8 * v115) - v120;
                v79 = *(double *)(*((_QWORD *)this + 91) + 8 * v121);
                v77 = v78 / v79;
                v80 = -(v79 * (v78 / v79));
                v81 = v80 <= 0.0;
                if (v80 == 0.0)
                  goto LABEL_116;
              }
              else
              {
                if (v121 == -1)
                {
LABEL_117:
                  v82 = 0;
                  LODWORD(v115) = -1;
                  goto LABEL_118;
                }
                LODWORD(v115) = *(_DWORD *)(*((_QWORD *)this + 65) + 4 * v121);
                v80 = -(*(double *)(*((_QWORD *)this + 91) + 8 * v121) * v77);
                v81 = v80 <= 0.0;
                if (v80 == 0.0)
                  goto LABEL_116;
              }
              if (!v81 && *(double *)(*((_QWORD *)this + 743) + 8 * (int)v115) >= v120)
              {
LABEL_116:
                v82 = 1;
                goto LABEL_118;
              }
              v82 = v80 < 0.0 && *(double *)(*((_QWORD *)this + 743) + 8 * (int)v115) <= v120;
LABEL_118:
              operations_research::glop::VariableValues::UpdateOnPivoting((uint64_t)v118, (uint64_t *)this + 91, v123, v77);
              if (v121 == -1)
              {
                if (v77 > 0.0)
                {
                  v84 = 3;
                  goto LABEL_128;
                }
                if (v77 < 0.0)
                {
                  v84 = 2;
LABEL_128:
                  v85 = v123;
                  operations_research::glop::VariablesInfo::UpdateToNonBasicStatus((uint64_t)this + 5480, v123, v84);
                  operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus(v118, v85);
                }
                operations_research::glop::ReducedCosts::SetAndDebugCheckThatColumnIsDualFeasible((uint64_t)this + 8720, v123);
                goto LABEL_130;
              }
              operations_research::glop::PrimalEdgeNorms::UpdateBeforeBasisPivot((uint64_t)this + 6944, v123, *(_DWORD *)(*((_QWORD *)this + 65) + 4 * v121), v121, (char **)this + 91, (uint64_t)v117);
              operations_research::glop::ReducedCosts::UpdateBeforeBasisPivot((uint64_t)this + 8720, v123, v121, (_QWORD *)this + 91, v117);
              v83 = v120;
              if (!v82)
                *(double *)(*((_QWORD *)this + 743) + 8 * (int)v115) = v120;
              operations_research::glop::RevisedSimplex::UpdateAndPivot((uint64_t)this, v123, v121, a3, v83);
              if (*(_DWORD *)a3)
                break;
              if (*(char *)(a3 + 31) < 0)
                operator delete(*(void **)(a3 + 8));
LABEL_130:
              if (*v6 && v121 != -1)
              {
                operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus(v118, v115);
                operations_research::glop::ReducedCosts::SetNonBasicVariableCostToZero((uint64_t)this + 8720, v115, (_QWORD *)(*((_QWORD *)this + 27) + 8 * (int)v115));
              }
              v86 = *((unsigned int *)this + 3982);
              if (v122 == 0.0)
              {
                v87 = v86 + 1;
              }
              else
              {
                if ((int)v86 < 1)
                  goto LABEL_138;
                operations_research::IntegerDistribution::Add((uint64_t)v116, v86);
                v87 = 0;
              }
              *((_DWORD *)this + 3982) = v87;
LABEL_138:
              ++*((_QWORD *)this + 1283);
            }
          }
        }
        else
        {
          operations_research::glop::RevisedSimplex::ChooseLeavingVariableRow((uint64_t)this, v123, &v126, &v121, &v122, &v120, a3, v124);
          if (*(_DWORD *)a3)
            break;
          if ((*(char *)(a3 + 31) & 0x80000000) == 0)
            goto LABEL_92;
          operator delete(*(void **)(a3 + 8));
          if (!v126)
            goto LABEL_93;
        }
      }
      else if (*off_254079210[0] >= 1
             && (off_254079210[0] != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_254079210, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v125, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2447);
        v74 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v125);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Skipping col #", 14);
        v75 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" whose reduced cost is ", 23);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v125);
      }
    }
  }
  if (!v133)
    std::__throw_bad_function_call[abi:ne180100]();
  ((void (*)(uint64_t (***)()))(*v133)[6])(v133);
  v94 = v133;
  if (v133 == &v131)
  {
    v95 = 4;
    v94 = &v131;
LABEL_163:
    (*v94)[v95]();
  }
  else if (v133)
  {
    v95 = 5;
    goto LABEL_163;
  }
}

void sub_22DA12808(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_22DA1281C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_22DA12830(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_22DA12844(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_22DA12858(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_22DA1286C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  google::LogMessage::~LogMessage((google::LogMessage *)&a23);
  _Unwind_Resume(a1);
}

void sub_22DA12A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_22DA12A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::RevisedSimplex::InitializeObjectiveAndTestIfUnchanged(operations_research::glop::RevisedSimplex *this, const operations_research::glop::LinearProgram *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned int v16;
  char *v17;
  unint64_t *v18;
  uint64_t v19;
  double *v20;
  double *v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  int8x16_t v30;
  unint64_t v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  int8x16_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x8_t v54;
  float64x2_t *v55;
  float64x2_t *v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  uint64_t v67;

  v4 = *((_QWORD *)this + 27);
  v5 = *((_QWORD *)this + 28);
  v6 = (unint64_t *)((char *)this + 216);
  v7 = *(int *)((char *)this + 5);
  v67 = 0;
  v8 = (v5 - v4) >> 3;
  if (v7 <= v8)
  {
    if (v7 < v8)
      *((_QWORD *)this + 28) = v4 + 8 * v7;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 216, v7 - v8, &v67);
  }
  v9 = (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4;
  v10 = -1431655765 * v9;
  if (!*((_BYTE *)a2 + 440))
  {
    if (-1431655765 * (int)v9 < 1)
    {
      v19 = 1;
    }
    else
    {
      v18 = (unint64_t *)((char *)a2 + 136);
      v17 = (char *)*((_QWORD *)a2 + 17);
      if (*(double *)*v6 == *(double *)v17)
      {
        v27 = 1;
        do
        {
          if (-1431655765 * (_DWORD)v9 == v27)
          {
            v19 = v27 >= (int)v10;
            goto LABEL_42;
          }
          v28 = *(double *)(*v6 + 8 * v27);
          v29 = *(double *)&v17[8 * v27++];
        }
        while (v28 == v29);
        v19 = v27 - 1 >= (int)v10;
        if (v6 == v18)
          goto LABEL_42;
      }
      else
      {
        v19 = 0;
        if (v6 == v18)
          goto LABEL_42;
      }
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v6, v17, *((char **)a2 + 18), (uint64_t)(*((_QWORD *)a2 + 18) - (_QWORD)v17) >> 3);
    }
LABEL_42:
    v26 = *((double *)a2 + 54);
    *((_QWORD *)this + 30) = *((_QWORD *)a2 + 53);
    goto LABEL_43;
  }
  if (-1431655765 * (int)v9 < 1)
  {
    v19 = 1;
    goto LABEL_26;
  }
  v11 = *((_QWORD *)a2 + 17);
  v12 = *v6;
  v13 = (-1431655765 * v9);
  if (v10 < 8uLL || (v12 < v11 + 8 * v13 ? (v14 = v11 >= v12 + 8 * v13) : (v14 = 1), !v14))
  {
    v15 = 0;
    LOBYTE(v16) = 1;
    goto LABEL_20;
  }
  if (v13 >= 0x10)
  {
    v15 = v13 - (v10 & 0xF);
    v30.i64[0] = 0x101010101010101;
    v30.i64[1] = 0x101010101010101;
    v31 = v15;
    v32 = (float64x2_t *)*v6;
    v33 = (float64x2_t *)*((_QWORD *)a2 + 17);
    do
    {
      v35 = v33[6];
      v34 = v33[7];
      v37 = v33[4];
      v36 = v33[5];
      v39 = v33[2];
      v38 = v33[3];
      v41 = *v33;
      v40 = v33[1];
      v33 += 8;
      v42 = vnegq_f64(v41);
      v43 = vnegq_f64(v40);
      v44 = vnegq_f64(v39);
      v45 = vnegq_f64(v38);
      v46 = vnegq_f64(v37);
      v47 = vnegq_f64(v36);
      v48 = vnegq_f64(v35);
      v49 = vnegq_f64(v34);
      v30 = vbicq_s8(v30, vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v32, v42), (int32x4_t)vceqq_f64(v32[1], v43)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v32[2], v44), (int32x4_t)vceqq_f64(v32[3], v45)))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v32[4], v46), (int32x4_t)vceqq_f64(v32[5], v47)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v32[6], v48), (int32x4_t)vceqq_f64(v32[7], v49))))));
      v32[6] = v48;
      v32[7] = v49;
      v32[4] = v46;
      v32[5] = v47;
      v32[2] = v44;
      v32[3] = v45;
      *v32 = v42;
      v32[1] = v43;
      v32 += 8;
      v31 -= 16;
    }
    while (v31);
    v50.i64[0] = 0x101010101010101;
    v50.i64[1] = 0x101010101010101;
    v16 = (vmaxvq_u8((uint8x16_t)vmvnq_s8(vceqq_s8(v30, v50))) & 1) == 0;
    if ((v10 & 0xF) == 0)
      goto LABEL_24;
    if ((v10 & 0xF) < 8uLL)
    {
LABEL_20:
      v20 = (double *)(v12 + 8 * v15);
      v21 = (double *)(v11 + 8 * v15);
      v22 = v13 - v15;
      do
      {
        v23 = *v21++;
        v24 = -v23;
        if (*v20 != -v23)
          LOBYTE(v16) = 0;
        *v20++ = v24;
        --v22;
      }
      while (v22);
      goto LABEL_24;
    }
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v51 = v10 & 7;
  v52 = 8 * v15;
  v53 = v15 + v51;
  v15 = v13 - v51;
  v54 = vdup_n_s8(v16);
  v55 = (float64x2_t *)(v11 + v52);
  v56 = (float64x2_t *)(v12 + v52);
  v57 = v53 - v13;
  do
  {
    v59 = v55[2];
    v58 = v55[3];
    v61 = *v55;
    v60 = v55[1];
    v55 += 4;
    v62 = vnegq_f64(v61);
    v63 = vnegq_f64(v60);
    v64 = vnegq_f64(v59);
    v65 = vnegq_f64(v58);
    v54 = vbic_s8(v54, vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v56, v62), (int32x4_t)vceqq_f64(v56[1], v63)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v56[2], v64), (int32x4_t)vceqq_f64(v56[3], v65))))));
    v56[2] = v64;
    v56[3] = v65;
    *v56 = v62;
    v56[1] = v63;
    v56 += 4;
    v57 += 8;
  }
  while (v57);
  LOBYTE(v16) = *(_QWORD *)&v54 == 0x101010101010101;
  if (v51)
    goto LABEL_20;
LABEL_24:
  v19 = v16 & 1;
LABEL_26:
  v25 = *((double *)a2 + 54);
  *((double *)this + 30) = -*((double *)a2 + 53);
  v26 = -v25;
LABEL_43:
  *((double *)this + 31) = v26;
  return v19;
}

void operations_research::glop::RevisedSimplex::DisplayErrors(operations_research::glop::RevisedSimplex *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _BYTE v6[16];

  if (*off_254079278[0] >= 1
    && (off_254079278[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079278, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    if (*off_254079280[0] >= 1
      && (off_254079280[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079280, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2959);
      v2 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Primal infeasibility (bounds) = ", 32);
      operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
    }
    if (*off_254079288[0] >= 1
      && (off_254079288[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079288, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2961);
      v3 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Primal residual |A.x - b| = ", 28);
      operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
    }
    if (*off_254079290[0] >= 1
      && (off_254079290[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079290, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2963);
      v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Dual infeasibility (reduced costs) = ", 37);
      operations_research::glop::ReducedCosts::ComputeMaximumDualInfeasibility((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
    }
    if (*off_254079298[0] >= 1
      && (off_254079298[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079298, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2965);
      v5 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Dual residual |c_B - y.B| = ", 28);
      operations_research::glop::ReducedCosts::ComputeMaximumDualResidual((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
    }
  }
}

void sub_22DA13060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DA13074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DA13088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DA1309C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::glop::RevisedSimplex::SaveState(operations_research::glop::RevisedSimplex *this)
{
  char **StatusRow;
  _QWORD *result;

  StatusRow = (char **)operations_research::glop::VariablesInfo::GetStatusRow((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
  result = (_QWORD *)((char *)this + 696);
  if ((char **)((char *)this + 696) != StatusRow)
    result = std::vector<operations_research::glop::VariableStatus>::__assign_with_size[abi:ne180100]<operations_research::glop::VariableStatus*,operations_research::glop::VariableStatus*>(result, *StatusRow, StatusRow[1], StatusRow[1] - *StatusRow);
  *((_BYTE *)this + 720) = 0;
  return result;
}

double operations_research::glop::RevisedSimplex::ComputeInitialProblemObjectiveValue(operations_research::glop::RevisedSimplex *this)
{
  double *v1;
  unint64_t v2;
  double *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = (double *)*((_QWORD *)this + 27);
  v2 = *((_QWORD *)this + 28) - (_QWORD)v1;
  if ((int)(v2 >> 3) < 1)
    return *((double *)this + 31) * (*((double *)this + 30) + 0.0);
  v3 = (double *)*((_QWORD *)this + 743);
  v4 = (v2 >> 3);
  v5 = 0.0;
  v6 = 0.0;
  do
  {
    v7 = *v1++;
    v8 = v7;
    v9 = *v3++;
    v10 = v6 + v8 * v9;
    v11 = v5 + v10;
    v6 = v10 + v5 - (v5 + v10);
    v5 = v11;
    --v4;
  }
  while (v4);
  return *((double *)this + 31) * (v11 + *((double *)this + 30));
}

void operations_research::glop::`anonymous namespace'::Cleanup::~Cleanup(operations_research::glop::_anonymous_namespace_::Cleanup *this)
{
  uint64_t v2;
  operations_research::glop::_anonymous_namespace_::Cleanup *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (operations_research::glop::_anonymous_namespace_::Cleanup *)*((_QWORD *)this + 3);
  if (v3 == this)
  {
    v4 = 4;
    v3 = this;
  }
  else
  {
    if (!v3)
      return;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
}

uint64_t operations_research::glop::RevisedSimplex::GetProblemStatus(operations_research::glop::RevisedSimplex *this)
{
  return *(char *)this;
}

double operations_research::glop::RevisedSimplex::GetObjectiveValue(operations_research::glop::RevisedSimplex *this)
{
  return *((double *)this + 71);
}

uint64_t operations_research::glop::RevisedSimplex::GetNumberOfIterations(operations_research::glop::RevisedSimplex *this)
{
  return *((_QWORD *)this + 1283);
}

uint64_t operations_research::glop::RevisedSimplex::GetProblemNumRows(operations_research::glop::RevisedSimplex *this)
{
  return *(unsigned int *)((char *)this + 1);
}

uint64_t operations_research::glop::RevisedSimplex::GetProblemNumCols(operations_research::glop::RevisedSimplex *this)
{
  return *(unsigned int *)((char *)this + 5);
}

double operations_research::glop::RevisedSimplex::GetVariableValue(uint64_t a1, int a2)
{
  return *(double *)(*(_QWORD *)(a1 + 5944) + 8 * a2);
}

double operations_research::glop::RevisedSimplex::GetReducedCost(uint64_t a1, int a2)
{
  return *(double *)(*(_QWORD *)(a1 + 600) + 8 * a2);
}

uint64_t operations_research::glop::RevisedSimplex::GetReducedCosts(operations_research::glop::RevisedSimplex *this)
{
  return (uint64_t)this + 600;
}

double operations_research::glop::RevisedSimplex::GetDualValue(uint64_t a1, int a2)
{
  return *(double *)(*(_QWORD *)(a1 + 576) + 8 * a2);
}

uint64_t operations_research::glop::RevisedSimplex::GetVariableStatus(uint64_t a1, int a2)
{
  return *(char *)(*(_QWORD *)operations_research::glop::VariablesInfo::GetStatusRow((operations_research::glop::VariablesInfo *)(a1 + 5480))
                               + a2);
}

uint64_t operations_research::glop::RevisedSimplex::GetState(operations_research::glop::RevisedSimplex *this)
{
  return (uint64_t)this + 696;
}

uint64_t operations_research::glop::RevisedSimplex::GetConstraintStatus(uint64_t a1, int a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)operations_research::glop::VariablesInfo::GetStatusRow((operations_research::glop::VariablesInfo *)(a1 + 5480))
                          + *(int *)(a1 + 9)
                          + (uint64_t)a2);
  if (v2 == 2)
    return 3;
  if (v2 == 3)
    return 2;
  return operations_research::glop::VariableToConstraintStatus((char)v2);
}

uint64_t operations_research::glop::RevisedSimplex::GetDualRay(operations_research::glop::RevisedSimplex *this)
{
  return (uint64_t)this + 648;
}

uint64_t operations_research::glop::RevisedSimplex::GetDualRayRowCombination(operations_research::glop::RevisedSimplex *this)
{
  return (uint64_t)this + 672;
}

uint64_t operations_research::glop::RevisedSimplex::GetBasis(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 520) + 4 * a2);
}

void operations_research::glop::RevisedSimplex::GetPrettySolverStats(operations_research::glop::RevisedSimplex *this@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v5;
  _QWORD v6[17];

  v6[16] = *MEMORY[0x24BDAC8D0];
  operations_research::glop::GetProblemStatusString(*(char *)this, (uint64_t)__p);
  v6[0] = __p;
  v6[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v6[2] = *((_QWORD *)this + 1286);
  v6[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v6[4] = *((_QWORD *)this + 1283);
  v6[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long long>;
  v6[6] = *((_QWORD *)this + 1287);
  v6[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v6[8] = *((_QWORD *)this + 1284);
  v6[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long long>;
  v6[10] = *((_QWORD *)this + 1288);
  v6[11] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v6[12] = *((_QWORD *)this + 1285);
  v6[13] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<unsigned long long>;
  v6[14] = FLAGS_simplex_stop_after_first_basis;
  v6[15] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<BOOL>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("Problem status                               : %s\nSolving time                                 : %-6.4g\nNumber of iterations                         : %u\nTime for solvability (first phase)           : %-6.4g\nNumber of iterations for solvability         : %u\nTime for optimization                        : %-6.4g\nNumber of iterations for optimization        : %u\nStop after first basis                       : %d\n", 412, (uint64_t)v6, 8, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_22DA133F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 operations_research::glop::RevisedSimplex::SetVariableNames(operations_research::glop::RevisedSimplex *this)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  std::vector<std::string>::value_type __p;
  uint64_t v18;
  BOOL (*v19)(int, uint64_t, unsigned int, char *);
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)((char *)this + 544);
  v3 = *(int *)((char *)this + 5);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v4 = *((_QWORD *)this + 69);
  v5 = *((_QWORD *)this + 68);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
  if (v3 <= v6)
  {
    if (v3 < v6)
    {
      v8 = v5 + 24 * (int)v3;
      while (v4 != v8)
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      *((_QWORD *)this + 69) = v8;
    }
  }
  else
  {
    std::vector<std::string>::__append((std::vector<std::string> *)((char *)this + 544), v3 - v6, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(v9) = *(_DWORD *)((char *)this + 9);
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v18 = ++v11;
      v19 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
      absl::lts_2020_02_25::str_format_internal::FormatPack("x%d", 3, (uint64_t)&v18, 1, (uint64_t)&__p);
      v12 = *v2 + v10;
      if (*(char *)(v12 + 23) < 0)
        operator delete(*(void **)v12);
      result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(__n128 *)v12 = result;
      v9 = *(int *)((char *)this + 9);
      v10 += 24;
    }
    while (v11 < v9);
  }
  if ((int)v9 < *(_DWORD *)((char *)this + 5))
  {
    v13 = (int)v9;
    v14 = 24 * (int)v9;
    v15 = v9 + 1;
    do
    {
      v18 = (v15 - *(_DWORD *)((char *)this + 9));
      v19 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
      absl::lts_2020_02_25::str_format_internal::FormatPack("s%d", 3, (uint64_t)&v18, 1, (uint64_t)&__p);
      v16 = *((_QWORD *)this + 68) + v14;
      if (*(char *)(v16 + 23) < 0)
        operator delete(*(void **)v16);
      ++v13;
      result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v16 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(__n128 *)v16 = result;
      v14 += 24;
      ++v15;
    }
    while (v13 < *(int *)((char *)this + 5));
  }
  return result;
}

void sub_22DA13620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::UseSingletonColumnInInitialBasis(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char *v4;
  size_t v5;
  char *v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  int *v23;
  unint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  int *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  int v50;
  char *v52;
  void *__p;
  void *v54;
  char *v55;
  int *v56;
  uint64_t v57;
  int *v58;
  void **p_p;

  v56 = 0;
  v57 = 0;
  v58 = 0;
  v2 = *(unsigned int *)(a1 + 5);
  v54 = 0;
  v55 = 0;
  __p = 0;
  if (!(_DWORD)v2)
  {
    v8 = 0;
    v56 = 0;
    goto LABEL_65;
  }
  if ((v2 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v4 = (char *)operator new(8 * v2);
  v5 = 8 * (int)v2;
  v6 = &v4[v5];
  __p = v4;
  v55 = &v4[v5];
  bzero(v4, v5);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v54 = v6;
  v12 = v57;
  v52 = v4;
  do
  {
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(v13 + 8 * v9);
    v15 = v9 + 1;
    if (*(_QWORD *)(v13 + 8 * (v9 + 1)) - v14 == 1)
    {
      *(_QWORD *)&v7 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v9);
      if (*(double *)&v7 != *(double *)(*(_QWORD *)(a1 + 280) + 8 * v9))
      {
        v16 = *(double *)(*(_QWORD *)(a1 + 24) + 8 * v14);
        v17 = *(_QWORD *)(a1 + 216);
        if (*(double *)(*(_QWORD *)(a1 + 5944) + 8 * v9) == *(double *)&v7)
          v18 = *(double *)(v17 + 8 * v9);
        else
          v18 = -*(double *)(v17 + 8 * v9);
        *(double *)&v7 = v18 / fabs(v16);
        *(_QWORD *)&v4[8 * v9] = v7;
        if (v8 < v10)
        {
          *v8 = v9;
          v12 = (uint64_t)(v8 + 1);
LABEL_5:
          LODWORD(v2) = *(_DWORD *)(a1 + 5);
          v8 = (int *)v12;
          goto LABEL_6;
        }
        v19 = v8 - v11;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
        {
          v57 = v12;
          v58 = v10;
          v56 = v11;
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v10 - (char *)v11) >> 1 > v20)
          v20 = ((char *)v10 - (char *)v11) >> 1;
        if ((unint64_t)((char *)v10 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
        {
          if (v21 >> 62)
          {
            v57 = v12;
            v58 = v10;
            v56 = v11;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v22 = operator new(4 * v21);
          v23 = (int *)&v22[4 * v19];
          *v23 = v9;
          v12 = (uint64_t)(v23 + 1);
          if (v8 == v11)
            goto LABEL_27;
        }
        else
        {
          v22 = 0;
          v23 = (int *)(4 * v19);
          *(_DWORD *)(4 * v19) = v9;
          v12 = 4 * v19 + 4;
          if (v8 == v11)
            goto LABEL_27;
        }
        v24 = (char *)(v8 - 1) - (char *)v11;
        if (v24 >= 0xBC)
        {
          if (&v22[(char *)v8 - (char *)v11 - 4 - (v24 & 0xFFFFFFFFFFFFFFFCLL)] > &v22[(char *)v8 - (char *)v11 - 4])
          {
            v25 = v8;
          }
          else if ((int *)((char *)v8 - (v24 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v8 - 1)
          {
            v25 = v8;
          }
          else if ((unint64_t)((char *)v11 - v22) >= 0x20)
          {
            v28 = (v24 >> 2) + 1;
            v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
            v25 = &v8[v29 / 0xFFFFFFFFFFFFFFFCLL];
            v23 = (int *)((char *)v23 - v29);
            v30 = &v22[4 * v19 - 16];
            v31 = v8 - 4;
            v32 = v28 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v7 = *(_OWORD *)v31;
              *(v30 - 1) = *((_OWORD *)v31 - 1);
              *v30 = v7;
              v30 -= 2;
              v31 -= 8;
              v32 -= 8;
            }
            while (v32);
            if (v28 == (v28 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_27;
          }
          else
          {
            v25 = v8;
          }
        }
        else
        {
          v25 = v8;
        }
        do
        {
          v26 = *--v25;
          *--v23 = v26;
        }
        while (v25 != v11);
LABEL_27:
        v10 = (int *)&v22[4 * v21];
        if (v11)
        {
          v27 = v12;
          operator delete(v11);
          v12 = v27;
        }
        v11 = v23;
        v4 = v52;
        goto LABEL_5;
      }
    }
LABEL_6:
    ++v9;
  }
  while (v15 < (int)v2);
  v57 = v12;
  v58 = v10;
  v56 = v11;
  if (v11 != v8)
  {
    p_p = &__p;
    v8 = v56;
    v33 = (unsigned int *)v57;
    if (v56 != (int *)v57)
    {
      for (i = (unsigned int *)v56; i != v33; ++i)
      {
        v35 = *i;
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * (int)v35);
        v37 = *(_QWORD *)(a1 + 24);
        v38 = *(int *)(*(_QWORD *)(a1 + 48) + 4 * v36);
        v39 = *a2;
        if (*(_DWORD *)(*a2 + 4 * v38) == -1)
        {
          *(_DWORD *)(v39 + 4 * v38) = v35;
          v40 = *(_QWORD *)(a1 + 816);
          v41 = *(double *)(v40 + 8 * v38);
          if (v41 == 0.0)
            continue;
        }
        else
        {
          v40 = *(_QWORD *)(a1 + 816);
          v41 = *(double *)(v40 + 8 * v38);
          if (v41 == 0.0)
            continue;
        }
        v42 = *(double *)(v37 + 8 * v36);
        v43 = 8 * (int)v35;
        v44 = *(double *)(*(_QWORD *)(a1 + 5944) + v43);
        v45 = v41 / v42;
        v46 = v41 / v42 + v44;
        v47 = *(double *)(*(_QWORD *)(a1 + 256) + v43);
        if (v46 >= v47 && v46 <= *(double *)(*(_QWORD *)(a1 + 280) + 8 * (int)v35))
        {
          *(_QWORD *)(v40 + 8 * v38) = 0;
          *(_DWORD *)(v39 + 4 * v38) = v35;
        }
        else
        {
          if (v45 > 0.0 && v44 == v47)
          {
            v42 = -v42;
            v50 = 3;
          }
          else
          {
            if (v45 >= 0.0 || v44 != *(double *)(*(_QWORD *)(a1 + 280) + 8 * (int)v35))
              continue;
            v50 = 2;
          }
          *(double *)(v40 + 8 * v38) = v41
                                     + v42
                                     * (*(double *)(**(_QWORD **)(a1 + 5496) + 8 * (int)v35)
                                      - *(double *)(**(_QWORD **)(a1 + 5488) + 8 * (int)v35));
          operations_research::glop::VariablesInfo::UpdateToNonBasicStatus(a1 + 5480, v35, v50);
          operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus((_QWORD *)(a1 + 5904), v35);
        }
      }
    }
  }
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
LABEL_65:
  if (v8)
  {
    v57 = (uint64_t)v8;
    operator delete(v8);
  }
}

void sub_22DA13AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  void *v19;

  if (__p)
  {
    operator delete(__p);
    v19 = v17;
    if (!v17)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v19 = v17;
    if (!v17)
      goto LABEL_3;
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::RevisedSimplex::InitializeMatrixAndTestIfUnchanged(uint64_t a1, uint64_t a2, BOOL *a3, BOOL *a4, _DWORD *a5)
{
  int v10;
  int v11;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int FirstSlackVariable;
  int v21;
  int v22;
  void *__p;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  if (operations_research::glop::AreFirstColumnsAndRowsExactlyEquals(*(_DWORD *)(a1 + 1), *(_DWORD *)(a1 + 9), (uint64_t *)a2, a1 + 16))
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a1 + 1);
    if (v10 == v11 && *(_DWORD *)(a1 + 5) == -1431655765 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4))
      return 1;
    if (v10 <= v11)
    {
      *a3 = 0;
      if (v10 != v11)
        goto LABEL_8;
    }
    else
    {
      v13 = operations_research::glop::LinearProgram::GetFirstSlackVariable((operations_research::glop::LinearProgram *)a2) == *(_DWORD *)(a1 + 9);
      v14 = *(_DWORD *)(a2 + 24);
      v15 = *(_DWORD *)(a1 + 1);
      *a3 = v13;
      if (v14 != v15)
        goto LABEL_8;
    }
    FirstSlackVariable = operations_research::glop::LinearProgram::GetFirstSlackVariable((operations_research::glop::LinearProgram *)a2);
    v21 = *(_DWORD *)(a1 + 9);
    *a4 = FirstSlackVariable > v21;
    if (FirstSlackVariable <= v21)
      v16 = 0;
    else
      v16 = -1431655765 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4) - *(_DWORD *)(a1 + 5);
    goto LABEL_9;
  }
  *a3 = 0;
LABEL_8:
  v16 = 0;
  *a4 = 0;
LABEL_9:
  *a5 = v16;
  *(_DWORD *)(a1 + 9) = operations_research::glop::LinearProgram::GetFirstSlackVariable((operations_research::glop::LinearProgram *)a2);
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 24);
  v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  *(_DWORD *)(a1 + 5) = v17;
  v22 = 0;
  v24 = 0;
  v25 = 0;
  __p = 0;
  v26 = 0;
  if (v17 << 32)
    std::vector<operations_research::glop::SparseColumn const*>::__append((unint64_t *)&__p, (int)v17, (const double *)&v26);
  if ((int)v17 >= 1)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      *(_QWORD *)((char *)__p + v18) = *(_QWORD *)a2 + v19;
      v19 += 48;
      v18 += 8;
    }
    while (48 * v17 != v19);
  }
  v22 = *(_DWORD *)(a2 + 24);
  operations_research::glop::CompactSparseMatrix::PopulateFromMatrixView(a1 + 16, (uint64_t)&v22);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(a1 + 11715))
    operations_research::glop::CompactSparseMatrix::PopulateFromTranspose((operations_research::glop::CompactSparseMatrix *)(a1 + 96), (const operations_research::glop::CompactSparseMatrix *)(a1 + 16));
  return 0;
}

void sub_22DA13D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::glop::RevisedSimplex::InitializeBoundsAndTestIfUnchanged(operations_research::glop::RevisedSimplex *this, const operations_research::glop::LinearProgram *a2)
{
  double **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char **v15;
  int v16;
  char *v17;
  BOOL v18;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;

  v4 = (double **)((char *)this + 256);
  v5 = *(unsigned int *)((char *)this + 5);
  v23 = 0;
  v6 = (int)v5;
  v7 = *((_QWORD *)this + 32);
  v8 = (*((_QWORD *)this + 33) - v7) >> 3;
  if ((int)v5 <= v8)
  {
    if ((int)v5 < v8)
      *((_QWORD *)this + 33) = v7 + 8 * (int)v5;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 256, (int)v5 - v8, &v23);
    v5 = *(unsigned int *)((char *)this + 5);
    v6 = (int)v5;
  }
  v9 = (_QWORD *)((char *)this + 280);
  v23 = 0;
  v10 = *((_QWORD *)this + 35);
  v11 = (*((_QWORD *)this + 36) - v10) >> 3;
  if (v6 <= v11)
  {
    if (v6 < v11)
      *((_QWORD *)this + 36) = v10 + 8 * v6;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 280, v6 - v11, &v23);
    v5 = *(unsigned int *)((char *)this + 5);
    v6 = (int)v5;
  }
  v23 = 0;
  v12 = v5 << 32;
  v13 = (char *)*((_QWORD *)this + 38);
  v14 = (uint64_t)(*((_QWORD *)this + 39) - (_QWORD)v13) >> 3;
  if (v6 <= v14)
  {
    if (v6 < v14)
      *((_QWORD *)this + 39) = &v13[8 * v6];
  }
  else
  {
    v15 = (char **)((char *)this + 304);
    std::vector<double>::__append((uint64_t)v15, v6 - v14, &v23);
    v13 = *v15;
  }
  bzero(v13, v12 >> 29);
  v16 = -1431655765 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  if (v16 < 1)
  {
    return 1;
  }
  else
  {
    v17 = (char *)*((_QWORD *)a2 + 20);
    v18 = 0;
    if (**v4 == *(double *)v17)
    {
      v20 = 0;
      do
      {
        if (*(double *)(*v9 + 8 * v20) != *(double *)(*((_QWORD *)a2 + 23) + 8 * v20))
          break;
        v18 = v20 + 1 >= v16;
        if (-1431655765 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4) - 1 == v20)
          return v18;
        v21 = (*v4)[v20 + 1];
        v22 = *(double *)&v17[8 * v20++ + 8];
      }
      while (v21 == v22);
    }
    if (v4 != (double **)((char *)a2 + 160))
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v4, v17, *((char **)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - (_QWORD)v17) >> 3);
    if (v9 != (_QWORD *)((char *)a2 + 184))
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v9, *((char **)a2 + 23), *((char **)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 3);
  }
  return v18;
}

void operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double>::AssignToZero(char **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;

  v10 = 0;
  v3 = a2 << 32;
  v4 = (int)a2;
  v5 = *a1;
  v7 = (a1[1] - v5) >> 3;
  v8 = (int)a2 >= v7;
  v9 = (int)a2 - v7;
  if (v9 != 0 && v8)
  {
    std::vector<double>::__append((uint64_t)a1, v9, &v10);
    v5 = *a1;
LABEL_4:
    bzero(v5, v3 >> 29);
    return;
  }
  if (v8)
    goto LABEL_4;
  a1[1] = &v5[8 * v4];
  bzero(v5, v3 >> 29);
}

void operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE v20[16];

  v6 = (_QWORD *)(a1 + 5480);
  operations_research::glop::VariablesInfo::InitializeAndComputeType((operations_research::glop::VariablesInfo *)(a1 + 5480));
  if (*(int *)(a1 + 5) >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(int *)(a1 + 9) - (uint64_t)a3;
    while (1)
    {
      v10 = *(double *)(*(_QWORD *)(a1 + 256) + 8 * v7);
      v11 = *(double *)(*(_QWORD *)(a1 + 280) + 8 * v7);
      if (v10 == v11)
      {
        v12 = 1;
        if (v7 >= v9)
          goto LABEL_23;
      }
      else if (v10 == -INFINITY && v11 == INFINITY)
      {
        v12 = 4;
        if (v7 >= v9)
          goto LABEL_23;
      }
      else
      {
        if (fabs(v10) > fabs(v11))
          v12 = 3;
        else
          v12 = 2;
        if (v7 >= v9)
          goto LABEL_23;
      }
      if (v7 < (int)(*(_DWORD *)(a2 + 8) - *(_QWORD *)a2))
      {
        v14 = *(unsigned __int8 *)(*(_QWORD *)a2 + v7);
        if (!*(_BYTE *)(*(_QWORD *)a2 + v7))
          goto LABEL_26;
LABEL_18:
        if (v14 != v12 && v12 != 1)
        {
          switch(v14)
          {
            case 1:
            case 4:
              goto LABEL_37;
            case 2:
              if (v10 != -INFINITY)
                LOBYTE(v12) = 2;
              break;
            case 3:
              if (v11 != INFINITY)
                LOBYTE(v12) = 3;
              break;
            default:
              LOBYTE(v12) = v14;
              break;
          }
        }
        goto LABEL_37;
      }
LABEL_23:
      if (v7 < *(int *)(a1 + 9) || v7 - a3 >= (int)(*(_DWORD *)(a2 + 8) - *(_QWORD *)a2))
      {
LABEL_37:
        v19 = (char)v12;
        v17 = (uint64_t)v6;
        v18 = v7;
LABEL_38:
        operations_research::glop::VariablesInfo::UpdateToNonBasicStatus(v17, v18, v19);
        if (++v7 >= *(int *)(a1 + 5))
          break;
      }
      else
      {
        v14 = *(unsigned __int8 *)(*(_QWORD *)a2 + v7 - a3);
        if (*(_BYTE *)(*(_QWORD *)a2 + v7 - a3))
          goto LABEL_18;
LABEL_26:
        if (v8 == *(_DWORD *)(a1 + 1))
        {
          if (*operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart(operations_research::glop::BasisState const&,gtl::IntType<operations_research::glop::ColIndex_tag_,int>)::vlocal__[0] >= 1
            && (operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart(operations_research::glop::BasisState const&,gtl::IntType<operations_research::glop::ColIndex_tag_,int>)::vlocal__[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)operations_research::glop::RevisedSimplex::InitializeVariableStatusesForWarmStart(operations_research::glop::BasisState const&,gtl::IntType<operations_research::glop::ColIndex_tag_,int>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)v20, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 927);
            v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v20);
            v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Too many basic variables in the warm-start basis.", 49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Only keeping the first ones as VariableStatus::BASIC.", 53);
            google::LogMessage::~LogMessage((google::LogMessage *)v20);
          }
          v17 = (uint64_t)v6;
          v18 = v7;
          v19 = v12;
          goto LABEL_38;
        }
        ++v8;
        operations_research::glop::VariablesInfo::UpdateToBasicStatus(v6, v7++);
        if (v7 >= *(int *)(a1 + 5))
          break;
      }
    }
  }
  operations_research::glop::VariableValues::ResetAllNonBasicVariableValues((operations_research::glop::VariableValues *)(a1 + 5904));
}

void sub_22DA14274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::CreateInitialBasis(operations_research::glop::RevisedSimplex *this@<X0>, uint64_t a2@<X8>)
{
  operations_research::glop::VariablesInfo *v3;
  uint64_t v4;
  int v5;
  int v6;
  double v7;
  double v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int32x4_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t *v22;
  int32x4_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  BOOL v30;
  double v32;
  BOOL v33;
  int v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  int *v49;
  double *v50;
  double v51;
  double v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  std::vector<int>::pointer begin;
  int v57;
  uint64_t TypeRow;
  unsigned int v59;
  int32x4_t v60;
  std::vector<int>::pointer v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  google::LogMessage *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t *v82;
  int32x4_t v83;
  int32x4_t v84;
  uint64_t v85;
  int32x4_t v86;
  int v87;
  int *v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  int v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  std::vector<int>::pointer v97;
  _BYTE v99[16];
  uint64_t v100[8];
  std::vector<int> v101;

  v3 = (operations_research::glop::RevisedSimplex *)((char *)this + 5480);
  operations_research::glop::VariablesInfo::InitializeAndComputeType((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
  if (*(int *)((char *)this + 5) >= 1)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v7 = *(double *)(*((_QWORD *)this + 32) + 8 * v4);
      v8 = *(double *)(*((_QWORD *)this + 35) + 8 * v4);
      if (v7 == v8)
      {
        v6 = 1;
      }
      else if (v7 == -INFINITY && v8 == INFINITY)
      {
        v6 = 4;
      }
      else if (fabs(v7) > fabs(v8))
      {
        v6 = 3;
      }
      else
      {
        v6 = 2;
      }
      operations_research::glop::VariablesInfo::UpdateToNonBasicStatus((uint64_t)v3, v4, v6);
      operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus((_QWORD *)this + 738, v4);
      if (v6 == 4)
        ++v5;
      ++v4;
    }
    while (v4 < *(int *)((char *)this + 5));
  }
  if (*off_254079150[0] > 0
    && (off_254079150[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079150, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v100, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 975);
    v10 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Number of free variables in the problem: ", 41);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v100);
  }
  v11 = *(int *)((char *)this + 1);
  v12 = *(unsigned int *)((char *)this + 1);
  memset(&v101, 0, sizeof(v101));
  if (!(_DWORD)v11)
    goto LABEL_31;
  if ((v12 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v13 = (int *)operator new(4 * v12);
  v101.__begin_ = v13;
  v101.__end_cap_.__value_ = &v13[v11];
  memset(v13, 255, 4 * v11);
  v101.__end_ = &v13[v11];
  v15 = *(_DWORD *)((char *)this + 9);
  if (v11 <= 1)
    v16 = 1;
  else
    v16 = v11;
  if (v16 >= 8)
  {
    v14.i32[0] = *(_DWORD *)((char *)this + 9);
    v18 = vdupq_n_s32(v15);
    v19.i64[0] = 0x400000004;
    v19.i64[1] = 0x400000004;
    v20 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_s32(v14, v19), 0);
    v17 = v16 & 0x7FFFFFFFFFFFFFF8;
    v21 = (int32x4_t)xmmword_22DCE64F0;
    v22 = (int32x4_t *)(v13 + 4);
    v23.i64[0] = 0x800000008;
    v23.i64[1] = 0x800000008;
    v24 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v22[-1] = vaddq_s32(v18, v21);
      *v22 = vaddq_s32(v20, v21);
      v21 = vaddq_s32(v21, v23);
      v22 += 2;
      v24 -= 8;
    }
    while (v24);
    if (v16 == v17)
      goto LABEL_31;
  }
  else
  {
    v17 = 0;
  }
  do
  {
    v13[v17] = v15 + v17;
    ++v17;
  }
  while (v17 < v11);
LABEL_31:
  v25 = (char *)this + 11644;
  if (*((_BYTE *)this + 11644) || *((_DWORD *)this + 2929) == 3 || !*((_BYTE *)this + 11809))
    goto LABEL_77;
  if (*(int *)((char *)this + 5) < 1)
    goto LABEL_59;
  v26 = 0;
  do
  {
    if (*(_QWORD *)(*((_QWORD *)this + 9) + 8 * v26 + 8) - *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v26) != 1)
      goto LABEL_36;
    v27 = *(unsigned __int8 *)(*(_QWORD *)operations_research::glop::VariablesInfo::GetStatusRow(v3) + v26);
    v28 = *(double *)(*((_QWORD *)this + 27) + 8 * v26);
    if (v28 > 0.0)
    {
      v29 = *(double *)(*((_QWORD *)this + 32) + 8 * v26);
      v30 = v29 > -INFINITY && v29 < INFINITY;
      if (v30 && v27 == 3)
      {
        v35 = 2;
        goto LABEL_57;
      }
    }
    if (v28 < 0.0)
    {
      v32 = *(double *)(*((_QWORD *)this + 35) + 8 * v26);
      v33 = v32 > -INFINITY && v32 < INFINITY;
      if (v33 && v27 == 2)
      {
        v35 = 3;
LABEL_57:
        operations_research::glop::VariablesInfo::UpdateToNonBasicStatus((uint64_t)v3, v26, v35);
        operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus((_QWORD *)this + 738, v26);
      }
    }
LABEL_36:
    ++v26;
  }
  while (v26 < *(int *)((char *)this + 5));
  v11 = *(int *)((char *)this + 1);
  LODWORD(v12) = *(_DWORD *)((char *)this + 1);
LABEL_59:
  v100[0] = 0;
  v36 = (char *)*((_QWORD *)this + 102);
  v37 = (uint64_t)(*((_QWORD *)this + 103) - (_QWORD)v36) >> 3;
  if (v11 <= v37)
  {
    if (v11 < v37)
      *((_QWORD *)this + 103) = &v36[8 * v11];
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 816, v11 - v37, v100);
    v36 = (char *)*((_QWORD *)this + 102);
  }
  bzero(v36, 8 * (int)v12);
  v38 = *(unsigned int *)((char *)this + 5);
  if ((int)v38 >= 1)
  {
    v39 = 0;
    v40 = *((_QWORD *)this + 743);
    do
    {
      v41 = *(double *)(v40 + 8 * v39);
      if (v41 == 0.0)
      {
        ++v39;
      }
      else
      {
        v42 = *((_QWORD *)this + 9);
        v43 = *(_QWORD *)(v42 + 8 * v39++);
        v44 = *(_QWORD *)(v42 + 8 * v39);
        v45 = v44 <= v43;
        v46 = v44 - v43;
        if (!v45)
        {
          v47 = -v41;
          v48 = *((_QWORD *)this + 102);
          v49 = (int *)(*((_QWORD *)this + 6) + 4 * v43);
          v50 = (double *)(*((_QWORD *)this + 3) + 8 * v43);
          do
          {
            v51 = *v50++;
            v52 = v51;
            v53 = *v49++;
            *(double *)(v48 + 8 * v53) = *(double *)(v48 + 8 * v53) + v47 * v52;
            --v46;
          }
          while (v46);
        }
      }
    }
    while (v39 != v38);
  }
  std::vector<int>::assign(&v101, *(int *)((char *)this + 1), &operations_research::glop::kInvalidCol);
  operations_research::glop::RevisedSimplex::UseSingletonColumnInInitialBasis((uint64_t)this, (uint64_t *)&v101);
  v54 = *(_DWORD *)((char *)this + 1);
  if (v54 >= 1)
  {
    v55 = 0;
    begin = v101.__begin_;
    do
    {
      if (begin[v55] == -1)
      {
        begin[v55] = v55 + *(_DWORD *)((char *)this + 9);
        v54 = *(_DWORD *)((char *)this + 1);
      }
      ++v55;
    }
    while (v55 < v54);
  }
LABEL_77:
  v57 = *((_DWORD *)this + 2929);
  if ((v57 - 1) >= 2)
  {
    if (!v57)
      goto LABEL_120;
    if (v57 == 3)
    {
      TypeRow = operations_research::glop::VariablesInfo::GetTypeRow(v3);
      operations_research::glop::InitialBasis::InitialBasis(v100, (uint64_t)this + 16, (uint64_t)this + 216, (uint64_t)this + 256, (uint64_t)this + 280, TypeRow);
      v59 = *(_DWORD *)((char *)this + 5);
      if (*v25)
        operations_research::glop::InitialBasis::GetDualMarosBasis((uint64_t)v100, v59, &v101);
      else
        operations_research::glop::InitialBasis::GetPrimalMarosBasis((uint64_t)v100, v59, &v101);
      v74 = *(unsigned int *)((char *)this + 1);
      if ((int)v74 >= 1)
      {
        v75 = *(_DWORD *)((char *)this + 9);
        if (v74 >= 8)
        {
          v76 = v74 & 0x7FFFFFF8;
          v78 = vdupq_n_s32(v75);
          v60.i32[0] = *(_DWORD *)((char *)this + 9);
          v79.i64[0] = 0x400000004;
          v79.i64[1] = 0x400000004;
          v80 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_s32(v60, v79), 0);
          v81 = (int32x4_t)xmmword_22DCE64F0;
          v82 = (int32x4_t *)(v101.__begin_ + 4);
          v83 = 0uLL;
          v84.i64[0] = 0x800000008;
          v84.i64[1] = 0x800000008;
          v85 = v74 & 0xFFFFFFF8;
          v86 = 0uLL;
          do
          {
            v83 = vsubq_s32(v83, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v82[-1], vaddq_s32(v78, v81))));
            v86 = vsubq_s32(v86, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v82, vaddq_s32(v80, v81))));
            v81 = vaddq_s32(v81, v84);
            v82 += 2;
            v85 -= 8;
          }
          while (v85);
          v77 = vaddvq_s32(vaddq_s32(v86, v83));
          if (v76 != v74)
            goto LABEL_110;
        }
        else
        {
          v76 = 0;
          v77 = 0;
LABEL_110:
          v87 = v75 + v76;
          v88 = &v101.__begin_[v76];
          v89 = v74 - v76;
          do
          {
            v90 = *v88++;
            if (v87 != v90)
              ++v77;
            ++v87;
            --v89;
          }
          while (v89);
        }
      }
      if (*off_254079158[0] > 0
        && (off_254079158[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079158, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v99, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1047);
        v91 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Number of Maros basis changes: ", 31);
        std::ostream::operator<<();
        goto LABEL_118;
      }
      goto LABEL_120;
    }
    google::LogMessage::LogMessage((google::LogMessage *)v100, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1102, 1);
    v72 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Unsupported initial_basis parameters: ", 38);
    std::ostream::operator<<();
LABEL_101:
    v73 = (google::LogMessage *)v100;
LABEL_119:
    google::LogMessage::~LogMessage(v73);
    goto LABEL_120;
  }
  v61 = v101.__begin_;
  if ((int)((unint64_t)((char *)v101.__end_ - (char *)v101.__begin_) >> 2) < 1)
    goto LABEL_144;
  v62 = 0;
  v63 = *((_QWORD *)this + 32);
  v64 = *((_QWORD *)this + 35);
  v65 = ((unint64_t)((char *)v101.__end_ - (char *)v101.__begin_) >> 2);
  do
  {
    if (*(double *)(v63 + 8 * *v61) == *(double *)(v64 + 8 * *v61))
    {
      *v61 = -1;
      ++v62;
    }
    ++v61;
    --v65;
  }
  while (v65);
  if (!v62)
  {
LABEL_144:
    if (*off_254079160[0] < 1
      || off_254079160[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_254079160, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1))
    {
      goto LABEL_120;
    }
    google::LogMessage::LogMessage((google::LogMessage *)v100, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1061);
    v70 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Crash is set to ", 16);
    v71 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" but there is no equality rows to remove from initial all slack basis.", 70);
    goto LABEL_101;
  }
  if (*off_254079168[0] >= 1
    && (off_254079168[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079168, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v100, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1066);
    v66 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Trying to remove ", 17);
    v67 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" fixed variables from the initial basis.", 40);
    google::LogMessage::~LogMessage((google::LogMessage *)v100);
  }
  v68 = operations_research::glop::VariablesInfo::GetTypeRow(v3);
  operations_research::glop::InitialBasis::InitialBasis(v100, (uint64_t)this + 16, (uint64_t)this + 216, (uint64_t)this + 256, (uint64_t)this + 280, v68);
  v69 = *((_DWORD *)this + 2929);
  if (v69 == 2)
  {
    v92 = *(_DWORD *)((char *)this + 5);
    if (*v25)
      operations_research::glop::InitialBasis::CompleteTriangularDualBasis((uint64_t)v100, v92, &v101);
    else
      operations_research::glop::InitialBasis::CompleteTriangularPrimalBasis((uint64_t)v100, v92, &v101);
    operations_research::glop::RevisedSimplex::InitializeFirstBasis((uint64_t)this, (char **)&v101, a2);
    if (*(_DWORD *)a2)
    {
      if (*off_254079178[0] >= 1
        && (off_254079178[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079178, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v99, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1093);
        v95 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Reverting to all slack basis.", 29);
        google::LogMessage::~LogMessage((google::LogMessage *)v99);
      }
      if (*(int *)((char *)this + 1) >= 1)
      {
        v96 = 0;
        v97 = v101.__begin_;
        do
        {
          v97[v96] = v96 + *(_DWORD *)((char *)this + 9);
          ++v96;
        }
        while (v96 < *(int *)((char *)this + 1));
      }
      if (*(char *)(a2 + 31) < 0)
        operator delete(*(void **)(a2 + 8));
      goto LABEL_120;
    }
  }
  else
  {
    if (v69 != 1)
      goto LABEL_120;
    if (*((_BYTE *)this + 11714))
    {
      operations_research::glop::InitialBasis::CompleteBixbyBasis((uint64_t)v100, *(_DWORD *)((char *)this + 9), &v101);
      goto LABEL_120;
    }
    if (*off_254079170[0] >= 1
      && (off_254079170[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079170, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v99, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1075);
      v93 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v99);
      v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"Bixby initial basis algorithm requires the problem ", 51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"to be scaled. Skipping Bixby's algorithm.", 41);
LABEL_118:
      v73 = (google::LogMessage *)v99;
      goto LABEL_119;
    }
LABEL_120:
    operations_research::glop::RevisedSimplex::InitializeFirstBasis((uint64_t)this, (char **)&v101, a2);
  }
  if (v101.__begin_)
  {
    v101.__end_ = v101.__begin_;
    operator delete(v101.__begin_);
  }
}

void sub_22DA14CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22DA14D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::InitializeFirstBasis(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<int> *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  google::LogMessage *v14;
  _QWORD *v15;
  std::string *v16;
  std::string::size_type v17;
  uint64_t v18;
  operations_research::glop::VariableValues *v19;
  double v20;
  _QWORD *v21;
  double v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _BYTE v32[16];
  std::string v33;
  _QWORD v34[2];
  _BYTE v35[32];
  std::string v36[2];
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[32];
  const char *v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = (std::vector<int> *)(a1 + 520);
  if ((char **)(a1 + 520) != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 520), *a2, a2[1], (a2[1] - *a2) >> 2);
  v6 = *(_DWORD *)(a1 + 1);
  v7 = *(_QWORD *)(a1 + 520);
  v8 = (*(_QWORD *)(a1 + 528) - v7) >> 2;
  if (v6 <= v8)
  {
    if (v6 < v8)
      *(_QWORD *)(a1 + 528) = v7 + 4 * v6;
  }
  else
  {
    std::vector<int>::__append(v5, v6 - v8, &operations_research::glop::kInvalidCol);
    v6 = *(_DWORD *)(a1 + 1);
  }
  if (v6 >= 1)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 520);
    do
    {
      if (*(_DWORD *)(v10 + 4 * v9) == -1)
      {
        *(_DWORD *)(v10 + 4 * v9) = v9 + *(_DWORD *)(a1 + 9);
        v6 = *(_DWORD *)(a1 + 1);
      }
      ++v9;
    }
    while (v9 < v6);
  }
  operations_research::glop::BasisFactorization::Initialize((std::vector<int> *)(a1 + 840), a3);
  if (!*(_DWORD *)a3)
  {
    if (*(char *)(a3 + 31) < 0)
      operator delete(*(void **)(a3 + 8));
    if (*(_QWORD *)(a1 + 2880) != *(_QWORD *)(a1 + 2888))
    {
      operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((uint64_t *)(a1 + 2880), v5);
      if (*(_QWORD *)(a1 + 360) != *(_QWORD *)(a1 + 368))
        operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>((uint64_t *)(a1 + 2880), (char **)(a1 + 360));
      operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation(a1 + 8720);
      operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation(a1 + 6288, (uint64_t *)(a1 + 2880));
      *(_QWORD *)(a1 + 2888) = *(_QWORD *)(a1 + 2880);
      *(_QWORD *)(a1 + 2912) = *(_QWORD *)(a1 + 2904);
    }
    v13 = operations_research::glop::BasisFactorization::ComputeInfinityNormConditionNumberUpperBound((operations_research::glop::BasisFactorization *)(a1 + 840));
    if (v13 <= *(double *)(a1 + 11904))
    {
      if (*(int *)(a1 + 1) >= 1)
      {
        v18 = 0;
        do
          operations_research::glop::VariablesInfo::Update((_QWORD *)(a1 + 5480), *(unsigned int *)(*(_QWORD *)(a1 + 520) + 4 * v18++), 0);
        while (v18 < *(int *)(a1 + 1));
      }
      v19 = (operations_research::glop::VariableValues *)(a1 + 5904);
      operations_research::glop::VariableValues::RecomputeBasicVariableValues((operations_research::glop::VariableValues *)(a1 + 5904));
      if (*off_254079188[0] > 0
        && (off_254079188[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079188, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        v20 = *(double *)(a1 + 11688);
        if (operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::VariableValues *)(a1 + 5904)) > v20
          && *off_254079190[0] >= 1
          && (off_254079190[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_254079190, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v32, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1152);
          v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v32);
          v40 = "The primal residual of the initial basis is above the tolerance, ";
          v41 = 65;
          v22 = operations_research::glop::VariableValues::ComputeMaximumPrimalResidual(v19);
          v25 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v39, v22, v23, v24);
          v37 = v39;
          v38 = v25;
          v36[0].__r_.__value_.__r.__words[0] = (std::string::size_type)" vs. ";
          v36[0].__r_.__value_.__l.__size_ = 5;
          v28 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v35, v20, v26, v27);
          v34[0] = v35;
          v34[1] = v28;
          absl::lts_2020_02_25::StrCat((uint64_t)&v40, (uint64_t)&v37, (uint64_t)v36, (uint64_t)v34, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          google::LogMessage::~LogMessage((google::LogMessage *)v32);
        }
      }
      operations_research::glop::Status::Status(a3);
    }
    else
    {
      v40 = "The matrix condition number upper bound is too high: ";
      v41 = 53;
      v37 = v39;
      v38 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v39, v13, v11, v12);
      absl::lts_2020_02_25::StrCat((uint64_t)&v40, (uint64_t)&v37, v36);
      if (*off_254079180[0] >= 1
        && (off_254079180[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_254079180, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        v14 = google::LogMessage::LogMessage((google::LogMessage *)&v40, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1135);
        v15 = (_QWORD *)google::LogMessage::stream(v14);
        if ((v36[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = v36;
        else
          v16 = (std::string *)v36[0].__r_.__value_.__r.__words[0];
        if ((v36[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = HIBYTE(v36[0].__r_.__value_.__r.__words[2]);
        else
          v17 = v36[0].__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
        google::LogMessage::~LogMessage((google::LogMessage *)&v40);
      }
      if (SHIBYTE(v36[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v33, v36[0].__r_.__value_.__l.__data_, v36[0].__r_.__value_.__l.__size_);
      else
        v33 = v36[0];
      operations_research::glop::Status::Status(a3, 1, (__int128 *)&v33);
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v36[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
LABEL_57:
        operator delete(v36[0].__r_.__value_.__l.__data_);
        return;
      }
      operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36[0].__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_57;
    }
  }
}

void sub_22DA15238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a16);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void sub_22DA152A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(a24);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22DA152F0);
}

void sub_22DA152A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(a24);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22DA152F0);
}

void sub_22DA152B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a32 < 0)
  {
    operator delete(a27);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22DA152F0);
}

void sub_22DA152C8()
{
  uint64_t v0;

  google::LogMessage::~LogMessage((google::LogMessage *)(v0 - 120));
  JUMPOUT(0x22DA152D4);
}

void operations_research::glop::RevisedSimplex::CorrectErrorsOnVariableValues(operations_research::glop::RevisedSimplex *this)
{
  operations_research::glop::VariableValues *v1;
  _QWORD *v2;
  _QWORD *v3;
  _BYTE v4[16];

  v1 = (operations_research::glop::RevisedSimplex *)((char *)this + 5904);
  if (operations_research::glop::VariableValues::ComputeMaximumPrimalResidual((operations_research::glop::RevisedSimplex *)((char *)this + 5904)) >= *((double *)this + 1465) * *((double *)this + 1461))
  {
    operations_research::glop::VariableValues::RecomputeBasicVariableValues(v1);
    if (*operations_research::glop::RevisedSimplex::CorrectErrorsOnVariableValues(void)::vlocal__[0] >= 1
      && (operations_research::glop::RevisedSimplex::CorrectErrorsOnVariableValues(void)::vlocal__[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)operations_research::glop::RevisedSimplex::CorrectErrorsOnVariableValues(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v4, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1420);
      v2 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Primal infeasibility (bounds error) = ", 38);
      operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility(v1);
      v3 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", Primal residual |A.x - b| = ", 30);
      operations_research::glop::VariableValues::ComputeMaximumPrimalResidual(v1);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v4);
    }
  }
}

void sub_22DA153FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::ComputeDirection(uint64_t a1, int a2)
{
  uint64_t *v3;
  char *v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  int v12;
  uint64_t v13;
  void **v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _DWORD *v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  int *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v3 = (uint64_t *)(a1 + 728);
  operations_research::glop::BasisFactorization::RightSolveForProblemColumn(a1 + 840, a2, a1 + 728);
  *(_QWORD *)(a1 + 808) = 0;
  v4 = *(char **)(a1 + 760);
  v5 = *(int **)(a1 + 768);
  if (v4 == (char *)v5)
  {
    v12 = *(_DWORD *)(a1 + 1);
    if (v12 < 1)
      return;
    v13 = 0;
    v14 = (void **)(a1 + 760);
    v15 = 0.0;
    while (1)
    {
      v18 = *(double *)(*v3 + 8 * v13);
      if (v18 != 0.0)
        break;
LABEL_16:
      if (++v13 >= v12)
        return;
    }
    v19 = *(_QWORD *)(a1 + 776);
    if ((unint64_t)v4 < v19)
    {
      *(_DWORD *)v4 = v13;
      v16 = (uint64_t)(v4 + 4);
LABEL_13:
      *(_QWORD *)(a1 + 768) = v16;
      v17 = fabs(v18);
      if (v15 < v17)
        v15 = v17;
      *(double *)(a1 + 808) = v15;
      v12 = *(_DWORD *)(a1 + 1);
      v4 = (char *)v16;
      goto LABEL_16;
    }
    v20 = *v14;
    v21 = v4 - (_BYTE *)*v14;
    v22 = v21 >> 2;
    v23 = (v21 >> 2) + 1;
    if (v23 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v24 = v19 - (_QWORD)v20;
    if (v24 >> 1 > v23)
      v23 = v24 >> 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = operator new(4 * v25);
      v27 = &v26[4 * v22];
      *v27 = v13;
      v16 = (uint64_t)(v27 + 1);
      if (v4 == v20)
        goto LABEL_42;
    }
    else
    {
      v26 = 0;
      v27 = (_DWORD *)(4 * v22);
      *(_DWORD *)(4 * v22) = v13;
      v16 = 4 * v22 + 4;
      if (v4 == v20)
        goto LABEL_42;
    }
    v28 = v4 - 4 - v20;
    if (v28 >= 0xBC)
    {
      if (&v26[v21 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v21 - 4])
      {
        v29 = (int *)v4;
      }
      else if (&v4[-(v28 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v4 - 4)
      {
        v29 = (int *)v4;
      }
      else if ((unint64_t)(v4 - v26 - v21) >= 0x20)
      {
        v30 = (v28 >> 2) + 1;
        v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
        v29 = (int *)&v4[-v31];
        v27 = (_DWORD *)((char *)v27 - v31);
        v32 = &v26[4 * v22 - 16];
        v33 = (int *)(v4 - 16);
        v34 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *v32 = v35;
          v32 -= 2;
          v33 -= 8;
          v34 -= 8;
        }
        while (v34);
        if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_42:
          *(_QWORD *)(a1 + 760) = v27;
          *(_QWORD *)(a1 + 768) = v16;
          *(_QWORD *)(a1 + 776) = &v26[4 * v25];
          if (v20)
          {
            operator delete(v20);
            v15 = *(double *)(a1 + 808);
          }
          goto LABEL_13;
        }
      }
      else
      {
        v29 = (int *)v4;
      }
    }
    else
    {
      v29 = (int *)v4;
    }
    do
    {
      v36 = *--v29;
      *--v27 = v36;
    }
    while (v29 != (int *)v20);
    goto LABEL_42;
  }
  v6 = (char *)v5 - v4;
  if ((char *)v5 - v4 >= 1)
  {
    v7 = *v3;
    v8 = v6 >> 2;
    if (v8 <= 1)
      v8 = 1;
    v9 = 0.0;
    do
    {
      v10 = *(int *)v4;
      v4 += 4;
      v11 = fabs(*(double *)(v7 + 8 * v10));
      if (v9 < v11)
        v9 = v11;
      *(double *)(a1 + 808) = v9;
      --v8;
    }
    while (v8);
  }
}

void operations_research::glop::RevisedSimplex::ChooseLeavingVariableRow(uint64_t a1@<X0>, int a2@<W1>, _BYTE *a3@<X2>, int *a4@<X3>, double *a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  int *v9;
  double *v10;
  _BYTE *v12;
  uint64_t v15;
  double v16;
  uint64_t *v17;
  double v18;
  double v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type size;
  _QWORD *v23;
  std::string *v24;
  std::string::size_type v25;
  _QWORD *v26;
  std::string *v27;
  std::string::size_type v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _DWORD *v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  _BYTE *v60;
  unint64_t v61;
  char *v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void **v68;
  _BYTE *v69;
  _DWORD *v70;
  char *v71;
  char *v72;
  int v73;
  google::LogMessage *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  google::LogMessage *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  void **v94;
  _BYTE *v95;
  _QWORD *v96;
  uint64_t v97;
  double *v98;
  int *v99;
  std::string v100;
  std::string v101;
  std::string v102;
  _BYTE v103[16];
  std::string v104;

  if (!a3)
  {
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = xmmword_22DCE7550;
    strcpy(v104.__r_.__value_.__l.__data_, "refactorize must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v103, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1596, 2);
    v20 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v103);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v104;
    else
      v21 = (std::string *)v104.__r_.__value_.__r.__words[0];
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    else
      size = v104.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v103);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v102, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
    else
      v102 = v104;
    operations_research::glop::Status::Status(a7, 3, (__int128 *)&v102);
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_87;
    v29 = (void *)v102.__r_.__value_.__r.__words[0];
LABEL_86:
    operator delete(v29);
    goto LABEL_87;
  }
  v9 = a4;
  if (!a4)
  {
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = xmmword_22DCE7550;
    strcpy(v104.__r_.__value_.__l.__data_, "leaving_row must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v103, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1597, 2);
    v23 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v103);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v104;
    else
      v24 = (std::string *)v104.__r_.__value_.__r.__words[0];
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    else
      v25 = v104.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    google::LogMessage::~LogMessage((google::LogMessage *)v103);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v101, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
    else
      v101 = v104;
    operations_research::glop::Status::Status(a7, 3, (__int128 *)&v101);
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_87;
    v29 = (void *)v101.__r_.__value_.__r.__words[0];
    goto LABEL_86;
  }
  v10 = a5;
  if (!a5)
  {
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = xmmword_22DCE7550;
    strcpy(v104.__r_.__value_.__l.__data_, "step_length must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v103, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1598, 2);
    v26 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v103);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v104;
    else
      v27 = (std::string *)v104.__r_.__value_.__r.__words[0];
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    else
      v28 = v104.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    google::LogMessage::~LogMessage((google::LogMessage *)v103);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v100, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
    else
      v100 = v104;
    operations_research::glop::Status::Status(a7, 3, (__int128 *)&v100);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    {
      v29 = (void *)v100.__r_.__value_.__r.__words[0];
      goto LABEL_86;
    }
LABEL_87:
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    return;
  }
  v12 = a3;
  *(_QWORD *)(a1 + 15992) = *(_QWORD *)(a1 + 15984);
  v15 = a2;
  v16 = *(double *)(*(_QWORD *)(a1 + 5944) + 8 * a2);
  v17 = (uint64_t *)(a1 + 15936);
  if (a8 <= 0.0)
  {
    v18 = *(double *)(*(_QWORD *)(a1 + 280) + 8 * v15) - v16;
    v19 = operations_research::glop::RevisedSimplex::ComputeHarrisRatioAndLeavingCandidates<false>(a1, v17, v18);
    *v9 = -1;
    if (v18 <= v19)
      goto LABEL_6;
  }
  else
  {
    v18 = v16 - *(double *)(*(_QWORD *)(a1 + 256) + 8 * v15);
    v19 = operations_research::glop::RevisedSimplex::ComputeHarrisRatioAndLeavingCandidates<true>(a1, v17, v18);
    *v9 = -1;
    if (v18 <= v19)
    {
LABEL_6:
      *v10 = v18;
      goto LABEL_126;
    }
  }
  v30 = *(char **)(a1 + 15984);
  *(_QWORD *)(a1 + 15992) = v30;
  v31 = *(_QWORD *)(a1 + 15944);
  if (v31 < 1)
  {
    v36 = 0.0;
    goto LABEL_109;
  }
  v97 = a7;
  v98 = v10;
  v95 = v12;
  v96 = a6;
  v32 = 0;
  v33 = (void **)(a1 + 15984);
  v34 = *(_QWORD *)(a1 + 15960);
  v35 = *(_QWORD *)(a1 + 15968);
  v36 = 0.0;
  v99 = v9;
  do
  {
    v37 = *(double *)(v35 + 8 * v32);
    if (v37 <= v19)
    {
      v38 = *(int *)(v34 + 4 * v32);
      v39 = fabs(*(double *)(*(_QWORD *)(a1 + 728) + 8 * v38));
      if (v39 >= v36)
      {
        if (v39 != v36)
          goto LABEL_37;
        if (v18 < 0.0)
        {
          if (v37 < v18)
            goto LABEL_38;
LABEL_49:
          if (v37 != v18)
          {
LABEL_37:
            v30 = *(char **)(a1 + 15984);
            *(_QWORD *)(a1 + 15992) = v30;
            *v9 = v38;
            v36 = v39;
            v18 = v37;
            goto LABEL_38;
          }
          v41 = *(_QWORD *)(a1 + 16000);
          if ((unint64_t)v30 < v41)
          {
            *(_DWORD *)v30 = v38;
            v42 = (uint64_t)(v30 + 4);
LABEL_66:
            *(_QWORD *)(a1 + 15992) = v42;
            v30 = (char *)v42;
            v9 = v99;
            goto LABEL_38;
          }
          v43 = (char *)*v33;
          v44 = v30 - (_BYTE *)*v33;
          v45 = v44 >> 2;
          v46 = (v44 >> 2) + 1;
          if (v46 >> 62)
            goto LABEL_132;
          v47 = v41 - (_QWORD)v43;
          if (v47 >> 1 > v46)
            v46 = v47 >> 1;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
            v46 = 0x3FFFFFFFFFFFFFFFLL;
          v93 = v46;
          v94 = v33;
          if (v46)
          {
            v92 = v30 - (_BYTE *)*v33;
            if (v46 >> 62)
              goto LABEL_133;
            v48 = operator new(4 * v46);
            v44 = v92;
            v49 = &v48[4 * v45];
            *v49 = v38;
            v42 = (uint64_t)(v49 + 1);
            if (v30 != v43)
            {
LABEL_60:
              v50 = v30 - 4 - v43;
              if (v50 < 0xBC
                || &v48[v44 - 4 - (v50 & 0xFFFFFFFFFFFFFFFCLL)] > &v48[v44 - 4]
                || &v30[-(v50 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v30 - 4
                || (unint64_t)(v30 - v48 - v44) < 0x20)
              {
                v51 = v30;
                v52 = v93;
              }
              else
              {
                v54 = (v50 >> 2) + 1;
                v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
                v51 = &v30[-v55];
                v49 = (_DWORD *)((char *)v49 - v55);
                v56 = &v48[4 * v45 - 16];
                v57 = v30 - 16;
                v58 = v54 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v59 = *(_OWORD *)v57;
                  *(v56 - 1) = *((_OWORD *)v57 - 1);
                  *v56 = v59;
                  v56 -= 2;
                  v57 -= 32;
                  v58 -= 8;
                }
                while (v58);
                v52 = v93;
                if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_63:
                  *(_QWORD *)(a1 + 15984) = v49;
                  *(_QWORD *)(a1 + 15992) = v42;
                  *(_QWORD *)(a1 + 16000) = &v48[4 * v52];
                  if (v43)
                    goto LABEL_64;
                  goto LABEL_65;
                }
              }
              do
              {
                v53 = *((_DWORD *)v51 - 1);
                v51 -= 4;
                *--v49 = v53;
              }
              while (v51 != v43);
              goto LABEL_63;
            }
          }
          else
          {
            v48 = 0;
            v49 = (_DWORD *)(4 * v45);
            *(_DWORD *)(4 * v45) = v38;
            v42 = 4 * v45 + 4;
            if (v30 != v43)
              goto LABEL_60;
          }
          *(_QWORD *)(a1 + 15984) = v49;
          *(_QWORD *)(a1 + 15992) = v42;
          *(_QWORD *)(a1 + 16000) = &v48[4 * v93];
          if (v43)
LABEL_64:
            operator delete(v43);
LABEL_65:
          v33 = v94;
          goto LABEL_66;
        }
        if (v37 >= 0.0 && v37 <= v18)
          goto LABEL_49;
      }
    }
LABEL_38:
    ++v32;
  }
  while (v32 != v31);
  v60 = *v33;
  if (*v33 == v30)
  {
    a6 = v96;
    a7 = v97;
    v12 = v95;
    v10 = v98;
  }
  else
  {
    v61 = *(_QWORD *)(a1 + 16000);
    v10 = v98;
    if ((unint64_t)v30 < v61)
    {
      *(_DWORD *)v30 = *v9;
      v62 = v30 + 4;
      a7 = v97;
      goto LABEL_108;
    }
    v63 = v30 - v60;
    v64 = (v30 - v60) >> 2;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 62)
LABEL_132:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v66 = v61 - (_QWORD)v60;
    if (v66 >> 1 > v65)
      v65 = v66 >> 1;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
      v67 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
    {
      if (v67 >> 62)
LABEL_133:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v68 = v33;
      v69 = operator new(4 * v67);
    }
    else
    {
      v68 = v33;
      v69 = 0;
    }
    v70 = &v69[4 * v64];
    *v70 = *v9;
    if ((unint64_t)(v63 - 4) < 0x2C || (unint64_t)(v60 - v69) < 0x20)
    {
      v71 = v30;
      v72 = &v69[4 * v64];
      a7 = v97;
      goto LABEL_104;
    }
    v86 = ((unint64_t)(v63 - 4) >> 2) + 1;
    v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
    v71 = &v30[-v87];
    v72 = (char *)&v70[v87 / 0xFFFFFFFFFFFFFFFCLL];
    v88 = &v69[4 * v64 - 16];
    v89 = v30 - 16;
    v90 = v86 & 0x7FFFFFFFFFFFFFF8;
    a7 = v97;
    do
    {
      v91 = *(_OWORD *)v89;
      *(v88 - 1) = *((_OWORD *)v89 - 1);
      *v88 = v91;
      v88 -= 2;
      v89 -= 32;
      v90 -= 8;
    }
    while (v90);
    if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_104:
        v73 = *((_DWORD *)v71 - 1);
        v71 -= 4;
        *((_DWORD *)v72 - 1) = v73;
        v72 -= 4;
      }
      while (v71 != v60);
    }
    *(_QWORD *)(a1 + 15984) = v72;
    v62 = (char *)(v70 + 1);
    *(_QWORD *)(a1 + 15992) = v70 + 1;
    *(_QWORD *)(a1 + 16000) = &v69[4 * v67];
    if (v60)
    {
      operator delete(v60);
      v60 = *v68;
    }
    else
    {
      v60 = v72;
    }
LABEL_108:
    *(_QWORD *)(a1 + 15992) = v62;
    LODWORD(v104.__r_.__value_.__l.__data_) = 0;
    HIDWORD(v104.__r_.__value_.__r.__words[0]) = ((unint64_t)(v62 - v60) >> 2) - 1;
    *v9 = *(_DWORD *)(*(_QWORD *)(a1 + 15984)
                    + 4
                    * (int)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v104, a1 + 16008, &v104));
    v12 = v95;
    a6 = v96;
  }
LABEL_109:
  if (v18 <= 0.0)
    v18 = *(double *)(a1 + 11848) * *(double *)(a1 + 11688) / v36;
  *v10 = v18;
  if (v36 >= *(double *)(a1 + 11728) * *(double *)(a1 + 808))
  {
LABEL_117:
    v78 = *v9;
    if ((_DWORD)v78 != -1)
    {
      v79 = *(double *)(*(_QWORD *)(a1 + 728) + 8 * v78) <= 0.0;
      v80 = *(int *)(*(_QWORD *)(a1 + 520) + 4 * v78);
      v81 = 256;
      if (a8 > 0.0 != v79)
        v81 = 280;
      *a6 = *(_QWORD *)(*(_QWORD *)(a1 + v81) + 8 * v80);
    }
  }
  else
  {
    if (operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840)))
    {
      if (*off_2540791F0[0] >= 1
        && (off_2540791F0[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_2540791F0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
      {
        v74 = google::LogMessage::LogMessage((google::LogMessage *)&v104, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1733);
        v75 = (_QWORD *)google::LogMessage::stream(v74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"Couldn't avoid pivoting by ", 27);
        v76 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" direction_infinity_norm_ = ", 28);
        v77 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" reduced cost = ", 16);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)&v104);
      }
      goto LABEL_117;
    }
    if (*off_2540791E8[0] >= 1
      && (off_2540791E8[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_2540791E8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
    {
      v82 = google::LogMessage::LogMessage((google::LogMessage *)&v104, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1719);
      v83 = (_QWORD *)google::LogMessage::stream(v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Refactorizing to avoid pivoting by ", 35);
      v84 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" direction_infinity_norm_ = ", 28);
      v85 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" reduced cost = ", 16);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)&v104);
    }
    *v12 = 1;
  }
LABEL_126:
  operations_research::glop::Status::Status(a7);
}

void sub_22DA16034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,_Unwind_Exception *exception_objecta,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (*(char *)(v38 - 121) < 0)
    operator delete(*(void **)(v38 - 144));
  _Unwind_Resume(exception_object);
}

double operations_research::glop::RevisedSimplex::ComputeHarrisRatioAndLeavingCandidates<true>(uint64_t a1, uint64_t *a2, double a3)
{
  double v6;
  double v7;
  double v8;
  _BOOL4 IsRefactorized;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v6 = *(double *)(a1 + 11720);
  v7 = *(double *)(a1 + 11688);
  v8 = *(double *)(a1 + 11848);
  a2[1] = 0;
  *((_BYTE *)a2 + 40) = 0;
  IsRefactorized = operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840));
  v10 = 11736;
  if (!IsRefactorized)
    v10 = 11704;
  v11 = *(int **)(a1 + 760);
  v12 = *(_QWORD *)(a1 + 768) - (_QWORD)v11;
  if (v12 >= 1)
  {
    v13 = v6 * v7;
    v14 = v7 * v8;
    v15 = *(double *)(a1 + v10);
    v16 = (unint64_t)v12 >> 2;
    v17 = *(_QWORD *)(a1 + 728);
    if (v16 <= 1)
      v18 = 1;
    else
      v18 = v16;
    while (1)
    {
      v22 = *v11++;
      v21 = v22;
      v23 = fabs(*(double *)(v17 + 8 * v22));
      if (v23 > v15)
      {
        v24 = *(double *)(*(_QWORD *)(a1 + 728) + 8 * v21);
        v25 = v24 <= 0.0 ? 256 : 280;
        v26 = (*(double *)(*(_QWORD *)(a1 + v25) + 8 * *(int *)(*(_QWORD *)(a1 + 520) + 4 * v21))
             - *(double *)(*(_QWORD *)(a1 + 5944) + 8 * *(int *)(*(_QWORD *)(a1 + 520) + 4 * v21)))
            / v24;
        if (v26 <= a3)
          break;
      }
LABEL_12:
      if (!--v18)
        return a3;
    }
    v27 = a2[1];
    if (v27 == a2[2])
    {
      if (!v27)
      {
        v28 = 4;
LABEL_23:
        v29 = (v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        v30 = (char *)operator new[]();
        v31 = v30;
        v32 = &v30[4 * v29];
        v27 = a2[1];
        if (v27 >= 1)
        {
          memmove(v30, (const void *)a2[3], 4 * v27);
          memmove(v32, (const void *)a2[4], 8 * v27);
        }
        v33 = *a2;
        *a2 = (uint64_t)v31;
        a2[3] = (uint64_t)v31;
        a2[4] = (uint64_t)v32;
        a2[2] = v29;
        if (v33)
        {
          MEMORY[0x22E31DF60](v33, 0x1000C8077774924);
          v27 = a2[1];
        }
        goto LABEL_8;
      }
      v28 = 2 * v27;
      if (v27 < 2 * v27)
        goto LABEL_23;
    }
LABEL_8:
    a2[1] = v27 + 1;
    v19 = a2[4];
    *(_DWORD *)(a2[3] + 4 * v27) = v21;
    *(double *)(v19 + 8 * v27) = v26;
    *((_BYTE *)a2 + 40) = 1;
    v20 = v14 / v23;
    if (v14 / v23 < v13 / v23 + v26)
      v20 = v13 / v23 + v26;
    if (v20 < a3)
      a3 = v20;
    goto LABEL_12;
  }
  return a3;
}

double operations_research::glop::RevisedSimplex::ComputeHarrisRatioAndLeavingCandidates<false>(uint64_t a1, uint64_t *a2, double a3)
{
  double v6;
  double v7;
  double v8;
  _BOOL4 IsRefactorized;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v6 = *(double *)(a1 + 11720);
  v7 = *(double *)(a1 + 11688);
  v8 = *(double *)(a1 + 11848);
  a2[1] = 0;
  *((_BYTE *)a2 + 40) = 0;
  IsRefactorized = operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840));
  v10 = 11736;
  if (!IsRefactorized)
    v10 = 11704;
  v11 = *(int **)(a1 + 760);
  v12 = *(_QWORD *)(a1 + 768) - (_QWORD)v11;
  if (v12 >= 1)
  {
    v13 = v6 * v7;
    v14 = v7 * v8;
    v15 = *(double *)(a1 + v10);
    v16 = (unint64_t)v12 >> 2;
    v17 = *(_QWORD *)(a1 + 728);
    if (v16 <= 1)
      v18 = 1;
    else
      v18 = v16;
    while (1)
    {
      v22 = *v11++;
      v21 = v22;
      v23 = fabs(*(double *)(v17 + 8 * v22));
      if (v23 > v15)
      {
        v24 = *(double *)(*(_QWORD *)(a1 + 728) + 8 * v21);
        v25 = v24 <= 0.0 ? 280 : 256;
        v26 = (*(double *)(*(_QWORD *)(a1 + 5944) + 8 * *(int *)(*(_QWORD *)(a1 + 520) + 4 * v21))
             - *(double *)(*(_QWORD *)(a1 + v25) + 8 * *(int *)(*(_QWORD *)(a1 + 520) + 4 * v21)))
            / v24;
        if (v26 <= a3)
          break;
      }
LABEL_12:
      if (!--v18)
        return a3;
    }
    v27 = a2[1];
    if (v27 == a2[2])
    {
      if (!v27)
      {
        v28 = 4;
LABEL_23:
        v29 = (v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        v30 = (char *)operator new[]();
        v31 = v30;
        v32 = &v30[4 * v29];
        v27 = a2[1];
        if (v27 >= 1)
        {
          memmove(v30, (const void *)a2[3], 4 * v27);
          memmove(v32, (const void *)a2[4], 8 * v27);
        }
        v33 = *a2;
        *a2 = (uint64_t)v31;
        a2[3] = (uint64_t)v31;
        a2[4] = (uint64_t)v32;
        a2[2] = v29;
        if (v33)
        {
          MEMORY[0x22E31DF60](v33, 0x1000C8077774924);
          v27 = a2[1];
        }
        goto LABEL_8;
      }
      v28 = 2 * v27;
      if (v27 < 2 * v27)
        goto LABEL_23;
    }
LABEL_8:
    a2[1] = v27 + 1;
    v19 = a2[4];
    *(_DWORD *)(a2[3] + 4 * v27) = v21;
    *(double *)(v19 + 8 * v27) = v26;
    *((_BYTE *)a2 + 40) = 1;
    v20 = v14 / v23;
    if (v14 / v23 < v13 / v23 + v26)
      v20 = v13 / v23 + v26;
    if (v20 < a3)
      a3 = v20;
    goto LABEL_12;
  }
  return a3;
}

void operations_research::glop::RevisedSimplex::PrimalPhaseIChooseLeavingVariableRow(uint64_t a1, int a2, _BYTE *a3, _DWORD *a4, double *a5, _QWORD *a6, double a7)
{
  double v9;
  double v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  int v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v39;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  double *v49;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  double *v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double *v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  double v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  __int128 v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  int64_t v95;
  double *v96;
  __int128 v97;
  double *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  BOOL v104;
  double v105;
  double v106;
  double *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  double *v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  double *v123;
  unint64_t v124;
  double v125;
  double v126;
  double v131;
  __int128 v132;
  __int128 v133;

  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v132, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1805, 2);
    v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v132);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"refactorize", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" == NULL", 8);
LABEL_9:
    google::LogMessage::~LogMessage((google::LogMessage *)&v132);
    return;
  }
  if (!a4)
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v132, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1806, 2);
    v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v132);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"leaving_row", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" == NULL", 8);
    goto LABEL_9;
  }
  if (!a5)
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v132, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1807, 2);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v132);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"step_length", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" == NULL", 8);
    goto LABEL_9;
  }
  v9 = *(double *)(*(_QWORD *)(a1 + 5944) + 8 * a2);
  if (a7 <= 0.0)
  {
    v10 = *(double *)(*(_QWORD *)(a1 + 5944) + 8 * a2);
    v9 = *(double *)(*(_QWORD *)(a1 + 280) + 8 * a2);
  }
  else
  {
    v10 = *(double *)(*(_QWORD *)(a1 + 256) + 8 * a2);
  }
  v17 = v9 - v10;
  v18 = *(_QWORD *)(a1 + 760);
  v19 = *(_QWORD *)(a1 + 768) - v18;
  if (v19 >= 1)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = *(double *)(a1 + 11688);
    v25 = *(_QWORD *)(a1 + 728);
    v26 = (unint64_t)v19 >> 2;
    if (v26 <= 1)
      v27 = 1;
    else
      v27 = v26;
    v131 = a7;
    while (1)
    {
      v29 = *(_DWORD *)(v18 + 4 * v23);
      v30 = *(double *)(v25 + 8 * v29);
      v31 = fabs(v30);
      if (v31 < v24)
      {
LABEL_17:
        v28 = v21;
        goto LABEL_18;
      }
      v32 = 8 * *(int *)(*(_QWORD *)(a1 + 520) + 4 * v29);
      v33 = *(double *)(*(_QWORD *)(a1 + 5944) + v32);
      v34 = *(double *)(*(_QWORD *)(a1 + 256) + v32);
      v35 = *(double *)(*(_QWORD *)(a1 + 280) + v32);
      if (a7 <= 0.0)
        v36 = -v30;
      else
        v36 = *(double *)(v25 + 8 * v29);
      v37 = (v34 - v24 - v33) / v36;
      if (v37 < 0.0 || v37 >= v17)
        goto LABEL_30;
      if (v21 < (double *)v22)
      {
        *(_DWORD *)v21 = v29;
        v21[1] = v37;
        v21[2] = v31;
        v21[3] = v34;
        v21 += 4;
LABEL_30:
        v39 = (v24 + v35 - v33) / v36;
        if (v39 < 0.0 || v39 >= v17)
          goto LABEL_17;
        goto LABEL_35;
      }
      v42 = ((char *)v21 - (char *)v20) >> 5;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 59)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v22 - (char *)v20) >> 4 > v43)
        v43 = (v22 - (char *)v20) >> 4;
      if ((unint64_t)(v22 - (char *)v20) >= 0x7FFFFFFFFFFFFFE0)
        v44 = 0x7FFFFFFFFFFFFFFLL;
      else
        v44 = v43;
      if (v44)
      {
        if (v44 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v45 = (char *)operator new(32 * v44);
        a7 = v131;
        v46 = (uint64_t)&v45[32 * v42];
        *(_DWORD *)v46 = v29;
        *(double *)(v46 + 8) = v37;
        *(double *)(v46 + 16) = v31;
        *(double *)(v46 + 24) = v34;
        if (v21 != v20)
        {
LABEL_46:
          v47 = v46;
          do
          {
            v48 = *((_OWORD *)v21 - 1);
            v49 = (double *)(v47 - 32);
            *(_OWORD *)(v47 - 32) = *((_OWORD *)v21 - 2);
            *(_OWORD *)(v47 - 16) = v48;
            v21 -= 4;
            v47 -= 32;
          }
          while (v21 != v20);
          v22 = &v45[32 * v44];
          v21 = (double *)(v46 + 32);
          if (!v20)
            goto LABEL_50;
LABEL_49:
          operator delete(v20);
          a7 = v131;
          goto LABEL_50;
        }
      }
      else
      {
        v45 = 0;
        v46 = 32 * v42;
        *(_DWORD *)v46 = v29;
        *(double *)(v46 + 8) = v37;
        *(double *)(v46 + 16) = v31;
        *(double *)(v46 + 24) = v34;
        if (v21 != v20)
          goto LABEL_46;
      }
      v49 = (double *)v46;
      v22 = &v45[32 * v44];
      v21 = (double *)(v46 + 32);
      if (v20)
        goto LABEL_49;
LABEL_50:
      v20 = v49;
      v39 = (v24 + v35 - v33) / v36;
      if (v39 < 0.0 || v39 >= v17)
        goto LABEL_17;
LABEL_35:
      v41 = *(_DWORD *)(v18 + 4 * v23);
      if (v21 >= (double *)v22)
      {
        v51 = ((char *)v21 - (char *)v20) >> 5;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 59)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v22 - (char *)v20) >> 4 > v52)
          v52 = (v22 - (char *)v20) >> 4;
        if ((unint64_t)(v22 - (char *)v20) >= 0x7FFFFFFFFFFFFFE0)
          v53 = 0x7FFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
        {
          if (v53 >> 59)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v54 = (char *)operator new(32 * v53);
          a7 = v131;
          v55 = (uint64_t)&v54[32 * v51];
          *(_DWORD *)v55 = v41;
          *(double *)(v55 + 8) = v39;
          *(double *)(v55 + 16) = v31;
          *(double *)(v55 + 24) = v35;
          if (v21 != v20)
          {
LABEL_65:
            v56 = (_QWORD *)v55;
            do
            {
              v57 = *((_OWORD *)v21 - 1);
              *((_OWORD *)v56 - 2) = *((_OWORD *)v21 - 2);
              *((_OWORD *)v56 - 1) = v57;
              v56 -= 4;
              v21 -= 4;
            }
            while (v21 != v20);
            v21 = v20;
            v20 = (double *)v56;
            v22 = &v54[32 * v53];
            v28 = (double *)(v55 + 32);
            if (!v21)
              goto LABEL_18;
LABEL_74:
            operator delete(v21);
            a7 = v131;
            goto LABEL_18;
          }
        }
        else
        {
          v54 = 0;
          v55 = 32 * v51;
          *(_DWORD *)v55 = v41;
          *(double *)(v55 + 8) = v39;
          *(double *)(v55 + 16) = v31;
          *(double *)(v55 + 24) = v35;
          if (v21 != v20)
            goto LABEL_65;
        }
        v20 = (double *)v55;
        v22 = &v54[32 * v53];
        v28 = (double *)(v55 + 32);
        if (v21)
          goto LABEL_74;
      }
      else
      {
        *(_DWORD *)v21 = v41;
        v21[1] = v39;
        v21[2] = v31;
        v28 = v21 + 4;
        v21[3] = v35;
      }
LABEL_18:
      ++v23;
      v21 = v28;
      if (v23 == v27)
        goto LABEL_76;
    }
  }
  v28 = 0;
  v20 = 0;
LABEL_76:
  if ((char *)v28 - (char *)v20 >= 33)
  {
    v58 = ((char *)v28 - (char *)v20) >> 5;
    v59 = (unint64_t)(v58 - 2) >> 1;
    v60 = v59;
    do
    {
      if (v59 < v60)
        goto LABEL_80;
      v62 = (2 * v60) | 1;
      v61 = &v20[4 * v62];
      if (2 * v60 + 2 < v58)
      {
        v63 = v61[1];
        v64 = v61[5];
        if (v63 != v64)
        {
          if (v63 <= v64)
            goto LABEL_87;
          goto LABEL_86;
        }
        v65 = v20[4 * v62 + 2];
        v66 = v61[6];
        if (v65 != v66)
        {
          if (v65 >= v66)
            goto LABEL_87;
LABEL_86:
          v61 += 4;
          v62 = 2 * v60 + 2;
          goto LABEL_87;
        }
        if (*(_DWORD *)v61 > *((_DWORD *)v61 + 8))
          goto LABEL_86;
      }
LABEL_87:
      v67 = &v20[4 * v60];
      v68 = v61[1];
      v69 = v67[1];
      if (v68 == v69)
      {
        v70 = v61[2];
        v71 = v67[2];
        if (v70 == v71)
        {
          if (*(_DWORD *)v61 > *(_DWORD *)v67)
            goto LABEL_80;
        }
        else if (v70 < v71)
        {
          goto LABEL_80;
        }
        v73 = *v67;
        v72 = *((_QWORD *)v67 + 3);
        v75 = *((_OWORD *)v61 + 1);
        *(_OWORD *)v67 = *(_OWORD *)v61;
        for (*((_OWORD *)v67 + 1) = v75; v59 >= v62; *((_OWORD *)v77 + 1) = v76)
        {
LABEL_99:
          v77 = v61;
          v78 = 2 * v62;
          v62 = (2 * v62) | 1;
          v61 = &v20[4 * v62];
          v79 = v78 + 2;
          if (v79 >= v58)
            goto LABEL_104;
          v80 = v61[1];
          v81 = v61[5];
          if (v80 == v81)
          {
            v82 = v20[4 * v62 + 2];
            v83 = v61[6];
            if (v82 == v83)
            {
              if (*(_DWORD *)v61 <= *((_DWORD *)v61 + 8))
                goto LABEL_104;
LABEL_103:
              v61 += 4;
              v62 = v79;
              goto LABEL_104;
            }
            if (v82 < v83)
              goto LABEL_103;
          }
          else if (v80 > v81)
          {
            goto LABEL_103;
          }
LABEL_104:
          v84 = v61[1];
          if (v84 == v69)
          {
            v85 = v61[2];
            if (v85 == v71)
            {
              if (*(_DWORD *)v61 > SLODWORD(v73))
                goto LABEL_78;
            }
            else if (v85 < v71)
            {
LABEL_78:
              v61 = v77;
              break;
            }
          }
          else if (v84 > v69)
          {
            goto LABEL_78;
          }
          v76 = *((_OWORD *)v61 + 1);
          *(_OWORD *)v77 = *(_OWORD *)v61;
        }
      }
      else
      {
        if (v68 > v69)
          goto LABEL_80;
        v71 = v67[2];
        v72 = *((_QWORD *)v67 + 3);
        v73 = *v67;
        v74 = *((_OWORD *)v61 + 1);
        *(_OWORD *)v67 = *(_OWORD *)v61;
        *((_OWORD *)v67 + 1) = v74;
        if (v59 >= v62)
          goto LABEL_99;
      }
      *v61 = v73;
      v61[1] = v69;
      v61[2] = v71;
      *((_QWORD *)v61 + 3) = v72;
LABEL_80:
      v104 = v60-- <= 0;
    }
    while (!v104);
  }
  *a4 = -1;
  if (v20 == v28)
    goto LABEL_162;
  v86 = fabs(a7);
  v87 = 0.0;
LABEL_122:
  v89 = v20[2];
  if (v89 > v87)
  {
    v90 = *((_QWORD *)v20 + 3);
    v17 = v20[1];
    *a4 = *(_QWORD *)v20;
    *a6 = v90;
    v87 = v89;
  }
  v86 = v86 - v89;
  if (v86 > 0.0)
  {
    v91 = (char *)v28 - (char *)v20;
    if ((char *)v28 - (char *)v20 < 33)
      goto LABEL_121;
    v92 = 0;
    v93 = v91 >> 5;
    v94 = *((_OWORD *)v20 + 1);
    v132 = *(_OWORD *)v20;
    v133 = v94;
    v95 = (unint64_t)((v91 >> 5) - 2) >> 1;
    v96 = v20;
    while (1)
    {
      v98 = v96;
      v99 = v92 + 1;
      v96 += 4 * v92 + 4;
      v100 = 2 * v92;
      v92 = (2 * v92) | 1;
      v101 = v100 + 2;
      if (v101 >= v93)
        goto LABEL_128;
      v102 = v96[1];
      v103 = v96[5];
      v104 = v102 <= v103;
      if (v102 == v103)
      {
        v105 = v98[4 * v99 + 2];
        v106 = v96[6];
        if (v105 != v106)
        {
          if (v105 >= v106)
            goto LABEL_128;
          goto LABEL_127;
        }
        v104 = *(_DWORD *)v96 <= *((_DWORD *)v96 + 8);
      }
      if (v104)
        goto LABEL_128;
LABEL_127:
      v96 += 4;
      v92 = v101;
LABEL_128:
      v97 = *((_OWORD *)v96 + 1);
      *(_OWORD *)v98 = *(_OWORD *)v96;
      *((_OWORD *)v98 + 1) = v97;
      if (v92 > v95)
      {
        v107 = v28 - 4;
        if (v96 == v28 - 4)
        {
          v88 = v133;
          *(_OWORD *)v96 = v132;
          *((_OWORD *)v96 + 1) = v88;
        }
        else
        {
          v108 = *((_OWORD *)v28 - 1);
          *(_OWORD *)v96 = *(_OWORD *)v107;
          *((_OWORD *)v96 + 1) = v108;
          v109 = v133;
          *(_OWORD *)v107 = v132;
          *((_OWORD *)v28 - 1) = v109;
          v110 = (char *)v96 - (char *)v20 + 32;
          if (v110 >= 33)
          {
            v111 = ((unint64_t)v110 >> 5) - 2;
            v112 = v111 >> 1;
            v113 = &v20[4 * (v111 >> 1)];
            v114 = v113[1];
            v115 = v96[1];
            if (v114 == v115)
            {
              v116 = v113[2];
              v117 = v96[2];
              if (v116 == v117)
              {
                if (*(_DWORD *)v113 > *(_DWORD *)v96)
                {
LABEL_148:
                  v119 = *(_QWORD *)v96;
                  v118 = *((_QWORD *)v96 + 3);
                  v121 = *((_OWORD *)v113 + 1);
                  *(_OWORD *)v96 = *(_OWORD *)v113;
                  *((_OWORD *)v96 + 1) = v121;
                  if (v111 < 2)
                    goto LABEL_158;
                  while (1)
                  {
LABEL_152:
                    v123 = v113;
                    v124 = v112 - 1;
                    v112 = (v112 - 1) >> 1;
                    v113 = &v20[4 * v112];
                    v125 = v113[1];
                    if (v125 == v115)
                    {
                      v126 = v113[2];
                      if (v126 == v117)
                      {
                        if (*(_DWORD *)v113 <= (int)v119)
                          goto LABEL_157;
                      }
                      else if (v126 >= v117)
                      {
LABEL_157:
                        v113 = v123;
                        goto LABEL_158;
                      }
                    }
                    else if (v125 <= v115)
                    {
                      goto LABEL_157;
                    }
                    v122 = *((_OWORD *)v113 + 1);
                    *(_OWORD *)v123 = *(_OWORD *)v113;
                    *((_OWORD *)v123 + 1) = v122;
                    if (v124 <= 1)
                      goto LABEL_158;
                  }
                }
              }
              else if (v116 < v117)
              {
                goto LABEL_148;
              }
            }
            else if (v114 > v115)
            {
              v117 = v96[2];
              v118 = *((_QWORD *)v96 + 3);
              v119 = *(_QWORD *)v96;
              v120 = *((_OWORD *)v113 + 1);
              *(_OWORD *)v96 = *(_OWORD *)v113;
              *((_OWORD *)v96 + 1) = v120;
              if (v111 >= 2)
                goto LABEL_152;
LABEL_158:
              *(_QWORD *)v113 = v119;
              v113[1] = v115;
              v113[2] = v117;
              *((_QWORD *)v113 + 3) = v118;
            }
          }
        }
LABEL_121:
        v28 -= 4;
        if (v20 == v28)
          break;
        goto LABEL_122;
      }
    }
  }
  if (*a4 == -1
    || v87 >= *(double *)(a1 + 11728) * *(double *)(a1 + 808)
    || operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840)))
  {
LABEL_162:
    *a5 = v17;
    if (v20)
LABEL_163:
      operator delete(v20);
  }
  else
  {
    *a3 = 1;
    if (v20)
      goto LABEL_163;
  }
}

void sub_22DA16E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_22DA16E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::glop::RevisedSimplex::DualChooseLeavingVariableRow(_QWORD *a1@<X0>, int *a2@<X1>, double *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v6;
  _QWORD *EdgeSquaredNorms;
  int v9;
  int *v10;
  _QWORD *PrimalSquaredInfeasibilities;
  uint64_t PrimalInfeasiblePositions;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  int *v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  char *v35;
  char *v36;
  unint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  int *v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  int *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _QWORD *v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  int *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  _OWORD *v69;
  int *v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  int v74;
  int64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int *v80;
  _BYTE *v81;
  int *v82;
  unint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  int v93;
  uint64_t v94;
  double v95;
  double *v96;
  double v97;
  operations_research::glop::Status *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  int *v104;
  void **v105;
  unint64_t v106;
  std::string v107;
  std::string v108;
  _BYTE v109[16];
  std::string v110;

  if (a2)
  {
    if (a3)
    {
      v6 = a1;
      EdgeSquaredNorms = (_QWORD *)operations_research::glop::DualEdgeNorms::GetEdgeSquaredNorms((operations_research::glop::DualEdgeNorms *)(a1 + 786));
      v9 = -1;
      v10 = a2;
      *a2 = -1;
      PrimalSquaredInfeasibilities = (_QWORD *)operations_research::glop::VariableValues::GetPrimalSquaredInfeasibilities((operations_research::glop::VariableValues *)(v6 + 738));
      v105 = (void **)(v6 + 1998);
      v6[1999] = v6[1998];
      PrimalInfeasiblePositions = operations_research::glop::VariableValues::GetPrimalInfeasiblePositions((operations_research::glop::VariableValues *)(v6 + 738));
      v13 = *(unint64_t **)(PrimalInfeasiblePositions + 8);
      v14 = *(unint64_t **)(PrimalInfeasiblePositions + 16);
      v100 = (operations_research::glop::Status *)a5;
      if (v13 == v14)
      {
        v24 = 0;
        v16 = 0;
        v17 = v10;
        v25 = *(unsigned int *)(PrimalInfeasiblePositions + 40);
        if ((_DWORD)v25 == -1)
          goto LABEL_47;
      }
      else
      {
        v15 = *v13;
        if (*v13)
        {
          v16 = 0;
          v17 = v10;
          goto LABEL_46;
        }
        v27 = 0;
        v28 = (char *)v14 - (char *)v13;
        v29 = v28 >> 3;
        v30 = (int)((uint64_t)v28 >> 3);
        if ((int)(v28 >> 3) <= 1)
          v31 = 1;
        else
          v31 = v28 >> 3;
        if (v30 <= 1)
          v30 = 1;
        v32 = v30 - 1;
        while (v32 != v27)
        {
          v33 = v27 + 1;
          if (v13[++v27])
          {
            v31 = v33;
            break;
          }
        }
        v17 = a2;
        if (v31 != (_DWORD)v29)
        {
          v15 = v13[v31];
          v16 = v31 << 6;
LABEL_46:
          v9 = __clz(__rbit64(v15)) & 0x3F | v16;
          v24 = (v15 - 1) & v15;
          v25 = *(unsigned int *)(PrimalInfeasiblePositions + 40);
          if (v9 == (_DWORD)v25)
          {
LABEL_47:
            v35 = (char *)v6[1998];
            v36 = (char *)v6[1999];
            if (v35 == v36)
            {
              v74 = *v17;
              v39 = (uint64_t)v100;
              if (*v17 != -1)
              {
LABEL_111:
                v94 = *(int *)(v6[65] + 4 * v74);
                v95 = *(double *)(v6[743] + 8 * v94);
                v96 = (double *)(v6[32] + 8 * v94);
                v97 = *v96;
                if (v95 >= *v96)
                {
                  v96 = (double *)(v6[35] + 8 * v94);
                  v97 = *v96;
                }
                *a3 = v97 - v95;
                *a4 = *(_QWORD *)v96;
              }
LABEL_114:
              operations_research::glop::Status::Status(v39);
              return;
            }
            v37 = v6[2000];
            if ((unint64_t)v36 < v37)
            {
              *(_DWORD *)v36 = *v17;
              v38 = v36 + 4;
              v39 = (uint64_t)v100;
              v40 = v17;
              goto LABEL_110;
            }
            v75 = v36 - v35;
            v76 = (v36 - v35) >> 2;
            v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 62)
LABEL_116:
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v78 = v37 - (_QWORD)v35;
            if (v78 >> 1 > v77)
              v77 = v78 >> 1;
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
              v79 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v79 = v77;
            if (v79)
            {
              if (v79 >> 62)
LABEL_117:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v80 = v17;
              v81 = operator new(4 * v79);
              v17 = v80;
              v82 = (int *)&v81[4 * v76];
              *v82 = *v80;
              v83 = v75 - 4;
              if ((unint64_t)(v75 - 4) < 0x2C)
                goto LABEL_100;
            }
            else
            {
              v81 = 0;
              v82 = (int *)(4 * v76);
              *(_DWORD *)(4 * v76) = *v17;
              v83 = v75 - 4;
              if ((unint64_t)(v75 - 4) < 0x2C)
              {
LABEL_100:
                v84 = v82;
                do
                {
LABEL_106:
                  v92 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *--v84 = v92;
                }
                while (v36 != v35);
LABEL_107:
                v40 = v17;
                v6[1998] = v84;
                v38 = v82 + 1;
                v6[1999] = v82 + 1;
                v6[2000] = &v81[4 * v79];
                if (v35)
                  operator delete(v35);
                v39 = (uint64_t)v100;
LABEL_110:
                v6[1999] = v38;
                v93 = (((unint64_t)v38 - v6[1998]) >> 2) - 1;
                LODWORD(v110.__r_.__value_.__l.__data_) = 0;
                HIDWORD(v110.__r_.__value_.__r.__words[0]) = v93;
                v74 = *(_DWORD *)(v6[1998]
                                + 4
                                * (int)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v110, (uint64_t)(v6 + 2001), &v110));
                *v40 = v74;
                if (v74 != -1)
                  goto LABEL_111;
                goto LABEL_114;
              }
            }
            v84 = v82;
            if ((unint64_t)(v35 - v81) >= 0x20)
            {
              v85 = (v83 >> 2) + 1;
              v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
              v87 = &v36[-v86];
              v84 = &v82[v86 / 0xFFFFFFFFFFFFFFFCLL];
              v88 = &v81[4 * v76 - 16];
              v89 = v36 - 16;
              v90 = v85 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v91 = *(_OWORD *)v89;
                *(v88 - 1) = *((_OWORD *)v89 - 1);
                *v88 = v91;
                v88 -= 2;
                v89 -= 32;
                v90 -= 8;
              }
              while (v90);
              v36 = v87;
              if (v85 == (v85 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_107;
            }
            goto LABEL_106;
          }
          goto LABEL_50;
        }
        v24 = 0;
        v16 = 0;
        v9 = -1;
        v25 = *(unsigned int *)(PrimalInfeasiblePositions + 40);
        if ((_DWORD)v25 == -1)
          goto LABEL_47;
      }
LABEL_50:
      v41 = 0.0;
      v101 = PrimalInfeasiblePositions;
      v102 = PrimalSquaredInfeasibilities;
      v103 = EdgeSquaredNorms;
      v104 = v17;
      while (1)
      {
        v42 = 8 * v9;
        v43 = *(double *)(*EdgeSquaredNorms + v42);
        v44 = *(double *)(*PrimalSquaredInfeasibilities + v42);
        if (v44 >= v41 * v43)
        {
          if (v44 == v41 * v43)
          {
            v45 = (int *)v6[1999];
            v46 = v6[2000];
            if ((unint64_t)v45 >= v46)
            {
              v54 = v6;
              v55 = v25;
              v56 = (int *)*v105;
              v57 = (char *)v45 - (_BYTE *)*v105;
              v58 = v57 >> 2;
              v59 = (v57 >> 2) + 1;
              if (v59 >> 62)
                goto LABEL_116;
              v60 = v46 - (_QWORD)v56;
              if (v60 >> 1 > v59)
                v59 = v60 >> 1;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                v59 = 0x3FFFFFFFFFFFFFFFLL;
              v106 = v59;
              if (v59)
              {
                if (v59 >> 62)
                  goto LABEL_117;
                v61 = operator new(4 * v59);
                v62 = (int *)&v61[4 * v58];
                *v62 = v9;
                v63 = (uint64_t)(v62 + 1);
                if (v45 != v56)
                {
LABEL_77:
                  v64 = (char *)(v45 - 1) - (char *)v56;
                  if (v64 < 0x2C)
                  {
                    v25 = v55;
                    v6 = v54;
                    goto LABEL_85;
                  }
                  v65 = (char *)v45 - &v61[v57];
                  v25 = v55;
                  v6 = v54;
                  if (v65 < 0x20)
                    goto LABEL_120;
                  v66 = (v64 >> 2) + 1;
                  v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
                  v68 = &v45[v67 / 0xFFFFFFFFFFFFFFFCLL];
                  v62 = (int *)((char *)v62 - v67);
                  v69 = &v61[4 * v58 - 16];
                  v70 = v45 - 4;
                  v71 = v66 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v72 = *(_OWORD *)v70;
                    *(v69 - 1) = *((_OWORD *)v70 - 1);
                    *v69 = v72;
                    v69 -= 2;
                    v70 -= 8;
                    v71 -= 8;
                  }
                  while (v71);
                  v45 = v68;
                  if (v66 != (v66 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_120:
                    do
                    {
LABEL_85:
                      v73 = *--v45;
                      *--v62 = v73;
                    }
                    while (v45 != v56);
                  }
LABEL_86:
                  v6[1998] = v62;
                  v6[1999] = v63;
                  v6[2000] = &v61[4 * v106];
                  if (v56)
                    operator delete(v56);
                  EdgeSquaredNorms = v103;
                  v17 = v104;
                  PrimalInfeasiblePositions = v101;
                  PrimalSquaredInfeasibilities = v102;
                  v6[1999] = v63;
                  goto LABEL_51;
                }
              }
              else
              {
                v61 = 0;
                v62 = (int *)(4 * v58);
                *(_DWORD *)(4 * v58) = v9;
                v63 = 4 * v58 + 4;
                if (v45 != v56)
                  goto LABEL_77;
              }
              v25 = v55;
              v6 = v54;
              goto LABEL_86;
            }
            *v45 = v9;
            v6[1999] = v45 + 1;
          }
          else
          {
            v6[1999] = v6[1998];
            *v17 = v9;
            v41 = v44 / v43;
          }
        }
LABEL_51:
        if (v24)
        {
LABEL_52:
          v9 = (__clz(__rbit64(v24)) & 0x3F) + v16;
          v24 &= v24 - 1;
          if (v9 == (_DWORD)v25)
            goto LABEL_47;
        }
        else
        {
          v47 = *(_QWORD *)(PrimalInfeasiblePositions + 8);
          v48 = *(_QWORD *)(PrimalInfeasiblePositions + 16) - v47;
          v49 = (unint64_t)v48 >> 3;
          v50 = (int)(v48 >> 3);
          if ((v16 >> 6) + 1 > (int)v49)
            v51 = (v16 >> 6) + 1;
          else
            v51 = v49;
          v52 = ((uint64_t)v16 >> 6) + 1;
          while (v52 < v50)
          {
            if (*(_QWORD *)(v47 + 8 * v52++))
            {
              v51 = v52 - 1;
              break;
            }
          }
          if (v51 != (_DWORD)v49)
          {
            v24 = *(_QWORD *)(v47 + 8 * v51);
            v16 = v51 << 6;
            goto LABEL_52;
          }
          v24 = 0;
          v9 = -1;
          if ((_DWORD)v25 == -1)
            goto LABEL_47;
        }
      }
    }
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v110.__r_.__value_.__r.__words[1] = xmmword_22DCE5C10;
    strcpy(v110.__r_.__value_.__l.__data_, "cost_variation must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v109, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1911, 2);
    v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v109);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v110;
    else
      v22 = (std::string *)v110.__r_.__value_.__r.__words[0];
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      size = v110.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v109);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v107, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
    else
      v107 = v110;
    operations_research::glop::Status::Status(a5, 3, (__int128 *)&v107);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    {
      v26 = (void *)v107.__r_.__value_.__r.__words[0];
      goto LABEL_42;
    }
  }
  else
  {
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v110.__r_.__value_.__r.__words[1] = xmmword_22DCE7550;
    strcpy(v110.__r_.__value_.__l.__data_, "leaving_row must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v109, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 1910, 2);
    v18 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v109);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v110;
    else
      v19 = (std::string *)v110.__r_.__value_.__r.__words[0];
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    else
      v20 = v110.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    google::LogMessage::~LogMessage((google::LogMessage *)v109);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v108, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
    else
      v108 = v110;
    operations_research::glop::Status::Status(a5, 3, (__int128 *)&v108);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    {
      v26 = (void *)v108.__r_.__value_.__r.__words[0];
LABEL_42:
      operator delete(v26);
    }
  }
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
}

void sub_22DA1761C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 105) < 0)
    operator delete(*(void **)(v33 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t *operations_research::glop::RevisedSimplex::DualPhaseIUpdatePrice(uint64_t a1, int a2, int a3)
{
  uint64_t *result;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  int v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  int v30;
  BOOL v31;

  result = (uint64_t *)operations_research::glop::VariablesInfo::GetTypeRow((operations_research::glop::VariablesInfo *)(a1 + 5480));
  v7 = *(double *)(a1 + 11704);
  v8 = *(_QWORD *)(a1 + 360);
  v9 = *(_QWORD *)(a1 + 728);
  v10 = *(double *)(v8 + 8 * a2) / *(double *)(v9 + 8 * a2);
  v11 = *(int **)(a1 + 760);
  v12 = *(_QWORD *)(a1 + 768) - (_QWORD)v11;
  if (v12 >= 1)
  {
    v13 = (unint64_t)v12 >> 2;
    v14 = *(_QWORD *)(a1 + 520);
    v15 = *result;
    if (v13 <= 1)
      v13 = 1;
    do
    {
      while (1)
      {
        v18 = *v11++;
        v17 = v18;
        v19 = v18;
        v20 = 8 * v18;
        v21 = *(double *)(v8 + v20) - *(double *)(v9 + v20) * v10;
        *(double *)(v8 + v20) = v21;
        if (v21 != 0.0)
          break;
        v16 = 1 << v17;
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 392) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~v16;
        if (!--v13)
          goto LABEL_21;
      }
      v22 = *(unsigned __int8 *)(v15 + *(int *)(v14 + 4 * v17));
      if ((v22 - 3) < 2 || (v21 < -v7 ? (v23 = v22 == 2) : (v23 = 0), v23))
      {
        v16 = 1 << v17;
      }
      else
      {
        v16 = 1 << v17;
        if (v21 <= v7 || v22 != 1)
          goto LABEL_9;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 392) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= v16;
      --v13;
    }
    while (v13);
  }
LABEL_21:
  v25 = 8 * a2;
  *(double *)(v8 + v25) = v10;
  v26 = *(_QWORD *)(a1 + 328);
  v27 = 8 * a3;
  *(double *)(v8 + v25) = v10 - *(double *)(v26 + v27);
  if (*(double *)(v26 + v27) != 0.0)
    --*(_DWORD *)(a1 + 352);
  *(_QWORD *)(v26 + 8 * a3) = 0;
  *(_QWORD *)(v26 + 8 * *(int *)(*(_QWORD *)(a1 + 520) + 4 * a2)) = 0;
  v28 = *(double *)(v8 + 8 * a2);
  if (v28 == 0.0)
  {
    v29 = 1 << a2;
LABEL_25:
    *(_QWORD *)(*(_QWORD *)(a1 + 392) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~v29;
    return result;
  }
  v30 = *(unsigned __int8 *)(*result + a3);
  if ((v30 - 3) < 2 || (v28 < -v7 ? (v31 = v30 == 2) : (v31 = 0), v31))
  {
    v29 = 1 << a2;
  }
  else
  {
    v29 = 1 << a2;
    if (v28 <= v7 || v30 != 1)
      goto LABEL_25;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 392) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= v29;
  return result;
}

void operations_research::glop::RevisedSimplex::DualPhaseIChooseLeavingVariableRow(uint64_t a1@<X0>, int *a2@<X1>, double *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  int *v8;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type size;
  int v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t IsRelevantBitRow;
  _QWORD *EdgeSquaredNorms;
  char *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v46;
  int v47;
  int v48;
  int **NonZeroPositions;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  int *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  _BYTE *v80;
  unint64_t v81;
  char *v82;
  int v83;
  _QWORD *v84;
  double *v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  int *v95;
  unint64_t v96;
  char *v97;
  int *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  double *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  int *v110;
  void **v111;
  unint64_t v112;
  std::string v113;
  std::string v114;
  _BYTE v115[16];
  std::string v116;

  if (a2)
  {
    if (a3)
    {
      v8 = a2;
      if (*(_BYTE *)(a1 + 9387) || *(_BYTE *)(a1 + 9389) || *(_QWORD *)(a1 + 360) == *(_QWORD *)(a1 + 368))
      {
        *(_DWORD *)(a1 + 352) = 0;
        v10 = *(int *)(a1 + 1);
        v116.__r_.__value_.__r.__words[0] = 0;
        v11 = v10 << 32;
        v12 = *(char **)(a1 + 360);
        v13 = (uint64_t)(*(_QWORD *)(a1 + 368) - (_QWORD)v12) >> 3;
        if (v10 <= v13)
        {
          if (v10 < v13)
            *(_QWORD *)(a1 + 368) = &v12[8 * v10];
        }
        else
        {
          std::vector<double>::__append(a1 + 360, v10 - v13, (uint64_t *)&v116);
          v12 = *(char **)(a1 + 360);
        }
        bzero(v12, v11 >> 29);
        v20 = *(_DWORD *)(a1 + 1) & ~(*(int *)(a1 + 1) >> 31);
        *(_DWORD *)(a1 + 384) = v20;
        v21 = (v20 + 63) >> 6;
        v22 = *(char **)(a1 + 392);
        v23 = *(_QWORD *)(a1 + 400) - (_QWORD)v22;
        v24 = v23 >> 3;
        v116.__r_.__value_.__r.__words[0] = 0;
        if (v21 <= v23 >> 3)
        {
          if (v21 < v23 >> 3)
            *(_QWORD *)(a1 + 400) = &v22[8 * v21];
        }
        else
        {
          std::vector<unsigned long long>::__append(a1 + 392, v21 - (v23 >> 3), (uint64_t *)&v116);
          v22 = *(char **)(a1 + 392);
        }
        if (v21 >= v24)
          v25 = v24;
        else
          v25 = v21;
        bzero(v22, 8 * v25);
        v26 = *(int *)(a1 + 5);
        v116.__r_.__value_.__r.__words[0] = 0;
        v27 = v26 << 32;
        v28 = *(char **)(a1 + 328);
        v29 = (uint64_t)(*(_QWORD *)(a1 + 336) - (_QWORD)v28) >> 3;
        if (v26 <= v29)
        {
          if (v26 < v29)
            *(_QWORD *)(a1 + 336) = &v28[8 * v26];
        }
        else
        {
          std::vector<double>::__append(a1 + 328, v26 - v29, (uint64_t *)&v116);
          v28 = *(char **)(a1 + 328);
        }
        bzero(v28, v27 >> 29);
        IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow((operations_research::glop::VariablesInfo *)(a1 + 5480));
        operations_research::glop::RevisedSimplex::DualPhaseIUpdatePriceOnReducedCostChange<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(a1, IsRelevantBitRow);
        *v8 = -1;
        if (!*(_DWORD *)(a1 + 352))
          goto LABEL_63;
      }
      else
      {
        NonZeroPositions = (int **)operations_research::glop::UpdateRow::GetNonZeroPositions((operations_research::glop::UpdateRow *)(a1 + 7840));
        operations_research::glop::RevisedSimplex::DualPhaseIUpdatePriceOnReducedCostChange<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(a1, NonZeroPositions);
        *v8 = -1;
        if (!*(_DWORD *)(a1 + 352))
        {
LABEL_63:
          v50 = a5;
          goto LABEL_118;
        }
      }
      v107 = a4;
      v108 = a5;
      EdgeSquaredNorms = (_QWORD *)operations_research::glop::DualEdgeNorms::GetEdgeSquaredNorms((operations_research::glop::DualEdgeNorms *)(a1 + 6288));
      v32 = *(char **)(a1 + 15984);
      *(_QWORD *)(a1 + 15992) = v32;
      v33 = *(unint64_t **)(a1 + 392);
      v34 = *(unint64_t **)(a1 + 400);
      v106 = a3;
      if (v33 != v34)
      {
        v35 = *v33;
        if (*v33)
        {
          v36 = 0;
          goto LABEL_65;
        }
        v38 = 0;
        v39 = (char *)v34 - (char *)v33;
        v40 = v39 >> 3;
        v41 = (int)((uint64_t)v39 >> 3);
        if ((int)(v39 >> 3) <= 1)
          v42 = 1;
        else
          v42 = v39 >> 3;
        if (v41 <= 1)
          v41 = 1;
        v43 = v41 - 1;
        do
        {
          if (v43 == v38)
            goto LABEL_58;
          v44 = v38 + 1;
        }
        while (!v33[++v38]);
        v42 = v44;
LABEL_58:
        if (v42 != (_DWORD)v40)
        {
          v35 = v33[v42];
          v36 = v42 << 6;
LABEL_65:
          v47 = __clz(__rbit64(v35)) & 0x3F | v36;
          v46 = (v35 - 1) & v35;
          v48 = *(_DWORD *)(a1 + 424);
          if (v47 == v48)
            goto LABEL_114;
LABEL_66:
          v110 = v8;
          v111 = (void **)(a1 + 15984);
          v51 = 0.0;
          v109 = EdgeSquaredNorms;
          while (1)
          {
            v52 = 8 * v47;
            v53 = *(double *)(*(_QWORD *)(a1 + 360) + v52) * *(double *)(*(_QWORD *)(a1 + 360) + v52);
            v54 = *(double *)(*EdgeSquaredNorms + v52);
            if (v53 >= v51 * v54)
            {
              if (v53 == v51 * v54)
              {
                v55 = *(_QWORD *)(a1 + 16000);
                if ((unint64_t)v32 < v55)
                {
                  *(_DWORD *)v32 = v47;
                  v56 = (uint64_t)(v32 + 4);
LABEL_110:
                  *(_QWORD *)(a1 + 15992) = v56;
                  v32 = (char *)v56;
                  goto LABEL_67;
                }
                v64 = (char *)*v111;
                v65 = v32 - (_BYTE *)*v111;
                v66 = v65 >> 2;
                v67 = (v65 >> 2) + 1;
                if (v67 >> 62)
                  goto LABEL_143;
                v68 = v55 - (_QWORD)v64;
                if (v68 >> 1 > v67)
                  v67 = v68 >> 1;
                if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
                  v67 = 0x3FFFFFFFFFFFFFFFLL;
                v112 = v67;
                if (v67)
                {
                  if (v67 >> 62)
                    goto LABEL_144;
                  v69 = operator new(4 * v67);
                  v70 = (int *)&v69[4 * v66];
                  *v70 = v47;
                  v56 = (uint64_t)(v70 + 1);
                  if (v32 == v64)
                    goto LABEL_107;
LABEL_95:
                  v71 = v32 - 4 - v64;
                  if (v71 < 0xBC)
                  {
                    v72 = v32;
                    goto LABEL_106;
                  }
                  if (&v69[v65 - 4 - (v71 & 0xFFFFFFFFFFFFFFFCLL)] > &v69[v65 - 4])
                  {
                    v72 = v32;
                    goto LABEL_106;
                  }
                  if (&v32[-(v71 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v32 - 4)
                  {
                    v72 = v32;
                    goto LABEL_106;
                  }
                  if ((unint64_t)(v32 - v69 - v65) < 0x20)
                  {
                    v72 = v32;
                    goto LABEL_106;
                  }
                  v73 = (v71 >> 2) + 1;
                  v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                  v72 = &v32[-v74];
                  v70 = (int *)((char *)v70 - v74);
                  v75 = &v69[4 * v66 - 16];
                  v76 = v32 - 16;
                  v77 = v73 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v78 = *(_OWORD *)v76;
                    *(v75 - 1) = *((_OWORD *)v76 - 1);
                    *v75 = v78;
                    v75 -= 2;
                    v76 -= 32;
                    v77 -= 8;
                  }
                  while (v77);
                  if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_106:
                      v79 = *((_DWORD *)v72 - 1);
                      v72 -= 4;
                      *--v70 = v79;
                    }
                    while (v72 != v64);
                  }
                }
                else
                {
                  v69 = 0;
                  v70 = (int *)(4 * v66);
                  *(_DWORD *)(4 * v66) = v47;
                  v56 = 4 * v66 + 4;
                  if (v32 != v64)
                    goto LABEL_95;
                }
LABEL_107:
                *(_QWORD *)(a1 + 15984) = v70;
                *(_QWORD *)(a1 + 15992) = v56;
                *(_QWORD *)(a1 + 16000) = &v69[4 * v112];
                if (v64)
                  operator delete(v64);
                EdgeSquaredNorms = v109;
                v8 = v110;
                goto LABEL_110;
              }
              v32 = *(char **)(a1 + 15984);
              *(_QWORD *)(a1 + 15992) = v32;
              *v8 = v47;
              v51 = v53 / v54;
            }
LABEL_67:
            if (v46)
            {
LABEL_68:
              v47 = (__clz(__rbit64(v46)) & 0x3F) + v36;
              v46 &= v46 - 1;
              if (v47 == v48)
                goto LABEL_111;
            }
            else
            {
              v57 = *(_QWORD *)(a1 + 392);
              v58 = *(_QWORD *)(a1 + 400) - v57;
              v59 = (unint64_t)v58 >> 3;
              v60 = (int)(v58 >> 3);
              if ((v36 >> 6) + 1 > (int)v59)
                v61 = (v36 >> 6) + 1;
              else
                v61 = v59;
              v62 = ((uint64_t)v36 >> 6) + 1;
              while (v62 < v60)
              {
                if (*(_QWORD *)(v57 + 8 * v62++))
                {
                  v61 = v62 - 1;
                  break;
                }
              }
              if (v61 != (_DWORD)v59)
              {
                v46 = *(_QWORD *)(v57 + 8 * v61);
                v36 = v61 << 6;
                goto LABEL_68;
              }
              v46 = 0;
              v47 = -1;
              if (v48 == -1)
              {
LABEL_111:
                v80 = *v111;
                if (*v111 != v32)
                {
                  v81 = *(_QWORD *)(a1 + 16000);
                  if ((unint64_t)v32 < v81)
                  {
                    *(_DWORD *)v32 = *v8;
                    v82 = v32 + 4;
                    goto LABEL_137;
                  }
                  v89 = v32 - v80;
                  v90 = (v32 - v80) >> 2;
                  v91 = v90 + 1;
                  if ((unint64_t)(v90 + 1) >> 62)
LABEL_143:
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v92 = v81 - (_QWORD)v80;
                  if (v92 >> 1 > v91)
                    v91 = v92 >> 1;
                  if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
                    v93 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v93 = v91;
                  if (v93)
                  {
                    if (v93 >> 62)
LABEL_144:
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v94 = operator new(4 * v93);
                    v95 = (int *)&v94[4 * v90];
                    *v95 = *v8;
                    v96 = v89 - 4;
                    if ((unint64_t)(v89 - 4) < 0x2C)
                    {
LABEL_132:
                      v97 = v32;
                      v98 = v95;
                      goto LABEL_133;
                    }
                  }
                  else
                  {
                    v94 = 0;
                    v95 = (int *)(4 * v90);
                    *(_DWORD *)(4 * v90) = *v8;
                    v96 = v89 - 4;
                    if ((unint64_t)(v89 - 4) < 0x2C)
                      goto LABEL_132;
                  }
                  if ((unint64_t)(v80 - v94) < 0x20)
                    goto LABEL_132;
                  v100 = (v96 >> 2) + 1;
                  v101 = 4 * (v100 & 0x7FFFFFFFFFFFFFF8);
                  v97 = &v32[-v101];
                  v98 = &v95[v101 / 0xFFFFFFFFFFFFFFFCLL];
                  v102 = &v94[4 * v90 - 16];
                  v103 = v32 - 16;
                  v104 = v100 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v105 = *(_OWORD *)v103;
                    *(v102 - 1) = *((_OWORD *)v103 - 1);
                    *v102 = v105;
                    v102 -= 2;
                    v103 -= 32;
                    v104 -= 8;
                  }
                  while (v104);
                  if (v100 != (v100 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_133:
                      v99 = *((_DWORD *)v97 - 1);
                      v97 -= 4;
                      *--v98 = v99;
                    }
                    while (v97 != v80);
                  }
                  *(_QWORD *)(a1 + 15984) = v98;
                  v82 = (char *)(v95 + 1);
                  *(_QWORD *)(a1 + 15992) = v95 + 1;
                  *(_QWORD *)(a1 + 16000) = &v94[4 * v93];
                  if (v80)
                  {
                    operator delete(v80);
                    v80 = *v111;
                  }
                  else
                  {
                    v80 = v98;
                  }
LABEL_137:
                  *(_QWORD *)(a1 + 15992) = v82;
                  LODWORD(v116.__r_.__value_.__l.__data_) = 0;
                  HIDWORD(v116.__r_.__value_.__r.__words[0]) = ((unint64_t)(v82 - v80) >> 2) - 1;
                  v83 = *(_DWORD *)(*(_QWORD *)(a1 + 15984)
                                  + 4
                                  * (int)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v116, a1 + 16008, &v116));
                  *v8 = v83;
                  v84 = v107;
                  v50 = v108;
                  v85 = v106;
                  if (v83 == -1)
                  {
LABEL_118:
                    operations_research::glop::Status::Status(v50);
                    return;
                  }
LABEL_115:
                  v86 = *(double *)(*(_QWORD *)(a1 + 360) + 8 * v83);
                  *v85 = v86;
                  v87 = *(int *)(*(_QWORD *)(a1 + 520) + 4 * v83);
                  v88 = 256;
                  if (v86 < 0.0)
                    v88 = 280;
                  *v84 = *(_QWORD *)(*(_QWORD *)(a1 + v88) + 8 * v87);
                  goto LABEL_118;
                }
LABEL_114:
                v83 = *v8;
                v84 = v107;
                v50 = v108;
                v85 = v106;
                if (*v8 == -1)
                  goto LABEL_118;
                goto LABEL_115;
              }
            }
          }
        }
      }
      v46 = 0;
      v36 = 0;
      v47 = -1;
      v48 = *(_DWORD *)(a1 + 424);
      if (v48 == -1)
        goto LABEL_114;
      goto LABEL_66;
    }
    v116.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v116.__r_.__value_.__r.__words[1] = xmmword_22DCE5C10;
    strcpy(v116.__r_.__value_.__l.__data_, "cost_variation must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v115, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2087, 2);
    v17 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v115);
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v116;
    else
      v18 = (std::string *)v116.__r_.__value_.__r.__words[0];
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
    else
      size = v116.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, size);
    google::LogMessage::~LogMessage((google::LogMessage *)v115);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v113, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
    else
      v113 = v116;
    operations_research::glop::Status::Status(a5, 3, (__int128 *)&v113);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    {
      v37 = (void *)v113.__r_.__value_.__r.__words[0];
      goto LABEL_46;
    }
  }
  else
  {
    v116.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v116.__r_.__value_.__r.__words[1] = xmmword_22DCE7550;
    strcpy(v116.__r_.__value_.__l.__data_, "leaving_row must not be null.");
    google::LogMessage::LogMessage((google::LogMessage *)v115, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2086, 2);
    v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v115);
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v116;
    else
      v15 = (std::string *)v116.__r_.__value_.__r.__words[0];
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
    else
      v16 = v116.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    google::LogMessage::~LogMessage((google::LogMessage *)v115);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v114, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
    else
      v114 = v116;
    operations_research::glop::Status::Status(a5, 3, (__int128 *)&v114);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    {
      v37 = (void *)v114.__r_.__value_.__r.__words[0];
LABEL_46:
      operator delete(v37);
    }
  }
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
}

void sub_22DA18170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 105) < 0)
    operator delete(*(void **)(v31 - 128));
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::DualPhaseIUpdatePriceOnReducedCostChange<operations_research::Bitset64<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(uint64_t a1, uint64_t a2)
{
  operations_research::glop::VariablesInfo *v4;
  uint64_t CanDecreaseBitRow;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v18;
  unint64_t v19;
  char v20;
  double v21;
  operations_research::glop::ScatteredColumn *v22;
  double v23;
  unint64_t v24;
  uint64_t v26;
  double v28;
  uint64_t v29;
  double v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  _DWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t *TypeRow;
  double v76;
  char *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  double v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  double v105;
  int v106;
  BOOL v107;
  uint64_t v109;
  unint64_t v110;
  operations_research::glop::VariablesInfo *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void **v115;
  int v116;
  _QWORD *ReducedCosts;
  uint64_t CanIncreaseBitRow;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v4 = (operations_research::glop::VariablesInfo *)(a1 + 5480);
  CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow((operations_research::glop::VariablesInfo *)(a1 + 5480));
  CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(v4);
  ReducedCosts = (_QWORD *)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::ReducedCosts *)(a1 + 8720));
  v6 = *(unint64_t **)(a2 + 8);
  v7 = *(unint64_t **)(a2 + 16);
  v111 = v4;
  if (v6 != v7)
  {
    v8 = *v6;
    if (*v6)
    {
      v9 = 0;
      goto LABEL_17;
    }
    v10 = 0;
    v11 = (char *)v7 - (char *)v6;
    v12 = v11 >> 3;
    v13 = (int)((uint64_t)v11 >> 3);
    if ((int)(v11 >> 3) <= 1)
      v14 = 1;
    else
      v14 = v11 >> 3;
    if (v13 <= 1)
      v13 = 1;
    v15 = v13 - 1;
    while (v15 != v10)
    {
      v16 = v10 + 1;
      if (v6[++v10])
      {
        v14 = v16;
        break;
      }
    }
    if (v14 != (_DWORD)v12)
    {
      v8 = v6[v14];
      v9 = (v14 << 6);
LABEL_17:
      v19 = __clz(__rbit64(v8)) & 0x3F | v9;
      v18 = (v8 - 1) & v8;
      v116 = *(_DWORD *)(a2 + 40);
      if ((_DWORD)v19 == v116)
        return;
      goto LABEL_18;
    }
  }
  v18 = 0;
  v9 = 0;
  v19 = 0xFFFFFFFFLL;
  v116 = *(_DWORD *)(a2 + 40);
  if (v116 == -1)
    return;
LABEL_18:
  v20 = 0;
  v21 = *(double *)(a1 + 9544);
  v22 = (operations_research::glop::ScatteredColumn *)(a1 + 440);
  v115 = (void **)(a1 + 472);
  v113 = a2;
  v112 = CanDecreaseBitRow;
  do
  {
    while (1)
    {
      v23 = *(double *)(*ReducedCosts + 8 * (int)v19);
      v24 = (unint64_t)(int)v19 >> 6;
      if ((*(_QWORD *)(*(_QWORD *)(CanIncreaseBitRow + 8) + 8 * v24) & (1 << v19)) != 0 && v23 < -v21)
      {
        v29 = *(_QWORD *)(a1 + 328);
        v30 = *(double *)(v29 + 8 * (int)v19);
        v28 = 1.0;
        if (v30 == 1.0)
          goto LABEL_78;
      }
      else
      {
        v26 = *(_QWORD *)(*(_QWORD *)(CanDecreaseBitRow + 8) + 8 * v24) & (1 << v19);
        if (v23 <= v21 || v26 == 0)
          v28 = 0.0;
        else
          v28 = -1.0;
        v29 = *(_QWORD *)(a1 + 328);
        v30 = *(double *)(v29 + 8 * (int)v19);
        if (v28 == v30)
          goto LABEL_78;
        if (v28 == 0.0)
        {
          v31 = -1;
LABEL_37:
          *(_DWORD *)(a1 + 352) += v31;
          goto LABEL_38;
        }
      }
      if (v30 == 0.0)
      {
        v31 = 1;
        goto LABEL_37;
      }
LABEL_38:
      if ((v20 & 1) == 0)
      {
        v32 = v18;
        v33 = *(int *)(a1 + 1);
        v121 = 0;
        v34 = *(_QWORD *)(a1 + 440);
        v35 = (*(_QWORD *)(a1 + 448) - v34) >> 3;
        if (v33 <= v35)
        {
          if (v33 < v35)
            *(_QWORD *)(a1 + 448) = v34 + 8 * v33;
        }
        else
        {
          std::vector<double>::__append((uint64_t)v22, v33 - v35, &v121);
        }
        operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v22);
        *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
        v29 = *(_QWORD *)(a1 + 328);
        v18 = v32;
      }
      v119 = (int)v19;
      v120 = v9;
      v36 = v28 - *(double *)(v29 + 8 * (int)v19);
      if (v36 != 0.0)
      {
        v37 = *(_QWORD *)(a1 + 72);
        v38 = *(_QWORD *)(v37 + 8 * (int)v19);
        v39 = *(_QWORD *)(v37 + ((uint64_t)((v19 << 32) + 0x100000000) >> 29));
        if (v38 < v39)
        {
          v114 = v18;
          while (2)
          {
            v41 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v38);
            v42 = v36 * *(double *)(*(_QWORD *)(a1 + 24) + 8 * v38);
            *(double *)(*(_QWORD *)(a1 + 440) + 8 * v41) = v42 + *(double *)(*(_QWORD *)(a1 + 440) + 8 * v41);
            v43 = *(_QWORD *)(a1 + 496);
            v44 = (unint64_t)v41 >> 6;
            v45 = *(_QWORD *)(v43 + 8 * v44);
            if (v42 == 0.0 || (v45 & (1 << v41)) != 0)
              goto LABEL_49;
            *(_QWORD *)(v43 + 8 * v44) = v45 | (1 << v41);
            v48 = *(char **)(a1 + 480);
            v47 = *(_QWORD *)(a1 + 488);
            if ((unint64_t)v48 >= v47)
            {
              v49 = (char *)*v115;
              v50 = v48 - (_BYTE *)*v115;
              v51 = v50 >> 2;
              v52 = (v50 >> 2) + 1;
              if (v52 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v53 = v47 - (_QWORD)v49;
              if (v53 >> 1 > v52)
                v52 = v53 >> 1;
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
                v54 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v54 = v52;
              if (v54)
              {
                if (v54 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v55 = operator new(4 * v54);
                v56 = &v55[4 * v51];
                *v56 = v41;
                v40 = (uint64_t)(v56 + 1);
                if (v48 == v49)
                {
LABEL_73:
                  *(_QWORD *)(a1 + 472) = v56;
                  *(_QWORD *)(a1 + 480) = v40;
                  *(_QWORD *)(a1 + 488) = &v55[4 * v54];
                  if (v49)
                    operator delete(v49);
LABEL_48:
                  *(_QWORD *)(a1 + 480) = v40;
                  *(_BYTE *)(a1 + 464) = 0;
LABEL_49:
                  if (++v38 == v39)
                  {
                    v29 = *(_QWORD *)(a1 + 328);
                    a2 = v113;
                    v22 = (operations_research::glop::ScatteredColumn *)(a1 + 440);
                    CanDecreaseBitRow = v112;
                    v18 = v114;
                    goto LABEL_77;
                  }
                  continue;
                }
              }
              else
              {
                v55 = 0;
                v56 = (_DWORD *)(4 * v51);
                *(_DWORD *)(4 * v51) = v41;
                v40 = 4 * v51 + 4;
                if (v48 == v49)
                  goto LABEL_73;
              }
              v57 = v48 - 4 - v49;
              if (v57 < 0x2C)
                goto LABEL_144;
              if ((unint64_t)(v48 - &v55[v50]) < 0x20)
                goto LABEL_144;
              v58 = (v57 >> 2) + 1;
              v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
              v60 = &v48[-v59];
              v56 = (_DWORD *)((char *)v56 - v59);
              v61 = &v55[4 * v51 - 16];
              v62 = v48 - 16;
              v63 = v58 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v64 = *(_OWORD *)v62;
                *(v61 - 1) = *((_OWORD *)v62 - 1);
                *v61 = v64;
                v61 -= 2;
                v62 -= 32;
                v63 -= 8;
              }
              while (v63);
              v48 = v60;
              if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_144:
                do
                {
                  v65 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *--v56 = v65;
                }
                while (v48 != v49);
              }
              goto LABEL_73;
            }
            break;
          }
          *(_DWORD *)v48 = v41;
          v40 = (uint64_t)(v48 + 4);
          goto LABEL_48;
        }
      }
LABEL_77:
      v9 = v120;
      *(double *)(v29 + 8 * v119) = v28;
      v20 = 1;
LABEL_78:
      if (v18)
        goto LABEL_20;
      v66 = *(_QWORD *)(a2 + 8);
      v67 = *(_QWORD *)(a2 + 16) - v66;
      v68 = (unint64_t)v67 >> 3;
      v69 = (int)(v67 >> 3);
      v70 = ((int)v9 >> 6) + 1 > (int)v68 ? ((int)v9 >> 6) + 1 : v68;
      v71 = ((uint64_t)(int)v9 >> 6) + 1;
      while (v71 < v69)
      {
        if (*(_QWORD *)(v66 + 8 * v71++))
        {
          v70 = v71 - 1;
          break;
        }
      }
      if (v70 == (_DWORD)v68)
        break;
      v18 = *(_QWORD *)(v66 + 8 * v70);
      v9 = (v70 << 6);
LABEL_20:
      v19 = (__clz(__rbit64(v18)) & 0x3F) + v9;
      v18 &= v18 - 1;
      if ((_DWORD)v19 == v116)
        goto LABEL_88;
    }
    v18 = 0;
    v19 = 0xFFFFFFFFLL;
  }
  while (v116 != -1);
LABEL_88:
  if ((v20 & 1) == 0)
    return;
  v73 = *(_QWORD *)(a1 + 472);
  v74 = *(_QWORD *)(a1 + 480);
  if (v73 == v74
    || (double)(int)((*(_QWORD *)(a1 + 448) - *(_QWORD *)(a1 + 440)) >> 3) * 0.8 < (double)(unint64_t)((v74 - v73) >> 2))
  {
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v22);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
  }
  operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v22);
  TypeRow = (uint64_t *)operations_research::glop::VariablesInfo::GetTypeRow(v111);
  v76 = *(double *)(a1 + 11704);
  operations_research::glop::BasisFactorization::RightSolve((operations_research::glop::BasisFactorization *)(a1 + 840), v22);
  v77 = *(char **)(a1 + 472);
  v78 = *(char **)(a1 + 480);
  if (v77 == v78)
  {
    v94 = *(unsigned int *)(a1 + 1);
    v95 = (int)v94;
    v96 = *(char **)(a1 + 440);
    if ((int)v94 <= 0)
    {
LABEL_133:
      v121 = 0;
      v109 = v94 << 32;
      v110 = (uint64_t)(*(_QWORD *)(a1 + 448) - (_QWORD)v96) >> 3;
      if (v95 <= v110)
      {
        if (v95 < v110)
          *(_QWORD *)(a1 + 448) = &v96[8 * v95];
      }
      else
      {
        std::vector<double>::__append((uint64_t)v22, v95 - v110, &v121);
        v96 = *(char **)v22;
      }
      bzero(v96, v109 >> 29);
      goto LABEL_138;
    }
    v97 = 0;
    v98 = *TypeRow;
    while (1)
    {
      v103 = *(double *)&v96[8 * v97];
      if (v103 == 0.0)
        goto LABEL_118;
      v104 = *(_QWORD *)(a1 + 360);
      v105 = v103 + *(double *)(v104 + 8 * v97);
      *(double *)(v104 + 8 * v97) = v105;
      if (v105 == 0.0)
        break;
      v106 = *(unsigned __int8 *)(v98 + *(int *)(*(_QWORD *)(a1 + 520) + 4 * v97));
      if ((v106 - 3) < 2 || (v105 < -v76 ? (v107 = v106 == 2) : (v107 = 0), v107))
      {
        v99 = 1 << v97;
      }
      else
      {
        v99 = 1 << v97;
        if (v105 <= v76 || v106 != 1)
          goto LABEL_122;
      }
      v100 = *(_QWORD *)(a1 + 392);
      v101 = (v97 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v102 = *(_QWORD *)(v100 + v101) | v99;
LABEL_117:
      *(_QWORD *)(v100 + v101) = v102;
LABEL_118:
      if (v94 == ++v97)
        goto LABEL_133;
    }
    v99 = 1 << v97;
LABEL_122:
    v100 = *(_QWORD *)(a1 + 392);
    v101 = (v97 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v102 = *(_QWORD *)(v100 + v101) & ~v99;
    goto LABEL_117;
  }
  v79 = v78 - v77;
  if (v78 - v77 >= 1)
  {
    v80 = *(char **)v22;
    v81 = v79 >> 2;
    v82 = *(_QWORD *)(a1 + 360);
    v83 = *(_QWORD *)(a1 + 520);
    v84 = *TypeRow;
    if (v81 <= 1)
      v81 = 1;
    do
    {
      while (1)
      {
        v87 = *(_DWORD *)v77;
        v77 += 4;
        v86 = v87;
        v88 = 8 * v87;
        *(double *)(v82 + v88) = *(double *)&v80[v88] + *(double *)(v82 + v88);
        *(_QWORD *)&v80[v88] = 0;
        v89 = *(double *)(v82 + v88);
        v90 = (unint64_t)v87 >> 3;
        if (v89 != 0.0)
          break;
        v85 = 1 << v86;
LABEL_101:
        *(_QWORD *)(*(_QWORD *)(a1 + 392) + (v90 & 0x1FFFFFFFFFFFFFF8)) &= ~v85;
        if (!--v81)
          goto LABEL_138;
      }
      v91 = *(unsigned __int8 *)(v84 + *(int *)(v83 + 4 * v86));
      if ((v91 - 3) < 2 || (v89 < -v76 ? (v92 = v91 == 2) : (v92 = 0), v92))
      {
        v85 = 1 << v86;
      }
      else
      {
        v85 = 1 << v86;
        if (v89 <= v76 || v91 != 1)
          goto LABEL_101;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 392) + (v90 & 0x1FFFFFFFFFFFFFF8)) |= v85;
      --v81;
    }
    while (v81);
  }
LABEL_138:
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
}

void operations_research::glop::RevisedSimplex::DualPhaseIUpdatePriceOnReducedCostChange<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(uint64_t a1, int **a2)
{
  operations_research::glop::VariablesInfo *v4;
  uint64_t CanDecreaseBitRow;
  uint64_t CanIncreaseBitRow;
  _QWORD *ReducedCosts;
  unsigned int *v8;
  int *v9;
  char v10;
  double v11;
  operations_research::glop::ScatteredColumn *v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  double v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *TypeRow;
  double v59;
  char *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  double v72;
  unint64_t v73;
  int v74;
  BOOL v75;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  double v88;
  int v89;
  BOOL v90;
  uint64_t v92;
  unint64_t v93;
  operations_research::glop::VariablesInfo *v94;
  operations_research::glop::ScatteredColumn *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  void **v100;
  unint64_t v101;
  uint64_t v102;

  v4 = (operations_research::glop::VariablesInfo *)(a1 + 5480);
  CanDecreaseBitRow = operations_research::glop::VariablesInfo::GetCanDecreaseBitRow((operations_research::glop::VariablesInfo *)(a1 + 5480));
  CanIncreaseBitRow = operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(v4);
  ReducedCosts = (_QWORD *)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::ReducedCosts *)(a1 + 8720));
  v8 = (unsigned int *)*a2;
  v9 = a2[1];
  if (*a2 == v9)
    return;
  v10 = 0;
  v11 = *(double *)(a1 + 9544);
  v12 = (operations_research::glop::ScatteredColumn *)(a1 + 440);
  v99 = ReducedCosts;
  v100 = (void **)(a1 + 472);
  do
  {
    while (1)
    {
      v15 = (int)*v8;
      v16 = *v8;
      v17 = *(double *)(*ReducedCosts + 8 * v15);
      if ((*(_QWORD *)(*(_QWORD *)(CanIncreaseBitRow + 8) + 8 * (v15 >> 6)) & (1 << v15)) != 0 && v17 < -v11)
        break;
      if (v17 <= v11 || (*(_QWORD *)(*(_QWORD *)(CanDecreaseBitRow + 8) + 8 * (v15 >> 6)) & (1 << v15)) == 0)
        v20 = 0.0;
      else
        v20 = -1.0;
      v13 = *(_QWORD *)(a1 + 328);
      v14 = *(double *)(v13 + 8 * v15);
      if (v20 == v14)
        goto LABEL_5;
      v21 = v16 << 32;
      if (v20 == 0.0)
      {
        v22 = -1;
        goto LABEL_22;
      }
LABEL_20:
      if (v14 != 0.0)
        goto LABEL_23;
      v22 = 1;
LABEL_22:
      *(_DWORD *)(a1 + 352) += v22;
LABEL_23:
      if ((v10 & 1) == 0)
      {
        v23 = *(int *)(a1 + 1);
        v102 = 0;
        v24 = *(_QWORD *)(a1 + 440);
        v25 = (*(_QWORD *)(a1 + 448) - v24) >> 3;
        if (v23 <= v25)
        {
          if (v23 < v25)
            *(_QWORD *)(a1 + 448) = v24 + 8 * v23;
        }
        else
        {
          std::vector<double>::__append((uint64_t)v12, v23 - v25, &v102);
        }
        operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v12);
        *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
        v13 = *(_QWORD *)(a1 + 328);
      }
      v98 = CanDecreaseBitRow;
      v26 = v20 - *(double *)(v13 + 8 * v15);
      if (v26 != 0.0)
      {
        v27 = *(_QWORD *)(a1 + 72);
        v28 = *(_QWORD *)(v27 + 8 * v15);
        v29 = *(_QWORD *)(v27 + ((v21 + 0x100000000) >> 29));
        if (v28 < v29)
        {
          v94 = v4;
          v95 = v12;
          v96 = *(_QWORD *)(v27 + ((v21 + 0x100000000) >> 29));
          v97 = CanIncreaseBitRow;
          while (2)
          {
            v31 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v28);
            v32 = v26 * *(double *)(*(_QWORD *)(a1 + 24) + 8 * v28);
            *(double *)(*(_QWORD *)(a1 + 440) + 8 * v31) = v32 + *(double *)(*(_QWORD *)(a1 + 440) + 8 * v31);
            v33 = *(_QWORD *)(a1 + 496);
            v34 = (unint64_t)v31 >> 6;
            v35 = *(_QWORD *)(v33 + 8 * v34);
            if (v32 == 0.0 || (v35 & (1 << v31)) != 0)
              goto LABEL_34;
            *(_QWORD *)(v33 + 8 * v34) = v35 | (1 << v31);
            v38 = *(char **)(a1 + 480);
            v37 = *(_QWORD *)(a1 + 488);
            if ((unint64_t)v38 >= v37)
            {
              v39 = (char *)*v100;
              v40 = v38 - (_BYTE *)*v100;
              v41 = v40 >> 2;
              v42 = (v40 >> 2) + 1;
              if (v42 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v43 = v37 - (_QWORD)v39;
              if (v43 >> 1 > v42)
                v42 = v43 >> 1;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                v42 = 0x3FFFFFFFFFFFFFFFLL;
              v101 = v42;
              if (v42)
              {
                if (v42 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v44 = operator new(4 * v42);
                v45 = &v44[4 * v41];
                *v45 = v31;
                v30 = (uint64_t)(v45 + 1);
                if (v38 != v39)
                {
LABEL_49:
                  v46 = v38 - 4 - v39;
                  if (v46 < 0x2C)
                    goto LABEL_120;
                  if ((unint64_t)(v38 - &v44[v40]) < 0x20)
                    goto LABEL_120;
                  v47 = (v46 >> 2) + 1;
                  v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
                  v49 = &v38[-v48];
                  v45 = (_DWORD *)((char *)v45 - v48);
                  v50 = &v44[4 * v41 - 16];
                  v51 = v38 - 16;
                  v52 = v47 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v53 = *(_OWORD *)v51;
                    *(v50 - 1) = *((_OWORD *)v51 - 1);
                    *v50 = v53;
                    v50 -= 2;
                    v51 -= 32;
                    v52 -= 8;
                  }
                  while (v52);
                  v38 = v49;
                  if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_120:
                    do
                    {
                      v54 = *((_DWORD *)v38 - 1);
                      v38 -= 4;
                      *--v45 = v54;
                    }
                    while (v38 != v39);
                  }
                  *(_QWORD *)(a1 + 472) = v45;
                  *(_QWORD *)(a1 + 480) = v30;
                  *(_QWORD *)(a1 + 488) = &v44[4 * v101];
                  if (v39)
                  {
LABEL_56:
                    v55 = v30;
                    operator delete(v39);
                    v30 = v55;
                  }
LABEL_57:
                  v29 = v96;
                  CanIncreaseBitRow = v97;
LABEL_33:
                  *(_QWORD *)(a1 + 480) = v30;
                  *(_BYTE *)(a1 + 464) = 0;
LABEL_34:
                  if (++v28 == v29)
                  {
                    v13 = *(_QWORD *)(a1 + 328);
                    v4 = v94;
                    v12 = v95;
                    goto LABEL_62;
                  }
                  continue;
                }
              }
              else
              {
                v44 = 0;
                v45 = (_DWORD *)(4 * v41);
                *(_DWORD *)(4 * v41) = v31;
                v30 = 4 * v41 + 4;
                if (v38 != v39)
                  goto LABEL_49;
              }
              *(_QWORD *)(a1 + 472) = v45;
              *(_QWORD *)(a1 + 480) = v30;
              *(_QWORD *)(a1 + 488) = &v44[4 * v101];
              if (v39)
                goto LABEL_56;
              goto LABEL_57;
            }
            break;
          }
          *(_DWORD *)v38 = v31;
          v30 = (uint64_t)(v38 + 4);
          goto LABEL_33;
        }
      }
LABEL_62:
      *(double *)(v13 + 8 * v15) = v20;
      ++v8;
      v10 = 1;
      CanDecreaseBitRow = v98;
      ReducedCosts = v99;
      if (v8 == (unsigned int *)v9)
        goto LABEL_65;
    }
    v13 = *(_QWORD *)(a1 + 328);
    v14 = *(double *)(v13 + 8 * v15);
    if (v14 != 1.0)
    {
      v21 = v16 << 32;
      v20 = 1.0;
      goto LABEL_20;
    }
LABEL_5:
    ++v8;
  }
  while (v8 != (unsigned int *)v9);
  if ((v10 & 1) == 0)
    return;
LABEL_65:
  v56 = *(_QWORD *)(a1 + 472);
  v57 = *(_QWORD *)(a1 + 480);
  if (v56 == v57
    || (double)(int)((*(_QWORD *)(a1 + 448) - *(_QWORD *)(a1 + 440)) >> 3) * 0.8 < (double)(unint64_t)((v57 - v56) >> 2))
  {
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v12);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
  }
  operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask((uint64_t)v12);
  TypeRow = (uint64_t *)operations_research::glop::VariablesInfo::GetTypeRow(v4);
  v59 = *(double *)(a1 + 11704);
  operations_research::glop::BasisFactorization::RightSolve((operations_research::glop::BasisFactorization *)(a1 + 840), v12);
  v60 = *(char **)(a1 + 472);
  v61 = *(char **)(a1 + 480);
  if (v60 == v61)
  {
    v77 = *(unsigned int *)(a1 + 1);
    v78 = (int)v77;
    v79 = *(char **)(a1 + 440);
    if ((int)v77 <= 0)
    {
LABEL_109:
      v102 = 0;
      v92 = v77 << 32;
      v93 = (uint64_t)(*(_QWORD *)(a1 + 448) - (_QWORD)v79) >> 3;
      if (v78 <= v93)
      {
        if (v78 < v93)
          *(_QWORD *)(a1 + 448) = &v79[8 * v78];
      }
      else
      {
        std::vector<double>::__append((uint64_t)v12, v78 - v93, &v102);
        v79 = *(char **)v12;
      }
      bzero(v79, v92 >> 29);
      goto LABEL_114;
    }
    v80 = 0;
    v81 = *TypeRow;
    while (1)
    {
      v86 = *(double *)&v79[8 * v80];
      if (v86 == 0.0)
        goto LABEL_94;
      v87 = *(_QWORD *)(a1 + 360);
      v88 = v86 + *(double *)(v87 + 8 * v80);
      *(double *)(v87 + 8 * v80) = v88;
      if (v88 == 0.0)
        break;
      v89 = *(unsigned __int8 *)(v81 + *(int *)(*(_QWORD *)(a1 + 520) + 4 * v80));
      if ((v89 - 3) < 2 || (v88 < -v59 ? (v90 = v89 == 2) : (v90 = 0), v90))
      {
        v82 = 1 << v80;
      }
      else
      {
        v82 = 1 << v80;
        if (v88 <= v59 || v89 != 1)
          goto LABEL_98;
      }
      v83 = *(_QWORD *)(a1 + 392);
      v84 = (v80 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v85 = *(_QWORD *)(v83 + v84) | v82;
LABEL_93:
      *(_QWORD *)(v83 + v84) = v85;
LABEL_94:
      if (v77 == ++v80)
        goto LABEL_109;
    }
    v82 = 1 << v80;
LABEL_98:
    v83 = *(_QWORD *)(a1 + 392);
    v84 = (v80 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v85 = *(_QWORD *)(v83 + v84) & ~v82;
    goto LABEL_93;
  }
  v62 = v61 - v60;
  if (v61 - v60 >= 1)
  {
    v63 = *(char **)v12;
    v64 = v62 >> 2;
    v65 = *(_QWORD *)(a1 + 360);
    v66 = *(_QWORD *)(a1 + 520);
    v67 = *TypeRow;
    if (v64 <= 1)
      v64 = 1;
    do
    {
      while (1)
      {
        v70 = *(_DWORD *)v60;
        v60 += 4;
        v69 = v70;
        v71 = 8 * v70;
        *(double *)(v65 + v71) = *(double *)&v63[v71] + *(double *)(v65 + v71);
        *(_QWORD *)&v63[v71] = 0;
        v72 = *(double *)(v65 + v71);
        v73 = (unint64_t)v70 >> 3;
        if (v72 != 0.0)
          break;
        v68 = 1 << v69;
LABEL_77:
        *(_QWORD *)(*(_QWORD *)(a1 + 392) + (v73 & 0x1FFFFFFFFFFFFFF8)) &= ~v68;
        if (!--v64)
          goto LABEL_114;
      }
      v74 = *(unsigned __int8 *)(v67 + *(int *)(v66 + 4 * v69));
      if ((v74 - 3) < 2 || (v72 < -v59 ? (v75 = v74 == 2) : (v75 = 0), v75))
      {
        v68 = 1 << v69;
      }
      else
      {
        v68 = 1 << v69;
        if (v72 <= v59 || v74 != 1)
          goto LABEL_77;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 392) + (v73 & 0x1FFFFFFFFFFFFFF8)) |= v68;
      --v64;
    }
    while (v64);
  }
LABEL_114:
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
}

void operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(uint64_t *a1, std::vector<int> *a2)
{
  int *end;
  std::vector<int>::pointer begin;
  int64_t v6;
  unint64_t v7;
  char *v8;
  const std::vector<int>::value_type *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::vector<int>::pointer v14;
  char *__p;

  __p = 0;
  begin = a2->__begin_;
  end = a2->__end_;
  v6 = (char *)end - (char *)a2->__begin_;
  v7 = v6 >> 2;
  if (end == a2->__begin_)
  {
    v8 = 0;
    v9 = 0;
    v10 = a1[1] - *a1;
    if ((v10 & 0x3FFFFFFFCLL) == 0)
      goto LABEL_14;
  }
  else
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new((char *)end - (char *)a2->__begin_);
    v9 = (const std::vector<int>::value_type *)&v8[4 * v7];
    __p = v8;
    memcpy(v8, begin, v6);
    v10 = a1[1] - *a1;
    if ((v10 & 0x3FFFFFFFCLL) == 0)
      goto LABEL_14;
  }
  v11 = (int)(((char *)v9 - v8) >> 2);
  if (v11 <= v7)
  {
    if (v11 < v7)
      a2->__end_ = &begin[v11];
  }
  else
  {
    std::vector<int>::__append(a2, v11 - v7, v9 - 1);
    v8 = __p;
  }
  if ((int)(v10 >> 2) >= 1)
  {
    v12 = 0;
    v13 = *a1;
    v14 = a2->__begin_;
    do
    {
      v14[*(int *)(v13 + v12)] = *(_DWORD *)&v8[v12];
      v12 += 4;
    }
    while ((v10 & 0x3FFFFFFFCLL) != v12);
    goto LABEL_15;
  }
LABEL_14:
  if (v8)
LABEL_15:
    operator delete(v8);
}

void sub_22DA19110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::UpdateAndPivot(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  int v13;
  double v14;
  double v15;
  __n128 v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE v19[16];

  v9 = *(int *)(*(_QWORD *)(a1 + 520) + 4 * a3);
  v10 = a3;
  v11 = *(double *)(*(_QWORD *)(a1 + 256) + 8 * v9);
  if (v11 == a5)
    v12 = 2;
  else
    v12 = 3;
  if (v11 == *(double *)(*(_QWORD *)(a1 + 280) + 8 * v9))
    v13 = 1;
  else
    v13 = v12;
  v14 = *(double *)(*(_QWORD *)(a1 + 5944) + 8 * v9);
  if (v14 != a5)
  {
    operations_research::RatioDistribution::Add(a1 + 10976, v14 - a5);
    LODWORD(v9) = *(_DWORD *)(*(_QWORD *)(a1 + 520) + 4 * v10);
  }
  operations_research::glop::VariablesInfo::Update((_QWORD *)(a1 + 5480), v9, v13);
  *(_DWORD *)(*(_QWORD *)(a1 + 520) + 4 * v10) = a2;
  operations_research::glop::VariablesInfo::Update((_QWORD *)(a1 + 5480), a2, 0);
  operations_research::glop::UpdateRow::Invalidate(a1 + 7840);
  v15 = *(double *)(*(_QWORD *)(a1 + 728) + 8 * v10);
  v16.n128_f64[0] = (fabs(v15) + 1.0) * *(double *)(a1 + 11664);
  if (vabdd_f64(*(double *)(*(_QWORD *)(a1 + 8064) + 8 * (int)a2), v15) <= v16.n128_f64[0])
  {
    operations_research::glop::BasisFactorization::Update(a1 + 840, a2, a3, a1 + 728, a4, v16);
    if (*(_DWORD *)a4)
      return;
LABEL_17:
    if (*(char *)(a4 + 31) < 0)
    {
      operator delete(*(void **)(a4 + 8));
      if (!operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840)))
      {
LABEL_25:
        operations_research::glop::Status::Status(a4);
        return;
      }
    }
    else if (!operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::BasisFactorization *)(a1 + 840)))
    {
      goto LABEL_25;
    }
    if (*(_QWORD *)(a1 + 2880) != *(_QWORD *)(a1 + 2888))
    {
      operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((uint64_t *)(a1 + 2880), (std::vector<int> *)(a1 + 520));
      if (*(_QWORD *)(a1 + 360) != *(_QWORD *)(a1 + 368))
        operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>((uint64_t *)(a1 + 2880), (char **)(a1 + 360));
      operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation(a1 + 8720);
      operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation(a1 + 6288, (uint64_t *)(a1 + 2880));
      *(_QWORD *)(a1 + 2888) = *(_QWORD *)(a1 + 2880);
      *(_QWORD *)(a1 + 2912) = *(_QWORD *)(a1 + 2904);
    }
    goto LABEL_25;
  }
  if (*operations_research::glop::RevisedSimplex::UpdateAndPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double)::vlocal__ >= 1
    && (operations_research::glop::RevisedSimplex::UpdateAndPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::glop::RevisedSimplex::UpdateAndPivot(gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 2294);
    v17 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Refactorizing: imprecise pivot ", 31);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" diff = ", 8);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v19);
  }
  operations_research::glop::BasisFactorization::ForceRefactorization((std::vector<int> *)(a1 + 840), a4);
  if (!*(_DWORD *)a4)
    goto LABEL_17;
}

void sub_22DA193D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::RevisedSimplex::RefactorizeBasisIfNeeded@<X0>(operations_research::glop::RevisedSimplex *this@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL4 v6;
  std::vector<int> *v7;
  uint64_t result;
  char v9;
  uint64_t v10;

  v6 = *a2;
  v7 = (std::vector<int> *)((char *)this + 840);
  if (operations_research::glop::BasisFactorization::IsRefactorized((operations_research::glop::RevisedSimplex *)((char *)this + 840)))
    goto LABEL_2;
  if ((operations_research::glop::ReducedCosts::NeedsBasisRefactorization((operations_research::glop::RevisedSimplex *)((char *)this + 8720)) & 1) == 0)
  {
    if (*((_BYTE *)this + 11644))
    {
      v9 = operations_research::glop::DualEdgeNorms::NeedsBasisRefactorization((operations_research::glop::RevisedSimplex *)((char *)this + 6288));
      if (v6)
        goto LABEL_4;
    }
    else
    {
      v10 = 11652;
      if (!*((_BYTE *)this + 15932))
        v10 = 11656;
      if (*(_DWORD *)((char *)this + v10) != 1)
      {
        if (v6)
          goto LABEL_4;
        goto LABEL_2;
      }
      v9 = operations_research::glop::PrimalEdgeNorms::NeedsBasisRefactorization((operations_research::glop::RevisedSimplex *)((char *)this + 6944));
      if (v6)
        goto LABEL_4;
    }
    if ((v9 & 1) != 0)
      goto LABEL_4;
LABEL_2:
    *a2 = 0;
    return operations_research::glop::Status::Status(a3);
  }
LABEL_4:
  result = operations_research::glop::BasisFactorization::Refactorize(v7, a3);
  if (!*(_DWORD *)a3)
  {
    if (*(char *)(a3 + 31) < 0)
      operator delete(*(void **)(a3 + 8));
    operations_research::glop::UpdateRow::Invalidate((uint64_t)this + 7840);
    if (*((_QWORD *)this + 360) != *((_QWORD *)this + 361))
    {
      operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>((uint64_t *)this + 360, (std::vector<int> *)((char *)this + 520));
      if (*((_QWORD *)this + 45) != *((_QWORD *)this + 46))
        operations_research::glop::ApplyColumnPermutationToRowIndexedVector<operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>>((uint64_t *)this + 360, (char **)this + 45);
      operations_research::glop::ReducedCosts::UpdateDataOnBasisPermutation((uint64_t)this + 8720);
      operations_research::glop::DualEdgeNorms::UpdateDataOnBasisPermutation((uint64_t)this + 6288, (uint64_t *)this + 360);
      *((_QWORD *)this + 361) = *((_QWORD *)this + 360);
      *((_QWORD *)this + 364) = *((_QWORD *)this + 363);
    }
    goto LABEL_2;
  }
  return result;
}

void operations_research::glop::RevisedSimplex::MakeBoxedVariableDualFeasible<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>(double *a1, int **a2, char a3)
{
  double v6;
  uint64_t StatusRow;
  unsigned int *v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  int v15;
  char *v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _DWORD *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  char *v49;
  double *v50;
  char v51;
  _QWORD *v52;
  _QWORD *ReducedCosts;
  void *__p;
  char *v55;
  char *v56;

  __p = 0;
  v55 = 0;
  v56 = 0;
  ReducedCosts = (_QWORD *)operations_research::glop::ReducedCosts::GetReducedCosts((operations_research::glop::ReducedCosts *)(a1 + 1090));
  v51 = a3;
  v6 = a1[1193];
  v50 = a1;
  v52 = a1 + 685;
  StatusRow = operations_research::glop::VariablesInfo::GetStatusRow((operations_research::glop::VariablesInfo *)(a1 + 685));
  v8 = (unsigned int *)*a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    v10 = (_QWORD *)StatusRow;
    do
    {
      v12 = (int)*v8;
      v13 = *(double *)(*ReducedCosts + 8 * v12);
      v14 = *v8;
      v15 = *(unsigned __int8 *)(*v10 + v12);
      if (v13 > v6 && v15 == 3)
      {
        operations_research::glop::VariablesInfo::Update(v52, v14, 2);
        v18 = v55;
        if (v55 >= v56)
        {
          v19 = (char *)__p;
          v27 = v55 - (_BYTE *)__p;
          v28 = (v55 - (_BYTE *)__p) >> 2;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
LABEL_59:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v30 = v56 - (_BYTE *)__p;
          if ((v56 - (_BYTE *)__p) >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v29;
          if (v24)
          {
            if (v24 >> 62)
LABEL_60:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v25 = operator new(4 * v24);
            v26 = &v25[4 * v28];
            *v26 = v12;
            v11 = (uint64_t)(v26 + 1);
            if (v18 == v19)
              goto LABEL_52;
          }
          else
          {
            v25 = 0;
            v26 = (_DWORD *)(4 * v28);
            *(_DWORD *)(4 * v28) = v12;
            v11 = 4 * v28 + 4;
            if (v18 == v19)
              goto LABEL_52;
          }
          v31 = v18 - 4 - v19;
          if (v31 < 0x2C)
            goto LABEL_63;
          if ((unint64_t)(v18 - &v25[v27]) < 0x20)
            goto LABEL_63;
          v32 = (v31 >> 2) + 1;
          v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
          v34 = &v18[-v33];
          v26 = (_DWORD *)((char *)v26 - v33);
          v35 = &v25[4 * v28 - 16];
          v36 = v18 - 16;
          v37 = v32 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v38 = *(_OWORD *)v36;
            *(v35 - 1) = *((_OWORD *)v36 - 1);
            *v35 = v38;
            v35 -= 2;
            v36 -= 32;
            v37 -= 8;
          }
          while (v37);
          v18 = v34;
          if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_63:
            do
            {
              v39 = *((_DWORD *)v18 - 1);
              v18 -= 4;
              *--v26 = v39;
            }
            while (v18 != v19);
          }
          goto LABEL_52;
        }
      }
      else
      {
        if (v13 >= -v6 || v15 != 2)
          goto LABEL_5;
        operations_research::glop::VariablesInfo::Update(v52, v14, 3);
        v18 = v55;
        if (v55 >= v56)
        {
          v19 = (char *)__p;
          v20 = v55 - (_BYTE *)__p;
          v21 = (v55 - (_BYTE *)__p) >> 2;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            goto LABEL_59;
          v23 = v56 - (_BYTE *)__p;
          if ((v56 - (_BYTE *)__p) >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 62)
              goto LABEL_60;
            v25 = operator new(4 * v24);
            v26 = &v25[4 * v21];
            *v26 = v12;
            v11 = (uint64_t)(v26 + 1);
            if (v18 == v19)
              goto LABEL_52;
LABEL_46:
            v40 = v18 - 4 - v19;
            if (v40 < 0x2C)
              goto LABEL_64;
            if ((unint64_t)(v18 - &v25[v20]) < 0x20)
              goto LABEL_64;
            v41 = (v40 >> 2) + 1;
            v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            v43 = &v18[-v42];
            v26 = (_DWORD *)((char *)v26 - v42);
            v44 = &v25[4 * v21 - 16];
            v45 = v18 - 16;
            v46 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *v44 = v47;
              v44 -= 2;
              v45 -= 32;
              v46 -= 8;
            }
            while (v46);
            v18 = v43;
            if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_64:
              do
              {
                v48 = *((_DWORD *)v18 - 1);
                v18 -= 4;
                *--v26 = v48;
              }
              while (v18 != v19);
            }
          }
          else
          {
            v25 = 0;
            v26 = (_DWORD *)(4 * v21);
            *(_DWORD *)(4 * v21) = v12;
            v11 = 4 * v21 + 4;
            if (v18 != v19)
              goto LABEL_46;
          }
LABEL_52:
          __p = v26;
          v56 = &v25[4 * v24];
          if (v19)
            operator delete(v19);
          goto LABEL_4;
        }
      }
      *(_DWORD *)v18 = v12;
      v11 = (uint64_t)(v18 + 4);
LABEL_4:
      v55 = (char *)v11;
LABEL_5:
      ++v8;
    }
    while (v8 != (unsigned int *)v9);
  }
  v49 = (char *)__p;
  if (__p != v55)
  {
    operations_research::glop::VariableValues::UpdateGivenNonBasicVariables((uint64_t)(v50 + 738), (int **)&__p, v51);
    v49 = (char *)__p;
  }
  if (v49)
  {
    v55 = v49;
    operator delete(v49);
  }
}

void sub_22DA198D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::StatString(size_t *this@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  std::string __p;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  operations_research::StatsGroup::StatString(this + 1290, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::StatsGroup::StatString(this + 1362, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &__p;
  else
    v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v7 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::StatsGroup::StatString(this + 1244, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &__p;
  else
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::StatsGroup::StatString(this + 1133, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &__p;
  else
    v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v11 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::StatsGroup::StatString(this + 756, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &__p;
  else
    v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v13 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::StatsGroup::StatString(this + 908, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::StatsGroup::StatString(this + 786, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &__p;
  else
    v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v17 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::StatsGroup::StatString(this + 1050, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &__p;
  else
    v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v19 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::glop::BasisFactorization::StatString(this + 105, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &__p;
  else
    v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v21 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v20, v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  operations_research::StatsGroup::StatString(this + 1442, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22DA19BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void sub_22DA19CE0()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    JUMPOUT(0x22DA19CD0);
  JUMPOUT(0x22DA19CB8);
}

void operations_research::glop::BasisFactorization::StatString(size_t *this@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  std::string __p;
  std::string v8;

  operations_research::StatsGroup::StatString(this + 1, &v8);
  operations_research::glop::LuFactorization::StatString(this + 114, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
}

void sub_22DA19DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::SimpleVariableInfo(_QWORD *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  operations_research::glop::VariablesInfo *v6;
  char v7;
  char v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  _QWORD v20[15];

  v20[14] = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (operations_research::glop::VariablesInfo *)(a1 + 685);
  v7 = *(_BYTE *)(*(_QWORD *)operations_research::glop::VariablesInfo::GetTypeRow((operations_research::glop::VariablesInfo *)(a1 + 685))
                + (int)a2);
  v8 = *(_BYTE *)(*(_QWORD *)operations_research::glop::VariablesInfo::GetStatusRow(v6) + (int)a2);
  v9 = a1[68];
  operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, *(double *)(a1[743] + 8 * (int)a2), (char *)v18);
  operations_research::glop::GetVariableStatusString(v8, (uint64_t)v16);
  operations_research::glop::GetVariableTypeString(v7, (uint64_t)v14);
  operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, *(double *)(a1[32] + 8 * (int)a2), (char *)v12);
  operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, *(double *)(a1[35] + 8 * (int)a2), (char *)__p);
  v20[0] = a2;
  v20[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  v20[2] = v9 + 24 * (int)a2;
  v20[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20[4] = v18;
  v20[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20[6] = v16;
  v20[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20[8] = v14;
  v20[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20[10] = v12;
  v20[11] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v20[12] = __p;
  v20[13] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::AppendPack((uint64_t)a3, "%d (%s) = %s, %s, %s, [%s,%s]", 29, (uint64_t)v20, 7);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v12[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v17 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v14[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v19 & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(v18[0]);
    return;
  }
LABEL_10:
  operator delete(v16[0]);
  if (v19 < 0)
    goto LABEL_11;
}

void sub_22DA19FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a27);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v38 + 23) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a33);
  if ((*(char *)(v38 + 23) & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)v38);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::RevisedSimplex::DisplayInfoOnVariables(operations_research::glop::RevisedSimplex *this)
{
  uint64_t v2;
  uint64_t i;
  double v4;
  double v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  void *__p[2];
  unsigned __int8 v29;
  void *v30[2];
  unsigned __int8 v31;
  void *v32[2];
  unsigned __int8 v33;
  void *v34[2];
  unsigned __int8 v35;
  _BYTE v36[16];

  if (*off_2540792A0[0] >= 3
    && (off_2540792A0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540792A0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
  {
    if (*(int *)((char *)this + 5) >= 1 && *off_2540792A8[0] >= 3)
    {
      v2 = 0;
      for (i = 0; i < *(int *)((char *)this + 5); ++i)
      {
        if (*off_2540792A8[0] < 3)
          goto LABEL_8;
        v4 = *(double *)(*((_QWORD *)this + 743) + 8 * i);
        v5 = *(double *)(*((_QWORD *)this + 27) + 8 * i);
        if (off_2540792A8[0] == &google::kLogSiteUninitialized
          && !google::InitVLOG3__((google *)off_2540792A8, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3))
        {
          goto LABEL_8;
        }
        google::LogMessage::LogMessage((google::LogMessage *)v36, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 3006);
        v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v36);
        operations_research::glop::RevisedSimplex::SimpleVariableInfo(this, i, v34);
        if ((v35 & 0x80u) == 0)
          v7 = v34;
        else
          v7 = (void **)v34[0];
        if ((v35 & 0x80u) == 0)
          v8 = v35;
        else
          v8 = (uint64_t)v34[1];
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)". ", 2);
        v11 = *((_QWORD *)this + 68) + v2;
        v12 = *(char *)(v11 + 23);
        if (v12 >= 0)
          v13 = *((_QWORD *)this + 68) + v2;
        else
          v13 = *(_QWORD *)v11;
        if (v12 >= 0)
          v14 = *(unsigned __int8 *)(v11 + 23);
        else
          v14 = *(_QWORD *)(v11 + 8);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" = ", 3);
        operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, v4, (char *)v32);
        if ((v33 & 0x80u) == 0)
          v17 = v32;
        else
          v17 = (void **)v32[0];
        if ((v33 & 0x80u) == 0)
          v18 = v33;
        else
          v18 = (uint64_t)v32[1];
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" * ", 3);
        operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, v5, (char *)v30);
        if ((v31 & 0x80u) == 0)
          v21 = v30;
        else
          v21 = (void **)v30[0];
        if ((v31 & 0x80u) == 0)
          v22 = v31;
        else
          v22 = (uint64_t)v30[1];
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(obj) = ", 8);
        operations_research::glop::Stringify((operations_research::glop *)FLAGS_simplex_display_numbers_as_fractions, v4 * v5, (char *)__p);
        if ((v29 & 0x80u) == 0)
          v25 = __p;
        else
          v25 = (void **)__p[0];
        if ((v29 & 0x80u) == 0)
          v26 = v29;
        else
          v26 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
        if ((char)v29 < 0)
        {
          operator delete(__p[0]);
          if (((char)v31 & 0x80000000) == 0)
          {
LABEL_44:
            if (((char)v33 & 0x80000000) == 0)
              goto LABEL_45;
            goto LABEL_49;
          }
        }
        else if (((char)v31 & 0x80000000) == 0)
        {
          goto LABEL_44;
        }
        operator delete(v30[0]);
        if (((char)v33 & 0x80000000) == 0)
        {
LABEL_45:
          if ((char)v35 < 0)
            goto LABEL_50;
          goto LABEL_7;
        }
LABEL_49:
        operator delete(v32[0]);
        if ((char)v35 < 0)
LABEL_50:
          operator delete(v34[0]);
LABEL_7:
        google::LogMessage::~LogMessage((google::LogMessage *)v36);
LABEL_8:
        v2 += 24;
      }
    }
    if (*off_2540792B0[0] > 2
      && (off_2540792B0[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_2540792B0, (int **)&fLI::FLAGS_v, "./ortools/glop/revised_simplex.cc", (const char *)3)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/glop/revised_simplex.cc", 3011);
      v27 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"------", 6);
      google::LogMessage::~LogMessage((google::LogMessage *)v34);
    }
  }
}

void sub_22DA1A440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DA1A454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_6:
    google::LogMessage::~LogMessage((google::LogMessage *)&a33);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

void sub_22DA1A53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0)
    JUMPOUT(0x22DA1A480);
  JUMPOUT(0x22DA1A478);
}

operations_research::glop::RevisedSimplex::IterationStats *operations_research::glop::RevisedSimplex::IterationStats::IterationStats(operations_research::glop::RevisedSimplex::IterationStats *this)
{
  char __p[20];
  char v4;

  strcpy((char *)this, "IterationStats");
  *((_BYTE *)this + 23) = 14;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  v4 = 5;
  strcpy(__p, "total");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::IterationStats *)((char *)this + 80), (__int128 *)__p, this);
  *((_QWORD *)this + 10) = &unk_24F987C10;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  if (v4 < 0)
    operator delete(*(void **)__p);
  v4 = 6;
  strcpy(__p, "normal");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::IterationStats *)((char *)this + 184), (__int128 *)__p, this);
  *((_QWORD *)this + 23) = &unk_24F987C10;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 33) = 0;
  if (v4 < 0)
    operator delete(*(void **)__p);
  v4 = 10;
  strcpy(__p, "bound_flip");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::IterationStats *)((char *)this + 288), (__int128 *)__p, this);
  *((_QWORD *)this + 36) = &unk_24F987C10;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 46) = 0;
  if (v4 < 0)
    operator delete(*(void **)__p);
  v4 = 10;
  strcpy(__p, "degenerate");
  operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::IterationStats *)((char *)this + 392), (__int128 *)__p, this);
  *((_QWORD *)this + 49) = &unk_24F987C10;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 59) = 0;
  if (v4 < 0)
    operator delete(*(void **)__p);
  v4 = 19;
  strcpy(__p, "degenerate_run_size");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::IterationStats *)((char *)this + 496), (__int128 *)__p, this) = &unk_24F987D30;
  if (v4 < 0)
    operator delete(*(void **)__p);
  return this;
}

void sub_22DA1A778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v14 + 392) = off_24F97FEB0;
  if (*(char *)(v14 + 423) < 0)
    operator delete(*(void **)(v14 + 400));
  *(_QWORD *)(v14 + 288) = off_24F97FEB0;
  if (*(char *)(v14 + 319) < 0)
    operator delete(*(void **)(v14 + 296));
  *(_QWORD *)(v14 + 184) = off_24F97FEB0;
  if (*(char *)(v14 + 215) < 0)
    operator delete(*(void **)(v14 + 192));
  *(_QWORD *)(v14 + 80) = off_24F97FEB0;
  if (*(char *)(v14 + 111) < 0)
    operator delete(*(void **)(v14 + 88));
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

operations_research::glop::RevisedSimplex::RatioTestStats *operations_research::glop::RevisedSimplex::RatioTestStats::RatioTestStats(operations_research::glop::RevisedSimplex::RatioTestStats *this)
{
  __int128 v3[2];

  strcpy((char *)this, "RatioTestStats");
  *((_BYTE *)this + 23) = 14;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  BYTE7(v3[1]) = 11;
  strcpy((char *)v3, "bound_shift");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 80), v3, this) = &unk_24F987CD0;
  if (SBYTE7(v3[1]) < 0)
    operator delete(*(void **)&v3[0]);
  BYTE7(v3[1]) = 14;
  strcpy((char *)v3, "abs_used_pivot");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 160), v3, this) = &unk_24F987CD0;
  if (SBYTE7(v3[1]) < 0)
    operator delete(*(void **)&v3[0]);
  BYTE7(v3[1]) = 16;
  strcpy((char *)v3, "abs_tested_pivot");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 240), v3, this) = &unk_24F987CD0;
  if (SBYTE7(v3[1]) < 0)
    operator delete(*(void **)&v3[0]);
  BYTE7(v3[1]) = 17;
  strcpy((char *)v3, "abs_skipped_pivot");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 320), v3, this) = &unk_24F987CD0;
  if (SBYTE7(v3[1]) < 0)
    operator delete(*(void **)&v3[0]);
  BYTE7(v3[1]) = 17;
  strcpy((char *)v3, "direction_density");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 400), v3, this) = &unk_24F987C70;
  if (SBYTE7(v3[1]) < 0)
    operator delete(*(void **)&v3[0]);
  BYTE7(v3[1]) = 15;
  strcpy((char *)v3, "leaving_choices");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 480), v3, this) = &unk_24F987D30;
  if (SBYTE7(v3[1]) < 0)
    operator delete(*(void **)&v3[0]);
  BYTE7(v3[1]) = 16;
  strcpy((char *)v3, "num_perfect_ties");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::RevisedSimplex::RatioTestStats *)((char *)this + 560), v3, this) = &unk_24F987D30;
  if (SBYTE7(v3[1]) < 0)
    operator delete(*(void **)&v3[0]);
  return this;
}

void sub_22DA1AAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v14 + 480) = off_24F97FEB0;
  if (*(char *)(v14 + 511) < 0)
    operator delete(*(void **)(v14 + 488));
  *(_QWORD *)(v14 + 400) = off_24F97FEB0;
  if (*(char *)(v14 + 431) < 0)
    operator delete(*(void **)(v14 + 408));
  *(_QWORD *)(v14 + 320) = off_24F97FEB0;
  if (*(char *)(v14 + 351) < 0)
    operator delete(*(void **)(v14 + 328));
  *(_QWORD *)(v14 + 240) = off_24F97FEB0;
  if (*(char *)(v14 + 271) < 0)
    operator delete(*(void **)(v14 + 248));
  *(_QWORD *)(v14 + 160) = off_24F97FEB0;
  if (*(char *)(v14 + 191) < 0)
    operator delete(*(void **)(v14 + 168));
  *(_QWORD *)(v14 + 80) = off_24F97FEB0;
  if (*(char *)(v14 + 111) < 0)
    operator delete(*(void **)(v14 + 88));
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

void sub_22DA1AC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    JUMPOUT(0x22DA1ABE8);
  JUMPOUT(0x22DA1ABECLL);
}

void sub_22DA1AC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    JUMPOUT(0x22DA1AC04);
  JUMPOUT(0x22DA1AC08);
}

void operations_research::glop::RevisedSimplex::RatioTestStats::~RatioTestStats(operations_research::glop::RevisedSimplex::RatioTestStats *this)
{
  *((_QWORD *)this + 70) = off_24F97FEB0;
  if (*((char *)this + 591) < 0)
  {
    operator delete(*((void **)this + 71));
    *((_QWORD *)this + 60) = off_24F97FEB0;
    if ((*((char *)this + 511) & 0x80000000) == 0)
    {
LABEL_3:
      *((_QWORD *)this + 50) = off_24F97FEB0;
      if ((*((char *)this + 431) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    *((_QWORD *)this + 60) = off_24F97FEB0;
    if ((*((char *)this + 511) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*((void **)this + 61));
  *((_QWORD *)this + 50) = off_24F97FEB0;
  if ((*((char *)this + 431) & 0x80000000) == 0)
  {
LABEL_4:
    *((_QWORD *)this + 40) = off_24F97FEB0;
    if ((*((char *)this + 351) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*((void **)this + 51));
  *((_QWORD *)this + 40) = off_24F97FEB0;
  if ((*((char *)this + 351) & 0x80000000) == 0)
  {
LABEL_5:
    *((_QWORD *)this + 30) = off_24F97FEB0;
    if ((*((char *)this + 271) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*((void **)this + 41));
  *((_QWORD *)this + 30) = off_24F97FEB0;
  if ((*((char *)this + 271) & 0x80000000) == 0)
  {
LABEL_6:
    *((_QWORD *)this + 20) = off_24F97FEB0;
    if ((*((char *)this + 191) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_15:
    operator delete(*((void **)this + 21));
    *((_QWORD *)this + 10) = off_24F97FEB0;
    if ((*((char *)this + 111) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_16:
    operator delete(*((void **)this + 11));
    operations_research::StatsGroup::~StatsGroup(this);
    return;
  }
LABEL_14:
  operator delete(*((void **)this + 31));
  *((_QWORD *)this + 20) = off_24F97FEB0;
  if (*((char *)this + 191) < 0)
    goto LABEL_15;
LABEL_7:
  *((_QWORD *)this + 10) = off_24F97FEB0;
  if (*((char *)this + 111) < 0)
    goto LABEL_16;
LABEL_8:
  operations_research::StatsGroup::~StatsGroup(this);
}

void operations_research::glop::ReducedCosts::~ReducedCosts(operations_research::glop::ReducedCosts *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)*((_QWORD *)this + 105);
  if (v2)
  {
    *((_QWORD *)this + 106) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 100);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 97);
  if (v4)
  {
    *((_QWORD *)this + 98) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 93);
  if (v5)
  {
    *((_QWORD *)this + 94) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 90);
  if (v6)
  {
    *((_QWORD *)this + 91) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 87);
  if (v7)
  {
    *((_QWORD *)this + 88) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 84);
  if (v8)
  {
    *((_QWORD *)this + 85) = v8;
    operator delete(v8);
  }
  *((_QWORD *)this + 73) = off_24F97FEB0;
  if ((*((char *)this + 615) & 0x80000000) == 0)
  {
    *((_QWORD *)this + 63) = off_24F97FEB0;
    if ((*((char *)this + 535) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    operator delete(*((void **)this + 64));
    *((_QWORD *)this + 53) = off_24F97FEB0;
    if ((*((char *)this + 455) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_21:
    operator delete(*((void **)this + 54));
    goto LABEL_18;
  }
  operator delete(*((void **)this + 74));
  *((_QWORD *)this + 63) = off_24F97FEB0;
  if (*((char *)this + 535) < 0)
    goto LABEL_20;
LABEL_17:
  *((_QWORD *)this + 53) = off_24F97FEB0;
  if (*((char *)this + 455) < 0)
    goto LABEL_21;
LABEL_18:
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::ReducedCosts *)((char *)this + 344));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::ReducedCosts *)((char *)this + 48));
}

void operations_research::glop::UpdateRow::~UpdateRow(operations_research::glop::UpdateRow *this)
{
  operations_research::StatsGroup *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *((_QWORD *)this + 100) = off_24F97FEB0;
  if (*((char *)this + 831) < 0)
  {
    operator delete(*((void **)this + 101));
    v2 = (operations_research::glop::UpdateRow *)((char *)this + 560);
    *((_QWORD *)this + 90) = off_24F97FEB0;
    if ((*((char *)this + 751) & 0x80000000) == 0)
    {
LABEL_3:
      *((_QWORD *)this + 80) = off_24F97FEB0;
      if ((*((char *)this + 671) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else
  {
    v2 = (operations_research::glop::UpdateRow *)((char *)this + 560);
    *((_QWORD *)this + 90) = off_24F97FEB0;
    if ((*((char *)this + 751) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*((void **)this + 91));
  *((_QWORD *)this + 80) = off_24F97FEB0;
  if ((*((char *)this + 671) & 0x80000000) == 0)
  {
LABEL_4:
    operations_research::StatsGroup::~StatsGroup(v2);
    operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::UpdateRow *)((char *)this + 264));
    v3 = (void *)*((_QWORD *)this + 28);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_21:
  operator delete(*((void **)this + 81));
  operations_research::StatsGroup::~StatsGroup(v2);
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::UpdateRow *)((char *)this + 264));
  v3 = (void *)*((_QWORD *)this + 28);
  if (v3)
  {
LABEL_5:
    *((_QWORD *)this + 29) = v3;
    operator delete(v3);
  }
LABEL_6:
  v4 = (void *)*((_QWORD *)this + 22);
  if (v4)
  {
    *((_QWORD *)this + 23) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 19) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 15);
  if (v6)
  {
    *((_QWORD *)this + 16) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 12);
  if (v7)
    operator delete(v7);
  v8 = (void *)*((_QWORD *)this + 9);
  if (v8)
  {
    *((_QWORD *)this + 10) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 6) = v9;
    operator delete(v9);
  }
}

void operations_research::glop::PrimalEdgeNorms::~PrimalEdgeNorms(operations_research::glop::PrimalEdgeNorms *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 108);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 105);
  if (v3)
  {
    *((_QWORD *)this + 106) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 101);
  if (v4)
  {
    *((_QWORD *)this + 102) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 97);
  if (v5)
  {
    *((_QWORD *)this + 98) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 94);
  if (v6)
  {
    *((_QWORD *)this + 95) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 91);
  if (v7)
  {
    *((_QWORD *)this + 92) = v7;
    operator delete(v7);
  }
  *((_QWORD *)this + 80) = off_24F97FEB0;
  if (*((char *)this + 671) < 0)
  {
    operator delete(*((void **)this + 81));
    *((_QWORD *)this + 70) = off_24F97FEB0;
    if ((*((char *)this + 591) & 0x80000000) == 0)
    {
LABEL_15:
      *((_QWORD *)this + 60) = off_24F97FEB0;
      if ((*((char *)this + 511) & 0x80000000) == 0)
        goto LABEL_16;
LABEL_20:
      operator delete(*((void **)this + 61));
      *((_QWORD *)this + 50) = off_24F97FEB0;
      if ((*((char *)this + 431) & 0x80000000) == 0)
        goto LABEL_17;
LABEL_21:
      operator delete(*((void **)this + 51));
      goto LABEL_17;
    }
  }
  else
  {
    *((_QWORD *)this + 70) = off_24F97FEB0;
    if ((*((char *)this + 591) & 0x80000000) == 0)
      goto LABEL_15;
  }
  operator delete(*((void **)this + 71));
  *((_QWORD *)this + 60) = off_24F97FEB0;
  if (*((char *)this + 511) < 0)
    goto LABEL_20;
LABEL_16:
  *((_QWORD *)this + 50) = off_24F97FEB0;
  if (*((char *)this + 431) < 0)
    goto LABEL_21;
LABEL_17:
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::PrimalEdgeNorms *)((char *)this + 320));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::PrimalEdgeNorms *)((char *)this + 24));
}

void operations_research::glop::VariableValues::~VariableValues(operations_research::glop::VariableValues *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = (void *)*((_QWORD *)this + 45);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 42);
  if (v3)
  {
    *((_QWORD *)this + 43) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 39) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
    operator delete(v5);
  v6 = (void *)*((_QWORD *)this + 32);
  if (v6)
  {
    *((_QWORD *)this + 33) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 28);
  if (v7)
  {
    *((_QWORD *)this + 29) = v7;
    operator delete(v7);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::VariableValues *)((char *)this + 144));
  v8 = (void *)*((_QWORD *)this + 12);
  if (v8)
  {
    *((_QWORD *)this + 13) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 8);
  if (v9)
  {
    *((_QWORD *)this + 9) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 5);
  if (v10)
  {
    *((_QWORD *)this + 6) = v10;
    operator delete(v10);
  }
}

void operations_research::glop::VariablesInfo::~VariablesInfo(operations_research::glop::VariablesInfo *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 45);
  if (v2)
  {
    *((_QWORD *)this + 46) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 38);
  if (v3)
  {
    *((_QWORD *)this + 39) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 31);
  if (v4)
  {
    *((_QWORD *)this + 32) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 24);
  if (v5)
  {
    *((_QWORD *)this + 25) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 17);
  if (v6)
  {
    *((_QWORD *)this + 18) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 11) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
}

void std::vector<operations_research::glop::SparseColumn const*>::__append(unint64_t *a1, unint64_t a2, const double *a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (_QWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_44;
      v17 = v16 + 1;
      v8 = (_QWORD *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = vld1q_dup_f64(a3);
      v19 = (float64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
          *v8++ = *(_QWORD *)a3;
        while (v8 != (_QWORD *)(v7 + 8 * a2));
      }
      v8 = (_QWORD *)(v7 + 8 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    v9 = v7 - *a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + a2;
    if (v11 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v6 - *a1;
    v13 = v12 >> 2;
    if (v12 >> 2 <= v11)
      v13 = (v9 >> 3) + a2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v10];
    v22 = (char *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_45;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[8 * v10];
      if (&v15[8 * a2 + v9] > (char *)a3)
        goto LABEL_45;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vld1q_dup_f64(a3);
    v27 = (float64x2_t *)&v15[8 * v10 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      do
      {
        *(double *)v24 = *a3;
        v24 += 8;
      }
      while (v24 != v22);
    }
    v29 = (_QWORD *)*a1;
    if (v7 != *a1)
    {
      v30 = v7 - *a1 - 8;
      if (v30 < 0x58)
        goto LABEL_46;
      if (v7 - (unint64_t)&v15[v9] < 0x20)
        goto LABEL_46;
      v31 = (v30 >> 3) + 1;
      v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (_QWORD *)(v7 - v32);
      v21 -= v32;
      v33 = &v15[8 * v10 - 16];
      v34 = (__int128 *)(v7 - 16);
      v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
        {
          v37 = *--v8;
          *(_QWORD *)(v21 - 8) = v37;
          v21 -= 8;
        }
        while (v8 != v29);
      }
      v8 = (_QWORD *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::vector<operations_research::glop::VariableStatus>::__assign_with_size[abi:ne180100]<operations_research::glop::VariableStatus*,operations_research::glop::VariableStatus*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_22;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_22:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v7[1] = &v9[a3 - v15];
  return result;
}

void operations_research::glop::LuFactorization::StatString(size_t *this@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  std::string __p;
  std::string v8;

  operations_research::StatsGroup::StatString(this + 168, &v8);
  operations_research::StatsGroup::StatString(this + 235, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
}

void sub_22DA1B620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F9800E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F9800E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  result = operations_research::glop::BasisFactorization::DeterministicTime((operations_research::glop::BasisFactorization *)(v1 + 840))
         + (double)*(uint64_t *)(v1 + 8096) * 0.000000002
         + (double)*(uint64_t *)(v1 + 7832) * 0.000000002;
  *(double *)(v2 + 112) = *(double *)(v2 + 112) + result - *(double *)(v1 + 10312);
  *(double *)(v1 + 10312) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research4glop14RevisedSimplex5SolveERKNS0_13LinearProgramEPNS_9TimeLimitEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research4glop14RevisedSimplex5SolveERKNS0_13LinearProgramEPNS_9TimeLimitEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research4glop14RevisedSimplex5SolveERKNS0_13LinearProgramEPNS_9TimeLimitEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research4glop14RevisedSimplex5SolveERKNS0_13LinearProgramEPNS_9TimeLimitEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Solve(operations_research::glop::LinearProgram const&,operations_research::TimeLimit *)::$_0>,void ()(void)>::target_type()
{
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n, std::vector<std::string>::const_reference __x)
{
  std::string *value;
  std::vector<std::string>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  std::vector<std::string>::size_type v14;
  __int128 v15;
  std::string *v16;
  int v17;
  std::vector<std::string>::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string *v22;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::size_type v24;
  std::string *v25;
  __int128 v26;
  __int128 v27;
  std::vector<std::string>::pointer v28;
  std::vector<std::string>::pointer v29;
  std::string *v30;

  value = this->__end_cap_.__value_;
  end = this->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) < __n)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::string *)&v12[24 * v8];
    v30 = (std::string *)&v12[24 * v11];
    v17 = SHIBYTE(__x->__r_.__value_.__r.__words[2]);
    if (v17 < 0)
    {
      v24 = 24 * __n - 24;
      v25 = v16;
      if ((v17 & 0x80) != 0)
        goto LABEL_27;
LABEL_26:
      v26 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
      v25->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
      while (v24)
      {
        ++v25;
        v24 -= 24;
        if ((*((_BYTE *)&__x->__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_26;
LABEL_27:
        std::string::__init_copy_ctor_external(v25, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      begin = this->__begin_;
      end = this->__end_;
      v21 = v16;
      v22 = &v16[__n];
      if (end == this->__begin_)
        goto LABEL_34;
    }
    else
    {
      v18 = 24 * __n;
      v19 = v16;
      do
      {
        v20 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        v19->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        ++v19;
        v18 -= 24;
      }
      while (v18);
      v21 = v16;
      v22 = &v16[__n];
      begin = this->__begin_;
      if (end == this->__begin_)
      {
LABEL_34:
        v28 = end;
LABEL_35:
        this->__begin_ = v21;
        this->__end_ = v22;
        this->__end_cap_.__value_ = v30;
        if (end != v28)
        {
          v29 = end - 1;
          do
          {
            if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29->__r_.__value_.__l.__data_);
            --v29;
          }
          while (&v29[1] != v28);
          end = v28;
        }
        if (end)
          operator delete(end);
        return;
      }
    }
    do
    {
      v27 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v21[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21[-1].__r_.__value_.__l.__data_ = v27;
      --v21;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --end;
    }
    while (end != begin);
    v28 = this->__begin_;
    end = this->__end_;
    goto LABEL_35;
  }
  if (__n)
  {
    v13 = &end[__n];
    v14 = 24 * __n;
    do
    {
      if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(end, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      else
      {
        v15 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
      }
      ++end;
      v14 -= 24;
    }
    while (v14);
    end = v13;
  }
  this->__end_ = end;
}

void sub_22DA1BA50(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void sub_22DA1BA68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

double std::__introsort<std::_ClassicAlgPolicy,operations_research::glop::`anonymous namespace'::ColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,false>(int *a1, int *a2, uint64_t **a3, uint64_t a4, char a5, double result)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int *v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  int *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  double v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  int *v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int *v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  BOOL v80;
  uint64_t v81;
  int *v82;
  int *v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  double v97;
  int *v98;
  int v99;
  int *v100;
  int v101;
  uint64_t v102;
  int v103;
  double v104;
  double v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  int *v109;
  int *v110;
  uint64_t *v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  int64_t v121;
  BOOL v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t *v135;
  int *v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

int *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::`anonymous namespace'::ColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,0>(int *result, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  int v6;
  int v7;
  double v8;
  double v9;
  int v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  v7 = *result;
  v8 = *(double *)(a6 + 8 * *a2);
  v9 = *(double *)(a6 + 8 * *result);
  v10 = *a3;
  v11 = *(double *)(a6 + 8 * *a3);
  if (v8 >= v9)
  {
    if (v11 >= v8)
    {
      v14 = *a4;
      if (*(double *)(a6 + 8 * v14) >= *(double *)(a6 + 8 * v10))
        goto LABEL_19;
      goto LABEL_16;
    }
    *a2 = v10;
    *a3 = v6;
    v12 = *a2;
    v13 = *result;
    if (*(double *)(a6 + 8 * v12) >= *(double *)(a6 + 8 * v13))
    {
      v15 = v6;
      v10 = v6;
      v14 = *a4;
      if (*(double *)(a6 + 8 * v14) >= *(double *)(a6 + 8 * v15))
        goto LABEL_19;
      goto LABEL_16;
    }
    *result = v12;
    *a2 = v13;
    v10 = *a3;
  }
  else
  {
    if (v11 < v8)
    {
      *result = v10;
      goto LABEL_9;
    }
    *result = v6;
    *a2 = v7;
    v10 = *a3;
    if (*(double *)(a6 + 8 * *a3) < v9)
    {
      *a2 = v10;
LABEL_9:
      *a3 = v7;
      v10 = v7;
      v14 = *a4;
      if (*(double *)(a6 + 8 * v14) >= *(double *)(a6 + 8 * v7))
        goto LABEL_19;
      goto LABEL_16;
    }
  }
  v14 = *a4;
  if (*(double *)(a6 + 8 * v14) >= *(double *)(a6 + 8 * v10))
    goto LABEL_19;
LABEL_16:
  *a3 = v14;
  *a4 = v10;
  v16 = *a3;
  v17 = *a2;
  if (*(double *)(a6 + 8 * v16) < *(double *)(a6 + 8 * v17))
  {
    *a2 = v16;
    *a3 = v17;
    v18 = *a2;
    v19 = *result;
    if (*(double *)(a6 + 8 * v18) < *(double *)(a6 + 8 * v19))
    {
      *result = v18;
      *a2 = v19;
    }
  }
LABEL_19:
  v20 = *a5;
  v21 = *a4;
  if (*(double *)(a6 + 8 * v20) < *(double *)(a6 + 8 * v21))
  {
    *a4 = v20;
    *a5 = v21;
    v22 = *a4;
    v23 = *a3;
    if (*(double *)(a6 + 8 * v22) < *(double *)(a6 + 8 * v23))
    {
      *a3 = v22;
      *a4 = v23;
      v24 = *a3;
      v25 = *a2;
      if (*(double *)(a6 + 8 * v24) < *(double *)(a6 + 8 * v25))
      {
        *a2 = v24;
        *a3 = v25;
        v26 = *a2;
        v27 = *result;
        if (*(double *)(a6 + 8 * v26) < *(double *)(a6 + 8 * v27))
        {
          *result = v26;
          *a2 = v27;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::glop::`anonymous namespace'::ColumnComparator &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  int *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  int *v23;
  int v24;
  int *v25;
  int v26;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  int *v34;
  int *v35;
  int *v36;
  int v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v14 = *(a2 - 1);
      v15 = *a1;
      if (*(double *)(*a3 + 8 * v14) < *(double *)(*a3 + 8 * v15))
      {
        *a1 = v14;
        *(a2 - 1) = v15;
      }
      return 1;
    case 3:
      v16 = *a3;
      v17 = *a1;
      v18 = a1[1];
      v19 = *(double *)(*a3 + 8 * v18);
      v20 = *(double *)(*a3 + 8 * v17);
      v21 = *(a2 - 1);
      v22 = *(double *)(*a3 + 8 * v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v18;
          v45 = *a1;
          v44 = a1[1];
          if (*(double *)(v16 + 8 * v44) < *(double *)(v16 + 8 * v45))
          {
            *a1 = v44;
            a1[1] = v45;
            return 1;
          }
        }
      }
      else
      {
        if (v22 < v19)
        {
          *a1 = v21;
          *(a2 - 1) = v17;
          return 1;
        }
        *a1 = v18;
        a1[1] = v17;
        v46 = *(a2 - 1);
        if (*(double *)(v16 + 8 * v46) < v20)
        {
          a1[1] = v46;
          *(a2 - 1) = v17;
          return 1;
        }
      }
      return 1;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a3;
      v28 = *a1;
      v29 = *(double *)(*a3 + 8 * v24);
      v30 = *(double *)(*a3 + 8 * *a1);
      v31 = v26;
      v32 = *(double *)(*a3 + 8 * v26);
      if (v29 >= v30)
      {
        if (v32 >= v29)
        {
          v24 = a1[2];
        }
        else
        {
          v33 = v24;
          *v23 = v26;
          *v25 = v24;
          v34 = a1;
          v35 = a1 + 1;
          v31 = v24;
          if (v32 < v30)
            goto LABEL_40;
        }
        v47 = *(a2 - 1);
        if (*(double *)(v27 + 8 * v47) >= *(double *)(v27 + 8 * v31))
          return 1;
      }
      else
      {
        v33 = v28;
        if (v32 < v29)
        {
          v34 = a1;
          v35 = a1 + 2;
          v24 = *a1;
          goto LABEL_40;
        }
        *a1 = v24;
        a1[1] = v28;
        v34 = a1 + 1;
        v35 = a1 + 2;
        v24 = v28;
        if (v32 < v30)
        {
LABEL_40:
          *v34 = v26;
          *v35 = v28;
          v47 = *(a2 - 1);
          if (*(double *)(v27 + 8 * v47) >= *(double *)(v27 + 8 * v33))
            return 1;
          goto LABEL_44;
        }
        v24 = v26;
        v47 = *(a2 - 1);
        if (*(double *)(v27 + 8 * v47) >= *(double *)(v27 + 8 * v31))
          return 1;
      }
LABEL_44:
      *v25 = v47;
      *(a2 - 1) = v24;
      v48 = *v25;
      v49 = *v23;
      v50 = *(double *)(v27 + 8 * v48);
      if (v50 < *(double *)(v27 + 8 * v49))
      {
        a1[1] = v48;
        a1[2] = v49;
        v51 = *a1;
        if (v50 < *(double *)(v27 + 8 * v51))
        {
          *a1 = v48;
          a1[1] = v51;
          return 1;
        }
      }
      return 1;
    case 5:
      return 1;
    default:
      v5 = a1 + 2;
      v4 = a1[2];
      v6 = a1[1];
      v7 = *a3;
      v8 = *(double *)(*a3 + 8 * v6);
      v9 = *a1;
      v10 = *(double *)(*a3 + 8 * v9);
      v11 = *(double *)(*a3 + 8 * v4);
      if (v8 < v10)
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 >= v8)
        {
          *a1 = v6;
          a1[1] = v9;
          v12 = a1 + 1;
          v13 = a1 + 2;
          if (v11 >= v10)
            goto LABEL_20;
        }
LABEL_19:
        *v12 = v4;
        *v13 = v9;
        goto LABEL_20;
      }
      if (v11 < v8)
      {
        a1[1] = v4;
        *v5 = v6;
        v12 = a1;
        v13 = a1 + 1;
        if (v11 < v10)
          goto LABEL_19;
      }
LABEL_20:
      v36 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v37 = 0;
      for (i = 12; ; i += 4)
      {
        v39 = *v36;
        v40 = *v5;
        v41 = *(double *)(v7 + 8 * v39);
        if (v41 < *(double *)(v7 + 8 * v40))
          break;
LABEL_29:
        v5 = v36++;
        if (v36 == a2)
          return 1;
      }
      v42 = i;
      do
      {
        *(int *)((char *)a1 + v42) = v40;
        v43 = v42 - 4;
        if (v42 == 4)
        {
          *a1 = v39;
          if (++v37 != 8)
            goto LABEL_29;
          return v36 + 1 == a2;
        }
        v40 = *(int *)((char *)a1 + v42 - 8);
        v42 -= 4;
      }
      while (v41 < *(double *)(v7 + 8 * v40));
      *(int *)((char *)a1 + v43) = v39;
      if (++v37 != 8)
        goto LABEL_29;
      return v36 + 1 == a2;
  }
}

void std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F980170;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F980170;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  result = operations_research::glop::BasisFactorization::DeterministicTime((operations_research::glop::BasisFactorization *)(v1 + 840))
         + (double)*(uint64_t *)(v1 + 8096) * 0.000000002
         + (double)*(uint64_t *)(v1 + 7832) * 0.000000002;
  *(double *)(v2 + 112) = *(double *)(v2 + 112) + result - *(double *)(v1 + 10312);
  *(double *)(v1 + 10312) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research4glop14RevisedSimplex8MinimizeEPNS_9TimeLimitEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research4glop14RevisedSimplex8MinimizeEPNS_9TimeLimitEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research4glop14RevisedSimplex8MinimizeEPNS_9TimeLimitEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research4glop14RevisedSimplex8MinimizeEPNS_9TimeLimitEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::Minimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F9801F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F9801F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  result = operations_research::glop::BasisFactorization::DeterministicTime((operations_research::glop::BasisFactorization *)(v1 + 840))
         + (double)*(uint64_t *)(v1 + 8096) * 0.000000002
         + (double)*(uint64_t *)(v1 + 7832) * 0.000000002;
  *(double *)(v2 + 112) = *(double *)(v2 + 112) + result - *(double *)(v1 + 10312);
  *(double *)(v1 + 10312) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research4glop14RevisedSimplex12DualMinimizeEPNS_9TimeLimitEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research4glop14RevisedSimplex12DualMinimizeEPNS_9TimeLimitEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research4glop14RevisedSimplex12DualMinimizeEPNS_9TimeLimitEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research4glop14RevisedSimplex12DualMinimizeEPNS_9TimeLimitEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0,std::allocator<operations_research::glop::RevisedSimplex::DualMinimize(operations_research::TimeLimit *)::$_0>,void ()(void)>::target_type()
{
}

void OUTLINED_FUNCTION_0_3()
{
  JUMPOUT(0x22E31DF60);
}

uint64_t operations_research::glop::Status::Status(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

uint64_t operations_research::glop::Status::Status(uint64_t result, int a2, __int128 *a3)
{
  __int128 v3;

  *(_DWORD *)result = a2;
  if (a2)
  {
    v3 = *a3;
    *(_QWORD *)(result + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 8) = v3;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
  }
  else
  {
    *(_BYTE *)(result + 31) = 0;
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

char *operations_research::glop::GetErrorCodeString@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _BYTE v4[16];

  switch((int)result)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "GLOP_OK");
      break;
    case 1:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "ERROR_LU");
      break;
    case 2:
      *(_BYTE *)(a2 + 23) = 11;
      strcpy((char *)a2, "ERROR_BOUND");
      break;
    case 3:
      *(_BYTE *)(a2 + 23) = 10;
      strcpy((char *)a2, "ERROR_NULL");
      break;
    case 4:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "INVALID_PROBLEM");
      break;
    default:
      google::LogMessage::LogMessage((google::LogMessage *)v4, (google::glog_internal_namespace_ *)"./ortools/glop/status.cc", 44, 2);
      v3 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Invalid Status::ErrorCode ", 26);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v4);
      result = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_22DCE6540;
      strcpy(result, "UNKNOWN Status::ErrorCode");
      break;
  }
  return result;
}

void sub_22DA1CF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::UpdateRow::UpdateRow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 168;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 208) = -1;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 1;
  *(_DWORD *)(a1 + 249) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  operations_research::glop::GlopParameters::GlopParameters(a1 + 264, 0);
  operations_research::glop::UpdateRow::Stats::Stats((operations_research::glop::UpdateRow::Stats *)(a1 + 560));
  return a1;
}

void sub_22DA1D040(_Unwind_Exception *a1)
{
  _QWORD *v1;
  operations_research::glop::ScatteredColumn *v2;
  operations_research::glop::GlopParameters *v3;
  void **v4;
  void **v5;
  operations_research::glop::GlopParameters *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v6 = v3;
  operations_research::glop::GlopParameters::~GlopParameters(v6);
  v8 = *v5;
  if (*v5)
  {
    v1[29] = v8;
    operator delete(v8);
    v9 = *v4;
    if (!*v4)
    {
LABEL_3:
      v10 = (void *)v1[18];
      if (!v10)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v9 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[23] = v9;
  operator delete(v9);
  v10 = (void *)v1[18];
  if (!v10)
  {
LABEL_4:
    v11 = (void *)v1[15];
    if (!v11)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v1[19] = v10;
  operator delete(v10);
  v11 = (void *)v1[15];
  if (!v11)
  {
LABEL_5:
    operations_research::glop::ScatteredColumn::~ScatteredColumn(v2);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v1[16] = v11;
  operator delete(v11);
  operations_research::glop::ScatteredColumn::~ScatteredColumn(v2);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::UpdateRow::Invalidate(uint64_t this)
{
  *(_BYTE *)(this + 248) = 1;
  return this;
}

uint64_t operations_research::glop::UpdateRow::IgnoreUpdatePosition(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 224);
  if (a2 < (int)((unint64_t)(*(_QWORD *)(result + 232) - v2) >> 3))
    *(_QWORD *)(v2 + 8 * a2) = 0;
  return result;
}

uint64_t operations_research::glop::UpdateRow::GetUnitRowLeftInverse(operations_research::glop::UpdateRow *this)
{
  return (uint64_t)this + 40;
}

uint64_t operations_research::glop::UpdateRow::ComputeAndGetUnitRowLeftInverse(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  *(_BYTE *)(a1 + 248) = 1;
  v2 = a1 + 40;
  operations_research::glop::BasisFactorization::TemporaryLeftSolveForUnitRow(*(_QWORD *)(a1 + 32), a2, a1 + 40);
  return v2;
}

void operations_research::glop::UpdateRow::ComputeUpdateRow(int **a1, unsigned int a2)
{
  uint64_t *v3;
  int *v4;
  double v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  int *v28;
  unint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  int *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  int *v53;
  unint64_t v54;
  int *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  int *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t NumEntriesInRelevantColumns;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  void **v70;

  if (*((_BYTE *)a1 + 248) || *(_DWORD *)((char *)a1 + 249) != a2)
  {
    *((_BYTE *)a1 + 248) = 0;
    *(_DWORD *)((char *)a1 + 249) = a2;
    v3 = (uint64_t *)(a1 + 5);
    operations_research::glop::BasisFactorization::LeftSolveForUnitRow((uint64_t)a1[4], a2, (uint64_t)(a1 + 5));
    if (!*((_BYTE *)a1 + 363))
    {
      operations_research::glop::UpdateRow::ComputeUpdatesColumnWise((operations_research::glop::UpdateRow *)a1);
      v38 = operations_research::glop::VariablesInfo::GetNumEntriesInRelevantColumns((operations_research::glop::VariablesInfo *)a1[2])
          + (*a1)[1];
      goto LABEL_81;
    }
    v4 = a1[15];
    v5 = *((double *)a1 + 65);
    a1[16] = v4;
    v70 = (void **)(a1 + 15);
    v7 = a1[9];
    v6 = a1[10];
    if (v7 != v6)
    {
      v8 = (char *)v6 - (char *)v7;
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = 0;
        v11 = *v3;
        v12 = (unint64_t)v8 >> 2;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        v67 = *v3;
        v68 = a1[9];
        v66 = v13;
        while (1)
        {
          v18 = v7[v10];
          if (fabs(*(double *)(v11 + 8 * v18)) <= v5)
            goto LABEL_12;
          v19 = a1[17];
          if (v4 >= v19)
            break;
          *v4 = v18;
          v14 = (uint64_t)(v4 + 1);
LABEL_11:
          v15 = v7[v10];
          v16 = *((_QWORD *)a1[1] + 7);
          v17 = *(_QWORD *)(v16 + (((v15 << 32) + 0x100000000) >> 29));
          a1[16] = (int *)v14;
          v9 = v17 + v9 - *(_QWORD *)(v16 + 8 * v15);
          v4 = (int *)v14;
LABEL_12:
          if (++v10 == v13)
            goto LABEL_76;
        }
        v20 = v9;
        v21 = (int *)*v70;
        v22 = (char *)v4 - (_BYTE *)*v70;
        v23 = v22 >> 2;
        v24 = (v22 >> 2) + 1;
        if (v24 >> 62)
          goto LABEL_84;
        v25 = (char *)v19 - (char *)v21;
        if (v25 >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          if (v26 >> 62)
            goto LABEL_85;
          v27 = operator new(4 * v26);
          v28 = (int *)&v27[4 * v23];
          *v28 = v18;
          v14 = (uint64_t)(v28 + 1);
          if (v4 != v21)
          {
LABEL_24:
            v29 = (char *)(v4 - 1) - (char *)v21;
            if (v29 >= 0xBC
              && &v27[v22 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] <= &v27[v22 - 4]
              && (int *)((char *)v4 - (v29 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v4 - 1
              && (unint64_t)((char *)v4 - v27 - v22) >= 0x20)
            {
              v32 = (v29 >> 2) + 1;
              v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
              v30 = &v4[v33 / 0xFFFFFFFFFFFFFFFCLL];
              v28 = (int *)((char *)v28 - v33);
              v34 = &v27[4 * v23 - 16];
              v35 = v4 - 4;
              v36 = v32 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v37 = *(_OWORD *)v35;
                *(v34 - 1) = *((_OWORD *)v35 - 1);
                *v34 = v37;
                v34 -= 2;
                v35 -= 8;
                v36 -= 8;
              }
              while (v36);
              v9 = v20;
              if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_30:
                a1[15] = v28;
                a1[16] = (int *)v14;
                a1[17] = (int *)&v27[4 * v26];
                if (!v21)
                {
LABEL_32:
                  v11 = v67;
                  v7 = v68;
                  v13 = v66;
                  goto LABEL_11;
                }
LABEL_31:
                operator delete(v21);
                goto LABEL_32;
              }
            }
            else
            {
              v30 = v4;
              v9 = v20;
            }
            do
            {
              v31 = *--v30;
              *--v28 = v31;
            }
            while (v30 != v21);
            goto LABEL_30;
          }
        }
        else
        {
          v27 = 0;
          v28 = (int *)(4 * v23);
          *(_DWORD *)(4 * v23) = v18;
          v14 = 4 * v23 + 4;
          if (v4 != v21)
            goto LABEL_24;
        }
        v9 = v20;
        a1[15] = v28;
        a1[16] = (int *)v14;
        a1[17] = (int *)&v27[4 * v26];
        if (!v21)
          goto LABEL_32;
        goto LABEL_31;
      }
LABEL_75:
      v9 = 0;
LABEL_76:
      NumEntriesInRelevantColumns = operations_research::glop::VariablesInfo::GetNumEntriesInRelevantColumns((operations_research::glop::VariablesInfo *)a1[2]);
      if ((double)NumEntriesInRelevantColumns * 0.5 <= (double)v9)
      {
        v65 = NumEntriesInRelevantColumns;
        operations_research::glop::UpdateRow::ComputeUpdatesColumnWise((operations_research::glop::UpdateRow *)a1);
        v38 = v65 + (*a1)[1];
      }
      else
      {
        if ((double)(*a1)[1] * 1.1 > (double)v9)
        {
          operations_research::glop::UpdateRow::ComputeUpdatesRowWiseHypersparse((operations_research::glop::UpdateRow *)a1);
          v64 = a1 + 32;
          v38 = (uint64_t)a1[32];
LABEL_82:
          *v64 = v38 + v9;
          return;
        }
        operations_research::glop::UpdateRow::ComputeUpdatesRowWise((operations_research::glop::UpdateRow *)a1);
        v38 = v9 + **a1;
      }
LABEL_81:
      v64 = a1 + 32;
      v9 = (uint64_t)a1[32];
      goto LABEL_82;
    }
    v39 = (char *)a1[6] - (char *)a1[5];
    if ((int)(v39 >> 3) < 1)
      goto LABEL_75;
    v40 = 0;
    v9 = 0;
    v41 = (v39 >> 3);
    v69 = v41;
    while (1)
    {
      if (fabs(*(double *)(*v3 + 8 * v40)) <= v5)
        goto LABEL_45;
      v45 = a1[17];
      if (v4 >= v45)
        break;
      *v4 = v40;
      v42 = (uint64_t)(v4 + 1);
LABEL_44:
      v43 = *((_QWORD *)a1[1] + 7);
      v44 = *(_QWORD *)(v43 + 8 * (v40 + 1));
      a1[16] = (int *)v42;
      v9 = v44 + v9 - *(_QWORD *)(v43 + 8 * v40);
      v4 = (int *)v42;
LABEL_45:
      if (++v40 == v41)
        goto LABEL_76;
    }
    v46 = (int *)*v70;
    v47 = (char *)v4 - (_BYTE *)*v70;
    v48 = v47 >> 2;
    v49 = (v47 >> 2) + 1;
    if (v49 >> 62)
LABEL_84:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v50 = (char *)v45 - (char *)v46;
    if (v50 >> 1 > v49)
      v49 = v50 >> 1;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 62)
LABEL_85:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v52 = operator new(4 * v51);
      v53 = (int *)&v52[4 * v48];
      *v53 = v40;
      v42 = (uint64_t)(v53 + 1);
      if (v4 == v46)
        goto LABEL_62;
    }
    else
    {
      v52 = 0;
      v53 = (int *)(4 * v48);
      *(_DWORD *)(4 * v48) = v40;
      v42 = 4 * v48 + 4;
      if (v4 == v46)
        goto LABEL_62;
    }
    v54 = (char *)(v4 - 1) - (char *)v46;
    if (v54 >= 0xBC)
    {
      if (&v52[v47 - 4 - (v54 & 0xFFFFFFFFFFFFFFFCLL)] > &v52[v47 - 4])
      {
        v55 = v4;
      }
      else if ((int *)((char *)v4 - (v54 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v4 - 1)
      {
        v55 = v4;
      }
      else if ((unint64_t)((char *)v4 - v52 - v47) >= 0x20)
      {
        v57 = (v54 >> 2) + 1;
        v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
        v55 = &v4[v58 / 0xFFFFFFFFFFFFFFFCLL];
        v53 = (int *)((char *)v53 - v58);
        v59 = &v52[4 * v48 - 16];
        v60 = v4 - 4;
        v61 = v57 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v62 = *(_OWORD *)v60;
          *(v59 - 1) = *((_OWORD *)v60 - 1);
          *v59 = v62;
          v59 -= 2;
          v60 -= 8;
          v61 -= 8;
        }
        while (v61);
        if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_62;
      }
      else
      {
        v55 = v4;
      }
    }
    else
    {
      v55 = v4;
    }
    do
    {
      v56 = *--v55;
      *--v53 = v56;
    }
    while (v55 != v46);
LABEL_62:
    a1[15] = v53;
    a1[16] = (int *)v42;
    a1[17] = (int *)&v52[4 * v51];
    if (v46)
      operator delete(v46);
    v41 = v69;
    goto LABEL_44;
  }
}

void operations_research::glop::UpdateRow::ComputeUpdatesRowWiseHypersparse(operations_research::glop::UpdateRow *this)
{
  operations_research::glop::UpdateRow *v1;
  unint64_t v2;
  int v3;
  char *v4;
  char **v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  double v25;
  char *v26;
  uint64_t v27;
  int *v28;
  double *v29;
  int v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t IsRelevantBitRow;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int8x16_t *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  int8x16_t *v45;
  int8x16_t *v46;
  unint64_t v47;
  int8x16_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  unint64_t v63;
  int v64;
  int v65;
  double v66;
  uint64_t v67;
  unint64_t v68;
  operations_research::glop::UpdateRow *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  int *v78;
  unint64_t v79;
  char *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;

  v1 = this;
  v2 = *(int *)(*(_QWORD *)this + 4);
  v3 = v2 & ~((int)v2 >> 31);
  *((_DWORD *)this + 42) = v3;
  v5 = (char **)((char *)this + 176);
  v4 = (char *)*((_QWORD *)this + 22);
  v6 = (v3 + 63) >> 6;
  v7 = *((_QWORD *)v1 + 23) - (_QWORD)v4;
  v8 = v7 >> 3;
  v98 = 0;
  if (v6 <= v7 >> 3)
  {
    if (v6 < v7 >> 3)
      *((_QWORD *)v1 + 23) = &v4[8 * v6];
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)v5, v6 - (v7 >> 3), &v98);
    v4 = *v5;
  }
  if (v6 >= v8)
    v9 = v8;
  else
    v9 = v6;
  bzero(v4, 8 * v9);
  v10 = *((_QWORD *)v1 + 28);
  v11 = *((_QWORD *)v1 + 29);
  v12 = (_QWORD *)((char *)v1 + 224);
  v98 = 0;
  v13 = (v11 - v10) >> 3;
  if (v2 <= v13)
  {
    if (v2 < v13)
      *((_QWORD *)v1 + 29) = v10 + 8 * v2;
  }
  else
  {
    std::vector<double>::__append((uint64_t)v1 + 224, v2 - v13, &v98);
  }
  v14 = (int *)*((_QWORD *)v1 + 15);
  v15 = (int *)*((_QWORD *)v1 + 16);
  if (v14 != v15)
  {
    v16 = *((_QWORD *)v1 + 5);
    v17 = (_QWORD *)*((_QWORD *)v1 + 1);
    v18 = v17[7];
    do
    {
      v19 = *v14;
      v20 = 8 * v19;
      v21 = *(_QWORD *)(v18 + 8 * v19);
      v22 = *(_QWORD *)(v18 + (((v19 << 32) + 0x100000000) >> 29));
      v23 = v22 <= v21;
      v24 = v22 - v21;
      if (!v23)
      {
        v25 = *(double *)(v16 + v20);
        v26 = *v5;
        v27 = *v12;
        v28 = (int *)(v17[4] + 4 * v21);
        v29 = (double *)(v17[1] + 8 * v21);
        do
        {
          while (1)
          {
            v30 = *v28++;
            v31 = v25 * *v29;
            v32 = v30;
            v33 = (unint64_t)v30 >> 6;
            v34 = *(_QWORD *)&v26[8 * v33];
            v35 = 1 << v30;
            if ((v34 & (1 << v30)) != 0)
              break;
            *(double *)(v27 + 8 * v32) = v31;
            *(_QWORD *)&v26[8 * v33] = v34 | v35;
            ++v29;
            if (!--v24)
              goto LABEL_14;
          }
          *(double *)(v27 + 8 * v32) = v31 + *(double *)(v27 + 8 * v32);
          ++v29;
          --v24;
        }
        while (v24);
      }
LABEL_14:
      ++v14;
    }
    while (v14 != v15);
  }
  IsRelevantBitRow = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)v1
                                                                                   + 2));
  v38 = (unint64_t *)*((_QWORD *)v1 + 22);
  v37 = (unint64_t *)*((_QWORD *)v1 + 23);
  v39 = (char *)v37 - (char *)v38;
  v40 = v37 - v38;
  v41 = *(int8x16_t **)(IsRelevantBitRow + 8);
  v42 = (uint64_t)(*(_QWORD *)(IsRelevantBitRow + 16) - (_QWORD)v41) >> 3;
  if (v42 >= v40)
    v42 = v37 - v38;
  if ((int)v42 < 1)
    goto LABEL_37;
  if (v42 >= 6uLL
    && (v38 < (unint64_t *)v41 + v42
      ? (v43 = v41 >= (int8x16_t *)&v38[v42])
      : (v43 = 1),
        v43))
  {
    v44 = v42 - (v42 & 3);
    v45 = v41 + 1;
    v46 = (int8x16_t *)(v38 + 2);
    v47 = v44;
    do
    {
      v48 = vandq_s8(*v46, *v45);
      v46[-1] = vandq_s8(v46[-1], v45[-1]);
      *v46 = v48;
      v45 += 2;
      v46 += 2;
      v47 -= 4;
    }
    while (v47);
    if ((v42 & 3) == 0)
      goto LABEL_37;
  }
  else
  {
    v44 = 0;
  }
  v49 = v42 - v44;
  v50 = v44;
  v51 = &v38[v44];
  v52 = &v41->i64[v50];
  do
  {
    v53 = *v52++;
    *v51++ &= v53;
    --v49;
  }
  while (v49);
LABEL_37:
  if (v40 > (int)v42)
    bzero(&v38[(int)v42], (v39 & 0xFFFFFFFFFFFFFFF8) - 8 * (int)v42);
  v54 = (char *)*((_QWORD *)v1 + 18);
  v96 = (void **)((char *)v1 + 144);
  *((_QWORD *)v1 + 19) = v54;
  if (v38 == v37)
    goto LABEL_52;
  v55 = *v38;
  if (*v38)
  {
    v56 = 0;
    goto LABEL_55;
  }
  v57 = 0;
  v58 = (int)((uint64_t)v39 >> 3);
  if ((int)(v39 >> 3) <= 1)
    v59 = 1;
  else
    v59 = v39 >> 3;
  if (v58 <= 1)
    v58 = 1;
  v60 = v58 - 1;
  while (v60 != v57)
  {
    v61 = v57 + 1;
    if (v38[++v57])
    {
      v59 = v61;
      break;
    }
  }
  if (v59 == (v39 >> 3))
  {
LABEL_52:
    v63 = 0;
    v56 = 0;
    v64 = -1;
    v65 = *((_DWORD *)v1 + 52);
    if (v65 == -1)
      return;
    goto LABEL_57;
  }
  v55 = v38[v59];
  v56 = (v59 << 6);
LABEL_55:
  v64 = __clz(__rbit64(v55)) & 0x3F | v56;
  v63 = (v55 - 1) & v55;
  v65 = *((_DWORD *)v1 + 52);
  if (v64 != v65)
  {
LABEL_57:
    v66 = *((double *)v1 + 65);
    v95 = v65;
    while (1)
    {
      if (fabs(*(double *)(*v12 + 8 * v64)) <= v66)
        goto LABEL_60;
      v68 = *((_QWORD *)v1 + 20);
      if ((unint64_t)v54 >= v68)
        break;
      *(_DWORD *)v54 = v64;
      v67 = (uint64_t)(v54 + 4);
LABEL_59:
      *((_QWORD *)v1 + 19) = v67;
      v54 = (char *)v67;
LABEL_60:
      if (v63)
      {
LABEL_61:
        v64 = (__clz(__rbit64(v63)) & 0x3F) + v56;
        v63 &= v63 - 1;
        if (v64 == v65)
          return;
      }
      else
      {
        v82 = *((_QWORD *)v1 + 22);
        v83 = *((_QWORD *)v1 + 23) - v82;
        v84 = (unint64_t)v83 >> 3;
        v85 = (int)(v83 >> 3);
        if (((int)v56 >> 6) + 1 > (int)v84)
          v86 = ((int)v56 >> 6) + 1;
        else
          v86 = v84;
        v87 = ((uint64_t)(int)v56 >> 6) + 1;
        while (v87 < v85)
        {
          if (*(_QWORD *)(v82 + 8 * v87++))
          {
            v86 = v87 - 1;
            break;
          }
        }
        if (v86 != (_DWORD)v84)
        {
          v63 = *(_QWORD *)(v82 + 8 * v86);
          v56 = (v86 << 6);
          goto LABEL_61;
        }
        v63 = 0;
        v64 = -1;
        if (v65 == -1)
          return;
      }
    }
    v69 = v1;
    v70 = v12;
    v71 = (char *)*v96;
    v72 = v54 - (_BYTE *)*v96;
    v73 = v72 >> 2;
    v74 = (v72 >> 2) + 1;
    if (v74 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v75 = v68 - (_QWORD)v71;
    if (v75 >> 1 > v74)
      v74 = v75 >> 1;
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
      v76 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v76 = v74;
    v97 = v56;
    if (v76)
    {
      if (v76 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v77 = operator new(4 * v76);
      v78 = (int *)&v77[4 * v73];
      *v78 = v64;
      v67 = (uint64_t)(v78 + 1);
      if (v54 != v71)
      {
LABEL_73:
        v79 = v54 - 4 - v71;
        if (v79 < 0xBC
          || &v77[v72 - 4 - (v79 & 0xFFFFFFFFFFFFFFFCLL)] > &v77[v72 - 4]
          || &v54[-(v79 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v54 - 4
          || (unint64_t)(v54 - v77 - v72) < 0x20)
        {
          v80 = v54;
          v12 = v70;
          v1 = v69;
        }
        else
        {
          v89 = (v79 >> 2) + 1;
          v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
          v80 = &v54[-v90];
          v78 = (int *)((char *)v78 - v90);
          v91 = &v77[4 * v73 - 16];
          v92 = v54 - 16;
          v93 = v89 & 0x7FFFFFFFFFFFFFF8;
          v12 = v70;
          do
          {
            v94 = *(_OWORD *)v92;
            *(v91 - 1) = *((_OWORD *)v92 - 1);
            *v91 = v94;
            v91 -= 2;
            v92 -= 32;
            v93 -= 8;
          }
          while (v93);
          v1 = v69;
          if (v89 == (v89 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_76:
            *((_QWORD *)v1 + 18) = v78;
            *((_QWORD *)v1 + 19) = v67;
            *((_QWORD *)v1 + 20) = &v77[4 * v76];
            if (!v71)
            {
LABEL_78:
              v56 = v97;
              v65 = v95;
              goto LABEL_59;
            }
LABEL_77:
            operator delete(v71);
            goto LABEL_78;
          }
        }
        do
        {
          v81 = *((_DWORD *)v80 - 1);
          v80 -= 4;
          *--v78 = v81;
        }
        while (v80 != v71);
        goto LABEL_76;
      }
    }
    else
    {
      v77 = 0;
      v78 = (int *)(4 * v73);
      *(_DWORD *)(4 * v73) = v64;
      v67 = 4 * v73 + 4;
      if (v54 != v71)
        goto LABEL_73;
    }
    v12 = v70;
    v1 = v69;
    *((_QWORD *)v69 + 18) = v78;
    *((_QWORD *)v69 + 19) = v67;
    *((_QWORD *)v69 + 20) = &v77[4 * v76];
    if (!v71)
      goto LABEL_78;
    goto LABEL_77;
  }
}

uint64_t operations_research::glop::UpdateRow::ComputeUpdatesRowWise(operations_research::glop::UpdateRow *this)
{
  unint64_t v2;
  char *v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  double v20;
  char *v21;
  int *v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t result;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  int *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  _OWORD *v66;
  int *v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  int v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;

  v2 = *(int *)(*(_QWORD *)this + 4);
  v4 = (char *)*((_QWORD *)this + 28);
  v5 = *((_QWORD *)this + 29);
  v6 = (char **)((char *)this + 224);
  v75 = 0;
  v7 = v2 << 32;
  v8 = (v5 - (uint64_t)v4) >> 3;
  if (v2 <= v8)
  {
    if (v2 < v8)
      *((_QWORD *)this + 29) = &v4[8 * v2];
  }
  else
  {
    std::vector<double>::__append((uint64_t)v6, v2 - v8, &v75);
    v4 = *v6;
  }
  bzero(v4, v7 >> 29);
  v9 = (int *)*((_QWORD *)this + 15);
  v10 = (int *)*((_QWORD *)this + 16);
  if (v9 != v10)
  {
    v11 = *((_QWORD *)this + 5);
    v12 = (_QWORD *)*((_QWORD *)this + 1);
    v13 = v12[7];
    do
    {
      v14 = *v9;
      v15 = 8 * v14;
      v16 = *(_QWORD *)(v13 + 8 * v14);
      v17 = *(_QWORD *)(v13 + (((v14 << 32) + 0x100000000) >> 29));
      v18 = v17 <= v16;
      v19 = v17 - v16;
      if (!v18)
      {
        v20 = *(double *)(v11 + v15);
        v21 = *v6;
        v22 = (int *)(v12[4] + 4 * v16);
        v23 = (double *)(v12[1] + 8 * v16);
        do
        {
          v25 = *v22++;
          v24 = v25;
          v26 = *v23++;
          *(double *)&v21[8 * v24] = *(double *)&v21[8 * v24] + v20 * v26;
          --v19;
        }
        while (v19);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  *((_QWORD *)this + 19) = *((_QWORD *)this + 18);
  v27 = *((double *)this + 65);
  v73 = (void **)((char *)this + 144);
  result = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                         + 2));
  v29 = *(unint64_t **)(result + 8);
  v30 = *(unint64_t **)(result + 16);
  if (v29 == v30)
    goto LABEL_25;
  v31 = *v29;
  if (*v29)
  {
    v32 = 0;
    goto LABEL_28;
  }
  v33 = 0;
  v34 = (char *)v30 - (char *)v29;
  v35 = v34 >> 3;
  v36 = (int)((uint64_t)v34 >> 3);
  if ((int)(v34 >> 3) <= 1)
    v37 = 1;
  else
    v37 = v34 >> 3;
  if (v36 <= 1)
    v36 = 1;
  v38 = v36 - 1;
  while (v38 != v33)
  {
    v39 = v33 + 1;
    if (v29[++v33])
    {
      v37 = v39;
      break;
    }
  }
  if (v37 == (_DWORD)v35)
  {
LABEL_25:
    v41 = 0;
    v32 = 0;
    v42 = -1;
    v43 = *(_DWORD *)(result + 40);
    if (v43 == -1)
      return result;
    goto LABEL_30;
  }
  v31 = v29[v37];
  v32 = (v37 << 6);
LABEL_28:
  v42 = __clz(__rbit64(v31)) & 0x3F | v32;
  v41 = (v31 - 1) & v31;
  v43 = *(_DWORD *)(result + 40);
  if (v42 != v43)
  {
LABEL_30:
    v72 = result;
    v71 = v43;
    while (1)
    {
      if (fabs(*(double *)&(*v6)[8 * v42]) <= v27)
        goto LABEL_33;
      v46 = (int *)*((_QWORD *)this + 19);
      v45 = *((_QWORD *)this + 20);
      if ((unint64_t)v46 >= v45)
        break;
      *v46 = v42;
      v44 = (uint64_t)(v46 + 1);
LABEL_32:
      *((_QWORD *)this + 19) = v44;
LABEL_33:
      if (v41)
      {
LABEL_34:
        v42 = (__clz(__rbit64(v41)) & 0x3F) + v32;
        v41 &= v41 - 1;
        if (v42 == v43)
          return result;
      }
      else
      {
        v55 = *(_QWORD *)(result + 8);
        v56 = *(_QWORD *)(result + 16) - v55;
        v57 = (unint64_t)v56 >> 3;
        v58 = (int)(v56 >> 3);
        if (((int)v32 >> 6) + 1 > (int)v57)
          v59 = ((int)v32 >> 6) + 1;
        else
          v59 = v57;
        v60 = ((uint64_t)(int)v32 >> 6) + 1;
        while (v60 < v58)
        {
          if (*(_QWORD *)(v55 + 8 * v60++))
          {
            v59 = v60 - 1;
            break;
          }
        }
        if (v59 != (_DWORD)v57)
        {
          v41 = *(_QWORD *)(v55 + 8 * v59);
          v32 = (v59 << 6);
          goto LABEL_34;
        }
        v41 = 0;
        v42 = -1;
        if (v43 == -1)
          return result;
      }
    }
    v74 = v32;
    v47 = (int *)*v73;
    v48 = (char *)v46 - (_BYTE *)*v73;
    v49 = v48 >> 2;
    v50 = (v48 >> 2) + 1;
    if (v50 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v51 = v45 - (_QWORD)v47;
    if (v51 >> 1 > v50)
      v50 = v51 >> 1;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
      v52 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    if (v52)
    {
      if (v52 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v53 = operator new(4 * v52);
      v54 = (int *)&v53[4 * v49];
      *v54 = v42;
      v44 = (uint64_t)(v54 + 1);
      if (v46 == v47)
        goto LABEL_65;
    }
    else
    {
      v53 = 0;
      v54 = (int *)(4 * v49);
      *(_DWORD *)(4 * v49) = v42;
      v44 = 4 * v49 + 4;
      if (v46 == v47)
      {
LABEL_65:
        *((_QWORD *)this + 18) = v54;
        *((_QWORD *)this + 19) = v44;
        *((_QWORD *)this + 20) = &v53[4 * v52];
        if (v47)
          operator delete(v47);
        result = v72;
        v32 = v74;
        v43 = v71;
        goto LABEL_32;
      }
    }
    v62 = (char *)(v46 - 1) - (char *)v47;
    if (v62 < 0x2C)
      goto LABEL_72;
    if ((unint64_t)((char *)v46 - &v53[v48]) < 0x20)
      goto LABEL_72;
    v63 = (v62 >> 2) + 1;
    v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
    v65 = &v46[v64 / 0xFFFFFFFFFFFFFFFCLL];
    v54 = (int *)((char *)v54 - v64);
    v66 = &v53[4 * v49 - 16];
    v67 = v46 - 4;
    v68 = v63 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v69 = *(_OWORD *)v67;
      *(v66 - 1) = *((_OWORD *)v67 - 1);
      *v66 = v69;
      v66 -= 2;
      v67 -= 8;
      v68 -= 8;
    }
    while (v68);
    v46 = v65;
    if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_72:
      do
      {
        v70 = *--v46;
        *--v54 = v70;
      }
      while (v46 != v47);
    }
    goto LABEL_65;
  }
  return result;
}

uint64_t operations_research::glop::UpdateRow::ComputeUpdatesColumnWise(operations_research::glop::UpdateRow *this)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  uint64_t result;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  BOOL v30;
  uint64_t v31;
  int *v32;
  double *v33;
  double v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;

  v2 = *(int *)(*(_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 28);
  v5 = *((_QWORD *)this + 29);
  v3 = (char *)this + 224;
  v6 = *((double *)this + 65);
  v66 = 0;
  v7 = (v5 - v4) >> 3;
  if (v2 <= v7)
  {
    if (v2 < v7)
      *((_QWORD *)this + 29) = v4 + 8 * v2;
  }
  else
  {
    std::vector<double>::__append((uint64_t)v3, v2 - v7, &v66);
  }
  *((_QWORD *)this + 19) = *((_QWORD *)this + 18);
  v64 = (void **)((char *)this + 144);
  result = operations_research::glop::VariablesInfo::GetIsRelevantBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                         + 2));
  v9 = *(unint64_t **)(result + 8);
  v10 = *(unint64_t **)(result + 16);
  if (v9 == v10)
    goto LABEL_18;
  v11 = *v9;
  if (*v9)
  {
    v12 = 0;
    goto LABEL_21;
  }
  v13 = 0;
  v14 = (char *)v10 - (char *)v9;
  v15 = v14 >> 3;
  v16 = (int)((uint64_t)v14 >> 3);
  if ((int)(v14 >> 3) <= 1)
    v17 = 1;
  else
    v17 = v14 >> 3;
  if (v16 <= 1)
    v16 = 1;
  v18 = v16 - 1;
  while (v18 != v13)
  {
    v19 = v13 + 1;
    if (v9[++v13])
    {
      v17 = v19;
      break;
    }
  }
  if (v17 == (_DWORD)v15)
  {
LABEL_18:
    v21 = 0;
    v12 = 0;
    v22 = 0xFFFFFFFFLL;
    v23 = *(_DWORD *)(result + 40);
    if (v23 == -1)
      return result;
    goto LABEL_23;
  }
  v11 = v9[v17];
  v12 = (v17 << 6);
LABEL_21:
  v22 = __clz(__rbit64(v11)) & 0x3F | v12;
  v21 = (v11 - 1) & v11;
  v23 = *(_DWORD *)(result + 40);
  if ((_DWORD)v22 != v23)
  {
LABEL_23:
    v63 = result;
    while (1)
    {
      v25 = *(_QWORD *)this;
      v26 = *(_QWORD *)(*(_QWORD *)this + 56);
      v27 = *(_QWORD *)(v26 + 8 * (int)v22);
      v28 = *(_QWORD *)(v26 + ((uint64_t)((v22 << 32) + 0x100000000) >> 29));
      v29 = 0.0;
      v30 = v28 <= v27;
      v31 = v28 - v27;
      if (!v30)
      {
        v32 = (int *)(*(_QWORD *)(v25 + 32) + 4 * v27);
        v33 = (double *)(*(_QWORD *)(v25 + 8) + 8 * v27);
        do
        {
          v34 = *v33++;
          v35 = v34;
          v36 = *v32++;
          v29 = v29 + v35 * *(double *)(*((_QWORD *)this + 5) + 8 * v36);
          --v31;
        }
        while (v31);
      }
      if (fabs(v29) <= v6)
        goto LABEL_26;
      v38 = (char *)*((_QWORD *)this + 19);
      v37 = *((_QWORD *)this + 20);
      if ((unint64_t)v38 >= v37)
        break;
      *(_DWORD *)v38 = v22;
      v24 = (uint64_t)(v38 + 4);
LABEL_25:
      *((_QWORD *)this + 19) = v24;
      *(double *)(*((_QWORD *)this + 28) + 8 * (int)v22) = v29;
LABEL_26:
      if (v21)
      {
LABEL_27:
        v22 = (__clz(__rbit64(v21)) & 0x3F) + v12;
        v21 &= v21 - 1;
        if ((_DWORD)v22 == v23)
          return result;
      }
      else
      {
        v47 = *(_QWORD *)(result + 8);
        v48 = *(_QWORD *)(result + 16) - v47;
        v49 = (unint64_t)v48 >> 3;
        v50 = (int)(v48 >> 3);
        if (((int)v12 >> 6) + 1 > (int)v49)
          v51 = ((int)v12 >> 6) + 1;
        else
          v51 = v49;
        v52 = ((uint64_t)(int)v12 >> 6) + 1;
        while (v52 < v50)
        {
          if (*(_QWORD *)(v47 + 8 * v52++))
          {
            v51 = v52 - 1;
            break;
          }
        }
        if (v51 != (_DWORD)v49)
        {
          v21 = *(_QWORD *)(v47 + 8 * v51);
          v12 = (v51 << 6);
          goto LABEL_27;
        }
        v21 = 0;
        v22 = 0xFFFFFFFFLL;
        if (v23 == -1)
          return result;
      }
    }
    v65 = v12;
    v39 = (char *)*v64;
    v40 = v38 - (_BYTE *)*v64;
    v41 = v40 >> 2;
    v42 = (v40 >> 2) + 1;
    if (v42 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v43 = v37 - (_QWORD)v39;
    if (v43 >> 1 > v42)
      v42 = v43 >> 1;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
      v44 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v45 = operator new(4 * v44);
      v46 = &v45[4 * v41];
      *v46 = v22;
      v24 = (uint64_t)(v46 + 1);
      if (v38 == v39)
        goto LABEL_61;
    }
    else
    {
      v45 = 0;
      v46 = (_DWORD *)(4 * v41);
      *(_DWORD *)(4 * v41) = v22;
      v24 = 4 * v41 + 4;
      if (v38 == v39)
      {
LABEL_61:
        *((_QWORD *)this + 18) = v46;
        *((_QWORD *)this + 19) = v24;
        *((_QWORD *)this + 20) = &v45[4 * v44];
        if (v39)
          operator delete(v39);
        result = v63;
        v12 = v65;
        goto LABEL_25;
      }
    }
    v54 = v38 - 4 - v39;
    if (v54 < 0x2C)
      goto LABEL_68;
    if ((unint64_t)(v38 - &v45[v40]) < 0x20)
      goto LABEL_68;
    v55 = (v54 >> 2) + 1;
    v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
    v57 = &v38[-v56];
    v46 = (_DWORD *)((char *)v46 - v56);
    v58 = &v45[4 * v41 - 16];
    v59 = v38 - 16;
    v60 = v55 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v61 = *(_OWORD *)v59;
      *(v58 - 1) = *((_OWORD *)v59 - 1);
      *v58 = v61;
      v58 -= 2;
      v59 -= 32;
      v60 -= 8;
    }
    while (v60);
    v38 = v57;
    if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_68:
      do
      {
        v62 = *((_DWORD *)v38 - 1);
        v38 -= 4;
        *--v46 = v62;
      }
      while (v38 != v39);
    }
    goto LABEL_61;
  }
  return result;
}

uint64_t operations_research::glop::UpdateRow::GetCoefficients(operations_research::glop::UpdateRow *this)
{
  return (uint64_t)this + 224;
}

uint64_t operations_research::glop::UpdateRow::GetNonZeroPositions(operations_research::glop::UpdateRow *this)
{
  return (uint64_t)this + 144;
}

double operations_research::glop::UpdateRow::SetParameters(operations_research::glop::UpdateRow *this, const operations_research::glop::GlopParameters *a2)
{
  return operations_research::glop::GlopParameters::CopyFrom((operations_research::glop::UpdateRow *)((char *)this + 264), a2);
}

uint64_t operations_research::glop::UpdateRow::RecomputeFullUpdateRow(uint64_t *a1, int a2)
{
  void **v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  BOOL v44;
  uint64_t v45;
  int *v46;
  double *v47;
  double v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  _DWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  _QWORD *v81;
  void **v82;
  uint64_t v83;
  void **v84;
  uint64_t v85[2];

  if (*((_BYTE *)a1 + 248))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v85, (google::glog_internal_namespace_ *)"./ortools/glop/update_row.cc", 245);
    v81 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Check failed: !compute_update_row_ ", 35);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v85);
  }
  v3 = (void **)a1;
  v4 = *(int *)(*a1 + 4);
  v5 = a1[28];
  v6 = a1[29];
  v7 = a1 + 28;
  v8 = *((double *)a1 + 65);
  v85[0] = 0;
  v9 = (v6 - v5) >> 3;
  if (v4 <= v9)
  {
    if (v4 < v9)
      a1[29] = v5 + 8 * v4;
  }
  else
  {
    std::vector<double>::__append((uint64_t)(a1 + 28), v4 - v9, v85);
    v5 = *v7;
  }
  v10 = v3[18];
  v3[19] = v10;
  v11 = *(_QWORD *)v3[3];
  v12 = *(int *)(v11 + 4 * a2);
  *(_QWORD *)(v5 + 8 * v12) = 0x3FF0000000000000;
  v84 = v3 + 18;
  v13 = (unint64_t)v3[20];
  if ((unint64_t)v10 >= v13)
  {
    v15 = v13 - (_QWORD)v10;
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    v17 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL;
    v18 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v17)
      v18 = v16;
    if (v18 >> 62)
LABEL_76:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v19 = a2;
    v20 = v18;
    v21 = operator new(4 * v18);
    *v21 = *(_DWORD *)(v11 + 4 * v19);
    v14 = v21 + 1;
    v3[18] = v21;
    v3[19] = v21 + 1;
    v3[20] = &v21[v20];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v10 = v12;
    v14 = v10 + 1;
  }
  v3[19] = v14;
  result = operations_research::glop::VariablesInfo::GetNotBasicBitRow((operations_research::glop::VariablesInfo *)v3[2]);
  v23 = *(unint64_t **)(result + 8);
  v24 = *(unint64_t **)(result + 16);
  if (v23 == v24)
    goto LABEL_28;
  v25 = *v23;
  if (*v23)
  {
    v26 = 0;
    goto LABEL_31;
  }
  v27 = 0;
  v28 = (char *)v24 - (char *)v23;
  v29 = v28 >> 3;
  v30 = (int)((uint64_t)v28 >> 3);
  if ((int)(v28 >> 3) <= 1)
    v31 = 1;
  else
    v31 = v28 >> 3;
  if (v30 <= 1)
    v30 = 1;
  v32 = v30 - 1;
  while (v32 != v27)
  {
    v33 = v27 + 1;
    if (v23[++v27])
    {
      v31 = v33;
      break;
    }
  }
  if (v31 == (_DWORD)v29)
  {
LABEL_28:
    v35 = 0;
    v26 = 0;
    v36 = 0xFFFFFFFFLL;
    v37 = *(unsigned int *)(result + 40);
    if ((_DWORD)v37 == -1)
      return result;
    goto LABEL_33;
  }
  v25 = v23[v31];
  v26 = (v31 << 6);
LABEL_31:
  v36 = __clz(__rbit64(v25)) & 0x3F | v26;
  v35 = (v25 - 1) & v25;
  v37 = *(unsigned int *)(result + 40);
  if ((_DWORD)v36 != (_DWORD)v37)
  {
LABEL_33:
    v82 = v3;
    v83 = result;
    while (1)
    {
      v39 = *v3;
      v40 = *((_QWORD *)*v3 + 7);
      v41 = *(_QWORD *)(v40 + 8 * (int)v36);
      v42 = *(_QWORD *)(v40 + ((uint64_t)((v36 << 32) + 0x100000000) >> 29));
      v43 = 0.0;
      v44 = v42 <= v41;
      v45 = v42 - v41;
      if (!v44)
      {
        v46 = (int *)(v39[4] + 4 * v41);
        v47 = (double *)(v39[1] + 8 * v41);
        do
        {
          v48 = *v47++;
          v49 = v48;
          v50 = *v46++;
          v43 = v43 + v49 * *((double *)v3[5] + v50);
          --v45;
        }
        while (v45);
      }
      if (fabs(v43) <= v8)
        goto LABEL_36;
      v52 = (char *)v3[19];
      v51 = (unint64_t)v3[20];
      if ((unint64_t)v52 >= v51)
        break;
      *(_DWORD *)v52 = v36;
      v38 = (uint64_t)(v52 + 4);
LABEL_35:
      v3[19] = (void *)v38;
      *((double *)v3[28] + (int)v36) = v43;
LABEL_36:
      if (v35)
      {
LABEL_37:
        v36 = (__clz(__rbit64(v35)) & 0x3F) + v26;
        v35 &= v35 - 1;
        if ((_DWORD)v36 == (_DWORD)v37)
          return result;
      }
      else
      {
        v65 = *(_QWORD *)(result + 8);
        v66 = *(_QWORD *)(result + 16) - v65;
        v67 = (unint64_t)v66 >> 3;
        v68 = (int)(v66 >> 3);
        if (((int)v26 >> 6) + 1 > (int)v67)
          v69 = ((int)v26 >> 6) + 1;
        else
          v69 = v67;
        v70 = ((uint64_t)(int)v26 >> 6) + 1;
        while (v70 < v68)
        {
          if (*(_QWORD *)(v65 + 8 * v70++))
          {
            v69 = v70 - 1;
            break;
          }
        }
        if (v69 != (_DWORD)v67)
        {
          v35 = *(_QWORD *)(v65 + 8 * v69);
          v26 = (v69 << 6);
          goto LABEL_37;
        }
        v35 = 0;
        v36 = 0xFFFFFFFFLL;
        if ((_DWORD)v37 == -1)
          return result;
      }
    }
    v53 = v26;
    v54 = v37;
    v55 = (char *)*v84;
    v56 = v52 - (_BYTE *)*v84;
    v57 = v56 >> 2;
    v58 = (v56 >> 2) + 1;
    if (v58 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v59 = v51 - (_QWORD)v55;
    if (v59 >> 1 > v58)
      v58 = v59 >> 1;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
      v58 = 0x3FFFFFFFFFFFFFFFLL;
    if (v58)
    {
      if (v58 >> 62)
        goto LABEL_76;
      v60 = v58;
      v61 = operator new(4 * v58);
      v62 = &v61[4 * v57];
      *v62 = v36;
      v38 = (uint64_t)(v62 + 1);
      if (v52 != v55)
        goto LABEL_51;
    }
    else
    {
      v60 = 0;
      v61 = 0;
      v62 = (_DWORD *)(4 * v57);
      *(_DWORD *)(4 * v57) = v36;
      v38 = 4 * v57 + 4;
      if (v52 != v55)
      {
LABEL_51:
        v63 = v52 - 4 - v55;
        v64 = v60;
        if (v63 >= 0x2C)
        {
          v72 = v52 - &v61[v56];
          v37 = v54;
          v26 = v53;
          v3 = v82;
          if (v72 >= 0x20)
          {
            v73 = (v63 >> 2) + 1;
            v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
            v75 = &v52[-v74];
            v62 = (_DWORD *)((char *)v62 - v74);
            v76 = &v61[4 * v57 - 16];
            v77 = v52 - 16;
            v78 = v73 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v79 = *(_OWORD *)v77;
              *(v76 - 1) = *((_OWORD *)v77 - 1);
              *v76 = v79;
              v76 -= 2;
              v77 -= 32;
              v78 -= 8;
            }
            while (v78);
            v52 = v75;
            if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_71;
          }
        }
        else
        {
          v37 = v54;
          v26 = v53;
          v3 = v82;
        }
        do
        {
          v80 = *((_DWORD *)v52 - 1);
          v52 -= 4;
          *--v62 = v80;
        }
        while (v52 != v55);
LABEL_71:
        v3[18] = v62;
        v3[19] = (void *)v38;
        v3[20] = &v61[4 * v64];
        if (v55)
          operator delete(v55);
        result = v83;
        goto LABEL_35;
      }
    }
    v37 = v54;
    v26 = v53;
    v64 = v60;
    v3 = v82;
    goto LABEL_71;
  }
  return result;
}

void sub_22DA1E898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

operations_research::glop::UpdateRow::Stats *operations_research::glop::UpdateRow::Stats::Stats(operations_research::glop::UpdateRow::Stats *this)
{
  void *__p[4];

  strcpy((char *)this, "UpdateRow");
  *((_BYTE *)this + 23) = 9;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_22DCE7550;
  strcpy((char *)__p[0], "unit_row_left_inverse_density");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::UpdateRow::Stats *)((char *)this + 80), (__int128 *)__p, this) = &unk_24F987C70;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_22DCE5C00;
  strcpy((char *)__p[0], "unit_row_left_inverse_accuracy");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::UpdateRow::Stats *)((char *)this + 160), (__int128 *)__p, this) = &unk_24F987CD0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "update_row_density");
  *(_QWORD *)operations_research::DistributionStat::DistributionStat((operations_research::glop::UpdateRow::Stats *)((char *)this + 240), (__int128 *)__p, this) = &unk_24F987C70;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return this;
}

void sub_22DA1EA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v14 + 160) = off_24F97FEB0;
  if (*(char *)(v14 + 191) < 0)
    operator delete(*(void **)(v14 + 168));
  *(_QWORD *)(v14 + 80) = off_24F97FEB0;
  if (*(char *)(v14 + 111) < 0)
  {
    operator delete(*(void **)(v14 + 88));
    operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
    _Unwind_Resume(a1);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::StatsGroup *)v14);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::VariableValues::VariableValues(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = a6;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_DWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = result + 88;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_DWORD *)(result + 128) = -1;
  strcpy((char *)(result + 144), "VariableValues");
  *(_BYTE *)(result + 167) = 14;
  *(_DWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = result + 208;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_BYTE *)(result + 248) = 0;
  *(_OWORD *)(result + 336) = 0u;
  *(_OWORD *)(result + 352) = 0u;
  *(_OWORD *)(result + 368) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 304) = 0u;
  *(_QWORD *)(result + 224) = 0;
  *(_OWORD *)(result + 313) = 0u;
  return result;
}

void operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus(_QWORD *a1, int a2)
{
  operations_research::glop::VariablesInfo *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15[2];

  v4 = (operations_research::glop::VariablesInfo *)a1[3];
  v5 = (uint64_t *)*((_QWORD *)v4 + 1);
  v6 = (uint64_t *)*((_QWORD *)v4 + 2);
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1 + 5;
  v10 = *(int *)(a1[1] + 4);
  v15[0] = 0;
  v11 = (v8 - v7) >> 3;
  if (v10 <= v11)
  {
    if (v10 < v11)
      a1[6] = v7 + 8 * v10;
  }
  else
  {
    std::vector<double>::__append((uint64_t)(a1 + 5), v10 - v11, v15);
    v4 = (operations_research::glop::VariablesInfo *)a1[3];
  }
  switch(*(_BYTE *)(*(_QWORD *)operations_research::glop::VariablesInfo::GetStatusRow(v4) + a2))
  {
    case 0:
      google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/glop/variable_values.cc", 59, 2);
      v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v15);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SetNonBasicVariableValueFromStatus() shouldn't ", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"be called on a BASIC variable.", 30);
      google::LogMessage::~LogMessage((google::LogMessage *)v15);
      break;
    case 1:
    case 2:
      v12 = *v5;
      goto LABEL_9;
    case 3:
      v12 = *v6;
LABEL_9:
      *(_QWORD *)(*v9 + 8 * a2) = *(_QWORD *)(v12 + 8 * a2);
      break;
    case 4:
      *(_QWORD *)(*v9 + 8 * a2) = 0;
      break;
    default:
      return;
  }
}

void sub_22DA1ECD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::VariableValues::ResetAllNonBasicVariableValues(operations_research::glop::VariableValues *this)
{
  operations_research::glop::VariablesInfo *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *StatusRow;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v2 = (operations_research::glop::VariablesInfo *)*((_QWORD *)this + 3);
  v3 = (_QWORD *)*((_QWORD *)v2 + 1);
  v4 = (_QWORD *)*((_QWORD *)v2 + 2);
  StatusRow = (uint64_t *)operations_research::glop::VariablesInfo::GetStatusRow(v2);
  v6 = *(int *)(*((_QWORD *)this + 1) + 4);
  v14 = 0;
  v7 = *((_QWORD *)this + 5);
  v8 = (*((_QWORD *)this + 6) - v7) >> 3;
  if (v6 <= v8)
  {
    if (v6 < v8)
      *((_QWORD *)this + 6) = v7 + 8 * v6;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 40, v6 - v8, &v14);
  }
  if ((int)v6 >= 1)
  {
    v9 = 0;
    v10 = *StatusRow;
    do
    {
      v13 = *(unsigned __int8 *)(v10 + v9);
      v11 = v3;
      if ((v13 - 1) >= 2)
      {
        if (v13 == 4)
        {
          v12 = 0;
          goto LABEL_9;
        }
        if (v13 != 3)
          goto LABEL_10;
        v11 = v4;
      }
      v12 = *(_QWORD *)(*v11 + 8 * v9);
LABEL_9:
      *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v9) = v12;
LABEL_10:
      ++v9;
    }
    while (v6 != v9);
  }
}

double operations_research::glop::VariableValues::RecomputeBasicVariableValues(operations_research::glop::VariableValues *this)
{
  unint64_t v2;
  char *v4;
  uint64_t v5;
  operations_research::glop::ScatteredColumn *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t NotBasicBitRow;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  double v34;
  char *v35;
  int *v36;
  double *v37;
  double v38;
  double v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  double result;
  double *v45;
  int *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;

  v2 = **((int **)this + 1);
  *((_QWORD *)this + 33) = *((_QWORD *)this + 32);
  v4 = (char *)*((_QWORD *)this + 28);
  v5 = *((_QWORD *)this + 29);
  v6 = (operations_research::glop::VariableValues *)((char *)this + 224);
  v50 = 0;
  v7 = v2 << 32;
  v8 = (v5 - (uint64_t)v4) >> 3;
  if (v2 <= v8)
  {
    if (v2 < v8)
      *((_QWORD *)this + 29) = &v4[8 * v2];
  }
  else
  {
    std::vector<double>::__append((uint64_t)v6, v2 - v8, &v50);
    v4 = *(char **)v6;
  }
  v2 = v2;
  bzero(v4, v7 >> 29);
  NotBasicBitRow = operations_research::glop::VariablesInfo::GetNotBasicBitRow(*((operations_research::glop::VariablesInfo **)this
                                                                               + 3));
  v10 = *(unint64_t **)(NotBasicBitRow + 8);
  v11 = *(unint64_t **)(NotBasicBitRow + 16);
  if (v10 != v11)
  {
    v12 = *v10;
    if (*v10)
    {
      v13 = 0;
      goto LABEL_21;
    }
    v14 = (unint64_t)((char *)v11 - (char *)v10) >> 3;
    v15 = (int)(v11 - v10);
    if ((int)v14 <= 1)
      v16 = 1;
    else
      v16 = (unint64_t)((char *)v11 - (char *)v10) >> 3;
    if (v15 <= 1)
      v15 = 1;
    v17 = v15 - 1;
    while (v17 != v12)
    {
      v18 = v12 + 1;
      if (v10[++v12])
      {
        v16 = v18;
        break;
      }
    }
    if (v16 != (_DWORD)v14)
    {
      v12 = v10[v16];
      v13 = v16 << 6;
LABEL_21:
      v21 = __clz(__rbit64(v12)) & 0x3F | v13;
      v20 = (v12 - 1) & v12;
      v22 = *(_DWORD *)(NotBasicBitRow + 40);
      if (v21 != v22)
        goto LABEL_22;
      goto LABEL_39;
    }
  }
  v20 = 0;
  v13 = 0;
  v21 = -1;
  v22 = *(_DWORD *)(NotBasicBitRow + 40);
  if (v22 != -1)
  {
LABEL_22:
    v23 = *((_QWORD *)this + 5);
    v24 = (_QWORD *)*((_QWORD *)this + 1);
    v25 = (char *)v11 - (char *)v10;
    v26 = (unint64_t)((char *)v11 - (char *)v10) >> 3;
    v27 = (int)(v25 >> 3);
    while (1)
    {
      v28 = *(double *)(v23 + 8 * v21);
      if (v28 != 0.0)
      {
        v29 = v24[7];
        v30 = *(_QWORD *)(v29 + 8 * v21);
        v31 = *(_QWORD *)(v29 + ((((uint64_t)v21 << 32) + 0x100000000) >> 29));
        v32 = v31 <= v30;
        v33 = v31 - v30;
        if (!v32)
        {
          v34 = -v28;
          v35 = *(char **)v6;
          v36 = (int *)(v24[4] + 4 * v30);
          v37 = (double *)(v24[1] + 8 * v30);
          do
          {
            v38 = *v37++;
            v39 = v38;
            v40 = *v36++;
            *(double *)&v35[8 * v40] = *(double *)&v35[8 * v40] + v34 * v39;
            --v33;
          }
          while (v33);
        }
      }
      if (v20)
        goto LABEL_24;
      if ((v13 >> 6) + 1 > (int)v26)
        v41 = (v13 >> 6) + 1;
      else
        v41 = v26;
      v42 = ((uint64_t)v13 >> 6) + 1;
      while (v42 < v27)
      {
        if (v10[v42++])
        {
          v41 = v42 - 1;
          break;
        }
      }
      if (v41 == (_DWORD)v26)
      {
        v20 = 0;
        v21 = -1;
        if (v22 == -1)
          break;
      }
      else
      {
        v20 = v10[v41];
        v13 = v41 << 6;
LABEL_24:
        v21 = (__clz(__rbit64(v20)) & 0x3F) + v13;
        v20 &= v20 - 1;
        if (v21 == v22)
          break;
      }
    }
  }
LABEL_39:
  operations_research::glop::BasisFactorization::RightSolve(*((operations_research::glop::BasisFactorization **)this + 4), v6);
  if ((int)v2 >= 1)
  {
    v45 = (double *)*((_QWORD *)this + 28);
    v46 = (int *)**((_QWORD **)this + 2);
    v47 = *((_QWORD *)this + 5);
    do
    {
      v48 = *v45++;
      result = v48;
      v49 = *v46++;
      *(double *)(v47 + 8 * v49) = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

double operations_research::glop::VariableValues::ComputeMaximumPrimalResidual(operations_research::glop::VariableValues *this)
{
  unint64_t v2;
  char *v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  int *v20;
  double *v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v26;

  *((_QWORD *)this + 33) = *((_QWORD *)this + 32);
  v2 = **((int **)this + 1);
  v4 = (char *)*((_QWORD *)this + 28);
  v5 = *((_QWORD *)this + 29);
  v6 = (char **)((char *)this + 224);
  v26 = 0;
  v7 = v2 << 32;
  v8 = (v5 - (uint64_t)v4) >> 3;
  if (v2 <= v8)
  {
    if (v2 < v8)
      *((_QWORD *)this + 29) = &v4[8 * v2];
  }
  else
  {
    std::vector<double>::__append((uint64_t)v6, v2 - v8, &v26);
    v4 = *v6;
  }
  bzero(v4, v7 >> 29);
  v9 = *((_QWORD *)this + 1);
  v10 = *(unsigned int *)(v9 + 4);
  if ((int)v10 >= 1)
  {
    v11 = 0;
    v12 = *((_QWORD *)this + 5);
    do
    {
      v13 = *(double *)(v12 + 8 * v11);
      if (v13 != 0.0)
      {
        v14 = *(_QWORD *)(v9 + 56);
        v15 = *(_QWORD *)(v14 + 8 * v11);
        v16 = *(_QWORD *)(v14 + 8 * (v11 + 1));
        v17 = v16 <= v15;
        v18 = v16 - v15;
        if (!v17)
        {
          v19 = *v6;
          v20 = (int *)(*(_QWORD *)(v9 + 32) + 4 * v15);
          v21 = (double *)(*(_QWORD *)(v9 + 8) + 8 * v15);
          do
          {
            v22 = *v21++;
            v23 = v22;
            v24 = *v20++;
            *(double *)&v19[8 * v24] = *(double *)&v19[8 * v24] + v13 * v23;
            --v18;
          }
          while (v18);
        }
      }
      ++v11;
    }
    while (v11 != v10);
  }
  return operations_research::glop::InfinityNorm((uint64_t)v6);
}

double operations_research::glop::VariableValues::ComputeMaximumPrimalInfeasibility(operations_research::glop::VariableValues *this)
{
  uint64_t v1;
  double *v2;
  uint64_t v3;
  double **v4;
  double *v5;
  double *v6;
  double result;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v1 = *(unsigned int *)(*((_QWORD *)this + 1) + 4);
  if ((int)v1 < 1)
    return 0.0;
  v2 = (double *)*((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 3);
  v4 = *(double ***)(v3 + 8);
  v5 = **(double ***)(v3 + 16);
  v6 = *v4;
  result = 0.0;
  do
  {
    v8 = *v2++;
    v9 = v8;
    v10 = *v5++;
    v11 = v9 - v10;
    v12 = *v6++;
    v13 = v12 - v9;
    if (v11 >= v13)
      v13 = v11;
    if (result < v13)
      result = v13;
    --v1;
  }
  while (v1);
  return result;
}

double operations_research::glop::VariableValues::ComputeSumOfPrimalInfeasibilities(operations_research::glop::VariableValues *this)
{
  uint64_t v1;
  float64x2_t *v2;
  uint64_t v3;
  float64x2_t **v4;
  float64x2_t *v5;
  float64x2_t *v6;
  uint64_t v7;
  double result;
  float64x2_t *v9;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double *v20;
  double *v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  v1 = *(unsigned int *)(*((_QWORD *)this + 1) + 4);
  if ((int)v1 < 1)
    return 0.0;
  v2 = (float64x2_t *)*((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 3);
  v4 = *(float64x2_t ***)(v3 + 8);
  v5 = **(float64x2_t ***)(v3 + 16);
  v6 = *v4;
  if (v1 >= 4)
  {
    v7 = v1 & 0x7FFFFFFC;
    v9 = v2 + 1;
    v10 = v5 + 1;
    v11 = v6 + 1;
    result = 0.0;
    v12 = v1 & 0xFFFFFFFC;
    do
    {
      v13 = v9[-1];
      v14 = vsubq_f64(v13, v10[-1]);
      v15 = vsubq_f64(*v9, *v10);
      v16 = vsubq_f64(v11[-1], v13);
      v17 = vsubq_f64(*v11, *v9);
      v18 = vmaxnmq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v16, v14), (int8x16_t)v16, (int8x16_t)v14), (float64x2_t)0);
      v19 = vmaxnmq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v17, v15), (int8x16_t)v17, (int8x16_t)v15), (float64x2_t)0);
      result = result + v18.f64[0] + v18.f64[1] + v19.f64[0] + v19.f64[1];
      v9 += 2;
      v10 += 2;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v7 == v1)
      return result;
  }
  else
  {
    v7 = 0;
    result = 0.0;
  }
  v20 = &v6->f64[v7];
  v21 = &v5->f64[v7];
  v22 = &v2->f64[v7];
  v23 = v1 - v7;
  do
  {
    v24 = *v22++;
    v25 = v24;
    v26 = *v21++;
    v27 = v25 - v26;
    v28 = *v20++;
    v29 = v28 - v25;
    if (v27 >= v29)
      v29 = v27;
    result = result + fmax(v29, 0.0);
    --v23;
  }
  while (v23);
  return result;
}

double operations_research::glop::VariableValues::UpdateOnPivoting(uint64_t a1, uint64_t *a2, int a3, double a4)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;

  v4 = (int *)a2[4];
  if (a2[5] - (uint64_t)v4 <= 0)
  {
    v13 = *(_QWORD *)(a1 + 40);
    v14 = 8 * a3;
    result = *(double *)(v13 + v14) + a4;
    *(double *)(v13 + v14) = result;
  }
  else
  {
    v5 = *a2;
    v6 = (unint64_t)(a2[5] - (_QWORD)v4) >> 2;
    v7 = **(_QWORD **)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 40);
    if (v6 <= 1)
      v6 = 1;
    do
    {
      v9 = *v4++;
      v10 = 8 * *(int *)(v7 + 4 * v9);
      *(double *)(v8 + v10) = *(double *)(v8 + v10) - *(double *)(v5 + 8 * v9) * a4;
      --v6;
    }
    while (v6);
    v11 = 8 * a3;
    result = *(double *)(v8 + v11) + a4;
    *(double *)(v8 + v11) = result;
  }
  return result;
}

void operations_research::glop::VariableValues::UpdateGivenNonBasicVariables(uint64_t a1, int **a2, char a3)
{
  double **v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  double *v19;
  int *v20;
  double *v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  _QWORD *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int *v38;
  unint64_t v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  int *v48;
  uint64_t v49;
  double *v50;
  double v51;
  double v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;

  if ((a3 & 1) != 0)
  {
    v5 = (double **)(a1 + 304);
    v55 = **(int **)(a1 + 8);
    v56 = 0;
    v6 = *(_QWORD *)(a1 + 304);
    v7 = (*(_QWORD *)(a1 + 312) - v6) >> 3;
    if (v55 <= v7)
    {
      if (v55 < v7)
        *(_QWORD *)(a1 + 312) = v6 + 8 * v55;
    }
    else
    {
      std::vector<double>::__append(a1 + 304, v55 - v7, &v56);
    }
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask(a1 + 304);
    v11 = *a2;
    v12 = a2[1];
    if (*a2 != v12)
    {
      v13 = 0;
      while (1)
      {
        v25 = *v11;
        v26 = v25 << 32;
        v27 = *(double *)(*(_QWORD *)(a1 + 40) + 8 * v25);
        operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus((_QWORD *)a1, *v11);
        v28 = *(_QWORD **)(a1 + 8);
        v29 = *(double *)(*(_QWORD *)(a1 + 40) + 8 * v25) - v27;
        if (v13)
          break;
        if (v29 != 0.0)
        {
          v30 = v28[7];
          v31 = *(_QWORD *)(v30 + 8 * v25);
          v32 = *(_QWORD *)(v30 + ((v26 + 0x100000000) >> 29));
          if (v31 < v32)
          {
            do
            {
              operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredColumnEntry>>::Add(a1 + 304, *(_DWORD *)(v28[4] + 4 * v31), v29 * *(double *)(v28[1] + 8 * v31));
              ++v31;
            }
            while (v32 != v31);
          }
        }
        v33 = *(_QWORD *)(a1 + 336);
        v34 = *(_QWORD *)(a1 + 344);
        if (v33 == v34)
        {
LABEL_12:
          v13 = 1;
          if (++v11 == v12)
            goto LABEL_25;
        }
        else
        {
          v13 = (double)(int)((*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3) * 0.8 < (double)(unint64_t)((v34 - v33) >> 2);
          if (++v11 == v12)
            goto LABEL_25;
        }
      }
      if (v29 != 0.0)
      {
        v14 = v28[7];
        v15 = *(_QWORD *)(v14 + 8 * v25);
        v16 = *(_QWORD *)(v14 + ((v26 + 0x100000000) >> 29));
        v17 = v16 <= v15;
        v18 = v16 - v15;
        if (!v17)
        {
          v19 = *v5;
          v20 = (int *)(v28[4] + 4 * v15);
          v21 = (double *)(v28[1] + 8 * v15);
          do
          {
            v22 = *v21++;
            v23 = v22;
            v24 = *v20++;
            v19[v24] = v19[v24] + v29 * v23;
            --v18;
          }
          while (v18);
        }
      }
      goto LABEL_12;
    }
LABEL_25:
    operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask(a1 + 304);
    v35 = *(_QWORD *)(a1 + 336);
    v36 = *(_QWORD *)(a1 + 344);
    if (v35 == v36
      || (double)(int)((*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3) * 0.8 < (double)(unint64_t)((v36 - v35) >> 2))
    {
      operations_research::glop::ScatteredVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::ScatteredRowEntry>>::ClearSparseMask(a1 + 304);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
    }
    operations_research::glop::BasisFactorization::RightSolve(*(operations_research::glop::BasisFactorization **)(a1 + 32), (operations_research::glop::ScatteredColumn *)(a1 + 304));
    v37 = *(int **)(a1 + 336);
    v38 = *(int **)(a1 + 344);
    if (v37 == v38)
    {
      v46 = v55;
      v47 = *v5;
      if ((int)v55 >= 1)
      {
        v48 = **(int ***)(a1 + 16);
        v49 = *(_QWORD *)(a1 + 40);
        v50 = *v5;
        do
        {
          v51 = *v50++;
          v52 = v51;
          v53 = *v48++;
          *(double *)(v49 + 8 * v53) = *(double *)(v49 + 8 * v53) - v52;
          --v46;
        }
        while (v46);
      }
      v56 = 0;
      v54 = (uint64_t)(*(_QWORD *)(a1 + 312) - (_QWORD)v47) >> 3;
      if (v55 <= v54)
      {
        if (v55 < v54)
          *(_QWORD *)(a1 + 312) = &v47[v55];
      }
      else
      {
        std::vector<double>::__append(a1 + 304, v55 - v54, &v56);
        v47 = *v5;
      }
      bzero(v47, 8 * (int)v55);
      operations_research::glop::VariableValues::ResetPrimalInfeasibilityInformation((operations_research::glop::VariableValues *)a1);
    }
    else
    {
      v39 = (char *)v38 - (char *)v37;
      if ((char *)v38 - (char *)v37 >= 1)
      {
        v40 = *v5;
        v41 = v39 >> 2;
        v42 = **(_QWORD **)(a1 + 16);
        v43 = *(_QWORD *)(a1 + 40);
        if (v41 <= 1)
          v41 = 1;
        do
        {
          v44 = *v37++;
          v45 = 8 * *(int *)(v42 + 4 * v44);
          *(double *)(v43 + v45) = *(double *)(v43 + v45) - v40[v44];
          v40[v44] = 0.0;
          --v41;
        }
        while (v41);
      }
      operations_research::glop::VariableValues::UpdatePrimalInfeasibilityInformation((operations_research::glop::VariableValues *)a1, (int **)(a1 + 336));
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
    }
  }
  else
  {
    v8 = *a2;
    v9 = a2[1];
    if (*a2 != v9)
    {
      do
      {
        v10 = *v8++;
        operations_research::glop::VariableValues::SetNonBasicVariableValueFromStatus((_QWORD *)a1, v10);
      }
      while (v8 != v9);
    }
  }
}

void operations_research::glop::VariableValues::ResetPrimalInfeasibilityInformation(operations_research::glop::VariableValues *this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  int v6;
  char *v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;

  v2 = **((int **)this + 1);
  v25 = 0;
  v3 = *((_QWORD *)this + 8);
  v4 = (_QWORD *)((char *)this + 64);
  v5 = (*((_QWORD *)this + 9) - v3) >> 3;
  if (v2 <= v5)
  {
    if (v2 < v5)
      *((_QWORD *)this + 9) = v3 + 8 * v2;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 64, v2 - v5, &v25);
  }
  v6 = v2 & ~((int)v2 >> 31);
  v8 = (void **)((char *)this + 96);
  v7 = (char *)*((_QWORD *)this + 12);
  *((_DWORD *)this + 22) = v6;
  v9 = (v6 + 63) >> 6;
  v10 = *((_QWORD *)this + 13) - (_QWORD)v7;
  v11 = v10 >> 3;
  v25 = 0;
  if (v9 <= v10 >> 3)
  {
    if (v9 < v10 >> 3)
      *((_QWORD *)this + 13) = &v7[8 * v9];
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 96, v9 - (v10 >> 3), &v25);
    v7 = (char *)*v8;
  }
  if (v9 >= v11)
    v12 = v11;
  else
    v12 = v9;
  bzero(v7, 8 * v12);
  if ((int)v2 >= 1)
  {
    v13 = 0;
    v14 = *(double *)(*(_QWORD *)this + 72);
    v15 = *((_QWORD *)this + 3);
    v16 = **((_QWORD **)this + 2);
    v17 = *((_QWORD *)this + 5);
    v18 = *(uint64_t **)(v15 + 8);
    v19 = **(_QWORD **)(v15 + 16);
    v20 = *v18;
    do
    {
      v21 = 8 * *(int *)(v16 + 4 * v13);
      v22 = *(double *)(v17 + v21);
      v23 = v22 - *(double *)(v19 + v21);
      v24 = *(double *)(v20 + v21) - v22;
      if (v23 >= v24)
        v24 = v23;
      if (v24 > v14)
      {
        *(double *)(*v4 + 8 * v13) = v24 * v24;
        *(_QWORD *)((char *)*v8 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      }
      ++v13;
    }
    while (v2 != v13);
  }
}

void operations_research::glop::VariableValues::UpdatePrimalInfeasibilityInformation(operations_research::glop::VariableValues *this, int **a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;

  v2 = *((_QWORD *)this + 8);
  if (**((_DWORD **)this + 1) == ((unint64_t)(*((_QWORD *)this + 9) - v2) >> 3))
  {
    v3 = *a2;
    v4 = a2[1];
    if (*a2 != v4)
    {
      v5 = *(double *)(*(_QWORD *)this + 72);
      v6 = *((_QWORD *)this + 3);
      v7 = **((_QWORD **)this + 2);
      v8 = *((_QWORD *)this + 5);
      v9 = *(uint64_t **)(v6 + 8);
      v10 = **(_QWORD **)(v6 + 16);
      v11 = *v9;
      do
      {
        while (1)
        {
          v12 = *v3;
          v13 = *v3;
          v14 = 8 * *(int *)(v7 + 4 * v12);
          v15 = *(double *)(v8 + v14);
          v16 = v15 - *(double *)(v10 + v14);
          v17 = *(double *)(v11 + v14) - v15;
          if (v16 >= v17)
            v17 = v16;
          if (v17 > v5)
            break;
          *(_QWORD *)(*((_QWORD *)this + 12) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v13);
          if (++v3 == v4)
            return;
        }
        *(double *)(v2 + 8 * v12) = v17 * v17;
        *(_QWORD *)(*((_QWORD *)this + 12) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        ++v3;
      }
      while (v3 != v4);
    }
  }
  else
  {
    operations_research::glop::VariableValues::ResetPrimalInfeasibilityInformation(this);
  }
}

uint64_t operations_research::glop::VariableValues::GetPrimalSquaredInfeasibilities(operations_research::glop::VariableValues *this)
{
  return (uint64_t)this + 64;
}

uint64_t operations_research::glop::VariableValues::GetPrimalInfeasiblePositions(operations_research::glop::VariableValues *this)
{
  return (uint64_t)this + 88;
}

double operations_research::glop::VariablesInfo::VariablesInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 72;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 112) = -1;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 128;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 184;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 224) = -1;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 240;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 280) = -1;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 296;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  *(_DWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = a1 + 352;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 392) = -1;
  *(_QWORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 1;
  return result;
}

void operations_research::glop::VariablesInfo::InitializeAndComputeType(operations_research::glop::VariablesInfo *this)
{
  unint64_t v2;
  int v3;
  char *v4;
  char **v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  __int128 *v40;
  char *v41;
  unint64_t v42;
  __int128 v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;
  _BYTE *v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  size_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  __int128 *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float64x2_t v74;
  float64x2_t v75;
  uint64_t v76;
  int8x8_t *v77;
  float64x2_t *v78;
  float64x2_t *v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  int8x8_t v86;
  int8x8_t v87;
  char *v88;
  double *v89;
  double *v90;
  uint64_t v91;
  char v92;
  double v93;
  uint64_t v94;

  v2 = *(int *)(*(_QWORD *)this + 4);
  v3 = v2 & ~((int)v2 >> 31);
  *((_DWORD *)this + 18) = v3;
  v5 = (char **)((char *)this + 80);
  v4 = (char *)*((_QWORD *)this + 10);
  v6 = (v3 + 63) >> 6;
  v7 = *((_QWORD *)this + 11) - (_QWORD)v4;
  v8 = v7 >> 3;
  v94 = 0;
  if (v6 <= v7 >> 3)
  {
    if (v6 < v7 >> 3)
      *((_QWORD *)this + 11) = &v4[8 * v6];
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)v5, v6 - (v7 >> 3), &v94);
    v4 = *v5;
  }
  if (v6 >= v8)
    v9 = v8;
  else
    v9 = (v3 + 63) >> 6;
  bzero(v4, 8 * v9);
  v10 = (char *)*((_QWORD *)this + 17);
  *((_DWORD *)this + 32) = v3;
  v11 = *((_QWORD *)this + 18) - (_QWORD)v10;
  v12 = v11 >> 3;
  v94 = 0;
  if (v6 <= v11 >> 3)
  {
    if (v6 < v11 >> 3)
      *((_QWORD *)this + 18) = &v10[8 * v6];
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 136, v6 - (v11 >> 3), &v94);
    v10 = (char *)*((_QWORD *)this + 17);
  }
  if (v6 >= v12)
    v13 = v12;
  else
    v13 = (v3 + 63) >> 6;
  bzero(v10, 8 * v13);
  v14 = (char *)*((_QWORD *)this + 31);
  *((_DWORD *)this + 60) = v3;
  v15 = *((_QWORD *)this + 32) - (_QWORD)v14;
  v16 = v15 >> 3;
  v94 = 0;
  if (v6 <= v15 >> 3)
  {
    if (v6 < v15 >> 3)
      *((_QWORD *)this + 32) = &v14[8 * v6];
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 248, v6 - (v15 >> 3), &v94);
    v14 = (char *)*((_QWORD *)this + 31);
  }
  if (v6 >= v16)
    v17 = v16;
  else
    v17 = (v3 + 63) >> 6;
  bzero(v14, 8 * v17);
  *((_DWORD *)this + 74) = v3;
  v18 = (char *)*((_QWORD *)this + 38);
  v19 = *((_QWORD *)this + 39) - (_QWORD)v18;
  v20 = v19 >> 3;
  v94 = 0;
  if (v6 <= v19 >> 3)
  {
    if (v6 < v19 >> 3)
      *((_QWORD *)this + 39) = &v18[8 * v6];
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 304, v6 - (v19 >> 3), &v94);
    v18 = (char *)*((_QWORD *)this + 38);
  }
  if (v6 >= v20)
    v21 = v20;
  else
    v21 = (v3 + 63) >> 6;
  bzero(v18, 8 * v21);
  *((_DWORD *)this + 88) = v3;
  v22 = (char *)*((_QWORD *)this + 45);
  v23 = *((_QWORD *)this + 46) - (_QWORD)v22;
  v24 = v23 >> 3;
  v94 = 0;
  if (v6 <= v23 >> 3)
  {
    if (v6 < v23 >> 3)
      *((_QWORD *)this + 46) = &v22[8 * v6];
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 360, v6 - (v23 >> 3), &v94);
    v22 = (char *)*((_QWORD *)this + 45);
  }
  if (v6 >= v24)
    v25 = v24;
  else
    v25 = (v3 + 63) >> 6;
  bzero(v22, 8 * v25);
  v26 = (char *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 51) = 0;
  *((_BYTE *)this + 416) = 1;
  *((_DWORD *)this + 46) = v3;
  v27 = *((_QWORD *)this + 25) - (_QWORD)v26;
  v28 = v27 >> 3;
  v94 = 0;
  if (v6 <= v27 >> 3)
  {
    if (v6 < v27 >> 3)
      *((_QWORD *)this + 25) = &v26[8 * v6];
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 192, v6 - (v27 >> 3), &v94);
    v26 = (char *)*((_QWORD *)this + 24);
  }
  if (v6 >= v28)
    v29 = v28;
  else
    v29 = v6;
  bzero(v26, 8 * v29);
  v30 = (_BYTE *)*((_QWORD *)this + 3);
  v31 = (_BYTE *)*((_QWORD *)this + 4);
  v32 = v31 - v30;
  if (v2 > v31 - v30)
  {
    v33 = *((_QWORD *)this + 5);
    if (v33 - (uint64_t)v31 >= v2 - (v31 - v30))
    {
      memset(*((void **)this + 4), 4, v2 - (v31 - v30));
      *((_QWORD *)this + 4) = &v30[v2];
      goto LABEL_73;
    }
    if ((v2 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v34 = v33 - (_QWORD)v30;
    v35 = 2 * v34;
    if (2 * v34 <= v2)
      v35 = v2;
    if (v34 >= 0x3FFFFFFFFFFFFFFFLL)
      v36 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    v37 = (char *)operator new(v36);
    v38 = &v37[v32];
    memset(&v37[v32], 4, v2 - (v31 - v30));
    if (v31 == v30)
      goto LABEL_71;
    if (v32 >= 8 && (unint64_t)(v30 - v37) >= 0x20)
    {
      if (v32 < 0x20)
      {
        v39 = 0;
        goto LABEL_63;
      }
      v39 = v32 & 0xFFFFFFFFFFFFFFE0;
      v40 = (__int128 *)(v31 - 16);
      v41 = &v37[v31 - 16 - v30];
      v42 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v43 = *v40;
        *((_OWORD *)v41 - 1) = *(v40 - 1);
        *(_OWORD *)v41 = v43;
        v41 -= 32;
        v40 -= 2;
        v42 -= 32;
      }
      while (v42);
      if (v32 == v39)
        goto LABEL_70;
      if ((v32 & 0x18) != 0)
      {
LABEL_63:
        v38 -= v32 & 0xFFFFFFFFFFFFFFF8;
        v44 = &v31[-v39 - 8];
        v45 = v44 - v30;
        v46 = v39 - (v32 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v47 = *(_QWORD *)v44;
          v44 -= 8;
          *(_QWORD *)&v37[v45] = v47;
          v45 -= 8;
          v46 += 8;
        }
        while (v46);
        v31 -= v32 & 0xFFFFFFFFFFFFFFF8;
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_70;
        goto LABEL_68;
      }
      v38 -= v39;
      v31 -= v39;
    }
LABEL_68:
    v48 = v38 - 1;
    do
    {
      v49 = *--v31;
      *v48-- = v49;
    }
    while (v31 != v30);
LABEL_70:
    v38 = v37;
LABEL_71:
    *((_QWORD *)this + 3) = v38;
    *((_QWORD *)this + 4) = &v37[v2];
    *((_QWORD *)this + 5) = &v37[v36];
    if (v30)
      operator delete(v30);
    goto LABEL_73;
  }
  if (v2 < v31 - v30)
    *((_QWORD *)this + 4) = &v30[v2];
LABEL_73:
  v50 = (_BYTE *)*((_QWORD *)this + 6);
  v51 = (_BYTE *)*((_QWORD *)this + 7);
  v52 = v51 - v50;
  if (v2 > v51 - v50)
  {
    v53 = *((_QWORD *)this + 8);
    if (v53 - (uint64_t)v51 >= v2 - (v51 - v50))
    {
      bzero(*((void **)this + 7), v2 - (v51 - v50));
      *((_QWORD *)this + 7) = &v50[v2];
      goto LABEL_103;
    }
    if ((v2 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v54 = v53 - (_QWORD)v50;
    v55 = 2 * v54;
    if (2 * v54 <= v2)
      v55 = v2;
    if (v54 >= 0x3FFFFFFFFFFFFFFFLL)
      v56 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v56 = v55;
    v57 = (char *)operator new(v56);
    v58 = &v57[v52];
    bzero(&v57[v52], v2 - (v51 - v50));
    if (v51 == v50)
      goto LABEL_101;
    if (v52 >= 8 && (unint64_t)(v50 - v57) >= 0x20)
    {
      if (v52 < 0x20)
      {
        v59 = 0;
        goto LABEL_93;
      }
      v59 = v52 & 0xFFFFFFFFFFFFFFE0;
      v60 = (__int128 *)(v51 - 16);
      v61 = &v57[v51 - 16 - v50];
      v62 = v52 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v63 = *v60;
        *((_OWORD *)v61 - 1) = *(v60 - 1);
        *(_OWORD *)v61 = v63;
        v61 -= 32;
        v60 -= 2;
        v62 -= 32;
      }
      while (v62);
      if (v52 == v59)
        goto LABEL_100;
      if ((v52 & 0x18) != 0)
      {
LABEL_93:
        v58 -= v52 & 0xFFFFFFFFFFFFFFF8;
        v64 = &v51[-v59 - 8];
        v65 = v64 - v50;
        v66 = v59 - (v52 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v67 = *(_QWORD *)v64;
          v64 -= 8;
          *(_QWORD *)&v57[v65] = v67;
          v65 -= 8;
          v66 += 8;
        }
        while (v66);
        v51 -= v52 & 0xFFFFFFFFFFFFFFF8;
        if (v52 == (v52 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_100;
        goto LABEL_98;
      }
      v58 -= v59;
      v51 -= v59;
    }
LABEL_98:
    v68 = v58 - 1;
    do
    {
      v69 = *--v51;
      *v68-- = v69;
    }
    while (v51 != v50);
LABEL_100:
    v58 = v57;
LABEL_101:
    *((_QWORD *)this + 6) = v58;
    *((_QWORD *)this + 7) = &v57[v2];
    *((_QWORD *)this + 8) = &v57[v56];
    if (v50)
      operator delete(v50);
    goto LABEL_103;
  }
  if (v2 < v51 - v50)
    *((_QWORD *)this + 7) = &v50[v2];
LABEL_103:
  if ((int)v2 < 1)
    return;
  v70 = **((_QWORD **)this + 1);
  v71 = **((_QWORD **)this + 2);
  v72 = *((_QWORD *)this + 6);
  if (v2 >= 8)
  {
    v74 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v73 = v2 & 0xFFFFFFF8;
    v75 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v76 = v73;
    v77 = (int8x8_t *)*((_QWORD *)this + 6);
    v78 = (float64x2_t *)**((_QWORD **)this + 2);
    v79 = (float64x2_t *)**((_QWORD **)this + 1);
    do
    {
      v80 = v79[1];
      v81 = v79[2];
      v82 = v79[3];
      v83 = v78[1];
      v84 = v78[2];
      v85 = v78[3];
      v86 = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v78, v75), (int32x4_t)vceqq_f64(v83, v75)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v84, v75), (int32x4_t)vceqq_f64(v85, v75)))));
      v87 = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v79, v74), (int32x4_t)vceqq_f64(v80, v74)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v81, v74), (int32x4_t)vceqq_f64(v82, v74)))));
      *v77++ = vorr_s8(vand_s8(vbsl_s8(v87, vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v79, *v78), (int32x4_t)vceqq_f64(v80, v83)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v81, v84), (int32x4_t)vceqq_f64(v82, v85)))), (int8x8_t)0x404040404040404, (int8x8_t)0x303030303030303), (int8x8_t)0x202020202020202), v86), vand_s8(vbic_s8(v87, v86), (int8x8_t)0x101010101010101));
      v79 += 4;
      v78 += 4;
      v76 -= 8;
    }
    while (v76);
    if (v73 == v2)
      return;
  }
  else
  {
    v73 = 0;
  }
  v88 = (char *)(v72 + v73);
  v89 = (double *)(v71 + 8 * v73);
  v90 = (double *)(v70 + 8 * v73);
  v91 = v2 - v73;
  do
  {
    v93 = *v89;
    if (*v90 == -INFINITY)
    {
      v92 = 2 * (v93 != INFINITY);
    }
    else if (v93 == INFINITY)
    {
      v92 = 1;
    }
    else if (*v90 == v93)
    {
      v92 = 4;
    }
    else
    {
      v92 = 3;
    }
    *v88++ = v92;
    ++v89;
    ++v90;
    --v91;
  }
  while (v91);
}

uint64_t operations_research::glop::VariablesInfo::MakeBoxedVariableRelevant(uint64_t this, int a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  if (*(unsigned __int8 *)(this + 416) == a2)
    return this;
  *(_BYTE *)(this + 416) = a2;
  v2 = *(unint64_t **)(this + 360);
  v3 = *(unint64_t **)(this + 368);
  if (!a2)
  {
    if (v2 != v3)
    {
      v6 = *v2;
      if (*v2)
      {
        v7 = 0;
        goto LABEL_55;
      }
      v17 = (unint64_t)((char *)v3 - (char *)v2) >> 3;
      v18 = (int)(v3 - v2);
      if ((int)v17 <= 1)
        v19 = 1;
      else
        v19 = (unint64_t)((char *)v3 - (char *)v2) >> 3;
      if (v18 <= 1)
        v18 = 1;
      v20 = v18 - 1;
      while (v20 != v6)
      {
        v21 = v6 + 1;
        if (v2[++v6])
        {
          v19 = v21;
          break;
        }
      }
      if (v19 != (_DWORD)v17)
      {
        v6 = v2[v19];
        v7 = v19 << 6;
LABEL_55:
        v24 = __clz(__rbit64(v6)) & 0x3F | v7;
        v23 = (v6 - 1) & v6;
        v25 = *(_DWORD *)(this + 392);
        if (v24 == v25)
          return this;
LABEL_56:
        v44 = (char *)v3 - (char *)v2;
        v45 = *(_QWORD *)(this + 192);
        v46 = (unint64_t)v44 >> 3;
        v47 = (int)(v44 >> 3);
        while (1)
        {
          v48 = (unint64_t)v24 >> 6;
          v49 = *(_QWORD *)(v45 + 8 * v48);
          if ((v49 & (1 << v24)) != 0)
          {
            *(_QWORD *)(v45 + 8 * v48) = v49 & ~(1 << v24);
            *(_QWORD *)(this + 408) += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) + 8 * v24)
                                     - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56)
                                                 + ((uint64_t)(((unint64_t)v24 << 32) + 0x100000000) >> 29));
          }
          if (v23)
            goto LABEL_58;
          if ((v7 >> 6) + 1 > (int)v46)
            v50 = (v7 >> 6) + 1;
          else
            v50 = v46;
          v51 = ((uint64_t)v7 >> 6) + 1;
          while (v51 < v47)
          {
            if (v2[v51++])
            {
              v50 = v51 - 1;
              break;
            }
          }
          if (v50 == (_DWORD)v46)
          {
            v23 = 0;
            v24 = -1;
            if (v25 == -1)
              return this;
          }
          else
          {
            v23 = v2[v50];
            v7 = v50 << 6;
LABEL_58:
            v24 = (__clz(__rbit64(v23)) & 0x3F) + v7;
            v23 &= v23 - 1;
            if (v24 == v25)
              return this;
          }
        }
      }
    }
    v7 = 0;
    v23 = 0;
    v24 = -1;
    v25 = *(_DWORD *)(this + 392);
    if (v25 == -1)
      return this;
    goto LABEL_56;
  }
  if (v2 != v3)
  {
    v4 = *v2;
    if (*v2)
    {
      v5 = 0;
      goto LABEL_34;
    }
    v8 = (unint64_t)((char *)v3 - (char *)v2) >> 3;
    v9 = (int)(v3 - v2);
    if ((int)v8 <= 1)
      v10 = 1;
    else
      v10 = (unint64_t)((char *)v3 - (char *)v2) >> 3;
    if (v9 <= 1)
      v9 = 1;
    v11 = v9 - 1;
    while (v11 != v4)
    {
      v12 = v4 + 1;
      if (v2[++v4])
      {
        v10 = v12;
        break;
      }
    }
    if (v10 != (_DWORD)v8)
    {
      v4 = v2[v10];
      v5 = v10 << 6;
LABEL_34:
      v15 = __clz(__rbit64(v4)) & 0x3F | v5;
      v14 = (v4 - 1) & v4;
      v16 = *(_DWORD *)(this + 392);
      if ((_DWORD)v15 != v16)
        goto LABEL_35;
      return this;
    }
  }
  v14 = 0;
  v5 = 0;
  v15 = 0xFFFFFFFFLL;
  v16 = *(_DWORD *)(this + 392);
  if (v16 != -1)
  {
LABEL_35:
    v26 = *(_QWORD *)(this + 48);
    v27 = (char *)v3 - (char *)v2;
    v28 = *(_QWORD *)(this + 192);
    v29 = (unint64_t)v27 >> 3;
    v30 = (int)(v27 >> 3);
    while (1)
    {
      v35 = (int)v15;
      v36 = *(unsigned __int8 *)(v26 + (int)v15);
      v37 = *(_QWORD *)(v28 + 8 * ((unint64_t)(int)v15 >> 6));
      v38 = 1 << v15;
      if ((v36 != 4) != ((v37 & (1 << v15)) != 0))
      {
        v39 = v15 << 32;
        if (v36 == 4)
        {
          v31 = v37 & ~v38;
          v32 = *(_QWORD *)(*(_QWORD *)this + 56);
          v33 = (_QWORD *)(v32 + ((v39 + 0x100000000) >> 29));
          v34 = (_QWORD *)(v32 + 8 * v35);
        }
        else
        {
          v31 = v37 | v38;
          v40 = *(_QWORD *)(*(_QWORD *)this + 56);
          v34 = (_QWORD *)(v40 + ((v39 + 0x100000000) >> 29));
          v33 = (_QWORD *)(v40 + 8 * v35);
        }
        *(_QWORD *)(v28 + 8 * (v35 >> 6)) = v31;
        *(_QWORD *)(this + 408) += *v34 - *v33;
      }
      if (v14)
        goto LABEL_39;
      if ((v5 >> 6) + 1 > (int)v29)
        v41 = (v5 >> 6) + 1;
      else
        v41 = v29;
      v42 = ((uint64_t)v5 >> 6) + 1;
      while (v42 < v30)
      {
        if (v2[v42++])
        {
          v41 = v42 - 1;
          break;
        }
      }
      if (v41 == (_DWORD)v29)
      {
        v14 = 0;
        v15 = 0xFFFFFFFFLL;
        if (v16 == -1)
          return this;
      }
      else
      {
        v14 = v2[v41];
        v5 = v41 << 6;
LABEL_39:
        v15 = (__clz(__rbit64(v14)) & 0x3F) + v5;
        v14 &= v14 - 1;
        if ((_DWORD)v15 == v16)
          return this;
      }
    }
  }
  return this;
}

_QWORD *operations_research::glop::VariablesInfo::Update(_QWORD *result, uint64_t a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3)
    return (_QWORD *)operations_research::glop::VariablesInfo::UpdateToNonBasicStatus((uint64_t)result, a2, a3);
  *(_BYTE *)(result[3] + (int)a2) = 0;
  v3 = (unint64_t)(int)a2 >> 6;
  v4 = 8 * v3;
  *(_QWORD *)(result[31] + v4) = *(_QWORD *)(result[31] + 8 * v3) | (1 << a2);
  *(_QWORD *)(result[38] + v4) = *(_QWORD *)(result[38] + 8 * v3) & ~(1 << a2);
  *(_QWORD *)(result[10] + v4) = *(_QWORD *)(result[10] + 8 * v3) & ~(1 << a2);
  *(_QWORD *)(result[17] + v4) = *(_QWORD *)(result[17] + 8 * v3) & ~(1 << a2);
  *(_QWORD *)(result[45] + v4) = *(_QWORD *)(result[45] + 8 * v3) & ~(1 << a2);
  v5 = result[24];
  v6 = *(_QWORD *)(v5 + 8 * v3);
  if ((v6 & (1 << a2)) != 0)
  {
    *(_QWORD *)(v5 + 8 * v3) = v6 & ~(1 << a2);
    result[51] += *(_QWORD *)(*(_QWORD *)(*result + 56) + 8 * (int)a2)
                - *(_QWORD *)(*(_QWORD *)(*result + 56) + (((a2 << 32) + 0x100000000) >> 29));
  }
  return result;
}

_QWORD *operations_research::glop::VariablesInfo::UpdateToBasicStatus(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(result[3] + (int)a2) = 0;
  v2 = (unint64_t)(int)a2 >> 6;
  v3 = 8 * v2;
  *(_QWORD *)(result[31] + v3) = *(_QWORD *)(result[31] + 8 * v2) | (1 << a2);
  *(_QWORD *)(result[38] + v3) = *(_QWORD *)(result[38] + 8 * v2) & ~(1 << a2);
  *(_QWORD *)(result[10] + v3) = *(_QWORD *)(result[10] + 8 * v2) & ~(1 << a2);
  *(_QWORD *)(result[17] + v3) = *(_QWORD *)(result[17] + 8 * v2) & ~(1 << a2);
  *(_QWORD *)(result[45] + v3) = *(_QWORD *)(result[45] + 8 * v2) & ~(1 << a2);
  v4 = result[24];
  v5 = *(_QWORD *)(v4 + 8 * v2);
  if ((v5 & (1 << a2)) != 0)
  {
    *(_QWORD *)(v4 + 8 * v2) = v5 & ~(1 << a2);
    result[51] += *(_QWORD *)(*(_QWORD *)(*result + 56) + 8 * (int)a2)
                - *(_QWORD *)(*(_QWORD *)(*result + 56) + (((a2 << 32) + 0x100000000) >> 29));
  }
  return result;
}

uint64_t operations_research::glop::VariablesInfo::UpdateToNonBasicStatus(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = (int)a2;
  *(_BYTE *)(*(_QWORD *)(result + 24) + (int)a2) = a3;
  v4 = 1 << a2;
  v5 = ~(1 << a2);
  v6 = (unint64_t)(int)a2 >> 6;
  v7 = 8 * v6;
  *(_QWORD *)(*(_QWORD *)(result + 248) + v7) = *(_QWORD *)(*(_QWORD *)(result + 248) + 8 * v6) & v5;
  *(_QWORD *)(*(_QWORD *)(result + 304) + v7) = *(_QWORD *)(*(_QWORD *)(result + 304) + 8 * v6) | (1 << a2);
  if (a3 == 4 || a3 == 2)
  {
    v8 = *(_QWORD *)(result + 80);
    v9 = *(_QWORD *)(v8 + 8 * v6) | v4;
  }
  else
  {
    v8 = *(_QWORD *)(result + 80);
    v9 = *(_QWORD *)(v8 + 8 * v6) & v5;
  }
  *(_QWORD *)(v8 + 8 * v6) = v9;
  v10 = a2 << 32;
  v11 = *(_QWORD *)(result + 136);
  v12 = *(_QWORD *)(v11 + 8 * v6);
  v13 = v12 | v4;
  v14 = v12 & v5;
  if (a3 - 3 >= 2)
    v15 = v14;
  else
    v15 = v13;
  *(_QWORD *)(v11 + 8 * v6) = v15;
  v16 = *(unsigned __int8 *)(*(_QWORD *)(result + 48) + v3);
  v17 = *(_QWORD *)(result + 360);
  v18 = *(_QWORD *)(v17 + 8 * v6);
  v19 = v18 | v4;
  v20 = v18 & v5;
  if (v16 == 3)
    v20 = v19;
  *(_QWORD *)(v17 + 8 * v6) = v20;
  if (a3 == 1)
  {
    v21 = (uint64_t *)(*(_QWORD *)(result + 192) + 8 * v6);
    v22 = *v21;
    if ((*v21 & v4) == 0)
      return result;
    goto LABEL_22;
  }
  v24 = v16 != 3 || *(_BYTE *)(result + 416) != 0;
  v21 = (uint64_t *)(*(_QWORD *)(result + 192) + 8 * v6);
  v22 = *v21;
  if (v24 != ((*v21 & v4) != 0))
  {
    if (v24)
    {
      *v21 = v22 | v4;
      v25 = *(_QWORD *)(*(_QWORD *)result + 56);
      v26 = (_QWORD *)(v25 + ((v10 + 0x100000000) >> 29));
      v27 = (_QWORD *)(v25 + 8 * v3);
LABEL_23:
      *(_QWORD *)(result + 408) += *v26 - *v27;
      return result;
    }
LABEL_22:
    *v21 = v22 & v5;
    v28 = v10 + 0x100000000;
    v29 = *(_QWORD *)(*(_QWORD *)result + 56);
    v27 = (_QWORD *)(v29 + (v28 >> 29));
    v26 = (_QWORD *)(v29 + 8 * v3);
    goto LABEL_23;
  }
  return result;
}

uint64_t operations_research::glop::VariablesInfo::GetTypeRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 48;
}

uint64_t operations_research::glop::VariablesInfo::GetStatusRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 24;
}

uint64_t operations_research::glop::VariablesInfo::GetCanIncreaseBitRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 72;
}

uint64_t operations_research::glop::VariablesInfo::GetCanDecreaseBitRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 128;
}

uint64_t operations_research::glop::VariablesInfo::GetIsRelevantBitRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 184;
}

uint64_t operations_research::glop::VariablesInfo::GetIsBasicBitRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 240;
}

uint64_t operations_research::glop::VariablesInfo::GetNotBasicBitRow(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 296;
}

uint64_t operations_research::glop::VariablesInfo::GetNonBasicBoxedVariables(operations_research::glop::VariablesInfo *this)
{
  return (uint64_t)this + 352;
}

uint64_t operations_research::glop::VariablesInfo::GetNumEntriesInRelevantColumns(operations_research::glop::VariablesInfo *this)
{
  return *((_QWORD *)this + 51);
}

operations_research::glop::LinearProgram *operations_research::glop::LinearProgram::LinearProgram(operations_research::glop::LinearProgram *this)
{
  uint64_t v2;

  v2 = operations_research::glop::SparseMatrix::SparseMatrix((uint64_t)this);
  operations_research::glop::SparseMatrix::SparseMatrix(v2 + 32);
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 54) = 0x3FF0000000000000;
  *((_DWORD *)this + 110) = 16843008;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 118) = -1;
  *((_BYTE *)this + 476) = 1;
  return this;
}

void sub_22DA207F0(_Unwind_Exception *exception_object)
{
  _QWORD **v1;

  if (*v1)
    operations_research::glop::LinearProgram::LinearProgram((uint64_t)v1, *v1);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::LinearProgram::Clear(operations_research::glop::LinearProgram *this)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;

  operations_research::glop::SparseMatrix::Clear(this);
  operations_research::glop::SparseMatrix::Clear((_QWORD *)this + 4);
  *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
  v2 = *((_QWORD *)this + 14);
  for (i = *((_QWORD *)this + 15); i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  *((_QWORD *)this + 15) = v2;
  *((_QWORD *)this + 18) = *((_QWORD *)this + 17);
  *((_QWORD *)this + 21) = *((_QWORD *)this + 20);
  *((_QWORD *)this + 24) = *((_QWORD *)this + 23);
  *((_QWORD *)this + 30) = *((_QWORD *)this + 29);
  *((_QWORD *)this + 33) = *((_QWORD *)this + 32);
  v4 = *((_QWORD *)this + 26);
  for (j = *((_QWORD *)this + 27); j != v4; j -= 24)
  {
    if (*(char *)(j - 1) < 0)
      operator delete(*(void **)(j - 24));
  }
  *((_QWORD *)this + 27) = v4;
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>>>::clear((uint64_t)this + 376);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>>>::clear((uint64_t)this + 328);
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0x3FF0000000000000;
  *((_DWORD *)this + 110) = 16843008;
  if (*((char *)this + 471) < 0)
  {
    **((_BYTE **)this + 56) = 0;
    *((_QWORD *)this + 57) = 0;
  }
  else
  {
    *((_BYTE *)this + 448) = 0;
    *((_BYTE *)this + 471) = 0;
  }
  *((_DWORD *)this + 118) = -1;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,gtl::IntType<operations_research::glop::RowIndex_tag_,int>>>>::clear(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0x80)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v4) & 0x80000000) == 0)
      {
        v6 = *v5 + v3;
        if (*(char *)(v6 + 23) < 0)
        {
          operator delete(*(void **)v6);
          v2 = *(_QWORD *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    v2 = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v5 = 0;
LABEL_14:
    v10 = *(unint64_t **)(a1 + 32);
    if (!v10)
      return;
LABEL_19:
    v10[1] = 0;
    *v10 = v2;
    v10[4] = 0;
    v10[2] = 0;
    return;
  }
  if (!v2)
    goto LABEL_14;
  v7 = 0;
  for (i = 0; i != v2; ++i)
  {
    if ((*(char *)(*(_QWORD *)a1 + i) & 0x80000000) == 0)
    {
      v9 = *(_QWORD *)(a1 + 8) + v7;
      if (*(char *)(v9 + 23) < 0)
      {
        operator delete(*(void **)v9);
        v2 = *(_QWORD *)(a1 + 24);
      }
    }
    v7 += 32;
  }
  *(_QWORD *)(a1 + 16) = 0;
  memset(*(void **)a1, 128, v2 + 8);
  *(_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 24)) = -1;
  v2 = *(_QWORD *)(a1 + 24);
  v11 = v2 - (v2 >> 3);
  if (v2 == 7)
    v11 = 6;
  *(_QWORD *)(a1 + 40) = v11 - *(_QWORD *)(a1 + 16);
  v10 = *(unint64_t **)(a1 + 32);
  if (v10)
    goto LABEL_19;
}

uint64_t operations_research::glop::LinearProgram::CreateNewVariable(operations_research::glop::LinearProgram *this)
{
  unint64_t v2;
  __int128 v3;
  std::string *v4;
  int v5;
  void *__p[2];
  uint64_t v8;

  __p[0] = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back((uint64_t)this + 136, __p);
  __p[0] = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back((uint64_t)this + 160, __p);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back((uint64_t)this + 184, &operations_research::glop::kInfinity);
  LODWORD(__p[0]) = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)this + 232, __p);
  HIBYTE(v8) = 0;
  LOBYTE(__p[0]) = 0;
  v2 = *((_QWORD *)this + 27);
  if (v2 >= *((_QWORD *)this + 28))
  {
    v4 = std::vector<std::string>::__push_back_slow_path<std::string>((char **)this + 26, (uint64_t)__p);
    v5 = SHIBYTE(v8);
    *((_QWORD *)this + 27) = v4;
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = *(_OWORD *)__p;
    *(_QWORD *)(v2 + 16) = v8;
    *(_OWORD *)v2 = v3;
    *((_QWORD *)this + 27) = v2 + 24;
  }
  *((_BYTE *)this + 442) = 0;
  return operations_research::glop::SparseMatrix::AppendEmptyColumn(this);
}

void sub_22DA20B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_27;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v14[8 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 4;
      if (v16 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_27;
      v17 = (v16 >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v18];
      v15 = (_DWORD *)((char *)v15 - v18);
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v14[4 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v5 = *a2;
    v7 = v5 + 4;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t operations_research::glop::LinearProgram::CreateNewSlackVariable(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  int v8;
  unint64_t v9;
  __int128 v10;
  std::string *v11;
  uint64_t v13;
  double v14;
  double v15;

  v14 = a5;
  v15 = a4;
  v13 = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 136, &v13);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 160, &v15);
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 184, &v14);
  if (a2)
    v8 = 2;
  else
    v8 = 0;
  LODWORD(v13) = v8;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 232, &v13);
  v9 = *(_QWORD *)(a1 + 216);
  if (v9 >= *(_QWORD *)(a1 + 224))
  {
    v11 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a1 + 208), a3);
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 216), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      v10 = *(_OWORD *)a3;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(a3 + 16);
      *(_OWORD *)v9 = v10;
    }
    v11 = (std::string *)(v9 + 24);
    *(_QWORD *)(a1 + 216) = v9 + 24;
  }
  *(_QWORD *)(a1 + 216) = v11;
  *(_BYTE *)(a1 + 442) = 0;
  return operations_research::glop::SparseMatrix::AppendEmptyColumn((operations_research::glop::SparseMatrix *)a1);
}

void sub_22DA20EF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 216) = v2;
  _Unwind_Resume(a1);
}

unint64_t operations_research::glop::LinearProgram::CreateNewConstraint(operations_research::glop::LinearProgram *this)
{
  char **v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  std::string *v7;
  int v8;
  void *__p[2];
  uint64_t v11;

  v2 = (char **)((char *)this + 112);
  v3 = (uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 3;
  v4 = 0xAAAAAAAAAAAAAAABLL * v3;
  operations_research::glop::SparseMatrix::SetNumRows((uint64_t)this, -1431655765 * v3 + 1);
  __p[0] = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back((uint64_t)this + 64, __p);
  __p[0] = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back((uint64_t)this + 88, __p);
  HIBYTE(v11) = 0;
  LOBYTE(__p[0]) = 0;
  v5 = *((_QWORD *)this + 15);
  if (v5 >= *((_QWORD *)this + 16))
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string>(v2, (uint64_t)__p);
    v8 = SHIBYTE(v11);
    *((_QWORD *)this + 15) = v7;
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 16) = v11;
    *(_OWORD *)v5 = v6;
    *((_QWORD *)this + 15) = v5 + 24;
  }
  *((_BYTE *)this + 442) = 0;
  return v4;
}

void sub_22DA20FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::LinearProgram::SetVariableType(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  _BOOL4 v4;

  v3 = *(_QWORD *)(result + 232);
  v4 = (*(_DWORD *)(v3 + 4 * a2) - 1) < 2;
  *(_DWORD *)(v3 + 4 * a2) = a3;
  if ((a3 - 1) < 2 != v4)
    *(_BYTE *)(result + 443) = 0;
  return result;
}

uint64_t operations_research::glop::LinearProgram::SetVariableBounds(uint64_t result, int a2, double a3, double a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  BOOL v7;
  double v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  BOOL v13;

  v4 = *(_QWORD *)(result + 160);
  if ((*(_DWORD *)(*(_QWORD *)(result + 232) + 4 * a2) - 1) > 1)
  {
    v10 = 8 * a2;
    *(double *)(v4 + v10) = a3;
    *(double *)(*(_QWORD *)(result + 184) + v10) = a4;
    return result;
  }
  v5 = *(double *)(v4 + 8 * a2);
  v6 = *(_QWORD *)(result + 184);
  v7 = v5 >= 2.22044605e-16 || v5 <= -1.0;
  v9 = !v7 && (v8 = *(double *)(v6 + 8 * a2), v8 > 1.0) && v8 < 2.0;
  v11 = 8 * a2;
  *(double *)(v4 + v11) = a3;
  *(double *)(v6 + v11) = a4;
  if (a4 <= 1.0 || ((v12 = *(double *)(v4 + 8 * a2), v12 < 2.22044605e-16) ? (v13 = v12 <= -1.0) : (v13 = 1), v13))
  {
    if (!v9)
      return result;
  }
  else if (a4 < 2.0 == v9)
  {
    return result;
  }
  *(_BYTE *)(result + 443) = 0;
  return result;
}

BOOL operations_research::glop::LinearProgram::IsVariableBinary(_QWORD *a1, int a2)
{
  double v2;
  BOOL v3;
  BOOL v4;
  double v5;

  if ((*(_DWORD *)(a1[29] + 4 * a2) - 1) > 1)
    return 0;
  v2 = *(double *)(a1[20] + 8 * a2);
  if (v2 < 2.22044605e-16)
  {
    v3 = v2 == -1.0;
    v4 = v2 < -1.0;
  }
  else
  {
    v3 = 1;
    v4 = 0;
  }
  if (v4 || v3)
    return 0;
  v5 = *(double *)(a1[23] + 8 * a2);
  return v5 > 1.0 && v5 < 2.0;
}

void operations_research::glop::LinearProgram::UpdateAllIntegerVariableLists(operations_research::glop::LinearProgram *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  double v26;
  BOOL v27;
  double v28;
  BOOL v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  void **v69;
  void **v70;
  void **v71;

  if (!*((_BYTE *)this + 443))
  {
    *((_QWORD *)this + 33) = *((_QWORD *)this + 32);
    *((_QWORD *)this + 36) = *((_QWORD *)this + 35);
    *((_QWORD *)this + 39) = *((_QWORD *)this + 38);
    if ((int)(-1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4)) >= 1)
    {
      v2 = 0;
      v69 = (void **)((char *)this + 280);
      v70 = (void **)((char *)this + 304);
      v71 = (void **)((char *)this + 256);
      v3 = -1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
      while (1)
      {
        v5 = *((_QWORD *)this + 29);
        if ((*(_DWORD *)(v5 + 4 * v2) - 1) > 1)
          goto LABEL_6;
        v7 = (char *)*((_QWORD *)this + 33);
        v6 = *((_QWORD *)this + 34);
        if ((unint64_t)v7 < v6)
        {
          *(_DWORD *)v7 = v2;
          v8 = (uint64_t)(v7 + 4);
          goto LABEL_29;
        }
        v9 = (char *)*v71;
        v10 = v7 - (_BYTE *)*v71;
        v11 = v10 >> 2;
        v12 = (v10 >> 2) + 1;
        if (v12 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v13 = v6 - (_QWORD)v9;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v12;
        if (v14)
          break;
        v15 = 0;
        v16 = (_DWORD *)(4 * v11);
        *(_DWORD *)(4 * v11) = v2;
        v8 = 4 * v11 + 4;
        if (v7 != v9)
          goto LABEL_21;
LABEL_27:
        *((_QWORD *)this + 32) = v16;
        *((_QWORD *)this + 33) = v8;
        *((_QWORD *)this + 34) = &v15[4 * v14];
        if (v9)
        {
          operator delete(v9);
          v5 = *((_QWORD *)this + 29);
        }
LABEL_29:
        *((_QWORD *)this + 33) = v8;
        if ((*(_DWORD *)(v5 + 4 * v2) - 1) > 1
          || ((v26 = *(double *)(*((_QWORD *)this + 20) + 8 * v2), v26 < 2.22044605e-16)
            ? (v27 = v26 <= -1.0)
            : (v27 = 1),
              v27
           || ((v28 = *(double *)(*((_QWORD *)this + 23) + 8 * v2), v28 > 1.0) ? (v29 = v28 < 2.0) : (v29 = 0), !v29)))
        {
          v31 = (char *)*((_QWORD *)this + 39);
          v30 = *((_QWORD *)this + 40);
          if ((unint64_t)v31 >= v30)
          {
            v32 = (char *)*v70;
            v33 = v31 - (_BYTE *)*v70;
            v34 = v33 >> 2;
            v35 = (v33 >> 2) + 1;
            if (v35 >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v36 = v30 - (_QWORD)v32;
            if (v36 >> 1 > v35)
              v35 = v36 >> 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
              v37 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
            {
              if (v37 >> 62)
                goto LABEL_82;
              v38 = operator new(4 * v37);
              v39 = &v38[4 * v34];
              *v39 = v2;
              v4 = (uint64_t)(v39 + 1);
              if (v31 == v32)
              {
LABEL_56:
                *((_QWORD *)this + 38) = v39;
                *((_QWORD *)this + 39) = v4;
                *((_QWORD *)this + 40) = &v38[4 * v37];
                if (v32)
                  operator delete(v32);
                goto LABEL_5;
              }
            }
            else
            {
              v38 = 0;
              v39 = (_DWORD *)(4 * v34);
              *(_DWORD *)(4 * v34) = v2;
              v4 = 4 * v34 + 4;
              if (v31 == v32)
                goto LABEL_56;
            }
            v40 = v31 - 4 - v32;
            if (v40 < 0x2C)
              goto LABEL_88;
            if ((unint64_t)(v31 - &v38[v33]) < 0x20)
              goto LABEL_88;
            v41 = (v40 >> 2) + 1;
            v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            v43 = &v31[-v42];
            v39 = (_DWORD *)((char *)v39 - v42);
            v44 = &v38[4 * v34 - 16];
            v45 = v31 - 16;
            v46 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *v44 = v47;
              v44 -= 2;
              v45 -= 32;
              v46 -= 8;
            }
            while (v46);
            v31 = v43;
            if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_88:
              do
              {
                v48 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *--v39 = v48;
              }
              while (v31 != v32);
            }
            goto LABEL_56;
          }
          *(_DWORD *)v31 = v2;
          v4 = (uint64_t)(v31 + 4);
LABEL_5:
          *((_QWORD *)this + 39) = v4;
          goto LABEL_6;
        }
        v50 = (char *)*((_QWORD *)this + 36);
        v49 = *((_QWORD *)this + 37);
        if ((unint64_t)v50 >= v49)
        {
          v51 = (char *)*v69;
          v52 = v50 - (_BYTE *)*v69;
          v53 = v52 >> 2;
          v54 = (v52 >> 2) + 1;
          if (v54 >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v55 = v49 - (_QWORD)v51;
          if (v55 >> 1 > v54)
            v54 = v55 >> 1;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
            v56 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          if (v56)
          {
            if (v56 >> 62)
LABEL_82:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v57 = operator new(4 * v56);
            v58 = &v57[4 * v53];
            *v58 = v2;
            v59 = (uint64_t)(v58 + 1);
            if (v50 == v51)
              goto LABEL_77;
LABEL_71:
            v60 = v50 - 4 - v51;
            if (v60 < 0x2C)
              goto LABEL_89;
            if ((unint64_t)(v50 - &v57[v52]) < 0x20)
              goto LABEL_89;
            v61 = (v60 >> 2) + 1;
            v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
            v63 = &v50[-v62];
            v58 = (_DWORD *)((char *)v58 - v62);
            v64 = &v57[4 * v53 - 16];
            v65 = v50 - 16;
            v66 = v61 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v67 = *(_OWORD *)v65;
              *(v64 - 1) = *((_OWORD *)v65 - 1);
              *v64 = v67;
              v64 -= 2;
              v65 -= 32;
              v66 -= 8;
            }
            while (v66);
            v50 = v63;
            if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_89:
              do
              {
                v68 = *((_DWORD *)v50 - 1);
                v50 -= 4;
                *--v58 = v68;
              }
              while (v50 != v51);
            }
          }
          else
          {
            v57 = 0;
            v58 = (_DWORD *)(4 * v53);
            *(_DWORD *)(4 * v53) = v2;
            v59 = 4 * v53 + 4;
            if (v50 != v51)
              goto LABEL_71;
          }
LABEL_77:
          *((_QWORD *)this + 35) = v58;
          *((_QWORD *)this + 36) = v59;
          *((_QWORD *)this + 37) = &v57[4 * v56];
          if (v51)
            operator delete(v51);
          *((_QWORD *)this + 36) = v59;
          goto LABEL_6;
        }
        *(_DWORD *)v50 = v2;
        *((_QWORD *)this + 36) = v50 + 4;
LABEL_6:
        if (++v2 == v3)
          goto LABEL_80;
      }
      if (v14 >> 62)
        goto LABEL_82;
      v15 = operator new(4 * v14);
      v16 = &v15[4 * v11];
      *v16 = v2;
      v8 = (uint64_t)(v16 + 1);
      if (v7 == v9)
        goto LABEL_27;
LABEL_21:
      v17 = v7 - 4 - v9;
      if (v17 < 0x2C)
        goto LABEL_90;
      if ((unint64_t)(v7 - &v15[v10]) < 0x20)
        goto LABEL_90;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v20 = &v7[-v19];
      v16 = (_DWORD *)((char *)v16 - v19);
      v21 = &v15[4 * v11 - 16];
      v22 = v7 - 16;
      v23 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      v7 = v20;
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_90:
        do
        {
          v25 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v16 = v25;
        }
        while (v7 != v9);
      }
      goto LABEL_27;
    }
LABEL_80:
    *((_BYTE *)this + 443) = 1;
  }
}

uint64_t operations_research::glop::LinearProgram::IntegerVariablesList(operations_research::glop::LinearProgram *this)
{
  operations_research::glop::LinearProgram::UpdateAllIntegerVariableLists(this);
  return (uint64_t)this + 256;
}

void operations_research::glop::LinearProgram::SetConstraintBounds(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v8;

  operations_research::glop::LinearProgram::ResizeRowsIfNeeded(a1, a2);
  v8 = 8 * a2;
  *(double *)(*(_QWORD *)(a1 + 64) + v8) = a3;
  *(double *)(*(_QWORD *)(a1 + 88) + v8) = a4;
}

void operations_research::glop::LinearProgram::ResizeRowsIfNeeded(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::vector<std::string>::value_type __x;

  if (*(_DWORD *)(a1 + 24) <= a2)
  {
    *(_BYTE *)(a1 + 442) = 0;
    v3 = a2 + 1;
    operations_research::glop::SparseMatrix::SetNumRows(a1, a2 + 1);
    v4 = *(_QWORD *)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
    __x.__r_.__value_.__r.__words[0] = 0;
    v6 = (v5 - v4) >> 3;
    if (v3 <= v6)
    {
      if (v3 < v6)
        *(_QWORD *)(a1 + 72) = v4 + 8 * v3;
    }
    else
    {
      std::vector<double>::__append(a1 + 64, v3 - v6, (uint64_t *)&__x);
    }
    v7 = *(_QWORD *)(a1 + 88);
    v8 = *(_QWORD *)(a1 + 96);
    __x.__r_.__value_.__r.__words[0] = 0;
    v9 = (v8 - v7) >> 3;
    if (v3 <= v9)
    {
      if (v3 < v9)
        *(_QWORD *)(a1 + 96) = v7 + 8 * v3;
    }
    else
    {
      std::vector<double>::__append(a1 + 88, v3 - v9, (uint64_t *)&__x);
    }
    v10 = *(_QWORD *)(a1 + 112);
    v11 = *(_QWORD *)(a1 + 120);
    *((_BYTE *)&__x.__r_.__value_.__s + 23) = 0;
    __x.__r_.__value_.__s.__data_[0] = 0;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 3);
    if (v3 <= v12)
    {
      if (v3 < v12)
      {
        v13 = v10 + 24 * v3;
        while (v11 != v13)
        {
          if (*(char *)(v11 - 1) < 0)
            operator delete(*(void **)(v11 - 24));
          v11 -= 24;
        }
        *(_QWORD *)(a1 + 120) = v13;
      }
    }
    else
    {
      std::vector<std::string>::__append((std::vector<std::string> *)(a1 + 112), v3 - v12, &__x);
      if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__x.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22DA2181C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::LinearProgram::SetCoefficient(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  operations_research::glop::LinearProgram::ResizeRowsIfNeeded(a1, a2);
  *(_WORD *)(a1 + 441) = 0;
  v8 = *(_QWORD *)a1 + 48 * a3;
  v9 = *(_QWORD *)(v8 + 8);
  if (v9 == *(_QWORD *)(v8 + 16))
  {
    if (v9)
    {
      v10 = 2 * v9;
      if (v9 >= 2 * v9)
        goto LABEL_10;
    }
    else
    {
      v10 = 4;
    }
    v11 = (v10 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (char *)operator new[]();
    v13 = v12;
    v14 = &v12[4 * v11];
    v9 = *(_QWORD *)(v8 + 8);
    if (v9 >= 1)
    {
      memmove(v12, *(const void **)(v8 + 24), 4 * v9);
      memmove(v14, *(const void **)(v8 + 32), 8 * v9);
    }
    v15 = *(_QWORD *)v8;
    *(_QWORD *)v8 = v13;
    *(_QWORD *)(v8 + 24) = v13;
    *(_QWORD *)(v8 + 32) = v14;
    *(_QWORD *)(v8 + 16) = v11;
    if (v15)
    {
      MEMORY[0x22E31DF60](v15, 0x1000C8077774924);
      v9 = *(_QWORD *)(v8 + 8);
    }
  }
LABEL_10:
  *(_QWORD *)(v8 + 8) = v9 + 1;
  v16 = *(_QWORD *)(v8 + 32);
  *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v9) = a2;
  *(double *)(v16 + 8 * v9) = a4;
  *(_BYTE *)(v8 + 40) = 1;
}

uint64_t operations_research::glop::LinearProgram::SetObjectiveCoefficient(uint64_t result, int a2, double a3)
{
  *(double *)(*(_QWORD *)(result + 136) + 8 * a2) = a3;
  return result;
}

uint64_t operations_research::glop::LinearProgram::GetSparseColumn(_QWORD *a1, int a2)
{
  return *a1 + 48 * a2;
}

double operations_research::glop::LinearProgram::GetObjectiveCoefficientForMinimizationVersion(uint64_t a1, int a2)
{
  double result;

  result = *(double *)(*(_QWORD *)(a1 + 136) + 8 * a2);
  if (*(_BYTE *)(a1 + 440))
    return -result;
  return result;
}

unint64_t operations_research::glop::LinearProgram::GetDimensionString@<X0>(operations_research::glop::LinearProgram *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD v5[7];

  v5[6] = *MEMORY[0x24BDAC8D0];
  v3 = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  v5[0] = *((unsigned int *)this + 6);
  v5[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  v5[2] = v3;
  v5[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  v5[4] = operations_research::glop::SparseMatrix::num_entries(this);
  v5[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  return absl::lts_2020_02_25::str_format_internal::FormatPack("%d rows, %d columns, %d entries", 31, (uint64_t)v5, 3, a2);
}

uint64_t operations_research::glop::LinearProgram::GetFirstSlackVariable(operations_research::glop::LinearProgram *this)
{
  return *((unsigned int *)this + 118);
}

uint64_t operations_research::glop::LinearProgram::GetSlackVariable(uint64_t a1, int a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 472);
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  else
    return (v2 + a2);
}

void operations_research::glop::LinearProgram::AddSlackVariablesWhereNecessary(operations_research::glop::LinearProgram *this, int a2, char *a3, __n128 a4)
{
  int v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  int v19;
  double *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v30;
  double v31;
  double v32;
  _BYTE *v33;
  int NewSlackVariable;
  std::string __p;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[2];
  _BYTE v40[32];
  _QWORD v41[7];

  v41[6] = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 441))
  {
    operations_research::glop::SparseMatrix::CleanUp(this, a4);
    *(_WORD *)((char *)this + 441) = 1;
    v6 = *((_DWORD *)this + 6);
    v37 = 0;
    v38 = 0;
    v36 = 0;
    if (v6)
      goto LABEL_3;
LABEL_13:
    v9 = 0;
    if ((a2 & 1) == 0)
    {
      v25 = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
      goto LABEL_47;
    }
    goto LABEL_14;
  }
  v6 = *((_DWORD *)this + 6);
  v37 = 0;
  v38 = 0;
  v36 = 0;
  if (!v6)
    goto LABEL_13;
LABEL_3:
  if (v6 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v7 = (unint64_t)(v6 - 1) >> 6;
  v8 = operator new(8 * (v7 + 1));
  v9 = v8;
  v37 = v6;
  v38 = v7 + 1;
  v36 = v8;
  if (v6 >= 0x41)
    v10 = (unint64_t)(v6 - 1) >> 6;
  else
    v10 = 0;
  v8[v10] = 0;
  v11 = (unint64_t)v6 >> 6;
  if (!a2)
  {
    if (v6 >= 0x40)
      bzero(v8, 8 * v11);
    if ((v6 & 0x3F) != 0)
      v9[v11] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F));
    v25 = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
LABEL_34:
    v26 = 0;
    do
    {
      v27 = *((_DWORD *)this + 118);
      if (v27 == -1)
        v28 = -1;
      else
        v28 = v26 + v27;
      if (v28 == -1 || v28 >= v25)
      {
        v30 = *(_QWORD *)((char *)v9 + (((unint64_t)v26 >> 3) & 0x1FFFFFFFFFFFFFF8));
        v31 = *(double *)(*((_QWORD *)this + 11) + 8 * v26);
        v32 = *(double *)(*((_QWORD *)this + 8) + 8 * v26);
        v41[0] = "s";
        v41[1] = 1;
        v33 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v26, v40, a3);
        v39[0] = v40;
        v39[1] = v33 - v40;
        absl::lts_2020_02_25::StrCat((uint64_t)v41, (uint64_t)v39, &__p);
        NewSlackVariable = operations_research::glop::LinearProgram::CreateNewSlackVariable((uint64_t)this, (v30 & (1 << v26)) != 0, (uint64_t)&__p, -v31, -v32);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        operations_research::glop::LinearProgram::SetCoefficient((uint64_t)this, v26, NewSlackVariable, 1.0);
        operations_research::glop::LinearProgram::ResizeRowsIfNeeded((uint64_t)this, v26);
        *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v26) = 0;
        *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v26) = 0;
        v6 = *((_DWORD *)this + 6);
      }
      ++v26;
    }
    while (v26 < v6);
    goto LABEL_47;
  }
  if (v6 >= 0x40)
    memset(v8, 255, 8 * v11);
  if ((v6 & 0x3F) != 0)
    v9[v11] |= 0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F);
LABEL_14:
  v12 = *(_QWORD *)this;
  if ((int)(-1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4)) >= 1)
  {
    v13 = 0;
    v14 = *((_QWORD *)this + 29);
    v15 = -1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
    do
    {
      v16 = (_QWORD *)(v12 + 48 * v13);
      v17 = v16[1];
      if (v17 >= 1)
      {
        v18 = (int *)v16[3];
        if ((*(_DWORD *)(v14 + 4 * v13) - 3) >= 0xFFFFFFFE)
        {
          v20 = (double *)v16[4];
          do
          {
            while (1)
            {
              v21 = *v18++;
              v22 = (unint64_t)v21 >> 6;
              v23 = 1 << v21;
              v24 = v9[v22];
              if (((1 << v21) & v24) != 0 && round(*v20) == *v20)
                break;
              v9[v22] = v24 & ~v23;
              ++v20;
              if (!--v17)
                goto LABEL_16;
            }
            v9[v22] = v23 | v24;
            ++v20;
            --v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v19 = *v18++;
            *(_QWORD *)((char *)v9 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
            --v17;
          }
          while (v17);
        }
      }
LABEL_16:
      ++v13;
    }
    while (v13 != v15);
  }
  v25 = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  if (v6 >= 1)
    goto LABEL_34;
LABEL_47:
  *(_WORD *)((char *)this + 441) = 1;
  if (*((_DWORD *)this + 118) == -1)
    *((_DWORD *)this + 118) = v25;
  if (v9)
    operator delete(v9);
}

void sub_22DA21E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
  {
    operator delete(__p);
    operator delete(v15);
    _Unwind_Resume(a1);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void operations_research::glop::LinearProgram::ScaleObjective(operations_research::glop::LinearProgram *this)
{
  float64x2_t *v1;
  double *v2;
  double v3;
  double v4;
  double *v5;
  uint64_t v6;
  double v8;
  double v10;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t v19;
  double *v20;
  uint64_t v21;
  double v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _BYTE v27[16];

  v1 = (float64x2_t *)*((_QWORD *)this + 17);
  v2 = (double *)*((_QWORD *)this + 18);
  if (v1 == (float64x2_t *)v2)
  {
    v4 = INFINITY;
    v3 = 0.0;
  }
  else
  {
    v3 = 0.0;
    v4 = INFINITY;
    v5 = (double *)*((_QWORD *)this + 17);
    do
    {
      v6 = *(_QWORD *)v5 & 0x7FFFFFFFFFFFFFFFLL;
      if (v6 != 0x7FF0000000000000 && v6 != 0)
      {
        v8 = fabs(*v5);
        if (v8 < v4)
          v4 = v8;
        if (v3 < v8)
          v3 = v8;
      }
      ++v5;
    }
    while (v5 != v2);
  }
  if (v3 >= 1.0 || v3 <= 0.0)
    v10 = 1.0;
  else
    v10 = v3;
  if (v4 < INFINITY && v4 > 1.0)
    v10 = v4;
  if (v10 != 1.0)
  {
    v12 = -1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
    if (v12 >= 1)
    {
      v13 = -1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
      if (v13 >= 4)
      {
        v15 = v12 & 3;
        v14 = v13 - v15;
        v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
        v17 = v1 + 1;
        v18 = v13 - v15;
        do
        {
          v19 = vdivq_f64(*v17, v16);
          v17[-1] = vdivq_f64(v17[-1], v16);
          *v17 = v19;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (!v15)
          goto LABEL_34;
      }
      else
      {
        v14 = 0;
      }
      v20 = &v1->f64[v14];
      v21 = v13 - v14;
      do
      {
        *v20 = *v20 / v10;
        ++v20;
        --v21;
      }
      while (v21);
    }
LABEL_34:
    v22 = v10 * *((double *)this + 54);
    *((double *)this + 53) = *((double *)this + 53) / v10;
    *((double *)this + 54) = v22;
  }
  if (*operations_research::glop::LinearProgram::ScaleObjective(void)::vlocal__ >= 1
    && (operations_research::glop::LinearProgram::ScaleObjective(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::glop::LinearProgram::ScaleObjective(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/lp_data/lp_data.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v27, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_data.cc", 1150);
    v23 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Objective magnitude range is [", 30);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] (dividing by ", 15);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)").", 2);
    google::LogMessage::~LogMessage((google::LogMessage *)v27);
  }
}

void sub_22DA220B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

double operations_research::glop::LinearProgram::ScaleBounds(operations_research::glop::LinearProgram *this)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  double v15;
  double *v16;
  double *v17;
  double *v18;
  uint64_t v19;
  double v21;
  double *v22;
  double *v23;
  double *v24;
  uint64_t v25;
  double v27;
  double v29;
  double v31;
  double v32;
  int *v33;
  uint64_t i;
  double v35;
  double v36;
  double v37;
  int v38;
  double v39;
  _BOOL4 v40;
  double v41;
  uint64_t v44;
  double v45;
  double v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _BYTE v52[16];

  v2 = (double *)*((_QWORD *)this + 20);
  v3 = (double *)*((_QWORD *)this + 21);
  v4 = 0.0;
  if (v2 == v3)
  {
    v5 = INFINITY;
  }
  else
  {
    v5 = INFINITY;
    v6 = (double *)*((_QWORD *)this + 20);
    do
    {
      v7 = *(_QWORD *)v6 & 0x7FFFFFFFFFFFFFFFLL;
      if (v7 != 0x7FF0000000000000 && v7 != 0)
      {
        v9 = fabs(*v6);
        if (v9 < v5)
          v5 = v9;
        if (v4 < v9)
          v4 = v9;
      }
      ++v6;
    }
    while (v6 != v3);
  }
  v10 = (double *)*((_QWORD *)this + 23);
  v11 = (double *)*((_QWORD *)this + 24);
  if (v10 != v11)
  {
    v12 = (double *)*((_QWORD *)this + 23);
    do
    {
      v13 = *(_QWORD *)v12 & 0x7FFFFFFFFFFFFFFFLL;
      if (v13 != 0x7FF0000000000000 && v13 != 0)
      {
        v15 = fabs(*v12);
        if (v15 < v5)
          v5 = v15;
        if (v4 < v15)
          v4 = v15;
      }
      ++v12;
    }
    while (v12 != v11);
  }
  v16 = (double *)*((_QWORD *)this + 8);
  v17 = (double *)*((_QWORD *)this + 9);
  if (v16 != v17)
  {
    v18 = (double *)*((_QWORD *)this + 8);
    do
    {
      v19 = *(_QWORD *)v18 & 0x7FFFFFFFFFFFFFFFLL;
      if (v19 != 0x7FF0000000000000 && v19 != 0)
      {
        v21 = fabs(*v18);
        if (v21 < v5)
          v5 = v21;
        if (v4 < v21)
          v4 = v21;
      }
      ++v18;
    }
    while (v18 != v17);
  }
  v22 = (double *)*((_QWORD *)this + 11);
  v23 = (double *)*((_QWORD *)this + 12);
  if (v22 != v23)
  {
    v24 = (double *)*((_QWORD *)this + 11);
    do
    {
      v25 = *(_QWORD *)v24 & 0x7FFFFFFFFFFFFFFFLL;
      if (v25 != 0x7FF0000000000000 && v25 != 0)
      {
        v27 = fabs(*v24);
        if (v27 < v5)
          v5 = v27;
        if (v4 < v27)
          v4 = v27;
      }
      ++v24;
    }
    while (v24 != v23);
  }
  if (v4 >= 1.0 || v4 <= 0.0)
    v29 = 1.0;
  else
    v29 = v4;
  if (v5 >= INFINITY || v5 <= 1.0)
    v31 = v29;
  else
    v31 = v5;
  if (v31 != 1.0)
  {
    v32 = v31 * *((double *)this + 54);
    *((double *)this + 53) = *((double *)this + 53) / v31;
    *((double *)this + 54) = v32;
    if ((int)(-1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4)) >= 1)
    {
      v33 = (int *)*((_QWORD *)this + 29);
      for (i = -1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4); i; --i)
      {
        v35 = *v2;
        v36 = *v2 / v31;
        v37 = *v10;
        v38 = *v33++;
        v39 = *v10 / v31;
        if ((v38 - 1) > 1)
        {
          *v2 = v36;
          *v10 = v39;
        }
        else
        {
          v40 = v35 < 2.22044605e-16;
          if (v35 <= -1.0)
            v40 = 0;
          if (v37 <= 1.0)
            v40 = 0;
          if (v37 >= 2.0)
            v40 = 0;
          *v2 = v36;
          *v10 = v39;
          v41 = *v2;
          if (v39 <= 1.0 || v41 >= 2.22044605e-16 || v41 <= -1.0)
          {
            if (v40)
              goto LABEL_85;
          }
          else if (v39 < 2.0 != v40)
          {
LABEL_85:
            *((_BYTE *)this + 443) = 0;
          }
        }
        ++v10;
        ++v2;
      }
    }
    if (*((int *)this + 6) >= 1)
    {
      v44 = 0;
      do
      {
        v45 = v16[v44] / v31;
        v46 = v22[v44] / v31;
        operations_research::glop::LinearProgram::ResizeRowsIfNeeded((uint64_t)this, v44);
        v16 = (double *)*((_QWORD *)this + 8);
        v16[v44] = v45;
        v22 = (double *)*((_QWORD *)this + 11);
        v22[v44++] = v46;
      }
      while (v44 < *((int *)this + 6));
    }
  }
  if (*operations_research::glop::LinearProgram::ScaleBounds(void)::vlocal__ >= 1
    && (operations_research::glop::LinearProgram::ScaleBounds(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::glop::LinearProgram::ScaleBounds(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/lp_data/lp_data.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v52, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_data.cc", 1184);
    v47 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Bounds magnitude range is [", 27);
    v48 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
    v49 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"] (dividing bounds by ", 22);
    v50 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)").", 2);
    google::LogMessage::~LogMessage((google::LogMessage *)v52);
  }
  return v31;
}

void sub_22DA2249C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::LinearProgram::IsInEquationForm(operations_research::glop::LinearProgram *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((unsigned int *)this + 6);
  if ((int)v1 < 1)
  {
LABEL_6:
    if ((_DWORD)v1 == -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4)
                     - *((_DWORD *)this + 118))
      return operations_research::glop::IsRightMostSquareMatrixIdentity((uint64_t)this);
  }
  else
  {
    v2 = 0;
    while (*(double *)(*((_QWORD *)this + 8) + v2) == 0.0 && *(double *)(*((_QWORD *)this + 11) + v2) == 0.0)
    {
      v2 += 8;
      if (8 * v1 == v2)
        goto LABEL_6;
    }
  }
  return 0;
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::ColIndex_tag_,int>>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DA2258C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

absl::lts_2020_02_25::hash_internal::CityHashState *absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous(absl::lts_2020_02_25::hash_internal::CityHashState *a1, absl::lts_2020_02_25::hash_internal *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = (uint64_t)a1;
  if (a3 < 0x11)
  {
    if (a3 < 9)
    {
      if (a3 < 4)
      {
        if (!a3)
          return (absl::lts_2020_02_25::hash_internal::CityHashState *)v3;
        v4 = (*((unsigned __int8 *)a2 + (a3 >> 1)) << ((4 * a3) & 0xF8)) | *(unsigned __int8 *)a2 | (*((unsigned __int8 *)a2 + a3 - 1) << (8 * (a3 - 1)));
      }
      else
      {
        v4 = ((unint64_t)*(unsigned int *)((char *)a2 + a3 - 4) << (8 * a3 - 32)) | *(unsigned int *)a2;
      }
    }
    else
    {
      v4 = *(_QWORD *)((char *)a2 + a3 - 8) >> (-8 * a3);
      v3 = (((unint64_t)(*(_QWORD *)a2 + v3) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (*(_QWORD *)a2 + v3));
    }
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)((((v3 + v4) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v3 + v4)));
  }
  if (a3 < 0x401)
  {
    v4 = absl::lts_2020_02_25::hash_internal::CityHash64(a2, a3);
    return (absl::lts_2020_02_25::hash_internal::CityHashState *)((((v3 + v4) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v3 + v4)));
  }
  return absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64(a1, a2, (char *)a3);
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::string *value;
  std::string *end;
  std::vector<std::string>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  std::string *v13;
  std::string *v14;
  size_t v15;
  std::string *v16;
  __int128 v17;
  std::vector<std::string>::pointer v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v12 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(this->__end_, v12);
      end = (std::string *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v8 = v7 + __n;
    if (v7 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::string *)&v11[24 * v7];
    v14 = (std::string *)&v11[24 * v10];
    v15 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = (std::string *)((char *)v13 + v15);
    if (end == begin)
    {
      this->__begin_ = v13;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v14;
      if (end)
LABEL_24:
        operator delete(end);
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
        v13[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v13[-1].__r_.__value_.__l.__data_ = v17;
        --v13;
        end[-1].__r_.__value_.__l.__size_ = 0;
        end[-1].__r_.__value_.__r.__words[2] = 0;
        end[-1].__r_.__value_.__r.__words[0] = 0;
        --end;
      }
      while (end != begin);
      v18 = this->__begin_;
      end = this->__end_;
      this->__begin_ = v13;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v14;
      if (end != v18)
      {
        do
        {
          if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(end[-1].__r_.__value_.__l.__data_);
          --end;
        }
        while (end != v18);
        end = v18;
      }
      if (end)
        goto LABEL_24;
    }
  }
}

double operations_research::glop::LpScalingHelper::Scale(operations_research::glop::LpScalingHelper *this, float64x2_t **a2)
{
  double v4;
  double result;

  operations_research::glop::SparseMatrixScaler::Clear(this);
  operations_research::glop::SparseMatrixScaler::Init(this, (operations_research::glop::SparseMatrix *)a2);
  operations_research::glop::SparseMatrixScaler::Scale((operations_research::glop::SparseMatrix **)this, 0);
  operations_research::glop::SparseMatrixScaler::ScaleRowVector((uint64_t)this, 0, a2 + 17);
  operations_research::glop::SparseMatrixScaler::ScaleRowVector((uint64_t)this, 1, a2 + 23);
  operations_research::glop::SparseMatrixScaler::ScaleRowVector((uint64_t)this, 1, a2 + 20);
  operations_research::glop::SparseMatrixScaler::ScaleColumnVector((uint64_t)this, 0, a2 + 11);
  operations_research::glop::SparseMatrixScaler::ScaleColumnVector((uint64_t)this, 0, a2 + 8);
  *((_BYTE *)a2 + 442) = 0;
  *((double *)this + 8) = 1.0
                        / operations_research::glop::LinearProgram::ScaleBounds((operations_research::glop::LinearProgram *)a2);
  operations_research::glop::LinearProgram::ScaleObjective((operations_research::glop::LinearProgram *)a2);
  result = 1.0 / v4;
  *((double *)this + 9) = result;
  return result;
}

double operations_research::glop::LpScalingHelper::VariableScalingFactor(uint64_t a1, int a2)
{
  return operations_research::glop::SparseMatrixScaler::ColUnscalingFactor(a1, a2) * *(double *)(a1 + 64);
}

double operations_research::glop::LpScalingHelper::UnscaleVariableValue(uint64_t a1, int a2, double a3)
{
  return a3 / (operations_research::glop::SparseMatrixScaler::ColUnscalingFactor(a1, a2) * *(double *)(a1 + 64));
}

double operations_research::glop::LpScalingHelper::UnscaleReducedCost(uint64_t a1, int a2, double a3)
{
  return operations_research::glop::SparseMatrixScaler::ColUnscalingFactor(a1, a2) * a3 / *(double *)(a1 + 72);
}

double operations_research::glop::LpScalingHelper::UnscaleDualValue(uint64_t a1, int a2, double a3)
{
  return a3 / (operations_research::glop::SparseMatrixScaler::RowUnscalingFactor(a1, a2) * *(double *)(a1 + 72));
}

void operations_research::glop::StringifyRational(operations_research::glop *this@<X0>, double a2@<D0>, double a3@<D1>, char *a4@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[2];
  _BYTE v16[32];
  _QWORD v17[6];
  _QWORD v18[2];
  _BYTE v19[32];
  uint64_t v20;

  v4 = a4;
  v20 = *MEMORY[0x24BDAC8D0];
  if (a2 == INFINITY)
  {
    a4[23] = 3;
    *(_DWORD *)a4 = 6712937;
    return;
  }
  if (a2 == -INFINITY)
  {
    a4[23] = 4;
    strcpy(a4, "-inf");
    return;
  }
  v5 = operations_research::RationalApproximation(this, a2, a3);
  if (v6 != 1)
  {
    v10 = v6;
    v18[0] = v19;
    v18[1] = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v5, v19, v7) - v19;
    v17[0] = "/";
    v17[1] = 1;
    v15[0] = v16;
    v15[1] = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v10, v16, v11) - v16;
    absl::lts_2020_02_25::StrCat((uint64_t)v18, (uint64_t)v17, (uint64_t)v15, (std::string *)v4);
    return;
  }
  v8 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v5, v19, v7);
  v9 = v8 - v19;
  if ((unint64_t)(v8 - v19) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v14 = (char *)operator new(v12 + 1);
    *((_QWORD *)v4 + 1) = v9;
    *((_QWORD *)v4 + 2) = v13 | 0x8000000000000000;
    *(_QWORD *)v4 = v14;
    v4 = v14;
  }
  else
  {
    v4[23] = v9;
    if (v8 == v19)
      goto LABEL_15;
  }
  memcpy(v4, v19, v9);
LABEL_15:
  v4[v9] = 0;
}

void operations_research::glop::Stringify(operations_research::glop *this@<X0>, double a2@<D0>, char *a3@<X8>)
{
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)this)
  {
    operations_research::glop::StringifyRational(this, a2, 2.22044605e-16, a3);
  }
  else
  {
    *(double *)v3 = a2;
    v3[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    absl::lts_2020_02_25::str_format_internal::FormatPack("%.16g", 5, (uint64_t)v3, 1, (uint64_t)a3);
  }
}

void operations_research::glop::StringifyMonomial(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const std::string::value_type *v10;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  void *v19;
  uint64_t v20;
  unsigned __int8 v21;
  std::string __p;
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  double v33;
  BOOL (*v34)(uint64_t, uint64_t, int, char *);
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a4 == 0.0)
  {
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
    return;
  }
  if (a4 > 0.0)
  {
    v32[0] = " + ";
    v32[1] = 3;
    if (a4 == 1.0)
    {
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        __p = *(std::string *)a1;
    }
    else
    {
      if (a2)
      {
        operations_research::glop::StringifyRational((operations_research::glop *)a1, a4, 2.22044605e-16, (char *)&v19);
      }
      else
      {
        v33 = a4;
        v34 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
        absl::lts_2020_02_25::str_format_internal::FormatPack("%.16g", 5, (uint64_t)&v33, 1, (uint64_t)&v19);
      }
      v7 = v21;
      v8 = &v19;
      if ((v21 & 0x80u) != 0)
      {
        v8 = v19;
        v7 = v20;
      }
      v30[0] = v8;
      v30[1] = v7;
      v29[0] = " ";
      v29[1] = 1;
      v9 = *(unsigned __int8 *)(a1 + 23);
      if ((v9 & 0x80u) == 0)
        v10 = (const std::string::value_type *)a1;
      else
        v10 = *(const std::string::value_type **)a1;
      if ((v9 & 0x80u) != 0)
        v9 = *(_QWORD *)(a1 + 8);
      v28[0] = v10;
      v28[1] = v9;
      absl::lts_2020_02_25::StrCat((uint64_t)v30, (uint64_t)v29, (uint64_t)v28, &__p);
    }
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      size = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v31[0] = p_p;
    v31[1] = size;
    absl::lts_2020_02_25::StrCat((uint64_t)v32, (uint64_t)v31, (std::string *)a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (a4 == 1.0)
      return;
LABEL_44:
    if ((char)v21 < 0)
      operator delete(v19);
    return;
  }
  v27[0] = " - ";
  v27[1] = 3;
  if (a4 == -1.0)
  {
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
  }
  else
  {
    if (a2)
    {
      operations_research::glop::StringifyRational((operations_research::glop *)a1, -a4, 2.22044605e-16, (char *)&v19);
    }
    else
    {
      v33 = -a4;
      v34 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
      absl::lts_2020_02_25::str_format_internal::FormatPack("%.16g", 5, (uint64_t)&v33, 1, (uint64_t)&v19);
    }
    v13 = v21;
    v14 = &v19;
    if ((v21 & 0x80u) != 0)
    {
      v14 = v19;
      v13 = v20;
    }
    v25[0] = v14;
    v25[1] = v13;
    v24[0] = " ";
    v24[1] = 1;
    v15 = *(unsigned __int8 *)(a1 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = (const std::string::value_type *)a1;
    else
      v16 = *(const std::string::value_type **)a1;
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(a1 + 8);
    v23[0] = v16;
    v23[1] = v15;
    absl::lts_2020_02_25::StrCat((uint64_t)v25, (uint64_t)v24, (uint64_t)v23, &__p);
  }
  v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v18 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v17 = __p.__r_.__value_.__l.__size_;
    v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v26[0] = v18;
  v26[1] = v17;
  absl::lts_2020_02_25::StrCat((uint64_t)v27, (uint64_t)v26, (std::string *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a4 != -1.0)
    goto LABEL_44;
}

void sub_22DA22F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_22DA22FA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  double v18;

  if (a18 < 0)
    operator delete(__p);
  if (v18 != -1.0)
    JUMPOUT(0x22DA22FDCLL);
  JUMPOUT(0x22DA22FECLL);
}

void operations_research::glop::GetProblemStatusString(int a1@<W0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  const char *v4;
  char *v5;
  _BYTE v6[16];

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "OPTIMAL");
      return;
    case 1:
      *(_BYTE *)(a2 + 23) = 17;
      strcpy((char *)a2, "PRIMAL_INFEASIBLE");
      return;
    case 2:
      v4 = "DUAL_INFEASIBLE";
      goto LABEL_14;
    case 3:
      v5 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_22DCE63A0;
      strcpy(v5, "INFEASIBLE_OR_UNBOUNDED");
      return;
    case 4:
      *(_BYTE *)(a2 + 23) = 16;
      strcpy((char *)a2, "PRIMAL_UNBOUNDED");
      return;
    case 5:
      *(_BYTE *)(a2 + 23) = 14;
      strcpy((char *)a2, "DUAL_UNBOUNDED");
      return;
    case 6:
      *(_BYTE *)(a2 + 23) = 4;
      strcpy((char *)a2, "INIT");
      return;
    case 7:
      v4 = "PRIMAL_FEASIBLE";
      goto LABEL_14;
    case 8:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "DUAL_FEASIBLE");
      return;
    case 9:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "ABNORMAL");
      return;
    case 10:
      v4 = "INVALID_PROBLEM";
LABEL_14:
      *(_BYTE *)(a2 + 23) = 15;
      *(_QWORD *)a2 = *(_QWORD *)v4;
      *(_QWORD *)(a2 + 7) = *(_QWORD *)(v4 + 7);
      *(_BYTE *)(a2 + 15) = 0;
      break;
    case 11:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "IMPRECISE");
      break;
    default:
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_types.cc", 48, 2);
      v3 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Invalid ProblemStatus ", 22);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
      *(_BYTE *)(a2 + 23) = 21;
      strcpy((char *)a2, "UNKNOWN ProblemStatus");
      break;
  }
}

void sub_22DA232BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::GetVariableTypeString(int a1@<W0>, uint64_t a2@<X8>)
{
  const char *v3;
  _QWORD *v4;
  char *v5;
  _BYTE v6[16];

  switch(a1)
  {
    case 0:
      v3 = "UNCONSTRAINED";
      goto LABEL_6;
    case 1:
      v3 = "LOWER_BOUNDED";
      goto LABEL_6;
    case 2:
      v3 = "UPPER_BOUNDED";
LABEL_6:
      *(_BYTE *)(a2 + 23) = 13;
      *(_QWORD *)a2 = *(_QWORD *)v3;
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(v3 + 5);
      *(_BYTE *)(a2 + 13) = 0;
      break;
    case 3:
      v5 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_22DCE63A0;
      strcpy(v5, "UPPER_AND_LOWER_BOUNDED");
      break;
    case 4:
      *(_BYTE *)(a2 + 23) = 14;
      strcpy((char *)a2, "FIXED_VARIABLE");
      break;
    default:
      google::LogMessage::LogMessage((google::LogMessage *)v6, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_types.cc", 67, 2);
      v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Invalid VariableType ", 21);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v6);
      *(_BYTE *)(a2 + 23) = 20;
      strcpy((char *)a2, "UNKNOWN VariableType");
      break;
  }
}

void sub_22DA23450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::GetVariableStatusString(int a1@<W0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  const char *v4;
  _BYTE v5[16];

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 5;
      strcpy((char *)a2, "BASIC");
      break;
    case 1:
      *(_BYTE *)(a2 + 23) = 11;
      strcpy((char *)a2, "FIXED_VALUE");
      break;
    case 2:
      v4 = "AT_LOWER_BOUND";
      goto LABEL_7;
    case 3:
      v4 = "AT_UPPER_BOUND";
LABEL_7:
      *(_BYTE *)(a2 + 23) = 14;
      *(_QWORD *)a2 = *(_QWORD *)v4;
      *(_QWORD *)(a2 + 6) = *(_QWORD *)(v4 + 6);
      *(_BYTE *)(a2 + 14) = 0;
      break;
    case 4:
      *(_BYTE *)(a2 + 23) = 4;
      strcpy((char *)a2, "FREE");
      break;
    default:
      google::LogMessage::LogMessage((google::LogMessage *)v5, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_types.cc", 86, 2);
      v3 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Invalid VariableStatus ", 23);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)v5);
      strcpy((char *)a2, "UNKNOWN VariableStatus");
      *(_BYTE *)(a2 + 23) = 22;
      break;
  }
}

void sub_22DA235E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::VariableToConstraintStatus(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE v4[16];

  v1 = a1;
  if (a1 >= 5)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v4, (google::glog_internal_namespace_ *)"./ortools/lp_data/lp_types.cc", 124, 2);
    v2 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Invalid VariableStatus ", 23);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v4);
    return 4;
  }
  return v1;
}

void sub_22DA23668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

double operations_research::glop::SquaredNorm(unint64_t *a1)
{
  unint64_t v1;
  float64x2_t *v2;
  unint64_t v3;
  double result;
  float64x2_t *v5;
  unint64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  unint64_t v9;
  double *v10;
  double v11;

  v1 = *a1;
  if ((uint64_t)*a1 < 1)
    return 0.0;
  v2 = (float64x2_t *)a1[2];
  if (v1 < 4)
  {
    v3 = 0;
    result = 0.0;
LABEL_8:
    v9 = v1 - v3;
    v10 = &v2->f64[v3];
    do
    {
      v11 = *v10++;
      result = result + v11 * v11;
      --v9;
    }
    while (v9);
    return result;
  }
  v3 = v1 & 0xFFFFFFFFFFFFFFFCLL;
  v5 = v2 + 1;
  result = 0.0;
  v6 = v1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v7 = vmulq_f64(v5[-1], v5[-1]);
    v8 = vmulq_f64(*v5, *v5);
    result = result + v7.f64[0] + v7.f64[1] + v8.f64[0] + v8.f64[1];
    v5 += 2;
    v6 -= 4;
  }
  while (v6);
  if (v1 != v3)
    goto LABEL_8;
  return result;
}

double operations_research::glop::PreciseSquaredNorm(operations_research::glop *this, const operations_research::glop::ScatteredColumn *a2)
{
  int *v2;
  int *v3;
  double *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double result;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v2 = (int *)*((_QWORD *)this + 4);
  v3 = (int *)*((_QWORD *)this + 5);
  if (v2 == v3)
  {
    v4 = *(double **)this;
    v5 = (*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3;
  }
  else
  {
    v4 = *(double **)this;
    v5 = (*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3;
    if ((double)(int)v5 * 0.8 >= (double)(unint64_t)(v3 - v2))
    {
      v6 = 0.0;
      v7 = 0.0;
      do
      {
        v8 = *v2++;
        v9 = v7 + v4[v8] * v4[v8];
        result = v6 + v9;
        v7 = v9 + v6 - (v6 + v9);
        v6 = result;
      }
      while (v2 != v3);
      return result;
    }
  }
  if ((int)v5 < 1)
    return 0.0;
  v11 = v5;
  v12 = 0.0;
  v13 = 0.0;
  do
  {
    v14 = *v4++;
    v15 = v13 + v14 * v14;
    result = v12 + v15;
    v13 = v15 + v12 - (v12 + v15);
    v12 = result;
    --v11;
  }
  while (v11);
  return result;
}

double operations_research::glop::PreciseSquaredNorm(uint64_t a1)
{
  double *v1;
  unint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;

  v1 = *(double **)a1;
  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((int)(v2 >> 3) < 1)
    return 0.0;
  v3 = (v2 >> 3);
  v4 = 0.0;
  v5 = 0.0;
  do
  {
    v6 = *v1++;
    v7 = v5 + v6 * v6;
    result = v4 + v7;
    v5 = v7 + v4 - (v4 + v7);
    v4 = result;
    --v3;
  }
  while (v3);
  return result;
}

double operations_research::glop::SquaredNorm(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  int v4;
  double result;
  unsigned int v6;
  signed int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const double *v11;
  unint64_t v12;
  const double *v13;
  double *v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double *v28;
  double v29;
  float64x2x4_t v30;
  float64x2x4_t v31;

  v1 = *a1;
  v2 = (unint64_t)(a1[1] - *a1) >> 3;
  v3 = v2 + 3;
  if ((v2 + 3) >= 7)
  {
    if ((v2 & 0x80000000) == 0)
      v3 = (unint64_t)(a1[1] - *a1) >> 3;
    v6 = v3 >> 2;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    v8 = v7;
    if (v7 >= 4)
    {
      v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      v9 = 4 * (v8 & 0xFFFFFFFFFFFFFFFCLL);
      v11 = (const double *)(v1 + 64);
      result = 0.0;
      v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v13 = v11 - 8;
        v30 = vld4q_f64(v13);
        v31 = vld4q_f64(v11);
        v30.val[0] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v30.val[0], v30.val[0]), vmulq_f64(v30.val[1], v30.val[1])), vmulq_f64(v30.val[2], v30.val[2])), vmulq_f64(v30.val[3], v30.val[3]));
        v30.val[1] = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v31.val[0], v31.val[0]), vmulq_f64(v31.val[1], v31.val[1])), vmulq_f64(v31.val[2], v31.val[2])), vmulq_f64(v31.val[3], v31.val[3]));
        result = result + v30.val[0].f64[0] + v30.val[0].f64[1] + v30.val[1].f64[0] + v30.val[1].f64[1];
        v11 += 16;
        v12 -= 4;
      }
      while (v12);
      if (v10 == v8)
      {
LABEL_16:
        v4 = 4 * v8;
        if (v4 >= (int)v2)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v9 = 0;
      v10 = 0;
      result = 0.0;
    }
    v14 = (double *)(v1 + 8 * v9 + 16);
    v15 = v8 - v10;
    do
    {
      v16 = *(v14 - 2) * *(v14 - 2) + *(v14 - 1) * *(v14 - 1);
      v17 = *v14;
      v18 = v14[1];
      v14 += 4;
      result = result + v16 + v17 * v17 + v18 * v18;
      --v15;
    }
    while (v15);
    goto LABEL_16;
  }
  v4 = 0;
  result = 0.0;
  if ((int)v2 <= 0)
    return result;
LABEL_17:
  v19 = v4;
  v20 = (~v4 + v2);
  if (v20 < 3)
  {
    v21 = v19;
LABEL_22:
    v28 = (double *)(v1 + 8 * v21);
    do
    {
      v29 = *v28++;
      result = result + v29 * v29;
      LODWORD(v21) = v21 + 1;
    }
    while ((int)v21 < (int)v2);
    return result;
  }
  v22 = v20 + 1;
  v23 = (v20 + 1) & 0x1FFFFFFFCLL;
  v21 = v23 + v19;
  v24 = (float64x2_t *)(v1 + 8 * v19 + 16);
  v25 = v23;
  do
  {
    v26 = vmulq_f64(v24[-1], v24[-1]);
    v27 = vmulq_f64(*v24, *v24);
    result = result + v26.f64[0] + v26.f64[1] + v27.f64[0] + v27.f64[1];
    v24 += 2;
    v25 -= 4;
  }
  while (v25);
  if (v22 != v23)
    goto LABEL_22;
  return result;
}

double operations_research::glop::InfinityNorm(uint64_t a1)
{
  double *v1;
  unint64_t v2;
  uint64_t v3;
  double result;
  double v5;
  double v6;

  v1 = *(double **)a1;
  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((int)(v2 >> 3) < 1)
    return 0.0;
  v3 = (v2 >> 3);
  result = 0.0;
  do
  {
    v5 = *v1++;
    v6 = fabs(v5);
    if (result < v6)
      result = v6;
    --v3;
  }
  while (v3);
  return result;
}

{
  uint64_t v1;
  double *v2;
  double result;
  double v4;
  double v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 < 1)
    return 0.0;
  v2 = *(double **)(a1 + 32);
  result = 0.0;
  do
  {
    v4 = *v2++;
    v5 = fabs(v4);
    if (result < v5)
      result = v5;
    --v1;
  }
  while (v1);
  return result;
}

double operations_research::glop::InfinityNorm(uint64_t *a1)
{
  uint64_t v1;
  double *v2;
  double result;
  double v4;
  double v5;

  v1 = *a1;
  if (*a1 < 1)
    return 0.0;
  v2 = (double *)a1[2];
  result = 0.0;
  do
  {
    v4 = *v2++;
    v5 = fabs(v4);
    if (result < v5)
      result = v5;
    --v1;
  }
  while (v1);
  return result;
}

double operations_research::glop::RestrictedInfinityNorm(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v3;
  int *v4;
  double *v5;
  double result;
  uint64_t v7;
  int v8;
  int v9;
  double v10;

  v3 = *a1;
  if (*a1 < 1)
    return 0.0;
  v4 = (int *)a1[1];
  v5 = (double *)a1[2];
  result = 0.0;
  v7 = *a2;
  do
  {
    v9 = *v4++;
    v8 = v9;
    if (((*(_QWORD *)(v7 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    {
      v10 = fabs(*v5);
      if (v10 > result)
      {
        *a3 = v8;
        result = v10;
      }
    }
    ++v5;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t *operations_research::glop::SetSupportToFalse(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int *v3;
  double *v4;

  v2 = *result;
  if (*result >= 1)
  {
    v3 = (int *)result[1];
    v4 = (double *)result[2];
    do
    {
      if (*v4 != 0.0)
        *(_QWORD *)(*a2 + (((unint64_t)*v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << *v3);
      ++v4;
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

BOOL operations_research::glop::IsDominated(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;

  v2 = *a1;
  if (*a1 < 1)
    return 1;
  v3 = (int *)a1[1];
  v4 = (double *)a1[2];
  if (fabs(*v4) > *(double *)(*a2 + 8 * *v3))
    return 0;
  v5 = 1;
  do
  {
    v6 = v5;
    if (v2 == v5)
      break;
    v7 = fabs(v4[v5]);
    v8 = *(double *)(*a2 + 8 * v3[v5++]);
  }
  while (v7 <= v8);
  return v6 >= v2;
}

double operations_research::glop::SparseMatrixScaler::SparseMatrixScaler(operations_research::glop::SparseMatrixScaler *this)
{
  double result;

  *(_QWORD *)this = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return result;
}

void operations_research::glop::SparseMatrixScaler::Init(operations_research::glop::SparseMatrixScaler *this, operations_research::glop::SparseMatrix *a2)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = a2;
  v3 = *((int *)a2 + 6);
  v13 = 0x3FF0000000000000;
  v6 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  v4 = (char *)this + 16;
  v7 = (v5 - v6) >> 3;
  v8 = v3 >= v7;
  v9 = v3 - v7;
  if (v9 != 0 && v8)
  {
    std::vector<double>::__append((uint64_t)v4, v9, &v13);
    a2 = *(operations_research::glop::SparseMatrix **)this;
  }
  else if (!v8)
  {
    *((_QWORD *)this + 3) = v6 + 8 * v3;
  }
  v10 = -1431655765 * ((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  v13 = 0x3FF0000000000000;
  v11 = *((_QWORD *)this + 5);
  v12 = (*((_QWORD *)this + 6) - v11) >> 3;
  if (v10 <= v12)
  {
    if (v10 < v12)
      *((_QWORD *)this + 6) = v11 + 8 * v10;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 40, v10 - v12, &v13);
  }
}

_QWORD *operations_research::glop::SparseMatrixScaler::Clear(_QWORD *this)
{
  *this = 0;
  this[3] = this[2];
  this[6] = this[5];
  return this;
}

double operations_research::glop::SparseMatrixScaler::RowUnscalingFactor(uint64_t a1, int a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  result = 1.0;
  if (a2 < (int)((unint64_t)(*(_QWORD *)(a1 + 24) - v2) >> 3))
    return *(double *)(v2 + 8 * a2);
  return result;
}

double operations_research::glop::SparseMatrixScaler::ColUnscalingFactor(uint64_t a1, int a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 40);
  result = 1.0;
  if (a2 < (int)((unint64_t)(*(_QWORD *)(a1 + 48) - v2) >> 3))
    return *(double *)(v2 + 8 * a2);
  return result;
}

unint64_t operations_research::glop::SparseMatrixScaler::DebugInformationString@<X0>(operations_research::glop::SparseMatrix **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;
  double *v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  double *v25;
  double v26;
  double v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  double *v35;
  double *v37;
  double v40;
  double v41;
  double *v42;
  double *v43;
  double v44;
  double v45;
  double *v46;
  double v47;
  double v48;
  double v50;
  double v51;
  _QWORD v52[17];

  v52[16] = *MEMORY[0x24BDAC8D0];
  v50 = 0.0;
  v51 = 0.0;
  operations_research::glop::SparseMatrix::ComputeMinAndMaxMagnitudes(*this, &v50, &v51);
  v4 = *(_QWORD *)*this;
  if ((int)(-1431655765 * ((*((_QWORD *)*this + 1) - v4) >> 4)) >= 1)
  {
    v5 = 0;
    v6 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
    do
    {
      v9 = v4 + 48 * v5;
      v10 = *(_QWORD *)(v9 + 8);
      if (v10 >= 1)
      {
        v11 = *(double **)(v9 + 32);
        do
        {
          v12 = *v11++;
          v13 = fabs(v12);
          v14 = v6 + v12 * v12;
          v15 = v12 == 0.0;
          if (v12 != 0.0)
            v8 = v8 + 1.0;
          v16 = -0.0;
          if (!v15)
            v16 = v13;
          v7 = v7 + v16;
          if (!v15)
            v6 = v14;
          --v10;
        }
        while (v10);
      }
      ++v5;
    }
    while (v5 != -1431655765 * ((*((_QWORD *)*this + 1) - v4) >> 4));
    if (v8 != 0.0)
    {
      v17 = (v6 - v7 * v7 / v8) / v8;
      v18 = (double *)this[2];
      v19 = (double *)this[3];
      if (v18 != v19)
        goto LABEL_16;
LABEL_38:
      v24 = v18;
      v32 = v50;
      v31 = v51;
      v33 = (double *)this[5];
      v34 = (double *)this[6];
      v35 = v33 + 1;
      if (v33 == v34 || v35 == v34)
        goto LABEL_30;
      goto LABEL_42;
    }
  }
  v17 = 0.0;
  v18 = (double *)this[2];
  v19 = (double *)this[3];
  if (v18 == v19)
    goto LABEL_38;
LABEL_16:
  v20 = v18 + 1;
  if (v18 + 1 != v19)
  {
    v21 = *v18;
    v22 = *v18;
    v23 = v18 + 1;
    v24 = v18;
    v25 = v18 + 1;
    do
    {
      v26 = *v25++;
      v27 = v26;
      if (v26 < v22)
      {
        v22 = v27;
        v24 = v23;
      }
      v23 = v25;
    }
    while (v25 != v19);
    v28 = v18 + 1;
    do
    {
      v29 = *v28++;
      v30 = v29;
      if (v21 < v29)
      {
        v21 = v30;
        v18 = v20;
      }
      v20 = v28;
    }
    while (v28 != v19);
    v32 = v50;
    v31 = v51;
    v33 = (double *)this[5];
    v34 = (double *)this[6];
    v35 = v33 + 1;
    if (v33 != v34 && v35 != v34)
      goto LABEL_42;
LABEL_30:
    v37 = v33;
    goto LABEL_50;
  }
  v24 = v18;
  v32 = v50;
  v31 = v51;
  v33 = (double *)this[5];
  v34 = (double *)this[6];
  v35 = v33 + 1;
  if (v33 == v34 || v35 == v34)
    goto LABEL_30;
LABEL_42:
  v40 = *v33;
  v41 = *v33;
  v42 = v35;
  v37 = v33;
  v43 = v35;
  do
  {
    v44 = *v43++;
    v45 = v44;
    if (v44 < v41)
    {
      v41 = v45;
      v37 = v42;
    }
    v42 = v43;
  }
  while (v43 != v34);
  v46 = v35;
  do
  {
    v47 = *v46++;
    v48 = v47;
    if (v40 < v47)
    {
      v40 = v48;
      v33 = v35;
    }
    v35 = v46;
  }
  while (v46 != v34);
LABEL_50:
  *(double *)v52 = v32;
  v52[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[2] = v31;
  v52[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[4] = v31 / v32;
  v52[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[6] = v17;
  v52[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[8] = *v24;
  v52[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[10] = *v18;
  v52[11] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[12] = *v37;
  v52[13] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v52[14] = *v33;
  v52[15] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  return absl::lts_2020_02_25::str_format_internal::FormatPack("Min magnitude = %g, max magnitude = %g\nDynamic range = %g\nVariance = %g\nMinimum row scale = %g, maximum row scale = %g\nMinimum col scale = %g, maximum col scale = %g\n", 166, (uint64_t)v52, 8, a2);
}

void operations_research::glop::SparseMatrixScaler::Scale(operations_research::glop::SparseMatrix **a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *p_p;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  int *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float64x2_t *v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t *v47;
  unint64_t v48;
  float64x2_t v49;
  uint64_t v50;
  double *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  void *__p;
  void *v59;
  uint64_t v60;
  unsigned __int8 v61;
  _BYTE v62[16];
  double v63;
  double v64;

  v63 = 0.0;
  v64 = 0.0;
  operations_research::glop::SparseMatrix::ComputeMinAndMaxMagnitudes(*a1, &v63, &v64);
  if (v63 == 0.0)
    return;
  if (*_MergedGlobals_2[0] >= 1
    && (_MergedGlobals_2[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_2, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v62, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 104);
    v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v62);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Before scaling:\n", 16);
    operations_research::glop::SparseMatrixScaler::DebugInformationString(a1, (uint64_t)&__p);
    if (v60 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v60 >= 0)
      v7 = HIBYTE(v60);
    else
      v7 = (uint64_t)v59;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, v7);
    if (SHIBYTE(v60) < 0)
      operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)v62);
  }
  if (a2 != 2)
    goto LABEL_28;
  operations_research::glop::SparseMatrixScaler::LPScale(a1, &__p);
  if (!(_DWORD)__p)
  {
    if ((char)v61 < 0)
      operator delete(v59);
    return;
  }
  if (*off_254079328[0] >= 1
    && (off_254079328[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079328, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v62, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 111);
    v8 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v62);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Error with LP scaling: ", 23);
    if ((v61 & 0x80u) == 0)
      v10 = &v59;
    else
      v10 = v59;
    if ((v61 & 0x80u) == 0)
      v11 = v61;
    else
      v11 = v60;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    google::LogMessage::~LogMessage((google::LogMessage *)v62);
  }
  if ((char)v61 < 0)
  {
    operator delete(v59);
    if (v64 / v63 < 1.0e20)
      goto LABEL_29;
  }
  else
  {
LABEL_28:
    if (v64 / v63 < 1.0e20)
    {
LABEL_29:
      v12 = 0;
      while (1)
      {
        v13 = operations_research::glop::SparseMatrixScaler::ScaleRowsGeometrically((operations_research::glop::SparseMatrixScaler *)a1);
        v14 = operations_research::glop::SparseMatrixScaler::ScaleColumnsGeometrically((uint64_t **)a1);
        v15 = *(_QWORD *)*a1;
        if ((int)(-1431655765 * ((*((_QWORD *)*a1 + 1) - v15) >> 4)) < 1)
        {
          v28 = 0.0;
          v29 = off_254079330[0];
          if (*off_254079330[0] >= 1)
            goto LABEL_49;
        }
        else
        {
          v16 = 0;
          v17 = 0.0;
          v18 = 0.0;
          v19 = 0.0;
          do
          {
            v20 = v15 + 48 * v16;
            v21 = *(_QWORD *)(v20 + 8);
            if (v21 >= 1)
            {
              v22 = *(double **)(v20 + 32);
              do
              {
                v23 = *v22++;
                v24 = fabs(v23);
                v25 = v17 + v23 * v23;
                v26 = v23 == 0.0;
                if (v23 != 0.0)
                  v19 = v19 + 1.0;
                v27 = -0.0;
                if (!v26)
                  v27 = v24;
                v18 = v18 + v27;
                if (!v26)
                  v17 = v25;
                --v21;
              }
              while (v21);
            }
            ++v16;
          }
          while (v16 != -1431655765 * ((*((_QWORD *)*a1 + 1) - v15) >> 4));
          v28 = 0.0;
          if (v19 == 0.0)
          {
            v29 = off_254079330[0];
            if (*off_254079330[0] >= 1)
              goto LABEL_49;
          }
          else
          {
            v28 = (v17 - v18 * v18 / v19) / v19;
            v29 = off_254079330[0];
            if (*off_254079330[0] >= 1)
            {
LABEL_49:
              if (v29 != &google::kLogSiteUninitialized
                || google::InitVLOG3__((google *)off_254079330, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1))
              {
                google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 125);
                v30 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Geometric scaling iteration ", 28);
                v31 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)". Rows scaled = ", 16);
                v32 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", columns scaled = ", 19);
                v33 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\n", 1);
                google::LogMessage::~LogMessage((google::LogMessage *)&__p);
              }
            }
          }
        }
        if (*off_254079338[0] >= 1
          && (off_254079338[0] != &google::kLogSiteUninitialized
           || google::InitVLOG3__((google *)off_254079338, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1)))
        {
          google::LogMessage::LogMessage((google::LogMessage *)v62, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 128);
          v34 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v62);
          operations_research::glop::SparseMatrixScaler::DebugInformationString(a1, (uint64_t)&__p);
          if (v60 >= 0)
            v35 = &__p;
          else
            v35 = __p;
          if (v60 >= 0)
            v36 = HIBYTE(v60);
          else
            v36 = (uint64_t)v59;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
          if (SHIBYTE(v60) < 0)
            operator delete(__p);
          google::LogMessage::~LogMessage((google::LogMessage *)v62);
        }
        if (v28 >= 10.0)
        {
          if (v14 | v13)
          {
            if (++v12 != 4)
              continue;
          }
        }
        break;
      }
    }
  }
  operations_research::glop::SparseMatrixScaler::EquilibrateRows((uint64_t **)a1);
  if ((int)(-1431655765 * ((uint64_t)(*((_QWORD *)*a1 + 1) - *(_QWORD *)*a1) >> 4)) >= 1)
  {
    v37 = 0;
    v38 = 0;
    v39 = -1431655765 * ((uint64_t)(*((_QWORD *)*a1 + 1) - *(_QWORD *)*a1) >> 4);
    do
    {
      *(double *)&v40 = operations_research::glop::InfinityNorm(*(_QWORD *)*a1 + 48 * v37);
      if (*(double *)&v40 == 0.0)
        goto LABEL_74;
      *((double *)a1[5] + v37) = *(double *)&v40 * *((double *)a1[5] + v37);
      v41 = *(_QWORD *)*a1;
      if (v41)
      {
        v42 = v41 + 48 * v37;
        v43 = *(_QWORD *)(v42 + 8);
        if (v43 >= 1)
        {
          v44 = *(float64x2_t **)(v42 + 32);
          if ((unint64_t)v43 >= 4)
          {
            v45 = v43 & 0x7FFFFFFFFFFFFFFCLL;
            v46 = (float64x2_t)vdupq_lane_s64(v40, 0);
            v47 = v44 + 1;
            v48 = v43 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v49 = vdivq_f64(*v47, v46);
              v47[-1] = vdivq_f64(v47[-1], v46);
              *v47 = v49;
              v47 += 2;
              v48 -= 4;
            }
            while (v48);
            if (v43 == v45)
              goto LABEL_73;
          }
          else
          {
            v45 = 0;
          }
          v50 = v43 - v45;
          v51 = &v44->f64[v45];
          do
          {
            *v51 = *v51 / *(double *)&v40;
            ++v51;
            --v50;
          }
          while (v50);
        }
      }
LABEL_73:
      ++v38;
LABEL_74:
      ++v37;
    }
    while (v37 != v39);
  }
  if (*off_254079340[0] >= 1
    && (off_254079340[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079340, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 137);
    v52 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Equilibration step: Rows scaled = ", 34);
    v53 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", columns scaled = ", 19);
    v54 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n", 1);
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
  }
  if (*off_254079348[0] >= 1
    && (off_254079348[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079348, (int **)&fLI::FLAGS_v, "./ortools/lp_data/matrix_scaler.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v62, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 139);
    v55 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v62);
    operations_research::glop::SparseMatrixScaler::DebugInformationString(a1, (uint64_t)&__p);
    if (v60 >= 0)
      v56 = &__p;
    else
      v56 = __p;
    if (v60 >= 0)
      v57 = HIBYTE(v60);
    else
      v57 = (uint64_t)v59;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
    if (SHIBYTE(v60) < 0)
      operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)v62);
  }
}

void sub_22DA246F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::SparseMatrixScaler::LPScale@<X0>(operations_research::glop::SparseMatrix **this@<X0>, _DWORD *a2@<X8>)
{
  operations_research::glop::LinearProgram *v4;
  operations_research::glop::RevisedSimplex *v5;
  operations_research::glop::SparseMatrix *v6;
  std::vector<int>::size_type v7;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  unint64_t v10;
  unint64_t v11;
  int NewVariable;
  __n128 v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  int v25;
  int v26;
  double v27;
  int NewConstraint;
  int v29;
  operations_research::glop::RevisedSimplex *v30;
  operations_research::TimeLimit *v31;
  void *v32;
  std::string *v33;
  operations_research::glop::SparseMatrix *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  double VariableValue;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float64x2_t *v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  unint64_t v47;
  float64x2_t v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  operations_research::TimeLimit *v53;
  uint64_t i;
  int v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  operations_research::glop::SparseMatrix *v62;
  int v63;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  int *v69;
  double *v70;
  uint64_t v71;
  _DWORD *v72;
  operations_research::glop::SparseMatrixScaler *v73;
  uint64_t v74;
  uint64_t v75;
  operations_research::TimeLimit *v76[2];
  char *v77;
  int v78;
  __int128 __p;
  std::string::size_type v80;
  std::vector<int> v81;
  std::vector<int> v82;
  operations_research::glop::RevisedSimplex *v83;
  _BYTE v84[296];
  operations_research::glop::LinearProgram *v85;

  v4 = (operations_research::glop::LinearProgram *)operator new();
  operations_research::glop::LinearProgram::LinearProgram(v4);
  v85 = v4;
  operations_research::glop::GlopParameters::GlopParameters((uint64_t)v84, 0);
  v5 = (operations_research::glop::RevisedSimplex *)operator new();
  operations_research::glop::RevisedSimplex::RevisedSimplex(v5);
  v83 = v5;
  operations_research::glop::RevisedSimplex::SetParameters(v5, (const operations_research::glop::GlopParameters *)v84);
  memset(&v82, 0, sizeof(v82));
  memset(&v81, 0, sizeof(v81));
  v6 = *this;
  v7 = *((int *)*this + 6);
  if ((_DWORD)v7)
  {
    std::vector<int>::__append(&v81, v7, operations_research::glop::kInvalidCol);
    v6 = *this;
    begin = v82.__begin_;
    end = v82.__end_;
  }
  else
  {
    begin = 0;
    end = 0;
  }
  v10 = (int)(-1431655765 * ((*((_QWORD *)v6 + 1) - *(_QWORD *)v6) >> 4));
  v11 = end - begin;
  if (v10 <= v11)
  {
    if (v10 < v11)
      v82.__end_ = &begin[v10];
  }
  else
  {
    std::vector<int>::__append(&v82, v10 - v11, operations_research::glop::kInvalidCol);
  }
  NewVariable = operations_research::glop::LinearProgram::CreateNewVariable(v4);
  operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v4, NewVariable, -INFINITY, INFINITY);
  operations_research::glop::LinearProgram::SetObjectiveCoefficient((uint64_t)v4, NewVariable, 1.0);
  operations_research::glop::SparseMatrix::CleanUp(*this, v13);
  if ((int)(-1431655765 * ((uint64_t)(*((_QWORD *)*this + 1) - *(_QWORD *)*this) >> 4)) >= 1)
  {
    v72 = a2;
    v73 = (operations_research::glop::SparseMatrixScaler *)this;
    v16 = 0;
    v74 = -1431655765 * ((uint64_t)(*((_QWORD *)*this + 1) - *(_QWORD *)*this) >> 4);
    do
    {
      v17 = *(_QWORD *)*this;
      v18 = v82.__begin_[v16];
      if (v18 == -1)
      {
        v18 = operations_research::glop::LinearProgram::CreateNewVariable(v4);
        v82.__begin_[v16] = v18;
        v4 = v85;
      }
      v19 = v18;
      operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v4, v18, -INFINITY, INFINITY);
      v20 = (_QWORD *)(v17 + 48 * v16);
      v21 = v20[1];
      if (v21 >= 1)
      {
        v75 = v16;
        v22 = 0;
        v4 = v85;
        do
        {
          v23 = log2(fabs(*(double *)(v20[4] + 8 * v22)));
          v24 = *(int *)(v20[3] + 4 * v22);
          v25 = v81.__begin_[v24];
          if (v25 == -1)
          {
            v25 = operations_research::glop::LinearProgram::CreateNewVariable(v4);
            v81.__begin_[v24] = v25;
          }
          v26 = v25;
          operations_research::glop::LinearProgram::SetVariableBounds((uint64_t)v4, v25, -INFINITY, INFINITY);
          v27 = -v23;
          NewConstraint = operations_research::glop::LinearProgram::CreateNewConstraint(v4);
          operations_research::glop::LinearProgram::SetConstraintBounds((uint64_t)v4, NewConstraint, v27, INFINITY);
          operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v4, NewConstraint, v26, 1.0);
          operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v4, NewConstraint, v19, 1.0);
          operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v4, NewConstraint, NewVariable, 1.0);
          v29 = operations_research::glop::LinearProgram::CreateNewConstraint(v4);
          operations_research::glop::LinearProgram::SetConstraintBounds((uint64_t)v4, v29, -INFINITY, v27);
          operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v4, v29, v26, 1.0);
          operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v4, v29, v19, 1.0);
          operations_research::glop::LinearProgram::SetCoefficient((uint64_t)v4, v29, NewVariable, -1.0);
          ++v22;
        }
        while (v21 != v22);
        this = (operations_research::glop::SparseMatrix **)v73;
        v16 = v75;
      }
      ++v16;
    }
    while (v16 != v74);
    v4 = v85;
    a2 = v72;
  }
  operations_research::glop::LinearProgram::AddSlackVariablesWhereNecessary(v4, 0, v14, v15);
  v30 = v83;
  operations_research::TimeLimit::Infinite(v76);
  operations_research::glop::RevisedSimplex::Solve(v30, v4, v76[0], (uint64_t)&v78);
  v31 = v76[0];
  v76[0] = 0;
  if (v31)
  {
    v32 = (void *)*((_QWORD *)v31 + 5);
    if (v32)
    {
      *((_QWORD *)v31 + 6) = v32;
      operator delete(v32);
    }
    MEMORY[0x22E31DF78](v31, 0x1030C40021678CBLL);
  }
  if (v78)
  {
    *a2 = v78;
    v33 = (std::string *)(a2 + 2);
    if (SHIBYTE(v80) < 0)
    {
      std::string::__init_copy_ctor_external(v33, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    }
    else
    {
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = __p;
      v33->__r_.__value_.__r.__words[2] = v80;
    }
    goto LABEL_63;
  }
  v34 = *this;
  if ((int)(-1431655765 * ((uint64_t)(*((_QWORD *)*this + 1) - *(_QWORD *)*this) >> 4)) >= 1)
  {
    v35 = 0;
    v36 = -1431655765 * ((uint64_t)(*((_QWORD *)*this + 1) - *(_QWORD *)*this) >> 4);
    do
    {
      v37 = v82.__begin_[v35];
      if (v37 == -1)
      {
        v37 = operations_research::glop::LinearProgram::CreateNewVariable(v4);
        v82.__begin_[v35] = v37;
      }
      VariableValue = operations_research::glop::RevisedSimplex::GetVariableValue((uint64_t)v30, v37);
      v39 = exp2(-VariableValue);
      *((double *)this[5] + v35) = v39 * *((double *)this[5] + v35);
      v34 = *this;
      v40 = *(_QWORD *)*this;
      if (!v40)
        goto LABEL_29;
      v41 = v40 + 48 * v35;
      v42 = *(_QWORD *)(v41 + 8);
      if (v42 < 1)
        goto LABEL_29;
      v43 = *(float64x2_t **)(v41 + 32);
      if ((unint64_t)v42 >= 4)
      {
        v44 = v42 & 0x7FFFFFFFFFFFFFFCLL;
        v45 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v39, 0);
        v46 = v43 + 1;
        v47 = v42 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v48 = vdivq_f64(*v46, v45);
          v46[-1] = vdivq_f64(v46[-1], v45);
          *v46 = v48;
          v46 += 2;
          v47 -= 4;
        }
        while (v47);
        if (v42 == v44)
          goto LABEL_29;
      }
      else
      {
        v44 = 0;
      }
      v49 = v42 - v44;
      v50 = &v43->f64[v44];
      do
      {
        *v50 = *v50 / v39;
        ++v50;
        --v49;
      }
      while (v49);
LABEL_29:
      ++v35;
    }
    while (v35 != v36);
  }
  v51 = *((int *)v34 + 6);
  v76[0] = 0;
  v76[1] = 0;
  v77 = 0;
  if ((_DWORD)v51)
  {
    v52 = v51;
    if ((v51 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v53 = (operations_research::TimeLimit *)operator new(8 * v51);
    v76[0] = v53;
    v77 = (char *)v53 + 8 * v51;
    bzero(v53, 8 * v51);
    for (i = 0; i != v52; ++i)
    {
      v55 = v81.__begin_[i];
      if (v55 == -1)
      {
        v55 = operations_research::glop::LinearProgram::CreateNewVariable(v4);
        v81.__begin_[i] = v55;
      }
      v56 = operations_research::glop::RevisedSimplex::GetVariableValue((uint64_t)v30, v55);
      *((long double *)v53 + i) = exp2(-v56);
    }
    v34 = *this;
    v57 = *((unsigned int *)*this + 6);
    if ((int)v57 < 1)
      goto LABEL_56;
    goto LABEL_52;
  }
  v53 = 0;
  v57 = *((unsigned int *)v34 + 6);
  if ((int)v57 >= 1)
  {
LABEL_52:
    v58 = 0;
    v59 = 8 * v57;
    do
    {
      v60 = *(double *)((char *)v53 + v58);
      if (v60 != 1.0)
        *(double *)((char *)this[2] + v58) = v60 * *(double *)((char *)this[2] + v58);
      v58 += 8;
    }
    while (v59 != v58);
  }
LABEL_56:
  v62 = v34;
  v61 = *(_QWORD *)v34;
  v63 = -1431655765 * ((*((_QWORD *)v62 + 1) - v61) >> 4);
  if (v63 >= 1 && v61 != 0)
  {
    v66 = 0;
    do
    {
      v67 = (_QWORD *)(v61 + 48 * v66);
      v68 = v67[1];
      if (v68 >= 1)
      {
        v69 = (int *)v67[3];
        v70 = (double *)v67[4];
        do
        {
          v71 = *v69++;
          *v70 = *v70 / *((double *)v53 + v71);
          ++v70;
          --v68;
        }
        while (v68);
      }
      ++v66;
    }
    while (v66 != v63);
  }
  operations_research::glop::Status::Status((uint64_t)a2);
  if (v53)
    operator delete(v53);
LABEL_63:
  if (SHIBYTE(v80) < 0)
    operator delete((void *)__p);
  if (v81.__begin_)
  {
    v81.__end_ = v81.__begin_;
    operator delete(v81.__begin_);
  }
  if (v82.__begin_)
  {
    v82.__end_ = v82.__begin_;
    operator delete(v82.__begin_);
  }
  if (v30)
  {
    operations_research::glop::RevisedSimplex::~RevisedSimplex(v30);
    MEMORY[0x22E31DF78]();
  }
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)v84);
  operations_research::glop::LinearProgram::~LinearProgram((void **)v4);
  return MEMORY[0x22E31DF78]();
}

void sub_22DA24E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,operations_research::glop::RevisedSimplex *a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  void *v35;

  if (a23 < 0)
  {
    operator delete(__p);
    v34 = a24;
    if (a24)
    {
LABEL_7:
      operator delete(v34);
      v35 = a27;
      if (!a27)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else
  {
    v34 = a24;
    if (a24)
      goto LABEL_7;
  }
  v35 = a27;
  if (!a27)
  {
LABEL_9:
    std::unique_ptr<operations_research::glop::RevisedSimplex>::~unique_ptr[abi:ne180100](&a30);
    operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::GlopParameters *)&a31);
    std::unique_ptr<operations_research::glop::LinearProgram>::~unique_ptr[abi:ne180100]((void ***)(v33 - 112));
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(v35);
  goto LABEL_9;
}

uint64_t operations_research::glop::SparseMatrixScaler::ScaleRowsGeometrically(operations_research::glop::SparseMatrixScaler *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t i;
  _QWORD *v13;
  uint64_t v14;
  int *v15;
  double *v16;
  double v17;
  uint64_t v18;
  double v19;
  char *v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t j;
  _QWORD *v28;
  uint64_t v29;
  int *v30;
  double *v31;
  uint64_t v32;

  v2 = *(_QWORD **)this;
  v3 = *(int *)(*(_QWORD *)this + 24);
  v4 = *(unsigned int *)(*(_QWORD *)this + 24);
  v5 = 8 * v4;
  v6 = 8 * v3;
  if ((_DWORD)v3)
  {
    if ((v3 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(8 * v4);
    bzero(v7, v6);
    v8 = (char *)operator new(8 * v4);
    memset_pattern16(v8, &unk_22DCE6720, v6);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v10 = v2;
  v9 = *v2;
  v11 = -1431655765 * ((v10[1] - v9) >> 4);
  if (v11 >= 1)
  {
    for (i = 0; i != v11; ++i)
    {
      v13 = (_QWORD *)(v9 + 48 * i);
      v14 = v13[1];
      if (v14 >= 1)
      {
        v15 = (int *)v13[3];
        v16 = (double *)v13[4];
        do
        {
          if (*v16 != 0.0)
          {
            v17 = fabs(*v16);
            v18 = 8 * *v15;
            v19 = *(double *)&v7[v18];
            if (v19 < v17)
              v19 = v17;
            *(double *)&v7[8 * *v15] = v19;
            if (v17 >= *(double *)&v8[v18])
              v17 = *(double *)&v8[v18];
            *(double *)&v8[v18] = v17;
          }
          ++v16;
          ++v15;
          --v14;
        }
        while (v14);
      }
    }
  }
  if ((_DWORD)v4)
  {
    if ((v4 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = (char *)operator new(8 * v4);
    bzero(v20, v6);
    v21 = 0;
    do
    {
      v22 = *(double *)&v7[v21];
      v23 = 1.0;
      if (v22 != 0.0)
        v23 = sqrt(v22 * *(double *)&v8[v21]);
      *(double *)&v20[v21] = v23;
      v21 += 8;
    }
    while (v5 != v21);
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = *(double *)&v20[v24];
      if (v26 != 1.0)
      {
        v25 = (v25 + 1);
        *(double *)(*((_QWORD *)this + 2) + v24) = v26 * *(double *)(*((_QWORD *)this + 2) + v24);
      }
      v24 += 8;
    }
    while (v5 != v24);
  }
  else
  {
    v20 = 0;
    v25 = 0;
  }
  if (v11 >= 1 && v9)
  {
    for (j = 0; j != v11; ++j)
    {
      v28 = (_QWORD *)(v9 + 48 * j);
      v29 = v28[1];
      if (v29 >= 1)
      {
        v30 = (int *)v28[3];
        v31 = (double *)v28[4];
        do
        {
          v32 = *v30++;
          *v31 = *v31 / *(double *)&v20[8 * v32];
          ++v31;
          --v29;
        }
        while (v29);
      }
    }
  }
  if (v20)
    operator delete(v20);
  if (v8)
    operator delete(v8);
  if (v7)
    operator delete(v7);
  return v25;
}

void sub_22DA252BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_22DA252D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  void *v14;

  if (v14)
  {
    operator delete(v14);
    if (!v13)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v13)
  {
    goto LABEL_3;
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::SparseMatrixScaler::ScaleColumnsGeometrically(uint64_t **this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t *v16;
  unint64_t v17;
  float64x2_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  BOOL v28;

  v1 = **this;
  if ((int)(-1431655765 * (((*this)[1] - v1) >> 4)) < 1)
    return 0;
  v2 = -1431655765 * (((*this)[1] - v1) >> 4);
  if (v1)
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      v5 = v1 + 48 * v3;
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 < 1)
        goto LABEL_5;
      v7 = 0;
      v8 = *(float64x2_t **)(v5 + 32);
      v9 = 0.0;
      v10 = INFINITY;
      do
      {
        v11 = v8->f64[v7];
        v12 = fabs(v11);
        if (v11 != 0.0 && v12 < v10)
          v10 = v12;
        if (v11 != 0.0 && v9 < v12)
          v9 = v12;
        ++v7;
      }
      while (v6 != v7);
      if (v9 == 0.0)
        goto LABEL_5;
      v13 = sqrt(v10 * v9);
      *(double *)&this[5][v3] = v13 * *(double *)&this[5][v3];
      if ((unint64_t)v6 >= 4)
      {
        v14 = v6 & 0x7FFFFFFFFFFFFFFCLL;
        v15 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0);
        v16 = v8 + 1;
        v17 = v6 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v18 = vdivq_f64(*v16, v15);
          v16[-1] = vdivq_f64(v16[-1], v15);
          *v16 = v18;
          v16 += 2;
          v17 -= 4;
        }
        while (v17);
        if (v6 == v14)
          goto LABEL_4;
      }
      else
      {
        v14 = 0;
      }
      v19 = v6 - v14;
      v20 = &v8->f64[v14];
      do
      {
        *v20 = *v20 / v13;
        ++v20;
        --v19;
      }
      while (v19);
LABEL_4:
      v4 = (v4 + 1);
LABEL_5:
      if (++v3 == v2)
        return v4;
    }
  }
  v4 = 0;
  do
  {
    v22 = *(_QWORD *)(48 * v1 + 8);
    if (v22 >= 1)
    {
      v23 = *(double **)(48 * v1 + 0x20);
      v24 = 0.0;
      v25 = INFINITY;
      do
      {
        v26 = *v23++;
        v27 = fabs(v26);
        v28 = v26 != 0.0;
        if (v26 != 0.0 && v27 < v25)
          v25 = v27;
        if (v28 && v24 < v27)
          v24 = v27;
        --v22;
      }
      while (v22);
      if (v24 != 0.0)
      {
        *(double *)&this[5][v1] = sqrt(v25 * v24) * *(double *)&this[5][v1];
        v4 = (v4 + 1);
      }
    }
    ++v1;
  }
  while (v1 != v2);
  return v4;
}

uint64_t operations_research::glop::SparseMatrixScaler::EquilibrateRows(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int *v11;
  double *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int *v19;
  double *v20;
  uint64_t v21;
  float64x2_t *v23;
  uint64_t v24;
  int32x2_t v25;
  int32x2_t v26;
  uint64_t v27;
  double v28;
  double *v29;
  uint64_t v30;

  v2 = *this;
  v3 = *((int *)*this + 6);
  v4 = *((unsigned int *)*this + 6);
  if ((_DWORD)v3)
  {
    if ((v4 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v5 = (char *)operator new(8 * v4);
    bzero(v5, 8 * v3);
  }
  else
  {
    v5 = 0;
  }
  v6 = *v2;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v2[1] - *v2) >> 4);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    do
    {
      v9 = (_QWORD *)(v6 + 48 * v8);
      v10 = v9[1];
      if (v10 >= 1)
      {
        v11 = (int *)v9[3];
        v12 = (double *)v9[4];
        do
        {
          if (*v12 != 0.0)
          {
            v13 = fabs(*v12);
            if (*(double *)&v5[8 * *v11] >= v13)
              v13 = *(double *)&v5[8 * *v11];
            *(double *)&v5[8 * *v11] = v13;
          }
          ++v12;
          ++v11;
          --v10;
        }
        while (v10);
      }
      ++v8;
    }
    while (v8 != v7);
  }
  if ((int)v3 < 1)
  {
    v15 = 0;
    goto LABEL_19;
  }
  if (v4 >= 4)
  {
    v14 = v4 & 0xFFFFFFFC;
    v23 = (float64x2_t *)(v5 + 16);
    v24 = v14;
    while (1)
    {
      v25 = vmovn_s64(vceqzq_f64(v23[-1]));
      if ((v25.i8[0] & 1) != 0)
      {
        v23[-1].f64[0] = 1.0;
        if ((v25.i8[4] & 1) == 0)
        {
LABEL_34:
          v26 = vmovn_s64(vceqzq_f64(*v23));
          if ((v26.i8[0] & 1) == 0)
            goto LABEL_35;
          goto LABEL_39;
        }
      }
      else if ((v25.i8[4] & 1) == 0)
      {
        goto LABEL_34;
      }
      v23[-1].f64[1] = 1.0;
      v26 = vmovn_s64(vceqzq_f64(*v23));
      if ((v26.i8[0] & 1) == 0)
      {
LABEL_35:
        if ((v26.i8[4] & 1) != 0)
          goto LABEL_40;
        goto LABEL_31;
      }
LABEL_39:
      v23->f64[0] = 1.0;
      if ((v26.i8[4] & 1) != 0)
LABEL_40:
        v23->f64[1] = 1.0;
LABEL_31:
      v23 += 2;
      v24 -= 4;
      if (!v24)
      {
        if (v14 == v4)
          goto LABEL_42;
        goto LABEL_46;
      }
    }
  }
  v14 = 0;
LABEL_46:
  v29 = (double *)&v5[8 * v14];
  v30 = v4 - v14;
  do
  {
    if (*v29 == 0.0)
      *v29 = 1.0;
    ++v29;
    --v30;
  }
  while (v30);
LABEL_42:
  v27 = 0;
  v15 = 0;
  do
  {
    v28 = *(double *)&v5[8 * v27];
    if (v28 != 1.0)
    {
      v15 = (v15 + 1);
      *(double *)&this[2][v27] = v28 * *(double *)&this[2][v27];
    }
    ++v27;
  }
  while (v4 != v27);
LABEL_19:
  if ((int)v7 >= 1 && v6)
  {
    v16 = 0;
    do
    {
      v17 = (_QWORD *)(v6 + 48 * v16);
      v18 = v17[1];
      if (v18 >= 1)
      {
        v19 = (int *)v17[3];
        v20 = (double *)v17[4];
        do
        {
          v21 = *v19++;
          *v20 = *v20 / *(double *)&v5[8 * v21];
          ++v20;
          --v18;
        }
        while (v18);
      }
      ++v16;
    }
    while (v16 != v7);
  }
  if (v5)
    operator delete(v5);
  return v15;
}

float64_t operations_research::glop::SparseMatrixScaler::ScaleRowVector(uint64_t a1, char a2, float64x2_t **a3)
{
  float64x2_t *v3;
  float64x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double *v33;
  double v34;
  _BYTE v36[16];

  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v36, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 146, 2);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v36);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"vector_to_scale", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v36);
    return v13.f64[0];
  }
  v3 = *(float64x2_t **)(a1 + 40);
  v4 = *a3;
  v5 = ((char *)a3[1] - (char *)*a3) >> 3;
  if (v5 >= (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v3) >> 3)
    v5 = (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v3) >> 3;
  if ((a2 & 1) == 0)
  {
    if ((int)v5 < 1)
      return v13.f64[0];
    v17 = v5;
    if (v5 >= 4uLL
      && (v4 < (float64x2_t *)&v3->f64[v5]
        ? (v18 = v3 >= (float64x2_t *)&v4->f64[v5])
        : (v18 = 1),
          v18))
    {
      v19 = v5 & 3;
      v20 = v5 - v19;
      v21 = v3 + 1;
      v22 = v4 + 1;
      v23 = v20;
      do
      {
        v13 = vdivq_f64(v22[-1], v21[-1]);
        v24 = vdivq_f64(*v22, *v21);
        v22[-1] = v13;
        *v22 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      if (!v19)
        return v13.f64[0];
    }
    else
    {
      v20 = 0;
    }
    v30 = v17 - v20;
    v31 = v20;
    v32 = &v4->f64[v31];
    v33 = &v3->f64[v31];
    do
    {
      v34 = *v33++;
      v13.f64[0] = *v32 / v34;
      *v32++ = v13.f64[0];
      --v30;
    }
    while (v30);
    return v13.f64[0];
  }
  if ((int)v5 < 1)
    return v13.f64[0];
  v6 = v5;
  if (v5 < 4uLL
    || (v4 < (float64x2_t *)&v3->f64[v5]
      ? (v7 = v3 >= (float64x2_t *)&v4->f64[v5])
      : (v7 = 1),
        !v7))
  {
    v9 = 0;
LABEL_29:
    v25 = v6 - v9;
    v26 = v9;
    v27 = &v4->f64[v26];
    v28 = &v3->f64[v26];
    do
    {
      v29 = *v28++;
      v13.f64[0] = v29 * *v27;
      *v27++ = v13.f64[0];
      --v25;
    }
    while (v25);
    return v13.f64[0];
  }
  v8 = v5 & 3;
  v9 = v5 - v8;
  v10 = v3 + 1;
  v11 = v4 + 1;
  v12 = v9;
  do
  {
    v13 = vmulq_f64(v10[-1], v11[-1]);
    v14 = vmulq_f64(*v10, *v11);
    v11[-1] = v13;
    *v11 = v14;
    v10 += 2;
    v11 += 2;
    v12 -= 4;
  }
  while (v12);
  if (v8)
    goto LABEL_29;
  return v13.f64[0];
}

void sub_22DA25954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

float64_t operations_research::glop::SparseMatrixScaler::ScaleColumnVector(uint64_t a1, char a2, float64x2_t **a3)
{
  float64x2_t *v3;
  float64x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double *v33;
  double v34;
  _BYTE v36[16];

  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v36, (google::glog_internal_namespace_ *)"./ortools/lp_data/matrix_scaler.cc", 146, 2);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v36);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"vector_to_scale", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v36);
    return v13.f64[0];
  }
  v3 = *(float64x2_t **)(a1 + 16);
  v4 = *a3;
  v5 = ((char *)a3[1] - (char *)*a3) >> 3;
  if (v5 >= (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v3) >> 3)
    v5 = (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v3) >> 3;
  if ((a2 & 1) == 0)
  {
    if ((int)v5 < 1)
      return v13.f64[0];
    v17 = v5;
    if (v5 >= 4uLL
      && (v4 < (float64x2_t *)&v3->f64[v5]
        ? (v18 = v3 >= (float64x2_t *)&v4->f64[v5])
        : (v18 = 1),
          v18))
    {
      v19 = v5 & 3;
      v20 = v5 - v19;
      v21 = v3 + 1;
      v22 = v4 + 1;
      v23 = v20;
      do
      {
        v13 = vdivq_f64(v22[-1], v21[-1]);
        v24 = vdivq_f64(*v22, *v21);
        v22[-1] = v13;
        *v22 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      if (!v19)
        return v13.f64[0];
    }
    else
    {
      v20 = 0;
    }
    v30 = v17 - v20;
    v31 = v20;
    v32 = &v4->f64[v31];
    v33 = &v3->f64[v31];
    do
    {
      v34 = *v33++;
      v13.f64[0] = *v32 / v34;
      *v32++ = v13.f64[0];
      --v30;
    }
    while (v30);
    return v13.f64[0];
  }
  if ((int)v5 < 1)
    return v13.f64[0];
  v6 = v5;
  if (v5 < 4uLL
    || (v4 < (float64x2_t *)&v3->f64[v5]
      ? (v7 = v3 >= (float64x2_t *)&v4->f64[v5])
      : (v7 = 1),
        !v7))
  {
    v9 = 0;
LABEL_29:
    v25 = v6 - v9;
    v26 = v9;
    v27 = &v4->f64[v26];
    v28 = &v3->f64[v26];
    do
    {
      v29 = *v28++;
      v13.f64[0] = v29 * *v27;
      *v27++ = v13.f64[0];
      --v25;
    }
    while (v25);
    return v13.f64[0];
  }
  v8 = v5 & 3;
  v9 = v5 - v8;
  v10 = v3 + 1;
  v11 = v4 + 1;
  v12 = v9;
  do
  {
    v13 = vmulq_f64(v10[-1], v11[-1]);
    v14 = vmulq_f64(*v10, *v11);
    v11[-1] = v13;
    *v11 = v14;
    v10 += 2;
    v11 += 2;
    v12 -= 4;
  }
  while (v12);
  if (v8)
    goto LABEL_29;
  return v13.f64[0];
}

void sub_22DA25B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

operations_research::glop::RevisedSimplex **std::unique_ptr<operations_research::glop::RevisedSimplex>::~unique_ptr[abi:ne180100](operations_research::glop::RevisedSimplex **a1)
{
  operations_research::glop::RevisedSimplex *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::glop::RevisedSimplex::~RevisedSimplex(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void ***std::unique_ptr<operations_research::glop::LinearProgram>::~unique_ptr[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::glop::LinearProgram::~LinearProgram(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::glop::LinearProgram::~LinearProgram(void **this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void **v24;
  void **v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;

  if (*((char *)this + 471) < 0)
    operator delete(this[56]);
  v2 = (char *)this[50];
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = this + 48;
    do
    {
      if ((v4[(_QWORD)this[47]] & 0x80000000) == 0)
      {
        v6 = *v5 + v3;
        if (*(char *)(v6 + 23) < 0)
        {
          operator delete(*(void **)v6);
          v2 = (char *)this[50];
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(this[47]);
    this[47] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[52] = 0;
    this[49] = 0;
    this[50] = 0;
    *v5 = 0;
  }
  v7 = this[51];
  if (v7)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  v8 = (char *)this[44];
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = this + 42;
    do
    {
      if ((v10[(_QWORD)this[41]] & 0x80000000) == 0)
      {
        v12 = *v11 + v9;
        if (*(char *)(v12 + 23) < 0)
        {
          operator delete(*(void **)v12);
          v8 = (char *)this[44];
        }
      }
      ++v10;
      v9 += 32;
    }
    while (v10 != v8);
    operator delete(this[41]);
    this[41] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[46] = 0;
    this[43] = 0;
    this[44] = 0;
    *v11 = 0;
  }
  v13 = this[45];
  if (v13)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v13);
  v14 = this[38];
  if (v14)
  {
    this[39] = v14;
    operator delete(v14);
  }
  v15 = this[35];
  if (v15)
  {
    this[36] = v15;
    operator delete(v15);
  }
  v16 = this[32];
  if (v16)
  {
    this[33] = v16;
    operator delete(v16);
  }
  v17 = this[29];
  if (v17)
  {
    this[30] = v17;
    operator delete(v17);
  }
  v18 = (void **)this[26];
  if (v18)
  {
    v19 = (void **)this[27];
    v20 = this[26];
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = this[26];
    }
    this[27] = v18;
    operator delete(v20);
  }
  v21 = this[23];
  if (v21)
  {
    this[24] = v21;
    operator delete(v21);
  }
  v22 = this[20];
  if (v22)
  {
    this[21] = v22;
    operator delete(v22);
  }
  v23 = this[17];
  if (v23)
  {
    this[18] = v23;
    operator delete(v23);
  }
  v24 = (void **)this[14];
  if (v24)
  {
    v25 = (void **)this[15];
    v26 = this[14];
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v25 - 1) < 0)
          operator delete(*(v25 - 3));
        v25 -= 3;
      }
      while (v25 != v24);
      v26 = this[14];
    }
    this[15] = v24;
    operator delete(v26);
  }
  v27 = this[11];
  if (v27)
  {
    this[12] = v27;
    operator delete(v27);
  }
  v28 = this[8];
  if (v28)
  {
    this[9] = v28;
    operator delete(v28);
  }
  v29 = this[4];
  if (v29)
  {
    v30 = this[5];
    v31 = this[4];
    if (v30 != v29)
    {
      do
      {
        v33 = *(v30 - 6);
        v30 -= 6;
        v32 = v33;
        *v30 = 0;
        if (v33)
          MEMORY[0x22E31DF60](v32, 0x1000C8077774924);
      }
      while (v30 != v29);
      v31 = this[4];
    }
    this[5] = v29;
    operator delete(v31);
  }
  v34 = *this;
  if (*this)
  {
    v35 = this[1];
    v36 = *this;
    if (v35 != v34)
    {
      do
      {
        v38 = *(v35 - 6);
        v35 -= 6;
        v37 = v38;
        *v35 = 0;
        if (v38)
          MEMORY[0x22E31DF60](v37, 0x1000C8077774924);
      }
      while (v35 != v34);
      v36 = *this;
    }
    this[1] = v34;
    operator delete(v36);
  }
}

void operations_research::glop::RevisedSimplex::~RevisedSimplex(operations_research::glop::RevisedSimplex *this)
{
  char *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  operations_research::StatsGroup *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  operations_research::StatsGroup *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  v2 = (char *)this + 10535;
  v3 = (void *)*((_QWORD *)this + 1998);
  if (v3)
  {
    *((_QWORD *)this + 1999) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 1992);
  *((_QWORD *)this + 1992) = 0;
  if (v4)
    MEMORY[0x22E31DF60](v4, 0x1000C8077774924);
  operations_research::glop::LuFactorization::~LuFactorization((operations_research::glop::RevisedSimplex *)((char *)this + 12208));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::RevisedSimplex *)((char *)this + 11912));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::RevisedSimplex *)((char *)this + 11616));
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::RevisedSimplex *)((char *)this + 11536));
  operations_research::glop::RevisedSimplex::RatioTestStats::~RatioTestStats((operations_research::glop::RevisedSimplex *)((char *)this + 10896));
  *((_QWORD *)this + 1352) = off_24F97FEB0;
  if (v2[312] < 0)
  {
    operator delete(*((void **)this + 1353));
    *((_QWORD *)this + 1339) = off_24F97FEB0;
    if ((v2[208] & 0x80000000) == 0)
    {
LABEL_7:
      v5 = (char *)this + 6399;
      *((_QWORD *)this + 1326) = off_24F97FEB0;
      if ((v2[104] & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_55;
    }
  }
  else
  {
    *((_QWORD *)this + 1339) = off_24F97FEB0;
    if ((v2[208] & 0x80000000) == 0)
      goto LABEL_7;
  }
  operator delete(*((void **)this + 1340));
  v5 = (char *)this + 6399;
  *((_QWORD *)this + 1326) = off_24F97FEB0;
  if ((v2[104] & 0x80000000) == 0)
  {
LABEL_8:
    v6 = (operations_research::glop::RevisedSimplex *)((char *)this + 10320);
    *((_QWORD *)this + 1313) = off_24F97FEB0;
    if ((*v2 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_56;
  }
LABEL_55:
  operator delete(*((void **)this + 1327));
  v6 = (operations_research::glop::RevisedSimplex *)((char *)this + 10320);
  *((_QWORD *)this + 1313) = off_24F97FEB0;
  if ((*v2 & 0x80000000) == 0)
  {
LABEL_9:
    *((_QWORD *)this + 1300) = off_24F97FEB0;
    if ((v5[4032] & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_57;
  }
LABEL_56:
  operator delete(*((void **)this + 1314));
  *((_QWORD *)this + 1300) = off_24F97FEB0;
  if ((v5[4032] & 0x80000000) == 0)
  {
LABEL_10:
    operations_research::StatsGroup::~StatsGroup(v6);
    v7 = (void *)*((_QWORD *)this + 1280);
    if (!v7)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_57:
  operator delete(*((void **)this + 1301));
  operations_research::StatsGroup::~StatsGroup(v6);
  v7 = (void *)*((_QWORD *)this + 1280);
  if (v7)
  {
LABEL_11:
    *((_QWORD *)this + 1281) = v7;
    operator delete(v7);
  }
LABEL_12:
  v8 = (void *)*((_QWORD *)this + 1277);
  if (v8)
  {
    *((_QWORD *)this + 1278) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1274);
  if (v9)
  {
    *((_QWORD *)this + 1275) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 1271);
  if (v10)
  {
    *((_QWORD *)this + 1272) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 1265);
  if (v11)
  {
    *((_QWORD *)this + 1266) = v11;
    operator delete(v11);
  }
  *((_QWORD *)this + 1254) = off_24F97FEB0;
  if (v5[3664] < 0)
    operator delete(*((void **)this + 1255));
  operations_research::StatsGroup::~StatsGroup((operations_research::glop::RevisedSimplex *)((char *)this + 9952));
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::RevisedSimplex *)((char *)this + 9648));
  operations_research::glop::ReducedCosts::~ReducedCosts((operations_research::glop::RevisedSimplex *)((char *)this + 8720));
  operations_research::glop::UpdateRow::~UpdateRow((operations_research::glop::RevisedSimplex *)((char *)this + 7840));
  operations_research::glop::PrimalEdgeNorms::~PrimalEdgeNorms((operations_research::glop::RevisedSimplex *)((char *)this + 6944));
  v12 = (void *)*((_QWORD *)this + 864);
  if (v12)
  {
    *((_QWORD *)this + 865) = v12;
    operator delete(v12);
  }
  operations_research::glop::GlopParameters::~GlopParameters((operations_research::glop::RevisedSimplex *)((char *)this + 6608));
  *((_QWORD *)this + 816) = off_24F97FEB0;
  if ((v5[160] & 0x80000000) == 0)
  {
    v13 = (operations_research::glop::RevisedSimplex *)((char *)this + 6288);
    *((_QWORD *)this + 806) = off_24F97FEB0;
    if ((v5[80] & 0x80000000) == 0)
      goto LABEL_26;
LABEL_60:
    operator delete(*((void **)this + 807));
    *((_QWORD *)this + 796) = off_24F97FEB0;
    if ((*v5 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
  operator delete(*((void **)this + 817));
  v13 = (operations_research::glop::RevisedSimplex *)((char *)this + 6288);
  *((_QWORD *)this + 806) = off_24F97FEB0;
  if (v5[80] < 0)
    goto LABEL_60;
LABEL_26:
  *((_QWORD *)this + 796) = off_24F97FEB0;
  if ((*v5 & 0x80000000) == 0)
    goto LABEL_27;
LABEL_61:
  operator delete(*((void **)this + 797));
LABEL_27:
  operations_research::StatsGroup::~StatsGroup(v13);
  operations_research::glop::VariableValues::~VariableValues((operations_research::glop::RevisedSimplex *)((char *)this + 5904));
  operations_research::glop::VariablesInfo::~VariablesInfo((operations_research::glop::RevisedSimplex *)((char *)this + 5480));
  operations_research::glop::BasisFactorization::~BasisFactorization((operations_research::glop::RevisedSimplex *)((char *)this + 840));
  v14 = (void *)*((_QWORD *)this + 102);
  if (v14)
  {
    *((_QWORD *)this + 103) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 98);
  if (v15)
    operator delete(v15);
  v16 = (void *)*((_QWORD *)this + 95);
  if (v16)
  {
    *((_QWORD *)this + 96) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 91);
  if (v17)
  {
    *((_QWORD *)this + 92) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 87);
  if (v18)
  {
    *((_QWORD *)this + 88) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 84);
  if (v19)
  {
    *((_QWORD *)this + 85) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 81);
  if (v20)
  {
    *((_QWORD *)this + 82) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 78);
  if (v21)
  {
    *((_QWORD *)this + 79) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 75);
  if (v22)
  {
    *((_QWORD *)this + 76) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 72);
  if (v23)
  {
    *((_QWORD *)this + 73) = v23;
    operator delete(v23);
  }
  v24 = *((_QWORD *)this + 68);
  if (v24)
  {
    v25 = *((_QWORD *)this + 69);
    v26 = (void *)*((_QWORD *)this + 68);
    if (v25 != v24)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0)
          operator delete(*(void **)(v25 - 24));
        v25 -= 24;
      }
      while (v25 != v24);
      v26 = (void *)*((_QWORD *)this + 68);
    }
    *((_QWORD *)this + 69) = v24;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 65);
  if (v27)
  {
    *((_QWORD *)this + 66) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)this + 62);
  if (v28)
    operator delete(v28);
  v29 = (void *)*((_QWORD *)this + 59);
  if (v29)
  {
    *((_QWORD *)this + 60) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 55);
  if (v30)
  {
    *((_QWORD *)this + 56) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 49);
  if (v31)
  {
    *((_QWORD *)this + 50) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 45);
  if (v32)
  {
    *((_QWORD *)this + 46) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 41);
  if (v33)
  {
    *((_QWORD *)this + 42) = v33;
    operator delete(v33);
  }
  v34 = (void *)*((_QWORD *)this + 38);
  if (v34)
  {
    *((_QWORD *)this + 39) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 35);
  if (v35)
  {
    *((_QWORD *)this + 36) = v35;
    operator delete(v35);
  }
  v36 = (void *)*((_QWORD *)this + 32);
  if (v36)
  {
    *((_QWORD *)this + 33) = v36;
    operator delete(v36);
  }
  v37 = (void *)*((_QWORD *)this + 27);
  if (v37)
  {
    *((_QWORD *)this + 28) = v37;
    operator delete(v37);
  }
  v38 = (void *)*((_QWORD *)this + 24);
  if (v38)
  {
    *((_QWORD *)this + 25) = v38;
    operator delete(v38);
  }
  v39 = (void *)*((_QWORD *)this + 19);
  if (v39)
  {
    *((_QWORD *)this + 20) = v39;
    operator delete(v39);
  }
  v40 = (void *)*((_QWORD *)this + 16);
  if (v40)
  {
    *((_QWORD *)this + 17) = v40;
    operator delete(v40);
  }
  v41 = (void *)*((_QWORD *)this + 13);
  if (v41)
  {
    *((_QWORD *)this + 14) = v41;
    operator delete(v41);
  }
  v42 = (void *)*((_QWORD *)this + 9);
  if (v42)
  {
    *((_QWORD *)this + 10) = v42;
    operator delete(v42);
  }
  v43 = (void *)*((_QWORD *)this + 6);
  if (v43)
  {
    *((_QWORD *)this + 7) = v43;
    operator delete(v43);
  }
  v44 = (void *)*((_QWORD *)this + 3);
  if (v44)
  {
    *((_QWORD *)this + 4) = v44;
    operator delete(v44);
  }
}

uint64_t operations_research::glop::AreFirstColumnsAndRowsExactlyEquals(int a1, int a2, uint64_t *a3, uint64_t a4)
{
  BOOL v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;

  if (*((_DWORD *)a3 + 6) < a1 || *(_DWORD *)a4 < a1)
    return 0;
  v7 = *a3;
  if (a2 > (int)(-1431655765 * ((unint64_t)(a3[1] - *a3) >> 4)) || *(_DWORD *)(a4 + 4) < a2)
    return 0;
  if (a2 >= 1)
  {
    v9 = 0;
    v5 = 0;
    v10 = *(_QWORD *)(a4 + 56);
    v11 = *(_QWORD *)(a4 + 32);
    v12 = a2;
    v13 = a2;
    v14 = *(_QWORD *)(a4 + 8);
    while (1)
    {
      v16 = (_QWORD *)(v7 + 48 * v9);
      v17 = *(_QWORD *)(v10 + 8 * v9++);
      v18 = *(_QWORD *)(v10 + 8 * v9);
      v19 = v18 - v17;
      v20 = v16[1];
      v21 = v18 - v17 < v20;
      v22 = v18 - v17 >= v20 ? v16[1] : v18 - v17;
      if (v21 && *(_DWORD *)(v16[3] + 4 * v19) < a1)
        return v5;
      v23 = v11 + 4 * v17;
      if (v19 > v20 && *(_DWORD *)(v23 + 4 * v22) < a1)
        return v5;
      if (v22 >= 1)
      {
        v24 = v14 + 8 * v17;
        v25 = v16[3];
        v26 = v19 <= v20;
        if (v19 >= v20)
        {
          v30 = 0;
          if (v26)
          {
            while (1)
            {
              v28 = *(_DWORD *)(v25 + 4 * v30);
              v29 = *(_DWORD *)(v23 + 4 * v30);
              if (v28 != v29)
                break;
              if (*(double *)(v16[4] + 8 * v30) != *(double *)(v24 + 8 * v30))
                return v5;
              if (v22 == ++v30)
                goto LABEL_21;
            }
          }
          else
          {
            while (1)
            {
              v28 = *(_DWORD *)(v25 + 4 * v30);
              v29 = *(_DWORD *)(v23 + 4 * v30);
              if (v28 != v29)
                break;
              if (*(double *)(v16[4] + 8 * v30) != *(double *)(v24 + 8 * v30) || *(_DWORD *)(v23 + 4 * v22) < a1)
                return v5;
              if (v22 == ++v30)
                goto LABEL_21;
            }
          }
        }
        else
        {
          v27 = 0;
          while (1)
          {
            v28 = *(_DWORD *)(v25 + 4 * v27);
            v29 = *(_DWORD *)(v23 + 4 * v27);
            if (v28 != v29)
              break;
            if (*(double *)(v16[4] + 8 * v27) != *(double *)(v24 + 8 * v27) || *(_DWORD *)(v25 + 4 * v19) < a1)
              return v5;
            if (v22 == ++v27)
              goto LABEL_21;
          }
        }
        if (v28 < a1 || v29 < a1)
          return v5;
      }
LABEL_21:
      v5 = v9 >= v12;
      if (v9 == v13)
        return v5;
    }
  }
  return 1;
}

uint64_t operations_research::glop::IsRightMostSquareMatrixIdentity(uint64_t a1)
{
  int v1;
  unint64_t v2;
  int v3;
  uint64_t v5;
  double **i;

  v1 = *(_DWORD *)(a1 + 24);
  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = v2 - v1;
  if ((int)v2 < v1)
    return 0;
  if (v1 >= 1)
  {
    v5 = v3;
    for (i = (double **)(*(_QWORD *)a1 + 48 * v3 + 32); *(i - 3) == (double *)1 && **i == 1.0; i += 6)
    {
      if (++v5 >= (int)v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t operations_research::glop::SparseMatrix::SparseMatrix(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

_QWORD *operations_research::glop::SparseMatrix::Clear(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = this;
  v2 = (_QWORD *)*this;
  v3 = (_QWORD *)this[1];
  while (v3 != v2)
  {
    v4 = (_QWORD *)*(v3 - 6);
    v3 -= 6;
    this = v4;
    *v3 = 0;
    if (v4)
      this = (_QWORD *)MEMORY[0x22E31DF60](this, 0x1000C8077774924);
  }
  v1[1] = v2;
  *((_DWORD *)v1 + 6) = 0;
  return this;
}

void operations_research::glop::SparseMatrix::CleanUp(operations_research::glop::SparseMatrix *this, __n128 a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  if ((int)v2 >= 1)
  {
    v4 = 0;
    v5 = 48 * v2;
    do
    {
      operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(*(_QWORD *)this + v4, a2);
      v4 += 48;
    }
    while (v5 != v4);
  }
}

void operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(uint64_t a1, __n128 a2)
{
  int64_t v3;
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  unsigned __int32 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 *v16;
  unint64_t v17;
  const std::nothrow_t *v18;
  unint64_t v19;
  __int128 *v20;
  BOOL v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  double *n128_f64;
  double v26;
  int v27;
  __n128 *__p;
  char v29;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v4 = 0;
    v6 = 0;
    __p = 0;
    v17 = 0;
    goto LABEL_28;
  }
  if ((unint64_t)v3 >> 60)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v4 = (__n128 *)operator new(16 * v3);
  v5 = 0;
  v6 = v4;
  v7 = &v4[v3];
  do
  {
    while (1)
    {
      v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v5);
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5);
      if (v4 >= v7)
        break;
      v4->n128_u32[0] = v8;
      v4->n128_u64[1] = v9;
      ++v4;
      if (++v5 >= v3)
        goto LABEL_22;
    }
    v10 = v4 - v6;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if (((char *)v7 - (char *)v6) >> 3 > v11)
      v11 = ((char *)v7 - (char *)v6) >> 3;
    if ((unint64_t)((char *)v7 - (char *)v6) >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(16 * v12);
    v14 = (__n128 *)&v13[16 * v10];
    v14->n128_u32[0] = v8;
    v14->n128_u64[1] = v9;
    if (v4 == v6)
    {
      v16 = (__n128 *)&v13[16 * v10];
      v7 = (__n128 *)&v13[16 * v12];
      v4 = v14 + 1;
      if (v6)
        goto LABEL_17;
    }
    else
    {
      v15 = (__n128 *)&v13[16 * v10];
      do
      {
        v16 = v15 - 1;
        a2 = v4[-1];
        v15[-1] = a2;
        --v4;
        --v15;
      }
      while (v4 != v6);
      v7 = (__n128 *)&v13[16 * v12];
      v4 = v14 + 1;
      if (v6)
      {
LABEL_17:
        operator delete(v6);
        v3 = *(_QWORD *)(a1 + 8);
      }
    }
    v6 = v16;
    ++v5;
  }
  while (v5 < v3);
LABEL_22:
  __p = v6;
  v17 = v4 - v6;
  if ((char *)v4 - (char *)v6 >= 1)
  {
    v18 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v19 = v4 - v6;
    while (1)
    {
      v20 = (__int128 *)operator new(16 * v19, v18);
      if (v20)
        break;
      v21 = v19 > 1;
      v19 >>= 1;
      if (!v21)
        goto LABEL_28;
    }
    v22 = v20;
  }
  else
  {
LABEL_28:
    v22 = 0;
    v19 = 0;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>((uint64_t)v6, (__int128 *)v4, (uint64_t)&v29, v17, v22, v19, a2.n128_f64[0]);
  if (v22)
    operator delete(v22);
  v23 = *(_QWORD *)(a1 + 8);
  if (v23 < 1)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    if (__p)
      goto LABEL_42;
  }
  else
  {
    v24 = 0;
    n128_f64 = __p[1].n128_f64;
    do
    {
      v26 = *(n128_f64 - 1);
      if (v26 != 0.0)
      {
        v27 = *((_DWORD *)n128_f64 - 4);
        if (v23 == 1 || v27 != *(_DWORD *)n128_f64)
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v24) = v27;
          *(double *)(*(_QWORD *)(a1 + 32) + 8 * v24++) = v26;
        }
      }
      n128_f64 += 2;
      --v23;
    }
    while (v23);
    *(_QWORD *)(a1 + 8) = v24;
    *(_BYTE *)(a1 + 40) = 0;
LABEL_42:
    operator delete(__p);
  }
}

void sub_22DA269B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::glop::SparseMatrix::SetNumRows(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t operations_research::glop::SparseMatrix::AppendEmptyColumn(operations_research::glop::SparseMatrix *this)
{
  unint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  char *v6;
  uint64_t v7;
  _OWORD v9[3];

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  memset(v9, 0, 41);
  if (v2 >= *((_QWORD *)this + 2))
  {
    v6 = std::vector<operations_research::glop::SparseColumn>::__push_back_slow_path<operations_research::glop::SparseColumn>((void **)this, (uint64_t *)v9);
    v7 = *(_QWORD *)&v9[0];
    *((_QWORD *)this + 1) = v6;
    *(_QWORD *)&v9[0] = 0;
    if (v7)
      MEMORY[0x22E31DF60](v7, 0x1000C8077774924);
  }
  else
  {
    *(_QWORD *)v2 = 0;
    v4 = *(_OWORD *)((char *)v9 + 8);
    v5 = *(_OWORD *)((char *)&v9[1] + 8);
    *(_BYTE *)(v2 + 40) = BYTE8(v9[2]);
    *(_OWORD *)(v2 + 24) = v5;
    *(_OWORD *)(v2 + 8) = v4;
    *((_QWORD *)this + 1) = v2 + 48;
  }
  return -1431655765 * ((v2 - v3) >> 4);
}

void sub_22DA26ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x22E31DF60](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void operations_research::glop::SparseMatrix::ComputeMinAndMaxMagnitudes(operations_research::glop::SparseMatrix *this, double *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _BYTE v15[16];

  if (!a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 371, 2);
    v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v15);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"min_magnitude", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" == NULL", 8);
LABEL_20:
    google::LogMessage::~LogMessage((google::LogMessage *)v15);
    return;
  }
  if (!a3)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 372, 2);
    v13 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v15);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"max_magnitude", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" == NULL", 8);
    goto LABEL_20;
  }
  *a2 = INFINITY;
  *a3 = 0.0;
  v3 = *(_QWORD *)this;
  if ((int)(-1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4)) < 1)
    goto LABEL_17;
  v4 = 0;
  v5 = -1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  v6 = 0.0;
  do
  {
    v7 = v3 + 48 * v4;
    v8 = *(_QWORD *)(v7 + 8);
    if (v8 >= 1)
    {
      v9 = *(double **)(v7 + 32);
      do
      {
        if (*v9 != 0.0)
        {
          v6 = fabs(*v9);
          v10 = *a2;
          if (v6 < *a2)
            v10 = v6;
          *a2 = v10;
          if (*a3 >= v6)
            v6 = *a3;
          *a3 = v6;
        }
        ++v9;
        --v8;
      }
      while (v8);
    }
    ++v4;
  }
  while (v4 != v5);
  if (v6 == 0.0)
LABEL_17:
    *a2 = 0.0;
}

void sub_22DA26C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DA26C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::glop::SparseMatrix::num_entries(operations_research::glop::SparseMatrix *this)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64x2_t *v7;
  int64x2_t v8;
  unint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v1 = *(_QWORD *)this;
  v2 = -1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  if (v2 < 1)
    return 0;
  v3 = -1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  if (v3 >= 5)
  {
    v6 = v2 & 3;
    if (!v6)
      v6 = 4;
    v4 = v3 - v6;
    v7 = (int64x2_t *)(v1 + 104);
    v8 = 0uLL;
    v9 = v4;
    v10 = 0uLL;
    do
    {
      v11 = v7[-3];
      v12 = v7[-6];
      v13 = v7[3];
      v14 = *v7;
      v7 += 12;
      v8 = vaddq_s64(vzip1q_s64(v12, v11), v8);
      v10 = vaddq_s64(vzip1q_s64(v14, v13), v10);
      v9 -= 4;
    }
    while (v9);
    result = vaddvq_s64(vaddq_s64(v10, v8));
  }
  else
  {
    v4 = 0;
    result = 0;
  }
  v15 = v3 - v4;
  v16 = (uint64_t *)(v1 + 48 * v4 + 8);
  do
  {
    v17 = *v16;
    v16 += 6;
    result += v17;
    --v15;
  }
  while (v15);
  return result;
}

void operations_research::glop::CompactSparseMatrix::PopulateFromMatrixView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  __int128 *v37;
  _OWORD *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  std::vector<int>::value_type __u[2];

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16) - v4;
  v6 = v5 >> 3;
  *(_DWORD *)(a1 + 4) = v5 >> 3;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if ((int)(v5 >> 3) < 1)
  {
    v9 = 0;
    goto LABEL_11;
  }
  v7 = (v5 >> 3);
  if (v7 < 2)
  {
    v8 = 0;
    v9 = 0;
LABEL_8:
    v15 = v8 - v7;
    v16 = (uint64_t *)(v4 + 8 * v8);
    do
    {
      v17 = *v16++;
      v9 += *(_QWORD *)(v17 + 8);
    }
    while (!__CFADD__(v15++, 1));
    goto LABEL_11;
  }
  v10 = 0;
  v11 = 0;
  v12 = (v5 >> 3) & 1;
  v8 = v7 - v12;
  v13 = v4 + 8;
  v14 = v7 - v12;
  do
  {
    v10 += *(_QWORD *)(*(_QWORD *)(v13 - 8) + 8);
    v11 += *(_QWORD *)(*(_QWORD *)v13 + 8);
    v13 += 16;
    v14 -= 2;
  }
  while (v14);
  v9 = v11 + v10;
  if (v12)
    goto LABEL_8;
LABEL_11:
  *(_QWORD *)__u = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign(a1 + 56, (uint64_t)((v6 << 32) + 0x100000000) >> 32, (uint64_t *)__u);
  *(_QWORD *)__u = 0;
  std::vector<double>::assign(a1 + 8, v9, (uint64_t *)__u);
  __u[0] = 0;
  std::vector<int>::assign((std::vector<int> *)(a1 + 32), v9, __u);
  v19 = *(_QWORD *)(a2 + 8);
  v20 = *(_QWORD *)(a2 + 16) - v19;
  v21 = v20 >> 3;
  v22 = *(_QWORD *)(a1 + 56);
  if ((int)(v20 >> 3) >= 1)
  {
    v23 = 0;
    v24 = 0;
    v25 = (v20 >> 3);
    while (1)
    {
      *(_QWORD *)(v22 + 8 * v23) = v24;
      v26 = *(_QWORD **)(v19 + 8 * v23);
      v27 = v26[1];
      if (v27 >= 1)
      {
        v29 = v26[3];
        v28 = v26[4];
        v30 = *(_QWORD *)(a1 + 8);
        v31 = *(_QWORD *)(a1 + 32);
        if ((unint64_t)v27 >= 0xC)
        {
          v32 = 0;
          v33 = 8 * v24;
          if ((unint64_t)(8 * v24 + v30 - v28) >= 0x40)
          {
            v34 = 4 * v24;
            if ((unint64_t)(4 * v24 + v31 - v29) >= 0x20)
            {
              v32 = v27 & 0x7FFFFFFFFFFFFFF8;
              v24 += v27 & 0xFFFFFFFFFFFFFFF8;
              v35 = (__int128 *)(v28 + 32);
              v36 = (_OWORD *)(v31 + v34 + 16);
              v37 = (__int128 *)(v29 + 16);
              v38 = (_OWORD *)(v30 + v33 + 32);
              v39 = v27 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v41 = *(v35 - 2);
                v40 = *(v35 - 1);
                v43 = *v35;
                v42 = v35[1];
                v35 += 4;
                *(v38 - 2) = v41;
                *(v38 - 1) = v40;
                *v38 = v43;
                v38[1] = v42;
                v38 += 4;
                v44 = *v37;
                *(v36 - 1) = *(v37 - 1);
                *v36 = v44;
                v36 += 2;
                v37 += 2;
                v39 -= 8;
              }
              while (v39);
              if (v27 == v32)
                goto LABEL_13;
            }
          }
        }
        else
        {
          v32 = 0;
        }
        v45 = (uint64_t *)(v28 + 8 * v32);
        v46 = v27 - v32;
        v47 = (_DWORD *)(v29 + 4 * v32);
        do
        {
          v48 = *v45++;
          *(_QWORD *)(v30 + 8 * v24) = v48;
          LODWORD(v48) = *v47++;
          *(_DWORD *)(v31 + 4 * v24++) = v48;
          --v46;
        }
        while (v46);
      }
LABEL_13:
      if (++v23 == v25)
        goto LABEL_26;
    }
  }
  v24 = 0;
LABEL_26:
  *(_QWORD *)(v22 + 8 * (int)v21) = v24;
}

void operations_research::glop::CompactSparseMatrix::PopulateFromTranspose(operations_research::glop::CompactSparseMatrix *this, const operations_research::glop::CompactSparseMatrix *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int *v6;
  int *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *(int *)a2;
  *((_DWORD *)this + 1) = v4;
  *(_DWORD *)this = *((_DWORD *)a2 + 1);
  v5 = (uint64_t *)((char *)this + 56);
  v41 = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)this + 56, v4 + 2, &v41);
  v6 = (int *)*((_QWORD *)a2 + 4);
  v7 = (int *)*((_QWORD *)a2 + 5);
  for (i = *((_QWORD *)this + 7); v6 != v7; ++*(_QWORD *)(i + 8 * v9 + 16))
    v9 = *v6++;
  v10 = *((_QWORD *)this + 8);
  if ((int)((unint64_t)(v10 - i) >> 3) >= 3)
  {
    v11 = ((unint64_t)(v10 - i) >> 3);
    v12 = *(_QWORD *)(i + 8);
    v13 = (_QWORD *)(i + 16);
    v14 = v11 - 2;
    do
    {
      v12 += *v13;
      *v13++ = v12;
      --v14;
    }
    while (v14);
  }
  v15 = *((_QWORD *)this + 1);
  v16 = *((_QWORD *)this + 2);
  v17 = *(_QWORD *)(v10 - 8);
  v41 = 0;
  v18 = (v16 - v15) >> 3;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)this + 2) = v15 + 8 * v17;
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 8, v17 - v18, &v41);
    v10 = *((_QWORD *)this + 8);
  }
  v19 = *((_QWORD *)this + 4);
  v20 = *(_QWORD *)(v10 - 8);
  v21 = (*((_QWORD *)this + 5) - v19) >> 2;
  if (v20 <= v21)
  {
    if (v20 < v21)
      *((_QWORD *)this + 5) = v19 + 4 * v20;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 32), v20 - v21, operations_research::glop::kInvalidRow);
    v10 = *((_QWORD *)this + 8);
  }
  *((_QWORD *)this + 8) = v10 - 8;
  v22 = *((_DWORD *)a2 + 1);
  if (v22 >= 1)
  {
    v23 = 0;
    v24 = *((_QWORD *)a2 + 7);
    v25 = *((_QWORD *)a2 + 4);
    v26 = *((_QWORD *)a2 + 1);
    do
    {
      v27 = *(_QWORD *)(v24 + 8 * v23);
      v28 = v23 + 1;
      v29 = *(_QWORD *)(v24 + 8 * (v23 + 1));
      v30 = v29 <= v27;
      v31 = v29 - v27;
      if (!v30)
      {
        v32 = *v5;
        v33 = *((_QWORD *)this + 1);
        v34 = (int *)(v25 + 4 * v27);
        v35 = *((_QWORD *)this + 4);
        v36 = (uint64_t *)(v26 + 8 * v27);
        do
        {
          v37 = *v34++;
          v38 = v32 + 8 * v37;
          v39 = *(_QWORD *)(v38 + 8);
          *(_QWORD *)(v38 + 8) = v39 + 1;
          v40 = *v36++;
          *(_QWORD *)(v33 + 8 * v39) = v40;
          *(_DWORD *)(v35 + 4 * v39) = v23;
          --v31;
        }
        while (v31);
        v22 = *((_DWORD *)a2 + 1);
      }
      ++v23;
    }
    while (v28 < v22);
  }
}

void operations_research::glop::TriangularMatrix::PopulateFromTranspose(operations_research::glop::TriangularMatrix *this, char **a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  operations_research::glop::CompactSparseMatrix::PopulateFromTranspose(this, (const operations_research::glop::CompactSparseMatrix *)a2);
  if (this != (operations_research::glop::TriangularMatrix *)a2)
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)this + 10, a2[10], a2[11], (a2[11] - a2[10]) >> 3);
  *((_BYTE *)this + 108) = *((_BYTE *)a2 + 108);
  v4 = *((_DWORD *)this + 1);
  v25 = 0;
  v5 = *((_QWORD *)this + 32);
  v6 = (*((_QWORD *)this + 33) - v5) >> 3;
  if (v4 <= v6)
  {
    if (v4 < v6)
      *((_QWORD *)this + 33) = v5 + 8 * v4;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 256, v4 - v6, &v25);
    v4 = *((_DWORD *)this + 1);
  }
  if (v4 >= 1)
  {
    v7 = *((_QWORD *)this + 7);
    v8 = *((_QWORD *)this + 32);
    v9 = v4;
    if (v4 < 6 || (unint64_t)(v8 - v7 - 8) < 0x20)
    {
      v10 = 0;
LABEL_11:
      v11 = (_QWORD *)(v8 + 8 * v10);
      v12 = v9 - v10;
      v13 = (uint64_t *)(8 * v10 + v7 + 8);
      do
      {
        v14 = *v13++;
        *v11++ = v14;
        --v12;
      }
      while (v12);
      goto LABEL_13;
    }
    v10 = v4 & 0x7FFFFFFC;
    v21 = (__int128 *)(v7 + 24);
    v22 = (_OWORD *)(v8 + 16);
    v23 = v9 & 0xFFFFFFFC;
    do
    {
      v24 = *v21;
      *(v22 - 1) = *(v21 - 1);
      *v22 = v24;
      v21 += 2;
      v22 += 2;
      v23 -= 4;
    }
    while (v23);
    if (v10 != v9)
      goto LABEL_11;
  }
LABEL_13:
  *((_DWORD *)this + 26) = 0;
  v15 = *((_QWORD *)this + 10);
  v16 = *((_QWORD *)this + 11) - v15;
  if ((int)((unint64_t)v16 >> 3) >= 1)
  {
    v17 = 0;
    v18 = *((_QWORD *)this + 7);
    v19 = (int)(v16 >> 3);
    v20 = 0x100000000;
    do
    {
      if (*(_QWORD *)(v18 + (v20 >> 29)) != *(_QWORD *)(v18 + 8 * v17))
        break;
      if (*(double *)(v15 + 8 * v17) != 1.0)
        break;
      *((_DWORD *)this + 26) = ++v17;
      v20 += 0x100000000;
    }
    while (v19 != v17);
  }
}

void operations_research::glop::CompactSparseMatrix::Reset(uint64_t a1, int a2)
{
  uint64_t v2;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  v2 = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v2);
}

void gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_27;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v14[8 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void operations_research::glop::TriangularMatrix::Reset(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  v5 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  v15 = 0;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v15);
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 1;
  v6 = (int)a3;
  v7 = *(_QWORD *)(a1 + 256);
  v8 = (*(_QWORD *)(a1 + 264) - v7) >> 3;
  if ((int)a3 <= v8)
  {
    if ((int)a3 < v8)
      *(_QWORD *)(a1 + 264) = v7 + 8 * (int)a3;
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(a1 + 256, (int)a3 - v8);
  }
  v9 = a3 << 32;
  v10 = *(_QWORD *)(a1 + 80);
  v11 = (*(_QWORD *)(a1 + 88) - v10) >> 3;
  if (v6 <= v11)
  {
    if (v6 < v11)
      *(_QWORD *)(a1 + 88) = v10 + 8 * v6;
  }
  else
  {
    std::vector<double>::__append(a1 + 80, v6 - v11);
  }
  v12 = (v9 + 0x100000000) >> 32;
  v13 = *(_QWORD **)(a1 + 56);
  v14 = (uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v13) >> 3;
  if (v12 > v14)
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)v5, v12 - v14);
    v13 = (_QWORD *)*v5;
LABEL_11:
    *v13 = 0;
    return;
  }
  if (v12 >= v14)
    goto LABEL_11;
  *(_QWORD *)(a1 + 64) = &v13[v12];
  *v13 = 0;
}

uint64_t operations_research::glop::CompactSparseMatrix::AddDenseColumn(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  v3 = (a2[1] - *a2) >> 3;
  v8 = 0;
  if ((int)v3 >= 1)
  {
    v5 = 0;
    do
    {
      if (*(double *)(*a2 + 8 * v5) != 0.0)
      {
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v8);
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, (_QWORD *)(*a2 + 8 * v8));
        v5 = v8;
      }
      v8 = ++v5;
    }
    while (v5 < (int)v3);
  }
  v7 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v7);
  result = *(unsigned int *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = result + 1;
  return result;
}

uint64_t operations_research::glop::CompactSparseMatrix::AddDenseColumnPrefix(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  int i;

  v4 = (a2[1] - *a2) >> 3;
  for (i = a3; a3 < (int)v4; i = a3)
  {
    if (*(double *)(*a2 + 8 * a3) != 0.0)
    {
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &i);
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, (_QWORD *)(*a2 + 8 * i));
      a3 = i;
    }
    ++a3;
  }
  v7 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v7);
  result = *(unsigned int *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = result + 1;
  return result;
}

uint64_t operations_research::glop::CompactSparseMatrix::AddDenseColumnWithNonZeros(uint64_t a1, _QWORD *a2, int **a3)
{
  int *v5;
  int *v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  int v10;
  double v11;

  v5 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
  {
    v7 = (a2[1] - *a2) >> 3;
    LODWORD(v11) = 0;
    if ((int)v7 >= 1)
    {
      v8 = 0;
      do
      {
        if (*(double *)(*a2 + 8 * v8) != 0.0)
        {
          gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v11);
          gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, (_QWORD *)(*a2 + 8 * SLODWORD(v11)));
          v8 = LODWORD(v11);
        }
        LODWORD(v11) = ++v8;
      }
      while (v8 < (int)v7);
    }
  }
  else
  {
    do
    {
      v10 = *v5;
      v11 = 0.0;
      v11 = *(double *)(*a2 + 8 * v10);
      if (v11 != 0.0)
      {
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v10);
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, &v11);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  *(_QWORD *)&v11 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v11);
  result = *(unsigned int *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = result + 1;
  return result;
}

uint64_t operations_research::glop::CompactSparseMatrix::AddAndClearColumnWithNonZeros(uint64_t a1, uint64_t *a2, int **a3)
{
  int *v5;
  int *v6;
  uint64_t v8;
  uint64_t result;
  double v10;
  int v11;

  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    v8 = *a2;
    do
    {
      v11 = *v5;
      *(double *)&v10 = 0.0;
      v10 = *(uint64_t *)(v8 + 8 * v11);
      if (*(double *)&v10 != 0.0)
      {
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v11);
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, &v10);
        v8 = *a2;
        *(_QWORD *)(*a2 + 8 * v11) = 0;
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = *a3;
  }
  a3[1] = v5;
  v10 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
  gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>,std::allocator<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>>::push_back(a1 + 56, &v10);
  result = *(unsigned int *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = result + 1;
  return result;
}

int *operations_research::glop::TriangularMatrix::Swap(int *this, operations_research::glop::TriangularMatrix *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *this;
  *this = *(_DWORD *)a2;
  *(_DWORD *)a2 = v2;
  v3 = this[1];
  this[1] = *((_DWORD *)a2 + 1);
  *((_DWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v12;
  v13 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v13;
  v14 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v14;
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v15;
  LODWORD(v15) = this[26];
  this[26] = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v15;
  LOBYTE(v15) = *((_BYTE *)this + 108);
  *((_BYTE *)this + 108) = *((_BYTE *)a2 + 108);
  *((_BYTE *)a2 + 108) = v15;
  return this;
}

double operations_research::glop::CompactSparseMatrixView::ComputeInfinityNorm(operations_research::glop::CompactSparseMatrixView *this)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double *v22;
  double v23;
  double v24;

  v1 = *(_QWORD **)this;
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = **(int **)this;
  v4 = **(unsigned int **)this;
  if (!(_DWORD)v3)
  {
    v5 = 0;
    v6 = *v2;
    v7 = v2[1] - *v2;
    if ((int)(v7 >> 2) < 1)
      goto LABEL_12;
    goto LABEL_6;
  }
  if ((v3 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v5 = operator new(8 * v4);
  bzero(v5, 8 * v3);
  v6 = *v2;
  v7 = v2[1] - *v2;
  if ((int)(v7 >> 2) >= 1)
  {
LABEL_6:
    v8 = 0;
    v9 = v1[7];
    v10 = v1[4];
    v11 = (v7 >> 2);
    v12 = v1[1];
    do
    {
      v13 = *(int *)(v6 + 4 * v8);
      v14 = *(_QWORD *)(v9 + 8 * v13);
      v15 = *(_QWORD *)(v9 + (((v13 << 32) + 0x100000000) >> 29)) - v14;
      if (v15 >= 1)
      {
        v16 = (int *)(v10 + 4 * v14);
        v17 = (double *)(v12 + 8 * v14);
        do
        {
          v18 = *v17++;
          v19 = fabs(v18);
          v20 = *v16++;
          *((double *)v5 + v20) = v19 + *((double *)v5 + v20);
          --v15;
        }
        while (v15);
      }
      ++v8;
    }
    while (v8 != v11);
  }
LABEL_12:
  v21 = 0.0;
  if ((int)v4 >= 1)
  {
    v22 = (double *)v5;
    do
    {
      v23 = *v22++;
      v24 = v23;
      if (v21 < v23)
        v21 = v24;
      --v4;
    }
    while (v4);
    goto LABEL_19;
  }
  if (v5)
LABEL_19:
    operator delete(v5);
  return v21;
}

uint64_t operations_research::glop::TriangularMatrix::AddDiagonalOnlyColumn(uint64_t this, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v9;

  v2 = *(int *)(this + 4);
  v3 = 8 * v2;
  *(double *)(*(_QWORD *)(this + 80) + v3) = a2;
  v5 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(this + 16);
  v6 = (v4 - v5) >> 3;
  *(_QWORD *)(*(_QWORD *)(this + 256) + v3) = v6;
  *(_DWORD *)(this + 4) = v2 + 1;
  *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * ((int)v2 + 1)) = v6;
  if (*(_DWORD *)(this + 104) == (_DWORD)v2 && a2 == 1.0 && v5 == v4)
    *(_DWORD *)(this + 104) = v2 + 1;
  v9 = a2 == 1.0 && *(_BYTE *)(this + 108) != 0;
  *(_BYTE *)(this + 108) = v9;
  return this;
}

void operations_research::glop::TriangularMatrix::AddTriangularColumn(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  int *v6;
  double *v7;
  double v8;
  uint64_t v9;
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v19;
  uint64_t v20;
  int v21;

  v4 = *a2;
  if (*a2 < 1)
  {
    v8 = 0.0;
  }
  else
  {
    v6 = (int *)a2[1];
    v7 = (double *)a2[2];
    v8 = 0.0;
    do
    {
      while (1)
      {
        v11 = *v6++;
        v10 = v11;
        if (v11 == a3)
          break;
        v21 = v10;
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v21);
        v9 = *(_QWORD *)v7++;
        v20 = v9;
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, &v20);
        if (!--v4)
          goto LABEL_8;
      }
      v12 = *v7++;
      v8 = v12;
      --v4;
    }
    while (v4);
  }
LABEL_8:
  v13 = *(int *)(a1 + 4);
  v14 = 8 * v13;
  *(double *)(*(_QWORD *)(a1 + 80) + v14) = v8;
  v16 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v17 = (v15 - v16) >> 3;
  *(_QWORD *)(*(_QWORD *)(a1 + 256) + v14) = v17;
  *(_DWORD *)(a1 + 4) = v13 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * ((int)v13 + 1)) = v17;
  if (*(_DWORD *)(a1 + 104) == (_DWORD)v13 && v8 == 1.0 && v16 == v15)
    *(_DWORD *)(a1 + 104) = v13 + 1;
  v19 = v8 == 1.0 && *(_BYTE *)(a1 + 108) != 0;
  *(_BYTE *)(a1 + 108) = v19;
}

void operations_research::glop::TriangularMatrix::AddAndNormalizeTriangularColumn(uint64_t a1, _QWORD *a2, int a3, double a4)
{
  uint64_t v5;
  int *v8;
  double *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int v18;

  v5 = a2[1];
  if (v5 >= 1)
  {
    v8 = (int *)a2[3];
    v9 = (double *)a2[4];
    do
    {
      v11 = *v8++;
      v10 = v11;
      if (v11 != a3 && *v9 != 0.0)
      {
        v18 = v10;
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v18);
        v17 = *v9 / a4;
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, &v17);
      }
      ++v9;
      --v5;
    }
    while (v5);
  }
  v12 = *(int *)(a1 + 4);
  v13 = 8 * v12;
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + v13) = 0x3FF0000000000000;
  v15 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v16 = (v14 - v15) >> 3;
  *(_QWORD *)(*(_QWORD *)(a1 + 256) + v13) = v16;
  *(_DWORD *)(a1 + 4) = v12 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * ((int)v12 + 1)) = v16;
  if (*(_DWORD *)(a1 + 104) == (_DWORD)v12 && v15 == v14)
    *(_DWORD *)(a1 + 104) = v12 + 1;
}

void operations_research::glop::TriangularMatrix::AddTriangularColumnWithGivenDiagonalEntry(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t v5;
  int *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  uint64_t v17;
  int v18;

  v5 = a2[1];
  if (v5 >= 1)
  {
    v6 = (int *)a2[3];
    v7 = (uint64_t *)a2[4];
    do
    {
      v8 = *v6++;
      v18 = v8;
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back(a1 + 32, &v18);
      v9 = *v7++;
      v17 = v9;
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,double,std::allocator<double>>::push_back(a1 + 8, &v17);
      --v5;
    }
    while (v5);
  }
  v10 = *(int *)(a1 + 4);
  v11 = 8 * v10;
  *(double *)(*(_QWORD *)(a1 + 80) + v11) = a3;
  v13 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = (v12 - v13) >> 3;
  *(_QWORD *)(*(_QWORD *)(a1 + 256) + v11) = v14;
  *(_DWORD *)(a1 + 4) = v10 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * ((int)v10 + 1)) = v14;
  if (*(_DWORD *)(a1 + 104) == (_DWORD)v10 && a3 == 1.0 && v13 == v12)
    *(_DWORD *)(a1 + 104) = v10 + 1;
  v16 = a3 == 1.0 && *(_BYTE *)(a1 + 108) != 0;
  *(_BYTE *)(a1 + 108) = v16;
}

uint64_t operations_research::glop::TriangularMatrix::ApplyRowPermutationToNonDiagonalEntries(uint64_t result, uint64_t *a2)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(int **)(result + 32);
  v3 = *(_QWORD *)(result + 40) - (_QWORD)v2;
  if (v3 >= 1)
  {
    v4 = (unint64_t)v3 >> 2;
    v5 = *a2;
    if (v4 <= 1)
      v4 = 1;
    do
    {
      *v2 = *(_DWORD *)(v5 + 4 * *v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  return result;
}

void operations_research::glop::TriangularMatrix::CopyColumnToSparseColumn(_QWORD *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v5 = a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  v7 = a1[7];
  v8 = *(_QWORD *)(v7 + 8 * (int)a2);
  v9 = *(_QWORD *)(v7 + (((a2 << 32) + 0x100000000) >> 29));
  if (v8 >= v9)
  {
    v20 = *(_QWORD *)(a1[10] + 8 * (int)a2);
    if (*(_QWORD *)(a3 + 16))
    {
      v10 = 0;
      goto LABEL_25;
    }
LABEL_19:
    v21 = 4;
    goto LABEL_20;
  }
  v28 = (int)a2;
  v29 = a2;
  v10 = 0;
  do
  {
    v12 = *(_DWORD *)(a1[4] + 4 * v8);
    v13 = *(_QWORD *)(a1[1] + 8 * v8);
    if (v10 != *(_QWORD *)(a3 + 16))
      goto LABEL_3;
    if (v10)
    {
      v14 = 2 * v10;
      if (v10 >= 2 * v10)
        goto LABEL_3;
    }
    else
    {
      v14 = 4;
    }
    v15 = (v14 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v16 = (char *)operator new[]();
    v17 = v16;
    v18 = &v16[4 * v15];
    v10 = *(_QWORD *)(a3 + 8);
    if (v10 >= 1)
    {
      memmove(v16, *(const void **)(a3 + 24), 4 * v10);
      memmove(v18, *(const void **)(a3 + 32), 8 * v10);
    }
    v19 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 24) = v17;
    *(_QWORD *)(a3 + 32) = v18;
    *(_QWORD *)(a3 + 16) = v15;
    if (v19)
    {
      MEMORY[0x22E31DF60](v19, 0x1000C8077774924);
      v10 = *(_QWORD *)(a3 + 8);
    }
LABEL_3:
    v11 = *(_QWORD *)(a3 + 32);
    *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4 * v10) = v12;
    *(_QWORD *)(v11 + 8 * v10++) = v13;
    *(_QWORD *)(a3 + 8) = v10;
    *(_BYTE *)(a3 + 40) = 1;
    ++v8;
  }
  while (v9 != v8);
  v20 = *(_QWORD *)(a1[10] + 8 * v28);
  if (v10 != *(_QWORD *)(a3 + 16))
  {
    v5 = v29;
    goto LABEL_25;
  }
  v5 = v29;
  if (!v10)
    goto LABEL_19;
  v21 = 2 * v10;
  if (v10 >= 2 * v10)
    goto LABEL_25;
LABEL_20:
  v22 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v23 = (char *)operator new[]();
  v24 = v23;
  v25 = &v23[4 * v22];
  v10 = *(_QWORD *)(a3 + 8);
  if (v10 >= 1)
  {
    memmove(v23, *(const void **)(a3 + 24), 4 * v10);
    memmove(v25, *(const void **)(a3 + 32), 8 * v10);
  }
  v26 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v24;
  *(_QWORD *)(a3 + 24) = v24;
  *(_QWORD *)(a3 + 32) = v25;
  *(_QWORD *)(a3 + 16) = v22;
  if (v26)
  {
    MEMORY[0x22E31DF60](v26, 0x1000C8077774924);
    v10 = *(_QWORD *)(a3 + 8);
  }
LABEL_25:
  v27 = *(_QWORD *)(a3 + 32);
  *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4 * v10) = v5;
  *(_QWORD *)(a3 + 8) = v10 + 1;
  *(_QWORD *)(v27 + 8 * v10) = v20;
  *(_BYTE *)(a3 + 40) = 1;
  operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(a3, a4);
}

void operations_research::glop::TriangularMatrix::LowerSolve(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 108))
    operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<true>(a1, 0, a2);
  else
    operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<false>(a1, 0, a2);
}

void operations_research::glop::TriangularMatrix::LowerSolveStartingAt(uint64_t a1, int a2, uint64_t *a3)
{
  if (*(_BYTE *)(a1 + 108))
    operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<true>(a1, a2, a3);
  else
    operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<false>(a1, a2, a3);
}

void operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<true>(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  double v14;
  double *v15;
  int *v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _BYTE v22[16];

  if (a3)
  {
    v3 = *(int *)(a1 + 104);
    if ((int)v3 <= a2)
      v4 = a2;
    else
      v4 = *(_DWORD *)(a1 + 104);
    v5 = (*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3;
    if (v4 < (int)v5)
    {
      v6 = *a3;
      if (v3 <= a2)
        v3 = a2;
      v7 = v3 + v5 - v4;
      do
      {
        v8 = *(double *)(v6 + 8 * v3);
        if (v8 != 0.0)
        {
          v9 = *(_QWORD *)(a1 + 56);
          v10 = *(_QWORD *)(v9 + 8 * v3);
          v11 = *(_QWORD *)(v9 + (((v3 << 32) + 0x100000000) >> 29));
          v12 = v11 <= v10;
          v13 = v11 - v10;
          if (!v12)
          {
            v14 = -v8;
            v15 = (double *)(*(_QWORD *)(a1 + 8) + 8 * v10);
            v16 = (int *)(*(_QWORD *)(a1 + 32) + 4 * v10);
            do
            {
              v17 = *v15++;
              v18 = v17;
              v19 = *v16++;
              *(double *)(v6 + 8 * v19) = *(double *)(v6 + 8 * v19) + v14 * v18;
              --v13;
            }
            while (v13);
          }
        }
        ++v3;
      }
      while (v7 != (_DWORD)v3);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v22, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 753, 2);
    v20 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v22);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v22);
  }
}

void sub_22DA28310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::LowerSolveStartingAtInternal<false>(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  double v16;
  double *v17;
  int *v18;
  double v19;
  double v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[16];

  if (a3)
  {
    v3 = *(int *)(a1 + 104);
    if ((int)v3 <= a2)
      v4 = a2;
    else
      v4 = *(_DWORD *)(a1 + 104);
    v5 = *(_QWORD *)(a1 + 80);
    v6 = (unint64_t)(*(_QWORD *)(a1 + 88) - v5) >> 3;
    if (v4 < (int)v6)
    {
      v7 = *a3;
      if (v3 <= a2)
        v3 = a2;
      v8 = v3 + v6 - v4;
      do
      {
        v9 = *(double *)(v7 + 8 * v3);
        if (v9 != 0.0)
        {
          v10 = v9 / *(double *)(v5 + 8 * v3);
          *(double *)(v7 + 8 * v3) = v10;
          v11 = *(_QWORD *)(a1 + 56);
          v12 = *(_QWORD *)(v11 + 8 * v3);
          v13 = *(_QWORD *)(v11 + (((v3 << 32) + 0x100000000) >> 29));
          v14 = v13 <= v12;
          v15 = v13 - v12;
          if (!v14)
          {
            v16 = -v10;
            v17 = (double *)(*(_QWORD *)(a1 + 8) + 8 * v12);
            v18 = (int *)(*(_QWORD *)(a1 + 32) + 4 * v12);
            do
            {
              v19 = *v17++;
              v20 = v19;
              v21 = *v18++;
              *(double *)(v7 + 8 * v21) = *(double *)(v7 + 8 * v21) + v16 * v20;
              --v15;
            }
            while (v15);
          }
        }
        ++v3;
      }
      while (v8 != (_DWORD)v3);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 753, 2);
    v22 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v24);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v24);
  }
}

void sub_22DA2844C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::UpperSolve(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 108))
    operations_research::glop::TriangularMatrix::UpperSolveInternal<true>(a1, a2);
  else
    operations_research::glop::TriangularMatrix::UpperSolveInternal<false>(a1, a2);
}

void operations_research::glop::TriangularMatrix::UpperSolveInternal<true>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _BYTE v17[16];

  if (a2)
  {
    v2 = *(int *)(a1 + 104);
    v3 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80);
    if ((int)v2 < (int)((unint64_t)v3 >> 3))
    {
      v4 = *a2;
      v5 = (int)(v3 >> 3);
      do
      {
        v6 = v5--;
        v7 = *(double *)(v4 + 8 * v5);
        if (v7 != 0.0)
        {
          v8 = *(_QWORD *)(a1 + 56);
          v9 = *(_QWORD *)(v8 + 8 * v5);
          v10 = *(_QWORD *)(v8 + 8 * v6);
          if (v10 > v9)
          {
            v11 = -v7;
            v12 = *(_QWORD *)(a1 + 8) - 8;
            v13 = *(_QWORD *)(a1 + 32) - 4;
            do
            {
              v14 = 8 * *(int *)(v13 + 4 * v10);
              *(double *)(v4 + v14) = *(double *)(v4 + v14) + v11 * *(double *)(v12 + 8 * v10--);
            }
            while (v10 > v9);
          }
        }
      }
      while (v5 > v2);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v17, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 780, 2);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v17);
  }
}

void sub_22DA28570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::UpperSolveInternal<false>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE v19[16];

  if (a2)
  {
    v2 = *(int *)(a1 + 104);
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(_QWORD *)(a1 + 88) - v3;
    if ((int)v2 < (int)((unint64_t)v4 >> 3))
    {
      v5 = *a2;
      v6 = (int)(v4 >> 3);
      do
      {
        v7 = v6 - 1;
        v8 = *(double *)(v5 + 8 * (v6 - 1));
        if (v8 != 0.0)
        {
          v9 = v8 / *(double *)(v3 + 8 * v7);
          *(double *)(v5 + 8 * v7) = v9;
          v10 = *(_QWORD *)(a1 + 56);
          v11 = *(_QWORD *)(v10 + 8 * v7);
          v12 = *(_QWORD *)(v10 + 8 * v6);
          if (v12 > v11)
          {
            v13 = -v9;
            v14 = *(_QWORD *)(a1 + 8) - 8;
            v15 = *(_QWORD *)(a1 + 32) - 4;
            do
            {
              v16 = 8 * *(int *)(v15 + 4 * v12);
              *(double *)(v5 + v16) = *(double *)(v5 + v16) + v13 * *(double *)(v14 + 8 * v12--);
            }
            while (v12 > v11);
          }
        }
        v6 = v7;
      }
      while (v7 > v2);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 780, 2);
    v17 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v19);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v19);
  }
}

void sub_22DA28694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::TransposeUpperSolve(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 108))
    operations_research::glop::TriangularMatrix::TransposeUpperSolveInternal<true>(a1, a2);
  else
    operations_research::glop::TriangularMatrix::TransposeUpperSolveInternal<false>(a1, a2);
}

void operations_research::glop::TriangularMatrix::TransposeUpperSolveInternal<true>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int *v12;
  double v13;
  double v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE v18[16];

  if (a2)
  {
    v2 = *(int *)(a1 + 4);
    v3 = *(int *)(a1 + 104);
    if ((int)v3 < (int)v2)
    {
      v4 = *(_QWORD *)(a1 + 56);
      v5 = *(_QWORD *)(v4 + 8 * v3);
      v6 = *a2;
      do
      {
        v7 = *(double *)(v6 + 8 * v3);
        v8 = v3 + 1;
        v9 = *(_QWORD *)(v4 + 8 * (v3 + 1));
        v10 = v9 - v5;
        if (v9 > v5)
        {
          v11 = (double *)(*(_QWORD *)(a1 + 8) + 8 * v5);
          v12 = (int *)(*(_QWORD *)(a1 + 32) + 4 * v5);
          do
          {
            v13 = *v11++;
            v14 = v13;
            v15 = *v12++;
            v7 = v7 - v14 * *(double *)(v6 + 8 * v15);
            --v10;
          }
          while (v10);
          v5 = *(_QWORD *)(v4 + 8 * (v3 + 1));
        }
        *(double *)(v6 + 8 * v3++) = v7;
      }
      while (v8 != v2);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v18, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 811, 2);
    v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v18);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v18);
  }
}

void sub_22DA28798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::TransposeUpperSolveInternal<false>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  int *v13;
  double v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE v19[16];

  if (a2)
  {
    v2 = *(int *)(a1 + 4);
    v3 = *(int *)(a1 + 104);
    if ((int)v3 < (int)v2)
    {
      v4 = *(_QWORD *)(a1 + 56);
      v5 = *(_QWORD *)(v4 + 8 * v3);
      v6 = *a2;
      v7 = *(_QWORD *)(a1 + 80);
      do
      {
        v8 = *(double *)(v6 + 8 * v3);
        v9 = v3 + 1;
        v10 = *(_QWORD *)(v4 + 8 * (v3 + 1));
        v11 = v10 - v5;
        if (v10 > v5)
        {
          v12 = (double *)(*(_QWORD *)(a1 + 8) + 8 * v5);
          v13 = (int *)(*(_QWORD *)(a1 + 32) + 4 * v5);
          do
          {
            v14 = *v12++;
            v15 = v14;
            v16 = *v13++;
            v8 = v8 - v15 * *(double *)(v6 + 8 * v16);
            --v11;
          }
          while (v11);
          v5 = *(_QWORD *)(v4 + 8 * (v3 + 1));
        }
        *(double *)(v6 + 8 * v3) = v8 / *(double *)(v7 + 8 * v3);
        ++v3;
      }
      while (v9 != v2);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 811, 2);
    v17 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v19);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v19);
  }
}

void sub_22DA2889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::TransposeLowerSolve(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 108))
    operations_research::glop::TriangularMatrix::TransposeLowerSolveInternal<true>(a1, a2);
  else
    operations_research::glop::TriangularMatrix::TransposeLowerSolveInternal<false>(a1, a2);
}

void operations_research::glop::TriangularMatrix::TransposeLowerSolveInternal<true>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  double v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE v18[16];

  if (a2)
  {
    v2 = *(int *)(a1 + 104);
    v3 = *(int *)(a1 + 4);
    v4 = v3 << 32;
    v5 = v3 + 1;
    while (v3 > v2)
    {
      v6 = *a2;
      v7 = *a2 + 8 * v3--;
      v4 -= 0x100000000;
      --v5;
      if (*(double *)(v7 - 8) != 0.0)
      {
        if ((int)v2 < v5)
        {
          v8 = *(_QWORD *)(a1 + 56);
          v9 = *(_QWORD *)(v8 + ((v4 + 0x100000000) >> 29)) - 1;
          v10 = v4 >> 32;
          do
          {
            v14 = *(double *)(v6 + 8 * v10);
            v15 = *(_QWORD *)(v8 + 8 * v10);
            if (v9 >= v15)
            {
              do
              {
                v14 = v14
                    - *(double *)(*(_QWORD *)(a1 + 8) + 8 * v9)
                    * *(double *)(v6 + 8 * *(int *)(*(_QWORD *)(a1 + 32) + 4 * v9));
                v13 = __OFSUB__(v9, v15);
                v11 = v9 == v15;
                v12 = v9 - v15 < 0;
                --v9;
              }
              while (!(v12 ^ v13 | v11));
              v9 = v15 - 1;
            }
            *(double *)(v6 + 8 * v10) = v14;
            v13 = __OFSUB__(v10, v2);
            v11 = v10 == v2;
            v12 = v10 - v2 < 0;
            --v10;
          }
          while (!(v12 ^ v13 | v11));
        }
        return;
      }
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v18, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 841, 2);
    v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v18);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v18);
  }
}

void sub_22DA289E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::TransposeLowerSolveInternal<false>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE v19[16];

  if (a2)
  {
    v2 = *(int *)(a1 + 104);
    v3 = *(int *)(a1 + 4);
    v4 = v3 << 32;
    v5 = v3 + 1;
    while (v3 > v2)
    {
      v6 = *a2;
      v7 = *a2 + 8 * v3--;
      v4 -= 0x100000000;
      --v5;
      if (*(double *)(v7 - 8) != 0.0)
      {
        if ((int)v2 < v5)
        {
          v8 = *(_QWORD *)(a1 + 56);
          v9 = *(_QWORD *)(v8 + ((v4 + 0x100000000) >> 29)) - 1;
          v10 = *(_QWORD *)(a1 + 80);
          v11 = v4 >> 32;
          do
          {
            v15 = *(double *)(v6 + 8 * v11);
            v16 = *(_QWORD *)(v8 + 8 * v11);
            if (v9 >= v16)
            {
              do
              {
                v15 = v15
                    - *(double *)(*(_QWORD *)(a1 + 8) + 8 * v9)
                    * *(double *)(v6 + 8 * *(int *)(*(_QWORD *)(a1 + 32) + 4 * v9));
                v14 = __OFSUB__(v9, v16);
                v12 = v9 == v16;
                v13 = v9 - v16 < 0;
                --v9;
              }
              while (!(v13 ^ v14 | v12));
              v9 = v16 - 1;
            }
            *(double *)(v6 + 8 * v11) = v15 / *(double *)(v10 + 8 * v11);
            v14 = __OFSUB__(v11, v2);
            v12 = v11 == v2;
            v13 = v11 - v2 < 0;
            --v11;
          }
          while (!(v13 ^ v14 | v12));
        }
        return;
      }
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 841, 2);
    v17 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v19);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v19);
  }
}

void sub_22DA28B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::HyperSparseSolve(_QWORD *a1, uint64_t *a2, std::vector<int> *this)
{
  if (*((_BYTE *)a1 + 108))
    operations_research::glop::TriangularMatrix::HyperSparseSolveInternal<true>(a1, a2, this);
  else
    operations_research::glop::TriangularMatrix::HyperSparseSolveInternal<false>(a1, a2, this);
}

void operations_research::glop::TriangularMatrix::HyperSparseSolveInternal<true>(_QWORD *a1, uint64_t *a2, std::vector<int> *this)
{
  std::vector<int>::pointer begin;
  int *end;
  int v5;
  uint64_t v6;
  std::vector<int>::pointer v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  double *v16;
  int *v17;
  double v18;
  double v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _BYTE v24[16];

  if (a2)
  {
    begin = this->__begin_;
    end = this->__end_;
    if (this->__begin_ == end)
    {
      v5 = 0;
    }
    else
    {
      v5 = 0;
      v6 = *a2;
      v7 = this->__begin_;
      do
      {
        v8 = *v7;
        v9 = *(double *)(v6 + 8 * (int)v8);
        if (v9 != 0.0)
        {
          v10 = a1[7];
          v11 = *(_QWORD *)(v10 + 8 * (int)v8);
          v12 = *(_QWORD *)(v10 + (((v8 << 32) + 0x100000000) >> 29));
          v13 = v12 <= v11;
          v14 = v12 - v11;
          if (!v13)
          {
            v15 = -v9;
            v16 = (double *)(a1[1] + 8 * v11);
            v17 = (int *)(a1[4] + 4 * v11);
            do
            {
              v18 = *v16++;
              v19 = v18;
              v20 = *v17++;
              *(double *)(v6 + 8 * v20) = *(double *)(v6 + 8 * v20) + v15 * v19;
              --v14;
            }
            while (v14);
          }
          begin[v5++] = v8;
        }
        ++v7;
      }
      while (v7 != end);
    }
    v23 = end - begin;
    if (v5 <= v23)
    {
      if (v5 < v23)
        this->__end_ = &begin[v5];
    }
    else
    {
      std::vector<int>::__append(this, v5 - v23);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 881, 2);
    v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v24);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v24);
  }
}

void sub_22DA28CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::HyperSparseSolveInternal<false>(_QWORD *a1, uint64_t *a2, std::vector<int> *this)
{
  std::vector<int>::pointer begin;
  int *end;
  int v5;
  uint64_t v6;
  std::vector<int>::pointer v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  double v17;
  double *v18;
  int *v19;
  double v20;
  double v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _BYTE v26[16];

  if (a2)
  {
    begin = this->__begin_;
    end = this->__end_;
    if (this->__begin_ == end)
    {
      v5 = 0;
    }
    else
    {
      v5 = 0;
      v6 = *a2;
      v7 = this->__begin_;
      do
      {
        v8 = *v7;
        v9 = *(double *)(v6 + 8 * (int)v8);
        if (v9 != 0.0)
        {
          v10 = 8 * (int)v8;
          v11 = v9 / *(double *)(a1[10] + v10);
          *(double *)(v6 + v10) = v11;
          v12 = a1[7];
          v13 = *(_QWORD *)(v12 + v10);
          v14 = *(_QWORD *)(v12 + (((v8 << 32) + 0x100000000) >> 29));
          v15 = v14 <= v13;
          v16 = v14 - v13;
          if (!v15)
          {
            v17 = -v11;
            v18 = (double *)(a1[1] + 8 * v13);
            v19 = (int *)(a1[4] + 4 * v13);
            do
            {
              v20 = *v18++;
              v21 = v20;
              v22 = *v19++;
              *(double *)(v6 + 8 * v22) = *(double *)(v6 + 8 * v22) + v17 * v21;
              --v16;
            }
            while (v16);
          }
          begin[v5++] = v8;
        }
        ++v7;
      }
      while (v7 != end);
    }
    v25 = end - begin;
    if (v5 <= v25)
    {
      if (v5 < v25)
        this->__end_ = &begin[v5];
    }
    else
    {
      std::vector<int>::__append(this, v5 - v25);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 881, 2);
    v23 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v26);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
  }
}

void sub_22DA28E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZeros(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  if (*((_BYTE *)a1 + 108))
    operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZerosInternal<true>(a1, a2, a3);
  else
    operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZerosInternal<false>(a1, a2, a3);
}

void operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZerosInternal<true>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  double v17;
  double *v18;
  int *v19;
  double v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _BYTE v27[16];

  if (a2)
  {
    v5 = *(_DWORD **)a3;
    v4 = *(_BYTE **)(a3 + 8);
    v6 = (unint64_t)&v4[-*(_QWORD *)a3] >> 2;
    if (v4 != *(_BYTE **)a3)
    {
      v7 = *a2;
      v8 = *(_DWORD **)(a3 + 8);
      do
      {
        v10 = *--v8;
        v9 = v10;
        v11 = *(double *)(v7 + 8 * (int)v10);
        if (v11 != 0.0)
        {
          v12 = a1[7];
          v13 = *(_QWORD *)(v12 + 8 * (int)v9);
          v14 = *(_QWORD *)(v12 + (((v9 << 32) + 0x100000000) >> 29));
          v15 = v14 <= v13;
          v16 = v14 - v13;
          if (!v15)
          {
            v17 = -v11;
            v18 = (double *)(a1[1] + 8 * v13);
            v19 = (int *)(a1[4] + 4 * v13);
            do
            {
              v20 = *v18++;
              v21 = v20;
              v22 = *v19++;
              *(double *)(v7 + 8 * v22) = *(double *)(v7 + 8 * v22) + v17 * v21;
              --v16;
            }
            while (v16);
          }
          LODWORD(v6) = v6 - 1;
          v5[(int)v6] = v9;
        }
      }
      while (v8 != v5);
    }
    if ((_DWORD)v6)
    {
      v23 = (char *)&v5[(int)v6];
      v24 = v4 - v23;
      if (v4 != v23)
        memmove(v5, v23, v4 - v23);
      *(_QWORD *)(a3 + 8) = (char *)v5 + v24;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v27, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 911, 2);
    v25 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v27);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v27);
  }
}

void sub_22DA28F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::HyperSparseSolveWithReversedNonZerosInternal<false>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  double v19;
  double *v20;
  int *v21;
  double v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _BYTE v29[16];

  if (a2)
  {
    v5 = *(_DWORD **)a3;
    v4 = *(_BYTE **)(a3 + 8);
    v6 = (unint64_t)&v4[-*(_QWORD *)a3] >> 2;
    if (v4 != *(_BYTE **)a3)
    {
      v7 = *a2;
      v8 = *(_DWORD **)(a3 + 8);
      do
      {
        v10 = *--v8;
        v9 = v10;
        v11 = *(double *)(v7 + 8 * (int)v10);
        if (v11 != 0.0)
        {
          v12 = 8 * (int)v9;
          v13 = v11 / *(double *)(a1[10] + v12);
          *(double *)(v7 + v12) = v13;
          v14 = a1[7];
          v15 = *(_QWORD *)(v14 + v12);
          v16 = *(_QWORD *)(v14 + (((v9 << 32) + 0x100000000) >> 29));
          v17 = v16 <= v15;
          v18 = v16 - v15;
          if (!v17)
          {
            v19 = -v13;
            v20 = (double *)(a1[1] + 8 * v15);
            v21 = (int *)(a1[4] + 4 * v15);
            do
            {
              v22 = *v20++;
              v23 = v22;
              v24 = *v21++;
              *(double *)(v7 + 8 * v24) = *(double *)(v7 + 8 * v24) + v19 * v23;
              --v18;
            }
            while (v18);
          }
          LODWORD(v6) = v6 - 1;
          v5[(int)v6] = v9;
        }
      }
      while (v8 != v5);
    }
    if ((_DWORD)v6)
    {
      v25 = (char *)&v5[(int)v6];
      v26 = v4 - v25;
      if (v4 != v25)
        memmove(v5, v25, v4 - v25);
      *(_QWORD *)(a3 + 8) = (char *)v5 + v26;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v29, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 911, 2);
    v27 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v29);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v29);
  }
}

void sub_22DA290F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolve(_QWORD *a1, uint64_t *a2, std::vector<int> *this)
{
  if (*((_BYTE *)a1 + 108))
    operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveInternal<true>(a1, a2, this);
  else
    operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveInternal<false>(a1, a2, this);
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveInternal<true>(_QWORD *a1, uint64_t *a2, std::vector<int> *this)
{
  std::vector<int>::pointer begin;
  int *end;
  int v5;
  uint64_t v6;
  uint64_t v7;
  std::vector<int>::pointer v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  double *v15;
  int *v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _BYTE v23[16];

  if (a2)
  {
    begin = this->__begin_;
    end = this->__end_;
    if (this->__begin_ == end)
    {
      v5 = 0;
    }
    else
    {
      v5 = 0;
      v6 = *a2;
      v7 = a1[7];
      v8 = this->__begin_;
      do
      {
        v9 = *v8;
        v10 = *(double *)(v6 + 8 * v9);
        v11 = *(_QWORD *)(v7 + 8 * v9);
        v12 = *(_QWORD *)(v7 + (((v9 << 32) + 0x100000000) >> 29));
        v13 = v12 <= v11;
        v14 = v12 - v11;
        if (!v13)
        {
          v15 = (double *)(a1[1] + 8 * v11);
          v16 = (int *)(a1[4] + 4 * v11);
          do
          {
            v17 = *v15++;
            v18 = v17;
            v19 = *v16++;
            v10 = v10 - v18 * *(double *)(v6 + 8 * v19);
            --v14;
          }
          while (v14);
        }
        *(double *)(v6 + 8 * v9) = v10;
        if (v10 != 0.0)
          begin[v5++] = v9;
        ++v8;
      }
      while (v8 != end);
    }
    v22 = end - begin;
    if (v5 <= v22)
    {
      if (v5 < v22)
        this->__end_ = &begin[v5];
    }
    else
    {
      std::vector<int>::__append(this, v5 - v22);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v23, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 942, 2);
    v20 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v23);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v23);
  }
}

void sub_22DA29264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveInternal<false>(_QWORD *a1, uint64_t *a2, std::vector<int> *this)
{
  std::vector<int>::pointer begin;
  int *end;
  int v5;
  uint64_t v6;
  uint64_t v7;
  std::vector<int>::pointer v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  double *v16;
  int *v17;
  double v18;
  double v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _BYTE v24[16];

  if (a2)
  {
    begin = this->__begin_;
    end = this->__end_;
    if (this->__begin_ == end)
    {
      v5 = 0;
    }
    else
    {
      v5 = 0;
      v6 = *a2;
      v7 = a1[7];
      v8 = this->__begin_;
      v9 = a1[10];
      do
      {
        v10 = *v8;
        v11 = *(double *)(v6 + 8 * v10);
        v12 = *(_QWORD *)(v7 + 8 * v10);
        v13 = *(_QWORD *)(v7 + (((v10 << 32) + 0x100000000) >> 29));
        v14 = v13 <= v12;
        v15 = v13 - v12;
        if (!v14)
        {
          v16 = (double *)(a1[1] + 8 * v12);
          v17 = (int *)(a1[4] + 4 * v12);
          do
          {
            v18 = *v16++;
            v19 = v18;
            v20 = *v17++;
            v11 = v11 - v19 * *(double *)(v6 + 8 * v20);
            --v15;
          }
          while (v15);
        }
        *(double *)(v6 + 8 * v10) = v11 / *(double *)(v9 + 8 * v10);
        if (v11 != 0.0)
          begin[v5++] = v10;
        ++v8;
      }
      while (v8 != end);
    }
    v23 = end - begin;
    if (v5 <= v23)
    {
      if (v5 < v23)
        this->__end_ = &begin[v5];
    }
    else
    {
      std::vector<int>::__append(this, v5 - v23);
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v24, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 942, 2);
    v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v24);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v24);
  }
}

void sub_22DA293CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZeros(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  if (*((_BYTE *)a1 + 108))
    operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZerosInternal<true>(a1, a2, a3);
  else
    operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZerosInternal<false>(a1, a2, a3);
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZerosInternal<true>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t i;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _BYTE v20[16];

  if (a2)
  {
    v5 = *(_DWORD **)a3;
    v4 = *(_BYTE **)(a3 + 8);
    v6 = (unint64_t)&v4[-*(_QWORD *)a3] >> 2;
    if (v4 != *(_BYTE **)a3)
    {
      v7 = *a2;
      v8 = a1[7];
      v9 = *(_DWORD **)(a3 + 8);
      do
      {
        v11 = *--v9;
        v10 = v11;
        v12 = 8 * v11;
        v13 = *(double *)(v7 + v12);
        v14 = *(_QWORD *)(v8 + 8 * (v11 + 1));
        for (i = *(_QWORD *)(v8 + v12); v14 > i; --v14)
          v13 = v13 - *(double *)(a1[1] - 8 + 8 * v14) * *(double *)(v7 + 8 * *(int *)(a1[4] - 4 + 4 * v14));
        *(double *)(v7 + 8 * v10) = v13;
        if (v13 != 0.0)
        {
          LODWORD(v6) = v6 - 1;
          v5[(int)v6] = v10;
        }
      }
      while (v9 != v5);
    }
    if ((_DWORD)v6)
    {
      v16 = (char *)&v5[(int)v6];
      v17 = v4 - v16;
      if (v4 != v16)
        memmove(v5, v16, v4 - v16);
      *(_QWORD *)(a3 + 8) = (char *)v5 + v17;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v20, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 974, 2);
    v18 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v20);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v20);
  }
}

void sub_22DA29534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::TransposeHyperSparseSolveWithReversedNonZerosInternal<false>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t i;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _BYTE v21[16];

  if (a2)
  {
    v5 = *(_DWORD **)a3;
    v4 = *(_BYTE **)(a3 + 8);
    v6 = (unint64_t)&v4[-*(_QWORD *)a3] >> 2;
    if (v4 != *(_BYTE **)a3)
    {
      v7 = *a2;
      v8 = a1[7];
      v9 = *(_DWORD **)(a3 + 8);
      v10 = a1[10];
      do
      {
        v12 = *--v9;
        v11 = v12;
        v13 = 8 * v12;
        v14 = *(double *)(v7 + v13);
        v15 = *(_QWORD *)(v8 + 8 * (v12 + 1));
        for (i = *(_QWORD *)(v8 + v13); v15 > i; --v15)
          v14 = v14 - *(double *)(a1[1] - 8 + 8 * v15) * *(double *)(v7 + 8 * *(int *)(a1[4] - 4 + 4 * v15));
        *(double *)(v7 + 8 * v11) = v14 / *(double *)(v10 + 8 * v11);
        if (v14 != 0.0)
        {
          LODWORD(v6) = v6 - 1;
          v5[(int)v6] = v11;
        }
      }
      while (v9 != v5);
    }
    if ((_DWORD)v6)
    {
      v17 = (char *)&v5[(int)v6];
      v18 = v4 - v17;
      if (v4 != v17)
        memmove(v5, v17, v4 - v17);
      *(_QWORD *)(a3 + 8) = (char *)v5 + v18;
    }
  }
  else
  {
    google::LogMessage::LogMessage((google::LogMessage *)v21, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 974, 2);
    v19 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v21);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"rhs", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" == NULL", 8);
    google::LogMessage::~LogMessage((google::LogMessage *)v21);
  }
}

void sub_22DA2969C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::PermutedLowerSparseSolve(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  double *v50;
  uint64_t v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t *v75;
  uint64_t v76[2];

  if (!a4)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v76, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 1043, 2);
    v14 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v76);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"lower_column", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" == NULL", 8);
LABEL_7:
    google::LogMessage::~LogMessage((google::LogMessage *)v76);
    return;
  }
  if (!a5)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v76, (google::glog_internal_namespace_ *)"./ortools/lp_data/sparse.cc", 1044, 2);
    v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v76);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"upper_column", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" == NULL", 8);
    goto LABEL_7;
  }
  v8 = (_QWORD *)a1;
  operations_research::glop::TriangularMatrix::PermutedComputeRowsToConsider((_QWORD *)a1, a2, a3, (char **)(a1 + 160), (_QWORD *)(a1 + 184));
  v9 = v8[26];
  v10 = v8[27];
  v11 = v8 + 26;
  v12 = *(int *)v8;
  v76[0] = 0;
  v13 = (v10 - v9) >> 3;
  if (v12 <= v13)
  {
    if (v12 < v13)
      v8[27] = v9 + 8 * v12;
  }
  else
  {
    std::vector<double>::__append((uint64_t)(v8 + 26), v12 - v13, v76);
  }
  v18 = *a2;
  v19 = a3;
  if (*a2 >= 1)
  {
    v20 = (int *)a2[1];
    v21 = (uint64_t *)a2[2];
    v22 = *v11;
    do
    {
      v23 = *v21++;
      v24 = v23;
      v25 = *v20++;
      *(_QWORD *)(v22 + 8 * v25) = v24;
      --v18;
    }
    while (v18);
  }
  a4[1] = 0;
  *((_BYTE *)a4 + 40) = 0;
  v26 = a5[1] + ((uint64_t)(v8[24] - v8[23]) >> 2);
  v75 = v8 + 26;
  v73 = v8;
  if (a5[2] < v26)
  {
    v27 = (v26 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v28 = (char *)operator new[]();
    v29 = v28;
    v30 = &v28[4 * v27];
    v31 = a5[1];
    if (v31 >= 1)
    {
      memmove(v28, (const void *)a5[3], 4 * v31);
      memmove(v30, (const void *)a5[4], 8 * v31);
    }
    v32 = *a5;
    *a5 = (uint64_t)v29;
    a5[3] = (uint64_t)v29;
    a5[4] = (uint64_t)v30;
    a5[2] = v27;
    v19 = a3;
    v11 = v75;
    v8 = v73;
    if (v32)
    {
      MEMORY[0x22E31DF60](v32, 0x1000C8077774924);
      v19 = a3;
    }
  }
  v34 = v8[23];
  v33 = v8[24];
  if (v33 != v34)
  {
    while (1)
    {
      v36 = *(_DWORD *)(v33 - 4);
      v33 -= 4;
      v35 = v36;
      v37 = *(double *)(*v11 + 8 * v36);
      if (v37 != 0.0)
        break;
LABEL_21:
      if (v33 == v34)
        goto LABEL_37;
    }
    *(_QWORD *)(*v11 + 8 * v35) = 0;
    v38 = *(unsigned int *)(*v19 + 4 * v35);
    v39 = a5[1];
    if (v39 == a5[2])
    {
      if (v39)
      {
        v40 = 2 * v39;
        if (v39 >= 2 * v39)
          goto LABEL_33;
      }
      else
      {
        v40 = 4;
      }
      v41 = (v40 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v42 = (char *)operator new[]();
      v43 = v42;
      v44 = &v42[4 * v41];
      v39 = a5[1];
      if (v39 >= 1)
      {
        memmove(v42, (const void *)a5[3], 4 * v39);
        memmove(v44, (const void *)a5[4], 8 * v39);
      }
      v45 = *a5;
      *a5 = (uint64_t)v43;
      a5[3] = (uint64_t)v43;
      a5[4] = (uint64_t)v44;
      a5[2] = v41;
      if (v45)
      {
        MEMORY[0x22E31DF60](v45, 0x1000C8077774924);
        v39 = a5[1];
      }
      v19 = a3;
      v11 = v75;
      v8 = v73;
    }
LABEL_33:
    a5[1] = v39 + 1;
    *(_DWORD *)(a5[3] + 4 * v39) = v35;
    *(double *)(a5[4] + 8 * v39) = v37;
    *((_BYTE *)a5 + 40) = 1;
    v46 = v8[7];
    v47 = *(_QWORD *)(v46 + 8 * (int)v38);
    v48 = *(_QWORD *)(v46 + (((v38 << 32) + 0x100000000) >> 29)) - v47;
    if (v48 >= 1)
    {
      v49 = (int *)(v8[4] + 4 * v47);
      v50 = (double *)(v8[1] + 8 * v47);
      v51 = *v11;
      do
      {
        v52 = *v50++;
        v53 = v52;
        v54 = *v49++;
        *(double *)(v51 + 8 * v54) = *(double *)(v51 + 8 * v54) - v53 * v37;
        --v48;
      }
      while (v48);
    }
    goto LABEL_21;
  }
LABEL_37:
  v55 = (uint64_t)(v8[21] - v8[20]) >> 2;
  if (a4[2] < v55)
  {
    v56 = (v55 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v57 = (char *)operator new[]();
    v58 = v57;
    v59 = &v57[4 * v56];
    v60 = a4[1];
    if (v60 >= 1)
    {
      memmove(v57, (const void *)a4[3], 4 * v60);
      memmove(v59, (const void *)a4[4], 8 * v60);
    }
    v61 = *a4;
    *a4 = (uint64_t)v58;
    a4[3] = (uint64_t)v58;
    a4[4] = (uint64_t)v59;
    a4[2] = v56;
    v11 = v75;
    if (v61)
      MEMORY[0x22E31DF60](v61, 0x1000C8077774924);
  }
  v62 = (int *)v8[20];
  v63 = (int *)v8[21];
  if (v62 != v63)
  {
    v64 = a4[1];
    do
    {
      v65 = *v62;
      v66 = *(_QWORD *)(*v11 + 8 * v65);
      *(_QWORD *)(*v11 + 8 * v65) = 0;
      if (v64 == a4[2])
      {
        if (!v64)
        {
          v67 = 4;
LABEL_51:
          v68 = (v67 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          v69 = (char *)operator new[]();
          v70 = v69;
          v71 = &v69[4 * v68];
          v64 = a4[1];
          if (v64 >= 1)
          {
            memmove(v69, (const void *)a4[3], 4 * v64);
            memmove(v71, (const void *)a4[4], 8 * v64);
          }
          v72 = *a4;
          *a4 = (uint64_t)v70;
          a4[3] = (uint64_t)v70;
          a4[4] = (uint64_t)v71;
          a4[2] = v68;
          if (v72)
          {
            MEMORY[0x22E31DF60](v72, 0x1000C8077774924);
            v64 = a4[1];
          }
          v11 = v75;
          goto LABEL_45;
        }
        v67 = 2 * v64;
        if (v64 < 2 * v64)
          goto LABEL_51;
      }
LABEL_45:
      a4[1] = v64 + 1;
      *(_DWORD *)(a4[3] + 4 * v64) = v65;
      *(_QWORD *)(a4[4] + 8 * v64) = v66;
      *((_BYTE *)a4 + 40) = 1;
      ++v62;
      ++v64;
    }
    while (v62 != v63);
  }
}

void sub_22DA29BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DA29BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::glop::TriangularMatrix::PermutedComputeRowsToConsider(_QWORD *a1, uint64_t *a2, _QWORD *a3, char **a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  _DWORD *v76;
  unint64_t v77;
  char **v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _OWORD *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  char *v114;
  _DWORD *v115;
  unint64_t v116;
  char *v117;
  char *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  _DWORD *v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  _OWORD *v147;
  char *v148;
  uint64_t v149;
  __int128 v150;
  int v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  char *v159;
  char *v160;
  uint64_t v161;
  int v162;
  char *v163;
  char *v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  unint64_t v170;
  char **v171;
  uint64_t *v172;
  void **v173;

  v172 = a1 + 14;
  std::vector<BOOL>::resize((uint64_t)(a1 + 14), *(int *)a1, 0);
  std::vector<BOOL>::resize((uint64_t)(a1 + 29), *(int *)a1, 0);
  v171 = a4;
  a4[1] = *a4;
  v168 = a5;
  a5[1] = *a5;
  v173 = (void **)(a1 + 17);
  a1[18] = a1[17];
  v9 = *a2;
  if (*a2 < 1)
    goto LABEL_163;
  v10 = 0;
  v11 = a2[1];
  v12 = a4;
  v169 = v11;
  do
  {
    v14 = *(_DWORD *)(v11 + 4 * v10);
    if ((*(_DWORD *)(*a3 + 4 * v14) & 0x80000000) == 0)
    {
      v16 = (char *)a1[18];
      v15 = a1[19];
      if ((unint64_t)v16 < v15)
      {
        *(_DWORD *)v16 = v14;
        v13 = (uint64_t)(v16 + 4);
LABEL_4:
        a1[18] = v13;
        goto LABEL_5;
      }
      v17 = (char *)*v173;
      v18 = v16 - (_BYTE *)*v173;
      v19 = v18 >> 2;
      v20 = (v18 >> 2) + 1;
      if (v20 >> 62)
LABEL_170:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v21 = v15 - (_QWORD)v17;
      if (v21 >> 1 > v20)
        v20 = v21 >> 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 >> 62)
          goto LABEL_171;
        v23 = operator new(4 * v22);
        v24 = &v23[4 * v19];
        *v24 = v14;
        v13 = (uint64_t)(v24 + 1);
        if (v16 == v17)
          goto LABEL_37;
      }
      else
      {
        v23 = 0;
        v24 = (_DWORD *)(4 * v19);
        *(_DWORD *)(4 * v19) = v14;
        v13 = 4 * v19 + 4;
        if (v16 == v17)
        {
LABEL_37:
          a1[17] = v24;
          a1[18] = v13;
          a1[19] = &v23[4 * v22];
          if (v17)
            operator delete(v17);
          v11 = v169;
          v12 = v171;
          goto LABEL_4;
        }
      }
      v36 = v16 - 4 - v17;
      if (v36 < 0x2C)
        goto LABEL_176;
      if ((unint64_t)(v16 - &v23[v18]) < 0x20)
        goto LABEL_176;
      v37 = (v36 >> 2) + 1;
      v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      v39 = &v16[-v38];
      v24 = (_DWORD *)((char *)v24 - v38);
      v40 = &v23[4 * v19 - 16];
      v41 = v16 - 16;
      v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v43 = *(_OWORD *)v41;
        *(v40 - 1) = *((_OWORD *)v41 - 1);
        *v40 = v43;
        v40 -= 2;
        v41 -= 32;
        v42 -= 8;
      }
      while (v42);
      v16 = v39;
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_176:
        do
        {
          v44 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *--v24 = v44;
        }
        while (v16 != v17);
      }
      goto LABEL_37;
    }
    *(_QWORD *)(*v172 + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v26 = v12[1];
    v25 = (unint64_t)v12[2];
    if ((unint64_t)v26 < v25)
    {
      *(_DWORD *)v26 = v14;
      v12[1] = v26 + 4;
      goto LABEL_5;
    }
    v27 = *v12;
    v28 = v26 - *v12;
    v29 = v28 >> 2;
    v30 = (v28 >> 2) + 1;
    if (v30 >> 62)
LABEL_172:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v31 = v25 - (_QWORD)v27;
    if (v31 >> 1 > v30)
      v30 = v31 >> 1;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 62)
LABEL_171:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v33 = operator new(4 * v32);
      v34 = &v33[4 * v29];
      *(_DWORD *)v34 = v14;
      v35 = (uint64_t)(v34 + 4);
      if (v26 == v27)
        goto LABEL_47;
LABEL_41:
      v45 = v26 - 4 - v27;
      if (v45 < 0x2C)
        goto LABEL_177;
      if ((unint64_t)(v26 - &v33[v28]) < 0x20)
        goto LABEL_177;
      v46 = (v45 >> 2) + 1;
      v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
      v48 = &v26[-v47];
      v34 -= v47;
      v49 = &v33[4 * v29 - 16];
      v50 = v26 - 16;
      v51 = v46 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v52 = *(_OWORD *)v50;
        *(v49 - 1) = *((_OWORD *)v50 - 1);
        *v49 = v52;
        v49 -= 2;
        v50 -= 32;
        v51 -= 8;
      }
      while (v51);
      v26 = v48;
      if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_177:
        do
        {
          v53 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *((_DWORD *)v34 - 1) = v53;
          v34 -= 4;
        }
        while (v26 != v27);
      }
      goto LABEL_47;
    }
    v33 = 0;
    v34 = (char *)(4 * v29);
    *(_DWORD *)(4 * v29) = v14;
    v35 = 4 * v29 + 4;
    if (v26 != v27)
      goto LABEL_41;
LABEL_47:
    v54 = &v33[4 * v32];
    v12 = v171;
    *v171 = v34;
    v171[1] = (char *)v35;
    v171[2] = v54;
    if (v27)
      operator delete(v27);
    v11 = v169;
    v171[1] = (char *)v35;
LABEL_5:
    ++v10;
  }
  while (v10 != v9);
  v56 = (char *)a1[17];
  v55 = (char *)a1[18];
  if (v56 != v55)
  {
    while (1)
    {
      v57 = v55 - 4;
      v58 = *((unsigned int *)v55 - 1);
      if ((v58 & 0x80000000) != 0)
        break;
      v59 = *(_QWORD *)(*v172 + 8 * (v58 >> 6));
      if ((v59 & (1 << v58)) == 0)
      {
        v67 = *(int *)(*a3 + 4 * v58);
        if ((v67 & 0x80000000) == 0)
        {
          v68 = a1[19];
          if ((unint64_t)v55 < v68)
          {
            *(_DWORD *)v55 = -1;
            v55 += 4;
            goto LABEL_118;
          }
          v82 = (v55 - v56) >> 2;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62)
            goto LABEL_170;
          v84 = v68 - (_QWORD)v56;
          if (v84 >> 1 > v83)
            v83 = v84 >> 1;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
            v85 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v85 = v83;
          if (v85)
          {
            if (v85 >> 62)
              goto LABEL_171;
            v86 = operator new(4 * v85);
          }
          else
          {
            v86 = 0;
          }
          v115 = &v86[4 * v82];
          *v115 = -1;
          v116 = v55 - 4 - v56;
          if (v116 < 0xBC
            || &v86[v55 - v56 - 4 - (v116 & 0xFFFFFFFFFFFFFFFCLL)] > &v86[v55 - v56 - 4]
            || &v57[-(v116 & 0xFFFFFFFFFFFFFFFCLL)] > v57
            || (unint64_t)(v56 - v86) < 0x20)
          {
            v117 = v55;
            v118 = &v86[4 * v82];
            goto LABEL_115;
          }
          v153 = (v116 >> 2) + 1;
          v154 = 4 * (v153 & 0x7FFFFFFFFFFFFFF8);
          v117 = &v55[-v154];
          v118 = (char *)&v115[v154 / 0xFFFFFFFFFFFFFFFCLL];
          v155 = &v86[4 * v82 - 16];
          v156 = v55 - 16;
          v157 = v153 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v158 = *(_OWORD *)v156;
            *(v155 - 1) = *((_OWORD *)v156 - 1);
            *v155 = v158;
            v155 -= 2;
            v156 -= 32;
            v157 -= 8;
          }
          while (v157);
          if (v153 != (v153 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_115:
              v119 = *((_DWORD *)v117 - 1);
              v117 -= 4;
              *((_DWORD *)v118 - 1) = v119;
              v118 -= 4;
            }
            while (v117 != v56);
          }
          v55 = (char *)(v115 + 1);
          a1[17] = v118;
          a1[18] = v115 + 1;
          a1[19] = &v86[4 * v85];
          if (v56)
            operator delete(v56);
LABEL_118:
          a1[18] = v55;
          v120 = *(_QWORD *)(a1[32] + 8 * v67);
          v121 = *(_QWORD *)(a1[7] + 8 * v67);
          if (v121 >= v120)
            goto LABEL_53;
          v167 = v120;
          while (2)
          {
            v123 = *(_DWORD *)(a1[4] + 4 * v121);
            v124 = (unint64_t)v123 >> 6;
            if (((1 << v123) & *(_QWORD *)(a1[14] + 8 * v124)) == 0)
            {
              v125 = a1[19];
              if ((unint64_t)v55 < v125)
              {
                *(_DWORD *)v55 = v123;
                v122 = (uint64_t)(v55 + 4);
              }
              else
              {
                v126 = (char *)*v173;
                v127 = v55 - (_BYTE *)*v173;
                v128 = v127 >> 2;
                v129 = (v127 >> 2) + 1;
                if (v129 >> 62)
                  goto LABEL_170;
                v130 = v125 - (_QWORD)v126;
                if (v130 >> 1 > v129)
                  v129 = v130 >> 1;
                if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
                  v129 = 0x3FFFFFFFFFFFFFFFLL;
                v170 = v129;
                if (v129)
                {
                  if (v129 >> 62)
                    goto LABEL_171;
                  v131 = operator new(4 * v129);
                  v132 = &v131[4 * v128];
                  *v132 = v123;
                  v122 = (uint64_t)(v132 + 1);
                  if (v55 != v126)
                  {
LABEL_133:
                    v133 = v55 - 4 - v126;
                    if (v133 < 0xBC
                      || &v131[v127 - 4 - (v133 & 0xFFFFFFFFFFFFFFFCLL)] > &v131[v127 - 4]
                      || &v55[-(v133 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v55 - 4
                      || (unint64_t)(v55 - &v131[v127]) < 0x20)
                    {
                      v134 = v55;
                      v135 = v170;
                    }
                    else
                    {
                      v137 = (v133 >> 2) + 1;
                      v138 = 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
                      v134 = &v55[-v138];
                      v132 = (_DWORD *)((char *)v132 - v138);
                      v139 = &v131[4 * v128 - 16];
                      v140 = v55 - 16;
                      v141 = v137 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v142 = *(_OWORD *)v140;
                        *(v139 - 1) = *((_OWORD *)v140 - 1);
                        *v139 = v142;
                        v139 -= 2;
                        v140 -= 32;
                        v141 -= 8;
                      }
                      while (v141);
                      v135 = v170;
                      if (v137 == (v137 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_136:
                        a1[17] = v132;
                        a1[18] = v122;
                        a1[19] = &v131[4 * v135];
                        if (v126)
                          goto LABEL_137;
                        goto LABEL_138;
                      }
                    }
                    do
                    {
                      v136 = *((_DWORD *)v134 - 1);
                      v134 -= 4;
                      *--v132 = v136;
                    }
                    while (v134 != v126);
                    goto LABEL_136;
                  }
                }
                else
                {
                  v131 = 0;
                  v132 = (_DWORD *)(4 * v128);
                  *(_DWORD *)(4 * v128) = v123;
                  v122 = 4 * v128 + 4;
                  if (v55 != v126)
                    goto LABEL_133;
                }
                a1[17] = v132;
                a1[18] = v122;
                a1[19] = &v131[4 * v170];
                if (v126)
LABEL_137:
                  operator delete(v126);
LABEL_138:
                v120 = v167;
              }
              a1[18] = v122;
              v55 = (char *)v122;
            }
            *(_QWORD *)(a1[29] + 8 * v124) |= 1 << v123;
            if (++v121 == v120)
              goto LABEL_53;
            continue;
          }
        }
        *(_QWORD *)(*v172 + 8 * (v58 >> 6)) = v59 | (1 << v58);
        v78 = v171;
        v80 = v171[1];
        v79 = (unint64_t)v171[2];
        if ((unint64_t)v80 < v79)
        {
          *(_DWORD *)v80 = v58;
          v81 = (uint64_t)(v80 + 4);
LABEL_158:
          v78[1] = (char *)v81;
          v55 = (char *)(a1[18] - 4);
          a1[18] = v55;
          goto LABEL_53;
        }
        v107 = *v171;
        v108 = v80 - *v171;
        v109 = v108 >> 2;
        v110 = (v108 >> 2) + 1;
        if (v110 >> 62)
          goto LABEL_172;
        v111 = v79 - (_QWORD)v107;
        if (v111 >> 1 > v110)
          v110 = v111 >> 1;
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
          v112 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v112 = v110;
        if (v112)
        {
          if (v112 >> 62)
            goto LABEL_171;
          v113 = operator new(4 * v112);
          v114 = &v113[4 * v109];
          *(_DWORD *)v114 = v58;
          v81 = (uint64_t)(v114 + 4);
          if (v80 == v107)
            goto LABEL_156;
LABEL_150:
          v143 = v80 - 4 - v107;
          if (v143 < 0x2C)
            goto LABEL_178;
          if ((unint64_t)(v80 - &v113[v108]) < 0x20)
            goto LABEL_178;
          v144 = (v143 >> 2) + 1;
          v145 = 4 * (v144 & 0x7FFFFFFFFFFFFFF8);
          v146 = &v80[-v145];
          v114 -= v145;
          v147 = &v113[4 * v109 - 16];
          v148 = v80 - 16;
          v149 = v144 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v150 = *(_OWORD *)v148;
            *(v147 - 1) = *((_OWORD *)v148 - 1);
            *v147 = v150;
            v147 -= 2;
            v148 -= 32;
            v149 -= 8;
          }
          while (v149);
          v80 = v146;
          if (v144 != (v144 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_178:
            do
            {
              v151 = *((_DWORD *)v80 - 1);
              v80 -= 4;
              *((_DWORD *)v114 - 1) = v151;
              v114 -= 4;
            }
            while (v80 != v107);
          }
        }
        else
        {
          v113 = 0;
          v114 = (char *)(4 * v109);
          *(_DWORD *)(4 * v109) = v58;
          v81 = 4 * v109 + 4;
          if (v80 != v107)
            goto LABEL_150;
        }
LABEL_156:
        v152 = &v113[4 * v112];
        v78 = v171;
        *v171 = v114;
        v171[1] = (char *)v81;
        v171[2] = v152;
        if (v107)
          operator delete(v107);
        goto LABEL_158;
      }
      a1[18] = v57;
      v55 -= 4;
LABEL_53:
      v56 = (char *)*v173;
      if (*v173 == v55)
        goto LABEL_163;
    }
    v61 = *((_DWORD *)v55 - 2);
    v60 = v61;
    a1[18] = v55 - 8;
    v62 = v61;
    *(_QWORD *)(a1[14] + (((unint64_t)v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
    v63 = v168;
    v65 = (char *)v168[1];
    v64 = v168[2];
    if ((unint64_t)v65 < v64)
    {
      *(_DWORD *)v65 = v60;
      v66 = (uint64_t)(v65 + 4);
LABEL_93:
      v63[1] = v66;
      v96 = *(int *)(*a3 + 4 * v62);
      v97 = *(_QWORD *)(a1[7] + 8 * v96);
      v98 = a1[32];
      v99 = *(_QWORD *)(v98 + 8 * v96);
      if (v97 < v99)
      {
        v100 = a1[4];
        v101 = a1[29];
        do
        {
          while (1)
          {
            v102 = *(_DWORD *)(v100 + 4 * v97);
            v103 = (unint64_t)v102 >> 6;
            v104 = *(_QWORD *)(v101 + 8 * v103);
            if (((1 << v102) & v104) == 0)
              break;
            *(_QWORD *)(v101 + 8 * v103) = v104 & ~(1 << v102);
            if (++v97 >= v99)
              goto LABEL_52;
          }
          --v99;
          *(_DWORD *)(v100 + 4 * v97) = *(_DWORD *)(v100 + 4 * v99);
          *(_DWORD *)(v100 + 4 * v99) = v102;
          v105 = a1[1];
          v106 = *(_QWORD *)(v105 + 8 * v97);
          *(_QWORD *)(v105 + 8 * v97) = *(_QWORD *)(v105 + 8 * v99);
          *(_QWORD *)(v105 + 8 * v99) = v106;
        }
        while (v97 < v99);
      }
LABEL_52:
      *(_QWORD *)(v98 + 8 * v96) = v99;
      v55 = (char *)a1[18];
      goto LABEL_53;
    }
    v69 = (char *)*v168;
    v70 = (uint64_t)&v65[-*v168];
    v71 = v70 >> 2;
    v72 = (v70 >> 2) + 1;
    if (v72 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v73 = v64 - (_QWORD)v69;
    if (v73 >> 1 > v72)
      v72 = v73 >> 1;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
      v74 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    if (v74)
    {
      if (v74 >> 62)
        goto LABEL_171;
      v75 = operator new(4 * v74);
      v76 = &v75[4 * v71];
      *v76 = v60;
      v66 = (uint64_t)(v76 + 1);
      if (v65 != v69)
      {
LABEL_71:
        v77 = v65 - 4 - v69;
        if (v77 < 0x2C)
          goto LABEL_179;
        if ((unint64_t)(v65 - &v75[v70]) < 0x20)
          goto LABEL_179;
        v87 = (v77 >> 2) + 1;
        v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
        v89 = &v65[-v88];
        v76 = (_DWORD *)((char *)v76 - v88);
        v90 = &v75[4 * v71 - 16];
        v91 = v65 - 16;
        v92 = v87 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v93 = *(_OWORD *)v91;
          *(v90 - 1) = *((_OWORD *)v91 - 1);
          *v90 = v93;
          v90 -= 2;
          v91 -= 32;
          v92 -= 8;
        }
        while (v92);
        v65 = v89;
        if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_179:
          do
          {
            v94 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *--v76 = v94;
          }
          while (v65 != v69);
        }
      }
    }
    else
    {
      v75 = 0;
      v76 = (_DWORD *)(4 * v71);
      *(_DWORD *)(4 * v71) = v60;
      v66 = 4 * v71 + 4;
      if (v65 != v69)
        goto LABEL_71;
    }
    v95 = &v75[4 * v74];
    v63 = v168;
    *v168 = v76;
    v168[1] = v66;
    v168[2] = v95;
    if (v69)
      operator delete(v69);
    goto LABEL_93;
  }
LABEL_163:
  v159 = *v171;
  v160 = v171[1];
  if (*v171 != v160)
  {
    v161 = *v172;
    do
    {
      v162 = *(_DWORD *)v159;
      v159 += 4;
      *(_QWORD *)(v161 + (((unint64_t)v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v162);
    }
    while (v159 != v160);
  }
  v163 = (char *)*v168;
  v164 = (char *)v168[1];
  if ((char *)*v168 != v164)
  {
    v165 = *v172;
    do
    {
      v166 = *(_DWORD *)v163;
      v163 += 4;
      *(_QWORD *)(v165 + (((unint64_t)v166 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v166);
    }
    while (v163 != v164);
  }
}

int *operations_research::glop::TriangularMatrix::ComputeRowsToConsiderInSortedOrder(int *result, int **a2)
{
  int *v2;
  int *v3;
  int **v4;
  int *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int **v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  int *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  uint64_t v46;
  int *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  int v53;
  int *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  char v58;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = a2;
    v5 = result;
    v6 = *result;
    v7 = (unint64_t)((char *)v3 - (char *)v2) >> 2;
    if ((int)v7 > (int)((double)(int)v6 * 0.025))
    {
      v4[1] = v2;
      return result;
    }
    v8 = (int)((double)(int)v6 * 0.05);
    v9 = (uint64_t *)(result + 28);
    std::vector<BOOL>::resize((uint64_t)(result + 28), v6, 0);
    v10 = *v4;
    v11 = v4[1];
    v55 = (uint64_t *)(v5 + 28);
    if (*v4 != v11)
    {
      v12 = *v9;
      v13 = *v4;
      v14 = (uint64_t *)(v5 + 28);
      do
      {
        v15 = *v13++;
        *(_QWORD *)(v12 + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      }
      while (v13 != v11);
      v16 = 0;
      v51 = v8;
      v54 = v5;
      while (1)
      {
        v17 = v10[v16];
        v18 = *((_QWORD *)v5 + 7);
        v19 = *(_QWORD *)(v18 + 8 * v17);
        v20 = *(_QWORD *)(v18 + (((v17 << 32) + 0x100000000) >> 29));
        if (v19 < v20)
          break;
LABEL_36:
        if ((int)v7 <= v8)
        {
          ++v16;
          v10 = *v4;
          if (v16 < v4[1] - *v4)
            continue;
        }
        goto LABEL_38;
      }
      v52 = v16;
      v53 = v7 + v20 - v19;
      v21 = *v14;
      v56 = v20;
      while (1)
      {
        v23 = *(_DWORD *)(*((_QWORD *)v5 + 4) + 4 * v19);
        v24 = (unint64_t)v23 >> 6;
        if (((1 << v23) & *(_QWORD *)(v21 + 8 * v24)) != 0)
          goto LABEL_12;
        v26 = (char *)v4[1];
        v25 = (unint64_t)v4[2];
        if ((unint64_t)v26 >= v25)
          break;
        *(_DWORD *)v26 = v23;
        v22 = (uint64_t)(v26 + 4);
LABEL_11:
        v4[1] = (int *)v22;
        v21 = *v14;
        *(_QWORD *)(*v14 + 8 * v24) |= 1 << v23;
LABEL_12:
        if (++v19 == v20)
        {
          v16 = v52;
          LODWORD(v7) = v53;
          v8 = v51;
          goto LABEL_36;
        }
      }
      v27 = v4;
      v28 = (char *)*v4;
      v29 = v26 - (char *)*v4;
      v30 = v29 >> 2;
      v31 = (v29 >> 2) + 1;
      if (v31 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v32 = v25 - (_QWORD)v28;
      if (v32 >> 1 > v31)
        v31 = v32 >> 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
        v31 = 0x3FFFFFFFFFFFFFFFLL;
      v57 = v31;
      if (v31)
      {
        if (v31 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v33 = operator new(4 * v31);
        v34 = (int *)&v33[4 * v30];
        *v34 = v23;
        v22 = (uint64_t)(v34 + 1);
        if (v26 != v28)
          goto LABEL_23;
      }
      else
      {
        v33 = 0;
        v34 = (int *)(4 * v30);
        *(_DWORD *)(4 * v30) = v23;
        v22 = 4 * v30 + 4;
        if (v26 != v28)
        {
LABEL_23:
          v35 = v26 - 4 - v28;
          if (v35 >= 0x2C)
          {
            v36 = v26 - &v33[v29];
            v4 = v27;
            if (v36 >= 0x20)
            {
              v37 = (v35 >> 2) + 1;
              v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
              v39 = &v26[-v38];
              v34 = (int *)((char *)v34 - v38);
              v40 = &v33[4 * v30 - 16];
              v41 = v26 - 16;
              v42 = v37 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v43 = *(_OWORD *)v41;
                *(v40 - 1) = *((_OWORD *)v41 - 1);
                *v40 = v43;
                v40 -= 2;
                v41 -= 32;
                v42 -= 8;
              }
              while (v42);
              v26 = v39;
              if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_32;
            }
          }
          else
          {
            v4 = v27;
          }
          do
          {
            v44 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *--v34 = v44;
          }
          while (v26 != v28);
LABEL_32:
          *v4 = v34;
          v4[1] = (int *)v22;
          v4[2] = (int *)&v33[4 * v57];
          if (v28)
            operator delete(v28);
          v5 = v54;
          v14 = v55;
          v20 = v56;
          goto LABEL_11;
        }
      }
      v4 = v27;
      goto LABEL_32;
    }
LABEL_38:
    result = *v4;
    v45 = (char *)v4[1];
    if (*v4 != (int *)v45)
    {
      v46 = *v55;
      v47 = *v4;
      do
      {
        v48 = *v47++;
        *(_QWORD *)(v46 + (((unint64_t)v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v48);
      }
      while (v47 != (int *)v45);
    }
    if ((int)v7 <= v8)
    {
      v49 = 126 - 2 * __clz((v45 - (char *)result) >> 2);
      if (v45 == (char *)result)
        v50 = 0;
      else
        v50 = v49;
      return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::RowIndex_tag_,int> *,false>(result, v45, (uint64_t)&v58, v50, 1);
    }
    else
    {
      v4[1] = result;
    }
  }
  return result;
}

double operations_research::glop::TriangularMatrix::ComputeInverseInfinityNormUpperBound(operations_research::glop::TriangularMatrix *this)
{
  unint64_t v1;
  double v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  size_t v16;
  double *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  int *v28;
  double v29;
  double v30;
  uint64_t v31;
  double *v32;
  double *v33;
  double v34;
  double *v35;
  double v36;
  double v37;

  v1 = *((unsigned int *)this + 1);
  v2 = 1.0;
  if (*((_DWORD *)this + 26) == (_DWORD)v1)
    return v2;
  if ((int)v1 < 1)
  {
    v5 = 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    while (*(double *)(*((_QWORD *)this + 10) + 8 * v4) != 0.0)
    {
      v6 = *((_QWORD *)this + 7);
      v7 = *(_QWORD *)(v6 + 8 * v4);
      v8 = v4 + 1;
      v9 = *(_QWORD *)(v6 + 8 * (v4 + 1));
      v10 = v9 <= v7;
      v11 = v9 - v7;
      if (!v10)
      {
        v12 = (int *)(*((_QWORD *)this + 4) + 4 * v7);
        do
        {
          v13 = *v12++;
          if (v4 <= v13)
            goto LABEL_12;
        }
        while (--v11);
      }
      ++v4;
      v5 = v8 >= v1;
      if (v8 == v1)
        break;
    }
  }
LABEL_12:
  v14 = *(int *)this;
  if ((_DWORD)v14)
  {
    if ((v14 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (double *)operator new(8 * *(unsigned int *)this);
    v16 = 8 * v14;
    v17 = &v15[v14];
    memset_pattern16(v15, &unk_22DCE78C0, v16);
    if ((int)v1 < 1)
      goto LABEL_26;
    goto LABEL_17;
  }
  v17 = 0;
  v15 = 0;
  if ((int)v1 >= 1)
  {
LABEL_17:
    v18 = 0;
    v19 = *((_QWORD *)this + 10);
    v20 = *((_QWORD *)this + 7);
    do
    {
      LODWORD(v21) = v1 + ~v18;
      if (v5)
        v21 = v21;
      else
        v21 = v18;
      v22 = (int)v21;
      v23 = v15[v22] / fabs(*(double *)(v19 + v22 * 8));
      v15[v22] = v23;
      v24 = *(_QWORD *)(v20 + v22 * 8);
      v25 = *(_QWORD *)(v20 + (((v21 << 32) + 0x100000000) >> 29));
      v10 = v25 <= v24;
      v26 = v25 - v24;
      if (!v10)
      {
        v27 = (double *)(*((_QWORD *)this + 1) + 8 * v24);
        v28 = (int *)(*((_QWORD *)this + 4) + 4 * v24);
        do
        {
          v29 = *v27++;
          v30 = fabs(v29);
          v31 = *v28++;
          v15[v31] = v15[v31] + v23 * v30;
          --v26;
        }
        while (v26);
      }
      ++v18;
    }
    while (v18 != (_DWORD)v1);
  }
LABEL_26:
  v32 = v15;
  if (v15 != v17)
  {
    v33 = v15 + 1;
    v32 = v15;
    if (v15 + 1 != v17)
    {
      v34 = *v15;
      v32 = v15;
      v35 = v15 + 1;
      do
      {
        v36 = *v35++;
        v37 = v36;
        if (v34 < v36)
        {
          v34 = v37;
          v32 = v33;
        }
        v33 = v35;
      }
      while (v35 != v17);
    }
  }
  v2 = *v32;
  if (v15)
    operator delete(v15);
  return v2;
}

double std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, __int128 *a5, uint64_t a6, double result)
{
  uint64_t v8;
  int v9;
  int v10;
  char *v13;
  unint64_t v15;
  __int128 *v16;
  unint64_t v17;
  __n128 v18;
  _DWORD *v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  char *v29;
  __int128 *v30;
  int v31;
  char *v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  if (a4 >= 2)
  {
    v8 = a1;
    if (a4 == 2)
    {
      v9 = *((_DWORD *)a2 - 4);
      v10 = *(_DWORD *)a1;
      if (v9 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v9;
        *((_DWORD *)a2 - 4) = v10;
        result = *(double *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 - 1);
        *((double *)a2 - 1) = result;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if ((__int128 *)a1 != a2)
      {
        v19 = (_DWORD *)(a1 + 16);
        if ((__int128 *)(a1 + 16) != a2)
        {
          v20 = 0;
          v21 = (double *)a1;
          do
          {
            v23 = v19;
            v24 = *v19;
            v25 = *(_DWORD *)v21;
            if (v24 < *(_DWORD *)v21)
            {
              result = v21[3];
              v26 = v20;
              do
              {
                v27 = a1 + v26;
                *(_DWORD *)(v27 + 16) = v25;
                *(_QWORD *)(v27 + 24) = *(_QWORD *)(a1 + v26 + 8);
                if (!v26)
                {
                  v22 = a1;
                  goto LABEL_13;
                }
                v25 = *(_DWORD *)(v27 - 16);
                v26 -= 16;
              }
              while (v24 < v25);
              v22 = a1 + v26 + 16;
LABEL_13:
              *(_DWORD *)v22 = v24;
              *(double *)(v22 + 8) = result;
            }
            v19 = v23 + 4;
            v20 += 16;
            v21 = (double *)v23;
          }
          while (v23 + 4 != (_DWORD *)a2);
        }
      }
    }
    else
    {
      v13 = (char *)a5;
      v15 = a4 >> 1;
      v16 = (__int128 *)(a1 + 16 * (a4 >> 1));
      v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>((__int128 *)a1, v16, a3, v17, a5);
        v28 = (__int128 *)&v13[16 * v15];
        std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>((__int128 *)(v8 + 16 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), v28);
        v29 = &v13[16 * a4];
        v30 = v28;
        while (v30 != (__int128 *)v29)
        {
          v31 = *(_DWORD *)v30;
          if (*(_DWORD *)v30 < *(_DWORD *)v13)
          {
            v32 = (char *)v30;
          }
          else
          {
            v31 = *(_DWORD *)v13;
            v32 = v13;
          }
          result = *((double *)v32 + 1);
          if (*(_DWORD *)v30 < *(_DWORD *)v13)
            ++v30;
          else
            v13 += 16;
          *(_DWORD *)v8 = v31;
          *(double *)(v8 + 8) = result;
          v8 += 16;
          if (v13 == (char *)v28)
          {
            if (v30 != (__int128 *)v29)
            {
              v33 = 0;
              do
              {
                v34 = &v30[v33];
                v35 = v8 + v33 * 16;
                *(_DWORD *)v35 = v30[v33];
                result = *((double *)&v30[v33] + 1);
                *(double *)(v35 + 8) = result;
                ++v33;
              }
              while (v34 + 1 != (__int128 *)v29);
            }
            return result;
          }
        }
        if (v13 != (char *)v28)
        {
          v36 = 0;
          do
          {
            v37 = &v13[v36];
            v38 = v8 + v36;
            *(_DWORD *)v38 = *(_DWORD *)&v13[v36];
            result = *(double *)&v13[v36 + 8];
            *(double *)(v38 + 8) = result;
            v36 += 16;
          }
          while (v37 + 16 != (char *)v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(a1, v16, a3, v17, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(v8 + 16 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v13, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>((char *)v8, (char *)(v8 + 16 * (a4 >> 1)), (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v13, a6, v18);
      }
    }
  }
  return result;
}

__int128 *std::__stable_sort_move<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(__int128 *result, __int128 *a2, uint64_t a3, unint64_t a4, __int128 *a5)
{
  __int128 *v5;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  _DWORD *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  _DWORD *v15;
  int v16;
  char *v17;
  uint64_t v18;
  int v19;
  unint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;

  if (a4)
  {
    v5 = a5;
    v8 = result;
    if (a4 == 2)
    {
      v9 = a2 - 1;
      if (*((_DWORD *)a2 - 4) >= *(_DWORD *)result)
      {
        *a5 = *result;
        v10 = *v9;
      }
      else
      {
        *a5 = *v9;
        v10 = *result;
      }
      a5[1] = v10;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      v21 = a4 >> 1;
      v22 = a4 >> 1;
      v23 = &result[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(result, &result[v22], a3, a4 >> 1, a5, a4 >> 1);
      result = (__int128 *)std::__stable_sort<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(&v8[v22], a2, a3, a4 - v21, &v5[v22], a4 - v21);
      v24 = &v8[v22];
      while (v24 != a2)
      {
        if (*(_DWORD *)v24 >= *(_DWORD *)v8)
        {
          v25 = *v8++;
          *v5++ = v25;
          if (v8 == v23)
            goto LABEL_28;
        }
        else
        {
          v26 = *v24++;
          *v5++ = v26;
          if (v8 == v23)
          {
LABEL_28:
            if (v24 != a2)
            {
              v27 = 0;
              do
              {
                v5[v27] = v24[v27];
                ++v27;
              }
              while (&v24[v27] != a2);
            }
            return result;
          }
        }
      }
      if (v8 != v23)
      {
        v28 = 0;
        do
        {
          v5[v28] = v8[v28];
          ++v28;
        }
        while (&v8[v28] != v23);
      }
    }
    else if (result != a2)
    {
      *a5 = *result;
      v11 = result + 1;
      if (result + 1 != a2)
      {
        v12 = 0;
        v13 = a5;
        v14 = a5;
        do
        {
          while (1)
          {
            v15 = v11;
            v16 = *(_DWORD *)v14++;
            if (*v11 < v16)
              break;
            *v14 = *(_OWORD *)v11;
            v11 += 4;
            v12 += 16;
            v13 = v14;
            v8 = (__int128 *)v15;
            if (v15 + 4 == (_DWORD *)a2)
              return result;
          }
          *v14 = *v13;
          v17 = (char *)a5;
          if (v13 != a5)
          {
            v18 = v12;
            while (1)
            {
              v17 = (char *)a5 + v18;
              v19 = *(_DWORD *)((char *)a5 + v18 - 16);
              if (*v15 >= v19)
                break;
              *(_DWORD *)v17 = v19;
              *((_QWORD *)v17 + 1) = *((_QWORD *)v17 - 1);
              v18 -= 16;
              if (!v18)
              {
                v17 = (char *)a5;
                break;
              }
            }
          }
          *(_DWORD *)v17 = *v15;
          *((_QWORD *)v17 + 1) = *((_QWORD *)v8 + 3);
          v11 = v15 + 4;
          v12 += 16;
          v13 = v14;
          v8 = (__int128 *)v15;
        }
        while (v15 + 4 != (_DWORD *)a2);
      }
    }
  }
  return result;
}

double std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 a9)
{
  _DWORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *i;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  _BOOL4 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  BOOL v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;

  if (!a6)
    return a9.n128_f64[0];
  while (a6 > a8 && a5 > a8)
  {
    if (!a5)
      return a9.n128_f64[0];
    v12 = 0;
    v13 = *(_DWORD *)a2;
    v14 = -a5;
    while (1)
    {
      v15 = *(_DWORD *)((char *)v12 + (_QWORD)a1);
      if (v13 < v15)
        break;
      v12 += 4;
      if (__CFADD__(v14++, 1))
        return a9.n128_f64[0];
    }
    if (-v14 >= a6)
    {
      if (v14 == -1)
      {
        v66 = (uint64_t)v12 + (_QWORD)a1;
        *(_DWORD *)v66 = v13;
        *(_DWORD *)a2 = v15;
        a9.n128_u64[0] = *(_QWORD *)(v66 + 8);
        *(_QWORD *)(v66 + 8) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = a9.n128_u64[0];
        return a9.n128_f64[0];
      }
      if (v14 <= 0)
        v40 = -v14;
      else
        v40 = 1 - v14;
      v26 = v40 >> 1;
      v20 = &a1[16 * (v40 >> 1) + (_QWORD)v12];
      v19 = a2;
      if (a2 != a3)
      {
        v41 = (a3 - a2) >> 4;
        v19 = a2;
        do
        {
          v42 = v41 >> 1;
          v43 = &v19[16 * (v41 >> 1)];
          v45 = *(_DWORD *)v43;
          v44 = v43 + 16;
          v41 += ~(v41 >> 1);
          if (v45 < *(_DWORD *)v20)
            v19 = v44;
          else
            v41 = v42;
        }
        while (v41);
      }
      v18 = (v19 - a2) >> 4;
      if (v20 != a2)
      {
LABEL_21:
        if (v19 == a2)
        {
          v29 = v20;
        }
        else
        {
          v27 = *(_DWORD *)v20;
          *(_DWORD *)v20 = v13;
          *(_DWORD *)a2 = v27;
          v28 = *((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v28;
          v29 = v20 + 16;
          for (i = a2 + 16; i != v19; i += 16)
          {
            if (v29 == a2)
              a2 = i;
            v31 = *(_DWORD *)v29;
            *(_DWORD *)v29 = *(_DWORD *)i;
            *(_DWORD *)i = v31;
            v32 = *((_QWORD *)v29 + 1);
            *((_QWORD *)v29 + 1) = *((_QWORD *)i + 1);
            *((_QWORD *)i + 1) = v32;
            v29 += 16;
          }
          if (v29 != a2)
          {
            v33 = v29;
            v34 = a2;
            while (1)
            {
              v35 = *(_DWORD *)v33;
              *(_DWORD *)v33 = *(_DWORD *)v34;
              *(_DWORD *)v34 = v35;
              v36 = *((_QWORD *)v33 + 1);
              *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
              *((_QWORD *)v34 + 1) = v36;
              v33 += 16;
              v34 += 16;
              v37 = v33 == a2;
              if (v34 == v19)
              {
                if (v33 == a2)
                  goto LABEL_49;
                v34 = a2 + 16;
                while (1)
                {
                  v38 = *(_DWORD *)v33;
                  *(_DWORD *)v33 = *(_DWORD *)a2;
                  *(_DWORD *)a2 = v38;
                  v39 = *((_QWORD *)v33 + 1);
                  *((_QWORD *)v33 + 1) = *((_QWORD *)a2 + 1);
                  *((_QWORD *)a2 + 1) = v39;
                  v33 += 16;
                  v37 = v33 == a2;
                  if (v34 != v19)
                    break;
                  if (v33 == a2)
                    goto LABEL_49;
                }
              }
              if (v37)
                a2 = v34;
            }
          }
        }
        goto LABEL_49;
      }
    }
    else
    {
      if (a6 >= 0)
        v17 = a6;
      else
        v17 = a6 + 1;
      v18 = v17 >> 1;
      v19 = &a2[16 * (v17 >> 1)];
      v20 = a2;
      if ((_DWORD *)(a2 - a1) != v12)
      {
        v21 = (a2 - a1 - (uint64_t)v12) >> 4;
        v20 = (char *)v12 + (_QWORD)a1;
        do
        {
          v22 = v21 >> 1;
          v23 = &v20[16 * (v21 >> 1)];
          v25 = *(_DWORD *)v23;
          v24 = v23 + 16;
          v21 += ~(v21 >> 1);
          if (*(_DWORD *)v19 < v25)
            v21 = v22;
          else
            v20 = v24;
        }
        while (v21);
      }
      v26 = (v20 - a1 - (uint64_t)v12) >> 4;
      if (v20 != a2)
        goto LABEL_21;
    }
    v29 = v19;
LABEL_49:
    a5 = -(v26 + v14);
    v46 = a6 - v18;
    if (v26 + v18 >= a6 - (v26 + v18) - v14)
    {
      v50 = v19;
      v51 = a4;
      v52 = (char *)v12 + (_QWORD)a1;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>(v29, v50, a3, a4, a5, a6 - v18, a7, a8);
      a1 = v52;
      a2 = v20;
      a5 = v26;
      a3 = v29;
      a6 = v18;
      a4 = v51;
      if (!v18)
        return a9.n128_f64[0];
    }
    else
    {
      v47 = v20;
      v48 = a3;
      v49 = a4;
      std::__inplace_merge<std::_ClassicAlgPolicy,operations_research::glop::SparseVector<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,operations_research::glop::VectorIterator<operations_research::glop::SparseColumnEntry>>::CleanUp(void)::{lambda(std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&,std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double> const&)#1} &,std::__wrap_iter<std::pair<gtl::IntType<operations_research::glop::RowIndex_tag_,int>,double>*>>((char *)v12 + (_QWORD)a1, v47, v29, a4, v26, v18, a7, a8);
      a3 = v48;
      a1 = v29;
      a2 = v19;
      a6 = v46;
      a4 = v49;
      if (!v46)
        return a9.n128_f64[0];
    }
  }
  if (a5 <= a6)
  {
    if (a1 != a2)
    {
      v60 = 0;
      do
      {
        a9 = *(__n128 *)&a1[v60];
        *(__n128 *)&a7[v60] = a9;
        v60 += 16;
      }
      while (&a1[v60] != a2);
      if (v60)
      {
        v61 = &a7[v60];
        v62 = (uint64_t)&a7[v60 - 16];
        while (a2 != a3)
        {
          v63 = *(_DWORD *)a2;
          v64 = *(_DWORD *)a2 < *(_DWORD *)a7;
          if (*(_DWORD *)a2 < *(_DWORD *)a7)
          {
            v65 = a2;
          }
          else
          {
            v63 = *(_DWORD *)a7;
            v65 = a7;
          }
          if (*(_DWORD *)a2 < *(_DWORD *)a7)
            a2 += 16;
          a9.n128_u64[0] = *((_QWORD *)v65 + 1);
          if (!v64)
            a7 += 16;
          *(_DWORD *)a1 = v63;
          *((_QWORD *)a1 + 1) = a9.n128_u64[0];
          a1 += 16;
          if (v61 == a7)
            return a9.n128_f64[0];
        }
        v69 = 0;
        do
        {
          v70 = &a1[v69];
          v71 = &a7[v69];
          *(_DWORD *)v70 = *(_DWORD *)&a7[v69];
          a9.n128_u64[0] = *(_QWORD *)&a7[v69 + 8];
          *((_QWORD *)v70 + 1) = a9.n128_u64[0];
          v69 += 16;
        }
        while ((char *)v62 != v71);
      }
    }
  }
  else if (a3 != a2)
  {
    v53 = 0;
    do
    {
      a9 = *(__n128 *)&a2[v53];
      *(__n128 *)&a7[v53] = a9;
      v53 += 16;
    }
    while (&a2[v53] != a3);
    if (v53)
    {
      v54 = &a7[v53];
      v55 = a3 - 8;
      while (a2 != a1)
      {
        v56 = *((_DWORD *)a2 - 4);
        v57 = *((_DWORD *)v54 - 4);
        v58 = v57 < v56;
        if (v57 < v56)
        {
          v59 = a2;
        }
        else
        {
          v56 = *((_DWORD *)v54 - 4);
          v59 = v54;
        }
        if (v58)
          a2 -= 16;
        a9.n128_u64[0] = *((_QWORD *)v59 - 1);
        if (!v58)
          v54 -= 16;
        *((_DWORD *)v55 - 2) = v56;
        *(_QWORD *)v55 = a9.n128_u64[0];
        v55 -= 16;
        if (v54 == a7)
          return a9.n128_f64[0];
      }
      v67 = 0;
      do
      {
        v68 = &v55[v67];
        *((_DWORD *)v68 - 2) = *(_DWORD *)&v54[v67 - 16];
        a9.n128_u64[0] = *(_QWORD *)&v54[v67 - 8];
        *(_QWORD *)v68 = a9.n128_u64[0];
        v67 -= 16;
      }
      while (&v54[v67] != a7);
    }
  }
  return a9.n128_f64[0];
}

uint64_t *std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64x2_t v34;
  int64x2_t *v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 3)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 61)
      goto LABEL_38;
    v9 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 61)
LABEL_38:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v11;
    result = (uint64_t *)operator new(8 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v16 = (unint64_t *)result;
    if (v15 < 3)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = (unint64_t *)&result[v17 & 0x3FFFFFFFFFFFFFFCLL];
    v18 = vdupq_n_s64(v14);
    v19 = (int64x2_t *)(result + 2);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != (unint64_t *)v13);
    }
    goto LABEL_37;
  }
  v21 = *(uint64_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = v21 - v7;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = v21 - v7;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFFCLL];
    v25 = vdupq_lane_s64(*a3, 0);
    v26 = (int64x2_t *)(v7 + 2);
    v27 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL);
    v24 &= 3u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = &v21[v29];
  v31 = 8 * a2 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8;
  if (v31 < 0x98 || v21 < a3 + 1 && (uint64_t *)((char *)v21 + v31 + 8) > a3)
    goto LABEL_43;
  v32 = (v31 >> 3) + 1;
  v33 = &v21[v32 & 0x3FFFFFFFFFFFFFFCLL];
  v34 = vdupq_lane_s64(*a3, 0);
  v35 = (int64x2_t *)(v21 + 2);
  v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v35[-1] = v34;
    *v35 = v34;
    v35 += 2;
    v36 -= 4;
  }
  while (v36);
  v21 = v33;
  if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_43:
    do
      *v21++ = *a3;
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

void std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void std::vector<double>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void operations_research::sat::AllDifferentBinary(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  int64_t v9;
  char *v10;
  char *v11;

  v4 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = v3 - *(_QWORD *)a1;
  if (v3 == *(_QWORD *)a1)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a1);
    v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(_QWORD *)(a2 + 24) = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_24F980320;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v9);
    v8[1] = v10;
    v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(_QWORD *)(a2 + 24) = v8;
  if (v6)
    operator delete(v6);
}

void sub_22DA2BC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::AllDifferentOnBounds(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  int64_t v9;
  char *v10;
  char *v11;

  v4 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = v3 - *(_QWORD *)a1;
  if (v3 == *(_QWORD *)a1)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a1);
    v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(_QWORD *)(a2 + 24) = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_24F9805F8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v9);
    v8[1] = v10;
    v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(_QWORD *)(a2 + 24) = v8;
  if (v6)
    operator delete(v6);
}

void sub_22DA2BDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::AllDifferentAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  int64_t v9;
  char *v10;
  char *v11;

  v4 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = v3 - *(_QWORD *)a1;
  if (v3 == *(_QWORD *)a1)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a1);
    v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(_QWORD *)(a2 + 24) = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_24F980840;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v9);
    v8[1] = v10;
    v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(_QWORD *)(a2 + 24) = v8;
  if (v6)
    operator delete(v6);
}

void sub_22DA2BF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::AllDifferentConstraint::AllDifferentConstraint(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::vector<int> *v10;
  std::vector<int> *v11;
  std::vector<int> *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  signed int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _DWORD *v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  std::vector<int> *v52;
  unint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  std::vector<int>::size_type v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  std::vector<int> *v92;
  std::vector<int> *v93;
  std::vector<int> *v94;
  uint64_t v95;
  std::vector<int> *v96;
  uint64_t v97;
  int64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  std::vector<int>::value_type __u[2];
  _DWORD *v106;

  v5 = a1;
  *(_QWORD *)a1 = &off_24F980270;
  *(_DWORD *)(a1 + 8) = (a2[1] - *a2) >> 2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v102 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 32) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = a1 + 56;
  v7 = v6 + 24;
  *(_OWORD *)(v6 + 48) = 0u;
  v8 = (_QWORD *)(v6 + 48);
  v9 = v6 + 72;
  v10 = (std::vector<int> *)(v6 + 168);
  v11 = (std::vector<int> *)(v6 + 216);
  *(_OWORD *)(v6 + 240) = 0u;
  v12 = (std::vector<int> *)(v6 + 240);
  v96 = (std::vector<int> *)(v6 + 288);
  v97 = v6 + 264;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_QWORD *)(v6 + 304) = 0;
  *(_QWORD *)(v6 + 312) = a4;
  *(_QWORD *)(v6 + 320) = a5;
  v13 = *(int *)(v5 + 8);
  v103 = v5;
  v99 = (_QWORD *)(v6 + 24);
  v100 = (_QWORD *)v6;
  v101 = (_QWORD *)(v6 + 48);
  if ((_DWORD)v13)
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(v6, v13);
    v14 = *(int *)(v5 + 8);
    v15 = *(_QWORD *)(v5 + 80);
    v16 = (*(_QWORD *)(v5 + 88) - v15) >> 3;
    v17 = v14 >= v16;
    if (v14 > v16)
    {
      std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(v7, v14 - v16);
      v14 = *(int *)(v5 + 8);
      goto LABEL_7;
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v17 = 1;
  }
  if (!v17)
    *(_QWORD *)(v5 + 88) = v15 + 8 * v14;
LABEL_7:
  v19 = *(_QWORD *)(v5 + 104);
  v18 = *(_QWORD *)(v5 + 112);
  v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 3);
  if (v14 <= v20)
  {
    if (v14 < v20)
    {
      v21 = v19 + 24 * (int)v14;
      if (v18 != v21)
      {
        v22 = *(_QWORD *)(v5 + 112);
        do
        {
          v24 = *(void **)(v22 - 24);
          v22 -= 24;
          v23 = v24;
          if (v24)
          {
            *(_QWORD *)(v18 - 16) = v23;
            operator delete(v23);
          }
          v18 = v22;
        }
        while (v22 != v21);
      }
      *(_QWORD *)(v5 + 112) = v21;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v8, v14 - v20);
  }
  v25 = *(int *)(v5 + 8);
  if ((int)v25 > 0)
  {
    v92 = v12;
    v93 = v11;
    v94 = v10;
    v95 = v9;
    v26 = 0;
    v27 = 0x8000000000000000;
    v28 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      v29 = *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v26);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 376) + 40);
      v31 = *(_QWORD *)(v5 + 56);
      v32 = 8 * v26;
      *(_QWORD *)(v31 + v32) = *(_QWORD *)(v30 + 12 * v29);
      v33 = *(_QWORD *)(v30 + 12 * (v29 ^ 1));
      *(_QWORD *)(*(_QWORD *)(v5 + 80) + v32) = -v33;
      v34 = *(_QWORD *)(v31 + 8 * v26);
      if (v34 < v28)
        v28 = v34;
      if (v27 <= -v33)
        v27 = -v33;
      if (v34 + v33)
      {
        v50 = v27;
        if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)a3, v29))
          operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)a3, *(_DWORD *)(*v102 + 4 * v26));
        v51 = *(_QWORD *)(*v99 + 8 * v26) - *(_QWORD *)(*v100 + 8 * v26) + 1;
        v8 = v101;
        v52 = (std::vector<int> *)(*v101 + 24 * v26);
        v53 = v52->__end_ - v52->__begin_;
        if (v51 <= v53)
        {
          if (v51 < v53)
            v52->__end_ = &v52->__begin_[v51];
        }
        else
        {
          std::vector<int>::__append(v52, v51 - v53, &operations_research::sat::kFalseLiteralIndex);
        }
        operations_research::sat::IntegerEncoder::FullDomainEncoding(a3, *(_DWORD *)(*v102 + 4 * v26), (char **)__u);
        v54 = *(_DWORD **)__u;
        v55 = v106;
        v5 = v103;
        if (*(_DWORD **)__u != v106)
        {
          v56 = *(_QWORD *)(*v100 + 8 * v26);
          v57 = *(_DWORD **)__u;
          do
          {
            if (*(_QWORD *)v57 >= v56 && *(_QWORD *)(*v99 + 8 * v26) >= *(_QWORD *)v57)
              *(_DWORD *)(*(_QWORD *)(*v101 + 24 * v26) + 4 * (*(_QWORD *)v57 - v56)) = v57[2];
            v57 += 3;
          }
          while (v57 != v55);
        }
        if (v54)
        {
          v106 = v54;
          operator delete(v54);
        }
        v27 = v50;
        goto LABEL_19;
      }
      v35 = *v8 + 24 * v26;
      v37 = (uint64_t *)(v35 + 8);
      v36 = *(char **)(v35 + 8);
      v38 = *(_QWORD *)(v35 + 16);
      if ((unint64_t)v36 >= v38)
        break;
      *(_DWORD *)v36 = -2;
      *v37 = (uint64_t)(v36 + 4);
LABEL_19:
      ++v26;
      v25 = *(int *)(v5 + 8);
      if (v26 >= (uint64_t)v25)
      {
        v10 = v94;
        v9 = v95;
        v12 = v92;
        v11 = v93;
        goto LABEL_64;
      }
    }
    v98 = v27;
    v39 = *(char **)v35;
    v40 = (uint64_t)&v36[-*(_QWORD *)v35];
    v41 = v40 >> 2;
    v42 = (v40 >> 2) + 1;
    if (v42 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v43 = v38 - (_QWORD)v39;
    if (v43 >> 1 > v42)
      v42 = v43 >> 1;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
      v44 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v45 = v44;
      v46 = operator new(4 * v44);
      v44 = v45;
      v47 = &v46[4 * v41];
      *v47 = -2;
      v48 = (uint64_t)(v47 + 1);
      if (v36 != v39)
        goto LABEL_35;
    }
    else
    {
      v46 = 0;
      v47 = (_DWORD *)(4 * v41);
      *(_DWORD *)(4 * v41) = -2;
      v48 = 4 * v41 + 4;
      if (v36 != v39)
      {
LABEL_35:
        v49 = v36 - 4 - v39;
        if (v49 >= 0x2C)
        {
          v58 = v36 - &v46[v40];
          v5 = v103;
          if (v58 >= 0x20)
          {
            v59 = (v49 >> 2) + 1;
            v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
            v61 = &v36[-v60];
            v47 = (_DWORD *)((char *)v47 - v60);
            v62 = &v46[4 * v41 - 16];
            v63 = v36 - 16;
            v64 = v59 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v65 = *(_OWORD *)v63;
              *(v62 - 1) = *((_OWORD *)v63 - 1);
              *v62 = v65;
              v62 -= 2;
              v63 -= 32;
              v64 -= 8;
            }
            while (v64);
            v36 = v61;
            if (v59 == (v59 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_59;
          }
        }
        else
        {
          v5 = v103;
        }
        do
        {
          v66 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *--v47 = v66;
        }
        while (v36 != v39);
LABEL_59:
        *(_QWORD *)v35 = v47;
        *v37 = v48;
        *(_QWORD *)(v35 + 16) = &v46[4 * v44];
        if (v39)
          operator delete(v39);
        v8 = v101;
        v27 = v98;
        *v37 = v48;
        goto LABEL_19;
      }
    }
    v5 = v103;
    goto LABEL_59;
  }
  v28 = 0x7FFFFFFFFFFFFFFFLL;
  v27 = 0x8000000000000000;
LABEL_64:
  *(_QWORD *)(v5 + 40) = v28;
  *(_QWORD *)(v5 + 48) = v27 - v28 + 1;
  v68 = *(_QWORD *)(v5 + 128);
  v67 = *(_QWORD *)(v5 + 136);
  v69 = 0xAAAAAAAAAAAAAAABLL * ((v67 - v68) >> 3);
  if (v25 <= v69)
  {
    if (v25 < v69)
    {
      v70 = v68 + 24 * (int)v25;
      if (v67 != v70)
      {
        v71 = *(_QWORD *)(v5 + 136);
        do
        {
          v73 = *(void **)(v71 - 24);
          v71 -= 24;
          v72 = v73;
          if (v73)
          {
            *(_QWORD *)(v67 - 16) = v72;
            operator delete(v72);
          }
          v67 = v71;
        }
        while (v71 != v70);
      }
      *(_QWORD *)(v5 + 136) = v70;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(v9, v25 - v69);
  }
  v74 = *(int *)(v5 + 8);
  __u[0] = -1;
  std::vector<int>::assign(v10, v74, __u);
  v75 = *(int *)(v5 + 8);
  v76 = *(_QWORD *)(v5 + 272);
  v77 = (*(_QWORD *)(v5 + 280) - v76) >> 2;
  if (v75 <= v77)
  {
    if (v75 < v77)
      *(_QWORD *)(v5 + 280) = v76 + 4 * v75;
  }
  else
  {
    std::vector<int>::__append(v11, v75 - v77);
    v75 = *(int *)(v5 + 8);
  }
  v78 = *(_QWORD *)(v5 + 296);
  v79 = (*(_QWORD *)(v5 + 304) - v78) >> 2;
  if (v75 <= v79)
  {
    if (v75 < v79)
      *(_QWORD *)(v5 + 304) = v78 + 4 * v75;
  }
  else
  {
    std::vector<int>::__append(v12, v75 - v79);
    v75 = *(int *)(v5 + 8);
  }
  v80 = v75 + *(_QWORD *)(v5 + 48) + 1;
  v82 = *(_QWORD *)(v5 + 320);
  v81 = *(_QWORD *)(v5 + 328);
  v83 = 0xAAAAAAAAAAAAAAABLL * ((v81 - v82) >> 3);
  if (v80 <= v83)
  {
    if (v80 < v83)
    {
      v84 = v82 + 24 * v80;
      if (v81 != v84)
      {
        v85 = *(_QWORD *)(v5 + 328);
        do
        {
          v87 = *(void **)(v85 - 24);
          v85 -= 24;
          v86 = v87;
          if (v87)
          {
            *(_QWORD *)(v81 - 16) = v86;
            operator delete(v86);
          }
          v81 = v85;
        }
        while (v85 != v84);
      }
      *(_QWORD *)(v5 + 328) = v84;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(v97, v80 - v83);
  }
  v88 = *(int *)(v5 + 8) + *(_QWORD *)(v5 + 48) + 1;
  v89 = *(_QWORD *)(v5 + 344);
  v90 = (*(_QWORD *)(v5 + 352) - v89) >> 2;
  if (v88 <= v90)
  {
    if (v88 < v90)
      *(_QWORD *)(v5 + 352) = v89 + 4 * v88;
  }
  else
  {
    std::vector<int>::__append(v96, v88 - v90);
  }
  return v5;
}

void sub_22DA2C65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, uint64_t a15, void **a16, void **a17, void **a18, void **a19, _QWORD *a20)
{
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void **v37;

  v37 = v22;
  v25 = *a13;
  if (*a13)
  {
    a20[44] = v25;
    operator delete(v25);
    std::vector<std::vector<int>>::~vector[abi:ne180100](a14);
    v26 = *v23;
    if (!*v23)
    {
LABEL_3:
      v27 = *v37;
      if (!*v37)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else
  {
    std::vector<std::vector<int>>::~vector[abi:ne180100](a14);
    v26 = *v23;
    if (!*v23)
      goto LABEL_3;
  }
  a20[38] = v26;
  operator delete(v26);
  v27 = *v37;
  if (!*v37)
  {
LABEL_4:
    v28 = (void *)a20[31];
    if (!v28)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  a20[35] = v27;
  operator delete(v27);
  v28 = (void *)a20[31];
  if (!v28)
  {
LABEL_5:
    v29 = *v21;
    if (!*v21)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  a20[32] = v28;
  operator delete(v28);
  v29 = *v21;
  if (!*v21)
  {
LABEL_6:
    v30 = a20;
    v31 = (void *)a20[25];
    if (!v31)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  a20[29] = v29;
  operator delete(v29);
  v30 = a20;
  v31 = (void *)a20[25];
  if (!v31)
  {
LABEL_7:
    v32 = (void *)v30[22];
    if (!v32)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  v30[26] = v31;
  operator delete(v31);
  v32 = (void *)v30[22];
  if (!v32)
  {
LABEL_8:
    v33 = (void *)a20[19];
    if (!v33)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_20:
  operator delete(v32);
  v33 = (void *)a20[19];
  if (!v33)
  {
LABEL_10:
    std::vector<std::vector<int>>::~vector[abi:ne180100](v20);
    std::vector<std::vector<int>>::~vector[abi:ne180100](a18);
    v34 = *a16;
    if (*a16)
    {
      a20[11] = v34;
      operator delete(v34);
      v35 = *a17;
      if (!*a17)
      {
LABEL_12:
        v36 = *a19;
        if (!*a19)
          goto LABEL_13;
        goto LABEL_24;
      }
    }
    else
    {
      v35 = *a17;
      if (!*a17)
        goto LABEL_12;
    }
    a20[8] = v35;
    operator delete(v35);
    v36 = *a19;
    if (!*a19)
LABEL_13:
      _Unwind_Resume(a1);
LABEL_24:
    a20[3] = v36;
    operator delete(v36);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v33);
  goto LABEL_10;
}

void operations_research::sat::AllDifferentConstraint::RegisterWith(operations_research::sat::AllDifferentConstraint *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  operations_research::sat::GenericLiteralWatcher *v2;
  operations_research::sat::AllDifferentConstraint *v3;
  int v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  unint64_t **v33;
  unint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  _OWORD *v49;
  unint64_t *v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  void *v77;
  unint64_t **v78;
  unint64_t *v79;
  uint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  _OWORD *v96;
  unint64_t *v97;
  uint64_t v98;
  __int128 v99;
  unint64_t v100;
  unsigned int **v101;
  unsigned int **v102;
  unint64_t v103;
  operations_research::sat::AllDifferentConstraint *v104;
  unsigned int *v105;
  operations_research::sat::GenericLiteralWatcher *v106;
  unint64_t v107;
  _QWORD *v108;

  v2 = a2;
  v3 = this;
  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v2, v4, 2);
  v5 = (unsigned int **)*((_QWORD *)v3 + 13);
  v101 = (unsigned int **)*((_QWORD *)v3 + 14);
  if (v5 != v101)
  {
    v107 = *(_QWORD *)&v4 | 0xFFFFFFFF00000000;
    v108 = (_QWORD *)((char *)v2 + 64);
    v104 = v3;
    v106 = v2;
    while (1)
    {
      v7 = *v5;
      v6 = v5[1];
      v102 = v5;
      v105 = v6;
      if (*v5 != v6)
        break;
LABEL_3:
      v5 = v102 + 3;
      if (v102 + 3 == v101)
        return;
    }
    while (1)
    {
      v9 = *v7;
      if ((v9 & 0x80000000) != 0
        || ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 46) + 24) + ((v9 >> 3) & 0x1FFFFFF8)) >> (v9 & 0x3E)) & 3) != 0)
      {
        goto LABEL_8;
      }
      v10 = (_QWORD *)*((_QWORD *)v2 + 8);
      v11 = (_QWORD *)*((_QWORD *)v2 + 9);
      v12 = v11 - v10;
      v13 = 0xAAAAAAAAAAAAAAABLL * v12;
      if ((int)v9 >= -1431655765 * (int)v12)
      {
        v14 = (v9 << 32) + 0x100000000;
        v15 = v14 >> 32;
        v16 = (v14 >> 32) - v13;
        if (v14 >> 32 <= v13)
        {
          if (v14 >> 32 < v13)
          {
            v29 = &v10[3 * SHIDWORD(v14)];
            if (v11 != v29)
            {
              v30 = (_QWORD *)*((_QWORD *)v2 + 9);
              do
              {
                v32 = (void *)*(v30 - 3);
                v30 -= 3;
                v31 = v32;
                if (v32)
                {
                  *(v11 - 2) = v31;
                  operator delete(v31);
                }
                v11 = v30;
              }
              while (v30 != v29);
            }
            *((_QWORD *)v2 + 9) = v29;
          }
        }
        else
        {
          v17 = *((_QWORD *)v2 + 10);
          if (0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v11) >> 3) >= v16)
          {
            bzero(*((void **)v2 + 9), 24 * ((24 * v16 - 24) / 0x18) + 24);
            *((_QWORD *)v2 + 9) = &v11[3 * ((24 * v16 - 24) / 0x18) + 3];
          }
          else
          {
            if (v14 < 0)
              goto LABEL_111;
            if (0x5555555555555556 * ((v17 - (uint64_t)v10) >> 3) > v15)
              v15 = 0x5555555555555556 * ((v17 - (uint64_t)v10) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v10) >> 3) >= 0x555555555555555)
              v15 = 0xAAAAAAAAAAAAAAALL;
            if (v15 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_110;
            v18 = 24 * v15;
            v19 = (char *)operator new(24 * v15);
            v20 = &v19[24 * v13];
            v21 = &v19[v18];
            bzero(v20, 24 * ((24 * v16 - 24) / 0x18) + 24);
            v22 = &v20[24 * ((24 * v16 - 24) / 0x18) + 24];
            if (v11 == v10)
            {
              *((_QWORD *)v2 + 8) = v20;
              *((_QWORD *)v2 + 9) = v22;
              *((_QWORD *)v2 + 10) = v21;
            }
            else
            {
              do
              {
                v23 = v20;
                *((_QWORD *)v20 - 2) = 0;
                *((_QWORD *)v20 - 1) = 0;
                v24 = *(_OWORD *)(v11 - 3);
                v11 -= 3;
                *(_OWORD *)(v20 - 24) = v24;
                v20 -= 24;
                *((_QWORD *)v23 - 1) = v11[2];
                *v11 = 0;
                v11[1] = 0;
                v11[2] = 0;
              }
              while (v11 != v10);
              v11 = (_QWORD *)*((_QWORD *)v2 + 8);
              v25 = (_QWORD *)*((_QWORD *)v2 + 9);
              *((_QWORD *)v2 + 8) = v20;
              *((_QWORD *)v2 + 9) = v22;
              *((_QWORD *)v2 + 10) = v21;
              if (v25 != v11)
              {
                v26 = v25;
                do
                {
                  v28 = (void *)*(v26 - 3);
                  v26 -= 3;
                  v27 = v28;
                  if (v28)
                  {
                    *(v25 - 2) = v27;
                    operator delete(v27);
                  }
                  v25 = v26;
                }
                while (v26 != v11);
              }
            }
            if (v11)
              operator delete(v11);
          }
        }
      }
      v33 = (unint64_t **)(*v108 + 24 * v9);
      v35 = (uint64_t *)(v33 + 1);
      v34 = v33[1];
      v36 = (unint64_t)v33[2];
      if ((unint64_t)v34 < v36)
      {
        *v34 = v107;
        v37 = (uint64_t)(v34 + 1);
        goto LABEL_59;
      }
      v38 = *v33;
      v39 = (char *)v34 - (char *)*v33;
      v40 = v39 >> 3;
      v41 = (v39 >> 3) + 1;
      if (v41 >> 61)
        goto LABEL_109;
      v42 = v36 - (_QWORD)v38;
      if (v42 >> 2 > v41)
        v41 = v42 >> 2;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      v103 = v41;
      if (v41)
        break;
      v43 = 0;
      v44 = (unint64_t *)(8 * v40);
      *(_QWORD *)(8 * v40) = v107;
      v37 = 8 * v40 + 8;
      if (v34 != v38)
        goto LABEL_50;
LABEL_57:
      *v33 = v44;
      *v35 = v37;
      v33[2] = (unint64_t *)&v43[8 * v103];
      if (v34)
        operator delete(v34);
LABEL_59:
      v2 = v106;
      *v35 = v37;
      v54 = (int)v9 ^ 1;
      v55 = (_QWORD *)*((_QWORD *)v106 + 8);
      v56 = (_QWORD *)*((_QWORD *)v106 + 9);
      v57 = v56 - v55;
      v58 = 0xAAAAAAAAAAAAAAABLL * v57;
      if ((int)v54 >= -1431655765 * (int)v57)
      {
        v59 = (v54 << 32) + 0x100000000;
        v60 = v59 >> 32;
        v61 = (v59 >> 32) - v58;
        if (v59 >> 32 <= v58)
        {
          if (v59 >> 32 < v58)
          {
            v74 = &v55[3 * SHIDWORD(v59)];
            if (v56 != v74)
            {
              v75 = (_QWORD *)*((_QWORD *)v106 + 9);
              do
              {
                v77 = (void *)*(v75 - 3);
                v75 -= 3;
                v76 = v77;
                if (v77)
                {
                  *(v56 - 2) = v76;
                  operator delete(v76);
                }
                v56 = v75;
              }
              while (v75 != v74);
            }
            *((_QWORD *)v106 + 9) = v74;
          }
        }
        else
        {
          v62 = *((_QWORD *)v106 + 10);
          if (0xAAAAAAAAAAAAAAABLL * ((v62 - (uint64_t)v56) >> 3) >= v61)
          {
            bzero(*((void **)v106 + 9), 24 * ((24 * v61 - 24) / 0x18) + 24);
            *((_QWORD *)v106 + 9) = &v56[3 * ((24 * v61 - 24) / 0x18) + 3];
          }
          else
          {
            if (v59 < 0)
LABEL_111:
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v62 - (uint64_t)v55) >> 3) > v60)
              v60 = 0x5555555555555556 * ((v62 - (uint64_t)v55) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v62 - (uint64_t)v55) >> 3) >= 0x555555555555555)
              v60 = 0xAAAAAAAAAAAAAAALL;
            if (v60 > 0xAAAAAAAAAAAAAAALL)
LABEL_110:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v63 = 24 * v60;
            v64 = (char *)operator new(24 * v60);
            v65 = &v64[24 * v58];
            v66 = &v64[v63];
            bzero(v65, 24 * ((24 * v61 - 24) / 0x18) + 24);
            v67 = &v65[24 * ((24 * v61 - 24) / 0x18) + 24];
            if (v56 == v55)
            {
              *((_QWORD *)v106 + 8) = v65;
              *((_QWORD *)v106 + 9) = v67;
              *((_QWORD *)v106 + 10) = v66;
            }
            else
            {
              do
              {
                v68 = v65;
                *((_QWORD *)v65 - 2) = 0;
                *((_QWORD *)v65 - 1) = 0;
                v69 = *(_OWORD *)(v56 - 3);
                v56 -= 3;
                *(_OWORD *)(v65 - 24) = v69;
                v65 -= 24;
                *((_QWORD *)v68 - 1) = v56[2];
                *v56 = 0;
                v56[1] = 0;
                v56[2] = 0;
              }
              while (v56 != v55);
              v56 = (_QWORD *)*((_QWORD *)v106 + 8);
              v70 = (_QWORD *)*((_QWORD *)v106 + 9);
              *((_QWORD *)v106 + 8) = v65;
              *((_QWORD *)v106 + 9) = v67;
              *((_QWORD *)v106 + 10) = v66;
              if (v70 != v56)
              {
                v71 = v70;
                do
                {
                  v73 = (void *)*(v71 - 3);
                  v71 -= 3;
                  v72 = v73;
                  if (v73)
                  {
                    *(v70 - 2) = v72;
                    operator delete(v72);
                  }
                  v70 = v71;
                }
                while (v71 != v56);
              }
            }
            if (v56)
              operator delete(v56);
          }
        }
      }
      v78 = (unint64_t **)(*v108 + 24 * (int)v54);
      v80 = (uint64_t *)(v78 + 1);
      v79 = v78[1];
      v82 = v78 + 2;
      v81 = (unint64_t)v78[2];
      if ((unint64_t)v79 < v81)
      {
        *v79 = v107;
        v8 = (uint64_t)(v79 + 1);
        goto LABEL_7;
      }
      v83 = *v78;
      v84 = (char *)v79 - (char *)*v78;
      v85 = v84 >> 3;
      v86 = (v84 >> 3) + 1;
      if (v86 >> 61)
LABEL_109:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v87 = v81 - (_QWORD)v83;
      if (v87 >> 2 > v86)
        v86 = v87 >> 2;
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
        v88 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v88 = v86;
      if (v88)
      {
        if (v88 >> 61)
          goto LABEL_110;
        v89 = operator new(8 * v88);
        v90 = (unint64_t *)&v89[8 * v85];
        *v90 = v107;
        v8 = (uint64_t)(v90 + 1);
        if (v79 == v83)
        {
LABEL_99:
          v2 = v106;
          *v78 = v90;
          *v80 = v8;
          *v82 = &v89[8 * v88];
          if (!v79)
            goto LABEL_7;
LABEL_107:
          operator delete(v79);
          goto LABEL_7;
        }
      }
      else
      {
        v89 = 0;
        v90 = (unint64_t *)(8 * v85);
        *(_QWORD *)(8 * v85) = v107;
        v8 = 8 * v85 + 8;
        if (v79 == v83)
          goto LABEL_99;
      }
      v91 = (char *)(v79 - 1) - (char *)v83;
      if (v91 < 0x58)
      {
        v2 = v106;
        do
        {
LABEL_105:
          v100 = *--v79;
          *--v90 = v100;
        }
        while (v79 != v83);
        goto LABEL_106;
      }
      v92 = (char *)v79 - &v89[v84];
      v2 = v106;
      if (v92 < 0x20)
        goto LABEL_105;
      v93 = (v91 >> 3) + 1;
      v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
      v95 = &v79[v94 / 0xFFFFFFFFFFFFFFF8];
      v90 = (unint64_t *)((char *)v90 - v94);
      v96 = &v89[8 * v85 - 16];
      v97 = v79 - 2;
      v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *(_OWORD *)v97;
        *(v96 - 1) = *((_OWORD *)v97 - 1);
        *v96 = v99;
        v96 -= 2;
        v97 -= 4;
        v98 -= 4;
      }
      while (v98);
      v79 = v95;
      if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_105;
LABEL_106:
      v79 = *v78;
      *v78 = v90;
      *v80 = v8;
      *v82 = &v89[8 * v88];
      if (v79)
        goto LABEL_107;
LABEL_7:
      v3 = v104;
      v6 = v105;
      *v80 = v8;
LABEL_8:
      if (++v7 == v6)
        goto LABEL_3;
    }
    if (v41 >> 61)
      goto LABEL_110;
    v43 = operator new(8 * v41);
    v44 = (unint64_t *)&v43[8 * v40];
    *v44 = v107;
    v37 = (uint64_t)(v44 + 1);
    if (v34 == v38)
      goto LABEL_57;
LABEL_50:
    v45 = (char *)(v34 - 1) - (char *)v38;
    if (v45 < 0x58)
      goto LABEL_114;
    if ((unint64_t)((char *)v34 - &v43[v39]) < 0x20)
      goto LABEL_114;
    v46 = (v45 >> 3) + 1;
    v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    v48 = &v34[v47 / 0xFFFFFFFFFFFFFFF8];
    v44 = (unint64_t *)((char *)v44 - v47);
    v49 = &v43[8 * v40 - 16];
    v50 = v34 - 2;
    v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *v49 = v52;
      v49 -= 2;
      v50 -= 4;
      v51 -= 4;
    }
    while (v51);
    v34 = v48;
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_114:
      do
      {
        v53 = *--v34;
        *--v44 = v53;
      }
      while (v34 != v38);
    }
    v34 = *v33;
    goto LABEL_57;
  }
}

uint64_t operations_research::sat::AllDifferentConstraint::MakeAugmentingPath(operations_research::sat::AllDifferentConstraint *this, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int **v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v2 = 0;
  v3 = (_DWORD *)*((_QWORD *)this + 34);
  *v3 = a2;
  v4 = *((_QWORD *)this + 22);
  *(_QWORD *)(v4 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v5 = *((_QWORD *)this + 37);
  *(_DWORD *)(v5 + 4 * a2) = -1;
  v6 = *((_QWORD *)this + 16);
  v7 = 1;
  while (1)
  {
    v8 = v3[v2];
    v9 = (int **)(v6 + 24 * v8);
    v11 = *v9;
    v10 = v9[1];
    if (v11 != v10)
      break;
LABEL_2:
    if (++v2 >= v7)
      return 0;
  }
  v12 = *((_QWORD *)this + 19);
  while (1)
  {
    v13 = *v11;
    v14 = (unint64_t)*v11 >> 6;
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (((1 << *v11) & v15) != 0)
      goto LABEL_6;
    *(_QWORD *)(v12 + 8 * v14) = (1 << v13) | v15;
    v16 = *((_QWORD *)this + 25);
    v17 = *(_DWORD *)(v16 + 4 * v13);
    if (v17 == -1)
      break;
    *(_QWORD *)(v4 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v3[v7++] = v17;
    *(_DWORD *)(v5 + 4 * v17) = v8;
LABEL_6:
    if (++v11 == v10)
      goto LABEL_2;
  }
  if (v8 != -1)
  {
    v18 = *((_QWORD *)this + 28);
    do
    {
      v19 = 4 * v8;
      v20 = *(_DWORD *)(v18 + v19);
      *(_DWORD *)(v18 + v19) = v13;
      *(_DWORD *)(v16 + 4 * v13) = v8;
      v8 = *(_DWORD *)(v5 + v19);
      v13 = v20;
    }
    while (v8 != -1);
  }
  return 1;
}

uint64_t operations_research::sat::AllDifferentConstraint::Propagate(char **this)
{
  operations_research::sat::AllDifferentConstraint *v1;
  std::vector<int> *v2;
  uint64_t *v3;
  std::vector<int>::size_type value;
  std::vector<int>::size_type begin_low;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _DWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::vector<int>::pointer begin;
  uint64_t v48;
  int v49;
  std::vector<int>::pointer v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int *v70;
  int v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  int *v80;
  unint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  std::vector<int> *v92;
  _DWORD *v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int *v98;
  uint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  int *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  _OWORD *v113;
  int *v114;
  uint64_t v115;
  __int128 v116;
  int v117;
  uint64_t v119;
  uint64_t i;
  _DWORD *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _DWORD *v137;
  operations_research::sat::AllDifferentConstraint *v138;
  _QWORD *v139;
  int v140;
  int v141;
  operations_research::sat::AllDifferentConstraint *v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  _BYTE *v153;
  _DWORD *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  _OWORD *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t *v169;
  unint64_t v170;
  _QWORD *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  _DWORD *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  _OWORD *v183;
  char *v184;
  uint64_t v185;
  __int128 v186;
  int v187;
  operations_research::sat::AllDifferentConstraint *v188;
  int v189;
  _DWORD *v190;
  int v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  _DWORD *v199;
  void *v200;
  int v201;
  uint64_t v202;
  int v203;
  _DWORD *v204;
  int v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  int *v211;
  uint64_t v212;
  unint64_t v213;
  int *v214;
  uint64_t v215;
  _BYTE *v216;
  uint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  __int128 *v232;
  uint64_t v233;
  __int128 v234;
  int v235;
  unint64_t v236;
  _BYTE *v237;
  uint64_t v238;
  _BYTE *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  int64_t v243;
  unint64_t v244;
  char *v245;
  char *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  __int128 *v252;
  uint64_t v253;
  __int128 v254;
  int v255;
  uint64_t v256;
  int *v257;
  int *v258;
  int v259;
  uint64_t v260;
  int v261;
  _BYTE *v262;
  _BYTE *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  int64_t v267;
  unint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  __int128 *v277;
  uint64_t v278;
  __int128 v279;
  int v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  char *v287;
  char *v288;
  int v290;
  uint64_t v291;
  uint64_t v292;
  int *v293;
  uint64_t v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t EmptyVectorToStoreReason;
  int v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  BOOL v311;
  int *v312;
  int v313;
  unint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  _BYTE *v322;
  int *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  _OWORD *v328;
  char *v329;
  uint64_t v330;
  __int128 v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int *v336;
  std::vector<int> *v337;
  uint64_t v338;
  std::vector<int> *v339;
  uint64_t v340;
  _DWORD *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  int v347;
  uint64_t v348;
  unint64_t v349;
  void **v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  _QWORD *v354;
  operations_research::sat::AllDifferentConstraint *v355;
  std::vector<int>::value_type __u[4];
  void *v357[2];
  __int128 v358;
  void *v359[2];
  void *__p[2];
  __int128 v361;
  std::vector<int>::value_type v362[3];

  v1 = (operations_research::sat::AllDifferentConstraint *)this;
  v2 = (std::vector<int> *)(this + 28);
  v3 = (uint64_t *)(this + 31);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(this + 31, this[28], this[29], (this[29] - this[28]) >> 2);
  value = (std::vector<int>::size_type)v2[-8].__end_cap_.__value_;
  __u[0] = -1;
  v337 = v2 - 1;
  std::vector<int>::assign(v2 - 1, value, __u);
  begin_low = SLODWORD(v2[-9].__begin_);
  __u[0] = -1;
  std::vector<int>::assign(v2, begin_low, __u);
  v339 = v2;
  LODWORD(v6) = v2[-9].__begin_;
  v355 = v1;
  if ((int)v6 < 1)
    goto LABEL_105;
  v7 = 0;
  v8 = *((_QWORD *)v1 + 16);
  do
  {
    v9 = (char **)(v8 + 24 * v7);
    v10 = *v9;
    v9[1] = *v9;
    LODWORD(v9) = *(_DWORD *)(*((_QWORD *)v1 + 2) + 4 * v7);
    v11 = *(_QWORD *)(*((_QWORD *)v1 + 47) + 40);
    v12 = *(_QWORD *)(v11 + 12 * (int)v9);
    v13 = *(_QWORD *)(v11 + 12 * (int)(v9 ^ 1));
    v14 = v10;
    if (v12 <= -v13)
    {
      v15 = 1 - v13;
      v340 = v15;
      v344 = v7;
      while (1)
      {
        v17 = *(_QWORD *)(*((_QWORD *)v1 + 7) + 8 * v7);
        v18 = &operations_research::sat::kFalseLiteralIndex;
        v19 = __OFSUB__(v12, v17);
        v20 = v12 - v17;
        if (v20 < 0 == v19)
        {
          v18 = &operations_research::sat::kFalseLiteralIndex;
          if (*(_QWORD *)(*((_QWORD *)v1 + 10) + 8 * v7) >= v12)
            v18 = (int *)(*(_QWORD *)(*((_QWORD *)v1 + 13) + 24 * v7) + 4 * v20);
        }
        v21 = *v18;
        if (*v18 == -3
          || v21 != -2
          && ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 46) + 24)
                         + (((unint64_t)v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v21 & 0x3F ^ 1u)) & 1) != 0)
        {
          goto LABEL_8;
        }
        v22 = v12 - *((_DWORD *)v1 + 10);
        v23 = *((_QWORD *)v1 + 16) + 24 * v7;
        v25 = (uint64_t *)(v23 + 8);
        v24 = *(char **)(v23 + 8);
        v26 = *(_QWORD *)(v23 + 16);
        if ((unint64_t)v24 >= v26)
          break;
        *(_DWORD *)v24 = v22;
        v16 = (uint64_t)(v24 + 4);
LABEL_7:
        *v25 = v16;
LABEL_8:
        if (++v12 == v15)
        {
          v8 = *((_QWORD *)v1 + 16);
          v10 = *(char **)(v8 + 24 * v7);
          v14 = *(char **)(v8 + 24 * v7 + 8);
          goto LABEL_37;
        }
      }
      v27 = *(char **)v23;
      v28 = (uint64_t)&v24[-*(_QWORD *)v23];
      v29 = v28 >> 2;
      v30 = (v28 >> 2) + 1;
      if (v30 >> 62)
LABEL_386:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v31 = v26 - (_QWORD)v27;
      if (v31 >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v30 = 0x3FFFFFFFFFFFFFFFLL;
      v349 = v30;
      if (v30)
      {
        if (v30 >> 62)
LABEL_387:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v32 = operator new(4 * v30);
        v33 = &v32[4 * v29];
        *v33 = v22;
        v16 = (uint64_t)(v33 + 1);
        if (v24 != v27)
          goto LABEL_24;
      }
      else
      {
        v32 = 0;
        v33 = (_DWORD *)(4 * v29);
        *(_DWORD *)(4 * v29) = v22;
        v16 = 4 * v29 + 4;
        if (v24 != v27)
        {
LABEL_24:
          v34 = v24 - 4 - v27;
          if (v34 >= 0x2C)
          {
            v35 = v24 - &v32[v28];
            v1 = v355;
            if (v35 >= 0x20)
            {
              v36 = (v34 >> 2) + 1;
              v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
              v38 = &v24[-v37];
              v33 = (_DWORD *)((char *)v33 - v37);
              v39 = &v32[4 * v29 - 16];
              v40 = v24 - 16;
              v41 = v36 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v42 = *(_OWORD *)v40;
                *(v39 - 1) = *((_OWORD *)v40 - 1);
                *v39 = v42;
                v39 -= 2;
                v40 -= 32;
                v41 -= 8;
              }
              while (v41);
              v24 = v38;
              if (v36 == (v36 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_33;
            }
          }
          else
          {
            v1 = v355;
          }
          do
          {
            v43 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *--v33 = v43;
          }
          while (v24 != v27);
LABEL_33:
          *(_QWORD *)v23 = v33;
          *v25 = v16;
          *(_QWORD *)(v23 + 16) = &v32[4 * v349];
          if (v27)
            operator delete(v27);
          v15 = v340;
          v7 = v344;
          goto LABEL_7;
        }
      }
      v1 = v355;
      goto LABEL_33;
    }
LABEL_37:
    if (v14 - v10 == 4)
    {
      v44 = *(_DWORD *)v10;
      if (v337->__begin_[v44] == -1)
      {
        v337->__begin_[v44] = v7;
        v339->__begin_[v7] = v44;
      }
    }
    ++v7;
    v6 = *((int *)v1 + 2);
  }
  while (v7 < v6);
  if ((int)v6 >= 1)
  {
    v45 = 0;
    v46 = 0;
    begin = v339->__begin_;
    do
    {
      if (begin[v46] == -1)
      {
        v48 = *v3;
        v49 = *(_DWORD *)(*v3 + 4 * v46);
        if (v49 != -1)
        {
          v50 = v337->__begin_;
          if (v337->__begin_[v49] == -1)
          {
            v51 = *((_QWORD *)v1 + 5) + v49;
            v52 = *(_QWORD *)(*((_QWORD *)v1 + 7) + 8 * v46);
            v53 = &operations_research::sat::kFalseLiteralIndex;
            v19 = __OFSUB__(v51, v52);
            v54 = v51 - v52;
            if (v54 < 0 == v19)
            {
              v53 = &operations_research::sat::kFalseLiteralIndex;
              if (*(_QWORD *)(*((_QWORD *)v1 + 10) + 8 * v46) >= v51)
                v53 = (int *)(*(_QWORD *)(*((_QWORD *)v1 + 13) + v45) + 4 * v54);
            }
            v55 = *v53;
            if (*v53 != -3
              && (v55 == -2
               || ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 46) + 24)
                              + (((unint64_t)v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v55 & 0x3F ^ 1u)) & 1) == 0))
            {
              begin[v46] = v49;
              v50[*(int *)(v48 + 4 * v46)] = v46;
              LODWORD(v6) = *((_DWORD *)v1 + 2);
            }
          }
        }
      }
      ++v46;
      v45 += 24;
    }
    while (v46 < (int)v6);
    if ((int)v6 >= 1)
    {
      v56 = 0;
      v57 = *((_QWORD *)v1 + 28);
      do
      {
        if (*(_DWORD *)(v57 + 4 * v56) == -1)
        {
          v58 = *((_QWORD *)v1 + 6);
          LOBYTE(__u[0]) = 0;
          std::vector<BOOL>::assign((char **)v1 + 19, v58, __u);
          v59 = *((int *)v1 + 2);
          LOBYTE(__u[0]) = 0;
          std::vector<BOOL>::assign((char **)v1 + 22, v59, __u);
          operations_research::sat::AllDifferentConstraint::MakeAugmentingPath(v1, v56);
          v57 = *((_QWORD *)v1 + 28);
          LODWORD(v6) = *((_DWORD *)v1 + 2);
          if (*(_DWORD *)(v57 + 4 * v56) == -1)
            break;
        }
        ++v56;
      }
      while (v56 < (int)v6);
      if ((int)v56 < (int)v6)
      {
        v60 = (_QWORD *)*((_QWORD *)v1 + 46);
        v60[18] = 0;
        v61 = (char *)v60[12];
        v350 = (void **)(v60 + 12);
        v60[13] = v61;
        if ((int)v6 < 1)
          return 0;
        v62 = 0;
        while (1)
        {
          if (((*(_QWORD *)(*((_QWORD *)v1 + 22) + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v62) & 1) != 0)
          {
            v63 = *(int *)(*((_QWORD *)v1 + 7) + 8 * v62);
            v64 = *((_QWORD *)v1 + 10);
            v65 = *(_QWORD *)(v64 + 8 * v62);
            if (v65 >= v63)
              break;
          }
LABEL_63:
          if ((uint64_t)++v62 >= (int)v6)
            return 0;
        }
        while (2)
        {
          v67 = *(_QWORD *)(*((_QWORD *)v1 + 7) + 8 * v62);
          v19 = __OFSUB__(v63, v67);
          v68 = v63 - v67;
          v69 = v68 < 0 != v19 || v65 < v63;
          v70 = &operations_research::sat::kFalseLiteralIndex;
          if (!v69)
            v70 = (int *)(*(_QWORD *)(*((_QWORD *)v1 + 13) + 24 * v62) + 4 * v68);
          v71 = *v70;
          if ((*v70 & 0x80000000) == 0
            && ((*(_QWORD *)(*((_QWORD *)v1 + 19)
                           + (((unint64_t)(v63 - *((_QWORD *)v1 + 5)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v63 - *((_BYTE *)v1 + 40))) & 1) == 0)
          {
            v72 = v60[14];
            if ((unint64_t)v61 < v72)
            {
              *(_DWORD *)v61 = v71;
              v66 = (uint64_t)(v61 + 4);
            }
            else
            {
              v73 = (char *)*v350;
              v74 = v61 - (_BYTE *)*v350;
              v75 = v74 >> 2;
              v76 = (v74 >> 2) + 1;
              if (v76 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v77 = v72 - (_QWORD)v73;
              if (v77 >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                if (v78 >> 62)
                  goto LABEL_387;
                v79 = operator new(4 * v78);
                v80 = (int *)&v79[4 * v75];
                *v80 = v71;
                v66 = (uint64_t)(v80 + 1);
                if (v61 == v73)
                  goto LABEL_92;
              }
              else
              {
                v79 = 0;
                v80 = (int *)(4 * v75);
                *(_DWORD *)(4 * v75) = v71;
                v66 = 4 * v75 + 4;
                if (v61 == v73)
                  goto LABEL_92;
              }
              v81 = v61 - 4 - v73;
              if (v81 >= 0xBC)
              {
                if (&v79[v74 - 4 - (v81 & 0xFFFFFFFFFFFFFFFCLL)] > &v79[v74 - 4])
                {
                  v82 = v61;
                }
                else if (&v61[-(v81 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v61 - 4)
                {
                  v82 = v61;
                }
                else if ((unint64_t)(v61 - v79 - v74) >= 0x20)
                {
                  v84 = (v81 >> 2) + 1;
                  v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
                  v82 = &v61[-v85];
                  v80 = (int *)((char *)v80 - v85);
                  v86 = &v79[4 * v75 - 16];
                  v87 = v61 - 16;
                  v88 = v84 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v89 = *(_OWORD *)v87;
                    *(v86 - 1) = *((_OWORD *)v87 - 1);
                    *v86 = v89;
                    v86 -= 2;
                    v87 -= 32;
                    v88 -= 8;
                  }
                  while (v88);
                  if (v84 == (v84 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_92;
                }
                else
                {
                  v82 = v61;
                }
              }
              else
              {
                v82 = v61;
              }
              do
              {
                v83 = *((_DWORD *)v82 - 1);
                v82 -= 4;
                *--v80 = v83;
              }
              while (v82 != v73);
LABEL_92:
              v60[12] = v80;
              v60[13] = v66;
              v60[14] = &v79[4 * v78];
              if (v73)
                operator delete(v73);
              v1 = v355;
            }
            v60[13] = v66;
            v64 = *((_QWORD *)v1 + 10);
            v61 = (char *)v66;
          }
          ++v63;
          v65 = *(_QWORD *)(v64 + 8 * v62);
          if (v65 < v63)
          {
            LODWORD(v6) = *((_DWORD *)v1 + 2);
            goto LABEL_63;
          }
          continue;
        }
      }
    }
  }
LABEL_105:
  if ((int)v6 >= 1)
  {
    v90 = 0;
    while (1)
    {
      *(_QWORD *)(*((_QWORD *)v1 + 40) + 24 * v90 + 8) = *(_QWORD *)(*((_QWORD *)v1 + 40) + 24 * v90);
      v91 = *((_QWORD *)v1 + 16) + 24 * v90;
      v92 = v339;
      v94 = *(_DWORD **)v91;
      v93 = *(_DWORD **)(v91 + 8);
      v341 = v93;
      v345 = v90;
      if (*(_DWORD **)v91 != v93)
        break;
LABEL_108:
      if (++v90 >= (int)v6)
        goto LABEL_137;
    }
    while (2)
    {
      if (*v94 == v92->__begin_[v90])
        goto LABEL_113;
      v96 = *((_QWORD *)v1 + 40) + 24 * v90;
      v97 = *((_DWORD *)v1 + 2) + *v94;
      v99 = (uint64_t *)(v96 + 8);
      v98 = *(int **)(v96 + 8);
      v101 = (_QWORD *)(v96 + 16);
      v100 = *(_QWORD *)(v96 + 16);
      if ((unint64_t)v98 < v100)
      {
        *v98 = v97;
        v95 = (uint64_t)(v98 + 1);
        v1 = v355;
        goto LABEL_112;
      }
      v102 = *(int **)v96;
      v103 = (uint64_t)v98 - *(_QWORD *)v96;
      v104 = v103 >> 2;
      v105 = (v103 >> 2) + 1;
      if (v105 >> 62)
        goto LABEL_386;
      v106 = v100 - (_QWORD)v102;
      if (v106 >> 1 > v105)
        v105 = v106 >> 1;
      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
        v105 = 0x3FFFFFFFFFFFFFFFLL;
      v351 = v105;
      if (v105)
      {
        if (v105 >> 62)
          goto LABEL_387;
        v107 = operator new(4 * v105);
        v108 = (int *)&v107[4 * v104];
        *v108 = v97;
        v95 = (uint64_t)(v108 + 1);
        if (v98 != v102)
        {
LABEL_124:
          v109 = (char *)(v98 - 1) - (char *)v102;
          v1 = v355;
          if (v109 < 0x2C)
            goto LABEL_393;
          if ((unint64_t)((char *)v98 - &v107[v103]) < 0x20)
            goto LABEL_393;
          v110 = (v109 >> 2) + 1;
          v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
          v112 = &v98[v111 / 0xFFFFFFFFFFFFFFFCLL];
          v108 = (int *)((char *)v108 - v111);
          v113 = &v107[4 * v104 - 16];
          v114 = v98 - 4;
          v115 = v110 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v116 = *(_OWORD *)v114;
            *(v113 - 1) = *((_OWORD *)v114 - 1);
            *v113 = v116;
            v113 -= 2;
            v114 -= 8;
            v115 -= 8;
          }
          while (v115);
          v98 = v112;
          if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_393:
            do
            {
              v117 = *--v98;
              *--v108 = v117;
            }
            while (v98 != v102);
          }
          *(_QWORD *)v96 = v108;
          *v99 = v95;
          *v101 = &v107[4 * v351];
          if (v102)
LABEL_131:
            operator delete(v102);
LABEL_132:
          v92 = v339;
          v93 = v341;
          v90 = v345;
LABEL_112:
          *v99 = v95;
LABEL_113:
          if (++v94 == v93)
          {
            LODWORD(v6) = *((_DWORD *)v1 + 2);
            goto LABEL_108;
          }
          continue;
        }
      }
      else
      {
        v107 = 0;
        v108 = (int *)(4 * v104);
        *(_DWORD *)(4 * v104) = v97;
        v95 = 4 * v104 + 4;
        if (v98 != v102)
          goto LABEL_124;
      }
      break;
    }
    *(_QWORD *)v96 = v108;
    v1 = v355;
    *v99 = v95;
    *v101 = &v107[4 * v351];
    if (v102)
      goto LABEL_131;
    goto LABEL_132;
  }
LABEL_137:
  v119 = *((_QWORD *)v1 + 6);
  if (v119 < 1)
  {
    v138 = v355;
  }
  else
  {
    for (i = 0; i < v119; ++i)
    {
      v122 = i + *((_DWORD *)v355 + 2);
      v123 = *((_QWORD *)v355 + 40);
      v124 = v123 + 24 * v122;
      v125 = *(_DWORD **)v124;
      *(_QWORD *)(v124 + 8) = *(_QWORD *)v124;
      v126 = (_QWORD *)(v124 + 8);
      v127 = *((_QWORD *)v355 + 25);
      v128 = *(_DWORD *)(v127 + 4 * i);
      if (v128 != -1)
      {
        v129 = v123 + 24 * v122;
        v132 = *(_QWORD *)(v129 + 16);
        v131 = (_QWORD *)(v129 + 16);
        v130 = v132;
        if ((unint64_t)v125 < v132)
        {
          *v125 = v128;
          v121 = v125 + 1;
        }
        else
        {
          v133 = v130 - (_QWORD)v125;
          v134 = (uint64_t)(v130 - (_QWORD)v125) >> 1;
          if (v134 <= 1)
            v134 = 1;
          if (v133 >= 0x7FFFFFFFFFFFFFFCLL)
            v135 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v135 = v134;
          if (v135 >> 62)
            goto LABEL_387;
          v136 = v135;
          v137 = operator new(4 * v135);
          *v137 = *(_DWORD *)(v127 + 4 * i);
          v121 = v137 + 1;
          *(_QWORD *)v124 = v137;
          *v126 = v137 + 1;
          *v131 = &v137[v136];
          if (v125)
          {
            operator delete(v125);
            v119 = *((_QWORD *)v355 + 6);
          }
        }
        *v126 = v121;
      }
    }
    v138 = v355;
    LODWORD(v6) = *((_DWORD *)v355 + 2);
  }
  v346 = v6 + v119;
  v139 = (_QWORD *)(*((_QWORD *)v138 + 40) + 24 * ((int)v6 + (int)v119));
  v139[1] = *v139;
  if (v119 <= (int)v6)
    goto LABEL_208;
  if ((int)v6 < 1)
    goto LABEL_181;
  v140 = 0;
  v141 = v6 + v119;
  v142 = v355;
  while (2)
  {
    while (1)
    {
      v143 = *((_QWORD *)v142 + 40) + 24 * v141;
      v145 = (uint64_t *)(v143 + 8);
      v144 = *(char **)(v143 + 8);
      v146 = *(_QWORD *)(v143 + 16);
      if ((unint64_t)v144 >= v146)
        break;
      *(_DWORD *)v144 = v140;
      *v145 = (uint64_t)(v144 + 4);
      if (++v140 >= *((_DWORD *)v142 + 2))
        goto LABEL_180;
    }
    v147 = *(char **)v143;
    v148 = (uint64_t)&v144[-*(_QWORD *)v143];
    v149 = v148 >> 2;
    v150 = (v148 >> 2) + 1;
    if (v150 >> 62)
      goto LABEL_386;
    v151 = v146 - (_QWORD)v147;
    if (v151 >> 1 > v150)
      v150 = v151 >> 1;
    if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
      v152 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v152 = v150;
    if (!v152)
    {
      v153 = 0;
      v154 = (_DWORD *)(4 * v149);
      *(_DWORD *)(4 * v149) = v140;
      v155 = 4 * v149 + 4;
      if (v144 == v147)
        goto LABEL_177;
      goto LABEL_171;
    }
    if (v152 >> 62)
      goto LABEL_387;
    v153 = operator new(4 * v152);
    v154 = &v153[4 * v149];
    *v154 = v140;
    v155 = (uint64_t)(v154 + 1);
    if (v144 != v147)
    {
LABEL_171:
      v156 = v144 - 4 - v147;
      if (v156 < 0x2C)
        goto LABEL_394;
      if ((unint64_t)(v144 - &v153[v148]) < 0x20)
        goto LABEL_394;
      v157 = (v156 >> 2) + 1;
      v158 = 4 * (v157 & 0x7FFFFFFFFFFFFFF8);
      v159 = &v144[-v158];
      v154 = (_DWORD *)((char *)v154 - v158);
      v160 = &v153[4 * v149 - 16];
      v161 = v144 - 16;
      v162 = v157 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v163 = *(_OWORD *)v161;
        *(v160 - 1) = *((_OWORD *)v161 - 1);
        *v160 = v163;
        v160 -= 2;
        v161 -= 32;
        v162 -= 8;
      }
      while (v162);
      v144 = v159;
      if (v157 != (v157 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_394:
        do
        {
          v164 = *((_DWORD *)v144 - 1);
          v144 -= 4;
          *--v154 = v164;
        }
        while (v144 != v147);
      }
    }
LABEL_177:
    *(_QWORD *)v143 = v154;
    *v145 = v155;
    *(_QWORD *)(v143 + 16) = &v153[4 * v152];
    if (v147)
      operator delete(v147);
    v141 = v346;
    v142 = v355;
    *v145 = v155;
    if (++v140 < *((_DWORD *)v355 + 2))
      continue;
    break;
  }
LABEL_180:
  v119 = *((_QWORD *)v142 + 6);
LABEL_181:
  if (v119 >= 1)
  {
    v165 = 0;
    while (1)
    {
      if (v337->__begin_[v165] != -1)
        goto LABEL_185;
      v167 = *((_QWORD *)v355 + 40) + 24 * (*((_DWORD *)v355 + 2) + (int)v165);
      v169 = (uint64_t *)(v167 + 8);
      v168 = *(char **)(v167 + 8);
      v171 = (_QWORD *)(v167 + 16);
      v170 = *(_QWORD *)(v167 + 16);
      if ((unint64_t)v168 >= v170)
        break;
      *(_DWORD *)v168 = v346;
      v166 = (uint64_t)(v168 + 4);
LABEL_184:
      *v169 = v166;
LABEL_185:
      if (v119 <= ++v165)
        goto LABEL_208;
    }
    v172 = *(char **)v167;
    v173 = (uint64_t)&v168[-*(_QWORD *)v167];
    v174 = v173 >> 2;
    v175 = (v173 >> 2) + 1;
    if (v175 >> 62)
      goto LABEL_386;
    v176 = v170 - (_QWORD)v172;
    if (v176 >> 1 > v175)
      v175 = v176 >> 1;
    if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL)
      v175 = 0x3FFFFFFFFFFFFFFFLL;
    v352 = v175;
    if (v175)
    {
      if (v175 >> 62)
        goto LABEL_387;
      v177 = operator new(4 * v175);
      v178 = &v177[4 * v174];
      *v178 = v346;
      v166 = (uint64_t)(v178 + 1);
      if (v168 != v172)
      {
LABEL_196:
        v179 = v168 - 4 - v172;
        if (v179 < 0x2C)
          goto LABEL_395;
        if ((unint64_t)(v168 - &v177[v173]) < 0x20)
          goto LABEL_395;
        v180 = (v179 >> 2) + 1;
        v181 = 4 * (v180 & 0x7FFFFFFFFFFFFFF8);
        v182 = &v168[-v181];
        v178 = (_DWORD *)((char *)v178 - v181);
        v183 = &v177[4 * v174 - 16];
        v184 = v168 - 16;
        v185 = v180 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v186 = *(_OWORD *)v184;
          *(v183 - 1) = *((_OWORD *)v184 - 1);
          *v183 = v186;
          v183 -= 2;
          v184 -= 32;
          v185 -= 8;
        }
        while (v185);
        v168 = v182;
        if (v180 != (v180 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_395:
          do
          {
            v187 = *((_DWORD *)v168 - 1);
            v168 -= 4;
            *--v178 = v187;
          }
          while (v168 != v172);
        }
        *(_QWORD *)v167 = v178;
        *v169 = v166;
        *v171 = &v177[4 * v352];
        if (!v172)
          goto LABEL_184;
LABEL_203:
        operator delete(v172);
        v119 = *((_QWORD *)v355 + 6);
        goto LABEL_184;
      }
    }
    else
    {
      v177 = 0;
      v178 = (_DWORD *)(4 * v174);
      *(_DWORD *)(4 * v174) = v346;
      v166 = 4 * v174 + 4;
      if (v168 != v172)
        goto LABEL_196;
    }
    *(_QWORD *)v167 = v178;
    *v169 = v166;
    *v171 = &v177[4 * v352];
    if (!v172)
      goto LABEL_184;
    goto LABEL_203;
  }
LABEL_208:
  v188 = v355;
  v189 = -1431655765 * ((uint64_t)(*((_QWORD *)v355 + 41) - *((_QWORD *)v355 + 40)) >> 3);
  *(_OWORD *)__p = 0u;
  v361 = 0u;
  v358 = 0u;
  *(_OWORD *)v359 = 0u;
  *(_OWORD *)__u = 0u;
  *(_OWORD *)v357 = 0u;
  v362[0] = 0;
  std::vector<int>::assign((std::vector<int> *)v359, v189, v362);
  v190 = __p[1];
  *(void **)&v361 = __p[1];
  if (v189 < 1)
    goto LABEL_316;
  v191 = 0;
  v192 = 0;
  v193 = 0;
  v194 = v189;
  v338 = v189;
  while (2)
  {
    if (*((_DWORD *)v359[0] + v192))
      goto LABEL_211;
    v347 = v191;
    v342 = v192;
    v353 = v193;
    if ((unint64_t)v190 >= *((_QWORD *)&v361 + 1))
    {
      v196 = 1;
      v197 = *((_QWORD *)&v361 + 1) - (_QWORD)v190;
      if ((unint64_t)((uint64_t)(*((_QWORD *)&v361 + 1) - (_QWORD)v190) >> 1) > 1)
        v196 = v197 >> 1;
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL)
        v198 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v198 = v196;
      if (v198)
      {
        if (v198 >> 62)
LABEL_385:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v199 = operator new(4 * v198);
        v200 = v199;
        *v199 = v342;
        v195 = (uint64_t)(v199 + 1);
      }
      else
      {
        v199 = 0;
        v200 = 0;
        MEMORY[0] = v192;
        v195 = 4;
      }
      __p[1] = v200;
      *(_QWORD *)&v361 = v195;
      *((_QWORD *)&v361 + 1) = &v199[v198];
      if (v190)
        operator delete(v190);
    }
    else
    {
      *v190 = v192;
      v195 = (uint64_t)(v190 + 1);
    }
    *(_QWORD *)&v361 = v195;
    while (2)
    {
      v203 = *(_DWORD *)(v195 - 4);
      v202 = v195 - 4;
      v201 = v203;
      v204 = v359[0];
      v205 = *((_DWORD *)v359[0] + v203);
      if (v205)
      {
        *(_QWORD *)&v361 = v202;
        if ((_DWORD)v353 == v205)
        {
          v206 = (int)v353 - 1;
          v207 = *(_QWORD *)&__u[2];
          v208 = *(_QWORD *)__u + 4 * v206;
          v209 = (uint64_t)(*(_QWORD *)&__u[2] - *(_QWORD *)__u) >> 2;
          if ((uint64_t)v209 > (uint64_t)v206)
          {
            v210 = *((_QWORD *)v355 + 43);
            v211 = (int *)(*(_QWORD *)__u + 4 * v206);
            do
            {
              v212 = *v211++;
              *(_DWORD *)(v210 + 4 * v212) = v347;
            }
            while ((unint64_t)v211 < v207);
          }
          v213 = v209 - v206;
          if (v209 <= v206)
          {
            if (v209 < v206)
              std::vector<int>::__append((std::vector<int> *)__u, v206 - v209);
          }
          else
          {
            v214 = (int *)v208;
            do
            {
              v215 = *v214++;
              v204[v215] = 0x7FFFFFFF;
              --v213;
            }
            while (v213);
            *(_QWORD *)&__u[2] = v208;
          }
          ++v347;
          v226 = v358;
          *(_QWORD *)&v358 = v358 - 4;
          if (v357[1] == (void *)v358)
            v353 = 0;
          else
            v353 = *(unsigned int *)(v226 - 8);
        }
        goto LABEL_228;
      }
      v216 = *(_BYTE **)&__u[2];
      if ((void *)*(_QWORD *)&__u[2] < v357[0])
      {
        **(_DWORD **)&__u[2] = v201;
        v217 = (uint64_t)(v216 + 4);
        goto LABEL_263;
      }
      v218 = *(_BYTE **)__u;
      v219 = *(_QWORD *)&__u[2] - *(_QWORD *)__u;
      v220 = (uint64_t)(*(_QWORD *)&__u[2] - *(_QWORD *)__u) >> 2;
      v221 = v220 + 1;
      if ((unint64_t)(v220 + 1) >> 62)
        goto LABEL_388;
      v222 = (uint64_t)v357[0] - *(_QWORD *)__u;
      if (((uint64_t)v357[0] - *(_QWORD *)__u) >> 1 > v221)
        v221 = v222 >> 1;
      if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFFCLL)
        v223 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v223 = v221;
      if (v223)
      {
        if (v223 >> 62)
          goto LABEL_385;
        v224 = (char *)operator new(4 * v223);
        v225 = &v224[4 * v220];
        *(_DWORD *)v225 = v201;
        v217 = (uint64_t)(v225 + 4);
        if (v216 == v218)
          goto LABEL_261;
        goto LABEL_255;
      }
      v224 = 0;
      v225 = (char *)(4 * v220);
      *(_DWORD *)(4 * v220) = v201;
      v217 = 4 * v220 + 4;
      if (v216 != v218)
      {
LABEL_255:
        v227 = v216 - 4 - v218;
        if (v227 < 0x2C)
          goto LABEL_396;
        if ((unint64_t)(v216 - &v224[v219]) < 0x20)
          goto LABEL_396;
        v228 = (v227 >> 2) + 1;
        v229 = 4 * (v228 & 0x7FFFFFFFFFFFFFF8);
        v230 = &v216[-v229];
        v225 -= v229;
        v231 = &v224[4 * v220 - 16];
        v232 = (__int128 *)(v216 - 16);
        v233 = v228 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v234 = *v232;
          *((_OWORD *)v231 - 1) = *(v232 - 1);
          *(_OWORD *)v231 = v234;
          v231 -= 32;
          v232 -= 2;
          v233 -= 8;
        }
        while (v233);
        v216 = v230;
        if (v228 != (v228 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_396:
          do
          {
            v235 = *((_DWORD *)v216 - 1);
            v216 -= 4;
            *((_DWORD *)v225 - 1) = v235;
            v225 -= 4;
          }
          while (v216 != v218);
        }
      }
LABEL_261:
      *(_QWORD *)__u = v225;
      *(_QWORD *)&__u[2] = v217;
      v357[0] = &v224[4 * v223];
      if (v218)
      {
        operator delete(v218);
        v204 = v359[0];
      }
LABEL_263:
      *(_QWORD *)&__u[2] = v217;
      v236 = (unint64_t)(v217 - *(_QWORD *)__u) >> 2;
      v204[v201] = v236;
      v237 = (_BYTE *)v358;
      v353 = v236;
      if ((unint64_t)v358 >= *((_QWORD *)&v358 + 1))
      {
        v239 = v357[1];
        v240 = v358 - (unint64_t)v357[1];
        v241 = (uint64_t)(v358 - (unint64_t)v357[1]) >> 2;
        v242 = v241 + 1;
        if ((unint64_t)(v241 + 1) >> 62)
LABEL_388:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v243 = *((_QWORD *)&v358 + 1) - (unint64_t)v357[1];
        if ((uint64_t)(*((_QWORD *)&v358 + 1) - (unint64_t)v357[1]) >> 1 > v242)
          v242 = v243 >> 1;
        if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFFCLL)
          v244 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v244 = v242;
        if (v244)
        {
          if (v244 >> 62)
            goto LABEL_385;
          v245 = (char *)operator new(4 * v244);
          v246 = &v245[4 * v241];
          *(_DWORD *)v246 = v353;
          v238 = (uint64_t)(v246 + 4);
          if (v237 == v239)
            goto LABEL_282;
        }
        else
        {
          v245 = 0;
          v246 = (char *)(4 * v241);
          *(_DWORD *)(4 * v241) = v353;
          v238 = 4 * v241 + 4;
          if (v237 == v239)
          {
LABEL_282:
            v357[1] = v246;
            *(_QWORD *)&v358 = v238;
            *((_QWORD *)&v358 + 1) = &v245[4 * v244];
            if (v239)
              operator delete(v239);
            goto LABEL_284;
          }
        }
        v247 = v237 - 4 - v239;
        if (v247 < 0x2C)
          goto LABEL_397;
        if ((unint64_t)(v237 - &v245[v240]) < 0x20)
          goto LABEL_397;
        v248 = (v247 >> 2) + 1;
        v249 = 4 * (v248 & 0x7FFFFFFFFFFFFFF8);
        v250 = &v237[-v249];
        v246 -= v249;
        v251 = &v245[4 * v241 - 16];
        v252 = (__int128 *)(v237 - 16);
        v253 = v248 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v254 = *v252;
          *((_OWORD *)v251 - 1) = *(v252 - 1);
          *(_OWORD *)v251 = v254;
          v251 -= 32;
          v252 -= 2;
          v253 -= 8;
        }
        while (v253);
        v237 = v250;
        if (v248 != (v248 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_397:
          do
          {
            v255 = *((_DWORD *)v237 - 1);
            v237 -= 4;
            *((_DWORD *)v246 - 1) = v255;
            v246 -= 4;
          }
          while (v237 != v239);
        }
        goto LABEL_282;
      }
      *(_DWORD *)v358 = v236;
      v238 = (uint64_t)(v237 + 4);
LABEL_284:
      *(_QWORD *)&v358 = v238;
      v256 = *((_QWORD *)v355 + 40) + 24 * v201;
      v258 = *(int **)v256;
      v257 = *(int **)(v256 + 8);
      if (*(int **)v256 == v257)
        goto LABEL_228;
      v259 = 0x7FFFFFFF;
      do
      {
        v260 = *v258;
        v261 = *((_DWORD *)v359[0] + v260);
        if (!v261)
        {
          v262 = (_BYTE *)v361;
          if ((unint64_t)v361 < *((_QWORD *)&v361 + 1))
          {
            *(_DWORD *)v361 = v260;
            *(_QWORD *)&v361 = v262 + 4;
            goto LABEL_288;
          }
          v263 = __p[1];
          v264 = v361 - (unint64_t)__p[1];
          v265 = (uint64_t)(v361 - (unint64_t)__p[1]) >> 2;
          v266 = v265 + 1;
          if ((unint64_t)(v265 + 1) >> 62)
            goto LABEL_388;
          v267 = *((_QWORD *)&v361 + 1) - (unint64_t)__p[1];
          if ((uint64_t)(*((_QWORD *)&v361 + 1) - (unint64_t)__p[1]) >> 1 > v266)
            v266 = v267 >> 1;
          if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFFCLL)
            v268 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v268 = v266;
          if (v268)
          {
            if (v268 >> 62)
              goto LABEL_385;
            v269 = (char *)operator new(4 * v268);
            v270 = &v269[4 * v265];
            *(_DWORD *)v270 = v260;
            v271 = (uint64_t)(v270 + 4);
            if (v262 == v263)
              goto LABEL_309;
          }
          else
          {
            v269 = 0;
            v270 = (char *)(4 * v265);
            *(_DWORD *)(4 * v265) = v260;
            v271 = 4 * v265 + 4;
            if (v262 == v263)
            {
LABEL_309:
              __p[1] = v270;
              *(_QWORD *)&v361 = v271;
              *((_QWORD *)&v361 + 1) = &v269[4 * v268];
              if (v263)
                operator delete(v263);
              *(_QWORD *)&v361 = v271;
              goto LABEL_288;
            }
          }
          v272 = v262 - 4 - v263;
          if (v272 < 0x2C)
            goto LABEL_398;
          if ((unint64_t)(v262 - &v269[v264]) < 0x20)
            goto LABEL_398;
          v273 = (v272 >> 2) + 1;
          v274 = 4 * (v273 & 0x7FFFFFFFFFFFFFF8);
          v275 = &v262[-v274];
          v270 -= v274;
          v276 = &v269[4 * v265 - 16];
          v277 = (__int128 *)(v262 - 16);
          v278 = v273 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v279 = *v277;
            *((_OWORD *)v276 - 1) = *(v277 - 1);
            *(_OWORD *)v276 = v279;
            v276 -= 32;
            v277 -= 2;
            v278 -= 8;
          }
          while (v278);
          v262 = v275;
          if (v273 != (v273 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_398:
            do
            {
              v280 = *((_DWORD *)v262 - 1);
              v262 -= 4;
              *((_DWORD *)v270 - 1) = v280;
              v270 -= 4;
            }
            while (v262 != v263);
          }
          goto LABEL_309;
        }
        if (v261 < v259)
          v259 = *((_DWORD *)v359[0] + v260);
LABEL_288:
        ++v258;
      }
      while (v258 != v257);
      if (v259 < (int)v353)
      {
        v281 = v358;
        do
        {
          v282 = *(unsigned int *)(v281 - 8);
          v281 -= 4;
        }
        while ((int)v282 > v259);
        v353 = v282;
        *(_QWORD *)&v358 = v281;
      }
LABEL_228:
      v190 = __p[1];
      v195 = v361;
      if (__p[1] != (void *)v361)
        continue;
      break;
    }
    v193 = v353;
    v188 = v355;
    v191 = v347;
    v192 = v342;
    v194 = v338;
LABEL_211:
    if (++v192 != v194)
      continue;
    break;
  }
LABEL_316:
  if (v190)
  {
    *(_QWORD *)&v361 = v190;
    operator delete(v190);
  }
  if (v359[0])
  {
    v359[1] = v359[0];
    operator delete(v359[0]);
  }
  if (v357[1])
  {
    *(void **)&v358 = v357[1];
    operator delete(v357[1]);
  }
  if (*(_QWORD *)__u)
  {
    *(_QWORD *)&__u[2] = *(_QWORD *)__u;
    operator delete(*(void **)__u);
  }
  v283 = *((unsigned int *)v188 + 2);
  if ((int)v283 < 1)
    return 1;
  v284 = 0;
  v285 = (_QWORD *)((char *)v188 + 176);
  v286 = *((_QWORD *)v188 + 16);
  while (1)
  {
    v288 = *(char **)(v286 + 24 * v284);
    v287 = *(char **)(v286 + 24 * v284 + 8);
    if (v287 - v288 != 4 && v288 != v287)
      break;
LABEL_326:
    if (++v284 >= v283)
      return 1;
  }
  while (1)
  {
    v290 = *(_DWORD *)v288;
    if (v339->__begin_[v284] != *(_DWORD *)v288
      && *(_DWORD *)(*((_QWORD *)v188 + 43) + 4 * v284) != *(_DWORD *)(*((_QWORD *)v188 + 43) + 4 * ((int)v283 + v290)))
    {
      v291 = *((_QWORD *)v188 + 5) + v290;
      v292 = *(_QWORD *)(*((_QWORD *)v188 + 7) + 8 * v284);
      v293 = &operations_research::sat::kFalseLiteralIndex;
      v19 = __OFSUB__(v291, v292);
      v294 = v291 - v292;
      if (v294 < 0 == v19)
      {
        v293 = &operations_research::sat::kFalseLiteralIndex;
        if (*(_QWORD *)(*((_QWORD *)v188 + 10) + 8 * v284) >= v291)
          v293 = (int *)(*(_QWORD *)(*((_QWORD *)v188 + 13) + 24 * v284) + 4 * v294);
      }
      v295 = *v293;
      if (*v293 != -3
        && (v295 == -2
         || ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v188 + 46) + 24)
                        + (((unint64_t)v295 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v295 & 0x3F ^ 1u)) & 1) == 0))
      {
        break;
      }
    }
    v288 += 4;
    if (v288 == v287)
      goto LABEL_326;
  }
  v296 = *((_QWORD *)v188 + 6);
  LOBYTE(__u[0]) = 0;
  std::vector<BOOL>::assign((char **)v188 + 19, v296, __u);
  v297 = *((int *)v188 + 2);
  LOBYTE(__u[0]) = 0;
  std::vector<BOOL>::assign((char **)v188 + 22, v297, __u);
  v298 = *((_QWORD *)v188 + 25);
  v299 = *(int *)(v298 + 4 * v290);
  v300 = *((_QWORD *)v188 + 28);
  *(_DWORD *)(v300 + 4 * v299) = -1;
  *(_DWORD *)(v298 + 4 * *(int *)(v300 + 4 * v284)) = -1;
  *(_DWORD *)(v300 + 4 * v284) = v290;
  v343 = v290;
  v348 = v284;
  *(_DWORD *)(v298 + 4 * v290) = v284;
  *(_QWORD *)(*((_QWORD *)v188 + 19) + (((unint64_t)v290 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v290;
  operations_research::sat::AllDifferentConstraint::MakeAugmentingPath(v188, v299);
  EmptyVectorToStoreReason = operations_research::sat::Trail::GetEmptyVectorToStoreReason(*((operations_research::sat::Trail **)v188 + 46), *(_DWORD *)(*((_QWORD *)v188 + 46) + 12));
  v302 = *((_DWORD *)v188 + 2);
  if (v302 >= 1)
  {
    v303 = EmptyVectorToStoreReason;
    v304 = 0;
    v354 = (_QWORD *)((char *)v188 + 176);
    while (1)
    {
      if (((*(_QWORD *)(*v285 + ((v304 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v304) & 1) != 0)
      {
        v305 = *(int *)(*((_QWORD *)v355 + 7) + 8 * v304);
        v306 = *((_QWORD *)v355 + 10);
        v307 = *(_QWORD *)(v306 + 8 * v304);
        if (v307 >= v305)
          break;
      }
LABEL_344:
      if ((uint64_t)++v304 >= v302)
        goto LABEL_380;
    }
    while (2)
    {
      v309 = *(_QWORD *)(*((_QWORD *)v355 + 7) + 8 * v304);
      v19 = __OFSUB__(v305, v309);
      v310 = v305 - v309;
      v311 = v310 < 0 != v19 || v307 < v305;
      v312 = &operations_research::sat::kFalseLiteralIndex;
      if (!v311)
        v312 = (int *)(*(_QWORD *)(*((_QWORD *)v355 + 13) + 24 * v304) + 4 * v310);
      v313 = *v312;
      if (*v312 < 0
        || ((*(_QWORD *)(*((_QWORD *)v355 + 19)
                       + (((unint64_t)(v305 - *((_QWORD *)v355 + 5)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v305 - *((_BYTE *)v355 + 40))) & 1) != 0)
      {
        goto LABEL_350;
      }
      v315 = *(char **)(v303 + 8);
      v314 = *(_QWORD *)(v303 + 16);
      if ((unint64_t)v315 < v314)
      {
        *(_DWORD *)v315 = v313;
        v308 = (uint64_t)(v315 + 4);
        goto LABEL_349;
      }
      v316 = *(char **)v303;
      v317 = (uint64_t)&v315[-*(_QWORD *)v303];
      v318 = v317 >> 2;
      v319 = (v317 >> 2) + 1;
      if (v319 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v320 = v314 - (_QWORD)v316;
      if (v320 >> 1 > v319)
        v319 = v320 >> 1;
      if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFFCLL)
        v321 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v321 = v319;
      if (v321)
      {
        if (v321 >> 62)
          goto LABEL_387;
        v322 = operator new(4 * v321);
        v323 = (int *)&v322[4 * v318];
        *v323 = v313;
        v308 = (uint64_t)(v323 + 1);
        if (v315 == v316)
        {
LABEL_376:
          *(_QWORD *)v303 = v323;
          *(_QWORD *)(v303 + 8) = v308;
          *(_QWORD *)(v303 + 16) = &v322[4 * v321];
          if (v316)
            operator delete(v316);
LABEL_349:
          *(_QWORD *)(v303 + 8) = v308;
          v306 = *((_QWORD *)v355 + 10);
LABEL_350:
          ++v305;
          v307 = *(_QWORD *)(v306 + 8 * v304);
          if (v307 < v305)
          {
            v285 = v354;
            v302 = *((_DWORD *)v355 + 2);
            goto LABEL_344;
          }
          continue;
        }
      }
      else
      {
        v322 = 0;
        v323 = (int *)(4 * v318);
        *(_DWORD *)(4 * v318) = v313;
        v308 = 4 * v318 + 4;
        if (v315 == v316)
          goto LABEL_376;
      }
      break;
    }
    v324 = v315 - 4 - v316;
    if (v324 < 0x2C)
      goto LABEL_399;
    if ((unint64_t)(v315 - &v322[v317]) < 0x20)
      goto LABEL_399;
    v325 = (v324 >> 2) + 1;
    v326 = 4 * (v325 & 0x7FFFFFFFFFFFFFF8);
    v327 = &v315[-v326];
    v323 = (int *)((char *)v323 - v326);
    v328 = &v322[4 * v318 - 16];
    v329 = v315 - 16;
    v330 = v325 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v331 = *(_OWORD *)v329;
      *(v328 - 1) = *((_OWORD *)v329 - 1);
      *v328 = v331;
      v328 -= 2;
      v329 -= 32;
      v330 -= 8;
    }
    while (v330);
    v315 = v327;
    if (v325 != (v325 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_399:
      do
      {
        v332 = *((_DWORD *)v315 - 1);
        v315 -= 4;
        *--v323 = v332;
      }
      while (v315 != v316);
    }
    goto LABEL_376;
  }
LABEL_380:
  v333 = *((_QWORD *)v355 + 5) + v343;
  v334 = *(_QWORD *)(*((_QWORD *)v355 + 7) + 8 * v348);
  v19 = __OFSUB__(v333, v334);
  v335 = v333 - v334;
  if (v335 < 0 != v19 || *(_QWORD *)(*((_QWORD *)v355 + 10) + 8 * v348) < v333)
    v336 = &operations_research::sat::kFalseLiteralIndex;
  else
    v336 = (int *)(*(_QWORD *)(*((_QWORD *)v355 + 13) + 24 * v348) + 4 * v335);
  return operations_research::sat::Trail::EnqueueWithStoredReason(*((_QWORD *)v355 + 46), *v336 ^ 1u);
}

void sub_22DA2EA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v28;
  void *v29;
  void *v30;

  if (__p)
  {
    operator delete(__p);
    v28 = a23;
    if (!a23)
    {
LABEL_3:
      v29 = a20;
      if (!a20)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v28 = a23;
    if (!a23)
      goto LABEL_3;
  }
  operator delete(v28);
  v29 = a20;
  if (!a20)
  {
LABEL_4:
    v30 = a17;
    if (!a17)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v29);
  v30 = a17;
  if (!a17)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v30);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Trail::EnqueueWithStoredReason(uint64_t a1, int a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char **v10;
  void **v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  int *v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  _OWORD *v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  int v40;

  v3 = (unint64_t)a2 >> 6;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v3);
  result = 1;
  if ((v4 & (1 << a2)) == 0)
  {
    if (((v4 >> (a2 & 0x3F ^ 1u)) & 1) == 0)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * *(int *)(a1 + 12)) = a2;
      *(_DWORD *)(a1 + 8) = (*(_DWORD *)(a1 + 8) & 0xFFFFFFE | a2 & 1) ^ 1;
      v15 = 8 * (a2 >> 1);
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + v15) = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v3) |= 1 << a2;
      ++*(_DWORD *)(a1 + 12);
      v16 = *(_QWORD *)(a1 + 208) + *(int *)(*(_QWORD *)(a1 + 120) + v15 + 4);
      v17 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * (v16 / 0xAA)) + 24 * (v16 % 0xAA));
      v18 = *v17;
      v19 = (v17[1] - *v17) >> 2;
      v20 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 16 * (a2 >> 1));
      *v20 = v18;
      v20[1] = v19;
      v21 = *(_QWORD *)(a1 + 120);
      *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * (a2 >> 1)) = *(_DWORD *)(v21 + v15) >> 28;
      *(_DWORD *)(v21 + v15) &= 0xFFFFFFFu;
      return 1;
    }
    v7 = *(_QWORD *)(a1 + 208) + *(int *)(a1 + 12);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * (v7 / 0xAA));
    v9 = v7 % 0xAA;
    v10 = (char **)(v8 + 24 * v9);
    *(_QWORD *)(a1 + 144) = 0;
    v11 = (void **)(a1 + 96);
    if ((char **)(a1 + 96) != v10)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 96), *v10, *(char **)(v8 + 24 * v9 + 8), (uint64_t)(*(_QWORD *)(v8 + 24 * v9 + 8) - (_QWORD)*v10) >> 2);
    *(_QWORD *)(a1 + 144) = 0;
    v13 = *(int **)(a1 + 104);
    v12 = *(_QWORD *)(a1 + 112);
    if ((unint64_t)v13 < v12)
    {
      *v13 = a2;
      v14 = (uint64_t)(v13 + 1);
LABEL_27:
      result = 0;
      *(_QWORD *)(a1 + 104) = v14;
      return result;
    }
    v22 = (int *)*v11;
    v23 = (char *)v13 - (_BYTE *)*v11;
    v24 = v23 >> 2;
    v25 = (v23 >> 2) + 1;
    if (v25 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v26 = v12 - (_QWORD)v22;
    if (v26 >> 1 > v25)
      v25 = v26 >> 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = operator new(4 * v27);
      v29 = (int *)&v28[4 * v24];
      v30 = &v28[4 * v27];
      *v29 = a2;
      v14 = (uint64_t)(v29 + 1);
      v31 = (char *)v13 - (char *)v22;
      if (v13 == v22)
        goto LABEL_25;
    }
    else
    {
      v28 = 0;
      v29 = (int *)(4 * v24);
      v30 = 0;
      *(_DWORD *)(4 * v24) = a2;
      v14 = 4 * v24 + 4;
      v31 = (char *)v13 - (char *)v22;
      if (v13 == v22)
      {
LABEL_25:
        *(_QWORD *)(a1 + 96) = v29;
        *(_QWORD *)(a1 + 104) = v14;
        *(_QWORD *)(a1 + 112) = v30;
        if (v22)
          operator delete(v22);
        goto LABEL_27;
      }
    }
    v32 = v31 - 4;
    if (v32 < 0x2C)
      goto LABEL_32;
    if ((unint64_t)((char *)v13 - v28 - v23) < 0x20)
      goto LABEL_32;
    v33 = (v32 >> 2) + 1;
    v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
    v35 = &v13[v34 / 0xFFFFFFFFFFFFFFFCLL];
    v29 = (int *)((char *)v29 - v34);
    v36 = &v28[4 * v24 - 16];
    v37 = v13 - 4;
    v38 = v33 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 8;
      v38 -= 8;
    }
    while (v38);
    v13 = v35;
    if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_32:
      do
      {
        v40 = *--v13;
        *--v29 = v40;
      }
      while (v13 != v22);
    }
    goto LABEL_25;
  }
  return result;
}

uint64_t operations_research::sat::AllDifferentBoundsPropagator::AllDifferentBoundsPropagator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::vector<int> *v4;
  std::vector<int> *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  std::vector<int>::size_type v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  int v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  _QWORD *v46;
  void **v47;
  _QWORD *v48;
  _BYTE v49[16];

  *(_QWORD *)a1 = &off_24F9802A0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  v48 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  v4 = (std::vector<int> *)(a1 + 192);
  v47 = (void **)(a1 + 40);
  v5 = (std::vector<int> *)(a1 + 168);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  v6 = a2[1];
  if (*a2 == v6)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v49, (google::glog_internal_namespace_ *)"./ortools/sat/all_different.cc", 421);
    v46 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Check failed: !vars.empty() ", 28);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v49);
  }
  v8 = ((v6 - *a2) << 30) + 0x200000000;
  v9 = v8 >> 32;
  if ((v6 - *a2) << 30 == 0xFFFFFFFE00000000)
  {
    v11 = 1;
    v12 = v8 >> 32;
    if (v9)
      goto LABEL_4;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 144), v8 >> 32);
    v8 = *(_QWORD *)(a1 + 168);
    v10 = (*(_QWORD *)(a1 + 176) - v8) >> 2;
    v11 = v9 >= v10;
    v12 = v9 - v10;
    if (v9 > v10)
    {
LABEL_4:
      std::vector<int>::__append(v5, v12);
      goto LABEL_8;
    }
  }
  if (!v11)
    *(_QWORD *)(a1 + 176) = v8 + 4 * v9;
LABEL_8:
  v13 = *(_QWORD *)(a1 + 192);
  v14 = (*(_QWORD *)(a1 + 200) - v13) >> 2;
  if (v9 <= v14)
  {
    if (v9 < v14)
      *(_QWORD *)(a1 + 200) = v13 + 4 * v9;
  }
  else
  {
    std::vector<int>::__append(v4, v9 - v14, &operations_research::sat::kNoIntegerVariable);
  }
  v15 = *a2;
  if (a2[1] != *a2)
  {
    v16 = 0;
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v15 + 4 * v16);
        v19 = *(_DWORD **)(a1 + 24);
        v18 = *(_QWORD *)(a1 + 32);
        if ((unint64_t)v19 >= v18)
        {
          v21 = (_DWORD *)*v48;
          v22 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v19 - *v48) >> 2);
          v23 = v22 + 1;
          if (v22 + 1 > 0xCCCCCCCCCCCCCCCLL)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (_QWORD)v21) >> 2);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          v25 = v24 >= 0x666666666666666 ? 0xCCCCCCCCCCCCCCCLL : v23;
          if (v25)
          {
            if (v25 > 0xCCCCCCCCCCCCCCCLL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = (char *)operator new(20 * v25);
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[20 * v22];
          *(_DWORD *)v27 = v17;
          *(_QWORD *)(v27 + 12) = 0;
          *(_QWORD *)(v27 + 4) = 0;
          v28 = v27;
          if (v19 != v21)
          {
            do
            {
              v29 = *(_OWORD *)(v19 - 5);
              *((_DWORD *)v28 - 1) = *(v19 - 1);
              *(_OWORD *)(v28 - 20) = v29;
              v28 -= 20;
              v19 -= 5;
            }
            while (v19 != v21);
            v19 = (_DWORD *)*v48;
          }
          v30 = &v26[20 * v25];
          v20 = v27 + 20;
          *(_QWORD *)(a1 + 16) = v28;
          *(_QWORD *)(a1 + 24) = v27 + 20;
          *(_QWORD *)(a1 + 32) = v30;
          if (v19)
            operator delete(v19);
        }
        else
        {
          *v19 = v17;
          v20 = v19 + 5;
          *(_QWORD *)(v19 + 3) = 0;
          *(_QWORD *)(v19 + 1) = 0;
        }
        *(_QWORD *)(a1 + 24) = v20;
        v31 = *(_DWORD *)(*a2 + 4 * v16) ^ 1;
        v33 = *(char **)(a1 + 48);
        v32 = *(_QWORD *)(a1 + 56);
        if ((unint64_t)v33 >= v32)
          break;
        *(_DWORD *)v33 = v31;
        *(_QWORD *)(v33 + 12) = 0;
        *(_QWORD *)(v33 + 4) = 0;
        *(_QWORD *)(a1 + 48) = v33 + 20;
        ++v16;
        v15 = *a2;
        if (v16 >= (a2[1] - *a2) >> 2)
          return a1;
      }
      v34 = (char *)*v47;
      v35 = 0xCCCCCCCCCCCCCCCDLL * ((v33 - (_BYTE *)*v47) >> 2);
      v36 = v35 + 1;
      if (v35 + 1 > 0xCCCCCCCCCCCCCCCLL)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - (_QWORD)v34) >> 2);
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 >= 0x666666666666666)
        v38 = 0xCCCCCCCCCCCCCCCLL;
      else
        v38 = v36;
      if (v38)
      {
        if (v38 > 0xCCCCCCCCCCCCCCCLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v39 = (char *)operator new(20 * v38);
      }
      else
      {
        v39 = 0;
      }
      v40 = &v39[20 * v35];
      *(_DWORD *)v40 = v31;
      *(_QWORD *)(v40 + 12) = 0;
      *(_QWORD *)(v40 + 4) = 0;
      v41 = v40;
      if (v33 != v34)
      {
        do
        {
          v42 = *(_OWORD *)(v33 - 20);
          *((_DWORD *)v41 - 1) = *((_DWORD *)v33 - 1);
          *(_OWORD *)(v41 - 20) = v42;
          v41 -= 20;
          v33 -= 20;
        }
        while (v33 != v34);
        v33 = (char *)*v47;
      }
      v43 = &v39[20 * v38];
      v44 = v40 + 20;
      *(_QWORD *)(a1 + 40) = v41;
      *(_QWORD *)(a1 + 48) = v40 + 20;
      *(_QWORD *)(a1 + 56) = v43;
      if (v33)
        operator delete(v33);
      *(_QWORD *)(a1 + 48) = v44;
      ++v16;
      v15 = *a2;
    }
    while (v16 < (a2[1] - *a2) >> 2);
  }
  return a1;
}

void sub_22DA2F1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, char a15)
{
  _QWORD *v15;
  void **v16;
  void **v17;
  void **v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v20 = (void *)v15[27];
  if (v20)
  {
    v15[28] = v20;
    operator delete(v20);
    v21 = *v18;
    if (!*v18)
    {
LABEL_3:
      v22 = *v17;
      if (!*v17)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v21 = *v18;
    if (!*v18)
      goto LABEL_3;
  }
  v15[25] = v21;
  operator delete(v21);
  v22 = *v17;
  if (!*v17)
  {
LABEL_4:
    v23 = *v16;
    if (!*v16)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v15[22] = v22;
  operator delete(v22);
  v23 = *v16;
  if (!*v16)
  {
LABEL_5:
    v24 = (void *)v15[15];
    if (!v24)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v15[19] = v23;
  operator delete(v23);
  v24 = (void *)v15[15];
  if (!v24)
  {
LABEL_6:
    v25 = (void *)v15[11];
    if (!v25)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v15[16] = v24;
  operator delete(v24);
  v25 = (void *)v15[11];
  if (!v25)
  {
LABEL_7:
    v26 = (void *)v15[8];
    if (!v26)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v15[12] = v25;
  operator delete(v25);
  v26 = (void *)v15[8];
  if (!v26)
  {
LABEL_8:
    v27 = *a13;
    if (!*a13)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v15[9] = v26;
  operator delete(v26);
  v27 = *a13;
  if (!*a13)
  {
LABEL_9:
    v28 = *a14;
    if (!*a14)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v15[6] = v27;
  operator delete(v27);
  v28 = *a14;
  if (!*a14)
LABEL_10:
    _Unwind_Resume(exception_object);
LABEL_19:
  v15[3] = v28;
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

__n128 operations_research::sat::AllDifferentBoundsPropagator::Propagate(operations_research::sat::AllDifferentBoundsPropagator *this, __n128 a2)
{
  __n128 result;
  __n128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(this, a2))
  {
    v4 = *((__n128 *)this + 1);
    *((_OWORD *)this + 1) = *(_OWORD *)((char *)this + 40);
    *(__n128 *)((char *)this + 40) = v4;
    v5 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v5;
    operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(this, v4);
    result = *(__n128 *)((char *)this + 40);
    v6 = *((_OWORD *)this + 1);
    *((__n128 *)this + 1) = result;
    *(_OWORD *)((char *)this + 40) = v6;
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v7;
  }
  return result;
}

uint64_t operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(operations_research::sat::AllDifferentBoundsPropagator *this, __n128 a2)
{
  unint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;

  v4 = (int *)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  v5 = (uint64_t)v4;
  if (v4 != (int *)v3)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
    v7 = v4;
    do
    {
      v8 = *v7;
      *(_QWORD *)(v7 + 1) = *(_QWORD *)(v6 + 12 * *v7);
      *(_QWORD *)(v7 + 3) = -*(_QWORD *)(v6 + 12 * (v8 ^ 1));
      v7 += 5;
    }
    while (v7 != (int *)v3);
  }
  v9 = v3 - (_QWORD)v4;
  if ((int)(-858993459 * ((v3 - (unint64_t)v4) >> 2)) > 32)
  {
    if (v9 < 40)
      goto LABEL_37;
    v18 = v3 - 20;
    if ((int *)(v3 - 20) != v4)
    {
      v5 = v3 - 20;
      do
      {
        v19 = (int *)(v18 - 20);
        if (*(_QWORD *)(v18 + 4) < *(_QWORD *)(v18 - 16))
        {
          v20 = *(_DWORD *)(v18 + 16);
          a2 = *(__n128 *)v18;
          *(_OWORD *)v18 = *(_OWORD *)v19;
          *(_DWORD *)(v18 + 16) = *(_DWORD *)(v18 - 4);
          *(__n128 *)v19 = a2;
          *(_DWORD *)(v18 - 4) = v20;
          v5 = v18;
        }
        v18 -= 20;
      }
      while (v19 != v4);
    }
    v21 = v5 + 20;
    if (v5 + 20 == v3)
      goto LABEL_37;
    v22 = 1717986920 * ((v3 - (unint64_t)v4) >> 2);
    v23 = v5;
    while (1)
    {
      v24 = *(_DWORD *)(v23 + 20);
      a2 = *(__n128 *)(v23 + 24);
      v23 = v21;
      --v22;
      if (a2.n128_i64[0] >= *(_QWORD *)(v21 - 16))
      {
        *(_DWORD *)v21 = v24;
        *(__n128 *)(v21 + 4) = a2;
        v21 += 20;
        if (v23 + 20 == v3)
          goto LABEL_32;
      }
      else
      {
        v25 = v21;
        do
        {
          v26 = v25 - 20;
          *(_OWORD *)v25 = *(_OWORD *)(v25 - 20);
          *(_DWORD *)(v25 + 16) = *(_DWORD *)(v25 - 4);
          --v22;
          v27 = *(_QWORD *)(v25 - 36);
          v25 -= 20;
        }
        while (a2.n128_i64[0] < v27);
        *(_DWORD *)v26 = v24;
        *(__n128 *)(v26 + 4) = a2;
        v21 += 20;
        if (v23 + 20 == v3)
        {
LABEL_32:
          if (v21 != v3)
          {
            v28 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - v5) >> 2));
            if (v5 == v3)
              v29 = 0;
            else
              v29 = v28;
            std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *,false>(v5, v3, v29, 1, a2);
          }
          goto LABEL_37;
        }
      }
      if (v22 <= 0)
        goto LABEL_32;
    }
  }
  if (v9 >= 40)
  {
    v10 = v3 - 20;
    if ((int *)(v3 - 20) != v4)
    {
      v5 = v3 - 20;
      do
      {
        v11 = (int *)(v10 - 20);
        if (*(_QWORD *)(v10 + 4) < *(_QWORD *)(v10 - 16))
        {
          v12 = *(_DWORD *)(v10 + 16);
          a2 = *(__n128 *)v10;
          *(_OWORD *)v10 = *(_OWORD *)v11;
          *(_DWORD *)(v10 + 16) = *(_DWORD *)(v10 - 4);
          *(__n128 *)v11 = a2;
          *(_DWORD *)(v10 - 4) = v12;
          v5 = v10;
        }
        v10 -= 20;
      }
      while (v11 != v4);
    }
    while (1)
    {
      v13 = v5 + 20;
      if (v5 + 20 == v3)
        break;
      v14 = *(_DWORD *)(v5 + 20);
      a2 = *(__n128 *)(v5 + 24);
      v5 += 20;
      v15 = v5;
      if (a2.n128_i64[0] < *(_QWORD *)(v13 - 16))
      {
        v16 = v5;
        do
        {
          v15 = v16 - 20;
          *(_OWORD *)v16 = *(_OWORD *)(v16 - 20);
          *(_DWORD *)(v16 + 16) = *(_DWORD *)(v16 - 4);
          v17 = *(_QWORD *)(v16 - 36);
          v16 -= 20;
        }
        while (a2.n128_i64[0] < v17);
      }
      *(_DWORD *)v15 = v14;
      *(__n128 *)(v15 + 4) = a2;
    }
  }
LABEL_37:
  v30 = *((_QWORD *)this + 2);
  if ((int)(-858993459 * ((*((_QWORD *)this + 3) - v30) >> 2)) < 2)
    return 1;
  v31 = 0;
  v32 = -858993459 * ((*((_QWORD *)this + 3) - v30) >> 2);
  v33 = *(_QWORD *)(v30 + 4);
  v34 = 1;
  v35 = 24;
  v36 = 1;
  do
  {
    while (1)
    {
      v37 = *((_QWORD *)this + 2);
      v38 = *(_QWORD *)(v37 + v35);
      if (v38 > v33 + v36 - 1)
        break;
      ++v36;
      ++v34;
      v35 += 20;
      if (v32 == v34)
        goto LABEL_44;
    }
    if (v36 > 1)
    {
      result = operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal((uint64_t)this, v33, v37 + 20 * v31, v36, a2);
      if (!(_DWORD)result)
        return result;
    }
    v36 = 1;
    v33 = v38;
    v31 = v34++;
    v35 += 20;
  }
  while (v32 != v34);
LABEL_44:
  if (v36 < 2)
    return 1;
  else
    return operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal((uint64_t)this, v33, *((_QWORD *)this + 2) + 20 * v31, v36, a2);
}

void operations_research::sat::AllDifferentBoundsPropagator::FillHallReason(_QWORD *a1, unint64_t a2, int64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;

  v3 = (_DWORD *)a1[27];
  a1[28] = v3;
  v38 = a1 + 27;
  v4 = a1[14];
  if ((int)a2 - (int)v4 <= (int)a3 - (int)v4)
  {
    v5 = a2;
    v37 = HIDWORD(a2);
    if (a3 >= (uint64_t)0x8000000000000002)
      v7 = -a3;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    v8 = HIDWORD(v7);
    v9 = (int)a2 - (int)v4;
    v36 = a3 - v4 + 1;
    v35 = HIDWORD(v7);
    do
    {
      while (1)
      {
        v10 = *(_DWORD *)(a1[24] + 4 * v9);
        v39 = __PAIR64__(v5, v10);
        v11 = a1[29];
        if ((unint64_t)v3 >= v11)
        {
          v13 = (_DWORD *)*v38;
          v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *v38) >> 2);
          v15 = v14 + 1;
          if (v14 + 1 > 0x1555555555555555)
            goto LABEL_44;
          v8 = v7;
          v16 = v5;
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v13) >> 2);
          if (2 * v17 > v15)
            v15 = 2 * v17;
          v18 = v17 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v15;
          if (v18)
          {
            if (v18 > 0x1555555555555555)
              goto LABEL_45;
            v19 = (char *)operator new(12 * v18);
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[12 * v14];
          *(_QWORD *)v20 = v39;
          *((_DWORD *)v20 + 2) = v37;
          v21 = v20;
          if (v3 != v13)
          {
            do
            {
              v22 = *(_QWORD *)(v3 - 3);
              v3 -= 3;
              v23 = v3[2];
              *(_QWORD *)(v21 - 12) = v22;
              v21 -= 12;
              *((_DWORD *)v21 + 2) = v23;
            }
            while (v3 != v13);
            v3 = (_DWORD *)*v38;
          }
          v12 = v20 + 12;
          a1[27] = v21;
          a1[28] = v20 + 12;
          a1[29] = &v19[12 * v18];
          if (v3)
            operator delete(v3);
          v5 = v16;
          v7 = v8;
          LODWORD(v8) = v35;
        }
        else
        {
          *(_QWORD *)v3 = __PAIR64__(v5, v10);
          v3[2] = v37;
          v12 = v3 + 3;
        }
        a1[28] = v12;
        LODWORD(v40) = v10 ^ 1;
        HIDWORD(v40) = v7;
        v24 = a1[29];
        if ((unint64_t)v12 >= v24)
          break;
        *(_QWORD *)v12 = v40;
        v12[2] = v8;
        v3 = v12 + 3;
        a1[28] = v12 + 3;
        if (v36 == (_DWORD)++v9)
          return;
      }
      v25 = (_DWORD *)*v38;
      v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *v38) >> 2);
      v27 = v26 + 1;
      if (v26 + 1 > 0x1555555555555555)
LABEL_44:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v25) >> 2);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 >= 0xAAAAAAAAAAAAAAALL)
        v29 = 0x1555555555555555;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 > 0x1555555555555555)
LABEL_45:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v30 = (char *)operator new(12 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[12 * v26];
      v32 = &v30[12 * v29];
      *(_QWORD *)v31 = v40;
      *((_DWORD *)v31 + 2) = v8;
      v3 = v31 + 12;
      if (v12 == v25)
      {
        a1[27] = v31;
        a1[28] = v3;
        a1[29] = v32;
      }
      else
      {
        do
        {
          v33 = *(_QWORD *)(v12 - 3);
          v12 -= 3;
          v34 = v12[2];
          *(_QWORD *)(v31 - 12) = v33;
          v31 -= 12;
          *((_DWORD *)v31 + 2) = v34;
        }
        while (v12 != v25);
        v12 = (_DWORD *)a1[27];
        a1[27] = v31;
        a1[28] = v3;
        a1[29] = v32;
        if (!v12)
          goto LABEL_42;
      }
      operator delete(v12);
LABEL_42:
      a1[28] = v3;
      ++v9;
    }
    while (v36 != (_DWORD)v9);
  }
}

uint64_t operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v6;
  int *v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  int64_t *v31;
  _QWORD *v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int *v45;
  int i;
  _DWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int *v58;
  int j;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _DWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  BOOL v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  _QWORD *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  _OWORD *v118;
  char *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  char *v126;
  uint64_t v127;
  __int128 v128;
  _QWORD *v130;
  void **v131;
  unint64_t v132;
  _QWORD *v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;

  v6 = a3;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  v131 = (void **)(a1 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 112) = a2 - 1;
  v8 = *(int **)(a1 + 120);
  v133 = (_QWORD *)(a1 + 64);
  v134 = (void **)(a1 + 120);
  v9 = *(int **)(a1 + 128);
  if (v8 != v9)
  {
    v10 = *(_QWORD *)(a1 + 192);
    v11 = *(int **)(a1 + 120);
    do
    {
      v12 = *v11++;
      *(_DWORD *)(v10 + 4 * v12) = -1;
    }
    while (v11 != v9);
  }
  *(_QWORD *)(a1 + 128) = v8;
  v13 = a3 + 20 * a4;
  v14 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((20 * a4) >> 2));
  if (a4)
    v15 = v14;
  else
    v15 = 0;
  v16 = 1;
  v135 = v6 + 20 * a4;
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*,false>(v6, v13, v15, 1, a5);
  if (a4)
  {
    v130 = (_QWORD *)(a1 + 216);
    while (1)
    {
      v18 = *(_DWORD *)v6;
      v19 = *(_QWORD *)(v6 + 4);
      v20 = *(_QWORD *)(v6 + 12);
      v21 = v19 - *(_QWORD *)(a1 + 112);
      v22 = *(_QWORD *)(a1 + 192);
      v138 = v6;
      if (*(_DWORD *)(v22 + 4 * (int)v21) == -1)
      {
        v41 = v21 - 1;
        v42 = *(_QWORD *)(a1 + 144);
        if (*(_DWORD *)(v22 + 4 * ((int)v21 - 1)) == -1)
        {
          v44 = v21;
        }
        else
        {
          v43 = v41;
          do
          {
            v44 = v41;
            v41 = *(_DWORD *)(v42 + 4 * v41);
          }
          while (v44 != v41);
          v45 = (int *)(v42 + 4 * v43);
          for (i = *v45; v44 != *v45; i = *v45)
          {
            *v45 = v44;
            v45 = (int *)(v42 + 4 * i);
          }
        }
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 88);
        v24 = *(_QWORD *)(a1 + 96);
        v26 = v24 - v23;
        v25 = v24 == v23;
        v27 = (v24 - v23) >> 3;
        if (!v25)
        {
          v28 = *(_QWORD **)(a1 + 88);
          v29 = v27;
          do
          {
            v30 = v29 >> 1;
            v31 = &v28[v29 >> 1];
            v33 = *v31;
            v32 = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v33 < v19)
              v28 = v32;
            else
              v29 = v30;
          }
          while (v29);
          v26 = (uint64_t)v28 - v23;
        }
        v34 = (int)(v26 >> 3);
        if (v34 < v27)
        {
          v35 = *(_QWORD *)(*v133 + 8 * v34);
          if ((uint64_t)v35 <= v19)
          {
            v136 = *(_QWORD *)(v6 + 12);
            v36 = *(_QWORD *)(v23 + 8 * v34);
            operations_research::sat::AllDifferentBoundsPropagator::FillHallReason((_QWORD *)a1, v35, v36);
            v139 = __PAIR64__(v35, v18);
            v37 = HIDWORD(v35);
            v39 = *(_DWORD **)(a1 + 224);
            v38 = *(_QWORD *)(a1 + 232);
            if ((unint64_t)v39 >= v38)
            {
              v47 = (_DWORD *)*v130;
              v48 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39 - *v130) >> 2);
              v49 = v48 + 1;
              if (v48 + 1 > 0x1555555555555555)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)v47) >> 2);
              if (2 * v50 > v49)
                v49 = 2 * v50;
              v51 = v50 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v49;
              if (v51)
              {
                if (v51 > 0x1555555555555555)
                  goto LABEL_129;
                v52 = (char *)operator new(12 * v51);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[12 * v48];
              *(_QWORD *)v53 = v139;
              *((_DWORD *)v53 + 2) = v37;
              v54 = v53;
              if (v39 != v47)
              {
                do
                {
                  v55 = *(_QWORD *)(v39 - 3);
                  v39 -= 3;
                  v56 = v39[2];
                  *(_QWORD *)(v54 - 12) = v55;
                  v54 -= 12;
                  *((_DWORD *)v54 + 2) = v56;
                }
                while (v39 != v47);
                v39 = (_DWORD *)*v130;
              }
              v40 = v53 + 12;
              *(_QWORD *)(a1 + 216) = v54;
              *(_QWORD *)(a1 + 224) = v53 + 12;
              *(_QWORD *)(a1 + 232) = &v52[12 * v51];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_QWORD *)v39 = v139;
              v39[2] = v37;
              v40 = v39 + 3;
            }
            *(_QWORD *)(a1 + 224) = v40;
            LODWORD(v140) = v18;
            HIDWORD(v140) = v36 + 1;
            v132 = v132 & 0xFFFFFFFF00000000 | ((unint64_t)(v36 + 1) >> 32);
            v20 = v136;
            if (!operations_research::sat::IntegerTrail::Enqueue(*(_QWORD *)(a1 + 8), v140, v132, 0, 0, *(uint64_t **)(a1 + 216), 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(_QWORD *)(a1 + 216)) >> 2)))return 0;
          }
        }
        v57 = (int)v21;
        v42 = *(_QWORD *)(a1 + 144);
        do
        {
          v44 = v21;
          LODWORD(v21) = *(_DWORD *)(v42 + 4 * (int)v21);
        }
        while (v44 != (_DWORD)v21);
        v58 = (int *)(v42 + 4 * v57);
        for (j = *v58; v44 != *v58; j = *v58)
        {
          *v58 = v44;
          v58 = (int *)(v42 + 4 * j);
        }
        LODWORD(v21) = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v44) + 1;
        v22 = *(_QWORD *)(a1 + 192);
      }
      v60 = (int)v21 + 1;
      v61 = *(_QWORD *)(a1 + 168);
      v62 = v21;
      if (*(_DWORD *)(v22 + 4 * v60) != -1)
      {
        v63 = 4 * v60;
        v62 = *(_DWORD *)(v61 + v63);
        *(_DWORD *)(v42 + v63) = v44;
      }
      *(_DWORD *)(v61 + 4 * v44) = v62;
      v64 = 4 * (int)v21;
      *(_DWORD *)(v42 + v64) = v44;
      *(_DWORD *)(v22 + v64) = v18;
      v66 = *(char **)(a1 + 128);
      v65 = *(_QWORD *)(a1 + 136);
      if ((unint64_t)v66 >= v65)
        break;
      *(_DWORD *)v66 = v21;
      *(_QWORD *)(a1 + 128) = v66 + 4;
      v67 = *(_QWORD *)(a1 + 112);
      if (v67 + v62 != v20)
        goto LABEL_11;
LABEL_77:
      v86 = v67 + v44;
      v88 = *(char **)(a1 + 64);
      v87 = *(char **)(a1 + 72);
      if (v88 == v87)
      {
LABEL_82:
        v90 = 1;
        v91 = v88;
        v92 = *(_QWORD *)(a1 + 80);
        if ((unint64_t)v88 < v92)
          goto LABEL_83;
      }
      else
      {
        v89 = v87 - 8;
        while (1)
        {
          v90 = v86 <= *(_QWORD *)v89;
          if (v86 > *(_QWORD *)v89)
            break;
          *(_QWORD *)(a1 + 72) = v89;
          *(_QWORD *)(a1 + 96) -= 8;
          v25 = v89 == v88;
          v89 -= 8;
          if (v25)
            goto LABEL_82;
        }
        v91 = v89 + 8;
        v92 = *(_QWORD *)(a1 + 80);
        if ((unint64_t)v91 < v92)
        {
LABEL_83:
          *(_QWORD *)v91 = v86;
          v93 = (uint64_t)(v91 + 8);
          goto LABEL_102;
        }
      }
      v94 = v20;
      v95 = (v91 - v88) >> 3;
      v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v97 = v92 - (_QWORD)v88;
      if (v97 >> 2 > v96)
        v96 = v97 >> 2;
      if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
        v98 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v98 = v96;
      if (v98)
      {
        if (v98 >> 61)
          goto LABEL_129;
        v99 = operator new(8 * v98);
        v100 = &v99[8 * v95];
        *v100 = v86;
        v93 = (uint64_t)(v100 + 1);
        if (v90)
        {
LABEL_94:
          v20 = v94;
          goto LABEL_100;
        }
      }
      else
      {
        v99 = 0;
        v100 = (_QWORD *)(8 * v95);
        *(_QWORD *)(8 * v95) = v86;
        v93 = 8 * v95 + 8;
        if (v90)
          goto LABEL_94;
      }
      v101 = v91 - 8 - v88;
      if (v101 < 0x58 || (unint64_t)(v88 - v99) < 0x20)
      {
        v102 = v91;
        v20 = v94;
        do
        {
LABEL_99:
          v103 = *((_QWORD *)v102 - 1);
          v102 -= 8;
          *--v100 = v103;
        }
        while (v102 != v88);
        goto LABEL_100;
      }
      v123 = (v101 >> 3) + 1;
      v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
      v102 = &v91[-v124];
      v100 = (_QWORD *)((char *)v100 - v124);
      v125 = &v99[8 * v95 - 16];
      v126 = v91 - 16;
      v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v128 = *(_OWORD *)v126;
        *(v125 - 1) = *((_OWORD *)v126 - 1);
        *v125 = v128;
        v125 -= 2;
        v126 -= 32;
        v127 -= 4;
      }
      while (v127);
      v20 = v94;
      if (v123 != (v123 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_99;
LABEL_100:
      *(_QWORD *)(a1 + 64) = v100;
      *(_QWORD *)(a1 + 72) = v93;
      *(_QWORD *)(a1 + 80) = &v99[8 * v98];
      if (v88)
        operator delete(v88);
LABEL_102:
      *(_QWORD *)(a1 + 72) = v93;
      v105 = *(char **)(a1 + 96);
      v104 = *(_QWORD *)(a1 + 104);
      if ((unint64_t)v105 >= v104)
      {
        v106 = (char *)*v131;
        v107 = v105 - (_BYTE *)*v131;
        v108 = v107 >> 3;
        v109 = (v107 >> 3) + 1;
        if (v109 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v110 = v104 - (_QWORD)v106;
        if (v110 >> 2 > v109)
          v109 = v110 >> 2;
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
          v111 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v111 = v109;
        if (v111)
        {
          if (v111 >> 61)
LABEL_129:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v112 = operator new(8 * v111);
          v113 = &v112[8 * v108];
          *v113 = v20;
          v17 = (uint64_t)(v113 + 1);
          if (v105 == v106)
            goto LABEL_120;
LABEL_114:
          v114 = v105 - 8 - v106;
          if (v114 < 0x58)
            goto LABEL_136;
          if ((unint64_t)(v105 - &v112[v107]) < 0x20)
            goto LABEL_136;
          v115 = (v114 >> 3) + 1;
          v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
          v117 = &v105[-v116];
          v113 = (_QWORD *)((char *)v113 - v116);
          v118 = &v112[8 * v108 - 16];
          v119 = v105 - 16;
          v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v121 = *(_OWORD *)v119;
            *(v118 - 1) = *((_OWORD *)v119 - 1);
            *v118 = v121;
            v118 -= 2;
            v119 -= 32;
            v120 -= 4;
          }
          while (v120);
          v105 = v117;
          if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_136:
            do
            {
              v122 = *((_QWORD *)v105 - 1);
              v105 -= 8;
              *--v113 = v122;
            }
            while (v105 != v106);
          }
        }
        else
        {
          v112 = 0;
          v113 = (_QWORD *)(8 * v108);
          *(_QWORD *)(8 * v108) = v20;
          v17 = 8 * v108 + 8;
          if (v105 != v106)
            goto LABEL_114;
        }
LABEL_120:
        *(_QWORD *)(a1 + 88) = v113;
        *(_QWORD *)(a1 + 96) = v17;
        *(_QWORD *)(a1 + 104) = &v112[8 * v111];
        if (v106)
          operator delete(v106);
        goto LABEL_10;
      }
      *(_QWORD *)v105 = v20;
      v17 = (uint64_t)(v105 + 8);
LABEL_10:
      *(_QWORD *)(a1 + 96) = v17;
LABEL_11:
      v6 = v138 + 20;
      if (v138 + 20 == v135)
        return 1;
    }
    v137 = v20;
    v68 = (char *)*v134;
    v69 = v66 - (_BYTE *)*v134;
    v70 = v69 >> 2;
    v71 = (v69 >> 2) + 1;
    if (v71 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v72 = v65 - (_QWORD)v68;
    if (v72 >> 1 > v71)
      v71 = v72 >> 1;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
      v73 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    if (v73)
    {
      if (v73 >> 62)
        goto LABEL_129;
      v74 = operator new(4 * v73);
      v75 = &v74[4 * v70];
      *v75 = v21;
      v76 = (uint64_t)(v75 + 1);
      if (v66 == v68)
      {
LABEL_74:
        *(_QWORD *)(a1 + 120) = v75;
        *(_QWORD *)(a1 + 128) = v76;
        *(_QWORD *)(a1 + 136) = &v74[4 * v73];
        if (v68)
          operator delete(v68);
        v20 = v137;
        *(_QWORD *)(a1 + 128) = v76;
        v67 = *(_QWORD *)(a1 + 112);
        if (v67 + v62 != v137)
          goto LABEL_11;
        goto LABEL_77;
      }
    }
    else
    {
      v74 = 0;
      v75 = (_DWORD *)(4 * v70);
      *(_DWORD *)(4 * v70) = v21;
      v76 = 4 * v70 + 4;
      if (v66 == v68)
        goto LABEL_74;
    }
    v77 = v66 - 4 - v68;
    if (v77 < 0x2C)
      goto LABEL_137;
    if ((unint64_t)(v66 - &v74[v69]) < 0x20)
      goto LABEL_137;
    v78 = (v77 >> 2) + 1;
    v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
    v80 = &v66[-v79];
    v75 = (_DWORD *)((char *)v75 - v79);
    v81 = &v74[4 * v70 - 16];
    v82 = v66 - 16;
    v83 = v78 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v84 = *(_OWORD *)v82;
      *(v81 - 1) = *((_OWORD *)v82 - 1);
      *v81 = v84;
      v81 -= 2;
      v82 -= 32;
      v83 -= 8;
    }
    while (v83);
    v66 = v80;
    if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_137:
      do
      {
        v85 = *((_DWORD *)v66 - 1);
        v66 -= 4;
        *--v75 = v85;
      }
      while (v66 != v68);
    }
    goto LABEL_74;
  }
  return v16;
}

void operations_research::sat::AllDifferentConstraint::~AllDifferentConstraint(operations_research::sat::AllDifferentConstraint *this)
{
  operations_research::sat::AllDifferentConstraint::~AllDifferentConstraint(this);
  JUMPOUT(0x22E31DF78);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  *(_QWORD *)this = &off_24F980270;
  v2 = (void *)*((_QWORD *)this + 43);
  if (v2)
  {
    *((_QWORD *)this + 44) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 40);
  if (v3)
  {
    v4 = *((_QWORD *)this + 41);
    v5 = (void *)*((_QWORD *)this + 40);
    if (v4 != v3)
    {
      v6 = *((_QWORD *)this + 41);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)*((_QWORD *)this + 40);
    }
    *((_QWORD *)this + 41) = v3;
    operator delete(v5);
  }
  v9 = (void *)*((_QWORD *)this + 37);
  if (v9)
  {
    *((_QWORD *)this + 38) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 34);
  if (v10)
  {
    *((_QWORD *)this + 35) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 31);
  if (v11)
  {
    *((_QWORD *)this + 32) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 28);
  if (v12)
  {
    *((_QWORD *)this + 29) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 25);
  if (v13)
  {
    *((_QWORD *)this + 26) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 22);
  if (v14)
    operator delete(v14);
  v15 = (void *)*((_QWORD *)this + 19);
  if (v15)
    operator delete(v15);
  v16 = *((_QWORD *)this + 16);
  if (v16)
  {
    v17 = *((_QWORD *)this + 17);
    v18 = (void *)*((_QWORD *)this + 16);
    if (v17 != v16)
    {
      v19 = *((_QWORD *)this + 17);
      do
      {
        v21 = *(void **)(v19 - 24);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *(_QWORD *)(v17 - 16) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v16;
    operator delete(v18);
  }
  v22 = *((_QWORD *)this + 13);
  if (v22)
  {
    v23 = *((_QWORD *)this + 14);
    v24 = (void *)*((_QWORD *)this + 13);
    if (v23 != v22)
    {
      v25 = *((_QWORD *)this + 14);
      do
      {
        v27 = *(void **)(v25 - 24);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *(_QWORD *)(v23 - 16) = v26;
          operator delete(v26);
        }
        v23 = v25;
      }
      while (v25 != v22);
      v24 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v22;
    operator delete(v24);
  }
  v28 = (void *)*((_QWORD *)this + 10);
  if (v28)
  {
    *((_QWORD *)this + 11) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 7);
  if (v29)
  {
    *((_QWORD *)this + 8) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 2);
  if (v30)
  {
    *((_QWORD *)this + 3) = v30;
    operator delete(v30);
  }
}

void operations_research::sat::PropagatorInterface::IncrementalPropagate()
{
  _QWORD *v0;
  _BYTE v1[16];

  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v1, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1032);
  v0 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v1);
}

void sub_22DA3025C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::AllDifferentBoundsPropagator::~AllDifferentBoundsPropagator(operations_research::sat::AllDifferentBoundsPropagator *this)
{
  operations_research::sat::AllDifferentBoundsPropagator::~AllDifferentBoundsPropagator(this);
  JUMPOUT(0x22E31DF78);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = &off_24F9802A0;
  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 22) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 19) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 15);
  if (v6)
  {
    *((_QWORD *)this + 16) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 11);
  if (v7)
  {
    *((_QWORD *)this + 12) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 9) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 6) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 2);
  if (v10)
  {
    *((_QWORD *)this + 3) = v10;
    operator delete(v10);
  }
}

unint64_t operations_research::sat::Trail::GetEmptyVectorToStoreReason(operations_research::sat::Trail *this, int a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v3 = a2;
  v4 = *((_QWORD *)this + 27);
  if (v4 <= a2)
  {
    v5 = (_QWORD *)((char *)this + 176);
    v6 = a2 + 1;
    if (v6 > v4)
    {
      std::deque<std::vector<operations_research::sat::Literal>>::__append(v5, v6 - v4);
      goto LABEL_13;
    }
    if (v6 >= v4)
      goto LABEL_13;
    v7 = *((_QWORD *)this + 26);
    v8 = *((_QWORD *)this + 23);
    v9 = (_QWORD *)(v8 + 8 * (v7 / 0xAA));
    if (*((_QWORD *)this + 24) == v8)
    {
      v10 = 0;
      if (!(_DWORD)v6)
      {
LABEL_12:
        std::deque<std::vector<operations_research::sat::Literal>>::__erase_to_end(v5, v9, v10);
        goto LABEL_13;
      }
    }
    else
    {
      v10 = *v9 + 24 * (v7 % 0xAA);
      if (!(_DWORD)v6)
        goto LABEL_12;
    }
    v11 = v6 - 0x5555555555555555 * ((uint64_t)(v10 - *v9) >> 3);
    if (v11 < 1)
    {
      v12 = 169 - v11;
      v9 -= v12 / 0xAA;
      v10 = *v9 + 24 * (170 * (v12 / 0xAA) - v12) + 4056;
    }
    else
    {
      v9 += v11 / 0xAAuLL;
      v10 = *v9 + 24 * (v11 % 0xAAuLL);
    }
    goto LABEL_12;
  }
LABEL_13:
  v13 = *((_QWORD *)this + 26) + v3;
  v14 = *((_QWORD *)this + 23);
  v15 = 8 * (v13 / 0xAA);
  v16 = 24 * (v13 % 0xAA);
  *(_QWORD *)(*(_QWORD *)(v14 + v15) + v16 + 8) = *(_QWORD *)(*(_QWORD *)(v14 + v15) + v16);
  return *(_QWORD *)(v14 + v15) + v16;
}

void std::deque<std::vector<operations_research::sat::Literal>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  void *v20;

  v4 = a1[1];
  v5 = a1[2];
  if (v5 == v4)
    v6 = 0;
  else
    v6 = 170 * ((v5 - v4) >> 3) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  v9 = v6 - v8;
  v10 = a2 > v9;
  v11 = a2 - v9;
  if (v10)
  {
    std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity((uint64_t)a1, v11);
    v7 = a1[5];
    v4 = a1[1];
    v5 = a1[2];
    v8 = a1[4] + v7;
  }
  v12 = (_QWORD *)(v4 + 8 * (v8 / 0xAA));
  if (v5 == v4)
  {
    v13 = 0;
    if (!a2)
      return;
  }
  else
  {
    v13 = (void *)(*v12 + 24 * (v8 % 0xAA));
    if (!a2)
      return;
  }
  v14 = a2 - 0x5555555555555555 * (((uint64_t)v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v17 = 169 - v14;
    v15 = &v12[-(v17 / 0xAA)];
    v16 = *v15 + 24 * (170 * (v17 / 0xAA) - v17) + 4056;
    if (v13 != (void *)v16)
    {
      do
      {
LABEL_15:
        v18 = v16;
        if (v12 != v15)
          v18 = *v12 + 4080;
        if (v13 == (void *)v18)
        {
          a1[5] = v7;
          if (v12 == v15)
            return;
        }
        else
        {
          v19 = 24 * ((v18 - (uint64_t)v13 - 24) / 0x18uLL) + 24;
          bzero(v13, v19);
          v7 = a1[5] - 0x5555555555555555 * (v19 >> 3);
          a1[5] = v7;
          if (v12 == v15)
            return;
        }
        v20 = (void *)v12[1];
        ++v12;
        v13 = v20;
      }
      while (v20 != (void *)v16);
    }
  }
  else
  {
    v15 = &v12[v14 / 0xAAuLL];
    v16 = *v15 + 24 * (v14 % 0xAAuLL);
    if (v13 != (void *)v16)
      goto LABEL_15;
  }
}

void std::deque<std::vector<operations_research::sat::Literal>>::__erase_to_end(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = a3;
  v6 = a1[4];
  v5 = a1[5];
  v8 = a1[1];
  v7 = a1[2];
  v9 = (_QWORD *)(v8 + 8 * ((v6 + v5) / 0xAA));
  if (v7 == v8)
  {
    v10 = 0;
    if (!a3)
      return;
  }
  else
  {
    v10 = *v9 + 24 * ((v6 + v5) % 0xAA);
    if (v10 == a3)
      return;
  }
  v11 = 170 * (v9 - a2) - 0x5555555555555555 * ((uint64_t)(v10 - *v9) >> 3);
  v12 = (uint64_t)(a3 - *a2) >> 3;
  v13 = v11 + 0x5555555555555555 * v12;
  if (v13 < 1)
    return;
  v14 = (_QWORD *)(v8 + 8 * (v6 / 0xAA));
  if (v7 == v8)
  {
    v15 = 0;
    if (!a3)
      goto LABEL_15;
  }
  else
  {
    v15 = *v14 + 24 * (v6 % 0xAA);
    if (a3 == v15)
    {
LABEL_15:
      if (v3 == v10)
        goto LABEL_25;
      do
      {
LABEL_20:
        v21 = *(void **)v3;
        if (*(_QWORD *)v3)
        {
          *(_QWORD *)(v3 + 8) = v21;
          operator delete(v21);
        }
        v3 += 24;
        if (v3 - *v14 == 4080)
        {
          v22 = v14[1];
          ++v14;
          v3 = v22;
        }
      }
      while (v3 != v10);
      v8 = a1[1];
      v7 = a1[2];
      v6 = a1[4];
      v5 = a1[5];
      goto LABEL_25;
    }
  }
  v16 = 170 * (a2 - v14) - 0x5555555555555555 * v12;
  v17 = (uint64_t)(v15 - *v14) >> 3;
  v18 = v16 + 0x5555555555555555 * v17;
  if (!v18)
  {
    v3 = v15;
    goto LABEL_15;
  }
  v19 = v18 - 0x5555555555555555 * v17;
  if (v19 >= 1)
  {
    v14 += v19 / 0xAAuLL;
    v3 = *v14 + 24 * (v19 % 0xAAuLL);
    if (v3 == v10)
      goto LABEL_25;
    goto LABEL_20;
  }
  v20 = 169 - v19;
  v14 -= v20 / 0xAA;
  v3 = *v14 + 24 * (170 * (v20 / 0xAA) - v20) + 4056;
  if (v3 != v10)
    goto LABEL_20;
LABEL_25:
  if (v7 == v8)
    v23 = 0;
  else
    v23 = 170 * ((v7 - v8) >> 3) - 1;
  v24 = v5 - v13;
  a1[5] = v24;
  if (v23 - (v24 + v6) >= 0x154)
  {
    do
    {
      operator delete(*(void **)(v7 - 8));
      v7 = a1[2] - 8;
      v25 = v7 == a1[1];
      v26 = 170 * ((v7 - a1[1]) >> 3) - 1;
      a1[2] = v7;
      if (v25)
        v26 = 0;
    }
    while ((unint64_t)(v26 - (a1[5] + a1[4])) > 0x153);
  }
}

void std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0xAA)
    v6 = v5 / 0xAA + 1;
  else
    v6 = v5 / 0xAA;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 / 0xAA)
    v8 = v7 / 0xAA;
  else
    v8 = v6;
  if (v6 <= v7 / 0xAA)
  {
    *(_QWORD *)(a1 + 32) = v7 - 170 * v8;
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0xFF0uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0xFF0uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 169;
        else
          v116 = 170;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - 170 * v6;
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= 170 * v8;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = -170 * v8;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0xFF0uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) += v144;
  if (v71)
    operator delete(v71);
}

void sub_22DA3118C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_22DA311D8()
{
  __cxa_end_catch();
  JUMPOUT(0x22DA311E0);
}

void std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void operations_research::sat::GenericLiteralWatcher::WatchLowerBound(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;

  if ((_DWORD)a2 != -1)
  {
    v7 = a2;
    v9 = *(_QWORD *)(a1 + 88);
    v8 = *(_QWORD *)(a1 + 96);
    v10 = (_QWORD *)(a1 + 88);
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
    if (v11 <= (int)a2)
    {
      v12 = ((a2 << 32) + 0x100000000) >> 32;
      if (v12 <= v11)
      {
        if (v12 < v11)
        {
          v13 = v9 + 24 * (int)v12;
          if (v8 != v13)
          {
            v14 = *(_QWORD *)(a1 + 96);
            do
            {
              v16 = *(void **)(v14 - 24);
              v14 -= 24;
              v15 = v16;
              if (v16)
              {
                *(_QWORD *)(v8 - 16) = v15;
                operator delete(v15);
              }
              v8 = v14;
            }
            while (v14 != v13);
          }
          *(_QWORD *)(a1 + 96) = v13;
        }
      }
      else
      {
        std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 88, v12 - v11);
      }
    }
    v17 = (_QWORD *)(*v10 + 24 * v7);
    v19 = v17 + 1;
    v18 = (char *)v17[1];
    v20 = v17[2];
    if ((unint64_t)v18 >= v20)
    {
      v22 = (char *)*v17;
      v23 = (uint64_t)&v18[-*v17];
      v24 = v23 >> 3;
      v25 = (v23 >> 3) + 1;
      if (v25 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v26 = v20 - (_QWORD)v22;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v28 = operator new(8 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = (unint64_t *)&v28[8 * v24];
      *v29 = a3 | (unint64_t)(a4 << 32);
      v21 = v29 + 1;
      if (v18 != v22)
      {
        v30 = v18 - v22 - 8;
        if (v30 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v18 - v28 - v23) < 0x20)
          goto LABEL_40;
        v31 = (v30 >> 3) + 1;
        v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
        v33 = &v18[-v32];
        v29 = (unint64_t *)((char *)v29 - v32);
        v34 = &v28[8 * v24 - 16];
        v35 = v18 - 16;
        v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v37 = *(_OWORD *)v35;
          *(v34 - 1) = *((_OWORD *)v35 - 1);
          *v34 = v37;
          v34 -= 2;
          v35 -= 32;
          v36 -= 4;
        }
        while (v36);
        v18 = v33;
        if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v38 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v29 = v38;
          }
          while (v18 != v22);
        }
        v18 = (char *)*v17;
      }
      *v17 = v29;
      *v19 = v21;
      v17[2] = &v28[8 * v27];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *(_QWORD *)v18 = a3 | (unint64_t)(a4 << 32);
      v21 = v18 + 8;
    }
    *v19 = v21;
  }
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F980320;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F980320;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  *v2 = &off_24F980320;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_22DA31AD8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v6;
  char *v7;

  a2[1] = 0;
  *a2 = &off_24F980320;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_22DA31B7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  signed int *v4;
  signed int v5;
  uint64_t *v6;
  uint64_t (***v7)();
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD **v56;
  int *v57;
  uint64_t v58;
  uint64_t (***v59)();
  uint64_t v60;
  _QWORD *v61;
  _QWORD **v62;
  uint64_t v63;
  signed int *v64;
  uint64_t *v65;
  signed int *v66;
  uint64_t v67;
  char *v68;
  void *__p[3];
  _QWORD **v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t (**v73)();
  int *v74[2];
  uint64_t (***v75)();
  char *v76;
  char *v77;
  char **v78;
  uint64_t (**v79)();
  signed int v80;
  uint64_t (***v81)();
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v71 = 0;
  v72 = 0;
  v70 = &v71;
  v67 = v3;
  v65 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v3);
  v4 = *(signed int **)(a1 + 8);
  v63 = a1;
  v64 = *(signed int **)(a1 + 16);
  if (v4 != v64)
  {
    do
    {
      v5 = *v4;
      v79 = &off_24F980458;
      v80 = v5;
      v81 = &v79;
      v6 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v67);
      if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v6, v80))
        operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v6, v80);
      operations_research::sat::IntegerEncoder::FullDomainEncoding(v6, v80, (char **)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v66 = v4;
      v7 = v81;
      if (v81 == &v79)
      {
        v7 = &v79;
        v8 = 4;
      }
      else
      {
        if (!v81)
          goto LABEL_13;
        v8 = 5;
      }
      (*v7)[v8]();
LABEL_13:
      operations_research::sat::IntegerEncoder::FullDomainEncoding(v65, v5, &v76);
      v9 = v76;
      v68 = v77;
      if (v76 == v77)
      {
        if (v76)
          goto LABEL_78;
        goto LABEL_3;
      }
      do
      {
        v11 = v71;
        v12 = *(_QWORD *)v9;
        v13 = &v71;
        v14 = &v71;
        if (v71)
        {
          while (1)
          {
            while (1)
            {
              v14 = (_QWORD **)v11;
              v15 = v11[4];
              if (v12 >= v15)
                break;
              v11 = *v14;
              v13 = v14;
              if (!*v14)
                goto LABEL_25;
            }
            if (v15 >= v12)
              break;
            v11 = v14[1];
            if (!v11)
            {
              v13 = v14 + 1;
              goto LABEL_25;
            }
          }
          v17 = v14;
          v32 = (char *)v14[6];
          v31 = (char *)v14[7];
          if (v32 < v31)
          {
LABEL_16:
            *(_DWORD *)v32 = *((_DWORD *)v9 + 2);
            v10 = (uint64_t)(v32 + 4);
            goto LABEL_17;
          }
        }
        else
        {
LABEL_25:
          v16 = operator new(0x40uLL);
          v17 = v16;
          v16[4] = v12;
          v16[5] = 0;
          v16[6] = 0;
          v16[7] = 0;
          *v16 = 0;
          v16[1] = 0;
          v16[2] = v14;
          *v13 = v16;
          v18 = v16;
          if (*v70)
          {
            v70 = (_QWORD **)*v70;
            v18 = (_QWORD *)*v13;
          }
          v19 = v71;
          v20 = v18 == v71;
          *((_BYTE *)v18 + 24) = v18 == v71;
          if (!v20)
          {
            do
            {
              v21 = v18[2];
              if (*(_BYTE *)(v21 + 24))
                break;
              v22 = *(_QWORD **)(v21 + 16);
              v23 = *v22;
              if (*v22 == v21)
              {
                v26 = v22[1];
                if (!v26 || (v27 = *(unsigned __int8 *)(v26 + 24), v24 = (_BYTE *)(v26 + 24), v27))
                {
                  if (*(_QWORD **)v21 == v18)
                  {
                    *(_BYTE *)(v21 + 24) = 1;
                    *((_BYTE *)v22 + 24) = 0;
                    v30 = *(_QWORD *)(v21 + 8);
                    *v22 = v30;
                    if (v30)
                      goto LABEL_42;
                  }
                  else
                  {
                    v28 = *(uint64_t **)(v21 + 8);
                    v29 = *v28;
                    *(_QWORD *)(v21 + 8) = *v28;
                    if (v29)
                    {
                      *(_QWORD *)(v29 + 16) = v21;
                      v22 = *(_QWORD **)(v21 + 16);
                    }
                    v28[2] = (uint64_t)v22;
                    *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * (**(_QWORD **)(v21 + 16) != v21)) = v28;
                    *v28 = v21;
                    *(_QWORD *)(v21 + 16) = v28;
                    v22 = (_QWORD *)v28[2];
                    v21 = *v22;
                    *((_BYTE *)v28 + 24) = 1;
                    *((_BYTE *)v22 + 24) = 0;
                    v30 = *(_QWORD *)(v21 + 8);
                    *v22 = v30;
                    if (v30)
LABEL_42:
                      *(_QWORD *)(v30 + 16) = v22;
                  }
                  *(_QWORD *)(v21 + 16) = v22[2];
                  *(_QWORD *)(v22[2] + 8 * (*(_QWORD *)v22[2] != (_QWORD)v22)) = v21;
                  *(_QWORD *)(v21 + 8) = v22;
LABEL_50:
                  v22[2] = v21;
                  break;
                }
              }
              else if (!v23 || (v25 = *(unsigned __int8 *)(v23 + 24), v24 = (_BYTE *)(v23 + 24), v25))
              {
                if (*(_QWORD **)v21 == v18)
                {
                  v50 = v18[1];
                  *(_QWORD *)v21 = v50;
                  if (v50)
                  {
                    *(_QWORD *)(v50 + 16) = v21;
                    v22 = *(_QWORD **)(v21 + 16);
                  }
                  v18[2] = v22;
                  *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * (**(_QWORD **)(v21 + 16) != v21)) = v18;
                  v18[1] = v21;
                  *(_QWORD *)(v21 + 16) = v18;
                  v22 = (_QWORD *)v18[2];
                  *((_BYTE *)v18 + 24) = 1;
                  *((_BYTE *)v22 + 24) = 0;
                  v21 = v22[1];
                  v33 = *(_QWORD **)v21;
                  v22[1] = *(_QWORD *)v21;
                  if (v33)
LABEL_48:
                    v33[2] = v22;
                }
                else
                {
                  *(_BYTE *)(v21 + 24) = 1;
                  *((_BYTE *)v22 + 24) = 0;
                  v21 = v22[1];
                  v33 = *(_QWORD **)v21;
                  v22[1] = *(_QWORD *)v21;
                  if (v33)
                    goto LABEL_48;
                }
                *(_QWORD *)(v21 + 16) = v22[2];
                *(_QWORD *)(v22[2] + 8 * (*(_QWORD *)v22[2] != (_QWORD)v22)) = v21;
                *(_QWORD *)v21 = v22;
                goto LABEL_50;
              }
              *(_BYTE *)(v21 + 24) = 1;
              v18 = v22;
              *((_BYTE *)v22 + 24) = v22 == v19;
              *v24 = 1;
            }
            while (v22 != v19);
          }
          ++v72;
          v32 = (char *)v16[6];
          v31 = (char *)v16[7];
          if (v32 < v31)
            goto LABEL_16;
        }
        v34 = (char *)v17[5];
        v35 = (v32 - v34) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v37 = v31 - v34;
        if (v37 >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v39 = operator new(4 * v38);
          v40 = &v39[4 * v35];
          *v40 = *((_DWORD *)v9 + 2);
          v10 = (uint64_t)(v40 + 1);
          if (v32 == v34)
            goto LABEL_69;
LABEL_63:
          v41 = v32 - 4 - v34;
          if (v41 < 0x2C)
            goto LABEL_115;
          if ((unint64_t)(v34 - v39) < 0x20)
            goto LABEL_115;
          v42 = (v41 >> 2) + 1;
          v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
          v44 = &v32[-v43];
          v40 = (_DWORD *)((char *)v40 - v43);
          v45 = &v39[4 * v35 - 16];
          v46 = v32 - 16;
          v47 = v42 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            *v45 = v48;
            v45 -= 2;
            v46 -= 32;
            v47 -= 8;
          }
          while (v47);
          v32 = v44;
          if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_115:
            do
            {
              v49 = *((_DWORD *)v32 - 1);
              v32 -= 4;
              *--v40 = v49;
            }
            while (v32 != v34);
          }
          goto LABEL_69;
        }
        v39 = 0;
        v40 = (_DWORD *)(4 * v35);
        *(_DWORD *)(4 * v35) = *((_DWORD *)v9 + 2);
        v10 = 4 * v35 + 4;
        if (v32 != v34)
          goto LABEL_63;
LABEL_69:
        v17[5] = v40;
        v17[6] = v10;
        v17[7] = &v39[4 * v38];
        if (v34)
          operator delete(v34);
LABEL_17:
        v17[6] = v10;
        v9 += 12;
      }
      while (v9 != v68);
      v9 = v76;
      if (v76)
      {
LABEL_78:
        v77 = v9;
        operator delete(v9);
      }
LABEL_3:
      v4 = v66 + 1;
    }
    while (v66 + 1 != v64);
  }
  v51 = v70;
  if (v70 != &v71)
  {
    do
    {
      if (v51[6] - v51[5] >= 5uLL)
      {
        operations_research::sat::AtMostOneConstraint((uint64_t)(v51 + 5), (uint64_t)&v76);
        v73 = (uint64_t (**)())v67;
        if (!v78)
          std::__throw_bad_function_call[abi:ne180100]();
        (*((void (**)(char **, uint64_t (***)()))*v78 + 6))(v78, &v73);
        v53 = v78;
        if (v78 == &v76)
        {
          v53 = &v76;
          v54 = 4;
          goto LABEL_90;
        }
        if (v78)
        {
          v54 = 5;
LABEL_90:
          (*(void (**)(void))&(*v53)[8 * v54])();
        }
      }
      v55 = (_QWORD *)v51[1];
      if (v55)
      {
        do
        {
          v56 = (_QWORD **)v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD **)v51[2];
          v20 = *v56 == v51;
          v51 = v56;
        }
        while (!v20);
      }
      v51 = v56;
    }
    while (v56 != &v71);
  }
  if (v72 == (uint64_t)(*(_QWORD *)(v63 + 16) - *(_QWORD *)(v63 + 8)) >> 2)
  {
    v52 = v70;
    if (v70 != &v71)
    {
      while (1)
      {
        v57 = (int *)v52[5];
        v58 = (uint64_t)(v52[6] - (_QWORD)v57) >> 2;
        v73 = &off_24F980568;
        v74[0] = v57;
        v74[1] = (int *)v58;
        v75 = &v73;
        operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v74, v67);
        v59 = v75;
        if (v75 == &v73)
          break;
        if (v75)
        {
          v60 = 5;
LABEL_102:
          (*v59)[v60]();
        }
        v61 = (_QWORD *)v52[1];
        if (v61)
        {
          do
          {
            v62 = (_QWORD **)v61;
            v61 = (_QWORD *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = (_QWORD **)v52[2];
            v20 = *v62 == v52;
            v52 = v62;
          }
          while (!v20);
        }
        v52 = v62;
        if (v62 == &v71)
          goto LABEL_109;
      }
      v59 = &v73;
      v60 = 4;
      goto LABEL_102;
    }
  }
LABEL_109:
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v70, v71);
}

void sub_22DA322B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_22DA322CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28)
{
  char *v29;
  uint64_t v30;

  v29 = a24;
  if (a24 == &a21)
  {
    v30 = 4;
    v29 = &a21;
  }
  else
  {
    if (!a24)
    {
      std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a18, a19);
      _Unwind_Resume(a1);
    }
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat18AllDifferentBinaryERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariabl"
                     "e_tag_EiEENS1_9allocatorIS6_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat18AllDifferentBinaryERKNSt3__16vectorIN3gtl7IntTypeINS0_20Int"
                                "egerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat18AllDifferentBinaryERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat18AllDifferentBinaryERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentBinary(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operator new();
  *(_QWORD *)v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a1);
  *(_QWORD *)(v8 + 8) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerDomains>(a1);
  *(_BYTE *)(v8 + 16) = 1;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_QWORD *)(v8 + 56) = 0;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_QWORD *)(v8 + 184) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_QWORD *)(v8 + 272) = 0;
  *(_DWORD *)(v8 + 280) = -1;
  *(_QWORD *)(v8 + 296) = 0;
  *(_QWORD *)(v8 + 304) = 0;
  *(_QWORD *)(v8 + 288) = 0;
  v9 = v3;
  v10 = (_QWORD *)*v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v9 = v10;
        v11 = v10[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
          break;
        v10 = (_QWORD *)*v9;
        v3 = v9;
        if (!*v9)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        break;
      v10 = (_QWORD *)v9[1];
      if (!v10)
      {
        v3 = v9 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v9;
    v9 = operator new(0x30uLL);
    v9[4] = &gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v12;
    *v3 = v9;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v9;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v9[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F980420;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DA32620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1032C409C3AF894);
  _Unwind_Resume(a1);
}

void operations_research::sat::AtMostOneConstraint(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  int64_t v9;
  char *v10;
  char *v11;

  v4 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = v3 - *(_QWORD *)a1;
  if (v3 == *(_QWORD *)a1)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a1);
    v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(_QWORD *)(a2 + 24) = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_24F9804E8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v9);
    v8[1] = v10;
    v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(_QWORD *)(a2 + 24) = v8;
  if (v6)
    operator delete(v6);
}

void sub_22DA32754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

operations_research::sat::SatSolver *operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::SatSolver *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
    return (operations_research::sat::SatSolver *)v4[5];
LABEL_12:
  v8 = (operations_research::sat::SatSolver *)operator new();
  operations_research::sat::SatSolver::SatSolver(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9803A0;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DA32928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F2C403AE0FE62);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerDomains>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerDomains>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerDomains>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerDomains>(void)::d)
    return (_QWORD *)v4[5];
LABEL_12:
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerDomains>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerDomains>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::IntegerDomains>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = off_24F9803E8;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

char *std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = v5 >> 3;
  v7 = (v5 >> 3) + 1;
  if (v7 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v9 = a1[2] - v4;
  if (v9 >> 2 > v7)
    v7 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v6];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3)
      return v14;
    goto LABEL_26;
  }
  v15 = v3 - v4 - 8;
  if (v15 < 0x78 || &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v5 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v3)
    goto LABEL_34;
  v16 = (v15 >> 3) + 1;
  v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v12 -= v17;
  v18 = &v3[-v17];
  v19 = v3 - 16;
  v20 = &v11[8 * v6 - 16];
  v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v23 = *((_OWORD *)v19 - 1);
    v22 = *(_OWORD *)v19;
    *((_OWORD *)v19 - 1) = 0uLL;
    *(_OWORD *)v19 = 0uLL;
    *((_OWORD *)v20 - 1) = v23;
    *(_OWORD *)v20 = v22;
    v19 -= 32;
    v20 -= 32;
    v21 -= 4;
  }
  while (v21);
  v3 = v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v24 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v12 - 1) = v24;
      v12 -= 8;
    }
    while (v3 != v4);
  }
  v25 = *a1;
  v3 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3 != v25)
  {
    do
    {
      v27 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      v26 = v27;
      *(_QWORD *)v3 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    while (v3 != v25);
    v3 = v25;
  }
  if (v3)
LABEL_26:
    operator delete(v3);
  return v14;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::SatSolver>::~Delete(_QWORD *a1)
{
  operations_research::sat::SatSolver *v2;

  v2 = (operations_research::sat::SatSolver *)a1[1];
  *a1 = &off_24F9803A0;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatSolver::~SatSolver(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SatSolver>::~Delete(_QWORD *a1)
{
  operations_research::sat::SatSolver *v2;

  v2 = (operations_research::sat::SatSolver *)a1[1];
  *a1 = &off_24F9803A0;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatSolver::~SatSolver(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::IntegerDomains>::~Delete(_QWORD *a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  char v7;

  v2 = (void **)a1[1];
  *a1 = off_24F9803E8;
  a1[1] = 0;
  if (v2)
  {
    v3 = (void **)*v2;
    if (*v2)
    {
      v4 = (void **)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        v6 = (void **)v2[1];
        do
        {
          v7 = *((_BYTE *)v6 - 24);
          v6 -= 3;
          if ((v7 & 1) != 0)
            operator delete(*(v4 - 2));
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x22E31DF78](v2, 0x20C40960023A9);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::IntegerDomains>::~Delete(_QWORD *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  char v6;

  v1 = (void **)a1[1];
  *a1 = off_24F9803E8;
  a1[1] = 0;
  if (v1)
  {
    v2 = (void **)*v1;
    if (*v1)
    {
      v3 = (void **)v1[1];
      v4 = *v1;
      if (v3 != v2)
      {
        v5 = (void **)v1[1];
        do
        {
          v6 = *((_BYTE *)v5 - 24);
          v5 -= 3;
          if ((v6 & 1) != 0)
            operator delete(*(v3 - 2));
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    MEMORY[0x22E31DF78](v1, 0x20C40960023A9);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::IntegerEncoder>::~Delete(_QWORD *a1)
{
  operations_research::sat::IntegerEncoder *v2;

  v2 = (operations_research::sat::IntegerEncoder *)a1[1];
  *a1 = &off_24F980420;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::IntegerEncoder::~IntegerEncoder(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::IntegerEncoder>::~Delete(_QWORD *a1)
{
  operations_research::sat::IntegerEncoder *v2;

  v2 = (operations_research::sat::IntegerEncoder *)a1[1];
  *a1 = &off_24F980420;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::IntegerEncoder::~IntegerEncoder(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::IntegerEncoder::~IntegerEncoder(operations_research::sat::IntegerEncoder *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[16];

  if (*operations_research::sat::IntegerEncoder::~IntegerEncoder()::vlocal__ >= 1
    && (operations_research::sat::IntegerEncoder::~IntegerEncoder()::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::IntegerEncoder::~IntegerEncoder()::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer.h", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v28, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 286);
    v2 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"#variables created = ", 21);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v28);
  }
  v3 = (void *)*((_QWORD *)this + 36);
  if (v3)
  {
    *((_QWORD *)this + 37) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 32);
  if (v4)
    operator delete(v4);
  v5 = *((_QWORD *)this + 29);
  if (v5)
  {
    v6 = *((_QWORD *)this + 30);
    v7 = (void *)*((_QWORD *)this + 29);
    if (v6 != v5)
    {
      v8 = *((_QWORD *)this + 30);
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v5;
    operator delete(v7);
  }
  if (*((_QWORD *)this + 26))
  {
    operator delete(*((void **)this + 23));
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 23) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 26) = 0;
  }
  v11 = (_QWORD *)*((_QWORD *)this + 27);
  if (v11)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v11);
  v12 = (void *)*((_QWORD *)this + 20);
  if (v12)
  {
    *((_QWORD *)this + 21) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 17);
  if (v13)
  {
    *((_QWORD *)this + 18) = v13;
    operator delete(v13);
  }
  v14 = *((_QWORD *)this + 14);
  if (v14)
  {
    v15 = *((_QWORD *)this + 15);
    v16 = (void *)*((_QWORD *)this + 14);
    if (v15 != v14)
    {
      v17 = *((_QWORD *)this + 15);
      do
      {
        v18 = *(_BYTE *)(v17 - 32);
        v17 -= 32;
        if ((v18 & 1) != 0)
          operator delete(*(void **)(v15 - 24));
        v15 = v17;
      }
      while (v17 != v14);
      v16 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v14;
    operator delete(v16);
  }
  v19 = *((_QWORD *)this + 11);
  if (v19)
  {
    v20 = *((_QWORD *)this + 12);
    v21 = (void *)*((_QWORD *)this + 11);
    if (v20 != v19)
    {
      v22 = *((_QWORD *)this + 12);
      do
      {
        v23 = *(_BYTE *)(v22 - 32);
        v22 -= 32;
        if ((v23 & 1) != 0)
          operator delete(*(void **)(v20 - 24));
        v20 = v22;
      }
      while (v22 != v19);
      v21 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v19;
    operator delete(v21);
  }
  if ((*((_BYTE *)this + 56) & 1) != 0)
    operator delete(*((void **)this + 8));
  v24 = *((_QWORD *)this + 4);
  if (v24)
  {
    v25 = *((_QWORD *)this + 5);
    v26 = (void *)*((_QWORD *)this + 4);
    if (v25 != v24)
    {
      do
      {
        v27 = v25 - 24;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v25 - 24, *(_QWORD **)(v25 - 16));
        v25 = v27;
      }
      while (v27 != v24);
      v26 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v24;
    operator delete(v26);
  }
}

void std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_DWORD *std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F980458;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24F980458;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t *std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t *v5;

  v5 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(*a2);
  if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v5, *(_DWORD *)(a1 + 8)))
    operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v5, *(_DWORD *)(a1 + 8));
  return operations_research::sat::IntegerEncoder::FullDomainEncoding(v5, *(_DWORD *)(a1 + 8), a3);
}

uint64_t std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat19FullyEncodeVariableEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat19FullyEncodeVariableEN3gtl7IntTypeINS0_20IntegerVariable_tag"
                                "_EiEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat19FullyEncodeVariableEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat19FullyEncodeVariableEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::FullyEncodeVariable(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F9804E8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F9804E8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  *v2 = &off_24F9804E8;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_22DA333E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v6;
  char *v7;

  a2[1] = 0;
  *a2 = &off_24F9804E8;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_22DA33484(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::operator()((int **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat19AtMostOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EE"
                     "EEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat19AtMostOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allo"
                                "catorIS3_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat19AtMostOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat19AtMostOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::AtMostOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(int **a1, uint64_t a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *i;
  uint64_t v18;
  int v19;
  operations_research::sat::SatSolver *v20;
  void *__p;
  void *v22;
  char *v23;

  __p = 0;
  v22 = 0;
  v23 = 0;
  v4 = *a1;
  v3 = a1[1];
  v5 = (char *)v3 - (char *)*a1;
  if (v3 == *a1)
  {
    v8 = 0;
    v9 = 0;
LABEL_21:
    v11 = v8;
    goto LABEL_22;
  }
  if ((unint64_t)v5 >= 0x5555555555555555)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v6 = v5 >> 2;
  v7 = (char *)operator new(12 * (v5 >> 2));
  v8 = v7;
  v9 = &v7[12 * v6];
  v22 = v7;
  if (v3 == v4)
    goto LABEL_21;
  v10 = v22;
  v11 = v7;
  do
  {
    while (1)
    {
      v12 = *v4;
      if (v8 >= v9)
        break;
      *(_DWORD *)v8 = v12;
      *(_QWORD *)(v8 + 4) = 1;
      v10 = v8 + 12;
      ++v4;
      v8 += 12;
      if (v4 == v3)
        goto LABEL_19;
    }
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 2) + 1;
    if (v13 > 0x1555555555555555)
    {
      v22 = v10;
      v23 = v9;
      __p = v11;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((v9 - v11) >> 2) > v13)
      v13 = 0x5555555555555556 * ((v9 - v11) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v14 = 0x1555555555555555;
    else
      v14 = v13;
    if (v14 > 0x1555555555555555)
    {
      v22 = v10;
      v23 = v9;
      __p = v11;
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v15 = (char *)operator new(12 * v14);
    v16 = &v15[4 * ((v8 - v11) >> 2)];
    *(_DWORD *)v16 = v12;
    *(_QWORD *)(v16 + 4) = 1;
    for (i = v16; v8 != v11; *((_DWORD *)i + 2) = v19)
    {
      v18 = *(_QWORD *)(v8 - 12);
      v8 -= 12;
      v19 = *((_DWORD *)v8 + 2);
      *(_QWORD *)(i - 12) = v18;
      i -= 12;
    }
    v9 = &v15[12 * v14];
    v10 = v16 + 12;
    if (v11)
      operator delete(v11);
    v11 = i;
    ++v4;
    v8 = (char *)v10;
  }
  while (v4 != v3);
LABEL_19:
  v22 = v10;
LABEL_22:
  v23 = v9;
  __p = v11;
  v20 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
  operations_research::sat::SatSolver::AddLinearConstraint((uint64_t)v20, 0, 0, 1, 1, &__p);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_22DA3378C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F980568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F980568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((int **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16ClauseConstraintEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16ClauseConstraintEN4absl14lts_2020_02_254SpanIKNS0_7LiteralE"
                                "EEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16ClauseConstraintEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16ClauseConstraintEN4absl14lts_2020_02_254SpanIKNS0_7LiteralEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(int **a1, uint64_t a2)
{
  unint64_t v2;
  char *v4;
  int *v5;
  uint64_t v6;
  char *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *i;
  uint64_t v14;
  int v15;
  operations_research::sat::SatSolver *v16;
  uint64_t v17;
  void *__p;
  void *v19;
  unint64_t v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  v2 = (unint64_t)a1[1];
  if (v2)
  {
    if (v2 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = a2;
    v4 = (char *)operator new(12 * v2);
    v5 = *a1;
    v6 = (uint64_t)&(*a1)[v2];
    v2 = (unint64_t)&v4[12 * v2];
    v19 = v4;
    v7 = v4;
    do
    {
      while (1)
      {
        v8 = *v5;
        if ((unint64_t)v4 >= v2)
          break;
        *(_DWORD *)v4 = v8;
        *(_QWORD *)(v4 + 4) = 1;
        v4 += 12;
        if (++v5 == (int *)v6)
          goto LABEL_18;
      }
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 2) + 1;
      if (v9 > 0x1555555555555555)
      {
        v19 = v4;
        v20 = v2;
        __p = v7;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v2 - (_QWORD)v7) >> 2) > v9)
        v9 = 0x5555555555555556 * ((uint64_t)(v2 - (_QWORD)v7) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v7) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v10 = 0x1555555555555555;
      else
        v10 = v9;
      if (v10 > 0x1555555555555555)
      {
        v19 = v4;
        v20 = v2;
        __p = v7;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v11 = (char *)operator new(12 * v10);
      v12 = &v11[4 * ((v4 - v7) >> 2)];
      *(_DWORD *)v12 = v8;
      *(_QWORD *)(v12 + 4) = 1;
      for (i = v12; v4 != v7; *((_DWORD *)i + 2) = v15)
      {
        v14 = *(_QWORD *)(v4 - 12);
        v4 -= 12;
        v15 = *((_DWORD *)v4 + 2);
        *(_QWORD *)(i - 12) = v14;
        i -= 12;
      }
      v2 = (unint64_t)&v11[12 * v10];
      v4 = v12 + 12;
      if (v7)
        operator delete(v7);
      v7 = i;
      ++v5;
    }
    while (v5 != (int *)v6);
LABEL_18:
    v19 = v4;
    a2 = v17;
  }
  else
  {
    v7 = 0;
  }
  v20 = v2;
  __p = v7;
  v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
  operations_research::sat::SatSolver::AddLinearConstraint((uint64_t)v16, 1, 1, 0, 1, &__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_22DA33AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F9805F8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F9805F8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  *v2 = &off_24F9805F8;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_22DA33C40(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v6;
  char *v7;

  a2[1] = 0;
  *a2 = &off_24F9805F8;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_22DA33CE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(_QWORD *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  operations_research::sat::IntegerTrail *v5;
  operations_research::sat::GenericLiteralWatcher *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = result + 1;
  if (result[1] != result[2])
  {
    v3 = *a2;
    v4 = operator new();
    v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v3);
    operations_research::sat::AllDifferentBoundsPropagator::AllDifferentBoundsPropagator(v4, v2, (uint64_t)v5);
    v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v3);
    v7 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)v6, v4);
    v8 = *(unsigned int **)(v4 + 16);
    v9 = *(unsigned int **)(v4 + 24);
    while (v8 != v9)
    {
      v10 = *v8;
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)v6, v10, v7, 0xFFFFFFFFLL);
      if ((_DWORD)v10 != -1)
        operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)v6, v10 ^ 1, v7, 0xFFFFFFFFLL);
      v8 += 5;
    }
    operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)v6, v7);
    result = (_QWORD *)operator new();
    *result = &off_24F9807F8;
    result[1] = v4;
    v12 = result;
    v11 = *(_QWORD **)(v3 + 56);
    if ((unint64_t)v11 >= *(_QWORD *)(v3 + 64))
    {
      result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v3 + 48), &v12);
      *(_QWORD *)(v3 + 56) = result;
    }
    else
    {
      *v11 = result;
      *(_QWORD *)(v3 + 56) = v11 + 1;
    }
  }
  return result;
}

void sub_22DA33E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10B1C401C52D3F6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20AllDifferentOnBoundsERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVaria"
                     "ble_tag_EiEENS1_9allocatorIS6_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20AllDifferentOnBoundsERKNSt3__16vectorIN3gtl7IntTypeINS0_20I"
                                "ntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20AllDifferentOnBoundsERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20AllDifferentOnBoundsERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentOnBounds(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

operations_research::sat::IntegerTrail *operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::IntegerTrail *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
    return (operations_research::sat::IntegerTrail *)v4[5];
LABEL_12:
  v8 = (operations_research::sat::IntegerTrail *)operator new();
  operations_research::sat::IntegerTrail::IntegerTrail(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F980748;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DA340AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F3C403A7A5EF4);
  _Unwind_Resume(a1);
}

operations_research::sat::GenericLiteralWatcher *operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::GenericLiteralWatcher *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::GenericLiteralWatcher>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::GenericLiteralWatcher>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::GenericLiteralWatcher>(void)::d)
    return (operations_research::sat::GenericLiteralWatcher *)v4[5];
LABEL_12:
  v8 = (operations_research::sat::GenericLiteralWatcher *)operator new();
  operations_research::sat::GenericLiteralWatcher::GenericLiteralWatcher(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::GenericLiteralWatcher>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::GenericLiteralWatcher>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::GenericLiteralWatcher>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F980780;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DA34258(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F3C40AE219659);
  _Unwind_Resume(a1);
}

operations_research::sat::IntegerTrail *operations_research::sat::IntegerTrail::IntegerTrail(operations_research::sat::IntegerTrail *this, operations_research::sat::Model *a2)
{
  operations_research::sat::SatSolver *v4;

  *((_BYTE *)this + 21) = 0;
  *((_WORD *)this + 11) = 0;
  *((_BYTE *)this + 31) = 12;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)this = &unk_24F9861F0;
  strcpy((char *)this + 8, "IntegerTrail");
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = &off_24F9806B0;
  *((_QWORD *)this + 55) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *(_OWORD *)((char *)this + 521) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *(_OWORD *)((char *)this + 604) = 0u;
  *((_QWORD *)this + 81) = (char *)this + 616;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_DWORD *)this + 164) = -1;
  *((_QWORD *)this + 96) = 0;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *(_OWORD *)((char *)this + 732) = 0u;
  *((_QWORD *)this + 97) = (char *)this + 744;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_DWORD *)this + 196) = -1;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 115) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerDomains>((uint64_t)a2);
  *((_QWORD *)this + 116) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a2);
  *((_QWORD *)this + 117) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a2);
  operations_research::sat::SatSolver::AddPropagator(v4, this);
  return this;
}

void sub_22DA34448(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  void **v8;
  void **v9;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v11 = *(void **)(v1 + 896);
  if (v11)
  {
    *(_QWORD *)(v1 + 904) = v11;
    operator delete(v11);
    v12 = *(void **)(v1 + 872);
    if (!v12)
    {
LABEL_3:
      v13 = *(void **)(v1 + 824);
      if (!v13)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else
  {
    v12 = *(void **)(v1 + 872);
    if (!v12)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 880) = v12;
  operator delete(v12);
  v13 = *(void **)(v1 + 824);
  if (!v13)
  {
LABEL_4:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v6);
    v14 = *(void **)(v1 + 720);
    if (!v14)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  *(_QWORD *)(v1 + 832) = v13;
  operator delete(v13);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v6);
  v14 = *(void **)(v1 + 720);
  if (!v14)
  {
LABEL_5:
    v15 = *(void **)(v1 + 696);
    if (!v15)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  *(_QWORD *)(v1 + 728) = v14;
  operator delete(v14);
  v15 = *(void **)(v1 + 696);
  if (!v15)
  {
LABEL_6:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v5);
    v16 = *(void **)(v1 + 592);
    if (!v16)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  *(_QWORD *)(v1 + 704) = v15;
  operator delete(v15);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v5);
  v16 = *(void **)(v1 + 592);
  if (!v16)
  {
LABEL_7:
    v17 = *(void **)(v1 + 568);
    if (!v17)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  *(_QWORD *)(v1 + 600) = v16;
  operator delete(v16);
  v17 = *(void **)(v1 + 568);
  if (!v17)
  {
LABEL_8:
    v18 = *v9;
    if (!*v9)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  *(_QWORD *)(v1 + 576) = v17;
  operator delete(v17);
  v18 = *v9;
  if (!*v9)
  {
LABEL_9:
    operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::~RevMap(v4);
    v19 = *(void **)(v1 + 408);
    if (!v19)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  *(_QWORD *)(v1 + 552) = v18;
  operator delete(v18);
  operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::~RevMap(v4);
  v19 = *(void **)(v1 + 408);
  if (!v19)
  {
LABEL_10:
    v20 = *(void **)(v1 + 384);
    if (!v20)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  *(_QWORD *)(v1 + 416) = v19;
  operator delete(v19);
  v20 = *(void **)(v1 + 384);
  if (!v20)
  {
LABEL_11:
    v21 = *(void **)(v1 + 360);
    if (!v21)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  *(_QWORD *)(v1 + 392) = v20;
  operator delete(v20);
  v21 = *(void **)(v1 + 360);
  if (!v21)
  {
LABEL_12:
    v22 = *(void **)(v1 + 336);
    if (!v22)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  *(_QWORD *)(v1 + 368) = v21;
  operator delete(v21);
  v22 = *(void **)(v1 + 336);
  if (!v22)
  {
LABEL_13:
    v23 = *(void **)(v1 + 312);
    if (!v23)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  *(_QWORD *)(v1 + 344) = v22;
  operator delete(v22);
  v23 = *(void **)(v1 + 312);
  if (!v23)
  {
LABEL_14:
    v24 = *(void **)(v1 + 288);
    if (!v24)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  *(_QWORD *)(v1 + 320) = v23;
  operator delete(v23);
  v24 = *(void **)(v1 + 288);
  if (!v24)
  {
LABEL_15:
    v25 = *(void **)(v1 + 264);
    if (!v25)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  *(_QWORD *)(v1 + 296) = v24;
  operator delete(v24);
  v25 = *(void **)(v1 + 264);
  if (!v25)
  {
LABEL_16:
    v26 = *(void **)(v1 + 240);
    if (!v26)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  *(_QWORD *)(v1 + 272) = v25;
  operator delete(v25);
  v26 = *(void **)(v1 + 240);
  if (!v26)
  {
LABEL_17:
    v27 = *(void **)(v1 + 216);
    if (!v27)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  *(_QWORD *)(v1 + 248) = v26;
  operator delete(v26);
  v27 = *(void **)(v1 + 216);
  if (!v27)
  {
LABEL_18:
    v28 = *(void **)(v1 + 192);
    if (!v28)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  *(_QWORD *)(v1 + 224) = v27;
  operator delete(v27);
  v28 = *(void **)(v1 + 192);
  if (!v28)
  {
LABEL_19:
    std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](v3);
    v29 = *(void **)(v1 + 144);
    if (!v29)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  *(_QWORD *)(v1 + 200) = v28;
  operator delete(v28);
  std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](v3);
  v29 = *(void **)(v1 + 144);
  if (!v29)
  {
LABEL_20:
    absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::~flat_hash_map(v2);
    v30 = *v8;
    if (!*v8)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  *(_QWORD *)(v1 + 152) = v29;
  operator delete(v29);
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::~flat_hash_map(v2);
  v30 = *v8;
  if (!*v8)
  {
LABEL_21:
    v31 = *v7;
    if (!*v7)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  *(_QWORD *)(v1 + 80) = v30;
  operator delete(v30);
  v31 = *v7;
  if (!*v7)
  {
LABEL_22:
    *(_QWORD *)v1 = off_24F980668;
    if ((*(char *)(v1 + 31) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_45;
  }
LABEL_44:
  *(_QWORD *)(v1 + 48) = v31;
  operator delete(v31);
  *(_QWORD *)v1 = off_24F980668;
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_23:
    _Unwind_Resume(a1);
LABEL_45:
  operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operator new();
  *(_QWORD *)v8 = 0;
  *(_DWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = v8 + 16;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 56) = -1;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_QWORD *)(v8 + 136) = 0;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_DWORD *)(v8 + 8) &= 0xF0000001;
  *(_DWORD *)(v8 + 12) = 0;
  v9 = v3;
  v10 = (_QWORD *)*v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v9 = v10;
        v11 = v10[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
          break;
        v10 = (_QWORD *)*v9;
        v3 = v9;
        if (!*v9)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
        break;
      v10 = (_QWORD *)v9[1];
      if (!v10)
      {
        v3 = v9 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v9;
    v9 = operator new(0x30uLL);
    v9[4] = &gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v12;
    *v3 = v9;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v9;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v9[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F980710;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

_QWORD *operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::~RevMap(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_24F9806B0;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    operator delete(*(void **)(a1 + 8));
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(_QWORD **)(a1 + 40);
  if (v4)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v4);
  return a1;
}

void **std::vector<std::function<void ()(operations_research::sat::IntegerLiteral,int,std::vector<operations_research::sat::Literal> *,std::vector<int> *)>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = (char *)*((_QWORD *)v3 - 1);
      if (v3 - 32 == v5)
      {
        v5 = v3 - 32;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

uint64_t operations_research::sat::SatPropagator::Untrail(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  v3 = *(_DWORD *)(result + 36);
  if (v3 >= a3)
    v3 = a3;
  *(_DWORD *)(result + 36) = v3;
  return result;
}

void operations_research::sat::SatPropagator::Reason(operations_research::sat::SatPropagator *this, const operations_research::sat::Trail *a2)
{
  _QWORD *v2;
  _BYTE v3[16];

  google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v3, (google::glog_internal_namespace_ *)"./ortools/sat/sat_base.h", 506);
  v2 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v3);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented.");
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v3);
}

void sub_22DA34AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::~RevMap(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_24F9806B0;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    operator delete(*(void **)(a1 + 8));
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(_QWORD **)(a1 + 40);
  if (v4)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v4);
  JUMPOUT(0x22E31DF78);
}

void operations_research::RevMap<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>>::SetLevel(uint64_t *a1, int a2)
{
  std::vector<int> *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  std::vector<int>::size_type v12;
  unint64_t v13;
  std::vector<int>::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  std::vector<int>::value_type __x;

  v4 = a1[10];
  v5 = a1[11];
  v3 = (std::vector<int> *)(a1 + 10);
  v6 = v5 - v4;
  v7 = (unint64_t)(v5 - v4) >> 2;
  v8 = a2;
  if ((int)v7 <= a2)
  {
    __x = -1431655765 * ((unint64_t)(a1[8] - a1[7]) >> 2);
    v13 = v6 >> 2;
    v14 = a2 - v13;
    if (v8 <= v13)
    {
      if (v8 < v13)
        a1[11] = v4 + 4 * v8;
    }
    else
    {
      std::vector<int>::__append(v3, v14, &__x);
    }
  }
  else
  {
    v9 = (int *)(v4 + 4 * a2);
    v10 = *v9;
    v11 = v6 >> 2;
    v12 = a2 - v11;
    if (v8 <= v11)
    {
      if (v8 < v11)
        a1[11] = (uint64_t)v9;
    }
    else
    {
      std::vector<int>::__append(v3, v12);
    }
    v15 = a1[8];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - a1[7]) >> 2) > v10)
    {
      do
      {
        if (*(_BYTE *)(v15 - 12))
        {
          absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::erase<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>(a1 + 1, (int *)(v15 - 11));
        }
        else
        {
          v17 = 0;
          v18 = *(_DWORD *)(v15 - 4);
          v19 = *(int *)(v15 - 11);
          v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v19)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v19));
          v21 = a1[1];
          v22 = (v20 >> 7) ^ (v21 >> 12);
          v23 = a1[4];
          while (1)
          {
            v24 = v22 & v23;
            v25 = *(_QWORD *)(v21 + v24);
            v26 = ((v25 ^ (0x101010101010101 * (v20 & 0x7F))) - 0x101010101010101) & ~(v25 ^ (0x101010101010101
                                                                                                * (v20 & 0x7F))) & 0x8080808080808080;
            if (v26)
              break;
LABEL_18:
            if ((v25 & (~v25 << 6) & 0x8080808080808080) != 0)
            {
              v28 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::prepare_insert(a1 + 1, v20);
              v27 = a1[2];
              v29 = (_DWORD *)(v27 + 8 * v28);
              *v29 = v19;
              v29[1] = v18;
              goto LABEL_21;
            }
            v17 += 8;
            v22 = v17 + v24;
          }
          v27 = a1[2];
          while (1)
          {
            v28 = (v24 + (__clz(__rbit64(v26)) >> 3)) & v23;
            if (*(_DWORD *)(v27 + 8 * v28) == (_DWORD)v19)
              break;
            v26 &= v26 - 1;
            if (!v26)
              goto LABEL_18;
          }
LABEL_21:
          *(_DWORD *)(v27 + 8 * v28 + 4) = v18;
        }
        v16 = a1[7];
        v15 = a1[8] - 12;
        a1[8] = v15;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 2) > v10);
    }
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::erase<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  v5 = *a1;
  v6 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  v7 = a1[3];
  v8 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v9 = v6 & v7;
    v10 = *(_QWORD *)(v5 + (v6 & v7));
    v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11)
      break;
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return 0;
    v2 += 8;
    v6 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_DWORD *)(a1[1] + 8 * v12) == (_DWORD)v3)
      break;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_5;
  }
  if (v12 == v7)
    return 0;
  --a1[2];
  v14 = *(_QWORD *)(v5 + ((v12 - 8) & v7));
  v15 = *(_QWORD *)(v5 + v12) & (~*(_QWORD *)(v5 + v12) << 6) & 0x8080808080808080;
  v16 = v14 & (~v14 << 6) & 0x8080808080808080;
  if (v16)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
  {
    v21 = 0;
    v18 = -2;
  }
  else
  {
    v19 = (__clz(v16) >> 3) + (__clz(__rbit64(v15)) >> 3);
    v20 = v19 >= 8;
    v21 = v19 < 8;
    if (v20)
      v18 = -2;
    else
      v18 = 0x80;
  }
  *(_BYTE *)(v5 + v12) = v18;
  *(_BYTE *)((a1[3] & (v12 - 8)) + (a1[3] & 7) + *a1 + 1) = v18;
  v22 = a1[4];
  a1[5] += v21;
  if (!v22)
    return 1;
  v23 = (unint64_t *)(v22 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 - 1, v23));
  v25 = (unint64_t *)(v22 + 16);
  result = 1;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;

  v2 = a1[3];
  v3 = ((*a1 >> 12) ^ (a2 >> 7)) & v2;
  v4 = 0;
  for (i = *(_QWORD *)(*a1 + v3) & (~*(_QWORD *)(*a1 + v3) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(*a1 + v3) & (~*(_QWORD *)(*a1 + v3) << 7) & 0x8080808080808080)
  {
    v4 += 8;
    v3 = (v4 + v3) & v2;
  }
  return (v3 + (__clz(__rbit64(i)) >> 3)) & v2;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[8 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_QWORD *)&a1[1][8 * v16] = *(_QWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(result + 8) + 8 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_QWORD *)(v25 + 8 * v18) = *(_QWORD *)(v25 + 8 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_QWORD *)(v25 + 8 * v14);
          *(_QWORD *)(v25 + 8 * v14) = *(_QWORD *)(v25 + 8 * v18);
          *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

uint64_t std::deque<std::vector<operations_research::sat::Literal>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0xAA];
    v6 = (unint64_t)*v5;
    v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        v9 = *(void **)v7;
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(v7 + 8) = v9;
          operator delete(v9);
          v6 = (unint64_t)*v5;
        }
        v7 += 24;
        if (v7 - v6 == 4080)
        {
          v10 = (unint64_t)v5[1];
          ++v5;
          v6 = v10;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::Trail>::~Delete(_QWORD *a1)
{
  operations_research::sat::Trail *v2;

  v2 = (operations_research::sat::Trail *)a1[1];
  *a1 = &off_24F980710;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::Trail::~Trail(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::Trail>::~Delete(_QWORD *a1)
{
  operations_research::sat::Trail *v2;

  v2 = (operations_research::sat::Trail *)a1[1];
  *a1 = &off_24F980710;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::Trail::~Trail(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::Trail::~Trail(operations_research::sat::Trail *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 32) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 28);
  if (v4)
  {
    *((_QWORD *)this + 29) = v4;
    operator delete(v4);
  }
  std::deque<std::vector<operations_research::sat::Literal>>::~deque[abi:ne180100]((uint64_t)this + 176);
  v5 = (void *)*((_QWORD *)this + 19);
  if (v5)
  {
    *((_QWORD *)this + 20) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 15);
  if (v6)
  {
    *((_QWORD *)this + 16) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 13) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 9);
  if (v8)
  {
    *((_QWORD *)this + 10) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::IntegerTrail>::~Delete(_QWORD *a1)
{
  operations_research::sat::IntegerTrail *v2;

  v2 = (operations_research::sat::IntegerTrail *)a1[1];
  *a1 = &off_24F980748;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::IntegerTrail::~IntegerTrail(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::IntegerTrail>::~Delete(_QWORD *a1)
{
  operations_research::sat::IntegerTrail *v2;

  v2 = (operations_research::sat::IntegerTrail *)a1[1];
  *a1 = &off_24F980748;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::IntegerTrail::~IntegerTrail(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::IntegerTrail::~IntegerTrail(operations_research::sat::IntegerTrail *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;

  v2 = (void *)*((_QWORD *)this + 112);
  if (v2)
  {
    *((_QWORD *)this + 113) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 109);
  if (v3)
  {
    *((_QWORD *)this + 110) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 103);
  if (v4)
  {
    *((_QWORD *)this + 104) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 100);
  if (v5)
  {
    *((_QWORD *)this + 101) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 94);
  if (v6)
  {
    *((_QWORD *)this + 95) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 90);
  if (v7)
  {
    *((_QWORD *)this + 91) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 87);
  if (v8)
  {
    *((_QWORD *)this + 88) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 84);
  if (v9)
  {
    *((_QWORD *)this + 85) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 78);
  if (v10)
  {
    *((_QWORD *)this + 79) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 74);
  if (v11)
  {
    *((_QWORD *)this + 75) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 71);
  if (v12)
  {
    *((_QWORD *)this + 72) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 68);
  if (v13)
  {
    *((_QWORD *)this + 69) = v13;
    operator delete(v13);
  }
  *((_QWORD *)this + 54) = &off_24F9806B0;
  v14 = (void *)*((_QWORD *)this + 64);
  if (v14)
  {
    *((_QWORD *)this + 65) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 61);
  if (v15)
  {
    *((_QWORD *)this + 62) = v15;
    operator delete(v15);
  }
  if (*((_QWORD *)this + 58))
  {
    operator delete(*((void **)this + 55));
    *((_QWORD *)this + 60) = 0;
    *((_QWORD *)this + 55) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 57) = 0;
    *((_QWORD *)this + 58) = 0;
  }
  v16 = (_QWORD *)*((_QWORD *)this + 59);
  if (v16)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v16);
  v17 = (void *)*((_QWORD *)this + 51);
  if (v17)
  {
    *((_QWORD *)this + 52) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 48);
  if (v18)
  {
    *((_QWORD *)this + 49) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 45);
  if (v19)
  {
    *((_QWORD *)this + 46) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 42);
  if (v20)
  {
    *((_QWORD *)this + 43) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 39);
  if (v21)
  {
    *((_QWORD *)this + 40) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 36);
  if (v22)
  {
    *((_QWORD *)this + 37) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 33);
  if (v23)
  {
    *((_QWORD *)this + 34) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 30);
  if (v24)
  {
    *((_QWORD *)this + 31) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 27);
  if (v25)
  {
    *((_QWORD *)this + 28) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 24);
  if (v26)
  {
    *((_QWORD *)this + 25) = v26;
    operator delete(v26);
  }
  v27 = *((_QWORD *)this + 21);
  if (v27)
  {
    v28 = *((_QWORD *)this + 22);
    v29 = (void *)*((_QWORD *)this + 21);
    if (v28 == v27)
    {
LABEL_63:
      *((_QWORD *)this + 22) = v27;
      operator delete(v29);
      goto LABEL_64;
    }
    while (1)
    {
      v32 = v28 - 32;
      v30 = *(_QWORD **)(v28 - 8);
      if ((_QWORD *)(v28 - 32) == v30)
      {
        v30 = (_QWORD *)(v28 - 32);
        v31 = 4;
      }
      else
      {
        if (!v30)
          goto LABEL_58;
        v31 = 5;
      }
      (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_58:
      v28 = v32;
      if (v32 == v27)
      {
        v29 = (void *)*((_QWORD *)this + 21);
        goto LABEL_63;
      }
    }
  }
LABEL_64:
  v33 = (void *)*((_QWORD *)this + 18);
  if (v33)
  {
    *((_QWORD *)this + 19) = v33;
    operator delete(v33);
  }
  if (*((_QWORD *)this + 15))
  {
    operator delete(*((void **)this + 12));
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 12) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
  }
  v34 = (_QWORD *)*((_QWORD *)this + 16);
  if (v34)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v34);
  v35 = (void *)*((_QWORD *)this + 9);
  if (v35)
  {
    *((_QWORD *)this + 10) = v35;
    operator delete(v35);
  }
  v36 = (void *)*((_QWORD *)this + 5);
  if (v36)
  {
    *((_QWORD *)this + 6) = v36;
    operator delete(v36);
  }
  *(_QWORD *)this = off_24F980668;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  operations_research::sat::IntegerTrail::~IntegerTrail(this);
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::GenericLiteralWatcher>::~Delete(_QWORD *a1)
{
  operations_research::sat::GenericLiteralWatcher *v2;

  v2 = (operations_research::sat::GenericLiteralWatcher *)a1[1];
  *a1 = &off_24F980780;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::GenericLiteralWatcher::~GenericLiteralWatcher(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::GenericLiteralWatcher>::~Delete(_QWORD *a1)
{
  operations_research::sat::GenericLiteralWatcher *v2;

  v2 = (operations_research::sat::GenericLiteralWatcher *)a1[1];
  *a1 = &off_24F980780;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::GenericLiteralWatcher::~GenericLiteralWatcher(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::GenericLiteralWatcher::~GenericLiteralWatcher(operations_research::sat::GenericLiteralWatcher *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;

  v2 = *((_QWORD *)this + 65);
  if (v2)
  {
    v3 = *((_QWORD *)this + 66);
    v4 = (void *)*((_QWORD *)this + 65);
    if (v3 == v2)
    {
LABEL_11:
      *((_QWORD *)this + 66) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 65);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v8 = (void *)*((_QWORD *)this + 61);
  if (v8)
  {
    *((_QWORD *)this + 62) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 58);
  if (v9)
  {
    *((_QWORD *)this + 59) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 55);
  if (v10)
  {
    *((_QWORD *)this + 56) = v10;
    operator delete(v10);
  }
  v11 = *((_QWORD *)this + 52);
  if (v11)
  {
    v12 = *((_QWORD *)this + 53);
    v13 = (void *)*((_QWORD *)this + 52);
    if (v12 != v11)
    {
      v14 = *((_QWORD *)this + 53);
      do
      {
        v16 = *(void **)(v14 - 24);
        v14 -= 24;
        v15 = v16;
        if (v16)
        {
          *(_QWORD *)(v12 - 16) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = (void *)*((_QWORD *)this + 52);
    }
    *((_QWORD *)this + 53) = v11;
    operator delete(v13);
  }
  v17 = *((_QWORD *)this + 49);
  if (v17)
  {
    v18 = *((_QWORD *)this + 50);
    v19 = (void *)*((_QWORD *)this + 49);
    if (v18 != v17)
    {
      v20 = *((_QWORD *)this + 50);
      do
      {
        v22 = *(void **)(v20 - 24);
        v20 -= 24;
        v21 = v22;
        if (v22)
        {
          *(_QWORD *)(v18 - 16) = v21;
          operator delete(v21);
        }
        v18 = v20;
      }
      while (v20 != v17);
      v19 = (void *)*((_QWORD *)this + 49);
    }
    *((_QWORD *)this + 50) = v17;
    operator delete(v19);
  }
  v23 = *((_QWORD *)this + 46);
  if (v23)
  {
    v24 = *((_QWORD *)this + 47);
    v25 = (void *)*((_QWORD *)this + 46);
    if (v24 != v23)
    {
      v26 = *((_QWORD *)this + 47);
      do
      {
        v28 = *(void **)(v26 - 24);
        v26 -= 24;
        v27 = v28;
        if (v28)
        {
          *(_QWORD *)(v24 - 16) = v27;
          operator delete(v27);
        }
        v24 = v26;
      }
      while (v26 != v23);
      v25 = (void *)*((_QWORD *)this + 46);
    }
    *((_QWORD *)this + 47) = v23;
    operator delete(v25);
  }
  *((_QWORD *)this + 36) = &off_24F9807B8;
  v29 = (void *)*((_QWORD *)this + 43);
  if (v29)
  {
    *((_QWORD *)this + 44) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 40);
  if (v30)
  {
    *((_QWORD *)this + 41) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 37);
  if (v31)
  {
    *((_QWORD *)this + 38) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 33);
  if (v32)
  {
    *((_QWORD *)this + 34) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 30);
  if (v33)
    operator delete(v33);
  v34 = *((_QWORD *)this + 27);
  if (v34)
  {
    v35 = *((_QWORD *)this + 28);
    v36 = (void *)*((_QWORD *)this + 27);
    if (v35 != v34)
    {
      do
        v35 = std::deque<int>::~deque[abi:ne180100](v35 - 48);
      while (v35 != v34);
      v36 = (void *)*((_QWORD *)this + 27);
    }
    *((_QWORD *)this + 28) = v34;
    operator delete(v36);
  }
  v37 = (void *)*((_QWORD *)this + 24);
  if (v37)
  {
    *((_QWORD *)this + 25) = v37;
    operator delete(v37);
  }
  v38 = (void *)*((_QWORD *)this + 18);
  if (v38)
  {
    *((_QWORD *)this + 19) = v38;
    operator delete(v38);
  }
  v39 = (void *)*((_QWORD *)this + 14);
  if (v39)
  {
    *((_QWORD *)this + 15) = v39;
    operator delete(v39);
  }
  v40 = *((_QWORD *)this + 11);
  if (v40)
  {
    v41 = *((_QWORD *)this + 12);
    v42 = (void *)*((_QWORD *)this + 11);
    if (v41 != v40)
    {
      v43 = *((_QWORD *)this + 12);
      do
      {
        v45 = *(void **)(v43 - 24);
        v43 -= 24;
        v44 = v45;
        if (v45)
        {
          *(_QWORD *)(v41 - 16) = v44;
          operator delete(v44);
        }
        v41 = v43;
      }
      while (v43 != v40);
      v42 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v40;
    operator delete(v42);
  }
  v46 = *((_QWORD *)this + 8);
  if (v46)
  {
    v47 = *((_QWORD *)this + 9);
    v48 = (void *)*((_QWORD *)this + 8);
    if (v47 != v46)
    {
      v49 = *((_QWORD *)this + 9);
      do
      {
        v51 = *(void **)(v49 - 24);
        v49 -= 24;
        v50 = v51;
        if (v51)
        {
          *(_QWORD *)(v47 - 16) = v50;
          operator delete(v50);
        }
        v47 = v49;
      }
      while (v49 != v46);
      v48 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v46;
    operator delete(v48);
  }
  *(_QWORD *)this = off_24F980668;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  operations_research::sat::GenericLiteralWatcher::~GenericLiteralWatcher(this);
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::RevVector<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>::~RevVector(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24F9807B8;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void operations_research::RevVector<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>::~RevVector(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24F9807B8;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::RevVector<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>::SetLevel(uint64_t a1, int a2)
{
  std::vector<int> *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  std::vector<int>::size_type v11;
  unint64_t v12;
  std::vector<int>::size_type v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<int>::value_type __x;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v3 = (std::vector<int> *)(a1 + 8);
  v6 = v5 - v4;
  if (((unint64_t)v6 >> 2) != a2)
  {
    v7 = a2;
    if ((int)((unint64_t)v6 >> 2) <= a2)
    {
      __x = (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
      v12 = v6 >> 2;
      v13 = a2 - v12;
      if (v7 <= v12)
      {
        if (v7 < v12)
          *(_QWORD *)(a1 + 16) = v4 + 4 * v7;
      }
      else
      {
        std::vector<int>::__append(v3, v13, &__x);
      }
    }
    else
    {
      v8 = (int *)(v4 + 4 * a2);
      v9 = *v8;
      v10 = v6 >> 2;
      v11 = a2 - v10;
      if (v7 <= v10)
      {
        if (v7 < v10)
          *(_QWORD *)(a1 + 16) = v8;
      }
      else
      {
        std::vector<int>::__append(v3, v11);
      }
      v14 = *(_QWORD *)(a1 + 32);
      v15 = (*(_QWORD *)(a1 + 40) - v14) >> 3;
      v16 = v15 - 1;
      if ((int)v15 - 1 >= (int)v9)
      {
        v17 = *(_QWORD *)(a1 + 56);
        do
        {
          *(_DWORD *)(v17 + 4 * *(int *)(v14 + 8 * v16)) = *(_DWORD *)(v14 + 8 * v16 + 4);
          --v16;
        }
        while (v16 >= (int)v9);
      }
      if (v9 <= v15)
      {
        if (v9 < v15)
          *(_QWORD *)(a1 + 40) = v14 + 8 * v9;
      }
      else
      {
        std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)(a1 + 32), v9 - v15);
      }
    }
  }
}

void std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::AllDifferentBoundsPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9807F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::AllDifferentBoundsPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9807F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F980840;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F980840;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  *v2 = &off_24F980840;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_22DA36588(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v6;
  char *v7;

  a2[1] = 0;
  *a2 = &off_24F980840;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_22DA3662C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  operations_research::sat::AllDifferentConstraint *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  operations_research::sat::IntegerTrail *v12;
  operations_research::sat::GenericLiteralWatcher *v13;
  _QWORD *v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD *v18;

  if (result[2] - result[1] >= 0xCuLL)
  {
    v2 = result;
    v3 = *a2;
    v4 = (operations_research::sat::AllDifferentConstraint *)operator new();
    v16 = 0;
    v17 = 0;
    __p = 0;
    v6 = (_BYTE *)v2[1];
    v5 = (_BYTE *)v2[2];
    v7 = v5 - v6;
    if (v5 != v6)
    {
      if (v7 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v8 = (char *)operator new(v5 - v6);
      v9 = &v8[4 * (v7 >> 2)];
      __p = v8;
      v17 = v9;
      memcpy(v8, v6, v7);
      v16 = v9;
    }
    v10 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(v3);
    v11 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(v3);
    v12 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v3);
    operations_research::sat::AllDifferentConstraint::AllDifferentConstraint((uint64_t)v4, &__p, v10, v11, (uint64_t)v12);
    if (__p)
      operator delete(__p);
    v13 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v3);
    operations_research::sat::AllDifferentConstraint::RegisterWith(v4, v13);
    result = (_QWORD *)operator new();
    *result = &off_24F9808B0;
    result[1] = v4;
    v18 = result;
    v14 = *(_QWORD **)(v3 + 56);
    if ((unint64_t)v14 >= *(_QWORD *)(v3 + 64))
    {
      result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v3 + 48), &v18);
      *(_QWORD *)(v3 + 56) = result;
    }
    else
    {
      *v14 = result;
      *(_QWORD *)(v3 + 56) = v14 + 1;
    }
  }
  return result;
}

void sub_22DA367FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  MEMORY[0x22E31DF78](v10, 0x10B1C409B13CDA4);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14AllDifferentACERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_ta"
                     "g_EiEENS1_9allocatorIS6_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14AllDifferentACERKNSt3__16vectorIN3gtl7IntTypeINS0_20Integer"
                                "Variable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14AllDifferentACERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14AllDifferentACERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0,std::allocator<operations_research::sat::AllDifferentAC(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::AllDifferentConstraint>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9808B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::AllDifferentConstraint>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9808B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  int v34;
  int v35;
  __n128 v36;
  __n128 v37;
  int v38;
  int v39;
  __n128 v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  int v44;
  int v45;
  __n128 v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  int v53;
  int v54;
  __n128 v55;
  __n128 v56;
  int v57;
  int v58;
  __n128 v59;
  int v60;
  int v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  __n128 v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __n128 *v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  __n128 v99;
  __n128 *v100;
  __n128 *v101;
  __int128 *v102;
  __int128 v103;
  int v104;
  int v105;
  int v106;
  __n128 v107;
  int v108;
  __n128 v109;
  _DWORD *v110;
  BOOL v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _DWORD *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  int64_t v123;
  BOOL v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  unint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __n128 v157;
  int v158;
  int v159;
  _DWORD *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t v165;
  int v166;
  int v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  int v7;
  __int128 v8;
  int v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  int v39;
  __int128 v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  int v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_QWORD *)(a2 - 16) < *(_QWORD *)(a1 + 4))
      {
        v7 = *(_DWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a2 - 20) = v8;
        *(_DWORD *)(a2 - 4) = v7;
      }
      return result;
    case 3uLL:
      v10 = (__int128 *)(a1 + 20);
      v11 = (__int128 *)(a2 - 20);
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(a2 - 16);
      if (v12 >= *(_QWORD *)(a1 + 4))
      {
        if (v13 < v12)
        {
          v36 = *(_DWORD *)(a1 + 36);
          v37 = *v10;
          v38 = *(_DWORD *)(a2 - 4);
          *v10 = *v11;
          *(_DWORD *)(a1 + 36) = v38;
          *v11 = v37;
          *(_DWORD *)(a2 - 4) = v36;
          if (*(_QWORD *)(a1 + 24) < *(_QWORD *)(a1 + 4))
          {
            v39 = *(_DWORD *)(a1 + 16);
            v40 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v10;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
            *v10 = v40;
            *(_DWORD *)(a1 + 36) = v39;
          }
        }
      }
      else if (v13 >= v12)
      {
        v45 = *(_DWORD *)(a1 + 16);
        v46 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v10;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
        *v10 = v46;
        *(_DWORD *)(a1 + 36) = v45;
        if (*(_QWORD *)(a2 - 16) < *(_QWORD *)(a1 + 24))
        {
          v47 = *(_DWORD *)(a1 + 36);
          v48 = *v10;
          v49 = *(_DWORD *)(a2 - 4);
          *v10 = *v11;
          *(_DWORD *)(a1 + 36) = v49;
          *v11 = v48;
          *(_DWORD *)(a2 - 4) = v47;
        }
      }
      else
      {
        v14 = *(_DWORD *)(a1 + 16);
        v15 = *(_OWORD *)a1;
        v16 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *v11;
        *(_DWORD *)(a1 + 16) = v16;
        *v11 = v15;
        *(_DWORD *)(a2 - 4) = v14;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(a1, a1 + 20, a1 + 40, a2 - 20, a3);
      return 1;
    case 5uLL:
      v24 = (__int128 *)(a1 + 20);
      v25 = (__int128 *)(a1 + 40);
      v26 = (__int128 *)(a1 + 60);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(a1, a1 + 20, a1 + 40, a1 + 60, a3);
      if (*(_QWORD *)(a2 - 16) < *(_QWORD *)(a1 + 64))
      {
        v27 = *(_DWORD *)(a1 + 76);
        v28 = *v26;
        v29 = *(_DWORD *)(a2 - 4);
        *v26 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 76) = v29;
        *(_OWORD *)(a2 - 20) = v28;
        *(_DWORD *)(a2 - 4) = v27;
        if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 44))
        {
          v30 = *(_DWORD *)(a1 + 56);
          v31 = *v25;
          *v25 = *v26;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 76);
          *v26 = v31;
          *(_DWORD *)(a1 + 76) = v30;
          if (*(_QWORD *)(a1 + 44) < *(_QWORD *)(a1 + 24))
          {
            v32 = *(_DWORD *)(a1 + 36);
            v33 = *v24;
            *v24 = *v25;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
            *v25 = v33;
            *(_DWORD *)(a1 + 56) = v32;
            if (*(_QWORD *)(a1 + 24) < *(_QWORD *)(a1 + 4))
            {
              v34 = *(_DWORD *)(a1 + 16);
              v35 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v24;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
              *v24 = v35;
              *(_DWORD *)(a1 + 36) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v17 = a1 + 40;
      v18 = (__int128 *)(a1 + 20);
      v19 = *(_QWORD *)(a1 + 24);
      v20 = *(_QWORD *)(a1 + 4);
      v21 = *(_QWORD *)(a1 + 44);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          v41 = *(_DWORD *)(a1 + 36);
          v42 = *v18;
          *v18 = *(_OWORD *)v17;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
          *(_OWORD *)v17 = v42;
          *(_DWORD *)(a1 + 56) = v41;
          if (*(_QWORD *)(a1 + 24) < v20)
          {
            v43 = *(_DWORD *)(a1 + 16);
            v44 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v18;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
            *v18 = v44;
            *(_DWORD *)(a1 + 36) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        v50 = *(_DWORD *)(a1 + 16);
        v51 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v18;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
        *v18 = v51;
        *(_DWORD *)(a1 + 36) = v50;
        if (v21 < *(_QWORD *)(a1 + 24))
        {
          v52 = *(_DWORD *)(a1 + 36);
          v53 = *v18;
          *v18 = *(_OWORD *)v17;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
          *(_OWORD *)v17 = v53;
          *(_DWORD *)(a1 + 56) = v52;
        }
      }
      else
      {
        v22 = *(_DWORD *)(a1 + 16);
        v23 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v17;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 56);
        *(_OWORD *)v17 = v23;
        *(_DWORD *)(a1 + 56) = v22;
      }
      v54 = a1 + 60;
      if (a1 + 60 == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v57 = *(_QWORD *)(v54 + 4);
    if (v57 < *(_QWORD *)(v17 + 4))
      break;
LABEL_36:
    v17 = v54;
    v55 += 20;
    v54 += 20;
    if (v54 == a2)
      return 1;
  }
  v58 = *(_DWORD *)v54;
  v59 = *(_QWORD *)(v54 + 12);
  v60 = v55;
  do
  {
    v61 = a1 + v60;
    *(_OWORD *)(v61 + 60) = *(_OWORD *)(a1 + v60 + 40);
    *(_DWORD *)(v61 + 76) = *(_DWORD *)(a1 + v60 + 56);
    if (v60 == -40)
    {
      *(_DWORD *)a1 = v58;
      *(_QWORD *)(a1 + 4) = v57;
      *(_QWORD *)(a1 + 12) = v59;
      if (++v56 != 8)
        goto LABEL_36;
      return v54 + 20 == a2;
    }
    v60 -= 20;
  }
  while (v57 < *(_QWORD *)(v61 + 24));
  v62 = a1 + v60;
  *(_DWORD *)(v62 + 60) = v58;
  v62 += 60;
  *(_QWORD *)(v62 + 4) = v57;
  *(_QWORD *)(v62 + 12) = v59;
  if (++v56 != 8)
    goto LABEL_36;
  return v54 + 20 == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBounds(void)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v5 = *(_QWORD *)(a2 + 4);
  v6 = *(_QWORD *)(a3 + 4);
  if (v5 >= *(_QWORD *)(a1 + 4))
  {
    if (v6 < v5)
    {
      v9 = *(_DWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v10 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v10;
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v9;
      if (*(_QWORD *)(a2 + 4) < *(_QWORD *)(a1 + 4))
      {
        v11 = *(_DWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v12 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v12;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = *(_DWORD *)(a1 + 16);
      result = *(__n128 *)a1;
      v8 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 16) = v8;
LABEL_9:
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v7;
      goto LABEL_10;
    }
    v13 = *(_DWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v14 = *(_DWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = v14;
    *(__n128 *)a2 = result;
    *(_DWORD *)(a2 + 16) = v13;
    if (*(_QWORD *)(a3 + 4) < *(_QWORD *)(a2 + 4))
    {
      v7 = *(_DWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v15 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)(a4 + 4) < *(_QWORD *)(a3 + 4))
  {
    v16 = *(_DWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v17 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v17;
    *(__n128 *)a4 = result;
    *(_DWORD *)(a4 + 16) = v16;
    if (*(_QWORD *)(a3 + 4) < *(_QWORD *)(a2 + 4))
    {
      v18 = *(_DWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v19 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v19;
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v18;
      if (*(_QWORD *)(a2 + 4) < *(_QWORD *)(a1 + 4))
      {
        v20 = *(_DWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v21 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v21;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v20;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  int v34;
  int v35;
  __n128 v36;
  __n128 v37;
  int v38;
  int v39;
  __n128 v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  int v44;
  int v45;
  __n128 v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  int v53;
  int v54;
  __n128 v55;
  __n128 v56;
  int v57;
  int v58;
  __n128 v59;
  int v60;
  int v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  BOOL v79;
  __n128 v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  __n128 *v91;
  __int128 v92;
  __n128 *v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  __n128 v97;
  __n128 *v98;
  __n128 *v99;
  __int128 *v100;
  __int128 v101;
  int v102;
  int v103;
  int v104;
  __n128 v105;
  int v106;
  __n128 v107;
  uint64_t v108;
  BOOL v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  int64_t v119;
  BOOL v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int64_t v133;
  uint64_t v134;
  unint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __n128 v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  uint64_t v186;
  uint64_t v187;
  __n128 v188;
  __n128 v189;
  uint64_t v190;
  __n128 v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  int v7;
  __int128 v8;
  int v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  int v39;
  __int128 v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  int v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 12))
      {
        v7 = *(_DWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a2 - 20) = v8;
        *(_DWORD *)(a2 - 4) = v7;
      }
      return result;
    case 3uLL:
      v10 = (__int128 *)(a1 + 20);
      v11 = (__int128 *)(a2 - 20);
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(_QWORD *)(a2 - 8);
      if (v12 >= *(_QWORD *)(a1 + 12))
      {
        if (v13 < v12)
        {
          v36 = *(_DWORD *)(a1 + 36);
          v37 = *v10;
          v38 = *(_DWORD *)(a2 - 4);
          *v10 = *v11;
          *(_DWORD *)(a1 + 36) = v38;
          *v11 = v37;
          *(_DWORD *)(a2 - 4) = v36;
          if (*(_QWORD *)(a1 + 32) < *(_QWORD *)(a1 + 12))
          {
            v39 = *(_DWORD *)(a1 + 16);
            v40 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v10;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
            *v10 = v40;
            *(_DWORD *)(a1 + 36) = v39;
          }
        }
      }
      else if (v13 >= v12)
      {
        v45 = *(_DWORD *)(a1 + 16);
        v46 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v10;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
        *v10 = v46;
        *(_DWORD *)(a1 + 36) = v45;
        if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 32))
        {
          v47 = *(_DWORD *)(a1 + 36);
          v48 = *v10;
          v49 = *(_DWORD *)(a2 - 4);
          *v10 = *v11;
          *(_DWORD *)(a1 + 36) = v49;
          *v11 = v48;
          *(_DWORD *)(a2 - 4) = v47;
        }
      }
      else
      {
        v14 = *(_DWORD *)(a1 + 16);
        v15 = *(_OWORD *)a1;
        v16 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *v11;
        *(_DWORD *)(a1 + 16) = v16;
        *v11 = v15;
        *(_DWORD *)(a2 - 4) = v14;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(a1, a1 + 20, a1 + 40, a2 - 20, a3);
      return 1;
    case 5uLL:
      v24 = (__int128 *)(a1 + 20);
      v25 = (__int128 *)(a1 + 40);
      v26 = (__int128 *)(a1 + 60);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(a1, a1 + 20, a1 + 40, a1 + 60, a3);
      if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 72))
      {
        v27 = *(_DWORD *)(a1 + 76);
        v28 = *v26;
        v29 = *(_DWORD *)(a2 - 4);
        *v26 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 76) = v29;
        *(_OWORD *)(a2 - 20) = v28;
        *(_DWORD *)(a2 - 4) = v27;
        if (*(_QWORD *)(a1 + 72) < *(_QWORD *)(a1 + 52))
        {
          v30 = *(_DWORD *)(a1 + 56);
          v31 = *v25;
          *v25 = *v26;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 76);
          *v26 = v31;
          *(_DWORD *)(a1 + 76) = v30;
          if (*(_QWORD *)(a1 + 52) < *(_QWORD *)(a1 + 32))
          {
            v32 = *(_DWORD *)(a1 + 36);
            v33 = *v24;
            *v24 = *v25;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
            *v25 = v33;
            *(_DWORD *)(a1 + 56) = v32;
            if (*(_QWORD *)(a1 + 32) < *(_QWORD *)(a1 + 12))
            {
              v34 = *(_DWORD *)(a1 + 16);
              v35 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v24;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
              *v24 = v35;
              *(_DWORD *)(a1 + 36) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v17 = a1 + 40;
      v18 = (__int128 *)(a1 + 20);
      v19 = *(_QWORD *)(a1 + 32);
      v20 = *(_QWORD *)(a1 + 12);
      v21 = *(_QWORD *)(a1 + 52);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          v41 = *(_DWORD *)(a1 + 36);
          v42 = *v18;
          *v18 = *(_OWORD *)v17;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
          *(_OWORD *)v17 = v42;
          *(_DWORD *)(a1 + 56) = v41;
          if (*(_QWORD *)(a1 + 32) < v20)
          {
            v43 = *(_DWORD *)(a1 + 16);
            v44 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v18;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
            *v18 = v44;
            *(_DWORD *)(a1 + 36) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        v50 = *(_DWORD *)(a1 + 16);
        v51 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v18;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
        *v18 = v51;
        *(_DWORD *)(a1 + 36) = v50;
        if (v21 < *(_QWORD *)(a1 + 32))
        {
          v52 = *(_DWORD *)(a1 + 36);
          v53 = *v18;
          *v18 = *(_OWORD *)v17;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
          *(_OWORD *)v17 = v53;
          *(_DWORD *)(a1 + 56) = v52;
        }
      }
      else
      {
        v22 = *(_DWORD *)(a1 + 16);
        v23 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v17;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 56);
        *(_OWORD *)v17 = v23;
        *(_DWORD *)(a1 + 56) = v22;
      }
      v54 = a1 + 60;
      if (a1 + 60 == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v58 = *(_QWORD *)(v54 + 12);
    if (v58 < *(_QWORD *)(v17 + 12))
    {
      v61 = *(_QWORD *)v54;
      v62 = *(_DWORD *)(v54 + 8);
      v59 = v55;
      do
      {
        v60 = a1 + v59;
        *(_OWORD *)(v60 + 60) = *(_OWORD *)(a1 + v59 + 40);
        *(_DWORD *)(v60 + 76) = *(_DWORD *)(a1 + v59 + 56);
        if (v59 == -40)
        {
          v57 = a1;
          goto LABEL_30;
        }
        v59 -= 20;
      }
      while (v58 < *(_QWORD *)(v60 + 32));
      v57 = a1 + v59 + 60;
LABEL_30:
      *(_QWORD *)v57 = v61;
      *(_DWORD *)(v57 + 8) = v62;
      *(_QWORD *)(v57 + 12) = v58;
      if (++v56 == 8)
        return v54 + 20 == a2;
    }
    v17 = v54;
    v55 += 20;
    v54 += 20;
    if (v54 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::AllDifferentBoundsPropagator::PropagateLowerBoundsInternal(gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,absl::lts_2020_02_25::Span<operations_research::sat::AllDifferentBoundsPropagator::VarValue>)::$_0 &,operations_research::sat::AllDifferentBoundsPropagator::VarValue*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v5 = *(_QWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a3 + 12);
  if (v5 >= *(_QWORD *)(a1 + 12))
  {
    if (v6 < v5)
    {
      v9 = *(_DWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v10 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v10;
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v9;
      if (*(_QWORD *)(a2 + 12) < *(_QWORD *)(a1 + 12))
      {
        v11 = *(_DWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v12 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v12;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = *(_DWORD *)(a1 + 16);
      result = *(__n128 *)a1;
      v8 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 16) = v8;
LABEL_9:
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v7;
      goto LABEL_10;
    }
    v13 = *(_DWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v14 = *(_DWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = v14;
    *(__n128 *)a2 = result;
    *(_DWORD *)(a2 + 16) = v13;
    if (*(_QWORD *)(a3 + 12) < *(_QWORD *)(a2 + 12))
    {
      v7 = *(_DWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v15 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)(a4 + 12) < *(_QWORD *)(a3 + 12))
  {
    v16 = *(_DWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v17 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v17;
    *(__n128 *)a4 = result;
    *(_DWORD *)(a4 + 16) = v16;
    if (*(_QWORD *)(a3 + 12) < *(_QWORD *)(a2 + 12))
    {
      v18 = *(_DWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v19 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v19;
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v18;
      if (*(_QWORD *)(a2 + 12) < *(_QWORD *)(a1 + 12))
      {
        v20 = *(_DWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v21 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v21;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v20;
      }
    }
  }
  return result;
}

void absl::lts_2020_02_25::Status::~Status(absl::lts_2020_02_25::Status *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if ((v1 & 1) != 0)
    absl::lts_2020_02_25::Status::UnrefNonInlined(v1);
}

uint64_t google::MakeCheckOpString<long long,int>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DA39570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ArenaStringPtr::CreateInstance(std::string **a1, google::protobuf::Arena *this, __int128 *a3)
{
  std::string *AlignedAndAddCleanup;
  std::string *v7;
  __int128 v8;
  std::string *v9;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
    v7 = AlignedAndAddCleanup;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
      v8 = *a3;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = v8;
LABEL_6:
      *a1 = v7;
      return;
    }
    std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    *a1 = v7;
  }
  else
  {
    v9 = (std::string *)operator new();
    v7 = v9;
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
      goto LABEL_6;
    }
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *a3;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *a1 = v9;
  }
}

void sub_22DA39680(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearBooleanConstraint>::Merge(const operations_research::sat::LinearBooleanConstraint *a1, operations_research::sat::LinearBooleanConstraint *a2)
{
  operations_research::sat::LinearBooleanConstraint::MergeFrom(a2, a1);
}

uint64_t google::MakeCheckOpString<unsigned long,int>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DA39730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(result + 8) + 16 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_OWORD *)(v25 + 16 * v18) = *(_OWORD *)(v25 + 16 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_OWORD *)(v25 + 16 * v14);
          *(_OWORD *)(v25 + 16 * v14) = *(_OWORD *)(v25 + 16 * v18);
          *(_OWORD *)(*(_QWORD *)(result + 8) + 16 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DA39E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_BooleanAssignment_ortools_2fsat_2fBOOLean_5fproblem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/BOOLean_problem.pb.cc", a4);
  operations_research::sat::_BooleanAssignment_default_instance_ = (uint64_t)off_24F980AA8;
  unk_25408AA90 = 0;
  qword_25408AA98 = 0;
  unk_25408AAA0 = 0;
  dword_25408AAA8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_BooleanAssignment_default_instance_, v4);
}

void InitDefaultsscc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/BOOLean_problem.pb.cc", a4);
  operations_research::sat::_LinearBooleanConstraint_default_instance_ = (uint64_t)&off_24F980948;
  *(_QWORD *)algn_25408AE68 = 0;
  xmmword_25408AE70 = 0u;
  unk_25408AE80 = 0u;
  qword_25408AE90 = 0;
  if (atomic_load(scc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto);
  qword_25408AEA0 = 0;
  unk_25408AEA8 = 0;
  qword_25408AE98 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearBooleanConstraint_default_instance_, v4);
}

void sub_22DA39F14(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&unk_25408AE88);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&xmmword_25408AE70 + 8);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_LinearBooleanProblem_ortools_2fsat_2fBOOLean_5fproblem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/BOOLean_problem.pb.cc", a4);
  operations_research::sat::LinearBooleanProblem::LinearBooleanProblem((operations_research::sat::LinearBooleanProblem *)&operations_research::sat::_LinearBooleanProblem_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearBooleanProblem_default_instance_, v4);
  qword_25408ABA0 = (uint64_t)&operations_research::sat::_LinearObjective_default_instance_;
  unk_25408ABA8 = &operations_research::sat::_BooleanAssignment_default_instance_;
}

void InitDefaultsscc_info_LinearObjective_ortools_2fsat_2fBOOLean_5fproblem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/BOOLean_problem.pb.cc", a4);
  operations_research::sat::_LinearObjective_default_instance_ = (uint64_t)&off_24F9809F8;
  *(_QWORD *)algn_25408A8B8 = 0;
  xmmword_25408A8C0 = 0u;
  unk_25408A8D0 = 0u;
  xmmword_25408A8E0 = 0u;
  qword_25408A8F0 = 0x3FF0000000000000;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearObjective_default_instance_, v4);
}

void operations_research::sat::LinearBooleanConstraint::~LinearBooleanConstraint(operations_research::sat::LinearBooleanConstraint *this)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v8;

  v2 = *((_QWORD *)this + 7);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E31DF78](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v5 && v6 == 0)
    {
      v8 = *(void **)(v5 + 8);
      if (v8 != *(void **)(v5 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 8));
        v8 = *(void **)(v5 + 8);
      }
      if (v8)
      {
        *(_QWORD *)(v5 + 16) = v8;
        operator delete(v8);
      }
      MEMORY[0x22E31DF78](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 24);
}

{
  operations_research::sat::LinearBooleanConstraint::~LinearBooleanConstraint(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::LinearBooleanConstraint::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void operations_research::sat::LinearBooleanConstraint::Clear(operations_research::sat::LinearBooleanConstraint *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = 0;
  v1 = *((_DWORD *)this + 4);
  if ((v1 & 1) == 0)
  {
LABEL_4:
    if ((v1 & 6) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = *((_QWORD *)this + 7);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_4;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if ((v1 & 6) != 0)
  {
LABEL_5:
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
  }
LABEL_6:
  *((_DWORD *)this + 4) = 0;
  v3 = *((_QWORD *)this + 1);
  if ((v3 & 1) != 0 && *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v3 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

unsigned __int8 *operations_research::sat::LinearBooleanConstraint::_InternalParse(operations_research::sat::LinearBooleanConstraint *this, google::protobuf::UnknownFieldSet *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  google::protobuf::Arena *v11;
  std::string *v12;
  google::protobuf::UnknownFieldSet *v13;
  unsigned __int8 *TagFallback;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  google::protobuf::UnknownFieldSet *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t *v38;
  std::string **v39;

  v8 = 0;
  v38 = (uint64_t *)((char *)this + 8);
  v39 = (std::string **)((char *)this + 56);
  v9 = (unsigned int *)((char *)this + 40);
  v10 = (unsigned int *)((char *)this + 24);
  while (1)
  {
LABEL_5:
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *(_QWORD *)&a3[1]) == (google::protobuf::UnknownFieldSet *)a3[3].i32[1]
        || (a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)a2, a3[11].i32[1]), (v36 & 1) != 0))
      {
        TagFallback = (unsigned __int8 *)a2;
        goto LABEL_77;
      }
    }
    TagFallback = (unsigned __int8 *)a2 + 1;
    v15 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0)
    {
      v16 = (v15 >> 3) - 1;
      goto LABEL_8;
    }
    v22 = v15 + (*TagFallback << 7);
    v15 = v22 - 128;
    if ((char)*TagFallback < 0)
      break;
    TagFallback = (unsigned __int8 *)a2 + 2;
    v16 = (v15 >> 3) - 1;
    if (v16 > 4)
      goto LABEL_56;
LABEL_8:
    switch(v16)
    {
      case 0u:
        if (v15 == 8)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(TagFallback - 1);
          while (1)
          {
            v17 = *((unsigned __int8 *)a2 + 1);
            if (*((char *)a2 + 1) < 0)
              break;
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
            v18 = *((unsigned int *)this + 6);
            v19 = v18 + 1;
            if ((_DWORD)v18 == *((_DWORD *)this + 7))
              goto LABEL_13;
LABEL_14:
            *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v18) = v17;
            *((_DWORD *)this + 6) = v19;
            if (!a2)
              goto LABEL_76;
            if (*(_QWORD *)a3 <= (unint64_t)a2 || *(_BYTE *)a2 != 8)
              goto LABEL_5;
          }
          v20 = v17 + (*((unsigned __int8 *)a2 + 2) << 7);
          v17 = v20 - 128;
          if (*((char *)a2 + 2) < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 1), (const char *)(v20 - 128));
            v17 = v21;
            v18 = *((unsigned int *)this + 6);
            v19 = v18 + 1;
            if ((_DWORD)v18 != *((_DWORD *)this + 7))
              goto LABEL_14;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            v18 = *((unsigned int *)this + 6);
            v19 = v18 + 1;
            if ((_DWORD)v18 != *((_DWORD *)this + 7))
              goto LABEL_14;
          }
LABEL_13:
          google::protobuf::RepeatedField<int>::Reserve(v10, v19);
          goto LABEL_14;
        }
        if (v15 != 10)
          goto LABEL_56;
        v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::PackedInt32Parser((google::protobuf::internal *)v10, TagFallback, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        break;
      case 1u:
        if (v15 == 16)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(TagFallback - 1);
          while (1)
          {
            v23 = *((unsigned __int8 *)a2 + 1);
            if (*((char *)a2 + 1) < 0)
              break;
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
            v24 = *((unsigned int *)this + 10);
            v25 = v24 + 1;
            if ((_DWORD)v24 == *((_DWORD *)this + 11))
              goto LABEL_30;
LABEL_31:
            *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v24) = v23;
            *((_DWORD *)this + 10) = v25;
            if (!a2)
              goto LABEL_76;
            if (*(_QWORD *)a3 <= (unint64_t)a2 || *(_BYTE *)a2 != 16)
              goto LABEL_5;
          }
          v26 = v23 + (*((unsigned __int8 *)a2 + 2) << 7);
          v23 = (v26 - 128);
          if (*((char *)a2 + 2) < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 1), (const char *)(v26 - 128));
            v23 = v27;
            v24 = *((unsigned int *)this + 10);
            v25 = v24 + 1;
            if ((_DWORD)v24 != *((_DWORD *)this + 11))
              goto LABEL_31;
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            v24 = *((unsigned int *)this + 10);
            v25 = v24 + 1;
            if ((_DWORD)v24 != *((_DWORD *)this + 11))
              goto LABEL_31;
          }
LABEL_30:
          google::protobuf::RepeatedField<long long>::Reserve(v9, v25);
          goto LABEL_31;
        }
        if (v15 != 18)
          goto LABEL_56;
        v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::PackedInt64Parser((google::protobuf::internal *)v9, TagFallback, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        break;
      case 2u:
        if (v15 != 24)
          goto LABEL_56;
        v8 |= 2u;
        a2 = (google::protobuf::UnknownFieldSet *)(TagFallback + 1);
        v28 = (const char *)*TagFallback;
        if (((char)*TagFallback & 0x80000000) == 0)
          goto LABEL_44;
        v28 = (const char *)(v28 + (*(unsigned __int8 *)a2 << 7) - 128);
        if (*(char *)a2 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v28);
          *((_QWORD *)this + 8) = v34;
          if (!a2)
            goto LABEL_76;
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(TagFallback + 2);
LABEL_44:
          *((_QWORD *)this + 8) = v28;
        }
        continue;
      case 3u:
        if (v15 != 32)
          goto LABEL_56;
        v8 |= 4u;
        a2 = (google::protobuf::UnknownFieldSet *)(TagFallback + 1);
        v29 = (const char *)*TagFallback;
        if (((char)*TagFallback & 0x80000000) == 0)
          goto LABEL_49;
        v29 = (const char *)(v29 + (*(unsigned __int8 *)a2 << 7) - 128);
        if (*(char *)a2 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v29);
          *((_QWORD *)this + 9) = v35;
          if (!a2)
          {
LABEL_76:
            TagFallback = 0;
            goto LABEL_77;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(TagFallback + 2);
LABEL_49:
          *((_QWORD *)this + 9) = v29;
        }
        continue;
      case 4u:
        if (v15 != 42)
          goto LABEL_56;
        *((_DWORD *)this + 4) |= 1u;
        v30 = *((_QWORD *)this + 1);
        v11 = (google::protobuf::Arena *)(v30 & 0xFFFFFFFFFFFFFFFELL);
        if ((v30 & 1) != 0)
        {
          v11 = *(google::protobuf::Arena **)v11;
          v12 = *v39;
          if (*v39 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_3;
        }
        else
        {
          v12 = *v39;
          if (*v39 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_3;
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v39, v11, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v39;
LABEL_3:
        v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(v12, (std::string::value_type *)TagFallback, (uint64_t)a3);
        break;
      default:
        goto LABEL_56;
    }
LABEL_4:
    a2 = v13;
    if (!v13)
      goto LABEL_76;
  }
  TagFallback = (unsigned __int8 *)google::protobuf::internal::ReadTagFallback(a2, (const char *)(v22 - 128));
  if (!TagFallback)
    goto LABEL_77;
  v15 = v31;
  v16 = (v31 >> 3) - 1;
  if (v16 <= 4)
    goto LABEL_8;
LABEL_56:
  if (v15)
    v32 = (v15 & 7) == 4;
  else
    v32 = 1;
  if (!v32)
  {
    if ((*v38 & 1) != 0)
      v33 = (google::protobuf::UnknownFieldSet *)((*v38 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v33 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v38);
    v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, v33, (google::protobuf::UnknownFieldSet *)TagFallback, a3, a5);
    goto LABEL_4;
  }
  a3[10].i32[0] = v15 - 1;
LABEL_77:
  *((_DWORD *)this + 4) |= v8;
  return TagFallback;
}

google::protobuf::UnknownFieldSet *operations_research::sat::LinearBooleanConstraint::_InternalSerialize(operations_research::sat::LinearBooleanConstraint *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t j;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  char *v31;
  const void *v32;

  v6 = *((unsigned int *)this + 6);
  if ((int)v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v8 = *(int *)(*((_QWORD *)this + 4) + 4 * i);
        *(_BYTE *)a2 = 8;
        if (v8 > 0x7F)
        {
LABEL_7:
          *((_BYTE *)a2 + 1) = v8 | 0x80;
          v9 = v8 >> 7;
          if (v8 >> 14)
          {
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            do
            {
              *((_BYTE *)a2 - 1) = v9 | 0x80;
              v10 = v9 >> 7;
              a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
              v11 = v9 >> 14;
              v9 >>= 7;
            }
            while (v11);
            *((_BYTE *)a2 - 1) = v10;
          }
          else
          {
            *((_BYTE *)a2 + 2) = v9;
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
          }
          continue;
        }
      }
      else
      {
        v8 = *(int *)(*((_QWORD *)this + 4) + 4 * i);
        *(_BYTE *)a2 = 8;
        if (v8 > 0x7F)
          goto LABEL_7;
      }
      *((_BYTE *)a2 + 1) = v8;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  v12 = *((unsigned int *)this + 10);
  if ((int)v12 >= 1)
  {
    for (j = 0; j != v12; ++j)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v14 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * j);
        *(_BYTE *)a2 = 16;
        if (v14 > 0x7F)
        {
LABEL_20:
          *((_BYTE *)a2 + 1) = v14 | 0x80;
          v15 = v14 >> 7;
          if (v14 >> 14)
          {
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            do
            {
              *((_BYTE *)a2 - 1) = v15 | 0x80;
              v16 = v15 >> 7;
              a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
              v17 = v15 >> 14;
              v15 >>= 7;
            }
            while (v17);
            *((_BYTE *)a2 - 1) = v16;
          }
          else
          {
            *((_BYTE *)a2 + 2) = v15;
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
          }
          continue;
        }
      }
      else
      {
        v14 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * j);
        *(_BYTE *)a2 = 16;
        if (v14 > 0x7F)
          goto LABEL_20;
      }
      *((_BYTE *)a2 + 1) = v14;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  v18 = *((_DWORD *)this + 4);
  if ((v18 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v21 = *((_QWORD *)this + 8);
      *(_BYTE *)a2 = 24;
      if (v21 <= 0x7F)
      {
LABEL_34:
        *((_BYTE *)a2 + 1) = v21;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        if ((v18 & 4) != 0)
          goto LABEL_43;
        goto LABEL_29;
      }
    }
    else
    {
      v21 = *((_QWORD *)this + 8);
      *(_BYTE *)a2 = 24;
      if (v21 <= 0x7F)
        goto LABEL_34;
    }
    *((_BYTE *)a2 + 1) = v21 | 0x80;
    v22 = v21 >> 7;
    if (v21 >> 14)
    {
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      do
      {
        *((_BYTE *)a2 - 1) = v22 | 0x80;
        v23 = v22 >> 7;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
        v24 = v22 >> 14;
        v22 >>= 7;
      }
      while (v24);
      *((_BYTE *)a2 - 1) = v23;
      if ((v18 & 4) != 0)
        goto LABEL_43;
    }
    else
    {
      *((_BYTE *)a2 + 2) = v22;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      if ((v18 & 4) != 0)
        goto LABEL_43;
    }
LABEL_29:
    if ((v18 & 1) == 0)
      goto LABEL_30;
LABEL_54:
    v29 = *((_QWORD *)this + 7);
    if (*(char *)(v29 + 23) < 0)
    {
      v30 = *(_QWORD *)(v29 + 8);
      if (v30 > 127)
      {
LABEL_63:
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 5, v29, (char *)a2);
        v19 = *((_QWORD *)this + 1);
        if ((v19 & 1) == 0)
          return a2;
        return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a2);
      }
    }
    else
    {
      v30 = *(unsigned __int8 *)(v29 + 23);
    }
    if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v30)
    {
      *(_BYTE *)a2 = 42;
      v31 = (char *)a2 + 2;
      *((_BYTE *)a2 + 1) = v30;
      if (*(char *)(v29 + 23) >= 0)
        v32 = (const void *)v29;
      else
        v32 = *(const void **)v29;
      memcpy((char *)a2 + 2, v32, v30);
      a2 = (google::protobuf::UnknownFieldSet *)&v31[v30];
      v19 = *((_QWORD *)this + 1);
      if ((v19 & 1) == 0)
        return a2;
      return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a2);
    }
    goto LABEL_63;
  }
  if ((v18 & 4) == 0)
    goto LABEL_29;
LABEL_43:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v25 = *((_QWORD *)this + 9);
    *(_BYTE *)a2 = 32;
    if (v25 <= 0x7F)
    {
LABEL_45:
      *((_BYTE *)a2 + 1) = v25;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      if ((v18 & 1) != 0)
        goto LABEL_54;
      goto LABEL_30;
    }
  }
  else
  {
    v25 = *((_QWORD *)this + 9);
    *(_BYTE *)a2 = 32;
    if (v25 <= 0x7F)
      goto LABEL_45;
  }
  *((_BYTE *)a2 + 1) = v25 | 0x80;
  v26 = v25 >> 7;
  if (v25 >> 14)
  {
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
    do
    {
      *((_BYTE *)a2 - 1) = v26 | 0x80;
      v27 = v26 >> 7;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
      v28 = v26 >> 14;
      v26 >>= 7;
    }
    while (v28);
    *((_BYTE *)a2 - 1) = v27;
    if ((v18 & 1) != 0)
      goto LABEL_54;
  }
  else
  {
    *((_BYTE *)a2 + 2) = v26;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
    if ((v18 & 1) != 0)
      goto LABEL_54;
  }
LABEL_30:
  v19 = *((_QWORD *)this + 1);
  if ((v19 & 1) == 0)
    return a2;
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a2);
}

char *operations_research::sat::LinearBooleanConstraint::ByteSizeLong(operations_research::sat::LinearBooleanConstraint *this)
{
  uint64_t v2;
  uint64_t v3;
  const google::protobuf::UnknownFieldSet *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 6);
  v3 = *((unsigned int *)this + 6);
  v4 = (const google::protobuf::UnknownFieldSet *)(v2
                                                 + google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10)
                                                 + v3
                                                 + *((unsigned int *)this + 10));
  v5 = *((_DWORD *)this + 4);
  if ((v5 & 7) == 0)
    goto LABEL_6;
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)this + 7);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v9 = v8;
    v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1);
    if ((v5 & 2) == 0)
    {
LABEL_4:
      if ((v5 & 4) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_4;
  }
  v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4
                                                 + ((9 * (__clz(*((_QWORD *)this + 8) | 1) ^ 0x3F) + 73) >> 6)
                                                 + 1);
  if ((v5 & 4) != 0)
LABEL_5:
    v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4
                                                   + ((9 * (__clz(*((_QWORD *)this + 9) | 1) ^ 0x3F) + 73) >> 6)
                                                   + 1);
LABEL_6:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearBooleanConstraint *)((char *)this + 8), v4, (_DWORD *)this + 5);
  *((_DWORD *)this + 5) = (_DWORD)v4;
  return (char *)v4;
}

void operations_research::sat::LinearBooleanConstraint::MergeFrom(operations_research::sat::LinearBooleanConstraint *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::LinearBooleanConstraint *__hidden))a2 == &off_24F980948)
    operations_research::sat::LinearBooleanConstraint::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::LinearBooleanConstraint::MergeFrom(operations_research::sat::LinearBooleanConstraint *this, const operations_research::sat::LinearBooleanConstraint *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  std::string *v16;
  std::string **v17;
  uint64_t v18;
  google::protobuf::Arena *v19;
  std::string *v20;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
  {
    v10 = *((int *)this + 6);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 6, v10 + v9);
    v11 = *((_QWORD *)this + 4);
    *((_DWORD *)this + 6) += *((_DWORD *)a2 + 6);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 4), 4 * *((int *)a2 + 6));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  v15 = *((_DWORD *)a2 + 4);
  if ((v15 & 7) != 0)
  {
    if ((v15 & 1) == 0)
    {
      if ((v15 & 2) == 0)
        goto LABEL_12;
LABEL_23:
      *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
      if ((v15 & 4) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    v16 = (std::string *)*((_QWORD *)a2 + 7);
    *((_DWORD *)this + 4) |= 1u;
    v17 = (std::string **)((char *)this + 56);
    v18 = *((_QWORD *)this + 1);
    v19 = (google::protobuf::Arena *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
    {
      v19 = *(google::protobuf::Arena **)v19;
      v20 = *v17;
      if (*v17 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_18:
        std::string::operator=(v20, v16);
        if ((v15 & 2) != 0)
          goto LABEL_23;
LABEL_12:
        if ((v15 & 4) == 0)
        {
LABEL_14:
          *((_DWORD *)this + 4) |= v15;
          return;
        }
LABEL_13:
        *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
        goto LABEL_14;
      }
    }
    else
    {
      v20 = *v17;
      if (*v17 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_18;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v17, v19, (__int128 *)v16);
    if ((v15 & 2) != 0)
      goto LABEL_23;
    goto LABEL_12;
  }
}

void operations_research::sat::LinearBooleanConstraint::CopyFrom(operations_research::sat::LinearBooleanConstraint *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == this)
    return;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = 0;
  v5 = *((_DWORD *)this + 4);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 6) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v6 = *((_QWORD *)this + 7);
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  if ((v5 & 6) != 0)
  {
LABEL_6:
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
  }
LABEL_7:
  *((_DWORD *)this + 4) = 0;
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0 && *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
  if (*(void (***)(operations_research::sat::LinearBooleanConstraint *__hidden))a2 == &off_24F980948)
    operations_research::sat::LinearBooleanConstraint::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

uint64_t operations_research::sat::LinearBooleanConstraint::IsInitialized(operations_research::sat::LinearBooleanConstraint *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearBooleanConstraint::GetMetadata(operations_research::sat::LinearBooleanConstraint *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0);
  return *off_25407A1C8;
}

void operations_research::sat::LinearObjective::~LinearObjective(operations_research::sat::LinearObjective *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 24);
}

{
  operations_research::sat::LinearObjective::~LinearObjective(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::LinearObjective::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void operations_research::sat::LinearObjective::Clear(operations_research::sat::LinearObjective *this)
{
  uint64_t v1;

  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = 0;
  if ((*((_BYTE *)this + 16) & 3) != 0)
    *(_OWORD *)((char *)this + 56) = xmmword_22DCE8570;
  *((_DWORD *)this + 4) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::LinearObjective::_InternalParse(operations_research::sat::LinearObjective *this, google::protobuf::UnknownFieldSet *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t TagFallback;
  unsigned int v28;
  BOOL v29;
  google::protobuf::UnknownFieldSet *v30;
  google::protobuf::UnknownFieldSet *v31;
  char v32;
  uint64_t *v34;
  char *v35;
  char *v36;

  v8 = 0;
  v36 = (char *)this + 64;
  v34 = (uint64_t *)((char *)this + 8);
  v35 = (char *)this + 56;
  v9 = (unsigned int *)((char *)this + 40);
  v10 = (unsigned int *)((char *)this + 24);
  while (1)
  {
LABEL_5:
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *(_QWORD *)&a3[1]) == (google::protobuf::UnknownFieldSet *)a3[3].i32[1])
        goto LABEL_61;
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)a2, a3[11].i32[1]);
      if ((v32 & 1) != 0)
        goto LABEL_61;
    }
    v13 = (unsigned __int8 *)a2 + 1;
    v14 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0)
      goto LABEL_9;
    v15 = v14 + (*v13 << 7);
    v14 = v15 - 128;
    if (((char)*v13 & 0x80000000) == 0)
    {
      v13 = (unsigned __int8 *)a2 + 2;
LABEL_9:
      v16 = (v14 >> 3) - 1;
      goto LABEL_10;
    }
    TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v15 - 128));
    if (!TagFallback)
    {
      a2 = 0;
      goto LABEL_61;
    }
    v13 = (unsigned __int8 *)TagFallback;
    v14 = v28;
    v16 = (v28 >> 3) - 1;
    if (v16 > 3)
      break;
LABEL_10:
    switch(v16)
    {
      case 0u:
        if (v14 == 8)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v13 - 1);
          while (1)
          {
            v17 = *((unsigned __int8 *)a2 + 1);
            if ((*((char *)a2 + 1) & 0x80000000) == 0)
              break;
            v20 = v17 + (*((unsigned __int8 *)a2 + 2) << 7);
            v17 = v20 - 128;
            if (*((char *)a2 + 2) < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 1), (const char *)(v20 - 128));
              v17 = v21;
              v18 = *((unsigned int *)this + 6);
              v19 = v18 + 1;
              if ((_DWORD)v18 != *((_DWORD *)this + 7))
                goto LABEL_19;
LABEL_18:
              google::protobuf::RepeatedField<int>::Reserve(v10, v19);
              goto LABEL_19;
            }
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            v18 = *((unsigned int *)this + 6);
            v19 = v18 + 1;
            if ((_DWORD)v18 == *((_DWORD *)this + 7))
              goto LABEL_18;
LABEL_19:
            *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v18) = v17;
            *((_DWORD *)this + 6) = v19;
            if (!a2)
              goto LABEL_61;
            if (*(_QWORD *)a3 <= (unint64_t)a2 || *(_BYTE *)a2 != 8)
              goto LABEL_5;
          }
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
          v18 = *((unsigned int *)this + 6);
          v19 = v18 + 1;
          if ((_DWORD)v18 != *((_DWORD *)this + 7))
            goto LABEL_19;
          goto LABEL_18;
        }
        if (v14 != 10)
          goto LABEL_43;
        v31 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::PackedInt32Parser((google::protobuf::internal *)v10, v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        break;
      case 1u:
        if (v14 == 16)
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v13 - 1);
          while (1)
          {
            v22 = *((unsigned __int8 *)a2 + 1);
            if ((*((char *)a2 + 1) & 0x80000000) == 0)
              break;
            v25 = v22 + (*((unsigned __int8 *)a2 + 2) << 7);
            v22 = (v25 - 128);
            if (*((char *)a2 + 2) < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 1), (const char *)(v25 - 128));
              v22 = v26;
              v23 = *((unsigned int *)this + 10);
              v24 = v23 + 1;
              if ((_DWORD)v23 != *((_DWORD *)this + 11))
                goto LABEL_33;
LABEL_32:
              google::protobuf::RepeatedField<long long>::Reserve(v9, v24);
              goto LABEL_33;
            }
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            v23 = *((unsigned int *)this + 10);
            v24 = v23 + 1;
            if ((_DWORD)v23 == *((_DWORD *)this + 11))
              goto LABEL_32;
LABEL_33:
            *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v23) = v22;
            *((_DWORD *)this + 10) = v24;
            if (!a2)
              goto LABEL_61;
            if (*(_QWORD *)a3 <= (unint64_t)a2 || *(_BYTE *)a2 != 16)
              goto LABEL_5;
          }
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
          v23 = *((unsigned int *)this + 10);
          v24 = v23 + 1;
          if ((_DWORD)v23 != *((_DWORD *)this + 11))
            goto LABEL_33;
          goto LABEL_32;
        }
        if (v14 != 18)
          goto LABEL_43;
        v31 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::PackedInt64Parser((google::protobuf::internal *)v9, v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        break;
      case 2u:
        if (v14 != 25)
          goto LABEL_43;
        v11 = 1;
        v12 = v35;
        goto LABEL_4;
      case 3u:
        if (v14 != 33)
          goto LABEL_43;
        v11 = 2;
        v12 = v36;
LABEL_4:
        v8 |= v11;
        *v12 = *(_QWORD *)v13;
        a2 = (google::protobuf::UnknownFieldSet *)(v13 + 8);
        continue;
      default:
        goto LABEL_43;
    }
LABEL_50:
    a2 = v31;
    if (!v31)
      goto LABEL_61;
  }
LABEL_43:
  if (v14)
    v29 = (v14 & 7) == 4;
  else
    v29 = 1;
  if (!v29)
  {
    if ((*v34 & 1) != 0)
      v30 = (google::protobuf::UnknownFieldSet *)((*v34 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v30 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v34);
    v31 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, v30, (google::protobuf::UnknownFieldSet *)v13, a3, a5);
    goto LABEL_50;
  }
  a3[10].i32[0] = v14 - 1;
  a2 = (google::protobuf::UnknownFieldSet *)v13;
LABEL_61:
  *((_DWORD *)this + 4) |= v8;
  return a2;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearObjective::_InternalSerialize(operations_research::sat::LinearObjective *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t j;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v6 = *((unsigned int *)this + 6);
  if ((int)v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        v8 = *(int *)(*((_QWORD *)this + 4) + 4 * i);
        *a2 = 8;
        if (v8 > 0x7F)
        {
LABEL_7:
          a2[1] = v8 | 0x80;
          v9 = v8 >> 7;
          if (v8 >> 14)
          {
            a2 += 3;
            do
            {
              *(a2 - 1) = v9 | 0x80;
              v10 = v9 >> 7;
              ++a2;
              v11 = v9 >> 14;
              v9 >>= 7;
            }
            while (v11);
            *(a2 - 1) = v10;
          }
          else
          {
            a2[2] = v9;
            a2 += 3;
          }
          continue;
        }
      }
      else
      {
        v8 = *(int *)(*((_QWORD *)this + 4) + 4 * i);
        *a2 = 8;
        if (v8 > 0x7F)
          goto LABEL_7;
      }
      a2[1] = v8;
      a2 += 2;
    }
  }
  v12 = *((unsigned int *)this + 10);
  if ((int)v12 >= 1)
  {
    for (j = 0; j != v12; ++j)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        v14 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * j);
        *a2 = 16;
        if (v14 > 0x7F)
        {
LABEL_20:
          a2[1] = v14 | 0x80;
          v15 = v14 >> 7;
          if (v14 >> 14)
          {
            a2 += 3;
            do
            {
              *(a2 - 1) = v15 | 0x80;
              v16 = v15 >> 7;
              ++a2;
              v17 = v15 >> 14;
              v15 >>= 7;
            }
            while (v17);
            *(a2 - 1) = v16;
          }
          else
          {
            a2[2] = v15;
            a2 += 3;
          }
          continue;
        }
      }
      else
      {
        v14 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * j);
        *a2 = 16;
        if (v14 > 0x7F)
          goto LABEL_20;
      }
      a2[1] = v14;
      a2 += 2;
    }
  }
  v18 = *((_DWORD *)this + 4);
  if ((v18 & 1) == 0)
  {
    if ((v18 & 2) == 0)
      goto LABEL_29;
LABEL_34:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v22 = *((_QWORD *)this + 8);
    *a2 = 33;
    *(_QWORD *)(a2 + 1) = v22;
    a2 += 9;
    v19 = *((_QWORD *)this + 1);
    if ((v19 & 1) == 0)
      return (const google::protobuf::UnknownFieldSet *)a2;
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v21 = *((_QWORD *)this + 7);
  *a2 = 25;
  *(_QWORD *)(a2 + 1) = v21;
  a2 += 9;
  if ((v18 & 2) != 0)
    goto LABEL_34;
LABEL_29:
  v19 = *((_QWORD *)this + 1);
  if ((v19 & 1) == 0)
    return (const google::protobuf::UnknownFieldSet *)a2;
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *operations_research::sat::LinearObjective::ByteSizeLong(operations_research::sat::LinearObjective *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  const google::protobuf::UnknownFieldSet *v7;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 6);
  v3 = *((unsigned int *)this + 6);
  v4 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 10);
  v5 = *((_DWORD *)this + 4);
  v6 = v2 + v4 + v3 + *((unsigned int *)this + 10) + 9;
  if ((v5 & 1) == 0)
    v6 = v2 + v4 + v3 + *((unsigned int *)this + 10);
  if ((v5 & 2) != 0)
    v6 += 9;
  if ((v5 & 3) != 0)
    v7 = (const google::protobuf::UnknownFieldSet *)v6;
  else
    v7 = (const google::protobuf::UnknownFieldSet *)(v2 + v4 + v3 + *((unsigned int *)this + 10));
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearObjective *)((char *)this + 8), v7, (_DWORD *)this + 5);
  *((_DWORD *)this + 5) = (_DWORD)v7;
  return (char *)v7;
}

void operations_research::sat::LinearObjective::MergeFrom(operations_research::sat::LinearObjective *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::LinearObjective *__hidden))a2 == &off_24F9809F8)
    operations_research::sat::LinearObjective::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::LinearObjective::MergeFrom(operations_research::sat::LinearObjective *this, const operations_research::sat::LinearObjective *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
  {
    v10 = *((int *)this + 6);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 6, v10 + v9);
    v11 = *((_QWORD *)this + 4);
    *((_DWORD *)this + 6) += *((_DWORD *)a2 + 6);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 4), 4 * *((int *)a2 + 6));
  }
  v12 = *((_DWORD *)a2 + 10);
  if (v12)
  {
    v13 = *((int *)this + 10);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v13 + v12);
    v14 = *((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v14 + 8 * v13), *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  v15 = *((_DWORD *)a2 + 4);
  if ((v15 & 3) != 0)
  {
    if ((v15 & 1) != 0)
      *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    if ((v15 & 2) != 0)
      *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
    *((_DWORD *)this + 4) |= v15;
  }
}

void operations_research::sat::LinearObjective::CopyFrom(operations_research::sat::LinearObjective *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 6) = 0;
    *((_DWORD *)this + 10) = 0;
    if ((*((_BYTE *)this + 16) & 3) != 0)
      *(_OWORD *)((char *)this + 56) = xmmword_22DCE8570;
    *((_DWORD *)this + 4) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    if (*(void (***)(operations_research::sat::LinearObjective *__hidden))a2 == &off_24F9809F8)
      operations_research::sat::LinearObjective::MergeFrom(this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

uint64_t operations_research::sat::LinearObjective::IsInitialized(operations_research::sat::LinearObjective *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearObjective::GetMetadata(operations_research::sat::LinearObjective *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0);
  return off_25407A1C8[2];
}

void operations_research::sat::BooleanAssignment::~BooleanAssignment(operations_research::sat::BooleanAssignment *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::BooleanAssignment::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void operations_research::sat::BooleanAssignment::Clear(operations_research::sat::BooleanAssignment *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::BooleanAssignment::_InternalParse(operations_research::sat::BooleanAssignment *this, google::protobuf::UnknownFieldSet *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  uint64_t *v8;
  unsigned int *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t TagFallback;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v21;
  char v22;

  v8 = (uint64_t *)((char *)this + 8);
  v9 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
LABEL_2:
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *(_QWORD *)&a3[1]) == (google::protobuf::UnknownFieldSet *)a3[3].i32[1])
          return a2;
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)a2, a3[11].i32[1]);
        if ((v22 & 1) != 0)
          return a2;
      }
      v10 = (unsigned __int8 *)a2 + 1;
      v11 = *(unsigned __int8 *)a2;
      if ((*(char *)a2 & 0x80000000) == 0)
        goto LABEL_6;
      v12 = v11 + (*v10 << 7);
      v11 = v12 - 128;
      if (((char)*v10 & 0x80000000) == 0)
      {
        v10 = (unsigned __int8 *)a2 + 2;
LABEL_6:
        if ((v11 & 0xFFFFFFF8) != 8)
          break;
        goto LABEL_7;
      }
      TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v12 - 128));
      if (!TagFallback)
        return 0;
      v10 = (unsigned __int8 *)TagFallback;
      v11 = v19;
      if ((v19 & 0xFFFFFFF8) != 8)
        break;
LABEL_7:
      if (v11 == 8)
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v10 - 1);
        while (1)
        {
          v13 = *((unsigned __int8 *)a2 + 1);
          if ((*((char *)a2 + 1) & 0x80000000) == 0)
            break;
          v16 = v13 + (*((unsigned __int8 *)a2 + 2) << 7);
          v13 = v16 - 128;
          if (*((char *)a2 + 2) < 0)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 1), (const char *)(v16 - 128));
            v13 = v17;
            v14 = *((unsigned int *)this + 4);
            v15 = v14 + 1;
            if ((_DWORD)v14 != *((_DWORD *)this + 5))
              goto LABEL_15;
LABEL_14:
            google::protobuf::RepeatedField<int>::Reserve(v9, v15);
            goto LABEL_15;
          }
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
          v14 = *((unsigned int *)this + 4);
          v15 = v14 + 1;
          if ((_DWORD)v14 == *((_DWORD *)this + 5))
            goto LABEL_14;
LABEL_15:
          *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v14) = v13;
          *((_DWORD *)this + 4) = v15;
          if (!a2)
            return a2;
          if (*(_QWORD *)a3 <= (unint64_t)a2 || *(_BYTE *)a2 != 8)
            goto LABEL_2;
        }
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        v14 = *((unsigned int *)this + 4);
        v15 = v14 + 1;
        if ((_DWORD)v14 != *((_DWORD *)this + 5))
          goto LABEL_15;
        goto LABEL_14;
      }
      if (v11 != 10)
        break;
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::PackedInt32Parser((google::protobuf::internal *)v9, v10, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
      if (!a2)
        return a2;
    }
    if (!v11 || (v11 & 7) == 4)
      break;
    if ((*v8 & 1) != 0)
      v21 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v21 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v21, (google::protobuf::UnknownFieldSet *)v10, a3, a5);
    if (!a2)
      return a2;
  }
  a3[10].i32[0] = v11 - 1;
  return (google::protobuf::UnknownFieldSet *)v10;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::BooleanAssignment::_InternalSerialize(operations_research::sat::BooleanAssignment *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = *((unsigned int *)this + 4);
  if ((int)v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        v8 = *(int *)(*((_QWORD *)this + 3) + 4 * i);
        *a2 = 8;
        if (v8 > 0x7F)
        {
LABEL_7:
          a2[1] = v8 | 0x80;
          v9 = v8 >> 7;
          if (v8 >> 14)
          {
            a2 += 3;
            do
            {
              *(a2 - 1) = v9 | 0x80;
              v10 = v9 >> 7;
              ++a2;
              v11 = v9 >> 14;
              v9 >>= 7;
            }
            while (v11);
            *(a2 - 1) = v10;
          }
          else
          {
            a2[2] = v9;
            a2 += 3;
          }
          continue;
        }
      }
      else
      {
        v8 = *(int *)(*((_QWORD *)this + 3) + 4 * i);
        *a2 = 8;
        if (v8 > 0x7F)
          goto LABEL_7;
      }
      a2[1] = v8;
      a2 += 2;
    }
  }
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::BooleanAssignment::ByteSizeLong(operations_research::sat::BooleanAssignment *this)
{
  const google::protobuf::UnknownFieldSet *v2;

  v2 = (const google::protobuf::UnknownFieldSet *)(google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4)
                                                 + *((unsigned int *)this + 4));
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::BooleanAssignment *)((char *)this + 8), v2, (_DWORD *)this + 8);
  *((_DWORD *)this + 8) = (_DWORD)v2;
  return (char *)v2;
}

void operations_research::sat::BooleanAssignment::MergeFrom(operations_research::sat::BooleanAssignment *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;
  uint64_t *v6;
  const google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  const google::protobuf::UnknownFieldSet *v14;

  if (*(void (***)(operations_research::sat::BooleanAssignment *__hidden))a2 == off_24F980AA8)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)((char *)this + 8);
      v7 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v8 = *((_QWORD *)this + 1);
      if ((v8 & 1) != 0)
      {
        v9 = (google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v14 = v7;
        v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v6);
        v7 = v14;
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v7);
    }
    v10 = *((_DWORD *)a2 + 4);
    if (v10)
    {
      v12 = *((int *)this + 4);
      v11 = (unsigned int *)((char *)this + 16);
      google::protobuf::RepeatedField<int>::Reserve(v11, v12 + v10);
      v13 = *((_QWORD *)v11 + 1);
      *v11 += *((_DWORD *)a2 + 4);
      memcpy((void *)(v13 + 4 * v12), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void operations_research::sat::BooleanAssignment::CopyFrom(operations_research::sat::BooleanAssignment *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    operations_research::sat::BooleanAssignment::MergeFrom(this, a2, a3);
  }
}

uint64_t operations_research::sat::BooleanAssignment::IsInitialized(operations_research::sat::BooleanAssignment *this)
{
  return 1;
}

uint64_t operations_research::sat::BooleanAssignment::GetMetadata(operations_research::sat::BooleanAssignment *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0);
  return off_25407A1C8[4];
}

operations_research::sat::LinearBooleanProblem *operations_research::sat::LinearBooleanProblem::LinearBooleanProblem(operations_research::sat::LinearBooleanProblem *this, google::protobuf::Arena *a2)
{
  *(_QWORD *)this = &off_24F980B58;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  if (atomic_load(scc_info_LinearBooleanProblem_ortools_2fsat_2fBOOLean_5fproblem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_LinearBooleanProblem_ortools_2fsat_2fBOOLean_5fproblem_2eproto);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  return this;
}

void sub_22DA3BDE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  operations_research::sat::LinearBooleanConstraint **v5;

  v3 = v2;
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v3);
  v5 = *(operations_research::sat::LinearBooleanConstraint ***)(v1 + 40);
  if (v5)
    operations_research::sat::LinearBooleanProblem::LinearBooleanProblem((_QWORD *)(v1 + 24), v5, (operations_research::sat::LinearBooleanConstraint ***)(v1 + 40));
  *(_QWORD *)(v1 + 40) = 0;
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearBooleanProblem::~LinearBooleanProblem(operations_research::sat::LinearBooleanConstraint ***this)
{
  operations_research::sat::LinearBooleanConstraint **v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  operations_research::sat::LinearBooleanConstraint **v7;
  operations_research::sat::LinearBooleanConstraint **v8;
  uint64_t v9;

  operations_research::sat::LinearBooleanProblem::SharedDtor((operations_research::sat::LinearObjective *)this);
  v2 = this[1];
  if ((v2 & 1) != 0)
  {
    v3 = (unint64_t)v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(this + 6);
  v7 = this[5];
  if (v7 && !this[3])
  {
    v8 = v7 + 1;
    v9 = *(unsigned int *)v7;
    if ((int)v9 >= 1)
    {
      do
      {
        if (*v8)
        {
          operations_research::sat::LinearBooleanConstraint::~LinearBooleanConstraint(*v8);
          MEMORY[0x22E31DF78]();
        }
        ++v8;
        --v9;
      }
      while (v9);
      v7 = this[5];
    }
    operator delete(v7);
    this[5] = 0;
  }
  else
  {
    this[5] = 0;
  }
}

{
  operations_research::sat::LinearBooleanProblem::~LinearBooleanProblem(this);
  JUMPOUT(0x22E31DF78);
}

operations_research::sat::LinearObjective *operations_research::sat::LinearBooleanProblem::SharedDtor(operations_research::sat::LinearObjective *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v9;

  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (operations_research::sat::LinearObjective *)MEMORY[0x22E31DF78](v2, 0x1012C40EC159624);
  }
  if ((_UNKNOWN *)v1 != &operations_research::sat::_LinearBooleanProblem_default_instance_)
  {
    this = *(operations_research::sat::LinearObjective **)(v1 + 80);
    if (this)
    {
      operations_research::sat::LinearObjective::~LinearObjective(this);
      this = (operations_research::sat::LinearObjective *)MEMORY[0x22E31DF78]();
    }
    v4 = *(_QWORD *)(v1 + 88);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if ((v5 & 1) != 0)
      {
        v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        v7 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6 && v7 == 0)
        {
          v9 = *(void **)(v6 + 8);
          if (v9 != *(void **)(v6 + 16))
          {
            google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v6 + 8));
            v9 = *(void **)(v6 + 8);
          }
          if (v9)
          {
            *(_QWORD *)(v6 + 16) = v9;
            operator delete(v9);
          }
          MEMORY[0x22E31DF78](v6, 0x20C40DC1BFBCFLL);
        }
      }
      google::protobuf::RepeatedField<BOOL>::~RepeatedField(v4 + 16);
      JUMPOUT(0x22E31DF78);
    }
  }
  return this;
}

uint64_t operations_research::sat::LinearBooleanProblem::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void operations_research::sat::LinearBooleanProblem::Clear(operations_research::sat::LinearBooleanProblem *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((unsigned int *)this + 8);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 5) + 8);
    while (1)
    {
      v4 = *v3;
      *(_DWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 40) = 0;
      v5 = *(_DWORD *)(v4 + 16);
      if ((v5 & 1) == 0)
        goto LABEL_7;
      v6 = *(_QWORD *)(v4 + 56);
      if ((*(char *)(v6 + 23) & 0x80000000) == 0)
        break;
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v5 & 6) != 0)
        goto LABEL_8;
LABEL_9:
      *(_DWORD *)(v4 + 16) = 0;
      v7 = *(_QWORD *)(v4 + 8);
      if ((v7 & 1) != 0
        && *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
      ++v3;
      if (!--v2)
      {
        *((_DWORD *)this + 8) = 0;
        goto LABEL_15;
      }
    }
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 23) = 0;
LABEL_7:
    if ((v5 & 6) == 0)
      goto LABEL_9;
LABEL_8:
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    goto LABEL_9;
  }
LABEL_15:
  v8 = *((unsigned int *)this + 14);
  if ((int)v8 >= 1)
  {
    v9 = *((_QWORD *)this + 8) + 8;
    do
    {
      while (1)
      {
        v10 = *(_QWORD *)v9;
        if (*(char *)(*(_QWORD *)v9 + 23) < 0)
          break;
        *(_BYTE *)v10 = 0;
        *(_BYTE *)(v10 + 23) = 0;
        v9 += 8;
        if (!--v8)
          goto LABEL_20;
      }
      **(_BYTE **)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v9 += 8;
      --v8;
    }
    while (v8);
LABEL_20:
    *((_DWORD *)this + 14) = 0;
  }
  v11 = *((_DWORD *)this + 4);
  if ((v11 & 7) != 0)
  {
    if ((v11 & 1) != 0)
    {
      v12 = *((_QWORD *)this + 9);
      if (*(char *)(v12 + 23) < 0)
      {
        **(_BYTE **)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        if ((v11 & 2) != 0)
          goto LABEL_26;
        goto LABEL_32;
      }
      *(_BYTE *)v12 = 0;
      *(_BYTE *)(v12 + 23) = 0;
    }
    if ((v11 & 2) != 0)
    {
LABEL_26:
      v13 = *((_QWORD *)this + 10);
      *(_DWORD *)(v13 + 24) = 0;
      *(_DWORD *)(v13 + 40) = 0;
      if ((*(_BYTE *)(v13 + 16) & 3) != 0)
        *(_OWORD *)(v13 + 56) = xmmword_22DCE8570;
      *(_DWORD *)(v13 + 16) = 0;
      v14 = *(_QWORD *)(v13 + 8);
      if ((v14 & 1) != 0
        && *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v14 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
    }
LABEL_32:
    if ((v11 & 4) != 0)
    {
      v15 = *((_QWORD *)this + 11);
      *(_DWORD *)(v15 + 16) = 0;
      v16 = *(_QWORD *)(v15 + 8);
      if ((v16 & 1) != 0
        && *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v16 & 0xFFFFFFFFFFFFFFFELL)
                                                                                             + 8));
      }
    }
  }
  if ((v11 & 0x18) != 0)
    *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 4) = 0;
  v17 = *((_QWORD *)this + 1);
  if ((v17 & 1) != 0 && *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v17 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::LinearBooleanProblem::_InternalParse(operations_research::sat::LinearBooleanProblem *this, google::protobuf::UnknownFieldSet *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  google::protobuf::Arena *v11;
  std::string *v12;
  google::protobuf::UnknownFieldSet *TagFallback;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  google::protobuf::UnknownFieldSet *v20;
  const char *v21;
  int *v22;
  uint64_t v23;
  int v24;
  operations_research::sat::LinearBooleanConstraint *v25;
  google::protobuf::internal *v26;
  const char *v27;
  uint64_t SizeFallback;
  google::protobuf::UnknownFieldSet *v29;
  uint64_t v30;
  uint64_t v31;
  int32x2_t v32;
  int v33;
  __int32 v34;
  BOOL v35;
  unsigned __int8 *v36;
  int v37;
  int32x2_t v38;
  operations_research::sat::LinearObjective *v39;
  const char *v40;
  google::protobuf::UnknownFieldSet *v41;
  int *v42;
  uint64_t v43;
  int v44;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v46;
  uint64_t v47;
  uint64_t v48;
  google::protobuf::UnknownFieldSet *v49;
  operations_research::sat::BooleanAssignment *v50;
  const char *v51;
  google::protobuf::UnknownFieldSet *v52;
  const char *v53;
  google::protobuf::Arena **v54;
  operations_research::sat::LinearObjective *v55;
  uint64_t v56;
  int32x2_t v57;
  int v58;
  __int32 v59;
  google::protobuf::UnknownFieldSet *v60;
  google::protobuf::Arena **v61;
  uint64_t v62;
  int32x2_t v63;
  int v64;
  int v65;
  int v66;
  char v67;
  operations_research::sat::LinearObjective *v68;
  std::string **v70;
  uint64_t *v71;

  v8 = 0;
  v9 = (unsigned int *)((char *)this + 48);
  v10 = (unsigned int *)((char *)this + 24);
  v70 = (std::string **)((char *)this + 72);
  v71 = (uint64_t *)((char *)this + 8);
  while (1)
  {
LABEL_4:
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *(_QWORD *)&a3[1]) == (google::protobuf::UnknownFieldSet *)a3[3].i32[1]
        || (a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)a2, a3[11].i32[1]), (v67 & 1) != 0))
      {
        TagFallback = a2;
        goto LABEL_108;
      }
    }
    TagFallback = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
    v14 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0)
      break;
    v17 = v14 + (*(unsigned __int8 *)TagFallback << 7);
    v14 = v17 - 128;
    if (*(char *)TagFallback < 0)
    {
      TagFallback = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::ReadTagFallback(a2, (const char *)(v17 - 128));
      if (!TagFallback)
        goto LABEL_108;
      v14 = v18;
      v15 = (v18 >> 3) - 1;
      if (v15 <= 7)
        goto LABEL_7;
    }
    else
    {
      TagFallback = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      v15 = (v14 >> 3) - 1;
      if (v15 <= 7)
        goto LABEL_7;
    }
LABEL_18:
    if (v14)
      v19 = (v14 & 7) == 4;
    else
      v19 = 1;
    if (v19)
    {
      a3[10].i32[0] = v14 - 1;
      goto LABEL_108;
    }
    if ((*v71 & 1) != 0)
      v20 = (google::protobuf::UnknownFieldSet *)((*v71 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v20 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v71);
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, v20, TagFallback, a3, a5);
    if (!a2)
      goto LABEL_107;
  }
  v15 = (v14 >> 3) - 1;
LABEL_7:
  switch(v15)
  {
    case 0u:
      if (v14 != 10)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 1u;
      v16 = *((_QWORD *)this + 1);
      v11 = (google::protobuf::Arena *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if ((v16 & 1) != 0)
      {
        v11 = *(google::protobuf::Arena **)v11;
        v12 = *v70;
        if (*v70 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_3;
      }
      else
      {
        v12 = *v70;
        if (*v70 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
LABEL_3:
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(v12, (std::string::value_type *)TagFallback, (uint64_t)a3);
          if (!a2)
            goto LABEL_107;
          goto LABEL_4;
        }
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstance(v70, v11, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(*v70, (std::string::value_type *)TagFallback, (uint64_t)a3);
      if (!a2)
        goto LABEL_107;
      goto LABEL_4;
    case 2u:
      if (v14 != 24)
        goto LABEL_18;
      v8 |= 8u;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 1);
      LODWORD(v21) = *(unsigned __int8 *)TagFallback;
      if ((v21 & 0x80) == 0)
        goto LABEL_30;
      v21 = (const char *)(v21 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64(TagFallback, v21);
        *((_DWORD *)this + 24) = v65;
        if (!a2)
          goto LABEL_107;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 2);
LABEL_30:
        *((_DWORD *)this + 24) = (_DWORD)v21;
      }
      goto LABEL_4;
    case 3u:
      if (v14 != 34)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback - 1);
      while (2)
      {
        v22 = (int *)*((_QWORD *)this + 5);
        if (!v22)
        {
          v24 = *((_DWORD *)this + 9);
LABEL_40:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v10, v24 + 1);
          v22 = (int *)*((_QWORD *)this + 5);
          v24 = *v22;
LABEL_41:
          *v22 = v24 + 1;
          v25 = (operations_research::sat::LinearBooleanConstraint *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanConstraint>(*((google::protobuf::Arena **)this + 3));
          v30 = *((_QWORD *)this + 5);
          v31 = *((int *)this + 8);
          *((_DWORD *)this + 8) = v31 + 1;
          *(_QWORD *)(v30 + 8 * v31 + 8) = v25;
          v26 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
          v27 = (const char *)*((unsigned __int8 *)a2 + 1);
          if (*((char *)a2 + 1) < 0)
            goto LABEL_36;
LABEL_42:
          v29 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
          goto LABEL_43;
        }
        v23 = *((int *)this + 8);
        v24 = *v22;
        if ((int)v23 >= *v22)
        {
          if (v24 != *((_DWORD *)this + 9))
            goto LABEL_41;
          goto LABEL_40;
        }
        *((_DWORD *)this + 8) = v23 + 1;
        v25 = *(operations_research::sat::LinearBooleanConstraint **)&v22[2 * v23 + 2];
        v26 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
        v27 = (const char *)*((unsigned __int8 *)a2 + 1);
        if ((*((char *)a2 + 1) & 0x80000000) == 0)
          goto LABEL_42;
LABEL_36:
        SizeFallback = google::protobuf::internal::ReadSizeFallback(v26, v27);
        if (!SizeFallback)
          break;
        v29 = (google::protobuf::UnknownFieldSet *)SizeFallback;
LABEL_43:
        v32 = a3[1];
        v33 = (_DWORD)v27 + (_DWORD)v29 - v32.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v32 + (v33 & (v33 >> 31)));
        v34 = a3[3].i32[1];
        a3[3].i32[1] = v33;
        v32.i32[0] = a3[11].i32[0];
        v35 = __OFSUB__(v32.i32[0]--, 1);
        a3[11].i32[0] = v32.i32[0];
        if (v32.i32[0] < 0 == v35)
        {
          v36 = operations_research::sat::LinearBooleanConstraint::_InternalParse(v25, v29, a3, a4, a5);
          if (v36)
          {
            ++a3[11].i32[0];
            if (!a3[10].i32[0])
            {
              a2 = (google::protobuf::UnknownFieldSet *)v36;
              v37 = a3[3].i32[1] + v34 - v33;
              a3[3].i32[1] = v37;
              v38 = (int32x2_t)(*(_QWORD *)&a3[1] + (v37 & (v37 >> 31)));
              *a3 = v38;
              if (*(_QWORD *)&v38 <= (unint64_t)v36 || *v36 != 34)
                goto LABEL_4;
              continue;
            }
          }
        }
        break;
      }
LABEL_107:
      TagFallback = 0;
LABEL_108:
      *((_DWORD *)this + 4) |= v8;
      return TagFallback;
    case 4u:
      if (v14 != 42)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 2u;
      v39 = (operations_research::sat::LinearObjective *)*((_QWORD *)this + 10);
      if (v39)
      {
        v40 = (const char *)*(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_52;
      }
      else
      {
        v54 = (google::protobuf::Arena **)(*v71 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v71 & 1) != 0)
        {
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>(*v54);
          v39 = v68;
          *((_QWORD *)this + 10) = v68;
          v40 = (const char *)*(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
          {
LABEL_52:
            v41 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 1);
            goto LABEL_84;
          }
        }
        else
        {
          google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>((google::protobuf::Arena *)v54);
          v39 = v55;
          *((_QWORD *)this + 10) = v55;
          v40 = (const char *)*(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_52;
        }
      }
      v56 = google::protobuf::internal::ReadSizeFallback(TagFallback, v40);
      if (!v56)
        goto LABEL_107;
      v41 = (google::protobuf::UnknownFieldSet *)v56;
LABEL_84:
      v57 = a3[1];
      v58 = (_DWORD)v40 + (_DWORD)v41 - v57.i32[0];
      *a3 = (int32x2_t)(*(_QWORD *)&v57 + (v58 & (v58 >> 31)));
      v59 = a3[3].i32[1];
      a3[3].i32[1] = v58;
      v57.i32[0] = a3[11].i32[0];
      v35 = __OFSUB__(v57.i32[0]--, 1);
      a3[11].i32[0] = v57.i32[0];
      if (v57.i32[0] < 0 != v35)
        goto LABEL_107;
      v60 = operations_research::sat::LinearObjective::_InternalParse(v39, v41, a3, a4, a5);
      if (!v60)
        goto LABEL_107;
      goto LABEL_93;
    case 5u:
      if (v14 != 50)
        goto LABEL_18;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback - 1);
      break;
    case 6u:
      if (v14 != 58)
        goto LABEL_18;
      *((_DWORD *)this + 4) |= 4u;
      v50 = (operations_research::sat::BooleanAssignment *)*((_QWORD *)this + 11);
      if (v50)
      {
        v51 = (const char *)*(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_74;
      }
      else
      {
        v61 = (google::protobuf::Arena **)(*v71 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v71 & 1) != 0)
        {
          v50 = (operations_research::sat::BooleanAssignment *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>(*v61);
          *((_QWORD *)this + 11) = v50;
          v51 = (const char *)*(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
          {
LABEL_74:
            v52 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 1);
            goto LABEL_91;
          }
        }
        else
        {
          v50 = (operations_research::sat::BooleanAssignment *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>((google::protobuf::Arena *)v61);
          *((_QWORD *)this + 11) = v50;
          v51 = (const char *)*(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_74;
        }
      }
      v62 = google::protobuf::internal::ReadSizeFallback(TagFallback, v51);
      if (!v62)
        goto LABEL_107;
      v52 = (google::protobuf::UnknownFieldSet *)v62;
LABEL_91:
      v63 = a3[1];
      v58 = (_DWORD)v51 + (_DWORD)v52 - v63.i32[0];
      *a3 = (int32x2_t)(*(_QWORD *)&v63 + (v58 & (v58 >> 31)));
      v59 = a3[3].i32[1];
      a3[3].i32[1] = v58;
      v63.i32[0] = a3[11].i32[0];
      v35 = __OFSUB__(v63.i32[0]--, 1);
      a3[11].i32[0] = v63.i32[0];
      if (v63.i32[0] < 0 != v35)
        goto LABEL_107;
      v60 = operations_research::sat::BooleanAssignment::_InternalParse(v50, v52, a3, a4, a5);
      if (!v60)
        goto LABEL_107;
LABEL_93:
      ++a3[11].i32[0];
      if (a3[10].i32[0])
        goto LABEL_107;
      a2 = v60;
      v64 = a3[3].i32[1] + v59 - v58;
      a3[3].i32[1] = v64;
      *a3 = (int32x2_t)(*(_QWORD *)&a3[1] + (v64 & (v64 >> 31)));
      goto LABEL_4;
    case 7u:
      if (v14 != 64)
        goto LABEL_18;
      v8 |= 0x10u;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 1);
      LODWORD(v53) = *(unsigned __int8 *)TagFallback;
      if ((v53 & 0x80) == 0)
        goto LABEL_79;
      v53 = (const char *)(v53 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64(TagFallback, v53);
        *((_DWORD *)this + 25) = v66;
        if (!a2)
          goto LABEL_107;
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)((char *)TagFallback + 2);
LABEL_79:
        *((_DWORD *)this + 25) = (_DWORD)v53;
      }
      goto LABEL_4;
    default:
      goto LABEL_18;
  }
  while (1)
  {
    v42 = (int *)*((_QWORD *)this + 8);
    if (!v42)
      break;
    v43 = *((int *)this + 14);
    v44 = *v42;
    if ((int)v43 >= *v42)
    {
      if (v44 == *((_DWORD *)this + 15))
      {
LABEL_60:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v44 + 1);
        v42 = (int *)*((_QWORD *)this + 8);
        v44 = *v42;
      }
      *v42 = v44 + 1;
      v46 = *(google::protobuf::internal::ArenaImpl **)v9;
      if (*(_QWORD *)v9)
      {
        if (*((_QWORD *)v46 + 14))
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v46, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        AlignedAndAddCleanup = (std::string *)operator new();
      }
      AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
      AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
      v47 = *((_QWORD *)this + 8);
      v48 = *((int *)this + 14);
      *((_DWORD *)this + 14) = v48 + 1;
      *(_QWORD *)(v47 + 8 * v48 + 8) = AlignedAndAddCleanup;
      goto LABEL_67;
    }
    *((_DWORD *)this + 14) = v43 + 1;
    AlignedAndAddCleanup = *(std::string **)&v42[2 * v43 + 2];
LABEL_67:
    v49 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, (std::string::value_type *)a2 + 1, (uint64_t)a3);
    if (!v49)
      goto LABEL_107;
    a2 = v49;
    if (*(_QWORD *)a3 <= (unint64_t)v49 || *(_BYTE *)v49 != 50)
      goto LABEL_4;
  }
  v44 = *((_DWORD *)this + 15);
  goto LABEL_60;
}

const google::protobuf::UnknownFieldSet *operations_research::sat::LinearBooleanProblem::_InternalSerialize(operations_research::sat::LinearBooleanProblem *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  google::protobuf::UnknownFieldSet *v9;
  operations_research::sat::LinearBooleanConstraint *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int64_t v16;
  unsigned __int8 *v17;
  const void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  operations_research::sat::LinearObjective *v23;
  unsigned int v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v15 = *((_QWORD *)this + 9);
    if (*(char *)(v15 + 23) < 0)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16 > 127)
        goto LABEL_27;
    }
    else
    {
      v16 = *(unsigned __int8 *)(v15 + 23);
    }
    if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v16)
    {
      *a2 = 10;
      v17 = (unsigned __int8 *)(a2 + 2);
      a2[1] = v16;
      if (*(char *)(v15 + 23) >= 0)
        v18 = (const void *)v15;
      else
        v18 = *(const void **)v15;
      memcpy(v4 + 2, v18, v16);
      v4 = (char *)&v17[v16];
      if ((v6 & 8) != 0)
        goto LABEL_23;
LABEL_3:
      v7 = *((_DWORD *)this + 8);
      if (!v7)
        goto LABEL_36;
      goto LABEL_4;
    }
LABEL_27:
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 1, v15, a2);
    if ((v6 & 8) != 0)
      goto LABEL_23;
    goto LABEL_3;
  }
  if ((v6 & 8) == 0)
    goto LABEL_3;
LABEL_23:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v19 = *((int *)this + 24);
    *v4 = 24;
    if (v19 <= 0x7F)
    {
LABEL_25:
      v4[1] = v19;
      v4 += 2;
      v7 = *((_DWORD *)this + 8);
      if (!v7)
        goto LABEL_36;
      goto LABEL_4;
    }
  }
  else
  {
    v19 = *((int *)this + 24);
    *v4 = 24;
    if (v19 <= 0x7F)
      goto LABEL_25;
  }
  v4[1] = v19 | 0x80;
  v20 = v19 >> 7;
  if (v19 >> 14)
  {
    v4 += 3;
    do
    {
      *(v4 - 1) = v20 | 0x80;
      v21 = v20 >> 7;
      ++v4;
      v22 = v20 >> 14;
      v20 >>= 7;
    }
    while (v22);
    *(v4 - 1) = v21;
    v7 = *((_DWORD *)this + 8);
    if (!v7)
      goto LABEL_36;
  }
  else
  {
    v4[2] = v20;
    v4 += 3;
    v7 = *((_DWORD *)this + 8);
    if (!v7)
      goto LABEL_36;
  }
LABEL_4:
  for (i = 0; i != v7; ++i)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v10 = *(operations_research::sat::LinearBooleanConstraint **)(*((_QWORD *)this + 5) + 8 * i + 8);
    *v4 = 34;
    v11 = *((_DWORD *)v10 + 5);
    if (v11 <= 0x7F)
    {
      v4[1] = v11;
      v9 = (google::protobuf::UnknownFieldSet *)(v4 + 2);
    }
    else
    {
      v4[1] = v11 | 0x80;
      v12 = v11 >> 7;
      if (v11 >> 14)
      {
        v9 = (google::protobuf::UnknownFieldSet *)(v4 + 3);
        do
        {
          *((_BYTE *)v9 - 1) = v12 | 0x80;
          v13 = v12 >> 7;
          v9 = (google::protobuf::UnknownFieldSet *)((char *)v9 + 1);
          v14 = v12 >> 14;
          v12 >>= 7;
        }
        while (v14);
        *((_BYTE *)v9 - 1) = v13;
      }
      else
      {
        v4[2] = v12;
        v9 = (google::protobuf::UnknownFieldSet *)(v4 + 3);
      }
    }
    v4 = (char *)operations_research::sat::LinearBooleanConstraint::_InternalSerialize(v10, v9, a3);
  }
LABEL_36:
  if ((v6 & 2) == 0)
    goto LABEL_47;
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v23 = (operations_research::sat::LinearObjective *)*((_QWORD *)this + 10);
    *v4 = 42;
    v24 = *((_DWORD *)v23 + 5);
    if (v24 <= 0x7F)
      goto LABEL_39;
LABEL_41:
    v4[1] = v24 | 0x80;
    v26 = v24 >> 7;
    if (v24 >> 14)
    {
      v25 = v4 + 3;
      do
      {
        *(v25 - 1) = v26 | 0x80;
        v27 = v26 >> 7;
        ++v25;
        v28 = v26 >> 14;
        v26 >>= 7;
      }
      while (v28);
      *(v25 - 1) = v27;
    }
    else
    {
      v4[2] = v26;
      v25 = v4 + 3;
    }
    goto LABEL_46;
  }
  v23 = (operations_research::sat::LinearObjective *)*((_QWORD *)this + 10);
  *v4 = 42;
  v24 = *((_DWORD *)v23 + 5);
  if (v24 > 0x7F)
    goto LABEL_41;
LABEL_39:
  v4[1] = v24;
  v25 = v4 + 2;
LABEL_46:
  v4 = (char *)operations_research::sat::LinearObjective::_InternalSerialize(v23, v25, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
LABEL_47:
  v29 = *((unsigned int *)this + 14);
  if ((int)v29 >= 1)
  {
    v30 = 0;
    v31 = 8 * v29;
    while (1)
    {
      v32 = *(unsigned __int8 **)(*((_QWORD *)this + 8) + v30 + 8);
      if (((char)v32[23] & 0x80000000) == 0)
        break;
      v33 = *((_QWORD *)v32 + 1);
      if (v33 > 127)
      {
LABEL_57:
        v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 6, (uint64_t)v32, v4);
        v30 += 8;
        if (v31 == v30)
          goto LABEL_58;
      }
      else
      {
LABEL_52:
        if (*(_QWORD *)a3 - (_QWORD)v4 + 14 < v33)
          goto LABEL_57;
        *v4 = 50;
        v4[1] = v33;
        if ((char)v32[23] < 0)
          v32 = *(unsigned __int8 **)v32;
        v34 = v4 + 2;
        memcpy(v4 + 2, v32, v33);
        v4 = &v34[v33];
        v30 += 8;
        if (v31 == v30)
          goto LABEL_58;
      }
    }
    v33 = v32[23];
    goto LABEL_52;
  }
LABEL_58:
  if ((v6 & 4) == 0)
  {
LABEL_83:
    if ((v6 & 0x10) == 0)
      goto LABEL_95;
LABEL_84:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
    {
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v47 = *((int *)this + 25);
      *v4 = 64;
      if (v47 <= 0x7F)
        goto LABEL_86;
    }
    else
    {
      v47 = *((int *)this + 25);
      *v4 = 64;
      if (v47 <= 0x7F)
      {
LABEL_86:
        v4[1] = v47;
        v4 += 2;
        goto LABEL_95;
      }
    }
    v4[1] = v47 | 0x80;
    v48 = v47 >> 7;
    if (v47 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v48 | 0x80;
        v49 = v48 >> 7;
        ++v4;
        v50 = v48 >> 14;
        v48 >>= 7;
      }
      while (v50);
      *(v4 - 1) = v49;
    }
    else
    {
      v4[2] = v48;
      v4 += 3;
    }
    goto LABEL_95;
  }
  if (*(_QWORD *)a3 <= (unint64_t)v4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v35 = *((_QWORD *)this + 11);
    *v4 = 58;
    v36 = *(_DWORD *)(v35 + 32);
    if (v36 <= 0x7F)
    {
LABEL_61:
      v4[1] = v36;
      v4 += 2;
      v37 = *(unsigned int *)(v35 + 16);
      if ((int)v37 < 1)
        goto LABEL_82;
      goto LABEL_70;
    }
  }
  else
  {
    v35 = *((_QWORD *)this + 11);
    *v4 = 58;
    v36 = *(_DWORD *)(v35 + 32);
    if (v36 <= 0x7F)
      goto LABEL_61;
  }
  v4[1] = v36 | 0x80;
  v38 = v36 >> 7;
  if (!(v36 >> 14))
  {
    v4[2] = v38;
    v4 += 3;
    v37 = *(unsigned int *)(v35 + 16);
    if ((int)v37 < 1)
      goto LABEL_82;
LABEL_70:
    v41 = 0;
    while (1)
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
      {
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
        v42 = *(int *)(*(_QWORD *)(v35 + 24) + 4 * v41);
        *v4 = 8;
        if (v42 > 0x7F)
        {
LABEL_75:
          v4[1] = v42 | 0x80;
          v43 = v42 >> 7;
          if (v42 >> 14)
          {
            v4 += 3;
            do
            {
              *(v4 - 1) = v43 | 0x80;
              v44 = v43 >> 7;
              ++v4;
              v45 = v43 >> 14;
              v43 >>= 7;
            }
            while (v45);
            *(v4 - 1) = v44;
          }
          else
          {
            v4[2] = v43;
            v4 += 3;
          }
          goto LABEL_72;
        }
      }
      else
      {
        v42 = *(int *)(*(_QWORD *)(v35 + 24) + 4 * v41);
        *v4 = 8;
        if (v42 > 0x7F)
          goto LABEL_75;
      }
      v4[1] = v42;
      v4 += 2;
LABEL_72:
      if (++v41 == v37)
        goto LABEL_82;
    }
  }
  v4 += 3;
  do
  {
    *(v4 - 1) = v38 | 0x80;
    v39 = v38 >> 7;
    ++v4;
    v40 = v38 >> 14;
    v38 >>= 7;
  }
  while (v40);
  *(v4 - 1) = v39;
  v37 = *(unsigned int *)(v35 + 16);
  if ((int)v37 >= 1)
    goto LABEL_70;
LABEL_82:
  v46 = *(_QWORD *)(v35 + 8);
  if ((v46 & 1) == 0)
    goto LABEL_83;
  v4 = (char *)google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v46 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
  if ((v6 & 0x10) != 0)
    goto LABEL_84;
LABEL_95:
  v51 = *((_QWORD *)this + 1);
  if ((v51 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v51 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
  else
    return (const google::protobuf::UnknownFieldSet *)v4;
}

char *operations_research::sat::LinearBooleanProblem::ByteSizeLong(operations_research::sat::LinearBooleanProblem *this)
{
  uint64_t v2;
  uint64_t v3;
  operations_research::sat::LinearBooleanConstraint **v4;
  uint64_t v5;
  operations_research::sat::LinearBooleanConstraint *v6;
  char *v7;
  const google::protobuf::UnknownFieldSet *v8;
  const google::protobuf::UnknownFieldSet *v9;
  uint64_t v10;
  const google::protobuf::UnknownFieldSet *v11;
  uint64_t v12;
  uint64_t v13;
  const google::protobuf::UnknownFieldSet *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  const google::protobuf::UnknownFieldSet *v38;
  int *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (operations_research::sat::LinearBooleanConstraint **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = operations_research::sat::LinearBooleanConstraint::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
    v8 = (const google::protobuf::UnknownFieldSet *)*((unsigned int *)this + 14);
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v8 + v2);
    if ((int)v8 < 1)
      goto LABEL_23;
  }
  else
  {
    v8 = (const google::protobuf::UnknownFieldSet *)*((unsigned int *)this + 14);
    v9 = v8;
    if ((int)v8 < 1)
      goto LABEL_23;
  }
  v10 = *((_QWORD *)this + 8);
  if ((_DWORD)v8 == 1)
  {
    v11 = 0;
LABEL_19:
    v19 = (uint64_t *)(v10 + 8 * (_QWORD)v11 + 8);
    v20 = (char *)(v8 - v11);
    do
    {
      v21 = *v19++;
      v22 = *(unsigned __int8 *)(v21 + 23);
      v23 = *(_QWORD *)(v21 + 8);
      if ((v22 & 0x80u) == 0)
        v23 = v22;
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6));
      --v20;
    }
    while (v20);
    goto LABEL_23;
  }
  v12 = 0;
  v11 = (const google::protobuf::UnknownFieldSet *)(v8 & 0xFFFFFFFE);
  v13 = v10 + 16;
  v14 = v11;
  do
  {
    v15 = *(_QWORD *)(v13 - 8);
    v16 = *(unsigned __int8 *)(v15 + 23);
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v16 & 0x80u) == 0)
      v17 = v16;
    if (*(char *)(*(_QWORD *)v13 + 23) >= 0)
      v18 = *(unsigned __int8 *)(*(_QWORD *)v13 + 23);
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6));
    v12 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6);
    v13 += 16;
    v14 = (const google::protobuf::UnknownFieldSet *)((char *)v14 - 2);
  }
  while (v14);
  v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v12);
  if (v11 != v8)
    goto LABEL_19;
LABEL_23:
  v24 = *((_DWORD *)this + 4);
  if ((v24 & 0x1F) == 0)
    goto LABEL_33;
  if ((v24 & 1) != 0)
  {
    v29 = *((_QWORD *)this + 9);
    v30 = *(unsigned __int8 *)(v29 + 23);
    v31 = *(_QWORD *)(v29 + 8);
    if ((v30 & 0x80u) == 0)
      v31 = v30;
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1);
    if ((v24 & 2) == 0)
    {
LABEL_26:
      if ((v24 & 4) == 0)
        goto LABEL_27;
      goto LABEL_48;
    }
  }
  else if ((v24 & 2) == 0)
  {
    goto LABEL_26;
  }
  v32 = (int *)*((_QWORD *)this + 10);
  v33 = google::protobuf::internal::WireFormatLite::Int32Size(v32 + 6);
  v34 = v32[6];
  v35 = google::protobuf::internal::WireFormatLite::Int64Size(v32 + 10);
  v36 = v32[4];
  v37 = v33 + v35 + v34 + v32[10] + 9;
  if ((v36 & 1) == 0)
    v37 = v33 + v35 + v34 + v32[10];
  if ((v36 & 2) != 0)
    v37 += 9;
  if ((v36 & 3) != 0)
    v38 = (const google::protobuf::UnknownFieldSet *)v37;
  else
    v38 = (const google::protobuf::UnknownFieldSet *)(v33 + v35 + v34 + v32[10]);
  if ((v32[2] & 1) != 0)
    v38 = (const google::protobuf::UnknownFieldSet *)google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v32 + 2), v38, v32 + 5);
  else
    v32[5] = (int)v38;
  v9 = (const google::protobuf::UnknownFieldSet *)((char *)v38
                                                 + ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6)
                                                 + (_QWORD)v9
                                                 + 1);
  if ((v24 & 4) == 0)
  {
LABEL_27:
    if ((v24 & 8) == 0)
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_48:
  v39 = (int *)*((_QWORD *)this + 11);
  v40 = (char *)(google::protobuf::internal::WireFormatLite::Int32Size(v39 + 4) + v39[4]);
  if ((v39[2] & 1) != 0)
    v40 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v39 + 2), (const google::protobuf::UnknownFieldSet *)v40, v39 + 8);
  else
    v39[8] = (int)v40;
  v9 = (const google::protobuf::UnknownFieldSet *)&v40[((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6)
                                                     + 1
                                                     + (_QWORD)v9];
  if ((v24 & 8) == 0)
  {
LABEL_28:
    if ((v24 & 0x10) == 0)
      goto LABEL_33;
    goto LABEL_29;
  }
LABEL_51:
  v41 = *((_DWORD *)this + 24);
  v42 = ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v41 >= 0)
    v43 = v42;
  else
    v43 = 11;
  v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v43);
  if ((v24 & 0x10) != 0)
  {
LABEL_29:
    v25 = *((_DWORD *)this + 25);
    v26 = ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v25 >= 0)
      v27 = v26;
    else
      v27 = 11;
    v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v27);
  }
LABEL_33:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::LinearBooleanProblem *)((char *)this + 8), v9, (_DWORD *)this + 5);
  *((_DWORD *)this + 5) = (_DWORD)v9;
  return (char *)v9;
}

void operations_research::sat::LinearBooleanProblem::MergeFrom(std::string *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::LinearBooleanProblem *__hidden))a2 == &off_24F980B58)
    operations_research::sat::LinearBooleanProblem::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, (const google::protobuf::Message *)this, a3);
}

void operations_research::sat::LinearBooleanProblem::MergeFrom(std::string *this, const operations_research::sat::LinearBooleanProblem *a2)
{
  std::string::size_type *p_size;
  uint64_t v5;
  const google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  operations_research::sat::LinearBooleanConstraint **v13;
  const operations_research::sat::LinearBooleanConstraint **v14;
  const operations_research::sat::LinearBooleanConstraint *v15;
  const operations_research::sat::LinearBooleanConstraint *v16;
  operations_research::sat::LinearBooleanConstraint *v17;
  google::protobuf::Arena *data;
  int v19;
  uint64_t v20;
  operations_research::sat::LinearBooleanConstraint **v21;
  const operations_research::sat::LinearBooleanConstraint **v22;
  const operations_research::sat::LinearBooleanConstraint *v23;
  operations_research::sat::LinearBooleanConstraint *v24;
  int v25;
  int *v26;
  signed int v27;
  const std::string **v28;
  unsigned int *v29;
  int v30;
  int *v31;
  int v32;
  std::string *v33;
  std::string **v34;
  std::string::size_type v35;
  google::protobuf::Arena *v36;
  std::string *v37;
  operations_research::sat::LinearObjective *size;
  google::protobuf::Arena *v39;
  const operations_research::sat::LinearObjective *v40;
  uint64_t v41;
  google::protobuf::Arena *v42;
  uint64_t *v43;
  uint64_t v44;
  const google::protobuf::UnknownFieldSet *v45;
  uint64_t v46;
  google::protobuf::UnknownFieldSet *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type *v52;
  unsigned int *v53;
  uint64_t v54;

  p_size = &this->__r_.__value_.__l.__size_;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((*p_size & 1) != 0)
      v7 = (google::protobuf::UnknownFieldSet *)((*p_size & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v7 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)&this->__r_.__value_.__l.__size_);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v7, v6);
  }
  v8 = *((_DWORD *)a2 + 8);
  if (v8)
  {
    v52 = p_size;
    v54 = *((_QWORD *)a2 + 5);
    v53 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&this[1], v8);
    v9 = *(_DWORD *)this[1].__r_.__value_.__r.__words[2];
    v10 = this[1].__r_.__value_.__r.__words[1];
    v11 = v9 - v10;
    if (v9 - v10 >= v8)
      v12 = v8;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (operations_research::sat::LinearBooleanConstraint **)v53;
      v14 = (const operations_research::sat::LinearBooleanConstraint **)(v54 + 8);
      do
      {
        v16 = *v14++;
        v15 = v16;
        v17 = *v13++;
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearBooleanConstraint>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v8)
    {
      data = (google::protobuf::Arena *)this[1].__r_.__value_.__l.__data_;
      v19 = v10 + v8 - v9;
      v20 = 2 * v11;
      v21 = (operations_research::sat::LinearBooleanConstraint **)&v53[v20];
      v22 = (const operations_research::sat::LinearBooleanConstraint **)(v20 * 4 + v54 + 8);
      do
      {
        v23 = *v22++;
        v24 = (operations_research::sat::LinearBooleanConstraint *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanConstraint>(data);
        google::protobuf::internal::GenericTypeHandler<operations_research::sat::LinearBooleanConstraint>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = LODWORD(this[1].__r_.__value_.__r.__words[1]) + v8;
    LODWORD(this[1].__r_.__value_.__r.__words[1]) = v25;
    v26 = (int *)this[1].__r_.__value_.__r.__words[2];
    p_size = v52;
    if (*v26 < v25)
      *v26 = v25;
  }
  v27 = *((_DWORD *)a2 + 14);
  if (v27)
  {
    v28 = (const std::string **)(*((_QWORD *)a2 + 8) + 8);
    v29 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)&this[2], *((_DWORD *)a2 + 14));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 2, (std::string **)v29, v28, v27, *(_DWORD *)this[2].__r_.__value_.__r.__words[2] - LODWORD(this[2].__r_.__value_.__r.__words[1]));
    v30 = LODWORD(this[2].__r_.__value_.__r.__words[1]) + v27;
    LODWORD(this[2].__r_.__value_.__r.__words[1]) = v30;
    v31 = (int *)this[2].__r_.__value_.__r.__words[2];
    if (*v31 < v30)
      *v31 = v30;
  }
  v32 = *((_DWORD *)a2 + 4);
  if ((v32 & 0x1F) != 0)
  {
    if ((v32 & 1) == 0)
    {
      if ((v32 & 2) == 0)
        goto LABEL_23;
LABEL_32:
      LODWORD(this->__r_.__value_.__r.__words[2]) |= 2u;
      size = (operations_research::sat::LinearObjective *)this[3].__r_.__value_.__l.__size_;
      if (!size)
      {
        v39 = (google::protobuf::Arena *)(*p_size & 0xFFFFFFFFFFFFFFFELL);
        if ((*p_size & 1) != 0)
          v39 = *(google::protobuf::Arena **)v39;
        google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>(v39);
        this[3].__r_.__value_.__l.__size_ = (std::string::size_type)size;
      }
      if (*((_QWORD *)a2 + 10))
        v40 = (const operations_research::sat::LinearObjective *)*((_QWORD *)a2 + 10);
      else
        v40 = (const operations_research::sat::LinearObjective *)&operations_research::sat::_LinearObjective_default_instance_;
      operations_research::sat::LinearObjective::MergeFrom(size, v40);
      if ((v32 & 4) == 0)
        goto LABEL_53;
      goto LABEL_40;
    }
    v33 = (std::string *)*((_QWORD *)a2 + 9);
    LODWORD(this->__r_.__value_.__r.__words[2]) |= 1u;
    v34 = (std::string **)&this[3];
    v35 = this->__r_.__value_.__l.__size_;
    v36 = (google::protobuf::Arena *)(v35 & 0xFFFFFFFFFFFFFFFELL);
    if ((v35 & 1) != 0)
    {
      v36 = *(google::protobuf::Arena **)v36;
      v37 = *v34;
      if (*v34 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_27:
        std::string::operator=(v37, v33);
        if ((v32 & 2) != 0)
          goto LABEL_32;
LABEL_23:
        if ((v32 & 4) == 0)
        {
LABEL_53:
          if ((v32 & 8) != 0)
            LODWORD(this[4].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 24);
          if ((v32 & 0x10) != 0)
            HIDWORD(this[4].__r_.__value_.__r.__words[0]) = *((_DWORD *)a2 + 25);
          LODWORD(this->__r_.__value_.__r.__words[2]) |= v32;
          return;
        }
LABEL_40:
        LODWORD(this->__r_.__value_.__r.__words[2]) |= 4u;
        v41 = this[3].__r_.__value_.__r.__words[2];
        if (!v41)
        {
          v42 = (google::protobuf::Arena *)(*p_size & 0xFFFFFFFFFFFFFFFELL);
          if ((*p_size & 1) != 0)
            v42 = *(google::protobuf::Arena **)v42;
          v41 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>(v42);
          this[3].__r_.__value_.__r.__words[2] = v41;
        }
        if (*((_QWORD *)a2 + 11))
          v43 = (uint64_t *)*((_QWORD *)a2 + 11);
        else
          v43 = &operations_research::sat::_BooleanAssignment_default_instance_;
        v44 = v43[1];
        if ((v44 & 1) != 0)
        {
          v45 = (const google::protobuf::UnknownFieldSet *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v46 = *(_QWORD *)(v41 + 8);
          if ((v46 & 1) != 0)
            v47 = (google::protobuf::UnknownFieldSet *)((v46 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v47 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)(v41 + 8));
          google::protobuf::UnknownFieldSet::InternalMergeFrom(v47, v45);
        }
        v48 = *((_DWORD *)v43 + 4);
        if (v48)
        {
          v50 = *(int *)(v41 + 16);
          v49 = v41 + 16;
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v49, v50 + v48);
          v51 = *(_QWORD *)(v49 + 8);
          *(_DWORD *)v49 += *((_DWORD *)v43 + 4);
          memcpy((void *)(v51 + 4 * v50), (const void *)v43[3], 4 * *((int *)v43 + 4));
        }
        goto LABEL_53;
      }
    }
    else
    {
      v37 = *v34;
      if (*v34 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_27;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v34, v36, (__int128 *)v33);
    if ((v32 & 2) != 0)
      goto LABEL_32;
    goto LABEL_23;
  }
}

void operations_research::sat::LinearBooleanProblem::CopyFrom(operations_research::sat::LinearBooleanProblem *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    operations_research::sat::LinearBooleanProblem::Clear(this);
    if (*(void (***)(operations_research::sat::LinearBooleanProblem *__hidden))a2 == &off_24F980B58)
      operations_research::sat::LinearBooleanProblem::MergeFrom((std::string *)this, a2);
    else
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v4);
  }
}

uint64_t operations_research::sat::LinearBooleanProblem::IsInitialized(operations_research::sat::LinearBooleanProblem *this)
{
  return 1;
}

uint64_t operations_research::sat::LinearBooleanProblem::GetMetadata(operations_research::sat::LinearBooleanProblem *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto, 0);
  return off_25407A1C8[6];
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanConstraint>(google::protobuf::Arena *this)
{
  unint64_t AlignedNoHook;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x50uLL);
    *(_QWORD *)AlignedNoHook = &off_24F980948;
    *(_QWORD *)(AlignedNoHook + 8) = this;
    *(_QWORD *)(AlignedNoHook + 16) = 0;
    *(_QWORD *)(AlignedNoHook + 24) = 0;
    *(_DWORD *)(AlignedNoHook + 40) = 0;
    *(_QWORD *)(AlignedNoHook + 32) = this;
    *(_DWORD *)(AlignedNoHook + 44) = 0;
    *(_QWORD *)(AlignedNoHook + 48) = this;
    if (atomic_load(scc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto))
      goto LABEL_7;
  }
  else
  {
    AlignedNoHook = operator new();
    *(_QWORD *)AlignedNoHook = &off_24F980948;
    *(_QWORD *)(AlignedNoHook + 8) = 0;
    *(_OWORD *)(AlignedNoHook + 16) = 0u;
    *(_OWORD *)(AlignedNoHook + 32) = 0u;
    *(_QWORD *)(AlignedNoHook + 48) = 0;
    if (atomic_load(scc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_LinearBooleanConstraint_ortools_2fsat_2fBOOLean_5fproblem_2eproto);
  }
  *(_QWORD *)(AlignedNoHook + 64) = 0;
  *(_QWORD *)(AlignedNoHook + 72) = 0;
  *(_QWORD *)(AlignedNoHook + 56) = &google::protobuf::internal::fixed_address_empty_string;
  return AlignedNoHook;
}

void sub_22DA3D854(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 40);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 24);
  MEMORY[0x22E31DF78](v1, 0x10A1C403C840C82);
  _Unwind_Resume(a1);
}

void sub_22DA3D88C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v2);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 24);
  _Unwind_Resume(a1);
}

double google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>(google::protobuf::Arena *this)
{
  _QWORD *AlignedNoHook;
  double result;
  uint64_t v4;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook(this, 0x48uLL);
    *AlignedNoHook = &off_24F9809F8;
    AlignedNoHook[1] = this;
    AlignedNoHook[2] = 0;
    AlignedNoHook[3] = 0;
    AlignedNoHook[4] = this;
    AlignedNoHook[5] = 0;
    AlignedNoHook[6] = this;
    AlignedNoHook[7] = 0;
    AlignedNoHook[8] = 0x3FF0000000000000;
  }
  else
  {
    v4 = operator new();
    *(_QWORD *)v4 = &off_24F9809F8;
    *(_QWORD *)(v4 + 8) = 0;
    result = 0.0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_QWORD *)(v4 + 64) = 0x3FF0000000000000;
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>(google::protobuf::Arena *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::Arena::AllocateAlignedNoHook(this, 0x28uLL);
    *(_QWORD *)result = off_24F980AA8;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = this;
    *(_DWORD *)(result + 32) = 0;
  }
  else
  {
    result = operator new();
    *(_QWORD *)result = off_24F980AA8;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
  }
  return result;
}

operations_research::sat::LinearBooleanProblem *google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanProblem>(google::protobuf::Arena *this)
{
  operations_research::sat::LinearBooleanProblem *AlignedNoHook;
  operations_research::sat::LinearBooleanProblem *v4;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedNoHook = (operations_research::sat::LinearBooleanProblem *)google::protobuf::Arena::AllocateAlignedNoHook(this, 0x68uLL);
    return operations_research::sat::LinearBooleanProblem::LinearBooleanProblem(AlignedNoHook, this);
  }
  else
  {
    v4 = (operations_research::sat::LinearBooleanProblem *)operator new();
    operations_research::sat::LinearBooleanProblem::LinearBooleanProblem(v4, 0);
    return v4;
  }
}

void sub_22DA3DA7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C40A0AE8878);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::LinearBooleanConstraint::New(operations_research::sat::LinearBooleanConstraint *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanConstraint>(0);
}

unint64_t operations_research::sat::LinearBooleanConstraint::New(operations_research::sat::LinearBooleanConstraint *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanConstraint>(a2);
}

uint64_t operations_research::sat::LinearBooleanConstraint::GetCachedSize(operations_research::sat::LinearBooleanConstraint *this)
{
  return *((unsigned int *)this + 5);
}

double operations_research::sat::LinearObjective::New(operations_research::sat::LinearObjective *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>(0);
}

double operations_research::sat::LinearObjective::New(operations_research::sat::LinearObjective *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearObjective>(a2);
}

uint64_t operations_research::sat::LinearObjective::GetCachedSize(operations_research::sat::LinearObjective *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t operations_research::sat::BooleanAssignment::New(operations_research::sat::BooleanAssignment *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>(0);
}

uint64_t operations_research::sat::BooleanAssignment::New(operations_research::sat::BooleanAssignment *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BooleanAssignment>(a2);
}

uint64_t operations_research::sat::BooleanAssignment::GetCachedSize(operations_research::sat::BooleanAssignment *this)
{
  return *((unsigned int *)this + 8);
}

operations_research::sat::LinearBooleanProblem *operations_research::sat::LinearBooleanProblem::New(operations_research::sat::LinearBooleanProblem *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanProblem>(0);
}

operations_research::sat::LinearBooleanProblem *operations_research::sat::LinearBooleanProblem::New(operations_research::sat::LinearBooleanProblem *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearBooleanProblem>(a2);
}

uint64_t operations_research::sat::LinearBooleanProblem::GetCachedSize(operations_research::sat::LinearBooleanProblem *this)
{
  return *((unsigned int *)this + 5);
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  std::string *v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  google::protobuf::internal::ArenaImpl *v17;
  uint64_t v18;
  const std::string **v19;
  std::string **v20;
  const std::string *v21;
  std::string *AlignedAndAddCleanup;
  uint64_t v23;
  const std::string **v24;
  std::string **v25;
  uint64_t v26;
  const std::string *v27;
  std::string *v28;

  v9 = result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = (google::protobuf::internal::ArenaImpl *)v9->__r_.__value_.__r.__words[0];
    if (v17)
    {
      v18 = a5;
      v19 = &a3[v18];
      v20 = &a2[v18];
      do
      {
        v21 = *v19;
        if (*((_QWORD *)v17 + 14))
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v17, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        result = std::string::operator=(AlignedAndAddCleanup, v21);
        *v20++ = AlignedAndAddCleanup;
        ++v19;
        --v16;
      }
      while (v16);
    }
    else
    {
      v23 = a4;
      v24 = &a3[a5];
      v25 = &a2[a5];
      v26 = v23 - a5;
      do
      {
        v27 = *v24++;
        v28 = (std::string *)operator new();
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        result = std::string::operator=(v28, v27);
        *v25++ = v28;
        --v26;
      }
      while (v26);
    }
  }
  return result;
}

void _GLOBAL__sub_I_BOOLean_problem_pb_cc()
{
  google::protobuf::internal::AddDescriptors((std::string::size_type)&descriptor_table_ortools_2fsat_2fBOOLean_5fproblem_2eproto);
}

uint64_t operations_research::sat::CircuitPropagator::CircuitPropagator(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, char a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  std::vector<int>::size_type v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  operations_research::sat::SatSolver **v31;
  operations_research::sat::SatSolver **v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t i;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  int *v77;
  unint64_t v78;
  char *v79;
  int v80;
  _QWORD *v81;
  char *v82;
  void *v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  uint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _OWORD *v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  _QWORD *v116;
  _QWORD *v117;
  int v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t j;
  uint64_t v123;
  _QWORD *v125;
  google::LogMessage *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  void **v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t *v135;
  char **v136;
  std::vector<int> *v137;
  std::vector<int> *v138;
  _QWORD *v140;
  std::vector<int> *v141;
  std::vector<int> *v142;
  uint64_t v143;
  uint64_t v144;
  std::vector<int>::value_type v145[4];
  uint64_t v146;
  uint64_t *v147;
  std::vector<int>::value_type __x[2];
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  _DWORD v152[3];

  v10 = a1;
  *(_QWORD *)a1 = &off_24F980C68;
  *(_QWORD *)(a1 + 8) = &unk_24F980CA0;
  *(_DWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 20) = a6;
  v11 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a7);
  *(_OWORD *)(v10 + 216) = 0u;
  *(_QWORD *)(v10 + 24) = v11;
  *(_QWORD *)(v10 + 32) = v11 + 16;
  *(_QWORD *)(v10 + 40) = 0;
  v138 = (std::vector<int> *)(v10 + 40);
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(v10 + 72) = 0u;
  v133 = (_QWORD *)(v10 + 72);
  *(_OWORD *)(v10 + 136) = 0u;
  v136 = (char **)(v10 + 136);
  v137 = (std::vector<int> *)(v10 + 216);
  v132 = (void **)(v10 + 112);
  *(_OWORD *)(v10 + 168) = 0u;
  v141 = (std::vector<int> *)(v10 + 192);
  v142 = (std::vector<int> *)(v10 + 168);
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 148) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 248) = 0u;
  *(_OWORD *)(v10 + 264) = 0u;
  *(_OWORD *)(v10 + 276) = 0u;
  *(_QWORD *)(v10 + 360) = 0;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 344) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  v140 = a3;
  if (*a3 == a3[1])
  {
    v126 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__x, (google::glog_internal_namespace_ *)"./ortools/sat/circuit.cc", 34);
    v127 = (_QWORD *)google::LogMessage::stream(v126);
    v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"Check failed: !tails.empty() ", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"Empty constraint, shouldn't be constructed!", 43);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__x);
  }
  v12 = *(int *)(v10 + 16);
  __x[0] = -1;
  if ((_DWORD)v12)
  {
    std::vector<int>::__append(v142, v12, __x);
    v13 = *(int *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 192);
    v15 = *(_QWORD *)(v10 + 200);
    __x[0] = -1;
    v16 = (v15 - v14) >> 2;
    v17 = v13 >= v16;
    if (v13 > v16)
    {
      std::vector<int>::__append(v141, v13 - v16, __x);
      v13 = *(int *)(v10 + 16);
      goto LABEL_8;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    __x[0] = -1;
    v17 = 1;
  }
  if (!v17)
    *(_QWORD *)(v10 + 200) = v14 + 4 * v13;
LABEL_8:
  v18 = *(_QWORD *)(v10 + 216);
  v19 = (*(_QWORD *)(v10 + 224) - v18) >> 2;
  if (v13 <= v19)
  {
    if (v13 < v19)
      *(_QWORD *)(v10 + 224) = v18 + 4 * v13;
  }
  else
  {
    std::vector<int>::__append(v137, v13 - v19);
    v13 = *(int *)(v10 + 16);
  }
  v20 = *(_QWORD *)(v10 + 296);
  v21 = (*(_QWORD *)(v10 + 304) - v20) >> 2;
  if (v13 <= v21)
  {
    if (v13 < v21)
      *(_QWORD *)(v10 + 304) = v20 + 4 * v13;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)(v10 + 296), v13 - v21);
  }
  *(_QWORD *)__x = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v149 = 0u;
  v150 = 0u;
  v151 = 0;
  v22 = a3[1] - *a3;
  v135 = (uint64_t *)(v10 + 64);
  if (v22 << 30 == 0x700000000)
  {
    v23 = 8;
    v24 = 0;
    v25 = *(_QWORD *)(v10 + 80);
    if (v25 != 7)
    {
LABEL_18:
      v26 = (v25 - 1) / 7 + v25;
      goto LABEL_22;
    }
LABEL_21:
    v26 = 8;
LABEL_22:
    v27 = v26 | v23;
    v28 = 0xFFFFFFFFFFFFFFFFLL >> __clz(v27);
    if (v27)
      v29 = v28;
    else
      v29 = 1;
    if ((v24 & 1) != 0 || v29 > *(_QWORD *)(v10 + 88))
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::resize((char **)(v10 + 64), (char *)v29);
    goto LABEL_28;
  }
  v23 = ((int)(v22 >> 2) - 1) / 7 + (int)(v22 >> 2);
  if (v23)
  {
    v24 = 0;
    v25 = *(_QWORD *)(v10 + 80);
    if (v25 != 7)
      goto LABEL_18;
    goto LABEL_21;
  }
  if (!*(_QWORD *)(v10 + 88))
    goto LABEL_28;
  v25 = *(_QWORD *)(v10 + 80);
  if (v25)
  {
    v23 = 0;
    v24 = 1;
    if (v25 != 7)
      goto LABEL_18;
    goto LABEL_21;
  }
  operator delete(*(void **)(v10 + 64));
  *(_QWORD *)(v10 + 64) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *v133 = 0;
  v125 = *(_QWORD **)(v10 + 96);
  if (v125)
  {
    v125[1] = 0;
    *v125 = 0;
    v125[4] = 0;
    v125[2] = 0;
  }
LABEL_28:
  v30 = *(int *)(v10 + 16);
  v31 = (operations_research::sat::SatSolver **)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a7);
  v32 = v31;
  v33 = *((_DWORD *)v31 + 70);
  if (v33 == -1)
  {
    v34 = *((_DWORD *)*v31 + 4);
    operations_research::sat::SatSolver::SetNumVariables(*v31, v34 + 1);
    *((_DWORD *)v32 + 70) = 2 * v34;
    operations_research::sat::SatSolver::AddUnitClause((uint64_t)*v32, 2 * v34);
    v33 = *((_DWORD *)v32 + 70);
  }
  v145[0] = v33 ^ 1;
  v35 = *(_QWORD *)(v10 + 40);
  v36 = (*(_QWORD *)(v10 + 48) - v35) >> 2;
  if (v30 <= v36)
  {
    if (v30 < v36)
      *(_QWORD *)(v10 + 48) = v35 + 4 * v30;
  }
  else
  {
    std::vector<int>::__append(v138, v30 - v36, v145);
  }
  v37 = (uint64_t *)(v10 + 64);
  if ((int)((unint64_t)v22 >> 2) >= 1)
  {
    v38 = 0;
    v144 = ((unint64_t)v22 >> 2);
    v134 = a5;
    v131 = v10;
    do
    {
      v39 = *(_DWORD *)(*a5 + 4 * v38);
      v40 = v39;
      v41 = (unint64_t)v39 >> 6;
      v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 8 * v41);
      v43 = v39 & 0x3F;
      if (((v42 >> (v39 & 0x3F ^ 1u)) & 1) == 0)
      {
        v44 = *(unsigned int *)(*a4 + 4 * v38);
        v143 = *(unsigned int *)(*v140 + 4 * v38);
        if (*(_DWORD *)(*v140 + 4 * v38) == (_DWORD)v44)
        {
          v138->__begin_[(int)v44] = v39;
          if (((v42 >> v43) & 1) == 0)
          {
            v40 = v39 ^ 1;
            v39 ^= 1u;
LABEL_49:
            v48 = 0;
            v49 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v40)
                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                     * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                      + v40));
            v50 = v149;
            v51 = (v49 >> 7) ^ (*(_QWORD *)__x >> 12);
            v52 = 0x101010101010101 * (v49 & 0x7F);
            for (i = v51; ; i = v48 + v54)
            {
              v54 = i & v150;
              v55 = *(_QWORD *)(*(_QWORD *)__x + v54);
              v56 = ((v55 ^ v52) - 0x101010101010101) & ~(v55 ^ v52) & 0x8080808080808080;
              if (v56)
                break;
LABEL_53:
              if ((v55 & (~v55 << 6) & 0x8080808080808080) != 0)
                goto LABEL_57;
              v48 += 8;
            }
            while (1)
            {
              v57 = (v54 + (__clz(__rbit64(v56)) >> 3)) & v150;
              if (*(_DWORD *)(v149 + 8 * v57) == v39)
                break;
              v56 &= v56 - 1;
              if (!v56)
                goto LABEL_53;
            }
            if (v57 == (_QWORD)v150 || (LODWORD(v58) = *(_DWORD *)(v149 + 8 * v57 + 4), (_DWORD)v58 == -1))
            {
LABEL_57:
              v59 = 0;
              v60 = *(char **)(v10 + 120);
              v58 = (unint64_t)&v60[-*(_QWORD *)(v10 + 112)] >> 2;
              while (1)
              {
                v61 = v51 & v150;
                v62 = *(_QWORD *)(*(_QWORD *)__x + v61);
                v63 = ((v62 ^ v52) - 0x101010101010101) & ~(v62 ^ v52) & 0x8080808080808080;
                if (v63)
                  break;
LABEL_61:
                if ((v62 & (~v62 << 6) & 0x8080808080808080) != 0)
                {
                  v64 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::prepare_insert((uint64_t *)__x, v49);
                  v50 = v149;
                  v65 = (int *)(v149 + 8 * v64);
                  *v65 = v39;
                  v65[1] = 0;
                  v60 = *(char **)(v10 + 120);
                  goto LABEL_68;
                }
                v59 += 8;
                v51 = v59 + v61;
              }
              while (1)
              {
                v64 = (v61 + (__clz(__rbit64(v63)) >> 3)) & v150;
                if (*(_DWORD *)(v149 + 8 * v64) == v39)
                  break;
                v63 &= v63 - 1;
                if (!v63)
                  goto LABEL_61;
              }
LABEL_68:
              *(_DWORD *)(v50 + 8 * v64 + 4) = v58;
              v66 = *(_QWORD *)(v10 + 128);
              if ((unint64_t)v60 < v66)
              {
                *(_DWORD *)v60 = v39;
                v67 = (uint64_t)(v60 + 4);
                goto LABEL_85;
              }
              v68 = v58;
              v69 = (char *)*v132;
              v70 = v60 - (_BYTE *)*v132;
              v71 = v70 >> 2;
              v72 = (v70 >> 2) + 1;
              if (v72 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v73 = v66 - (_QWORD)v69;
              if (v73 >> 1 > v72)
                v72 = v73 >> 1;
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
                v74 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v74 = v72;
              if (v74)
              {
                if (v74 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v75 = v74;
                v76 = operator new(4 * v74);
                v74 = v75;
                v77 = (int *)&v76[4 * v71];
                *v77 = v39;
                v67 = (uint64_t)(v77 + 1);
                if (v60 != v69)
                {
LABEL_79:
                  v78 = v60 - 4 - v69;
                  if (v78 < 0x2C || (unint64_t)(v60 - v76 - v70) < 0x20)
                  {
                    v79 = v60;
                    LODWORD(v58) = v68;
                    v37 = v135;
                    goto LABEL_82;
                  }
                  v110 = (v78 >> 2) + 1;
                  v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
                  v79 = &v60[-v111];
                  v77 = (int *)((char *)v77 - v111);
                  v112 = &v76[4 * v71 - 16];
                  v113 = v60 - 16;
                  v114 = v110 & 0x7FFFFFFFFFFFFFF8;
                  LODWORD(v58) = v68;
                  do
                  {
                    v115 = *(_OWORD *)v113;
                    *(v112 - 1) = *((_OWORD *)v113 - 1);
                    *v112 = v115;
                    v112 -= 2;
                    v113 -= 32;
                    v114 -= 8;
                  }
                  while (v114);
                  v37 = v135;
                  if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_82:
                      v80 = *((_DWORD *)v79 - 1);
                      v79 -= 4;
                      *--v77 = v80;
                    }
                    while (v79 != v69);
                  }
                  *(_QWORD *)(v10 + 112) = v77;
                  *(_QWORD *)(v10 + 120) = v67;
                  *(_QWORD *)(v10 + 128) = &v76[4 * v74];
                  if (v69)
LABEL_84:
                    operator delete(v69);
LABEL_85:
                  *(_QWORD *)(v10 + 120) = v67;
                  memset(v145, 0, sizeof(v145));
                  v146 = 0;
                  v81 = *(_QWORD **)(v10 + 144);
                  if ((unint64_t)v81 >= *(_QWORD *)(v10 + 152))
                  {
                    v82 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>(v136, (uint64_t)v145);
                    v83 = *(void **)v145;
                    *(_QWORD *)(v10 + 144) = v82;
                    if (v83)
                    {
                      *(_QWORD *)&v145[2] = v83;
                      operator delete(v83);
                    }
                  }
                  else
                  {
                    *v81 = 0;
                    v81[1] = 0;
                    v81[2] = 0;
                    *(_OWORD *)v81 = *(_OWORD *)v145;
                    v81[2] = v146;
                    *(_QWORD *)(v10 + 144) = v81 + 3;
                  }
                  goto LABEL_89;
                }
              }
              else
              {
                v76 = 0;
                v77 = (int *)(4 * v71);
                *(_DWORD *)(4 * v71) = v39;
                v67 = 4 * v71 + 4;
                if (v60 != v69)
                  goto LABEL_79;
              }
              LODWORD(v58) = v68;
              v37 = v135;
              *(_QWORD *)(v10 + 112) = v77;
              *(_QWORD *)(v10 + 120) = v67;
              *(_QWORD *)(v10 + 128) = &v76[4 * v74];
              if (v69)
                goto LABEL_84;
              goto LABEL_85;
            }
LABEL_89:
            v84 = &(*v136)[24 * (int)v58];
            v85 = v84 + 8;
            v86 = (char *)*((_QWORD *)v84 + 1);
            v88 = v84 + 16;
            v87 = *((_QWORD *)v84 + 2);
            if ((unint64_t)v86 < v87)
            {
              *(_QWORD *)v86 = v143 | (v44 << 32);
              v89 = v86 + 8;
LABEL_113:
              a5 = v134;
              *v85 = v89;
              goto LABEL_37;
            }
            v90 = *(char **)v84;
            v91 = (uint64_t)&v86[-*(_QWORD *)v84];
            v92 = v91 >> 3;
            v93 = (v91 >> 3) + 1;
            if (v93 >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v94 = v87 - (_QWORD)v90;
            if (v94 >> 2 > v93)
              v93 = v94 >> 2;
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
              v95 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v95 = v93;
            if (v95)
            {
              if (v95 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v96 = v44;
              v97 = v95;
              v98 = operator new(8 * v95);
              v95 = v97;
              v44 = v96;
              v88 = v84 + 16;
              v10 = v131;
            }
            else
            {
              v98 = 0;
            }
            v99 = (uint64_t *)&v98[8 * v92];
            *v99 = v143 | (v44 << 32);
            v89 = v99 + 1;
            if (v86 == v90)
            {
              v37 = v135;
              *(_QWORD *)v84 = v99;
              *v85 = v89;
              *v88 = &v98[8 * v95];
              if (!v86)
                goto LABEL_113;
            }
            else
            {
              v100 = v86 - 8 - v90;
              if (v100 < 0x58)
              {
                v37 = v135;
                goto LABEL_110;
              }
              v101 = v86 - &v98[v91];
              v37 = v135;
              if (v101 < 0x20)
                goto LABEL_153;
              v102 = (v100 >> 3) + 1;
              v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
              v104 = &v86[-v103];
              v99 = (uint64_t *)((char *)v99 - v103);
              v105 = &v98[8 * v92 - 16];
              v106 = v86 - 16;
              v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v108 = *(_OWORD *)v106;
                *(v105 - 1) = *((_OWORD *)v106 - 1);
                *v105 = v108;
                v105 -= 2;
                v106 -= 32;
                v107 -= 4;
              }
              while (v107);
              v86 = v104;
              if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_153:
                do
                {
LABEL_110:
                  v109 = *((_QWORD *)v86 - 1);
                  v86 -= 8;
                  *--v99 = v109;
                }
                while (v86 != v90);
              }
              v86 = *(char **)v84;
              *(_QWORD *)v84 = v99;
              *v85 = v89;
              *v88 = &v98[8 * v95];
              if (!v86)
                goto LABEL_113;
            }
            operator delete(v86);
            goto LABEL_113;
          }
        }
        else
        {
          v145[0] = *(_DWORD *)(*v140 + 4 * v38);
          v145[1] = v44;
          v45 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::find_or_prepare_insert<std::pair<int,int>>(v37, (unsigned int *)v145);
          if (v46)
            *(_QWORD *)(*v133 + 12 * v45) = *(_QWORD *)v145;
          *(_DWORD *)(*(_QWORD *)(v10 + 72) + 12 * v45 + 8) = v39;
          if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 8 * v41) >> v43) & 1) == 0)
            goto LABEL_49;
        }
        v145[0] = v142->__begin_[(int)v143];
        v152[0] = -1;
        if (v145[0] != -1)
        {
          v147 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v145, (int)v152, "next_[tail] == -1");
          if (v147)
          {
            google::LogMessageFatal::LogMessageFatal((unint64_t *)v145, (google::glog_internal_namespace_ *)"./ortools/sat/circuit.cc", 58, &v147);
            v129 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v145);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"Trivially UNSAT or duplicate arcs while adding ", 47);
            v130 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)" -> ", 4);
            std::ostream::operator<<();
            goto LABEL_150;
          }
        }
        v145[0] = v141->__begin_[(int)v44];
        v152[0] = -1;
        if (v145[0] != -1)
        {
          v147 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v145, (int)v152, "prev_[head] == -1");
          if (v147)
          {
            google::LogMessageFatal::LogMessageFatal((unint64_t *)v145, (google::glog_internal_namespace_ *)"./ortools/sat/circuit.cc", 61, &v147);
            v116 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v145);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"Trivially UNSAT or duplicate arcs while adding ", 47);
            v117 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)" -> ", 4);
            std::ostream::operator<<();
LABEL_150:
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v145);
          }
        }
        if ((_DWORD)v143 || !*(_BYTE *)(v10 + 20))
        {
          v47 = (int)v143;
          v142->__begin_[v47] = v44;
          v137->__begin_[v47] = -1;
        }
        if ((_DWORD)v44 || !*(_BYTE *)(v10 + 20))
          v141->__begin_[(int)v44] = v143;
      }
LABEL_37:
      ++v38;
    }
    while (v38 != v144);
  }
  v118 = *(_DWORD *)(v10 + 16);
  if (v118 >= 1)
  {
    v119 = *(int **)(v10 + 40);
    v120 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8);
    if (((*(_QWORD *)(v120 + (((unint64_t)*v119 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*v119 & 0x3F ^ 1u)) & 1) != 0)
    {
      v121 = *(int *)(v10 + 288);
      *(_DWORD *)(v10 + 288) = v121 + 1;
      *(_DWORD *)(*(_QWORD *)(v10 + 296) + 4 * v121) = 0;
      v118 = *(_DWORD *)(v10 + 16);
    }
    if (v118 >= 2)
    {
      for (j = 1; j < v118; ++j)
      {
        if (((*(_QWORD *)(v120 + (((unint64_t)v119[j] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v119[j] & 0x3F ^ 1u)) & 1) != 0
          && !*(_BYTE *)(v10 + 20))
        {
          v123 = *(int *)(v10 + 288);
          *(_DWORD *)(v10 + 288) = v123 + 1;
          *(_DWORD *)(*(_QWORD *)(v10 + 296) + 4 * v123) = j;
          v118 = *(_DWORD *)(v10 + 16);
        }
      }
    }
  }
  if ((_QWORD)v150)
  {
    operator delete(*(void **)__x);
    *(_QWORD *)__x = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v151 = 0;
    *(_QWORD *)&v150 = 0;
    v149 = 0uLL;
  }
  if (*((_QWORD *)&v150 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v150 + 1));
  return v10;
}

void sub_22DA3E8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA3E8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA3E8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, _QWORD *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,void **a21,void **a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::~flat_hash_map(v26 - 144);
  v28 = (void *)a10[43];
  if (v28)
  {
    operator delete(v28);
    v29 = (void *)a10[40];
    if (!v29)
    {
LABEL_3:
      v30 = *a9;
      if (!*a9)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v29 = (void *)a10[40];
    if (!v29)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = *a9;
  if (!*a9)
  {
LABEL_4:
    v31 = (void *)a10[33];
    if (!v31)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  a10[38] = v30;
  operator delete(v30);
  v31 = (void *)a10[33];
  if (!v31)
  {
LABEL_5:
    v32 = (void *)a10[30];
    if (!v32)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  a10[34] = v31;
  operator delete(v31);
  v32 = (void *)a10[30];
  if (!v32)
  {
LABEL_6:
    v33 = *a17;
    if (!*a17)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  a10[31] = v32;
  operator delete(v32);
  v33 = *a17;
  if (!*a17)
  {
LABEL_7:
    v34 = *a21;
    if (!*a21)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  a10[28] = v33;
  operator delete(v33);
  v34 = *a21;
  if (!*a21)
  {
LABEL_8:
    v35 = *a22;
    if (!*a22)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  a10[25] = v34;
  operator delete(v34);
  v35 = *a22;
  if (!*a22)
  {
LABEL_9:
    std::vector<std::vector<int>>::~vector[abi:ne180100](a16);
    v36 = *a11;
    if (!*a11)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  a10[22] = v35;
  operator delete(v35);
  std::vector<std::vector<int>>::~vector[abi:ne180100](a16);
  v36 = *a11;
  if (!*a11)
  {
LABEL_10:
    absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::~flat_hash_map(a15);
    v37 = *a18;
    if (!*a18)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  a10[15] = v36;
  operator delete(v36);
  absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::~flat_hash_map(a15);
  v37 = *a18;
  if (!*a18)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_21:
  a10[6] = v37;
  operator delete(v37);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

uint64_t absl::lts_2020_02_25::flat_hash_map<std::pair<int,int>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

uint64_t operations_research::sat::CircuitPropagator::RegisterWith(operations_research::sat::CircuitPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;

  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v5 = *((_QWORD *)this + 14);
  if (*((_QWORD *)this + 15) != v5)
  {
    v6 = 0;
    do
    {
      operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, *(unsigned int *)(v5 + 4 * v6), v4, v6);
      ++v6;
      v5 = *((_QWORD *)this + 14);
    }
    while (v6 < (*((_QWORD *)this + 15) - v5) >> 2);
  }
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleClass((uint64_t)a2, v4, (uint64_t)this + 8);
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(a2, v4, (int *)this + 40);
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(a2, v4, (int *)this + 72);
  return operations_research::sat::GenericLiteralWatcher::NotifyThatPropagatorMayNotReachFixedPointInOnePass((uint64_t)a2, v4);
}

void operations_research::sat::GenericLiteralWatcher::WatchLiteral(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;

  v7 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v8 = (_QWORD *)(a1 + 64);
  v9 = (v6 - v7) >> 3;
  v10 = 0xAAAAAAAAAAAAAAABLL * v9;
  v11 = a2 << 32;
  if ((int)a2 >= -1431655765 * (int)v9)
  {
    v12 = (v11 + 0x100000000) >> 32;
    if (v12 <= v10)
    {
      if (v12 < v10)
      {
        v14 = v7 + 24 * (int)v12;
        if (v6 != v14)
        {
          v15 = *(_QWORD *)(a1 + 72);
          do
          {
            v17 = *(void **)(v15 - 24);
            v15 -= 24;
            v16 = v17;
            if (v17)
            {
              *(_QWORD *)(v6 - 16) = v16;
              operator delete(v16);
            }
            v6 = v15;
          }
          while (v15 != v14);
        }
        *(_QWORD *)(a1 + 72) = v14;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a1 + 64, v12 - v10);
    }
  }
  v18 = (_QWORD *)(*v8 + 24 * SHIDWORD(v11));
  v20 = v18 + 1;
  v19 = (char *)v18[1];
  v21 = v18[2];
  if ((unint64_t)v19 >= v21)
  {
    v23 = (char *)*v18;
    v24 = (uint64_t)&v19[-*v18];
    v25 = v24 >> 3;
    v26 = (v24 >> 3) + 1;
    if (v26 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v27 = v21 - (_QWORD)v23;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v29 = operator new(8 * v28);
    }
    else
    {
      v29 = 0;
    }
    v30 = (unint64_t *)&v29[8 * v25];
    *v30 = a3 | (unint64_t)(a4 << 32);
    v22 = v30 + 1;
    if (v19 != v23)
    {
      v31 = v19 - v23 - 8;
      if (v31 < 0x58)
        goto LABEL_38;
      if ((unint64_t)(v19 - v29 - v24) < 0x20)
        goto LABEL_38;
      v32 = (v31 >> 3) + 1;
      v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = &v19[-v33];
      v30 = (unint64_t *)((char *)v30 - v33);
      v35 = &v29[8 * v25 - 16];
      v36 = v19 - 16;
      v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *(_OWORD *)v36;
        *(v35 - 1) = *((_OWORD *)v36 - 1);
        *v35 = v38;
        v35 -= 2;
        v36 -= 32;
        v37 -= 4;
      }
      while (v37);
      v19 = v34;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v39 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v30 = v39;
        }
        while (v19 != v23);
      }
      v19 = (char *)*v18;
    }
    *v18 = v30;
    *v20 = v22;
    v18[2] = &v29[8 * v28];
    if (v19)
      operator delete(v19);
  }
  else
  {
    *(_QWORD *)v19 = a3 | (unint64_t)(a4 << 32);
    v22 = v19 + 8;
  }
  *v20 = v22;
}

void operations_research::sat::CircuitPropagator::SetLevel(operations_research::sat::CircuitPropagator *this, int a2)
{
  unint64_t v2;
  std::vector<int> *v3;
  std::vector<int>::pointer begin;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  int *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;

  v2 = a2;
  begin = (std::vector<int>::pointer)*((_QWORD *)this + 30);
  v5 = (char *)*((_QWORD *)this + 31);
  v3 = (std::vector<int> *)((char *)this + 240);
  v6 = (v5 - (char *)begin) >> 2;
  if (v6 == a2)
    return;
  if (v6 < a2)
  {
    while (1)
    {
      v9 = *((_QWORD *)this + 32);
      v10 = (*((_QWORD *)this + 34) - *((_QWORD *)this + 33)) >> 3;
      if ((unint64_t)v5 >= v9)
        break;
      *(_DWORD *)v5 = v10;
      v8 = (uint64_t)(v5 + 4);
LABEL_6:
      *((_QWORD *)this + 31) = v8;
      v6 = (v8 - (uint64_t)begin) >> 2;
      v5 = (char *)v8;
      if (v6 >= v2)
        return;
    }
    v11 = v6 + 1;
    if ((v6 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)begin;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(4 * v13);
      v15 = (int *)&v14[4 * v6];
      *v15 = v10;
      v8 = (uint64_t)(v15 + 1);
      if (v5 == (char *)begin)
        goto LABEL_31;
    }
    else
    {
      v14 = 0;
      v15 = (int *)(4 * v6);
      *(_DWORD *)(4 * v6) = v10;
      v8 = 4 * v6 + 4;
      if (v5 == (char *)begin)
        goto LABEL_31;
    }
    v16 = v5 - 4 - (char *)begin;
    if (v16 >= 0xBC)
    {
      v18 = 4 * v6;
      if (&v14[4 * v6 - 4 - (v16 & 0xFFFFFFFFFFFFFFFCLL)] > &v14[4 * v6 - 4])
      {
        v17 = v5;
      }
      else if (&v5[-(v16 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
      {
        v17 = v5;
      }
      else if ((unint64_t)(v5 - &v14[v18]) >= 0x20)
      {
        v19 = (v16 >> 2) + 1;
        v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
        v17 = &v5[-v20];
        v15 = (int *)((char *)v15 - v20);
        v21 = &v14[v18 - 16];
        v22 = v5 - 16;
        v23 = v19 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 8;
        }
        while (v23);
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_31;
      }
      else
      {
        v17 = v5;
      }
    }
    else
    {
      v17 = v5;
    }
    do
    {
      v25 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *--v15 = v25;
    }
    while (v17 != (char *)begin);
LABEL_31:
    *((_QWORD *)this + 30) = v15;
    *((_QWORD *)this + 31) = v8;
    *((_QWORD *)this + 32) = &v14[4 * v13];
    if (begin)
    {
      operator delete(begin);
      begin = v3->__begin_;
    }
    else
    {
      begin = v15;
    }
    goto LABEL_6;
  }
  v26 = begin[a2];
  v27 = *((_QWORD *)this + 33);
  v28 = (*((_QWORD *)this + 34) - v27) >> 3;
  if (v28 > v26)
  {
    v29 = *((_QWORD *)this + 21);
    v30 = *((_QWORD *)this + 24);
    v31 = (int *)(v27 + 8 * v26 + 4);
    do
    {
      v32 = *v31;
      *(_DWORD *)(v29 + 4 * *(v31 - 1)) = -1;
      *(_DWORD *)(v30 + 4 * v32) = -1;
      ++v26;
      v31 += 2;
    }
    while (v28 > v26);
    v26 = begin[a2];
  }
  if (v26 <= v28)
  {
    if (v26 < v28)
      *((_QWORD *)this + 34) = v27 + 8 * v26;
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 33, v26 - v28);
    begin = (std::vector<int>::pointer)*((_QWORD *)this + 30);
    v6 = (uint64_t)(*((_QWORD *)this + 31) - (_QWORD)begin) >> 2;
  }
  if (v2 <= v6)
  {
    if (v2 < v6)
      *((_QWORD *)this + 31) = &begin[v2];
  }
  else
  {
    std::vector<int>::__append(v3, v2 - v6);
  }
}

void `non-virtual thunk to'operations_research::sat::CircuitPropagator::SetLevel(operations_research::sat::CircuitPropagator *this, int a2)
{
  operations_research::sat::CircuitPropagator::SetLevel((operations_research::sat::CircuitPropagator *)((char *)this - 8), a2);
}

void operations_research::sat::CircuitPropagator::FillReasonForPath(uint64_t a1, int a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33[2];
  uint64_t *v34;

  LODWORD(v33[0]) = a2;
  LODWORD(v34) = -1;
  if (a2 == -1)
  {
    v34 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v33, (int)&v34, "start_node != -1");
    if (v34)
    {
      google::LogMessageFatal::LogMessageFatal(v33, (google::glog_internal_namespace_ *)"./ortools/sat/circuit.cc", 129, &v34);
      google::LogMessage::stream((google::LogMessage *)v33);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v33);
    }
  }
  v6 = *(char **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v7 = *(_QWORD *)(a1 + 168);
  v8 = a2;
  while (1)
  {
    v9 = *(_DWORD *)(v7 + 4 * v8);
    if (v9 == -1)
      break;
    v10 = v8;
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 4 * v8);
    if (v11 == -1)
    {
      v8 = v9;
      if (v9 == a2)
        return;
    }
    else
    {
      v12 = v11 ^ 1;
      v13 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v6 < v13)
      {
        *(_DWORD *)v6 = v12;
        v14 = (uint64_t)(v6 + 4);
        goto LABEL_21;
      }
      v15 = *(char **)a3;
      v16 = (uint64_t)&v6[-*(_QWORD *)a3];
      v17 = v16 >> 2;
      v18 = (v16 >> 2) + 1;
      if (v18 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v19 = v13 - (_QWORD)v15;
      if (v19 >> 1 > v18)
        v18 = v19 >> 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      v32 = v18;
      if (v18)
      {
        if (v18 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v20 = operator new(4 * v18);
        v21 = (int *)&v20[4 * v17];
        *v21 = v12;
        v14 = (uint64_t)(v21 + 1);
        if (v6 == v15)
        {
LABEL_24:
          *(_QWORD *)a3 = v21;
          *(_QWORD *)(a3 + 8) = v14;
          *(_QWORD *)(a3 + 16) = &v20[4 * v32];
          if (!v15)
            goto LABEL_21;
LABEL_20:
          operator delete(v15);
          goto LABEL_21;
        }
      }
      else
      {
        v20 = 0;
        v21 = (int *)(4 * v17);
        *(_DWORD *)(4 * v17) = v12;
        v14 = 4 * v17 + 4;
        if (v6 == v15)
          goto LABEL_24;
      }
      v22 = v6 - 4 - v15;
      if (v22 < 0xBC
        || &v20[v16 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[v16 - 4]
        || &v6[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4
        || (unint64_t)(v6 - v20 - v16) < 0x20)
      {
        v23 = v6;
        v24 = v32;
        do
        {
LABEL_18:
          v25 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *--v21 = v25;
        }
        while (v23 != v15);
        goto LABEL_19;
      }
      v26 = (v22 >> 2) + 1;
      v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
      v23 = &v6[-v27];
      v21 = (int *)((char *)v21 - v27);
      v28 = &v20[4 * v17 - 16];
      v29 = v6 - 16;
      v30 = v26 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v31 = *(_OWORD *)v29;
        *(v28 - 1) = *((_OWORD *)v29 - 1);
        *v28 = v31;
        v28 -= 2;
        v29 -= 32;
        v30 -= 8;
      }
      while (v30);
      v24 = v32;
      if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_18;
LABEL_19:
      *(_QWORD *)a3 = v21;
      *(_QWORD *)(a3 + 8) = v14;
      *(_QWORD *)(a3 + 16) = &v20[4 * v24];
      if (v15)
        goto LABEL_20;
LABEL_21:
      *(_QWORD *)(a3 + 8) = v14;
      v7 = *(_QWORD *)(a1 + 168);
      v8 = *(_DWORD *)(v7 + 4 * v10);
      v6 = (char *)v14;
      if (v8 == a2)
        return;
    }
  }
}

void sub_22DA3F31C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::CircuitPropagator::IncrementalPropagate(uint64_t a1, int **a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _OWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  int *v40;
  int *v41;
  uint64_t **v42;
  int v43;
  int __src;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v40 = a2[1];
  if (*a2 == v40)
    return operations_research::sat::CircuitPropagator::Propagate((operations_research::sat::CircuitPropagator *)a1);
  v42 = (uint64_t **)(a1 + 264);
  while (1)
  {
    v41 = v3;
    v4 = *v3;
    v5 = *(_QWORD *)(a1 + 136) + 24 * (int)v4;
    v7 = *(uint64_t **)v5;
    v6 = *(uint64_t **)(v5 + 8);
    if (*(uint64_t **)v5 != v6)
      break;
LABEL_3:
    v3 = v41 + 1;
    if (v41 + 1 == v40)
      return operations_research::sat::CircuitPropagator::Propagate((operations_research::sat::CircuitPropagator *)a1);
  }
  v43 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v4);
  while (1)
  {
    while (1)
    {
      v9 = *v7;
      v10 = HIDWORD(*v7);
      if (*v7 != (_DWORD)v10)
        break;
      v8 = *(int *)(a1 + 288);
      *(_DWORD *)(a1 + 288) = v8 + 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v8) = v9;
      if (++v7 == v6)
        goto LABEL_3;
    }
    v11 = *(_QWORD *)(a1 + 168);
    if (*(_DWORD *)(v11 + 4 * (int)v9) != -1)
      break;
    v12 = *(_QWORD *)(a1 + 192);
    v13 = *(int *)(v12 + 4 * (v9 >> 32));
    if ((_DWORD)v13 != -1)
    {
      v39 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v39 + 144) = 0;
      v37 = (_QWORD *)(v39 + 96);
      v38 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 4 * v13);
      if (v38 == -1)
        goto LABEL_44;
LABEL_42:
      __src = v38 ^ 1;
      v45 = v43 ^ 1;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v37, (char *)&__src, (char *)&v46, 2uLL);
      return 0;
    }
    if ((_DWORD)v9 || !*(_BYTE *)(a1 + 20))
    {
      v14 = 4 * (int)v9;
      *(_DWORD *)(v11 + v14) = v10;
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v14) = v43;
    }
    if ((_DWORD)v10 || !*(_BYTE *)(a1 + 20))
      *(_DWORD *)(v12 + 4 * (v9 >> 32)) = v9;
    v16 = *(uint64_t **)(a1 + 272);
    v15 = *(_QWORD *)(a1 + 280);
    if ((unint64_t)v16 >= v15)
    {
      v18 = *v42;
      v19 = (char *)v16 - (char *)*v42;
      v20 = v19 >> 3;
      v21 = (v19 >> 3) + 1;
      if (v21 >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v22 = v15 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v24 = operator new(8 * v23);
        v25 = (uint64_t *)&v24[8 * v20];
        *v25 = v9;
        v17 = (uint64_t)(v25 + 1);
        if (v16 == v18)
          goto LABEL_36;
LABEL_29:
        v26 = (char *)(v16 - 1) - (char *)v18;
        if (v26 < 0x58)
          goto LABEL_50;
        if ((unint64_t)((char *)v16 - &v24[v19]) < 0x20)
          goto LABEL_50;
        v27 = (v26 >> 3) + 1;
        v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = &v16[v28 / 0xFFFFFFFFFFFFFFF8];
        v25 = (uint64_t *)((char *)v25 - v28);
        v30 = &v24[8 * v20 - 16];
        v31 = v16 - 2;
        v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *v30 = v33;
          v30 -= 2;
          v31 -= 4;
          v32 -= 4;
        }
        while (v32);
        v16 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_50:
          do
          {
            v34 = *--v16;
            *--v25 = v34;
          }
          while (v16 != v18);
        }
        v16 = *v42;
      }
      else
      {
        v24 = 0;
        v25 = (uint64_t *)(8 * v20);
        *(_QWORD *)(8 * v20) = v9;
        v17 = 8 * v20 + 8;
        if (v16 != v18)
          goto LABEL_29;
      }
LABEL_36:
      *(_QWORD *)(a1 + 264) = v25;
      *(_QWORD *)(a1 + 272) = v17;
      *(_QWORD *)(a1 + 280) = &v24[8 * v23];
      if (v16)
        operator delete(v16);
      goto LABEL_38;
    }
    *v16 = v9;
    v17 = (uint64_t)(v16 + 1);
LABEL_38:
    *(_QWORD *)(a1 + 272) = v17;
    if (++v7 == v6)
      goto LABEL_3;
  }
  v36 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v36 + 144) = 0;
  v37 = (_QWORD *)(v36 + 96);
  v38 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 4 * (int)v9);
  if (v38 != -1)
    goto LABEL_42;
LABEL_44:
  __src = v43 ^ 1;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v37, (char *)&__src, (char *)&v45, 1uLL);
  return 0;
}

uint64_t operations_research::sat::CircuitPropagator::Propagate(operations_research::sat::CircuitPropagator *this)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t EmptyVectorToStoreReason;
  int v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  char v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  _DWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  char *v83;
  _DWORD *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _BYTE *v96;
  _DWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _OWORD *v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  int v106;
  _DWORD *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _OWORD *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  int v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120[2];
  uint64_t *v121;

  v2 = (_QWORD *)((char *)this + 320);
  v3 = *((int *)this + 4);
  LOBYTE(v120[0]) = 0;
  std::vector<BOOL>::assign((char **)this + 40, v3, v120);
  LODWORD(v4) = *((_DWORD *)this + 4);
  if ((int)v4 < 1)
    return 1;
  v5 = 0;
  while (1)
  {
    v39 = v5 >> 6;
    v40 = 1 << v5;
    if ((*(_QWORD *)(*v2 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      goto LABEL_56;
    v41 = *(unsigned int *)(*((_QWORD *)this + 21) + 4 * v5);
    if (v5 == v41 || (_DWORD)v41 == -1 && *(_DWORD *)(*((_QWORD *)this + 24) + 4 * v5) == -1)
      goto LABEL_56;
    LOBYTE(v120[0]) = 0;
    std::vector<BOOL>::assign((char **)this + 43, (int)v4, v120);
    v42 = *((_QWORD *)this + 43);
    v43 = 8 * v39;
    *(_QWORD *)(v42 + v43) = *(_QWORD *)(v42 + 8 * v39) | v40;
    v44 = *((_QWORD *)this + 40);
    *(_QWORD *)(v44 + v43) = *(_QWORD *)(v44 + 8 * v39) | v40;
    v45 = *((_QWORD *)this + 21);
    v46 = v5;
    do
    {
      v47 = *(unsigned int *)(v45 + 4 * (int)v46);
      if ((_DWORD)v47 == -1)
        break;
      v48 = ((unint64_t)(int)v47 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(_QWORD *)(v42 + v48) |= 1 << v47;
      *(_QWORD *)(v44 + v48) |= 1 << v47;
      v46 = v47;
    }
    while (v5 != v47);
    v49 = *((_QWORD *)this + 24);
    v50 = v5;
    do
    {
      v51 = *(unsigned int *)(v49 + 4 * v50);
      if ((_DWORD)v51 == -1)
        break;
      v52 = ((unint64_t)(int)v51 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(_QWORD *)(v42 + v52) |= 1 << v51;
      *(_QWORD *)(v44 + v52) |= 1 << v51;
      v50 = v51;
    }
    while (v5 != v51);
    v53 = *((unsigned int *)this + 72);
    if ((int)v53 < 1)
      break;
    v54 = (int *)*((_QWORD *)this + 37);
    while (1)
    {
      v56 = *v54++;
      v55 = v56;
      if (((*(_QWORD *)(v42 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v56) & 1) == 0)
        break;
      if (!--v53)
        goto LABEL_54;
    }
    v57 = *(_DWORD *)(*((_QWORD *)this + 5) + 4 * v55);
    if (v50 == v46)
    {
      v74 = *((_QWORD *)this + 3);
      *(_QWORD *)(v74 + 144) = 0;
      operations_research::sat::CircuitPropagator::FillReasonForPath((uint64_t)this, v46, v74 + 96);
      if (v57 == -3)
        return 0;
      v81 = (_QWORD *)*((_QWORD *)this + 3);
      v81[18] = 0;
      v83 = (char *)v81[13];
      v82 = v81[14];
      if ((unint64_t)v83 < v82)
      {
        *(_DWORD *)v83 = v57;
        v84 = v83 + 4;
LABEL_119:
        result = 0;
        v81[13] = v84;
        return result;
      }
      v91 = (char *)v81[12];
      v92 = (v83 - v91) >> 2;
      v93 = v92 + 1;
      if (!((unint64_t)(v92 + 1) >> 62))
      {
        v94 = v82 - (_QWORD)v91;
        if (v94 >> 1 > v93)
          v93 = v94 >> 1;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
          v95 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v95 = v93;
        if (v95)
        {
          if (v95 >> 62)
            goto LABEL_120;
          v96 = operator new(4 * v95);
        }
        else
        {
          v96 = 0;
        }
        v107 = &v96[4 * v92];
        v108 = &v96[4 * v95];
        *v107 = v57;
        v84 = v107 + 1;
        if (v83 != v91)
        {
          v109 = v83 - v91 - 4;
          if (v109 < 0x2C)
            goto LABEL_125;
          if ((unint64_t)(v91 - v96) < 0x20)
            goto LABEL_125;
          v110 = (v109 >> 2) + 1;
          v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
          v112 = &v83[-v111];
          v107 = (_DWORD *)((char *)v107 - v111);
          v113 = &v96[4 * v92 - 16];
          v114 = v83 - 16;
          v115 = v110 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v116 = *(_OWORD *)v114;
            *(v113 - 1) = *((_OWORD *)v114 - 1);
            *v113 = v116;
            v113 -= 2;
            v114 -= 32;
            v115 -= 8;
          }
          while (v115);
          v83 = v112;
          if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_125:
            do
            {
              v117 = *((_DWORD *)v83 - 1);
              v83 -= 4;
              *--v107 = v117;
            }
            while (v83 != v91);
          }
        }
        v81[12] = v107;
        v81[13] = v84;
        v81[14] = v108;
        if (v91)
          operator delete(v91);
        goto LABEL_119;
      }
LABEL_121:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    v12 = 0;
    v58 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v46)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + v46)))
        + v50;
    v59 = ((v58 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v58);
    v60 = *((_QWORD *)this + 8);
    v13 = (v59 >> 7) ^ (v60 >> 12);
    v61 = *((_QWORD *)this + 11);
    v62 = 0x101010101010101 * (v59 & 0x7F);
    while (1)
    {
      v6 = v13 & v61;
      v7 = *(_QWORD *)(v60 + v6);
      v8 = ((v7 ^ v62) - 0x101010101010101) & ~(v7 ^ v62) & 0x8080808080808080;
      if (v8)
        break;
LABEL_9:
      if ((v7 & (~v7 << 6) & 0x8080808080808080) != 0)
        goto LABEL_56;
      v12 += 8;
      v13 = v12 + v6;
    }
    while (1)
    {
      v9 = (v6 + (__clz(__rbit64(v8)) >> 3)) & v61;
      v10 = (_DWORD *)(*((_QWORD *)this + 9) + 12 * v9);
      if (*v10 == v46 && v10[1] == v50)
        break;
      v8 &= v8 - 1;
      if (!v8)
        goto LABEL_9;
    }
    if (v9 != v61)
    {
      v14 = (int)v10[2];
      if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v14 & 0x3F ^ 1)) & 1) == 0)
      {
        EmptyVectorToStoreReason = operations_research::sat::Trail::GetEmptyVectorToStoreReason(*((operations_research::sat::Trail **)this + 3), *(_DWORD *)(*((_QWORD *)this + 3) + 12));
        v16 = v50;
        v17 = (_QWORD *)EmptyVectorToStoreReason;
        operations_research::sat::CircuitPropagator::FillReasonForPath((uint64_t)this, v16, EmptyVectorToStoreReason);
        if (v57 != -3)
        {
          v19 = (char *)v17[1];
          v18 = v17[2];
          if ((unint64_t)v19 >= v18)
          {
            v119 = v17;
            v21 = (char *)*v17;
            v22 = v19 - v21;
            v23 = (v19 - v21) >> 2;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 62)
              goto LABEL_121;
            v25 = v18 - (_QWORD)v21;
            if (v25 >> 1 > v24)
              v24 = v25 >> 1;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            v118 = v24;
            if (v24)
            {
              if (v24 >> 62)
                goto LABEL_120;
              v26 = operator new(4 * v24);
              v22 = v19 - v21;
              v23 = (v19 - v21) >> 2;
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[4 * v23];
            *v27 = v57;
            v20 = v27 + 1;
            if (v19 == v21)
            {
              v29 = v118;
            }
            else
            {
              v28 = v19 - 4 - v21;
              v29 = v118;
              if (v28 < 0x2C)
                goto LABEL_126;
              if ((unint64_t)(v19 - &v26[v22]) < 0x20)
                goto LABEL_126;
              v30 = (v28 >> 2) + 1;
              v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
              v32 = &v19[-v31];
              v27 = (_DWORD *)((char *)v27 - v31);
              v33 = &v26[4 * v23 - 16];
              v34 = v19 - 16;
              v35 = v30 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 8;
              }
              while (v35);
              v19 = v32;
              if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_126:
                do
                {
                  v37 = *((_DWORD *)v19 - 1);
                  v19 -= 4;
                  *--v27 = v37;
                }
                while (v19 != v21);
              }
            }
            *v119 = v27;
            v119[1] = v20;
            v119[2] = &v26[4 * v29];
            if (v21)
            {
              v38 = v20;
              operator delete(v21);
              v20 = v38;
            }
            v17 = v119;
          }
          else
          {
            *(_DWORD *)v19 = v57;
            v20 = v19 + 4;
          }
          v17[1] = v20;
        }
        if ((operations_research::sat::Trail::EnqueueWithStoredReason(*((_QWORD *)this + 3), v14 ^ 1) & 1) == 0)
          return 0;
      }
    }
LABEL_56:
    ++v5;
    v4 = *((int *)this + 4);
    if ((uint64_t)v5 >= v4)
      return 1;
  }
LABEL_54:
  if (v50 != v46 || *((_BYTE *)this + 20) || *((int *)this + 4) < 1)
    goto LABEL_56;
  v63 = 0;
  v64 = -1;
  while (1)
  {
    if (((*(_QWORD *)(*((_QWORD *)this + 43) + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v63) & 1) != 0)
      goto LABEL_63;
    v66 = *((_QWORD *)this + 5);
    v67 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if (((*(_QWORD *)(v67 + (((unint64_t)*(int *)(v66 + 4 * v63) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v66 + 4 * v63)) & 1) != 0)
      goto LABEL_63;
    LODWORD(v120[0]) = *(_DWORD *)(*((_QWORD *)this + 21) + 4 * v63);
    LODWORD(v121) = -1;
    if (LODWORD(v120[0]) != -1)
    {
      v121 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v120, (int)&v121, "next_[node] == -1");
      if (v121)
      {
        google::LogMessageFatal::LogMessageFatal(v120, (google::glog_internal_namespace_ *)"./ortools/sat/circuit.cc", 282, &v121);
        google::LogMessage::stream((google::LogMessage *)v120);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v120);
      }
      v66 = *((_QWORD *)this + 5);
      v67 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    }
    v68 = *(int *)(v66 + 4 * v63);
    if (((*(_QWORD *)(v67 + 8 * (v68 >> 6)) >> (v68 & 0x3F ^ 1)) & 1) != 0)
      break;
    v69 = (int)v68 >> 1;
    if (v64 == -1)
    {
      v70 = *(_DWORD *)(v66 + 4 * v63);
      v71 = operations_research::sat::Trail::GetEmptyVectorToStoreReason(*((operations_research::sat::Trail **)this + 3), *(_DWORD *)(*((_QWORD *)this + 3) + 12));
      operations_research::sat::CircuitPropagator::FillReasonForPath((uint64_t)this, v46, v71);
      v72 = operations_research::sat::Trail::EnqueueWithStoredReason(*((_QWORD *)this + 3), v70);
      v64 = v69;
      if ((v72 & 1) == 0)
        return 0;
    }
    else
    {
      v65 = *((_QWORD *)this + 3);
      *(_DWORD *)(*(_QWORD *)(v65 + 152) + 4 * v69) = v64;
      *(_DWORD *)(*(_QWORD *)(v65 + 72) + 4 * *(int *)(v65 + 12)) = v68;
      *(_DWORD *)(v65 + 8) = (*(_DWORD *)(v65 + 8) & 0xFFFFFFE | v68 & 1) ^ 0x30000001;
      *(_QWORD *)(*(_QWORD *)(v65 + 120) + 8 * v69) = *(_QWORD *)(v65 + 8);
      *(_QWORD *)(*(_QWORD *)(v65 + 24) + 8 * (v68 >> 6)) |= 1 << (v68 & 0x3F);
      ++*(_DWORD *)(v65 + 12);
    }
LABEL_63:
    if ((uint64_t)++v63 >= *((int *)this + 4))
      goto LABEL_56;
  }
  v75 = *((_QWORD *)this + 3);
  *(_QWORD *)(v75 + 144) = 0;
  operations_research::sat::CircuitPropagator::FillReasonForPath((uint64_t)this, v46, v75 + 96);
  v76 = (_QWORD *)*((_QWORD *)this + 3);
  v76[18] = 0;
  v77 = *((_QWORD *)this + 5);
  v79 = (char *)v76[13];
  v78 = v76[14];
  if ((unint64_t)v79 < v78)
  {
    *(_DWORD *)v79 = *(_DWORD *)(v77 + 4 * v63);
    v80 = v79 + 4;
    goto LABEL_108;
  }
  v85 = (char *)v76[12];
  v86 = (v79 - v85) >> 2;
  v87 = v86 + 1;
  if ((unint64_t)(v86 + 1) >> 62)
    goto LABEL_121;
  v88 = v78 - (_QWORD)v85;
  if (v88 >> 1 > v87)
    v87 = v88 >> 1;
  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
    v89 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
  {
    if (!(v89 >> 62))
    {
      v90 = operator new(4 * v89);
      goto LABEL_99;
    }
LABEL_120:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v90 = 0;
LABEL_99:
  v97 = &v90[4 * v86];
  *v97 = *(_DWORD *)(v77 + 4 * v63);
  v80 = v97 + 1;
  if (v79 != v85)
  {
    v98 = v79 - v85 - 4;
    if (v98 < 0x2C)
      goto LABEL_127;
    if ((unint64_t)(v85 - v90) < 0x20)
      goto LABEL_127;
    v99 = (v98 >> 2) + 1;
    v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
    v101 = &v79[-v100];
    v97 = (_DWORD *)((char *)v97 - v100);
    v102 = &v90[4 * v86 - 16];
    v103 = v79 - 16;
    v104 = v99 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v105 = *(_OWORD *)v103;
      *(v102 - 1) = *((_OWORD *)v103 - 1);
      *v102 = v105;
      v102 -= 2;
      v103 -= 32;
      v104 -= 8;
    }
    while (v104);
    v79 = v101;
    if (v99 != (v99 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_127:
      do
      {
        v106 = *((_DWORD *)v79 - 1);
        v79 -= 4;
        *--v97 = v106;
      }
      while (v79 != v85);
    }
  }
  v76[12] = v97;
  v76[13] = v80;
  v76[14] = &v90[4 * v89];
  if (v85)
    operator delete(v85);
LABEL_108:
  result = 0;
  v76[13] = v80;
  return result;
}

void sub_22DA3FFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::CircuitCoveringPropagator::CircuitCoveringPropagator(uint64_t a1, uint64_t a2, int **a3, uint64_t a4)
{
  int v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)a1 = &off_24F980CC8;
  *(_QWORD *)(a1 + 8) = &unk_24F980D00;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = -1431655765 * ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (uint64_t *)(a1 + 48);
  *(_DWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a4);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  std::vector<BOOL>::resize((uint64_t)v7, *(int *)(a1 + 40), 0);
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    v11 = *v7;
    do
    {
      v12 = *v9++;
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    }
    while (v9 != v10);
  }
  return a1;
}

void sub_22DA400B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v6 = (void *)v1[25];
  if (v6)
  {
    operator delete(v6);
    v7 = (void *)v1[22];
    if (!v7)
    {
LABEL_3:
      v8 = (void *)v1[19];
      if (!v8)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v7 = (void *)v1[22];
    if (!v7)
      goto LABEL_3;
  }
  v1[23] = v7;
  operator delete(v7);
  v8 = (void *)v1[19];
  if (!v8)
  {
LABEL_4:
    v9 = (void *)v1[16];
    if (!v9)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v1[20] = v8;
  operator delete(v8);
  v9 = (void *)v1[16];
  if (!v9)
  {
LABEL_5:
    v10 = (void *)v1[13];
    if (!v10)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  v1[17] = v9;
  operator delete(v9);
  v10 = (void *)v1[13];
  if (!v10)
  {
LABEL_6:
    v11 = *v4;
    if (!*v4)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  v1[14] = v10;
  operator delete(v10);
  v11 = *v4;
  if (!*v4)
  {
LABEL_7:
    v12 = *v3;
    if (!*v3)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  v1[11] = v11;
  operator delete(v11);
  v12 = *v3;
  if (!*v3)
  {
LABEL_8:
    std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(v12);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void operations_research::sat::CircuitCoveringPropagator::RegisterWith(operations_research::sat::CircuitCoveringPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  operations_research::sat::GenericLiteralWatcher *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  unint64_t v58;
  unint64_t **v59;
  _QWORD *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  _DWORD *v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  unint64_t *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  _OWORD *v79;
  unint64_t *v80;
  uint64_t v81;
  __int128 v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _DWORD *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  unsigned int v103;
  void **v104;
  operations_research::sat::GenericLiteralWatcher *v105;
  void **v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;

  v2 = a2;
  v103 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v4 = *((_DWORD *)this + 10);
  if (v4 >= 1)
  {
    v5 = 0;
    v105 = v2;
    v106 = (void **)((char *)this + 104);
    v104 = (void **)((char *)this + 80);
    v109 = (_QWORD *)((char *)v2 + 64);
    do
    {
      while (v4 <= 0)
      {
        if (++v5 >= v4)
          goto LABEL_102;
      }
      v6 = 0;
      v110 = v5;
      do
      {
        v8 = *(int *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24 * v5) + 4 * v6);
        v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 24) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (((v9 >> (v8 & 0x3F ^ 1)) & 1) != 0)
          goto LABEL_8;
        if (((v9 >> (v8 & 0x3F)) & 1) != 0)
        {
          v11 = (char *)*((_QWORD *)this + 14);
          v10 = *((_QWORD *)this + 15);
          if ((unint64_t)v11 < v10)
          {
            *(_DWORD *)v11 = v5;
            *((_DWORD *)v11 + 1) = v6;
            v7 = v11 + 8;
          }
          else
          {
            v12 = (char *)*v106;
            v13 = v11 - (_BYTE *)*v106;
            v14 = v13 >> 3;
            v15 = (v13 >> 3) + 1;
            if (v15 >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v16 = v10 - (_QWORD)v12;
            if (v16 >> 2 > v15)
              v15 = v16 >> 2;
            v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
            v18 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v17)
              v18 = v15;
            if (v18 >> 61)
              goto LABEL_103;
            v19 = 8 * v18;
            v20 = operator new(8 * v18);
            v21 = &v20[8 * v14];
            *v21 = v5;
            v21[1] = v6;
            if (v11 == v12)
            {
              v23 = &v20[8 * v14];
            }
            else
            {
              v22 = v11 - 8 - v12;
              if (v22 < 0x58)
              {
                v23 = &v20[8 * v14];
                goto LABEL_43;
              }
              v23 = &v20[8 * v14];
              if ((unint64_t)(&v11[-v13] - v20) < 0x20)
                goto LABEL_110;
              v46 = (v22 >> 3) + 1;
              v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v11[-v47];
              v23 = (char *)&v21[v47 / 0xFFFFFFFFFFFFFFFCLL];
              v49 = &v20[8 * v14 - 16];
              v50 = v11 - 16;
              v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v52 = *(_OWORD *)v50;
                *(v49 - 1) = *((_OWORD *)v50 - 1);
                *v49 = v52;
                v49 -= 2;
                v50 -= 32;
                v51 -= 4;
              }
              while (v51);
              v11 = v48;
              if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_110:
                do
                {
LABEL_43:
                  v53 = *((_QWORD *)v11 - 1);
                  v11 -= 8;
                  *((_QWORD *)v23 - 1) = v53;
                  v23 -= 8;
                }
                while (v11 != v12);
              }
            }
            v7 = v21 + 2;
            *((_QWORD *)this + 13) = v23;
            *((_QWORD *)this + 14) = v21 + 2;
            *((_QWORD *)this + 15) = &v20[v19];
            if (v12)
              operator delete(v12);
          }
          *((_QWORD *)this + 14) = v7;
          goto LABEL_8;
        }
        v24 = *((_QWORD *)this + 10);
        v25 = *((_QWORD *)this + 11);
        v26 = (_QWORD *)*((_QWORD *)v2 + 8);
        v27 = (_QWORD *)*((_QWORD *)v2 + 9);
        v28 = v27 - v26;
        v29 = 0xAAAAAAAAAAAAAAABLL * v28;
        if ((int)v8 >= -1431655765 * (int)v28)
        {
          v30 = (v8 << 32) + 0x100000000;
          v31 = v30 >> 32;
          v32 = (v30 >> 32) - v29;
          if (v30 >> 32 <= v29)
          {
            v5 = v110;
            if (v30 >> 32 < v29)
            {
              v54 = &v26[3 * SHIDWORD(v30)];
              if (v27 != v54)
              {
                v55 = (_QWORD *)*((_QWORD *)v2 + 9);
                do
                {
                  v57 = (void *)*(v55 - 3);
                  v55 -= 3;
                  v56 = v57;
                  if (v57)
                  {
                    *(v27 - 2) = v56;
                    operator delete(v56);
                  }
                  v27 = v55;
                }
                while (v55 != v54);
              }
              *((_QWORD *)v2 + 9) = v54;
            }
          }
          else
          {
            v33 = *((_QWORD *)v2 + 10);
            if (0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v27) >> 3) >= v32)
            {
              bzero(*((void **)v2 + 9), 24 * ((24 * v32 - 24) / 0x18) + 24);
              *((_QWORD *)v2 + 9) = &v27[3 * ((24 * v32 - 24) / 0x18) + 3];
              v5 = v110;
            }
            else
            {
              if (v30 < 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v26) >> 3);
              v35 = 0x5555555555555556 * ((v33 - (uint64_t)v26) >> 3);
              if (v35 > v31)
                v31 = v35;
              if (v34 >= 0x555555555555555)
                v31 = 0xAAAAAAAAAAAAAAALL;
              if (v31 > 0xAAAAAAAAAAAAAAALL)
LABEL_103:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v36 = 24 * v31;
              v37 = (char *)operator new(24 * v31);
              v38 = &v37[24 * v29];
              v107 = &v37[v36];
              bzero(v38, 24 * ((24 * v32 - 24) / 0x18) + 24);
              v39 = &v38[24 * ((24 * v32 - 24) / 0x18) + 24];
              if (v27 == v26)
              {
                v2 = v105;
                *((_QWORD *)v105 + 8) = v38;
                *((_QWORD *)v105 + 9) = v39;
                *((_QWORD *)v105 + 10) = v107;
                v5 = v110;
              }
              else
              {
                v2 = v105;
                do
                {
                  v40 = v38;
                  *((_QWORD *)v38 - 2) = 0;
                  *((_QWORD *)v38 - 1) = 0;
                  v41 = *(_OWORD *)(v27 - 3);
                  v27 -= 3;
                  *(_OWORD *)(v38 - 24) = v41;
                  v38 -= 24;
                  *((_QWORD *)v40 - 1) = v27[2];
                  *v27 = 0;
                  v27[1] = 0;
                  v27[2] = 0;
                }
                while (v27 != v26);
                v27 = (_QWORD *)*((_QWORD *)v105 + 8);
                v42 = (_QWORD *)*((_QWORD *)v105 + 9);
                *((_QWORD *)v105 + 8) = v38;
                *((_QWORD *)v105 + 9) = v39;
                *((_QWORD *)v105 + 10) = v107;
                v5 = v110;
                if (v42 != v27)
                {
                  v43 = v42;
                  do
                  {
                    v45 = (void *)*(v43 - 3);
                    v43 -= 3;
                    v44 = v45;
                    if (v45)
                    {
                      *(v42 - 2) = v44;
                      operator delete(v44);
                    }
                    v42 = v43;
                  }
                  while (v43 != v27);
                }
              }
              if (v27)
                operator delete(v27);
            }
          }
        }
        v58 = v25 - v24;
        v59 = (unint64_t **)(*v109 + 24 * (int)v8);
        v60 = v59 + 1;
        v61 = v59[1];
        v62 = (unint64_t)v59[2];
        if ((unint64_t)v61 < v62)
        {
          *v61 = v103 | ((unint64_t)(v58 >> 3) << 32);
          *v60 = v61 + 1;
          v64 = (char *)*((_QWORD *)this + 11);
          v63 = *((_QWORD *)this + 12);
          if ((unint64_t)v64 >= v63)
            goto LABEL_83;
          goto LABEL_60;
        }
        v66 = *v59;
        v67 = (char *)v61 - (char *)*v59;
        v68 = v67 >> 3;
        v69 = (v67 >> 3) + 1;
        if (v69 >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v70 = v62 - (_QWORD)v66;
        if (v70 >> 2 > v69)
          v69 = v70 >> 2;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        v108 = v69;
        if (v69)
        {
          if (v69 >> 61)
            goto LABEL_103;
          v71 = operator new(8 * v69);
        }
        else
        {
          v71 = 0;
        }
        v72 = (unint64_t *)&v71[8 * v68];
        *v72 = v103 | ((unint64_t)(v58 >> 3) << 32);
        v73 = v72 + 1;
        if (v61 == v66)
        {
          v5 = v110;
          goto LABEL_80;
        }
        v74 = (char *)(v61 - 1) - (char *)v66;
        if (v74 >= 0x58)
        {
          v75 = (char *)v61 - &v71[v67];
          v5 = v110;
          if (v75 >= 0x20)
          {
            v76 = (v74 >> 3) + 1;
            v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
            v78 = &v61[v77 / 0xFFFFFFFFFFFFFFF8];
            v72 = (unint64_t *)((char *)v72 - v77);
            v79 = &v71[8 * v68 - 16];
            v80 = v61 - 2;
            v81 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v82 = *(_OWORD *)v80;
              *(v79 - 1) = *((_OWORD *)v80 - 1);
              *v79 = v82;
              v79 -= 2;
              v80 -= 4;
              v81 -= 4;
            }
            while (v81);
            v61 = v78;
            if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_79;
          }
        }
        else
        {
          v5 = v110;
        }
        do
        {
          v83 = *--v61;
          *--v72 = v83;
        }
        while (v61 != v66);
LABEL_79:
        v61 = *v59;
LABEL_80:
        *v59 = v72;
        *v60 = v73;
        v59[2] = (unint64_t *)&v71[8 * v108];
        v2 = v105;
        if (v61)
          operator delete(v61);
        *v60 = v73;
        v64 = (char *)*((_QWORD *)this + 11);
        v63 = *((_QWORD *)this + 12);
        if ((unint64_t)v64 >= v63)
        {
LABEL_83:
          v84 = (char *)*v104;
          v85 = v64 - (_BYTE *)*v104;
          v86 = v85 >> 3;
          v87 = (v85 >> 3) + 1;
          if (v87 >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v88 = v63 - (_QWORD)v84;
          if (v88 >> 2 > v87)
            v87 = v88 >> 2;
          v17 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8;
          v89 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v17)
            v89 = v87;
          if (v89 >> 61)
            goto LABEL_103;
          v90 = 8 * v89;
          v91 = operator new(8 * v89);
          v92 = &v91[8 * v86];
          *v92 = v5;
          v92[1] = v6;
          if (v64 == v84)
          {
            v94 = &v91[8 * v86];
          }
          else
          {
            v93 = v64 - 8 - v84;
            if (v93 < 0x58)
            {
              v94 = &v91[8 * v86];
              goto LABEL_97;
            }
            v94 = &v91[8 * v86];
            if ((unint64_t)(v64 - &v91[v85]) < 0x20)
              goto LABEL_111;
            v95 = (v93 >> 3) + 1;
            v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
            v97 = &v64[-v96];
            v94 = (char *)&v92[v96 / 0xFFFFFFFFFFFFFFFCLL];
            v98 = &v91[8 * v86 - 16];
            v99 = v64 - 16;
            v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v101 = *(_OWORD *)v99;
              *(v98 - 1) = *((_OWORD *)v99 - 1);
              *v98 = v101;
              v98 -= 2;
              v99 -= 32;
              v100 -= 4;
            }
            while (v100);
            v64 = v97;
            if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_111:
              do
              {
LABEL_97:
                v102 = *((_QWORD *)v64 - 1);
                v64 -= 8;
                *((_QWORD *)v94 - 1) = v102;
                v94 -= 8;
              }
              while (v64 != v84);
            }
          }
          v65 = v92 + 2;
          *((_QWORD *)this + 10) = v94;
          *((_QWORD *)this + 11) = v92 + 2;
          *((_QWORD *)this + 12) = &v91[v90];
          if (v84)
            operator delete(v84);
          goto LABEL_100;
        }
LABEL_60:
        *(_DWORD *)v64 = v5;
        *((_DWORD *)v64 + 1) = v6;
        v65 = v64 + 8;
LABEL_100:
        *((_QWORD *)this + 11) = v65;
LABEL_8:
        ++v6;
        v4 = *((_DWORD *)this + 10);
      }
      while (v6 < v4);
      ++v5;
    }
    while (v5 < v4);
  }
LABEL_102:
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleClass((uint64_t)v2, v103, (uint64_t)this + 8);
}

void operations_research::sat::CircuitCoveringPropagator::SetLevel(operations_research::sat::CircuitCoveringPropagator *this, int a2)
{
  unint64_t v2;
  std::vector<int> *v3;
  std::vector<int>::pointer begin;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  int *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v2 = a2;
  begin = (std::vector<int>::pointer)*((_QWORD *)this + 16);
  v5 = (char *)*((_QWORD *)this + 17);
  v3 = (std::vector<int> *)((char *)this + 128);
  v6 = (v5 - (char *)begin) >> 2;
  if (v6 == a2)
    return;
  if (v6 < a2)
  {
    while (1)
    {
      v9 = (*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3;
      v10 = *((_QWORD *)this + 18);
      if ((unint64_t)v5 >= v10)
        break;
      *(_DWORD *)v5 = v9;
      v8 = (uint64_t)(v5 + 4);
LABEL_6:
      *((_QWORD *)this + 17) = v8;
      v6 = (v8 - (uint64_t)begin) >> 2;
      v5 = (char *)v8;
      if (v6 >= v2)
        return;
    }
    v11 = v6 + 1;
    if ((v6 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v10 - (_QWORD)begin;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(4 * v13);
      v15 = (int *)&v14[4 * v6];
      *v15 = v9;
      v8 = (uint64_t)(v15 + 1);
      if (v5 == (char *)begin)
        goto LABEL_31;
    }
    else
    {
      v14 = 0;
      v15 = (int *)(4 * v6);
      *(_DWORD *)(4 * v6) = v9;
      v8 = 4 * v6 + 4;
      if (v5 == (char *)begin)
        goto LABEL_31;
    }
    v16 = v5 - 4 - (char *)begin;
    if (v16 >= 0xBC)
    {
      v18 = 4 * v6;
      if (&v14[4 * v6 - 4 - (v16 & 0xFFFFFFFFFFFFFFFCLL)] > &v14[4 * v6 - 4])
      {
        v17 = v5;
      }
      else if (&v5[-(v16 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
      {
        v17 = v5;
      }
      else if ((unint64_t)(v5 - &v14[v18]) >= 0x20)
      {
        v19 = (v16 >> 2) + 1;
        v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
        v17 = &v5[-v20];
        v15 = (int *)((char *)v15 - v20);
        v21 = &v14[v18 - 16];
        v22 = v5 - 16;
        v23 = v19 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 8;
        }
        while (v23);
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_31;
      }
      else
      {
        v17 = v5;
      }
    }
    else
    {
      v17 = v5;
    }
    do
    {
      v25 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *--v15 = v25;
    }
    while (v17 != (char *)begin);
LABEL_31:
    *((_QWORD *)this + 16) = v15;
    *((_QWORD *)this + 17) = v8;
    *((_QWORD *)this + 18) = &v14[4 * v13];
    if (begin)
    {
      operator delete(begin);
      begin = v3->__begin_;
    }
    else
    {
      begin = v15;
    }
    goto LABEL_6;
  }
  v26 = begin[a2];
  v27 = *((_QWORD *)this + 13);
  v28 = (*((_QWORD *)this + 14) - v27) >> 3;
  if (v26 <= v28)
  {
    if (v26 < v28)
      *((_QWORD *)this + 14) = v27 + 8 * v26;
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 13, v26 - v28);
    begin = (std::vector<int>::pointer)*((_QWORD *)this + 16);
    v6 = (uint64_t)(*((_QWORD *)this + 17) - (_QWORD)begin) >> 2;
  }
  if (v2 <= v6)
  {
    if (v2 < v6)
      *((_QWORD *)this + 17) = &begin[v2];
  }
  else
  {
    std::vector<int>::__append(v3, v2 - v6);
  }
}

void `non-virtual thunk to'operations_research::sat::CircuitCoveringPropagator::SetLevel(operations_research::sat::CircuitCoveringPropagator *this, int a2)
{
  operations_research::sat::CircuitCoveringPropagator::SetLevel((operations_research::sat::CircuitCoveringPropagator *)((char *)this - 8), a2);
}

uint64_t operations_research::sat::CircuitCoveringPropagator::IncrementalPropagate(operations_research::sat::CircuitCoveringPropagator *this, int **a2)
{
  int *v3;
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char **v28;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v28 = (char **)((char *)this + 104);
    v5 = (char *)*((_QWORD *)this + 14);
    while (1)
    {
      v7 = *v3;
      v8 = *((_QWORD *)this + 10);
      v9 = *((_QWORD *)this + 15);
      if ((unint64_t)v5 >= v9)
        break;
      *(_QWORD *)v5 = *(_QWORD *)(v8 + 8 * v7);
      v6 = (uint64_t)(v5 + 8);
LABEL_4:
      *((_QWORD *)this + 14) = v6;
      ++v3;
      v5 = (char *)v6;
      if (v3 == v4)
        return operations_research::sat::CircuitCoveringPropagator::Propagate(this);
    }
    v10 = *v28;
    v11 = v5 - *v28;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = v9 - (_QWORD)v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(8 * v15);
      v17 = &v16[8 * v12];
      *v17 = *(_QWORD *)(v8 + 8 * v7);
      v6 = (uint64_t)(v17 + 1);
      if (v5 == v10)
        goto LABEL_30;
    }
    else
    {
      v16 = 0;
      v17 = (_QWORD *)(8 * v12);
      *(_QWORD *)(8 * v12) = *(_QWORD *)(v8 + 8 * v7);
      v6 = 8 * v12 + 8;
      if (v5 == v10)
        goto LABEL_30;
    }
    v18 = v5 - 8 - v10;
    if (v18 >= 0x168)
    {
      if (&v16[v11 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - 8])
      {
        v19 = v5;
      }
      else if (&v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
      {
        v19 = v5;
      }
      else if ((unint64_t)(v5 - &v16[v11]) >= 0x20)
      {
        v20 = (v18 >> 3) + 1;
        v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        v19 = &v5[-v21];
        v17 = (_QWORD *)((char *)v17 - v21);
        v22 = &v16[8 * v12 - 16];
        v23 = v5 - 16;
        v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 32;
          v24 -= 4;
        }
        while (v24);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_29;
      }
      else
      {
        v19 = v5;
      }
    }
    else
    {
      v19 = v5;
    }
    do
    {
      v26 = *((_QWORD *)v19 - 1);
      v19 -= 8;
      *--v17 = v26;
    }
    while (v19 != v10);
LABEL_29:
    v5 = *v28;
LABEL_30:
    *((_QWORD *)this + 13) = v17;
    *((_QWORD *)this + 14) = v6;
    *((_QWORD *)this + 15) = &v16[8 * v15];
    if (v5)
      operator delete(v5);
    goto LABEL_4;
  }
  return operations_research::sat::CircuitCoveringPropagator::Propagate(this);
}

uint64_t operations_research::sat::CircuitCoveringPropagator::Propagate(operations_research::sat::CircuitCoveringPropagator *this)
{
  std::vector<int>::size_type v2;
  int *v3;
  uint64_t *v4;
  _QWORD *v5;
  std::vector<int>::size_type v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v39;
  int v40;
  unint64_t EmptyVectorToStoreReason;
  uint64_t result;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::vector<int>::value_type v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v3 = (int *)((char *)this + 40);
  v2 = *((int *)this + 10);
  v4 = (uint64_t *)((char *)this + 152);
  v47 = -1;
  std::vector<int>::assign((std::vector<int> *)((char *)this + 152), v2, &v47);
  v5 = (_QWORD *)((char *)this + 176);
  v6 = *v3;
  v47 = -1;
  std::vector<int>::assign((std::vector<int> *)((char *)this + 176), v6, &v47);
  v7 = (int *)*((_QWORD *)this + 13);
  v8 = (int *)*((_QWORD *)this + 14);
  if (v7 != v8)
  {
    v9 = *v4;
    do
    {
      v10 = *v7;
      v11 = *(int *)(v9 + 4 * v10);
      if ((_DWORD)v11 != -1)
      {
        v19 = *(_QWORD *)(*((_QWORD *)this + 2) + 24 * (int)v10);
        v47 = *(_DWORD *)(v19 + 4 * v11) ^ 1;
        v48 = *(_DWORD *)(v19 + 4 * v7[1]) ^ 1;
        v20 = *((_QWORD *)this + 9);
        *(_QWORD *)(v20 + 144) = 0;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v20 + 96), (char *)&v47, (char *)&v49, 2uLL);
        return 0;
      }
      *(_DWORD *)(v9 + 4 * v10) = v7[1];
      v12 = v7[1];
      v13 = *(_DWORD *)(*v5 + 4 * v12);
      if (v13 != -1)
      {
        v21 = *((_QWORD *)this + 2);
        v22 = 4 * v12;
        v47 = *(_DWORD *)(*(_QWORD *)(v21 + 24 * v13) + v22) ^ 1;
        v48 = *(_DWORD *)(*(_QWORD *)(v21 + 24 * *v7) + v22) ^ 1;
        v23 = *((_QWORD *)this + 9);
        *(_QWORD *)(v23 + 144) = 0;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v23 + 96), (char *)&v47, (char *)&v49, 2uLL);
        return 0;
      }
      v14 = *v7;
      v7 += 2;
      *(_DWORD *)(*v5 + 4 * v12) = v14;
    }
    while (v7 != v8);
  }
  v15 = *((int *)this + 10);
  v16 = (uint64_t *)((char *)this + 200);
  LOBYTE(v47) = 0;
  std::vector<BOOL>::assign((char **)this + 25, v15, &v47);
  v17 = *((_DWORD *)this + 10);
  if (v17 < 1)
    return 1;
  v18 = 0;
  while (1)
  {
    v24 = *v16;
    if (((*(_QWORD *)(*v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
      goto LABEL_11;
    v25 = *(unsigned int *)(*v5 + 4 * v18);
    if ((_DWORD)v25 == -1)
    {
      if (v18 == 0xFFFFFFFF || *(_DWORD *)(*v4 + 4 * v18) == -1)
        goto LABEL_11;
      v28 = (int)v18;
      v26 = v18;
    }
    else
    {
      if (v18 == v25)
        goto LABEL_11;
      do
      {
        v26 = v25;
        v25 = *(unsigned int *)(*v5 + 4 * (int)v25);
      }
      while ((_DWORD)v25 != -1 && v18 != v25);
      v28 = (int)v26;
    }
    v29 = *((_QWORD *)this + 6);
    v30 = (v28 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v31 = *((_QWORD *)this + 19);
    v32 = *(unsigned int *)(v31 + 4 * v28);
    if ((*(_QWORD *)(v29 + v30) & (1 << v28)) != 0)
      v33 = v26;
    else
      v33 = 0xFFFFFFFFLL;
    *(_QWORD *)(v24 + v30) |= 1 << v28;
    if ((_DWORD)v32 != -1 && (_DWORD)v32 != (_DWORD)v26)
    {
      while (1)
      {
        v36 = v32;
        v44 = (unint64_t)(int)v32 >> 6;
        if ((*(_QWORD *)(v29 + 8 * v44) & (1 << v32)) != 0)
        {
          v35 = v32;
          if ((_DWORD)v33 != -1)
          {
            v45 = *((_QWORD *)this + 9);
            *(_QWORD *)(v45 + 144) = 0;
            operations_research::sat::CircuitCoveringPropagator::FillFixedPathInReason((uint64_t)this, v33, v32, v45 + 96);
            return 0;
          }
        }
        else
        {
          v35 = v33;
        }
        *(_QWORD *)(v24 + 8 * v44) |= 1 << v32;
        v32 = *(unsigned int *)(v31 + 4 * (int)v32);
        v43 = (_DWORD)v32 == -1 || (_DWORD)v32 == (_DWORD)v26;
        v33 = v35;
        if (v43)
          goto LABEL_33;
      }
    }
    LODWORD(v35) = v33;
    v36 = v26;
LABEL_33:
    if ((_DWORD)v26 == (_DWORD)v32 && (_DWORD)v35 == -1)
      break;
    if ((_DWORD)v32 == -1 && (_DWORD)v35 == -1)
    {
      v39 = *((_QWORD *)this + 9);
      v40 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24 * (int)v36) + 4 * v28);
      if (((*(_QWORD *)(*(_QWORD *)(v39 + 24) + (((unint64_t)v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v40 & 0x3F ^ 1u)) & 1) == 0)
      {
        EmptyVectorToStoreReason = operations_research::sat::Trail::GetEmptyVectorToStoreReason((operations_research::sat::Trail *)v39, *(_DWORD *)(v39 + 12));
        operations_research::sat::CircuitCoveringPropagator::FillFixedPathInReason((uint64_t)this, v26, v36, EmptyVectorToStoreReason);
        result = operations_research::sat::Trail::EnqueueWithStoredReason(*((_QWORD *)this + 9), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24 * (int)v36) + 4 * v28) ^ 1u);
        if (!(_DWORD)result)
          return result;
        v17 = *((_DWORD *)this + 10);
      }
    }
LABEL_11:
    if ((uint64_t)++v18 >= v17)
      return 1;
  }
  v46 = *((_QWORD *)this + 9);
  *(_QWORD *)(v46 + 144) = 0;
  operations_research::sat::CircuitCoveringPropagator::FillFixedPathInReason((uint64_t)this, v26, v26, v46 + 96);
  return 0;
}

uint64_t operations_research::sat::CircuitCoveringPropagator::FillFixedPathInReason(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  int *v20;
  unint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v7 = *(char **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v8 = *(_QWORD *)(result + 152);
  v30 = result;
  do
  {
    v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 24 * a2) + 4 * *(int *)(v8 + 4 * a2)) ^ 1;
    v11 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v7 < v11)
    {
      *(_DWORD *)v7 = v10;
      v9 = (uint64_t)(v7 + 4);
      goto LABEL_3;
    }
    v12 = a3;
    v13 = *(char **)a4;
    v14 = (uint64_t)&v7[-*(_QWORD *)a4];
    v15 = v14 >> 2;
    v16 = (v14 >> 2) + 1;
    if (v16 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = v11 - (_QWORD)v13;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(4 * v18);
      v20 = (int *)&v19[4 * v15];
      *v20 = v10;
      v9 = (uint64_t)(v20 + 1);
      if (v7 == v13)
      {
LABEL_24:
        a3 = v12;
        *(_QWORD *)a4 = v20;
        *(_QWORD *)(a4 + 8) = v9;
        *(_QWORD *)(a4 + 16) = &v19[4 * v18];
        if (!v13)
          goto LABEL_22;
LABEL_21:
        operator delete(v13);
        goto LABEL_22;
      }
    }
    else
    {
      v19 = 0;
      v20 = (int *)(4 * v15);
      *(_DWORD *)(4 * v15) = v10;
      v9 = 4 * v15 + 4;
      if (v7 == v13)
        goto LABEL_24;
    }
    v21 = v7 - 4 - v13;
    if (v21 < 0xBC
      || &v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4]
      || &v7[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
      || (unint64_t)(v7 - v19 - v14) < 0x20)
    {
      v22 = v7;
      a3 = v12;
      do
      {
LABEL_19:
        v23 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--v20 = v23;
      }
      while (v22 != v13);
      goto LABEL_20;
    }
    v24 = (v21 >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v22 = &v7[-v25];
    v20 = (int *)((char *)v20 - v25);
    v26 = &v19[4 * v15 - 16];
    v27 = v7 - 16;
    v28 = v24 & 0x7FFFFFFFFFFFFFF8;
    a3 = v12;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_19;
LABEL_20:
    *(_QWORD *)a4 = v20;
    *(_QWORD *)(a4 + 8) = v9;
    *(_QWORD *)(a4 + 16) = &v19[4 * v18];
    if (v13)
      goto LABEL_21;
LABEL_22:
    result = v30;
LABEL_3:
    *(_QWORD *)(a4 + 8) = v9;
    v8 = *(_QWORD *)(result + 152);
    a2 = *(_DWORD *)(v8 + 4 * a2);
    v7 = (char *)v9;
  }
  while (a2 != (_DWORD)a3);
  return result;
}

void operations_research::sat::ExactlyOnePerRowAndPerColumn(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;
  void *__p;
  char *v11;

  std::vector<std::vector<operations_research::sat::Literal>>::vector(&__p, a1);
  *(_QWORD *)(a2 + 24) = 0;
  v3 = operator new(0x20uLL);
  *v3 = &off_24F980D98;
  std::vector<std::vector<operations_research::sat::Literal>>::vector(v3 + 1, (uint64_t *)&__p);
  *(_QWORD *)(a2 + 24) = v3;
  v4 = (char *)__p;
  if (__p)
  {
    v5 = v11;
    v6 = __p;
    if (v11 != __p)
    {
      v7 = v11;
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = __p;
    }
    v11 = v4;
    operator delete(v6);
  }
}

void sub_22DA413F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  void *v10;

  operator delete(v10);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_22DA4140C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::ReindexArcs(int **a1, int **a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  int v13;
  _DWORD *v14;
  int v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  int v19;
  _DWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  int v25;
  int v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  BOOL v34;
  int *v35;
  int *v36;
  unint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;

  v2 = (char *)a1[1] - (char *)*a1;
  if ((v2 >> 2))
  {
    v40 = 0;
    v41 = 0;
    v39 = &v40;
    v5 = (v2 >> 2);
    v38 = v2 >> 2;
    if ((int)(v2 >> 2) <= 0)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = v40;
        v9 = (*a1)[v7];
        v10 = &v40;
        v11 = &v40;
        if (v40)
        {
          v12 = v40;
          while (1)
          {
            while (1)
            {
              v11 = (uint64_t **)v12;
              v13 = *((_DWORD *)v12 + 7);
              if (v9 >= v13)
                break;
              v12 = *v11;
              v10 = v11;
              if (!*v11)
                goto LABEL_13;
            }
            if (v13 >= v9)
              break;
            v12 = v11[1];
            if (!v12)
            {
              v10 = v11 + 1;
              goto LABEL_13;
            }
          }
        }
        else
        {
LABEL_13:
          v14 = operator new(0x20uLL);
          v14[7] = v9;
          *(_QWORD *)v14 = 0;
          *((_QWORD *)v14 + 1) = 0;
          *((_QWORD *)v14 + 2) = v11;
          *v10 = (uint64_t *)v14;
          if (*v39)
          {
            v39 = (uint64_t **)*v39;
            v14 = *v10;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v40, (uint64_t *)v14);
          v8 = v40;
          v6 = ++v41;
        }
        v15 = (*a2)[v7];
        v16 = &v40;
        v17 = &v40;
        if (v8)
        {
          v18 = v8;
          while (1)
          {
            while (1)
            {
              v17 = (uint64_t **)v18;
              v19 = *((_DWORD *)v18 + 7);
              if (v15 >= v19)
                break;
              v18 = *v17;
              v16 = v17;
              if (!*v17)
                goto LABEL_23;
            }
            if (v19 >= v15)
              break;
            v18 = v17[1];
            if (!v18)
            {
              v16 = v17 + 1;
              goto LABEL_23;
            }
          }
        }
        else
        {
LABEL_23:
          v20 = operator new(0x20uLL);
          v20[7] = v15;
          *(_QWORD *)v20 = 0;
          *((_QWORD *)v20 + 1) = 0;
          *((_QWORD *)v20 + 2) = v17;
          *v16 = (uint64_t *)v20;
          if (*v39)
          {
            v39 = (uint64_t **)*v39;
            v20 = *v16;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v40, (uint64_t *)v20);
          v6 = ++v41;
        }
        ++v7;
      }
      while (v7 != v5);
      v21 = v40;
      if (v40)
      {
        v22 = v40;
        do
        {
          v23 = v22;
          v22 = (uint64_t *)v22[1];
        }
        while (v22);
        v24 = 0;
        v25 = *((_DWORD *)v23 + 7);
        v26 = v25 + 1;
        if (v25 == -1)
          goto LABEL_29;
        goto LABEL_36;
      }
    }
    v28 = &v40;
    do
    {
      v29 = (uint64_t *)v28;
      v28 = (uint64_t **)v28[2];
    }
    while (*v28 == v29);
    v21 = 0;
    v24 = 0;
    v25 = *((_DWORD *)v28 + 7);
    v26 = v25 + 1;
    if (v25 == -1)
    {
LABEL_29:
      v27 = v39;
      if (v39 == &v40)
        goto LABEL_46;
      goto LABEL_38;
    }
LABEL_36:
    if (v25 <= -2)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v30 = 4 * v26;
    v24 = operator new(v30);
    bzero(v24, v30);
    v27 = v39;
    if (v39 == &v40)
    {
LABEL_46:
      if ((int)v38 < 1)
      {
        if (!v24)
        {
LABEL_52:
          std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v39, v21);
          return v6;
        }
      }
      else
      {
        v35 = *a1;
        v36 = *a2;
        do
        {
          *v35 = *((_DWORD *)v24 + *v35);
          ++v35;
          *v36 = *((_DWORD *)v24 + *v36);
          ++v36;
          --v5;
        }
        while (v5);
      }
      operator delete(v24);
      v21 = v40;
      goto LABEL_52;
    }
LABEL_38:
    v31 = 0;
    do
    {
      *((_DWORD *)v24 + *((int *)v27 + 7)) = v31;
      v32 = v27[1];
      if (v32)
      {
        do
        {
          v33 = (uint64_t **)v32;
          v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (uint64_t **)v27[2];
          v34 = *v33 == (uint64_t *)v27;
          v27 = v33;
        }
        while (!v34);
      }
      ++v31;
      v27 = v33;
    }
    while (v33 != &v40);
    goto LABEL_46;
  }
  return 0;
}

void sub_22DA41748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_22DA41774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  va_list va;

  va_start(va, a6);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)va, v6);
  _Unwind_Resume(a1);
}

void operations_research::sat::SubcircuitConstraint(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  const void *v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  const void *v21;
  int64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int64_t v34;
  char *v35;
  char *v36;
  char v38;

  v11 = *(const void **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v12 = v10 - *(_QWORD *)a2;
  if (v10 == *(_QWORD *)a2)
  {
    v14 = 0;
    v13 = 0;
    v16 = *(const void **)a3;
    v25 = *(_QWORD *)(a3 + 8);
    v17 = v25 - *(_QWORD *)a3;
    if (v25 != *(_QWORD *)a3)
      goto LABEL_4;
  }
  else
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - *(_QWORD *)a2);
    v14 = &v13[4 * (v12 >> 2)];
    memcpy(v13, v11, v12);
    v16 = *(const void **)a3;
    v15 = *(_QWORD *)(a3 + 8);
    v17 = v15 - *(_QWORD *)a3;
    if (v15 != *(_QWORD *)a3)
    {
LABEL_4:
      if (v17 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v18 = (char *)operator new(v17);
      v19 = &v18[4 * (v17 >> 2)];
      memcpy(v18, v16, v17);
      v21 = *(const void **)a4;
      v20 = *(_QWORD *)(a4 + 8);
      v22 = v20 - *(_QWORD *)a4;
      if (v20 != *(_QWORD *)a4)
        goto LABEL_6;
LABEL_10:
      v24 = 0;
      v23 = 0;
      goto LABEL_11;
    }
  }
  v19 = 0;
  v18 = 0;
  v21 = *(const void **)a4;
  v26 = *(_QWORD *)(a4 + 8);
  v22 = v26 - *(_QWORD *)a4;
  if (v26 == *(_QWORD *)a4)
    goto LABEL_10;
LABEL_6:
  if (v22 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v23 = (char *)operator new(v22);
  v24 = &v23[4 * (v22 >> 2)];
  memcpy(v23, v21, v22);
LABEL_11:
  v38 = a5;
  *(_QWORD *)(a6 + 24) = 0;
  v27 = operator new(0x58uLL);
  *v27 = &off_24F980E98;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = 0;
  v28 = v14 - v13;
  if (v14 != v13)
  {
    if (v28 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v29 = (char *)operator new(v14 - v13);
    v27[1] = v29;
    v30 = &v29[4 * (v28 >> 2)];
    v27[3] = v30;
    memcpy(v29, v13, v14 - v13);
    v27[2] = v30;
  }
  v27[4] = 0;
  v27[5] = 0;
  v27[6] = 0;
  v31 = v19 - v18;
  if (v19 != v18)
  {
    if (v31 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v32 = (char *)operator new(v19 - v18);
    v27[4] = v32;
    v33 = &v32[4 * (v31 >> 2)];
    v27[6] = v33;
    memcpy(v32, v18, v19 - v18);
    v27[5] = v33;
  }
  v27[7] = 0;
  v27[8] = 0;
  v27[9] = 0;
  v34 = v24 - v23;
  if (v24 != v23)
  {
    if (v34 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v35 = (char *)operator new(v24 - v23);
    v27[7] = v35;
    v36 = &v35[4 * (v34 >> 2)];
    v27[9] = v36;
    memcpy(v35, v23, v34);
    v27[8] = v36;
  }
  *((_DWORD *)v27 + 20) = a1;
  *((_BYTE *)v27 + 84) = v38;
  *(_QWORD *)(a6 + 24) = v27;
  if (v23)
    operator delete(v23);
  if (v18)
    operator delete(v18);
  if (v13)
    operator delete(v13);
}

void sub_22DA41A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0::~$_0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22DA41A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _QWORD *v11;
  void **v12;
  void **v13;
  void **v14;
  void *v16;
  void *v17;
  void *v18;

  v16 = *v14;
  if (*v14)
  {
    v11[8] = v16;
    operator delete(v16);
    v17 = *v13;
    if (!*v13)
    {
LABEL_3:
      v18 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v17 = *v13;
    if (!*v13)
      goto LABEL_3;
  }
  v11[5] = v17;
  operator delete(v17);
  v18 = *v12;
  if (!*v12)
  {
LABEL_5:
    operator delete(v11);
    operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0::~$_0((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v11[2] = v18;
  operator delete(v18);
  goto LABEL_5;
}

void sub_22DA41B04()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22DA41AB8);
  JUMPOUT(0x22DA41AB0);
}

void sub_22DA41B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  void *v19;
  void *v20;

  if (a17)
  {
    operator delete(a17);
    v19 = a14;
    if (!a14)
    {
LABEL_3:
      v20 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v19 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v19);
  v20 = __p;
  if (!__p)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v20);
  goto LABEL_5;
}

void sub_22DA41B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11)
    JUMPOUT(0x22DA41B38);
  JUMPOUT(0x22DA41B30);
}

uint64_t operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0::~$_0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::CircuitCovering(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v5;
  int64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  int64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  void *v18;
  void *__p;
  char *v20;
  char *v21;
  char *v22;
  char *v23;

  std::vector<std::vector<operations_research::sat::Literal>>::vector(&__p, a1);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v5 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v6)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v21 = (char *)operator new(v6);
    v22 = v21;
    v7 = &v21[4 * (v6 >> 2)];
    v23 = v7;
    memcpy(v21, v5, v6);
    v22 = v7;
  }
  *(_QWORD *)(a3 + 24) = 0;
  v8 = operator new(0x38uLL);
  *v8 = &off_24F980F50;
  std::vector<std::vector<operations_research::sat::Literal>>::vector(v8 + 1, (uint64_t *)&__p);
  v8[4] = 0;
  v8[5] = 0;
  v8[6] = 0;
  v9 = v21;
  v10 = v22 - v21;
  if (v22 != v21)
  {
    if (v10 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = (char *)operator new(v22 - v21);
    v8[4] = v11;
    v8[5] = v11;
    v12 = &v11[4 * (v10 >> 2)];
    v8[6] = v12;
    memcpy(v11, v9, v10);
    v8[5] = v12;
  }
  *(_QWORD *)(a3 + 24) = v8;
  if (v9)
  {
    v22 = v9;
    operator delete(v9);
  }
  v13 = (char *)__p;
  if (__p)
  {
    v14 = v20;
    v15 = __p;
    if (v20 != __p)
    {
      v16 = v20;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v14 - 2) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = __p;
    }
    v20 = v13;
    operator delete(v15);
  }
}

void sub_22DA41D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  operator delete(v9);
  operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0::~$_0(&a9);
  _Unwind_Resume(a1);
}

void sub_22DA41D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0::~$_0(&a9);
  _Unwind_Resume(a1);
}

void sub_22DA41D6C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15)
{
  uint64_t v15;
  void **v16;
  void *v19;
  _Unwind_Exception *v20;

  v19 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v15 + 40) = v19;
    operator delete(v19);
  }
  operations_research::sat::CircuitCovering((void **)(v15 + 8), v15, a1, a2, (uint64_t)&a15);
  v20 = a15;
  operator delete((void *)v15);
  operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0::~$_0(&a9);
  _Unwind_Resume(v20);
}

void sub_22DA41DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)&a9);
  _Unwind_Resume(a1);
}

void **operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0::~$_0(void **a1)
{
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v2 = a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (char *)*a1;
  if (*a1)
  {
    v4 = (char *)a1[1];
    v5 = *a1;
    if (v4 != v3)
    {
      v6 = (char *)a1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

void operations_research::sat::CircuitPropagator::~CircuitPropagator(operations_research::sat::CircuitPropagator *this)
{
  operations_research::sat::CircuitPropagator::~CircuitPropagator(this);
  JUMPOUT(0x22E31DF78);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  void *v18;

  *(_QWORD *)this = &off_24F980C68;
  *((_QWORD *)this + 1) = &unk_24F980CA0;
  v2 = (void *)*((_QWORD *)this + 43);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 40);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 37);
  if (v4)
  {
    *((_QWORD *)this + 38) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 33);
  if (v5)
  {
    *((_QWORD *)this + 34) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 30);
  if (v6)
  {
    *((_QWORD *)this + 31) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 27);
  if (v7)
  {
    *((_QWORD *)this + 28) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 24);
  if (v8)
  {
    *((_QWORD *)this + 25) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 21);
  if (v9)
  {
    *((_QWORD *)this + 22) = v9;
    operator delete(v9);
  }
  v10 = *((_QWORD *)this + 17);
  if (v10)
  {
    v11 = *((_QWORD *)this + 18);
    v12 = (void *)*((_QWORD *)this + 17);
    if (v11 != v10)
    {
      v13 = *((_QWORD *)this + 18);
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = (void *)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 18) = v10;
    operator delete(v12);
  }
  v16 = (void *)*((_QWORD *)this + 14);
  if (v16)
  {
    *((_QWORD *)this + 15) = v16;
    operator delete(v16);
  }
  if (*((_QWORD *)this + 11))
  {
    operator delete(*((void **)this + 8));
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  v17 = (_QWORD *)*((_QWORD *)this + 12);
  if (v17)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v17);
  v18 = (void *)*((_QWORD *)this + 5);
  if (v18)
  {
    *((_QWORD *)this + 6) = v18;
    operator delete(v18);
  }
}

void `non-virtual thunk to'operations_research::sat::CircuitPropagator::~CircuitPropagator(operations_research::sat::CircuitPropagator *this)
{
  operations_research::sat::CircuitPropagator::~CircuitPropagator((operations_research::sat::CircuitPropagator *)((char *)this - 8));
}

{
  operations_research::sat::CircuitPropagator::~CircuitPropagator((operations_research::sat::CircuitPropagator *)((char *)this - 8));
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator(operations_research::sat::CircuitCoveringPropagator *this)
{
  operations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator(this);
  JUMPOUT(0x22E31DF78);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  *(_QWORD *)this = &off_24F980CC8;
  *((_QWORD *)this + 1) = &unk_24F980D00;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 14) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 11) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
    operator delete(v8);
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    v10 = *((_QWORD *)this + 3);
    v11 = (void *)*((_QWORD *)this + 2);
    if (v10 != v9)
    {
      v12 = *((_QWORD *)this + 3);
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v9;
    operator delete(v11);
  }
}

void `non-virtual thunk to'operations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator(operations_research::sat::CircuitCoveringPropagator *this)
{
  operations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator((operations_research::sat::CircuitCoveringPropagator *)((char *)this - 8));
}

{
  operations_research::sat::CircuitCoveringPropagator::~CircuitCoveringPropagator((operations_research::sat::CircuitCoveringPropagator *)((char *)this - 8));
  JUMPOUT(0x22E31DF78);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  v9 = (char *)operator new(v8 + 12 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v27 = a1[4];
    if (!v27)
      return;
LABEL_21:
    *((_QWORD *)v27 + 4) = v14 >> 3;
    *((_QWORD *)v27 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v20 = &v5[12 * (_QWORD)v13];
      v21 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(unsigned int *)v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(unsigned int *)v20)))
          + *((unsigned int *)v20 + 1);
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = *a1;
      v24 = a1[3];
      v25 = ((v22 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v24;
      v26 = *(_QWORD *)&(*a1)[v25] & (~*(_QWORD *)&(*a1)[v25] << 7) & 0x8080808080808080;
      if (v26)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v25 = (v15 + v25) & (unint64_t)v24;
          v26 = *(_QWORD *)&v23[v25] & (~*(_QWORD *)&v23[v25] << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      v16 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v24;
      v14 += v15;
      v17 = v22 & 0x7F;
      v23[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = *(_QWORD *)v20;
      v19 = (uint64_t)&a1[1][12 * v16];
      *(_DWORD *)(v19 + 8) = *((_DWORD *)v20 + 2);
      *(_QWORD *)v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v27 = a1[4];
  if (v27)
    goto LABEL_21;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::find_or_prepare_insert<std::pair<int,int>>(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;

  v2 = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  while (1)
  {
    v9 = v7 & v8;
    v10 = *(_QWORD *)(*a1 + (v7 & v8));
    v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11)
      break;
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::prepare_insert(a1, v6);
    v2 += 8;
    v7 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    v13 = (int *)(a1[1] + 12 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v15 == (_DWORD)v3 && v14 == (_DWORD)v4)
      return v12;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_8;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<int,int>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<std::pair<int,int> const,operations_research::sat::Literal>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v39 = *(_QWORD *)(result + 32);
    if (!v39)
      return result;
LABEL_26:
    *(_QWORD *)(v39 + 32) = v15 >> 3;
    *(_QWORD *)(v39 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(unsigned int *)(*(_QWORD *)(result + 8) + 12 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(unsigned int *)(*(_QWORD *)(result + 8) + 12 * v14))))
          + *(unsigned int *)(*(_QWORD *)(result + 8) + 12 * v14 + 4);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          v26 = v25 + 12 * v18;
          v27 = (uint64_t *)(v25 + 12 * v14);
          v28 = *v27;
          *(_DWORD *)(v26 + 8) = *((_DWORD *)v27 + 2);
          *(_QWORD *)v26 = v28;
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v29 = (uint64_t *)(v25 + 12 * v14);
          v30 = *v29;
          v31 = *((_DWORD *)v29 + 2);
          v32 = 12 * v18;
          v33 = (uint64_t *)(v25 + 12 * v18);
          v34 = *((_DWORD *)v33 + 2);
          *v29 = *v33;
          *((_DWORD *)v29 + 2) = v34;
          v35 = *(_QWORD *)(result + 8) + v32;
          *(_QWORD *)v35 = v30;
          *(_DWORD *)(v35 + 8) = v31;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v36 = v14 - (v14 >> 3);
  v37 = v14 == 7;
  v38 = 6;
  if (!v37)
    v38 = v36;
  *(_QWORD *)(result + 40) = v38 - *(_QWORD *)(result + 16);
  v39 = *(_QWORD *)(result + 32);
  if (v39)
    goto LABEL_26;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[8 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_QWORD *)&a1[1][8 * v16] = *(_QWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

char *std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12)
      return v11;
    goto LABEL_17;
  }
  do
  {
    v14 = *(_OWORD *)(v12 - 24);
    v12 -= 24;
    *(_OWORD *)(v9 - 24) = v14;
    v9 -= 24;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v12 + 2);
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
  }
  while (v12 != v13);
  v15 = *a1;
  v12 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v12 != v15)
  {
    v16 = v12;
    do
    {
      v18 = (void *)*((_QWORD *)v16 - 3);
      v16 -= 24;
      v17 = v18;
      if (v18)
      {
        *((_QWORD *)v12 - 2) = v17;
        operator delete(v17);
      }
      v12 = v16;
    }
    while (v16 != v15);
    v12 = v15;
  }
  if (v12)
LABEL_17:
    operator delete(v12);
  return v11;
}

_QWORD *std::vector<std::vector<operations_research::sat::Literal>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*,std::vector<operations_research::sat::Literal>*,std::vector<operations_research::sat::Literal>*>(v3, v4, v5, v8);
  }
  return a1;
}

void sub_22DA42E90(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;

  v1[1] = v2;
  if (*v1)
    std::vector<std::vector<operations_research::sat::Literal>>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*,std::vector<operations_research::sat::Literal>*,std::vector<operations_research::sat::Literal>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_22DA42F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22DA42F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

_QWORD *std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *a1 = &off_24F980D98;
  v2 = a1[1];
  if (v2)
  {
    v3 = a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      v5 = a1[2];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *a1 = &off_24F980D98;
  v2 = a1[1];
  if (v2)
  {
    v3 = a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      v5 = a1[2];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x20uLL);
  *v2 = &off_24F980D98;
  std::vector<std::vector<operations_research::sat::Literal>>::vector(v2 + 1, v1);
  return v2;
}

void sub_22DA43178(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F980D98;
  return std::vector<std::vector<operations_research::sat::Literal>>::vector(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v1;
    operator delete(v4);
  }
}

void std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = __p[1];
  if (v2)
  {
    v3 = __p[2];
    v4 = (void *)__p[1];
    if (v3 != v2)
    {
      v5 = __p[2];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)__p[1];
    }
    __p[2] = v2;
    operator delete(v4);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  int64_t v33;
  char *v34;
  char *v35;
  uint64_t (**v36)();
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int64_t v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  int64_t v64;
  char *v65;
  char *v66;
  uint64_t (**v67)();
  uint64_t v68;
  char *__p;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v68 = *a2;
  __p = 0;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v70 = 0;
  if (!(0xAAAAAAAB00000000 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3)))
  {
    v4 = 0;
    if ((int)v3 < 1)
      goto LABEL_99;
    goto LABEL_6;
  }
  if (((0xAAAAAAAB00000000 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3)) & 0x8000000000000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v4 = (char *)operator new((0xAAAAAAAAAAAAAAACLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3)) & 0x3FFFFFFFFLL);
  __p = v4;
  v70 = &v4[4 * (int)v3];
  if ((int)v3 >= 1)
  {
LABEL_6:
    v5 = 0;
    v6 = v3;
    while (1)
    {
      v9 = 0;
      v10 = __p;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v5);
        if (v10 < v70)
        {
          *(_DWORD *)v10 = *(_DWORD *)(v11 + 4 * v9);
          v10 += 4;
          goto LABEL_12;
        }
        v12 = __p;
        v13 = (v10 - __p) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
LABEL_102:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v15 = v70 - __p;
        if ((v70 - __p) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 >> 62)
LABEL_103:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v17 = operator new(4 * v16);
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = *(_DWORD *)(v11 + 4 * v9);
          v19 = (uint64_t)(v18 + 4);
          if (v10 != __p)
          {
LABEL_23:
            v20 = v10 - 4 - __p;
            if (v20 < 0xBC
              || &v17[v10 - __p - 4 - (v20 & 0xFFFFFFFFFFFFFFFCLL)] > &v17[v10 - __p - 4]
              || &v10[-(v20 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4
              || (unint64_t)(__p - v17) < 0x20)
            {
              v21 = v10;
            }
            else
            {
              v23 = (v20 >> 2) + 1;
              v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
              v21 = &v10[-v24];
              v18 -= v24;
              v25 = &v17[4 * v13 - 16];
              v26 = v10 - 16;
              v27 = v23 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v28 = *(_OWORD *)v26;
                *(v25 - 1) = *((_OWORD *)v26 - 1);
                *v25 = v28;
                v25 -= 2;
                v26 -= 32;
                v27 -= 8;
              }
              while (v27);
              if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_26:
                __p = v18;
                v70 = &v17[4 * v16];
                if (v12)
                  goto LABEL_27;
                goto LABEL_30;
              }
            }
            do
            {
              v22 = *((_DWORD *)v21 - 1);
              v21 -= 4;
              *((_DWORD *)v18 - 1) = v22;
              v18 -= 4;
            }
            while (v21 != __p);
            goto LABEL_26;
          }
        }
        else
        {
          v17 = 0;
          v18 = (char *)(4 * v13);
          *(_DWORD *)(4 * v13) = *(_DWORD *)(v11 + 4 * v9);
          v19 = 4 * v13 + 4;
          if (v10 != __p)
            goto LABEL_23;
        }
        __p = v18;
        v70 = &v17[4 * v16];
        if (v12)
        {
LABEL_27:
          operator delete(v12);
          v10 = (char *)v19;
          goto LABEL_12;
        }
LABEL_30:
        v10 = (char *)v19;
LABEL_12:
        ++v9;
      }
      while (v9 != v6);
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v29 = v10 - __p;
      if (v10 == __p)
      {
        v31 = 0;
        v30 = 0;
      }
      else
      {
        if (v29 < 0)
          goto LABEL_106;
        v30 = (char *)operator new(v10 - __p);
        v31 = &v30[4 * (v29 >> 2)];
        memcpy(v30, __p, v29);
      }
      v75 = 0;
      v32 = operator new(0x20uLL);
      *v32 = &off_24F980E08;
      v32[1] = 0;
      v32[2] = 0;
      v32[3] = 0;
      v33 = v31 - v30;
      if (v31 != v30)
      {
        if (v33 < 0)
          goto LABEL_105;
        v34 = (char *)operator new(v31 - v30);
        v32[1] = v34;
        v35 = &v34[4 * (v33 >> 2)];
        v32[3] = v35;
        memcpy(v34, v30, v33);
        v32[2] = v35;
      }
      v75 = v32;
      if (v30)
      {
        operator delete(v30);
        v32 = v75;
        v71 = v68;
        if (!v75)
          goto LABEL_104;
        v36 = *(uint64_t (***)())v75;
      }
      else
      {
        v71 = v68;
        v36 = &off_24F980E08;
      }
      ((void (*)(_QWORD *, uint64_t *))v36[6])(v32, &v71);
      v7 = v75;
      if (v75 == v74)
      {
        v7 = v74;
        v8 = 4;
        goto LABEL_8;
      }
      if (v75)
      {
        v8 = 5;
LABEL_8:
        (*(void (**)(void))(*v7 + 8 * v8))();
      }
      if (++v5 == v6)
      {
        v37 = 0;
        while (1)
        {
          v40 = 0;
          v41 = __p;
          do
          {
            v42 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v40);
            if (v41 < v70)
            {
              *(_DWORD *)v41 = *(_DWORD *)(v42 + 4 * v37);
              v41 += 4;
              goto LABEL_58;
            }
            v43 = __p;
            v44 = (v41 - __p) >> 2;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62)
              goto LABEL_102;
            v46 = v70 - __p;
            if ((v70 - __p) >> 1 > v45)
              v45 = v46 >> 1;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
              v47 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47)
            {
              if (v47 >> 62)
                goto LABEL_103;
              v48 = operator new(4 * v47);
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = *(_DWORD *)(v42 + 4 * v37);
              v50 = (uint64_t)(v49 + 4);
              if (v41 != __p)
              {
LABEL_69:
                v51 = v41 - 4 - __p;
                if (v51 < 0xBC
                  || &v48[v41 - __p - 4 - (v51 & 0xFFFFFFFFFFFFFFFCLL)] > &v48[v41 - __p - 4]
                  || &v41[-(v51 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v41 - 4
                  || (unint64_t)(__p - v48) < 0x20)
                {
                  v52 = v41;
                }
                else
                {
                  v54 = (v51 >> 2) + 1;
                  v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
                  v52 = &v41[-v55];
                  v49 -= v55;
                  v56 = &v48[4 * v44 - 16];
                  v57 = v41 - 16;
                  v58 = v54 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v59 = *(_OWORD *)v57;
                    *(v56 - 1) = *((_OWORD *)v57 - 1);
                    *v56 = v59;
                    v56 -= 2;
                    v57 -= 32;
                    v58 -= 8;
                  }
                  while (v58);
                  if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_72:
                    __p = v49;
                    v70 = &v48[4 * v47];
                    if (v43)
                      goto LABEL_73;
                    goto LABEL_76;
                  }
                }
                do
                {
                  v53 = *((_DWORD *)v52 - 1);
                  v52 -= 4;
                  *((_DWORD *)v49 - 1) = v53;
                  v49 -= 4;
                }
                while (v52 != __p);
                goto LABEL_72;
              }
            }
            else
            {
              v48 = 0;
              v49 = (char *)(4 * v44);
              *(_DWORD *)(4 * v44) = *(_DWORD *)(v42 + 4 * v37);
              v50 = 4 * v44 + 4;
              if (v41 != __p)
                goto LABEL_69;
            }
            __p = v49;
            v70 = &v48[4 * v47];
            if (v43)
            {
LABEL_73:
              operator delete(v43);
              v41 = (char *)v50;
              goto LABEL_58;
            }
LABEL_76:
            v41 = (char *)v50;
LABEL_58:
            ++v40;
          }
          while (v40 != v6);
          v71 = 0;
          v72 = 0;
          v73 = 0;
          v60 = v41 - __p;
          if (v41 != __p)
          {
            if ((v60 & 0x8000000000000000) == 0)
            {
              v61 = (char *)operator new(v41 - __p);
              v62 = &v61[4 * (v60 >> 2)];
              memcpy(v61, __p, v60);
              goto LABEL_88;
            }
LABEL_106:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          v62 = 0;
          v61 = 0;
LABEL_88:
          v75 = 0;
          v63 = operator new(0x20uLL);
          *v63 = &off_24F980E08;
          v63[1] = 0;
          v63[2] = 0;
          v63[3] = 0;
          v64 = v62 - v61;
          if (v62 != v61)
          {
            if ((v64 & 0x8000000000000000) == 0)
            {
              v65 = (char *)operator new(v62 - v61);
              v63[1] = v65;
              v66 = &v65[4 * (v64 >> 2)];
              v63[3] = v66;
              memcpy(v65, v61, v64);
              v63[2] = v66;
              goto LABEL_91;
            }
LABEL_105:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
LABEL_91:
          v75 = v63;
          if (v61)
          {
            operator delete(v61);
            v63 = v75;
            v71 = v68;
            if (v75)
            {
              v67 = *(uint64_t (***)())v75;
              goto LABEL_95;
            }
LABEL_104:
            std::__throw_bad_function_call[abi:ne180100]();
          }
          v71 = v68;
          v67 = &off_24F980E08;
LABEL_95:
          ((void (*)(_QWORD *, uint64_t *))v67[6])(v63, &v71);
          v38 = v75;
          if (v75 == v74)
          {
            v38 = v74;
            v39 = 4;
            goto LABEL_54;
          }
          if (v75)
          {
            v39 = 5;
LABEL_54:
            (*(void (**)(void))(*v38 + 8 * v39))();
          }
          if (++v37 == v6)
          {
            v4 = __p;
            goto LABEL_99;
          }
        }
      }
    }
  }
LABEL_99:
  if (v4)
    operator delete(v4);
}

void sub_22DA43978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat28ExactlyOnePerRowAndPerColumnERKNSt3__16vectorINS2_INS0_7LiteralENS1_9a"
                     "llocatorIS3_EEEENS4_IS6_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat28ExactlyOnePerRowAndPerColumnERKNSt3__16vectorINS2_INS0_7Lit"
                                "eralENS1_9allocatorIS3_EEEENS4_IS6_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat28ExactlyOnePerRowAndPerColumnERKNSt3__16vectorINS2_INS0_7LiteralENS1_9allocatorIS3_EEEENS4_IS6_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat28ExactlyOnePerRowAndPerColumnERKNSt3__16vectorINS2_INS0_7LiteralENS1_9allocatorIS3_EEEENS4_IS6_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0,std::allocator<operations_research::sat::ExactlyOnePerRowAndPerColumn(std::vector<std::vector<operations_research::sat::Literal>> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ExactlyOneConstraint(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  int64_t v9;
  char *v10;
  char *v11;

  v4 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = v3 - *(_QWORD *)a1;
  if (v3 == *(_QWORD *)a1)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a1);
    v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(_QWORD *)(a2 + 24) = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_24F980E08;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  v9 = v7 - v6;
  if (v9)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v9);
    v8[1] = v10;
    v11 = &v10[4 * (v9 >> 2)];
    v8[3] = v11;
    memcpy(v10, v6, v9);
    v8[2] = v11;
  }
  *(_QWORD *)(a2 + 24) = v8;
  if (v6)
    operator delete(v6);
}

void sub_22DA43BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F980E08;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F980E08;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  *v2 = &off_24F980E08;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_22DA43D3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v6;
  char *v7;

  a2[1] = 0;
  *a2 = &off_24F980E08;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    a2[3] = v7;
    result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void sub_22DA43DE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::operator()((int **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20ExactlyOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_E"
                     "EEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20ExactlyOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9all"
                                "ocatorIS3_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20ExactlyOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20ExactlyOneConstraintERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ExactlyOneConstraint(std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(int **a1, uint64_t a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *i;
  uint64_t v18;
  int v19;
  operations_research::sat::SatSolver *v20;
  void *__p;
  void *v22;
  char *v23;

  __p = 0;
  v22 = 0;
  v23 = 0;
  v4 = *a1;
  v3 = a1[1];
  v5 = (char *)v3 - (char *)*a1;
  if (v3 == *a1)
  {
    v8 = 0;
    v9 = 0;
LABEL_21:
    v11 = v8;
    goto LABEL_22;
  }
  if ((unint64_t)v5 >= 0x5555555555555555)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v6 = v5 >> 2;
  v7 = (char *)operator new(12 * (v5 >> 2));
  v8 = v7;
  v9 = &v7[12 * v6];
  v22 = v7;
  if (v3 == v4)
    goto LABEL_21;
  v10 = v22;
  v11 = v7;
  do
  {
    while (1)
    {
      v12 = *v4;
      if (v8 >= v9)
        break;
      *(_DWORD *)v8 = v12;
      *(_QWORD *)(v8 + 4) = 1;
      v10 = v8 + 12;
      ++v4;
      v8 += 12;
      if (v4 == v3)
        goto LABEL_19;
    }
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 2) + 1;
    if (v13 > 0x1555555555555555)
    {
      v22 = v10;
      v23 = v9;
      __p = v11;
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((v9 - v11) >> 2) > v13)
      v13 = 0x5555555555555556 * ((v9 - v11) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v14 = 0x1555555555555555;
    else
      v14 = v13;
    if (v14 > 0x1555555555555555)
    {
      v22 = v10;
      v23 = v9;
      __p = v11;
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v15 = (char *)operator new(12 * v14);
    v16 = &v15[4 * ((v8 - v11) >> 2)];
    *(_DWORD *)v16 = v12;
    *(_QWORD *)(v16 + 4) = 1;
    for (i = v16; v8 != v11; *((_DWORD *)i + 2) = v19)
    {
      v18 = *(_QWORD *)(v8 - 12);
      v8 -= 12;
      v19 = *((_DWORD *)v8 + 2);
      *(_QWORD *)(i - 12) = v18;
      i -= 12;
    }
    v9 = &v15[12 * v14];
    v10 = v16 + 12;
    if (v11)
      operator delete(v11);
    v11 = i;
    ++v4;
    v8 = (char *)v10;
  }
  while (v4 != v3);
LABEL_19:
  v22 = v10;
LABEL_22:
  v23 = v9;
  __p = v11;
  v20 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
  operations_research::sat::SatSolver::AddLinearConstraint((uint64_t)v20, 1, 1, 1, 1, &__p);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_22DA440E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24F980E98;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24F980E98;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x58uLL);
  *v2 = &off_24F980E98;
  std::__compressed_pair_elem<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DA44224(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F980E98;
  return std::__compressed_pair_elem<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)__p[7];
  if (v2)
  {
    __p[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[4];
  if (v3)
  {
    __p[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)__p[1];
  if (v4)
  {
    __p[2] = v4;
    operator delete(v4);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  operations_research::sat::SatSolver *v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  _BYTE *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  _BYTE *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t v67;
  char v68;
  operations_research::sat::CircuitPropagator *v69;
  operations_research::sat::GenericLiteralWatcher *v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t **v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void *v80;
  char *v81;
  void *v82;
  void *v83;
  char *v84;
  char *v85;
  void *v86;
  char *v87;
  void *v88;
  void *v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t *v92;
  operations_research::sat::SatSolver *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  void *__p;
  char *v102;
  void *v103;
  char *v104;
  _QWORD *v105;
  uint64_t *v106[3];
  uint64_t **v107;
  unint64_t v108[3];
  unint64_t *v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v100 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  LODWORD(v108[0]) = v4 >> 2;
  LODWORD(v106[0]) = 0;
  if (SLODWORD(v108[0]) < 1)
  {
    v106[0] = (uint64_t *)google::MakeCheckOpString<int,int>((int)v108, (int)v106, "num_arcs > 0");
    if (v106[0])
    {
      v90 = google::LogMessageFatal::LogMessageFatal(v108, (google::glog_internal_namespace_ *)"./ortools/sat/circuit.cc", 504, v106);
      google::LogMessage::stream((google::LogMessage *)v90);
      goto LABEL_117;
    }
  }
  v99 = (_QWORD *)(a1 + 32);
  v108[0] = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
  LODWORD(v103) = v4 >> 2;
  v5 = (int)((uint64_t)v4 >> 2);
  if (v108[0] != v5)
  {
    v106[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v108, (int)&v103, "heads.size() == num_arcs");
    if (v106[0])
    {
      v91 = google::LogMessageFatal::LogMessageFatal(v108, (google::glog_internal_namespace_ *)"./ortools/sat/circuit.cc", 505, v106);
      google::LogMessage::stream((google::LogMessage *)v91);
      goto LABEL_117;
    }
  }
  v6 = (uint64_t *)(a1 + 56);
  v108[0] = (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2;
  LODWORD(v103) = v4 >> 2;
  if (v108[0] != v5)
  {
    v106[0] = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v108, (int)&v103, "literals.size() == num_arcs");
    if (v106[0])
    {
      v92 = google::LogMessageFatal::LogMessageFatal(v108, (google::glog_internal_namespace_ *)"./ortools/sat/circuit.cc", 506, v106);
      google::LogMessage::stream((google::LogMessage *)v92);
LABEL_117:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v108);
    }
  }
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v3);
  std::vector<std::vector<operations_research::sat::Literal>>::vector(&v103, *(int *)(a1 + 80));
  v93 = v7;
  v94 = a1;
  v95 = v3;
  std::vector<std::vector<operations_research::sat::Literal>>::vector(&__p, *(int *)(a1 + 80));
  if ((int)(v4 >> 2) >= 1)
  {
    v8 = 0;
    v97 = (uint64_t *)(a1 + 56);
    v98 = (v4 >> 2);
    while (1)
    {
      v9 = *(_DWORD *)(*v99 + 4 * v8);
      v10 = (char *)__p + 24 * *(int *)(*v100 + 4 * v8);
      v11 = *v6;
      v12 = (uint64_t *)(v10 + 8);
      v13 = (char *)*((_QWORD *)v10 + 1);
      v14 = *((_QWORD *)v10 + 2);
      if ((unint64_t)v13 >= v14)
        break;
      *(_DWORD *)v13 = *(_DWORD *)(v11 + 4 * v8);
      v15 = (uint64_t)(v13 + 4);
LABEL_29:
      *v12 = v15;
      v33 = (char *)v103 + 24 * v9;
      v34 = *v6;
      v35 = (uint64_t *)(v33 + 8);
      v36 = (char *)*((_QWORD *)v33 + 1);
      v37 = *((_QWORD *)v33 + 2);
      if ((unint64_t)v36 < v37)
      {
        *(_DWORD *)v36 = *(_DWORD *)(v34 + 4 * v8);
        *v35 = (uint64_t)(v36 + 4);
        if (++v8 == v98)
          goto LABEL_50;
      }
      else
      {
        v38 = *(char **)v33;
        v39 = (uint64_t)&v36[-*(_QWORD *)v33];
        v40 = v39 >> 2;
        v41 = (v39 >> 2) + 1;
        if (v41 >> 62)
LABEL_118:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v42 = v37 - (_QWORD)v38;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          if (v43 >> 62)
LABEL_119:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v44 = operator new(4 * v43);
          v45 = &v44[4 * v40];
          *v45 = *(_DWORD *)(v34 + 4 * v8);
          v46 = (uint64_t)(v45 + 1);
          if (v36 == v38)
            goto LABEL_47;
LABEL_41:
          v47 = v36 - 4 - v38;
          if (v47 < 0x2C)
            goto LABEL_124;
          if ((unint64_t)(v36 - &v44[v39]) < 0x20)
            goto LABEL_124;
          v48 = (v47 >> 2) + 1;
          v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
          v50 = &v36[-v49];
          v45 = (_DWORD *)((char *)v45 - v49);
          v51 = &v44[4 * v40 - 16];
          v52 = v36 - 16;
          v53 = v48 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *v51 = v54;
            v51 -= 2;
            v52 -= 32;
            v53 -= 8;
          }
          while (v53);
          v36 = v50;
          if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_124:
            do
            {
              v55 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *--v45 = v55;
            }
            while (v36 != v38);
          }
          goto LABEL_47;
        }
        v44 = 0;
        v45 = (_DWORD *)(4 * v40);
        *(_DWORD *)(4 * v40) = *(_DWORD *)(v34 + 4 * v8);
        v46 = 4 * v40 + 4;
        if (v36 != v38)
          goto LABEL_41;
LABEL_47:
        *(_QWORD *)v33 = v45;
        *v35 = v46;
        *((_QWORD *)v33 + 2) = &v44[4 * v43];
        if (v38)
          operator delete(v38);
        v6 = v97;
        *v35 = v46;
        if (++v8 == v98)
          goto LABEL_50;
      }
    }
    v16 = *(char **)v10;
    v17 = (uint64_t)&v13[-*(_QWORD *)v10];
    v18 = v17 >> 2;
    v19 = (v17 >> 2) + 1;
    if (v19 >> 62)
      goto LABEL_118;
    v20 = v14 - (_QWORD)v16;
    if (v20 >> 1 > v19)
      v19 = v20 >> 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    v96 = *(_DWORD *)(*v99 + 4 * v8);
    if (v21)
    {
      if (v21 >> 62)
        goto LABEL_119;
      v22 = operator new(4 * v21);
      v23 = &v22[4 * v18];
      *v23 = *(_DWORD *)(v11 + 4 * v8);
      v15 = (uint64_t)(v23 + 1);
      if (v13 == v16)
        goto LABEL_26;
    }
    else
    {
      v22 = 0;
      v23 = (_DWORD *)(4 * v18);
      *(_DWORD *)(4 * v18) = *(_DWORD *)(v11 + 4 * v8);
      v15 = 4 * v18 + 4;
      if (v13 == v16)
      {
LABEL_26:
        *(_QWORD *)v10 = v23;
        *v12 = v15;
        *((_QWORD *)v10 + 2) = &v22[4 * v21];
        if (v16)
          operator delete(v16);
        v9 = v96;
        v6 = v97;
        goto LABEL_29;
      }
    }
    v24 = v13 - 4 - v16;
    if (v24 < 0x2C)
      goto LABEL_125;
    if ((unint64_t)(v13 - &v22[v17]) < 0x20)
      goto LABEL_125;
    v25 = (v24 >> 2) + 1;
    v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
    v27 = &v13[-v26];
    v23 = (_DWORD *)((char *)v23 - v26);
    v28 = &v22[4 * v18 - 16];
    v29 = v13 - 16;
    v30 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 8;
    }
    while (v30);
    v13 = v27;
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_125:
      do
      {
        v32 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v23 = v32;
      }
      while (v13 != v16);
    }
    goto LABEL_26;
  }
LABEL_50:
  v56 = v103;
  v57 = v104;
  if (v104 == v103)
    goto LABEL_62;
  if (!*(_BYTE *)(v94 + 84))
  {
    operations_research::sat::ExactlyOneConstraint((uint64_t)v103, (uint64_t)v108);
    v106[0] = (uint64_t *)v95;
    if (!v109)
LABEL_120:
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(unint64_t *, uint64_t **))(*v109 + 48))(v109, v106);
    v74 = v109;
    if (v109 == v108)
    {
      v75 = 4;
      v74 = v108;
    }
    else
    {
      if (!v109)
      {
LABEL_88:
        if (*((_BYTE *)v93 + 496))
          goto LABEL_93;
        v56 = v103;
        v57 = v104;
        goto LABEL_52;
      }
      v75 = 5;
    }
    (*(void (**)(void))(*v74 + 8 * v75))();
    goto LABEL_88;
  }
LABEL_52:
  if (0xAAAAAAAAAAAAAAABLL * ((v57 - v56) >> 3) >= 2)
  {
    v58 = 1;
    v59 = 24;
    while (1)
    {
      operations_research::sat::ExactlyOneConstraint((uint64_t)&v56[v59], (uint64_t)v108);
      v106[0] = (uint64_t *)v95;
      if (!v109)
        goto LABEL_120;
      (*(void (**)(unint64_t *, uint64_t **))(*v109 + 48))(v109, v106);
      v60 = v109;
      if (v109 == v108)
        break;
      if (v109)
      {
        v61 = 5;
LABEL_59:
        (*(void (**)(void))(*v60 + 8 * v61))();
      }
      if (*((_BYTE *)v93 + 496))
        goto LABEL_93;
      v56 = v103;
      ++v58;
      v59 += 24;
      if (0xAAAAAAAAAAAAAAABLL * ((v104 - (_BYTE *)v103) >> 3) <= v58)
        goto LABEL_62;
    }
    v60 = v108;
    v61 = 4;
    goto LABEL_59;
  }
LABEL_62:
  v62 = __p;
  v63 = v102;
  if (v102 != __p)
  {
    if (*(_BYTE *)(v94 + 84))
    {
LABEL_64:
      if (0xAAAAAAAAAAAAAAABLL * ((v63 - v62) >> 3) >= 2)
      {
        v64 = 1;
        v65 = 24;
        while (1)
        {
          operations_research::sat::ExactlyOneConstraint((uint64_t)&v62[v65], (uint64_t)v106);
          v105 = (_QWORD *)v95;
          if (!v107)
            goto LABEL_121;
          ((void (*)(uint64_t **, _QWORD **))(*v107)[6])(v107, &v105);
          v66 = v107;
          if (v107 == v106)
            break;
          if (v107)
          {
            v67 = 5;
LABEL_71:
            ((void (*)(void))(*v66)[v67])();
          }
          if (*((_BYTE *)v93 + 496))
            goto LABEL_93;
          v62 = __p;
          ++v64;
          v65 += 24;
          if (0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 3) <= v64)
            goto LABEL_74;
        }
        v66 = v106;
        v67 = 4;
        goto LABEL_71;
      }
      goto LABEL_74;
    }
    operations_research::sat::ExactlyOneConstraint((uint64_t)__p, (uint64_t)v106);
    v105 = (_QWORD *)v95;
    if (!v107)
LABEL_121:
      std::__throw_bad_function_call[abi:ne180100]();
    ((void (*)(uint64_t **, _QWORD **))(*v107)[6])(v107, &v105);
    v76 = v107;
    if (v107 == v106)
    {
      v77 = 4;
      v76 = v106;
    }
    else
    {
      if (!v107)
      {
LABEL_92:
        if (*((_BYTE *)v93 + 496))
          goto LABEL_93;
        v62 = __p;
        v63 = v102;
        goto LABEL_64;
      }
      v77 = 5;
    }
    ((void (*)(void))(*v76)[v77])();
    goto LABEL_92;
  }
LABEL_74:
  v68 = *(_BYTE *)(v94 + 84);
  v69 = (operations_research::sat::CircuitPropagator *)operator new();
  operations_research::sat::CircuitPropagator::CircuitPropagator((uint64_t)v69, *(_DWORD *)(v94 + 80), v100, v99, v6, v68, v95);
  v70 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v95);
  operations_research::sat::CircuitPropagator::RegisterWith(v69, v70);
  v71 = (_QWORD *)operator new();
  *v71 = &off_24F980F08;
  v71[1] = v69;
  v105 = v71;
  v72 = *(_QWORD **)(v95 + 56);
  if ((unint64_t)v72 >= *(_QWORD *)(v95 + 64))
  {
    v73 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v95 + 48), &v105);
  }
  else
  {
    *v72 = v71;
    v73 = (char *)(v72 + 1);
  }
  *(_QWORD *)(v95 + 56) = v73;
LABEL_93:
  v78 = (char *)__p;
  if (__p)
  {
    v79 = v102;
    v80 = __p;
    if (v102 != __p)
    {
      v81 = v102;
      do
      {
        v83 = (void *)*((_QWORD *)v81 - 3);
        v81 -= 24;
        v82 = v83;
        if (v83)
        {
          *((_QWORD *)v79 - 2) = v82;
          operator delete(v82);
        }
        v79 = v81;
      }
      while (v81 != v78);
      v80 = __p;
    }
    v102 = v78;
    operator delete(v80);
  }
  v84 = (char *)v103;
  if (v103)
  {
    v85 = v104;
    v86 = v103;
    if (v104 != v103)
    {
      v87 = v104;
      do
      {
        v89 = (void *)*((_QWORD *)v87 - 3);
        v87 -= 24;
        v88 = v89;
        if (v89)
        {
          *((_QWORD *)v85 - 2) = v88;
          operator delete(v88);
        }
        v85 = v87;
      }
      while (v87 != v84);
      v86 = v103;
    }
    v104 = v84;
    operator delete(v86);
  }
}

void sub_22DA44B78()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 128));
}

void sub_22DA44B80()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 128));
}

void sub_22DA44B88()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 128));
}

void sub_22DA44B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,char *a21,char *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;

  v29 = a28;
  if (a28 == &a25)
  {
    v30 = 4;
    v29 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  if (__p)
  {
    v31 = a19;
    v32 = __p;
    if (a19 != __p)
    {
      v33 = a19;
      do
      {
        v35 = (void *)*((_QWORD *)v33 - 3);
        v33 -= 24;
        v34 = v35;
        if (v35)
        {
          *(v31 - 2) = v34;
          operator delete(v34);
        }
        v31 = v33;
      }
      while (v33 != __p);
      v32 = __p;
    }
    operator delete(v32);
  }
  if (a21)
  {
    v36 = a22;
    v37 = a21;
    if (a22 != a21)
    {
      v38 = a22;
      do
      {
        v40 = (void *)*((_QWORD *)v38 - 3);
        v38 -= 24;
        v39 = v40;
        if (v40)
        {
          *(v36 - 2) = v39;
          operator delete(v39);
        }
        v36 = v38;
      }
      while (v38 != a21);
      v37 = a21;
    }
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20SubcircuitConstraintEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_I"
                     "NS0_7LiteralENS3_IS8_EEEEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20SubcircuitConstraintEiRKNSt3__16vectorIiNS1_9allocatorIiEEE"
                                "ES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20SubcircuitConstraintEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20SubcircuitConstraintEiRKNSt3__16vectorIiNS1_9allocatorIiEEEES7_RKNS2_INS0_7LiteralENS3_IS8_EEEEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,std::allocator<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::SubcircuitConstraint(int,std::vector<int> const&,std::vector<int> const&,std::vector<operations_research::sat::Literal> const&,BOOL)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  int v19;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v15 = *(_BYTE **)(a2 + 48);
  v14 = *(_BYTE **)(a2 + 56);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = (char *)operator new(v14 - v15);
    *(_QWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 56) = v17;
    v18 = &v17[4 * (v16 >> 2)];
    *(_QWORD *)(a1 + 64) = v18;
    memcpy(v17, v15, v16);
    *(_QWORD *)(a1 + 56) = v18;
  }
  v19 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v19;
  return a1;
}

void sub_22DA44E88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 32) = v6;
  operator delete(v6);
  v7 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  *(_QWORD *)(v1 + 8) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_22DA44EE8()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22DA44EACLL);
  JUMPOUT(0x22DA44EA4);
}

_QWORD *std::vector<std::vector<operations_research::sat::Literal>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22DA44FA0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<std::vector<operations_research::sat::Literal>>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::CircuitPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F980F08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CircuitPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F980F08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *a1 = &off_24F980F50;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = a1[1];
  if (v3)
  {
    v4 = a1[2];
    v5 = (void *)a1[1];
    if (v4 != v3)
    {
      v6 = a1[2];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *a1 = &off_24F980F50;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = a1[1];
  if (v3)
  {
    v4 = a1[2];
    v5 = (void *)a1[1];
    if (v4 != v3)
    {
      v6 = a1[2];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x38uLL);
  *v2 = &off_24F980F50;
  std::__compressed_pair_elem<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_22DA451C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F980F50;
  return std::__compressed_pair_elem<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0 const&,0ul>(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = a1[1];
  if (v3)
  {
    v4 = a1[2];
    v5 = (void *)a1[1];
    if (v4 != v3)
    {
      v6 = a1[2];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
}

void std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  v3 = __p[1];
  if (v3)
  {
    v4 = __p[2];
    v5 = (void *)__p[1];
    if (v4 != v3)
    {
      v6 = __p[2];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)__p[1];
    }
    __p[2] = v3;
    operator delete(v5);
  }
  operator delete(__p);
}

char *std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  operations_research::sat::CircuitCoveringPropagator *v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;
  operations_research::sat::GenericLiteralWatcher *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *result;
  void *__p;
  char *v17;
  _QWORD *v18;

  v3 = (uint64_t *)(a1 + 8);
  v4 = *a2;
  v5 = (operations_research::sat::CircuitCoveringPropagator *)operator new();
  std::vector<std::vector<operations_research::sat::Literal>>::vector(&__p, v3);
  operations_research::sat::CircuitCoveringPropagator::CircuitCoveringPropagator((uint64_t)v5, (uint64_t)&__p, (int **)(a1 + 32), v4);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = v17;
    v8 = __p;
    if (v17 != __p)
    {
      v9 = v17;
      do
      {
        v11 = (void *)*((_QWORD *)v9 - 3);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *((_QWORD *)v7 - 2) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = __p;
    }
    v17 = v6;
    operator delete(v8);
  }
  v12 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v4);
  operations_research::sat::CircuitCoveringPropagator::RegisterWith(v5, v12);
  v13 = (_QWORD *)operator new();
  *v13 = &off_24F980FC0;
  v13[1] = v5;
  v18 = v13;
  v14 = *(_QWORD **)(v4 + 56);
  if ((unint64_t)v14 >= *(_QWORD *)(v4 + 64))
  {
    result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v4 + 48), &v18);
  }
  else
  {
    *v14 = v13;
    result = (char *)(v14 + 1);
  }
  *(_QWORD *)(v4 + 56) = result;
  return result;
}

void sub_22DA45434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  if (a9)
    std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()((uint64_t)&a9, a9);
  MEMORY[0x22E31DF78](v9, 0x10B1C4016B17919);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat15CircuitCoveringERKNSt3__16vectorINS2_INS0_7LiteralENS1_9allocatorIS3_E"
                     "EEENS4_IS6_EEEERKNS2_IiNS4_IiEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat15CircuitCoveringERKNSt3__16vectorINS2_INS0_7LiteralENS1_9all"
                                "ocatorIS3_EEEENS4_IS6_EEEERKNS2_IiNS4_IiEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat15CircuitCoveringERKNSt3__16vectorINS2_INS0_7LiteralENS1_9allocatorIS3_EEEENS4_IS6_EEEERKNS2_IiNS4_IiEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat15CircuitCoveringERKNSt3__16vectorINS2_INS0_7LiteralENS1_9allocatorIS3_EEEENS4_IS6_EEEERKNS2_IiNS4_IiEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,std::allocator<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0 const&,0ul>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;

  v4 = std::vector<std::vector<operations_research::sat::Literal>>::vector(a1, a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  v6 = (_BYTE *)a2[3];
  v5 = (_BYTE *)a2[4];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    a1[3] = v8;
    a1[4] = v8;
    v9 = &v8[4 * (v7 >> 2)];
    a1[5] = v9;
    memcpy(v8, v6, v7);
    a1[4] = v9;
  }
  return a1;
}

void sub_22DA45568(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::__compressed_pair_elem<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::CircuitCovering(std::vector<std::vector<operations_research::sat::Literal>> const&,std::vector<int> const&)::$_0 const&,0ul>((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::CircuitCoveringPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F980FC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CircuitCoveringPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F980FC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void OUTLINED_FUNCTION_0_4(void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_1_3(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 16) = __p;
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_2_1(uint64_t a1, uint64_t a2)
{
  return a2;
}

operations_research::sat::LiteralWatchers *operations_research::sat::LiteralWatchers::LiteralWatchers(operations_research::sat::LiteralWatchers *this, operations_research::sat::Model *a2)
{
  operations_research::sat::Trail *v4;

  *((_BYTE *)this + 31) = 15;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  *(_QWORD *)this = &off_24F981008;
  strcpy((char *)this + 8, "LiteralWatchers");
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = (char *)this + 88;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 32) = -1;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_BYTE *)this + 168) = 1;
  *((_QWORD *)this + 22) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)a2);
  v4 = (operations_research::sat::Trail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  strcpy((char *)this + 216, "LiteralWatchers");
  *((_QWORD *)this + 23) = v4;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_BYTE *)this + 239) = 15;
  *((_DWORD *)this + 60) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = (char *)this + 280;
  *((_BYTE *)this + 296) = 1;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_DWORD *)this + 82) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 42) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  operations_research::sat::Trail::RegisterPropagator(v4, this);
  return this;
}

void sub_22DA457A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v3;
  operations_research::StatsGroup *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v10;
  void *v11;

  v7 = v6;
  v8 = v5;
  absl::lts_2020_02_25::flat_hash_map<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::~flat_hash_map(v7);
  v10 = *v8;
  if (*v8)
  {
    *(_QWORD *)(v1 + 312) = v10;
    operator delete(v10);
  }
  operations_research::StatsGroup::~StatsGroup(v4);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v3);
  v11 = *(void **)(v1 + 64);
  if (v11)
  {
    *(_QWORD *)(v1 + 72) = v11;
    operator delete(v11);
  }
  std::vector<std::vector<int>>::~vector[abi:ne180100](v2);
  *(_QWORD *)v1 = off_24F980668;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

operations_research::sat::BinaryImplicationGraph *operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::BinaryImplicationGraph *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BinaryImplicationGraph>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BinaryImplicationGraph>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::BinaryImplicationGraph>(void)::d)
  {
    return (operations_research::sat::BinaryImplicationGraph *)v4[5];
  }
LABEL_12:
  v8 = (operations_research::sat::BinaryImplicationGraph *)operator new();
  operations_research::sat::BinaryImplicationGraph::BinaryImplicationGraph(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::BinaryImplicationGraph>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::BinaryImplicationGraph>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::BinaryImplicationGraph>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9810E0;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DA459A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F3C40157C0B0ALL);
  _Unwind_Resume(a1);
}

void operations_research::sat::Trail::RegisterPropagator(operations_research::sat::Trail *this, operations_research::sat::SatPropagator *a2)
{
  void **v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27[2];
  int v28;
  uint64_t *v29;

  v4 = (void **)((char *)this + 272);
  v5 = (char *)*((_QWORD *)this + 34);
  v6 = (char *)*((_QWORD *)this + 35);
  if (v5 == v6)
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 34, 4uLL);
    v5 = (char *)*((_QWORD *)this + 34);
    v6 = (char *)*((_QWORD *)this + 35);
  }
  v7 = (v6 - v5) >> 3;
  v27[0] = v7;
  v28 = 16;
  if ((unint64_t)(v6 - v5) > 0x7F)
  {
    v29 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v27, (int)&v28, "propagators_.size() < 16");
    if (v29)
    {
      google::LogMessageFatal::LogMessageFatal(v27, (google::glog_internal_namespace_ *)"./ortools/sat/sat_base.h", 570, &v29);
      google::LogMessage::stream((google::LogMessage *)v27);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v27);
    }
    v5 = (char *)*((_QWORD *)this + 34);
    v6 = (char *)*((_QWORD *)this + 35);
    v7 = (v6 - v5) >> 3;
    *((_DWORD *)a2 + 8) = v7;
    v8 = *((_QWORD *)this + 36);
    if ((unint64_t)v6 < v8)
      goto LABEL_5;
  }
  else
  {
    *((_DWORD *)a2 + 8) = v7;
    v8 = *((_QWORD *)this + 36);
    if ((unint64_t)v6 < v8)
    {
LABEL_5:
      *(_QWORD *)v6 = a2;
      v9 = (uint64_t)(v6 + 8);
      goto LABEL_30;
    }
  }
  v10 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v11 = v8 - (_QWORD)v5;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v7];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v9 = (uint64_t)(v14 + 8);
    v16 = v6 - v5;
    if (v6 == v5)
      goto LABEL_28;
  }
  else
  {
    v13 = 0;
    v14 = (char *)(8 * v7);
    v15 = 0;
    *(_QWORD *)(8 * v7) = a2;
    v9 = 8 * v7 + 8;
    v16 = v6 - v5;
    if (v6 == v5)
      goto LABEL_28;
  }
  v17 = v16 - 8;
  if (v17 >= 0x58)
  {
    v19 = &v13[8 * v7];
    if ((unint64_t)(v6 - v19) >= 0x20)
    {
      v20 = (v17 >> 3) + 1;
      v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = &v6[-v21];
      v14 -= v21;
      v22 = v19 - 16;
      v23 = v6 - 16;
      v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *(_OWORD *)v23;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
        *(_OWORD *)v22 = v25;
        v22 -= 32;
        v23 -= 32;
        v24 -= 4;
      }
      while (v24);
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_27;
    }
    else
    {
      v18 = v6;
    }
  }
  else
  {
    v18 = v6;
  }
  do
  {
    v26 = *((_QWORD *)v18 - 1);
    v18 -= 8;
    *((_QWORD *)v14 - 1) = v26;
    v14 -= 8;
  }
  while (v18 != v5);
LABEL_27:
  v5 = (char *)*v4;
LABEL_28:
  *((_QWORD *)this + 34) = v14;
  *((_QWORD *)this + 35) = v9;
  *((_QWORD *)this + 36) = v15;
  if (v5)
    operator delete(v5);
LABEL_30:
  *((_QWORD *)this + 35) = v9;
}

void sub_22DA45BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

void operations_research::sat::LiteralWatchers::~LiteralWatchers(operations_research::sat::LiteralWatchers *this)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  *(_QWORD *)this = &off_24F981008;
  v2 = (void **)*((_QWORD *)this + 38);
  v3 = (void **)*((_QWORD *)this + 39);
  if (v2 == v3)
  {
    *((_QWORD *)this + 39) = v2;
    if (!*((_QWORD *)this + 45))
      goto LABEL_4;
    goto LABEL_3;
  }
  do
  {
    v14 = *v2++;
    v13 = v14;
    if (v14)
      operator delete(v13);
  }
  while (v2 != v3);
  *((_QWORD *)this + 39) = *((_QWORD *)this + 38);
  if (*((_QWORD *)this + 45))
  {
LABEL_3:
    operator delete(*((void **)this + 42));
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 42) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 43) = 0;
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 45) = 0;
  }
LABEL_4:
  v4 = (_QWORD *)*((_QWORD *)this + 46);
  if (v4)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v4);
  v5 = (void *)*((_QWORD *)this + 38);
  if (v5)
  {
    *((_QWORD *)this + 39) = v5;
    operator delete(v5);
  }
  operations_research::StatsGroup::~StatsGroup((operations_research::sat::LiteralWatchers *)((char *)this + 216));
  v6 = (void *)*((_QWORD *)this + 18);
  if (v6)
  {
    *((_QWORD *)this + 19) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 13) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 9) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    v10 = *((_QWORD *)this + 6);
    v11 = (void *)*((_QWORD *)this + 5);
    if (v10 != v9)
    {
      v12 = *((_QWORD *)this + 6);
      do
      {
        v16 = *(void **)(v12 - 24);
        v12 -= 24;
        v15 = v16;
        if (v16)
        {
          *(_QWORD *)(v10 - 16) = v15;
          operator delete(v15);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v9;
    operator delete(v11);
  }
  *(_QWORD *)this = off_24F980668;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  operations_research::sat::LiteralWatchers::~LiteralWatchers(this);
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::LiteralWatchers::Resize(std::vector<int> *this, int a2)
{
  unint64_t v4;
  std::__compressed_pair<int *> *p_end_cap;
  std::vector<int>::pointer begin;
  int *value;
  unint64_t v8;
  int *v9;
  int *v10;
  void *v11;
  void *v12;
  int *v13;
  unint64_t v14;
  std::vector<int>::pointer v15;
  std::vector<int>::pointer end;
  int v17;
  std::vector<int>::pointer v18;
  unint64_t v19;
  int v20;
  std::vector<int>::pointer v21;
  std::vector<int>::pointer v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = 2 * a2;
  value = this[1].__end_cap_.__value_;
  begin = this[2].__begin_;
  p_end_cap = &this[1].__end_cap_;
  v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)begin - (char *)value) >> 3);
  if (v4 <= v8)
  {
    if (v4 < v8)
    {
      v9 = &value[6 * (int)v4];
      if (begin != v9)
      {
        v10 = begin;
        do
        {
          v12 = (void *)*((_QWORD *)v10 - 3);
          v10 -= 6;
          v11 = v12;
          if (v12)
          {
            *((_QWORD *)begin - 2) = v11;
            operator delete(v11);
          }
          begin = v10;
        }
        while (v10 != v9);
      }
      this[2].__begin_ = v9;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)p_end_cap, v4 - v8);
  }
  v13 = this[2].__end_cap_.__value_;
  v14 = ((char *)this[3].__begin_ - (char *)v13) >> 3;
  if (a2 <= v14)
  {
    if (a2 < v14)
      this[3].__begin_ = &v13[2 * a2];
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)&this[2].__end_cap_.__value_, a2 - v14);
  }
  if (SLODWORD(this[3].__end_cap_.__value_) > (int)v4)
  {
    v15 = this[6].__begin_;
    end = this[6].__end_;
    if (v15 == end)
    {
      v17 = 0;
    }
    else
    {
      v17 = 0;
      v18 = this[6].__begin_;
      do
      {
        if (*v18 < (int)v4)
          v15[v17++] = *v18;
        ++v18;
      }
      while (v18 != end);
    }
    v19 = end - v15;
    if (v17 <= v19)
    {
      if (v17 < v19)
        this[6].__end_ = &v15[v17];
    }
    else
    {
      std::vector<int>::__append(this + 6, v17 - v19);
    }
  }
  v20 = v4 & ~((int)v4 >> 31);
  LODWORD(this[3].__end_cap_.__value_) = v20;
  v21 = this[4].__begin_;
  v22 = this[4].__end_;
  v23 = (v20 + 63) >> 6;
  v25 = 0;
  v24 = ((char *)v22 - (char *)v21) >> 3;
  if (v23 <= v24)
  {
    if (v23 < v24)
      this[4].__end_ = &v21[2 * v23];
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)&this[4], v23 - v24, &v25);
  }
}

void operations_research::sat::LiteralWatchers::AttachOnFalse(uint64_t a1, int a2, int a3, uint64_t a4)
{
  char **v6;
  char *v7;
  _QWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v6 = (char **)(*(_QWORD *)(a1 + 40) + 24 * a2);
  v8 = v6 + 1;
  v7 = v6[1];
  v9 = (unint64_t)v6[2];
  if ((unint64_t)v7 >= v9)
  {
    v11 = *v6;
    v12 = (v7 - *v6) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    *(_DWORD *)v17 = a3;
    *((_DWORD *)v17 + 1) = 2;
    *((_QWORD *)v17 + 1) = a4;
    v10 = v17 + 16;
    if (v7 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
        v17 -= 16;
        v7 -= 16;
      }
      while (v7 != v11);
      v7 = *v6;
    }
    *v6 = v17;
    *v8 = v10;
    v6[2] = &v16[16 * v15];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_DWORD *)v7 = a3;
    *((_DWORD *)v7 + 1) = 2;
    *((_QWORD *)v7 + 1) = a4;
    v10 = v7 + 16;
  }
  *v8 = v10;
}

uint64_t operations_research::sat::LiteralWatchers::PropagateOnFalse(uint64_t a1, int a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  char *v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int *v30;
  unint64_t v31;
  int *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char **v40;
  _QWORD *v41;
  char **v42;
  char *v43;
  char *v44;
  int64_t v45;
  uint64_t result;
  _QWORD *v47;
  int *v48;
  const void *v49;
  _QWORD *v50;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char **v55;
  char **v56;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 40) + 24 * a2;
  v7 = *(int **)(v6 + 8);
  v8 = *(int **)v6;
  if (*(int **)v6 != v7)
  {
    v8 = *(int **)v6;
    while (((*(_QWORD *)(*(_QWORD *)(a3 + 24) + (((unint64_t)*v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v8) & 1) != 0)
    {
      v8 += 4;
      if (v8 == v7)
        goto LABEL_47;
    }
  }
  if (v8 == v7)
  {
LABEL_47:
    *(_QWORD *)(a1 + 200) += ((uint64_t)v7 - *(_QWORD *)v6) >> 4;
    return 1;
  }
  v50 = (_QWORD *)(v6 + 8);
  v9 = v8;
  v52 = *(_QWORD *)(a1 + 40) + 24 * a2;
  while (1)
  {
    v12 = *(_QWORD *)(a3 + 24);
    if (((*(_QWORD *)(v12 + (((unint64_t)*v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v9) & 1) != 0)
      goto LABEL_10;
    ++*(_QWORD *)(a1 + 192);
    v13 = (_DWORD *)*((_QWORD *)v9 + 1);
    v15 = v13[1];
    v14 = (char *)(v13 + 1);
    v16 = v15 ^ v13[2] ^ v4;
    v17 = (unint64_t)v16 >> 6;
    v18 = 1 << ((v15 ^ *((_BYTE *)v13 + 8)) ^ v4);
    if ((v18 & *(_QWORD *)(v12 + 8 * v17)) != 0)
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *v8 = v16;
      v8 += 4;
      ++*(_QWORD *)(a1 + 200);
      goto LABEL_11;
    }
    v19 = v9[1];
    v20 = *v13;
    v21 = v19;
    if ((int)v19 >= *v13)
    {
LABEL_20:
      v24 = *(_QWORD *)(a1 + 200) + v21 - (int)v19 + 2;
      *(_QWORD *)(a1 + 200) = v24;
      if ((int)v19 < 3)
      {
        LODWORD(v19) = 2;
LABEL_26:
        v26 = v20;
      }
      else
      {
        v25 = 0;
        while (((*(_QWORD *)(v12 + (((unint64_t)(int)v13[v25 + 3] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13[v25 + 3] & 0x3F ^ 1u)) & 1) != 0)
        {
          if (v19 - 2 == ++v25)
            goto LABEL_26;
        }
        LODWORD(v19) = v25 + 2;
        v26 = v25 + 2;
      }
      *(_QWORD *)(a1 + 200) = v24 + (int)v19 - 2;
      if (v26 < v20)
        goto LABEL_31;
    }
    else
    {
      v22 = 0;
      while (1)
      {
        v23 = v13[(int)v19 + 1 + v22];
        if (((*(_QWORD *)(v12 + (((unint64_t)v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v23 & 0x3F ^ 1u)) & 1) == 0)
          break;
        if (v20 - (uint64_t)(int)v19 == ++v22)
        {
          v21 = *v13;
          goto LABEL_20;
        }
      }
      v26 = v19 + v22;
      *(_QWORD *)(a1 + 200) += (int)v22 + 2;
      if ((int)v19 + (int)v22 < v20)
      {
LABEL_31:
        v13[1] = v16;
        v27 = 4 * v26;
        v13[2] = *(_DWORD *)&v14[v27];
        *(_DWORD *)&v14[v27] = v4;
        v28 = *(_QWORD *)(a1 + 40) + 24 * (int)v13[2];
        v29 = v26 + 1;
        v30 = *(int **)(v28 + 8);
        v31 = *(_QWORD *)(v28 + 16);
        if ((unint64_t)v30 >= v31)
        {
          v56 = (char **)(v28 + 8);
          v32 = *(int **)v28;
          v33 = ((uint64_t)v30 - *(_QWORD *)v28) >> 4;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 60)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v54 = (_QWORD *)(v28 + 16);
          v55 = (char **)v28;
          v35 = v31 - (_QWORD)v32;
          if (v35 >> 3 > v34)
            v34 = v35 >> 3;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
            v34 = 0xFFFFFFFFFFFFFFFLL;
          if (v34 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v53 = 16 * v34;
          v36 = (char *)operator new(16 * v34);
          v37 = *((_QWORD *)v9 + 1);
          v38 = &v36[16 * v33];
          *(_DWORD *)v38 = v16;
          *((_DWORD *)v38 + 1) = v29;
          *((_QWORD *)v38 + 1) = v37;
          if (v30 == v32)
          {
            v43 = &v36[16 * v33];
            v41 = v54;
            v40 = v55;
            v42 = v56;
          }
          else
          {
            v39 = &v36[16 * v33];
            v41 = v54;
            v40 = v55;
            v42 = v56;
            do
            {
              v43 = v39 - 16;
              *((_OWORD *)v39 - 1) = *((_OWORD *)v30 - 1);
              v30 -= 4;
              v39 -= 16;
            }
            while (v30 != v32);
          }
          *v40 = v43;
          v44 = v38 + 16;
          *v42 = v38 + 16;
          *v41 = &v36[v53];
          if (v32)
            operator delete(v32);
          *v42 = v44;
          v4 = a2;
          v6 = v52;
        }
        else
        {
          *v30 = v16;
          v30[1] = v29;
          *((_QWORD *)v30 + 1) = v13;
          *(_QWORD *)(v28 + 8) = v30 + 4;
        }
        goto LABEL_11;
      }
    }
    if (((*(_QWORD *)(v12 + 8 * v17) >> (v16 & 0x3F ^ 1u)) & 1) != 0)
      break;
    v13[1] = v16;
    v13[2] = v4;
    v10 = *(int *)(a3 + 12);
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v10) = v13;
    v11 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(*(_QWORD *)(a3 + 72) + 4 * v10) = v16;
    *(_DWORD *)(a3 + 8) = (*(_DWORD *)(a3 + 8) & 0xFFFFFFE | v16 & 1 | (v11 << 28)) ^ 1;
    *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * (v16 >> 1)) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v17) |= v18;
    ++*(_DWORD *)(a3 + 12);
LABEL_10:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    v8 += 4;
LABEL_11:
    v9 += 4;
    if (v9 == v7)
    {
      v47 = v50;
      v48 = (int *)*v50;
      *(_QWORD *)(a1 + 200) += (uint64_t)(*v50 - *(_QWORD *)v6) >> 4;
      if (v8 == v7)
        return 1;
      v45 = (char *)v48 - (char *)v7;
      if (v48 != v7)
        memmove(v8, v7, (char *)v48 - (char *)v7);
      result = 1;
LABEL_51:
      *v47 = (char *)v8 + v45;
      return result;
    }
  }
  *(_QWORD *)(a3 + 144) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a3 + 96), v14, (char *)&v13[v20 + 1], v20);
  *(_QWORD *)(a3 + 144) = *((_QWORD *)v9 + 1);
  *(_QWORD *)(a1 + 200) += (((uint64_t)v9 - *(_QWORD *)v6) >> 4) + 1;
  if (v8 != v9)
  {
    v49 = v9;
    v47 = v50;
    v45 = *v50 - (_QWORD)v49;
    if ((const void *)*v50 != v49)
      memmove(v8, v49, *v50 - (_QWORD)v49);
    result = 0;
    goto LABEL_51;
  }
  return 0;
}

uint64_t operations_research::sat::LiteralWatchers::Propagate(operations_research::sat::LiteralWatchers *this, operations_research::sat::Trail *a2)
{
  int v4;
  uint64_t v5;

  v4 = *((_DWORD *)a2 + 3);
  while (*((_DWORD *)a2 + 3) == v4)
  {
    v5 = *((int *)this + 9);
    if ((int)v5 >= v4)
      break;
    *((_DWORD *)this + 9) = v5 + 1;
    if ((operations_research::sat::LiteralWatchers::PropagateOnFalse((uint64_t)this, *(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * v5) ^ 1u, (uint64_t)a2) & 1) == 0)return 0;
  }
  return 1;
}

uint64_t operations_research::sat::LiteralWatchers::Reason(operations_research::sat::LiteralWatchers *this, const operations_research::sat::Trail *a2, int a3)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 8 * a3) + 8;
}

uint64_t operations_research::sat::LiteralWatchers::ReasonClause(operations_research::sat::LiteralWatchers *this, int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 8 * a2);
}

uint64_t operations_research::sat::LiteralWatchers::AddClause(_QWORD *a1, const void *a2, unint64_t a3)
{
  return operations_research::sat::LiteralWatchers::AddClause(a1, a2, a3, a1[23]);
}

uint64_t operations_research::sat::LiteralWatchers::AddClause(_QWORD *a1, const void *a2, unint64_t a3, uint64_t a4)
{
  unsigned int *v6;
  unsigned int *v7;
  unint64_t v8;
  unsigned int **v9;
  unsigned int **v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int **v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int **v25;
  uint64_t v26;
  __int128 v27;
  unsigned int *v28;

  v6 = operations_research::sat::SatClause::Create(a2, a3);
  v7 = v6;
  v9 = (unsigned int **)a1[39];
  v8 = a1[40];
  v10 = v9;
  if ((unint64_t)v9 < v8)
  {
    *v9 = v6;
    v11 = (uint64_t)(v9 + 1);
    goto LABEL_23;
  }
  v12 = (char *)a1[38];
  v13 = ((char *)v9 - v12) >> 3;
  v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v15 = v8 - (_QWORD)v12;
  if (v15 >> 2 > v14)
    v14 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = (char *)operator new(8 * v16);
    v18 = (unsigned int **)&v17[8 * v13];
    v19 = &v17[8 * v16];
    *v18 = v7;
    v11 = (uint64_t)(v18 + 1);
    v20 = (char *)((char *)v9 - v12);
    if (v9 == (unsigned int **)v12)
      goto LABEL_21;
    goto LABEL_14;
  }
  v17 = 0;
  v18 = (unsigned int **)(8 * v13);
  v19 = 0;
  *(_QWORD *)(8 * v13) = v7;
  v11 = 8 * v13 + 8;
  v20 = (char *)((char *)v9 - v12);
  if (v9 != (unsigned int **)v12)
  {
LABEL_14:
    v21 = (unint64_t)(v20 - 8);
    if (v21 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v12 - v17) < 0x20)
      goto LABEL_28;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v10 = &v9[v23 / 0xFFFFFFFFFFFFFFF8];
    v18 = (unsigned int **)((char *)v18 - v23);
    v24 = &v17[8 * v13 - 16];
    v25 = v9 - 2;
    v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
      *(_OWORD *)v24 = v27;
      v24 -= 32;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v28 = *--v10;
        *--v18 = v28;
      }
      while (v10 != (unsigned int **)v12);
    }
    v10 = (unsigned int **)a1[38];
  }
LABEL_21:
  a1[38] = v18;
  a1[39] = v11;
  a1[40] = v19;
  if (v10)
    operator delete(v10);
LABEL_23:
  a1[39] = v11;
  return operations_research::sat::LiteralWatchers::AttachAndPropagate((uint64_t)a1, v7, a4);
}

_DWORD *operations_research::sat::SatClause::Create(const void *a1, unint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v7[2];
  int v8;
  uint64_t *v9;

  v7[0] = a2;
  v8 = 2;
  if (a2 < 2)
  {
    v9 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v7, (int)&v8, "literals.size() >= 2");
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal(v7, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1795, &v9);
      google::LogMessage::stream((google::LogMessage *)v7);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
    }
  }
  v4 = operator new(4 * a2 + 4);
  v5 = v4;
  *v4 = a2;
  if (a2)
    memcpy(v4 + 1, a1, 4 * a2);
  return v5;
}

void sub_22DA468A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::LiteralWatchers::AttachAndPropagate(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;

  v3 = (int *)(a2 + 1);
  v4 = *a2;
  if ((int)v4 < 1)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(a3 + 24);
  do
  {
    v10 = a2[v7 + 1];
    if (((*(_QWORD *)(v9 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 & 0x3F ^ 1u)) & 1) == 0)
    {
      a2[v7 + 1] = v3[v8];
      v3[v8] = v10;
      if (v8 == 1)
        goto LABEL_16;
      v8 = 1;
    }
    ++v7;
  }
  while (v4 != v7);
  if (!v8)
    return 0;
  if ((int)v4 >= 3)
  {
    v11 = *(_QWORD *)(a3 + 120);
    v12 = (*(_DWORD *)(v11 + 8 * ((int)a2[2] >> 1)) >> 1) & 0x7FFFFFF;
    v13 = (int *)(a2 + 3);
    v14 = v4 - 2;
    do
    {
      v15 = (*(_DWORD *)(v11 + 8 * (*v13 >> 1)) >> 1) & 0x7FFFFFF;
      if (v15 > v12)
      {
        v16 = a2[2];
        a2[2] = *v13;
        *v13 = v16;
        v12 = v15;
      }
      ++v13;
      --v14;
    }
    while (v14);
  }
  v18 = *v3;
  v19 = (unint64_t)*v3 >> 6;
  if (((1 << v18) & *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v19)) == 0)
  {
    v20 = *(int *)(a3 + 12);
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v20) = a2;
    v21 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(*(_QWORD *)(a3 + 72) + 4 * v20) = v18;
    *(_DWORD *)(a3 + 8) = (*(_DWORD *)(a3 + 8) & 0xFFFFFFE | v18 & 1 | (v21 << 28)) ^ 1;
    *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * (v18 >> 1)) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v19) |= 1 << v18;
    ++*(_DWORD *)(a3 + 12);
  }
LABEL_16:
  ++*(_QWORD *)(a1 + 208);
  operations_research::sat::LiteralWatchers::AttachOnFalse(a1, a2[1], a2[2], (uint64_t)a2);
  operations_research::sat::LiteralWatchers::AttachOnFalse(a1, a2[2], a2[1], (uint64_t)a2);
  return 1;
}

unsigned int *operations_research::sat::LiteralWatchers::AddRemovableClause(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int **v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int **v24;
  uint64_t v25;
  __int128 v26;
  unsigned int *v27;
  _QWORD *v29;
  _BYTE v30[16];

  v5 = operations_research::sat::SatClause::Create(*(const void **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v6 = v5;
  v8 = (unsigned int **)a1[39];
  v7 = a1[40];
  v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *v8 = v5;
    v10 = (uint64_t)(v8 + 1);
    goto LABEL_23;
  }
  v11 = (char *)a1[38];
  v12 = ((char *)v8 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
    v17 = (unsigned int **)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = v6;
    v10 = (uint64_t)(v17 + 1);
    v19 = (char *)((char *)v8 - v11);
    if (v8 == (unsigned int **)v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (unsigned int **)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = v6;
  v10 = 8 * v12 + 8;
  v19 = (char *)((char *)v8 - v11);
  if (v8 != (unsigned int **)v11)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_30;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_30;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = &v8[v22 / 0xFFFFFFFFFFFFFFF8];
    v17 = (unsigned int **)((char *)v17 - v22);
    v23 = &v16[8 * v12 - 16];
    v24 = v8 - 2;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 4;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v27 = *--v9;
        *--v17 = v27;
      }
      while (v9 != (unsigned int **)v11);
    }
    v9 = (unsigned int **)a1[38];
  }
LABEL_21:
  a1[38] = v17;
  a1[39] = v10;
  a1[40] = v18;
  if (v9)
    operator delete(v9);
LABEL_23:
  a1[39] = v10;
  if ((operations_research::sat::LiteralWatchers::AttachAndPropagate((uint64_t)a1, v6, a3) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v30, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 215);
    v29 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: AttachAndPropagate(clause, trail) ", 48);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v30);
  }
  return v6;
}

void sub_22DA46C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::LiteralWatchers::Attach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE v10[16];

  v3 = *(int *)(a2 + 4);
  v4 = *(_QWORD *)(a3 + 24);
  if (((*(_QWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v10, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 275);
    v8 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: !trail->Assignment().LiteralIsAssigned(literals[0]) ", 66);
    goto LABEL_6;
  }
  v6 = *(int *)(a2 + 8);
  if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v6 & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v10, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 276);
    v9 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: !trail->Assignment().LiteralIsAssigned(literals[1]) ", 66);
LABEL_6:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v10);
  }
  ++*(_QWORD *)(a1 + 208);
  operations_research::sat::LiteralWatchers::AttachOnFalse(a1, v3, v6, a2);
  operations_research::sat::LiteralWatchers::AttachOnFalse(a1, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 4), a2);
}

void sub_22DA46D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DA46D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  v2 = 0;
  v3 = *a2;
  v4 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + *a2)))
     + *a2;
  v5 = ((v4 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v4);
  v6 = *a1;
  v7 = (v5 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  v9 = 0x101010101010101 * (v5 & 0x7F);
  while (1)
  {
    v10 = v7 & v8;
    v11 = *(_QWORD *)(v6 + (v7 & v8));
    v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12)
      break;
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      return 0;
    v2 += 8;
    v7 = v2 + v10;
  }
  while (1)
  {
    v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (*(_QWORD *)(a1[1] + 24 * v13) == v3)
      break;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_5;
  }
  if (v13 == v8)
    return 0;
  --a1[2];
  v15 = *(_QWORD *)(v6 + ((v13 - 8) & v8));
  v16 = *(_QWORD *)(v6 + v13) & (~*(_QWORD *)(v6 + v13) << 6) & 0x8080808080808080;
  v17 = v15 & (~v15 << 6) & 0x8080808080808080;
  if (v17)
    v18 = v16 == 0;
  else
    v18 = 1;
  if (v18)
  {
    v22 = 0;
    v19 = -2;
  }
  else
  {
    v20 = (__clz(v17) >> 3) + (__clz(__rbit64(v16)) >> 3);
    v21 = v20 >= 8;
    v22 = v20 < 8;
    if (v21)
      v19 = -2;
    else
      v19 = 0x80;
  }
  *(_BYTE *)(v6 + v13) = v19;
  *(_BYTE *)((a1[3] & (v13 - 8)) + (a1[3] & 7) + *a1 + 1) = v19;
  v23 = a1[4];
  a1[5] += v22;
  if (!v23)
    return 1;
  v24 = (unint64_t *)(v23 + 8);
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 - 1, v24));
  v26 = (unint64_t *)(v23 + 16);
  result = 1;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  return result;
}

void operations_research::sat::LiteralWatchers::LazyDetach(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _DWORD *v8;

  v8 = a2;
  --*(_QWORD *)(a1 + 208);
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 384);
  if (v5)
    v6 = v4 >= 3;
  else
    v6 = 0;
  if (v6)
    operations_research::sat::DratProofHandler::DeleteClause(v5, a2 + 1, (int)v4);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>((uint64_t *)(a1 + 336), (uint64_t *)&v8);
  *v8 = 0;
  *(_BYTE *)(a1 + 168) = 0;
  v7 = (_QWORD *)(a1 + 88);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v7, a2[1]);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v7, a2[2]);
}

void operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;

  v2 = (unint64_t)a2 >> 6;
  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 8 * v2);
  if ((v4 & (1 << a2)) == 0)
  {
    *(_QWORD *)(v3 + 8 * v2) = v4 | (1 << a2);
    v8 = (char *)a1[8];
    v7 = a1[9];
    if ((unint64_t)v8 < v7)
    {
      *(_DWORD *)v8 = a2;
      v9 = (uint64_t)(v8 + 4);
LABEL_23:
      a1[8] = v9;
      return;
    }
    v10 = (char *)a1[7];
    v11 = (v8 - v10) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(4 * v14);
      v16 = &v15[4 * v11];
      v17 = &v15[4 * v14];
      *v16 = a2;
      v9 = (uint64_t)(v16 + 1);
      v18 = v8 - v10;
      if (v8 == v10)
        goto LABEL_21;
    }
    else
    {
      v15 = 0;
      v16 = (_DWORD *)(4 * v11);
      v17 = 0;
      *(_DWORD *)(4 * v11) = a2;
      v9 = 4 * v11 + 4;
      v18 = v8 - v10;
      if (v8 == v10)
      {
LABEL_21:
        a1[7] = v16;
        a1[8] = v9;
        a1[9] = v17;
        if (v10)
          operator delete(v10);
        goto LABEL_23;
      }
    }
    v19 = v18 - 4;
    if (v19 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_28;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v22 = &v8[-v21];
    v16 = (_DWORD *)((char *)v16 - v21);
    v23 = &v15[4 * v11 - 16];
    v24 = v8 - 16;
    v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    v8 = v22;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v27 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *--v16 = v27;
      }
      while (v8 != v10);
    }
    goto LABEL_21;
  }
}

uint64_t operations_research::sat::LiteralWatchers::Detach(_QWORD *a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  int v8;
  unint64_t v9;
  int ***v10;
  int **v11;
  int **v12;
  int ***v13;
  int **v14;
  int **v15;
  BOOL v16;
  int **v17;
  int ***v18;
  int **v19;
  int **v20;
  int ***v21;
  int **v22;
  int **i;
  int **v24;
  _DWORD *v25;

  v25 = a2;
  --a1[26];
  v4 = *a2;
  v5 = a1[48];
  if (v5)
    v6 = v4 >= 3;
  else
    v6 = 0;
  if (v6)
    operations_research::sat::DratProofHandler::DeleteClause(v5, a2 + 1, (int)v4);
  result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>(a1 + 42, (uint64_t *)&v25);
  *v25 = 0;
  v8 = a2[1];
  v9 = (int)a2[2];
  *(_QWORD *)(a1[12] + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v8);
  v10 = (int ***)(a1[5] + 24 * v8);
  v11 = *v10;
  v14 = v10[1];
  v13 = v10 + 1;
  v12 = v14;
  if (v11 != v14)
  {
    v15 = v11 + 2;
    while (**(v15 - 1) >= 1)
    {
      v16 = v15 == v12;
      v15 += 2;
      if (v16)
        goto LABEL_22;
    }
    v17 = v15 - 2;
    if (v15 - 2 != v12 && v15 != v12)
    {
      do
      {
        if (*v15[1] >= 1)
        {
          *(_OWORD *)v17 = *(_OWORD *)v15;
          v17 += 2;
        }
        v15 += 2;
      }
      while (v15 != v12);
      v12 = *v13;
    }
    if (v17 != v12)
      *v13 = v17;
  }
LABEL_22:
  *(_QWORD *)(a1[12] + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v9);
  v18 = (int ***)(a1[5] + 24 * (int)v9);
  v19 = *v18;
  v22 = v18[1];
  v21 = v18 + 1;
  v20 = v22;
  if (v19 != v22)
  {
    for (i = v19 + 2; **(i - 1) >= 1; i += 2)
    {
      v16 = i == v20;
      if (v16)
        return result;
    }
    v24 = i - 2;
    if (i - 2 != v20 && i != v20)
    {
      do
      {
        if (*i[1] >= 1)
        {
          *(_OWORD *)v24 = *(_OWORD *)i;
          v24 += 2;
        }
        i += 2;
      }
      while (i != v20);
      v20 = *v21;
    }
    if (v24 != v20)
      *v21 = v24;
  }
  return result;
}

void operations_research::sat::LiteralWatchers::DetachAllClauses(operations_research::sat::LiteralWatchers *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (*((_BYTE *)this + 296))
  {
    *((_BYTE *)this + 296) = 0;
    *((_BYTE *)this + 168) = 1;
    *((_QWORD *)this + 26) = 0;
    v3 = *((_QWORD *)this + 5);
    v2 = *((_QWORD *)this + 6);
    if (v2 != v3)
    {
      v4 = *((_QWORD *)this + 6);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 16) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
    *((_QWORD *)this + 6) = v3;
  }
}

void operations_research::sat::LiteralWatchers::AttachAllClauses(operations_research::sat::LiteralWatchers *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _DWORD **v10;
  _DWORD **i;
  _DWORD *v12;
  unint64_t v13[2];
  uint64_t *v14;

  if (!*((_BYTE *)this + 296))
  {
    *((_BYTE *)this + 296) = 1;
    bzero(*((void **)this + 12), *((_QWORD *)this + 13) - *((_QWORD *)this + 12));
    v2 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 19) = *((_QWORD *)this + 18);
    v3 = *((int *)this + 22);
    v4 = *((_QWORD *)this + 6);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v2) >> 3);
    if (v3 <= v5)
    {
      if (v3 < v5)
      {
        v6 = v2 + 24 * (int)v3;
        if (v4 != v6)
        {
          v7 = *((_QWORD *)this + 6);
          do
          {
            v9 = *(void **)(v7 - 24);
            v7 -= 24;
            v8 = v9;
            if (v9)
            {
              *(_QWORD *)(v4 - 16) = v8;
              operator delete(v8);
            }
            v4 = v7;
          }
          while (v7 != v6);
        }
        *((_QWORD *)this + 6) = v6;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 40, v3 - v5);
    }
    operations_research::sat::LiteralWatchers::DeleteRemovedClauses(this);
    v10 = (_DWORD **)*((_QWORD *)this + 38);
    for (i = (_DWORD **)*((_QWORD *)this + 39); v10 != i; ++v10)
    {
      v12 = *v10;
      ++*((_QWORD *)this + 26);
      LODWORD(v13[0]) = *v12;
      LODWORD(v14) = 2;
      if (SLODWORD(v13[0]) < 2)
      {
        v14 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v13, (int)&v14, "clause->size() >= 2");
        if (v14)
        {
          google::LogMessageFatal::LogMessageFatal(v13, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 331, &v14);
          google::LogMessage::stream((google::LogMessage *)v13);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v13);
        }
      }
      operations_research::sat::LiteralWatchers::AttachOnFalse((uint64_t)this, v12[1], v12[2], (uint64_t)v12);
      operations_research::sat::LiteralWatchers::AttachOnFalse((uint64_t)this, v12[2], v12[1], (uint64_t)v12);
    }
  }
}

void sub_22DA475B0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::LiteralWatchers::DeleteRemovedClauses(operations_research::sat::LiteralWatchers *this)
{
  unint64_t v2;
  uint64_t v3;
  int **v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  const std::nothrow_t *v14;
  void *v15;
  BOOL v16;
  void *v17;
  int **v18;
  int **v19;
  int8x16_t *v20;
  int **v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  const std::nothrow_t *v26;
  void *v27;
  void *v28;
  int **v29;
  int **v30;
  int **v31;
  void *v32;
  void *v33;

  LODWORD(v2) = *((_DWORD *)this + 82);
  v3 = (int)v2;
  v4 = (int **)*((_QWORD *)this + 38);
  v5 = *((_QWORD *)this + 39) - (_QWORD)v4;
  if ((int)v2 >= (unint64_t)(v5 >> 3))
  {
    v2 = (unint64_t)v5 >> 3;
    *((_DWORD *)this + 82) = (unint64_t)v5 >> 3;
    v3 = (int)(v5 >> 3);
  }
  if ((_DWORD)v2)
  {
    v6 = 8 * v3;
    v7 = (int8x16_t *)v4;
    v8 = v4;
    while (**v8 > 0)
    {
      ++v8;
      v7 = (int8x16_t *)((char *)v7 + 8);
      v6 -= 8;
      if (!v6)
      {
        v4 += v3;
        goto LABEL_23;
      }
    }
    v9 = &v4[v3];
    v10 = v9 - 1;
    do
    {
      v6 -= 8;
      if (!v6)
      {
        v4 = v8;
        goto LABEL_23;
      }
      v11 = *v10--;
      --v9;
    }
    while (*v11 < 1);
    v12 = (v6 >> 3) + 1;
    if (v6 < 17)
    {
LABEL_18:
      v17 = 0;
      v13 = 0;
    }
    else
    {
      if (v12 >= 0xFFFFFFFFFFFFFFFLL)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = (v6 >> 3) + 1;
      v14 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      while (1)
      {
        v15 = operator new(8 * v13, v14);
        if (v15)
          break;
        v16 = v13 > 1;
        v13 >>= 1;
        if (!v16)
          goto LABEL_18;
      }
      v17 = v15;
    }
    v4 = std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::LiteralWatchers::DeleteRemovedClauses(void)::$_0 &,std::__wrap_iter<operations_research::sat::SatClause **>,long,std::pair<operations_research::sat::SatClause **,long>>(v7, v9, v12, (unint64_t)v17, v13);
    if (v17)
      operator delete(v17);
  }
LABEL_23:
  v18 = (int **)*((_QWORD *)this + 38);
  v19 = (int **)*((_QWORD *)this + 39);
  *((_DWORD *)this + 82) = (unint64_t)((char *)v4 - (char *)v18) >> 3;
  if (v18 != v19)
  {
    v20 = (int8x16_t *)v18;
    while (**v18 > 0)
    {
      ++v18;
      v20 = (int8x16_t *)((char *)v20 + 8);
      if (v18 == v19)
      {
        v18 = v19;
        goto LABEL_42;
      }
    }
    v21 = v19 - 1;
    v22 = (char *)v19 - (char *)v20;
    while (v18 != v21)
    {
      v23 = *v21--;
      --v19;
      v22 -= 8;
      if (*v23 >= 1)
      {
        v24 = (v22 >> 3) + 1;
        if (v22 < 17)
        {
LABEL_38:
          v28 = 0;
          v25 = 0;
        }
        else
        {
          if (v24 >= 0xFFFFFFFFFFFFFFFLL)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = (v22 >> 3) + 1;
          v26 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v27 = operator new(8 * v25, v26);
            if (v27)
              break;
            v16 = v25 > 1;
            v25 >>= 1;
            if (!v16)
              goto LABEL_38;
          }
          v28 = v27;
        }
        v18 = std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::LiteralWatchers::DeleteRemovedClauses(void)::$_0 &,std::__wrap_iter<operations_research::sat::SatClause **>,long,std::pair<operations_research::sat::SatClause **,long>>(v20, v19, v24, (unint64_t)v28, v25);
        if (v28)
          operator delete(v28);
        break;
      }
    }
  }
LABEL_42:
  v29 = (int **)*((_QWORD *)this + 39);
  v30 = v18;
  if (v18 != v29)
  {
    v31 = v18;
    do
    {
      v33 = *v31++;
      v32 = v33;
      if (v33)
        operator delete(v32);
    }
    while (v31 != v29);
    v30 = (int **)*((_QWORD *)this + 39);
  }
  if (v18 != v30)
    *((_QWORD *)this + 39) = v18;
}

BOOL operations_research::sat::LiteralWatchers::InprocessingFixLiteral(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12[2];
  uint64_t *v13;

  LODWORD(v12[0]) = (*(_DWORD *)(a1[23] + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v13) = 0;
  if (LODWORD(v12[0]))
  {
    v13 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v12, (int)&v13, "trail_->CurrentDecisionLevel() == 0");
    if (v13)
    {
      google::LogMessageFatal::LogMessageFatal(v12, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 339, &v13);
      google::LogMessage::stream((google::LogMessage *)v12);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v12);
    }
  }
  v4 = a1[48];
  if (v4)
  {
    LODWORD(v12[0]) = a2;
    operations_research::sat::DratProofHandler::AddClause(v4, (int *)v12, 1);
  }
  v5 = a1[23];
  v6 = (unint64_t)a2 >> 6;
  result = 1;
  if ((*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) & (1 << a2)) == 0)
  {
    *(_DWORD *)(*(_QWORD *)(v5 + 72) + 4 * *(int *)(v5 + 12)) = a2;
    *(_DWORD *)(v5 + 8) = (*(_DWORD *)(v5 + 8) & 0xFFFFFFE | a2 & 1) ^ 0x10000001;
    *(_QWORD *)(*(_QWORD *)(v5 + 120) + 8 * (a2 >> 1)) = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) |= 1 << a2;
    ++*(_DWORD *)(v5 + 12);
    v9 = a1[22];
    v8 = a1[23];
    if (!*(_QWORD *)(v9 + 216) && *(_QWORD *)(v9 + 224) == *(_QWORD *)(v9 + 232))
    {
      *(_DWORD *)(v9 + 36) = *(_DWORD *)(v8 + 12);
      return 1;
    }
    else
    {
      while (1)
      {
        v10 = *(int *)(v9 + 36);
        v11 = *(_DWORD *)(v8 + 12);
        result = (int)v10 >= v11;
        if ((int)v10 >= v11)
          break;
        *(_DWORD *)(v9 + 36) = v10 + 1;
        if ((operations_research::sat::BinaryImplicationGraph::PropagateOnTrue(v9, *(_DWORD *)(*(_QWORD *)(v8 + 72) + 4 * v10), v8) & 1) == 0)return 0;
      }
    }
  }
  return result;
}

void sub_22DA479D0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BinaryImplicationGraph::Propagate(operations_research::sat::BinaryImplicationGraph *this, operations_research::sat::Trail *a2)
{
  uint64_t v4;
  int v5;
  _BOOL8 result;

  if (*(_OWORD *)((char *)this + 216) == __PAIR128__(*((_QWORD *)this + 29), 0))
  {
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 3);
    return 1;
  }
  else
  {
    while (1)
    {
      v4 = *((int *)this + 9);
      v5 = *((_DWORD *)a2 + 3);
      result = (int)v4 >= v5;
      if ((int)v4 >= v5)
        break;
      *((_DWORD *)this + 9) = v4 + 1;
      if ((operations_research::sat::BinaryImplicationGraph::PropagateOnTrue((uint64_t)this, *(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * v4), (uint64_t)a2) & 1) == 0)return 0;
    }
  }
  return result;
}

uint64_t operations_research::sat::LiteralWatchers::InprocessingRemoveClause(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _BYTE v6[16];
  _DWORD *v7;

  v7 = a2;
  if (*(_BYTE *)(a1 + 296))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v6, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 358);
    v5 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Check failed: !all_clauses_are_attached_ ", 41);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v6);
  }
  v3 = *(_QWORD *)(a1 + 384);
  if (v3)
    operations_research::sat::DratProofHandler::DeleteClause(v3, a2 + 1, *a2);
  result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>((uint64_t *)(a1 + 336), (uint64_t *)&v7);
  *v7 = 0;
  return result;
}

void sub_22DA47AE4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::LiteralWatchers::InprocessingRewriteClause(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  int *v5;
  _BOOL8 result;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int ***v12;
  int **v13;
  int **v14;
  int ***v15;
  int **v16;
  int **v17;
  BOOL v18;
  int **v19;
  int ***v20;
  int **v21;
  int **v22;
  int ***v23;
  int **v24;
  int **v25;
  int **v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  if (!a4)
    return 0;
  v5 = a3;
  if (a4 == 2)
  {
    operations_research::sat::BinaryImplicationGraph::AddBinaryClause(*(_QWORD *)(a1 + 176), *a3, a3[1]);
    goto LABEL_8;
  }
  if (a4 != 1)
  {
    v9 = *(_QWORD *)(a1 + 384);
    if (v9)
    {
      operations_research::sat::DratProofHandler::AddClause(v9, a3, a4);
      operations_research::sat::DratProofHandler::DeleteClause(*(_QWORD *)(a1 + 384), a2 + 1, *a2);
    }
    if (*(_BYTE *)(a1 + 296))
    {
      --*(_QWORD *)(a1 + 208);
      *a2 = 0;
      v10 = a2[1];
      v11 = a2[2];
      *(_QWORD *)(*(_QWORD *)(a1 + 96) + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v10);
      v12 = (int ***)(*(_QWORD *)(a1 + 40) + 24 * v10);
      v13 = *v12;
      v16 = v12[1];
      v15 = v12 + 1;
      v14 = v16;
      if (v13 != v16)
      {
        v17 = v13 + 2;
        while (**(v17 - 1) >= 1)
        {
          v18 = v17 == v14;
          v17 += 2;
          if (v18)
            goto LABEL_27;
        }
        v19 = v17 - 2;
        if (v17 - 2 != v14 && v17 != v14)
        {
          do
          {
            if (*v17[1] >= 1)
            {
              *(_OWORD *)v19 = *(_OWORD *)v17;
              v19 += 2;
            }
            v17 += 2;
          }
          while (v17 != v14);
          v14 = *v15;
        }
        if (v19 != v14)
          *v15 = v19;
      }
LABEL_27:
      *(_QWORD *)(*(_QWORD *)(a1 + 96) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
      v20 = (int ***)(*(_QWORD *)(a1 + 40) + 24 * (int)v11);
      v21 = *v20;
      v24 = v20[1];
      v23 = v20 + 1;
      v22 = v24;
      if (v21 != v24)
      {
        v25 = v21 + 2;
        while (**(v25 - 1) >= 1)
        {
          v18 = v25 == v22;
          v25 += 2;
          if (v18)
            goto LABEL_42;
        }
        v26 = v25 - 2;
        if (v25 - 2 != v22 && v25 != v22)
        {
          do
          {
            if (*v25[1] >= 1)
            {
              *(_OWORD *)v26 = *(_OWORD *)v25;
              v26 += 2;
            }
            v25 += 2;
          }
          while (v25 != v22);
          v22 = *v23;
        }
        if (v26 != v22)
          *v23 = v26;
      }
    }
LABEL_42:
    *a2 = 0;
    v27 = 4 * a4;
    do
    {
      v28 = *v5++;
      v29 = *a2;
      *a2 = v29 + 1;
      a2[v29 + 1] = v28;
      v27 -= 4;
    }
    while (v27);
    if (*(_BYTE *)(a1 + 296))
      operations_research::sat::LiteralWatchers::Attach(a1, (uint64_t)a2, *(_QWORD *)(a1 + 184));
    return 1;
  }
  result = operations_research::sat::LiteralWatchers::InprocessingFixLiteral((_QWORD *)a1, *a3);
  if (result)
  {
LABEL_8:
    operations_research::sat::LiteralWatchers::InprocessingRemoveClause(a1, a2);
    return 1;
  }
  return result;
}

void operations_research::sat::BinaryImplicationGraph::AddBinaryClause(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  int *v24;
  _OWORD *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  int *v36;
  _OWORD *v37;
  __int128 *v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  char *v42;
  int v43;
  int v44[2];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 136);
  if (v6)
  {
    v44[0] = a2;
    v44[1] = a3;
    operations_research::sat::DratProofHandler::AddClause(v6, v44, 2);
  }
  v7 = a2 ^ 1;
  v8 = *(_QWORD *)(a1 + 688);
  ++*(_DWORD *)(v8 + 4 * v7);
  v9 = a3 ^ 1;
  ++*(_DWORD *)(v8 + 4 * v9);
  v10 = *(_QWORD *)(a1 + 192);
  v11 = v10 + 32 * v7;
  v13 = v11 + 8;
  v12 = *(_QWORD *)v11;
  if ((*(_QWORD *)v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = v12 >> 1;
    if (v12 >> 1 != v14)
    {
LABEL_5:
      *(_DWORD *)(v13 + 4 * v15) = a3;
      *(_QWORD *)v11 = v12 + 2;
      v16 = v10 + 32 * v9;
      v18 = v16 + 8;
      v17 = *(_QWORD *)v16;
      if ((*(_QWORD *)v16 & 1) == 0)
        goto LABEL_6;
LABEL_23:
      v18 = *(_QWORD *)(v16 + 8);
      v19 = *(_QWORD *)(v16 + 16);
      v20 = v17 >> 1;
      if (v17 >> 1 != v19)
        goto LABEL_7;
      goto LABEL_24;
    }
  }
  else
  {
    v14 = 6;
    v15 = v12 >> 1;
    if (v12 >> 1 != 6)
      goto LABEL_5;
  }
  if (((v14 >> 61) & 3) != 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v21 = (char *)operator new(8 * v14);
  v22 = v21;
  *(_DWORD *)&v21[4 * v14] = a3;
  if (v12 >= 2)
  {
    v23 = 0;
    if (v14 < 8 || (unint64_t)&v21[-v13] < 0x20)
    {
      v24 = (int *)v13;
    }
    else
    {
      v23 = v14 & 0xFFFFFFFFFFFFFFF8;
      v24 = (int *)(v13 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
      v25 = v21 + 16;
      v26 = (__int128 *)(v13 + 16);
      v27 = v14 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v28 = *v26;
        *(v25 - 1) = *(v26 - 1);
        *v25 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v14 == v23)
        goto LABEL_20;
    }
    v29 = v14 - v23;
    v30 = &v21[4 * v23];
    do
    {
      v31 = *v24++;
      *(_DWORD *)v30 = v31;
      v30 += 4;
      --v29;
    }
    while (v29);
  }
LABEL_20:
  if ((v12 & 1) != 0)
  {
    operator delete(*(void **)(v11 + 8));
    v12 = *(_QWORD *)v11;
  }
  *(_QWORD *)(v11 + 8) = v22;
  *(_QWORD *)(v11 + 16) = 2 * v14;
  v32 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)v11 = (v12 | 1) + 2;
  v16 = v32 + 32 * v9;
  v18 = v16 + 8;
  v17 = *(_QWORD *)v16;
  if ((*(_QWORD *)v16 & 1) != 0)
    goto LABEL_23;
LABEL_6:
  v19 = 6;
  v20 = v17 >> 1;
  if (v17 >> 1 != 6)
  {
LABEL_7:
    *(_DWORD *)(v18 + 4 * v20) = a2;
    goto LABEL_38;
  }
LABEL_24:
  if (((v19 >> 61) & 3) != 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v33 = (char *)operator new(8 * v19);
  v34 = v33;
  *(_DWORD *)&v33[4 * v19] = a2;
  if (v17 < 2)
    goto LABEL_35;
  v35 = 0;
  if (v19 < 8 || (unint64_t)&v33[-v18] < 0x20)
  {
    v36 = (int *)v18;
  }
  else
  {
    v35 = v19 & 0xFFFFFFFFFFFFFFF8;
    v36 = (int *)(v18 + 4 * (v19 & 0xFFFFFFFFFFFFFFF8));
    v37 = v33 + 16;
    v38 = (__int128 *)(v18 + 16);
    v39 = v19 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v40 = *v38;
      *(v37 - 1) = *(v38 - 1);
      *v37 = v40;
      v37 += 2;
      v38 += 2;
      v39 -= 8;
    }
    while (v39);
    if (v19 == v35)
      goto LABEL_35;
  }
  v41 = v19 - v35;
  v42 = &v33[4 * v35];
  do
  {
    v43 = *v36++;
    *(_DWORD *)v42 = v43;
    v42 += 4;
    --v41;
  }
  while (v41);
LABEL_35:
  if ((v17 & 1) != 0)
  {
    operator delete(*(void **)(v16 + 8));
    v17 = *(_QWORD *)v16;
  }
  *(_QWORD *)(v16 + 8) = v34;
  *(_QWORD *)(v16 + 16) = 2 * v19;
  v17 |= 1uLL;
LABEL_38:
  *(_QWORD *)v16 = v17 + 2;
  *(_BYTE *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 216) += 2;
}

_DWORD *operations_research::sat::LiteralWatchers::InprocessingAddClause(uint64_t a1, int *a2, unint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  _BYTE v30[16];

  if (!a3)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v30, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 416);
    v28 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: !new_clause.empty() ", 34);
    goto LABEL_33;
  }
  if (*(_BYTE *)(a1 + 296))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v30, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 417);
    v29 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Check failed: !all_clauses_are_attached_ ", 41);
LABEL_33:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v30);
  }
  if (a3 == 2)
  {
    operations_research::sat::BinaryImplicationGraph::AddBinaryClause(*(_QWORD *)(a1 + 176), *a2, a2[1]);
    return 0;
  }
  if (a3 != 1)
  {
    v5 = operations_research::sat::SatClause::Create(a2, a3);
    v4 = v5;
    v7 = *(char **)(a1 + 312);
    v6 = *(_QWORD *)(a1 + 320);
    if ((unint64_t)v7 < v6)
    {
      *(_QWORD *)v7 = v5;
      v8 = (uint64_t)(v7 + 8);
LABEL_29:
      *(_QWORD *)(a1 + 312) = v8;
      return v4;
    }
    v9 = *(char **)(a1 + 304);
    v10 = (v7 - v9) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(8 * v13);
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *(_QWORD *)v15 = v4;
      v8 = (uint64_t)(v15 + 8);
      v17 = (char *)(v7 - v9);
      if (v7 == v9)
        goto LABEL_27;
    }
    else
    {
      v14 = 0;
      v15 = (char *)(8 * v10);
      v16 = 0;
      *(_QWORD *)(8 * v10) = v4;
      v8 = 8 * v10 + 8;
      v17 = (char *)(v7 - v9);
      if (v7 == v9)
      {
LABEL_27:
        *(_QWORD *)(a1 + 304) = v15;
        *(_QWORD *)(a1 + 312) = v8;
        *(_QWORD *)(a1 + 320) = v16;
        if (v7)
          operator delete(v7);
        goto LABEL_29;
      }
    }
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_38;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_38;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v7[-v20];
    v15 -= v20;
    v22 = &v14[8 * v10 - 16];
    v23 = v7 - 16;
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    v7 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_38:
      do
      {
        v26 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v26;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    v7 = *(char **)(a1 + 304);
    goto LABEL_27;
  }
  operations_research::sat::LiteralWatchers::InprocessingFixLiteral((_QWORD *)a1, *a2);
  return 0;
}

void sub_22DA482D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DA482DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::LiteralWatchers::CleanUpWatchers(uint64_t this)
{
  int *v1;
  int *v2;
  unint64_t v3;
  int ***v4;
  int **v5;
  int **v6;
  int ***v7;
  int **v8;
  int **v9;
  BOOL v10;
  int **v11;

  v1 = *(int **)(this + 144);
  v2 = *(int **)(this + 152);
  if (v1 != v2)
  {
    do
    {
      v3 = *v1;
      v4 = (int ***)(*(_QWORD *)(this + 40) + 24 * (int)v3);
      v5 = *v4;
      v8 = v4[1];
      v7 = v4 + 1;
      v6 = v8;
      if (v5 != v8)
      {
        v9 = v5 + 2;
        while (**(v9 - 1) >= 1)
        {
          v10 = v9 == v6;
          v9 += 2;
          if (v10)
            goto LABEL_3;
        }
        v11 = v9 - 2;
        if (v9 - 2 != v6 && v9 != v6)
        {
          do
          {
            if (*v9[1] >= 1)
            {
              *(_OWORD *)v11 = *(_OWORD *)v9;
              v11 += 2;
            }
            v9 += 2;
          }
          while (v9 != v6);
          v6 = *v7;
        }
        if (v11 != v6)
          *v7 = v11;
      }
LABEL_3:
      *(_QWORD *)(*(_QWORD *)(this + 96) + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
      ++v1;
    }
    while (v1 != v2);
    v1 = *(int **)(this + 144);
  }
  *(_QWORD *)(this + 152) = v1;
  *(_BYTE *)(this + 168) = 1;
  return this;
}

void operations_research::sat::BinaryImplicationGraph::Resize(operations_research::sat::BinaryImplicationGraph *this, int a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  std::vector<int>::size_type v16;
  std::vector<int>::value_type __x;

  v4 = 2 * a2;
  v7 = *((_QWORD *)this + 24);
  v6 = *((_QWORD *)this + 25);
  v5 = (uint64_t *)((char *)this + 192);
  v8 = (v6 - v7) >> 5;
  if (v4 <= v8)
  {
    if (v4 >= v8)
    {
      v9 = v6;
    }
    else
    {
      v9 = v7 + 32 * v4;
      if (v6 != v9)
      {
        v10 = v6;
        do
        {
          v11 = *(_BYTE *)(v10 - 32);
          v10 -= 32;
          if ((v11 & 1) != 0)
            operator delete(*(void **)(v6 - 24));
          v6 = v10;
        }
        while (v10 != v9);
      }
      *((_QWORD *)this + 25) = v9;
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append(v5, v4 - v8);
    v9 = *((_QWORD *)this + 25);
  }
  std::vector<BOOL>::resize((uint64_t)this + 544, (v9 - *((_QWORD *)this + 24)) >> 5, 0);
  std::vector<BOOL>::resize((uint64_t)this + 664, (uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 5, 0);
  v12 = (uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 5;
  __x = 0;
  v13 = *((_QWORD *)this + 86);
  v14 = (*((_QWORD *)this + 87) - v13) >> 2;
  v15 = v12 >= v14;
  v16 = v12 - v14;
  if (v16 != 0 && v15)
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 688), v16, &__x);
    v12 = (uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 5;
  }
  else if (!v15)
  {
    *((_QWORD *)this + 87) = v13 + 4 * v12;
  }
  std::vector<BOOL>::resize((uint64_t)this + 640, v12, 0);
  std::deque<operations_research::sat::Literal>::resize((_QWORD *)this + 18, a2);
}

void std::deque<operations_research::sat::Literal>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a1[5];
  if (a2 > v3)
  {
    std::deque<operations_research::sat::Literal>::__append(a1, a2 - v3);
    return;
  }
  if (a2 < v3)
  {
    v4 = a1[4];
    v6 = a1[1];
    v5 = a1[2];
    v7 = (char *)(v6 + 8 * (v4 >> 10));
    if (v5 == v6)
    {
      v8 = 0;
      if (!a2)
        goto LABEL_10;
    }
    else
    {
      v8 = *(_QWORD *)v7 + 4 * (a1[4] & 0x3FFLL);
      if (!a2)
        goto LABEL_10;
    }
    v9 = a2 + ((v8 - *(_QWORD *)v7) >> 2);
    if (v9 < 1)
    {
      v14 = 1023 - v9;
      v7 -= 8 * (v14 >> 10);
      v8 = *(_QWORD *)v7 + 4 * (~(_WORD)v14 & 0x3FF);
      v10 = v4 + v3;
      v11 = (char *)(v6 + 8 * ((v4 + v3) >> 10));
      v12 = v5 - v6;
      if (v5 != v6)
      {
LABEL_11:
        v13 = *(_QWORD *)v11 + 4 * (v10 & 0x3FF);
        if (v8 == v13)
          return;
        goto LABEL_15;
      }
LABEL_14:
      v13 = 0;
      if (!v8)
        return;
LABEL_15:
      v15 = ((v13 - *(_QWORD *)v11) >> 2) + ((v11 - v7) << 7) - ((v8 - *(_QWORD *)v7) >> 2);
      if (v15 >= 1)
      {
        v16 = v5 == v6 ? 0 : (v12 << 7) - 1;
        v17 = v3 - v15;
        a1[5] = v17;
        if (v16 - v4 - v17 >= 0x800)
        {
          do
          {
            operator delete(*(void **)(v5 - 8));
            v18 = a1[1];
            v5 = a1[2] - 8;
            a1[2] = v5;
            if (v5 == v18)
              v19 = 0;
            else
              v19 = ((v5 - v18) << 7) - 1;
          }
          while ((unint64_t)(v19 - (a1[5] + a1[4])) > 0x7FF);
        }
      }
      return;
    }
    v7 += 8 * ((unint64_t)v9 >> 10);
    v8 = *(_QWORD *)v7 + 4 * (v9 & 0x3FF);
LABEL_10:
    v10 = v4 + v3;
    v11 = (char *)(v6 + 8 * ((v4 + v3) >> 10));
    v12 = v5 - v6;
    if (v5 != v6)
      goto LABEL_11;
    goto LABEL_14;
  }
}

uint64_t operations_research::sat::BinaryImplicationGraph::AddBinaryClauseDuringSearch(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;

  if (!*(_QWORD *)(a1 + 216))
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 12);
  operations_research::sat::BinaryImplicationGraph::AddBinaryClause(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_QWORD *)(v7 + 8 * ((unint64_t)a2 >> 6));
  v9 = a2 & 0x3F;
  v10 = (unint64_t)a3 >> 6;
  v11 = *(_QWORD *)(v7 + 8 * v10);
  if (((v8 >> (a2 & 0x3F ^ 1u)) & 1) != 0)
  {
    if (((v11 >> (a3 & 0x3E)) & 3) != 0)
    {
      if (((v11 >> (a3 & 0x3F ^ 1u)) & 1) != 0)
        return 0;
      goto LABEL_9;
    }
    v13 = *(_QWORD *)(a1 + 176) + *(int *)(v6 + 12);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + ((v13 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v13 & 0x3FF)) = a2;
    LODWORD(v13) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(*(_QWORD *)(v6 + 72) + 4 * *(int *)(v6 + 12)) = a3;
    *(_DWORD *)(v6 + 8) = (*(_DWORD *)(v6 + 8) & 0xFFFFFFE | a3 & 1 | ((_DWORD)v13 << 28)) ^ 1;
    *(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * (a3 >> 1)) = *(_QWORD *)(v6 + 8);
    v9 = a3 & 0x3F;
  }
  else
  {
    if (((v11 >> (a3 & 0x3F ^ 1u)) & 1) == 0 || ((v8 >> (a2 & 0x3E)) & 3) != 0)
    {
LABEL_9:
      *(_BYTE *)(a1 + 512) = 0;
      return 1;
    }
    v14 = *(_QWORD *)(a1 + 176) + *(int *)(v6 + 12);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + ((v14 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v14 & 0x3FF)) = a3;
    LODWORD(v14) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(*(_QWORD *)(v6 + 72) + 4 * *(int *)(v6 + 12)) = a2;
    *(_DWORD *)(v6 + 8) = (*(_DWORD *)(v6 + 8) & 0xFFFFFFE | a2 & 1 | ((_DWORD)v14 << 28)) ^ 1;
    *(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * (a2 >> 1)) = *(_QWORD *)(v6 + 8);
    v10 = (unint64_t)a2 >> 6;
  }
  *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v10) |= 1 << v9;
  ++*(_DWORD *)(v6 + 12);
  *(_BYTE *)(a1 + 512) = 0;
  return 1;
}

BOOL operations_research::sat::BinaryImplicationGraph::AddAtMostOne(uint64_t a1, char *__src, unint64_t a3)
{
  void *v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31[2];
  uint64_t *v32;

  LODWORD(v31[0]) = (*(_DWORD *)(*(_QWORD *)(a1 + 128) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v32) = 0;
  if (LODWORD(v31[0]))
  {
    v32 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v31, (int)&v32, "trail_->CurrentDecisionLevel() == 0");
    if (v32)
    {
      google::LogMessageFatal::LogMessageFatal(v31, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 532, &v32);
      google::LogMessage::stream((google::LogMessage *)v31);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v31);
    }
  }
  if (a3 < 2)
    return 1;
  v9 = *(_QWORD *)(a1 + 248);
  v7 = *(void **)(a1 + 256);
  v8 = (void **)(a1 + 248);
  std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>((unint64_t *)(a1 + 248), v7, __src, &__src[4 * a3], (uint64_t)(4 * a3) >> 2);
  v11 = *(char **)(a1 + 256);
  v10 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v11 >= v10)
  {
    v13 = (char *)*v8;
    v14 = v11 - (_BYTE *)*v8;
    v15 = v14 >> 2;
    v16 = (v14 >> 2) + 1;
    if (v16 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = v10 - (_QWORD)v13;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(4 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[4 * v15];
    v21 = &v19[4 * v18];
    *v20 = -1;
    v12 = v20 + 1;
    if (v11 != v13)
    {
      v22 = v11 - v13 - 4;
      if (v22 < 0x2C)
        goto LABEL_33;
      if ((unint64_t)(v11 - v19 - v14) < 0x20)
        goto LABEL_33;
      v23 = (v22 >> 2) + 1;
      v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
      v25 = &v11[-v24];
      v20 = (_DWORD *)((char *)v20 - v24);
      v26 = &v19[4 * v15 - 16];
      v27 = v11 - 16;
      v28 = v23 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 8;
      }
      while (v28);
      v11 = v25;
      if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_33:
        do
        {
          v30 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *--v20 = v30;
        }
        while (v11 != v13);
      }
    }
    *(_QWORD *)(a1 + 248) = v20;
    *(_QWORD *)(a1 + 256) = v12;
    *(_QWORD *)(a1 + 264) = v21;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *(_DWORD *)v11 = -1;
    v12 = v11 + 4;
  }
  *(_QWORD *)(a1 + 256) = v12;
  *(_BYTE *)(a1 + 512) = 0;
  return operations_research::sat::BinaryImplicationGraph::CleanUpAndAddAtMostOnes((operations_research::sat::BinaryImplicationGraph *)a1, ((unint64_t)v7 - v9) >> 2);
}

void sub_22DA48AE8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BinaryImplicationGraph::CleanUpAndAddAtMostOnes(operations_research::sat::BinaryImplicationGraph *this, uint64_t a2)
{
  uint64_t v2;
  operations_research::sat::BinaryImplicationGraph *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  uint64_t v24;
  int *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  BOOL fixed;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  int *v52;
  _OWORD *v53;
  __int128 *v54;
  unint64_t v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  int *v75;
  _OWORD *v76;
  __int128 *v77;
  unint64_t v78;
  __int128 v79;
  unint64_t v80;
  char *v81;
  int v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  int *v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  _BYTE v94[16];

  v2 = a2;
  v3 = this;
  v4 = *((_QWORD *)this + 31);
  v5 = (_QWORD *)((char *)this + 248);
  v6 = *((_QWORD *)this + 32) - v4;
  v87 = (unint64_t)v6 >> 2;
  if ((int)((unint64_t)v6 >> 2) <= (int)a2)
  {
LABEL_101:
    v83 = v6 >> 2;
    if ((int)v2 <= v83)
    {
      if ((int)v2 < v83)
        *((_QWORD *)v3 + 32) = v4 + 4 * (int)v2;
    }
    else
    {
      std::vector<operations_research::sat::Literal>::__append((uint64_t)v5, (int)v2 - v83);
    }
    return 1;
  }
  v91 = *((_QWORD *)this + 16);
  v92 = (uint64_t *)((char *)this + 224);
  LODWORD(v7) = a2;
LABEL_5:
  v8 = *v5;
  v9 = *(_DWORD *)(*v5 + 4 * (int)v7);
  if (v9 == -1)
    goto LABEL_4;
  v10 = 0;
  v7 = (int)v7;
  v11 = *(_QWORD *)(v91 + 24);
  v12 = v2;
  do
  {
    v13 = v9;
    v14 = (unint64_t)v9 >> 6;
    v15 = *(_QWORD *)(v11 + 8 * v14);
    if (((v15 >> (v9 & 0x3F ^ 1u)) & 1) == 0)
    {
      v16 = 1 << (v9 & 0x3F);
      if ((*(_QWORD *)(*((_QWORD *)v3 + 83) + 8 * v14) & v16) == 0)
      {
        if (v10 & 1 | ((v15 & v16) == 0))
        {
          v17 = *((_QWORD *)v3 + 71);
          if (v9 < (int)((unint64_t)(*((_QWORD *)v3 + 72) - v17) >> 2))
          {
LABEL_13:
            v18 = *(_DWORD *)(v17 + 4 * v13);
            if (v18 != -1)
              v9 = v18;
          }
LABEL_7:
          *(_DWORD *)(v8 + 4 * v12++) = v9;
          goto LABEL_8;
        }
        ++v7;
        v9 = *(_DWORD *)(v8 + 4 * v7);
        if (v9 == -1)
          goto LABEL_21;
        v13 = v9;
        v19 = (unint64_t)v9 >> 6;
        v10 = 1;
        if (((*(_QWORD *)(v11 + 8 * v19) >> (v9 & 0x3F ^ 1u)) & 1) == 0)
        {
          v10 = 1;
          if ((*(_QWORD *)(*((_QWORD *)v3 + 83) + 8 * v19) & (1 << v9)) == 0)
          {
            v17 = *((_QWORD *)v3 + 71);
            if (v9 < (int)((unint64_t)(*((_QWORD *)v3 + 72) - v17) >> 2))
              goto LABEL_13;
            goto LABEL_7;
          }
        }
      }
    }
LABEL_8:
    ++v7;
    v9 = *(_DWORD *)(v8 + 4 * v7);
  }
  while (v9 != -1);
  if ((v10 & 1) == 0)
  {
    v24 = (int)v2;
    v25 = (int *)(v8 + 4 * (int)v2);
    v26 = (char *)(v8 + 4 * v12);
    v27 = 126 - 2 * __clz((v26 - (char *)v25) >> 2);
    if (v12 == (_DWORD)v2)
      v28 = 0;
    else
      v28 = v27;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v25, v26, (uint64_t)v94, v28, 1);
    v3 = this;
    LODWORD(v29) = v2;
    if ((int)v2 < v12)
    {
      v30 = 4 * (int)v2;
      v31 = v2;
      do
      {
        v32 = *v5;
        v33 = *(_DWORD *)(*v5 + v30);
        if (v31 > (int)v2 && (v29 = v31 - 1, v33 == *(_DWORD *)(v32 + 4 * v29)))
        {
          v34 = *(_QWORD *)(*(_QWORD *)(v91 + 24) + (((unint64_t)v33 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v34 >> v33) & 1) != 0)
            return 0;
          if (((v34 >> (v33 & 0x3F ^ 1u)) & 1) == 0)
          {
            fixed = operations_research::sat::BinaryImplicationGraph::FixLiteral((uint64_t)v3, v33 ^ 1);
            v3 = this;
            if (!fixed)
              return 0;
          }
        }
        else
        {
          LODWORD(v29) = v31 + 1;
          *(_DWORD *)(v32 + 4 * v31) = v33;
        }
        --v12;
        v30 += 4;
        v31 = v29;
      }
      while ((_DWORD)v2 != v12);
    }
    v90 = v2;
    v36 = (int *)(*v5 + 4 * (int)v2);
    v37 = (int)v29;
    v38 = (int)v29 - (uint64_t)(int)v2;
    v39 = &v36[v38];
    if (v38 < 0xA)
    {
      v85 = (int)v29 - v24;
      v86 = v5;
      v88 = v36;
      if ((_DWORD)v29 == (_DWORD)v90)
      {
LABEL_3:
        v5 = v86;
        *((_QWORD *)v3 + 27) += (v85 - 1) * v85;
        v2 = v90;
        goto LABEL_4;
      }
      while (2)
      {
        v89 = v36;
        v40 = *v36;
        v41 = v88;
LABEL_49:
        v42 = *v41;
        if ((_DWORD)v40 == *v41)
          goto LABEL_48;
        v43 = *((_QWORD *)v3 + 24) + 32 * v40;
        v44 = v43 + 8;
        v45 = *(_QWORD *)v43;
        if ((*(_QWORD *)v43 & 1) != 0)
        {
          v44 = *(_QWORD *)(v43 + 8);
          v46 = *(_QWORD *)(v43 + 16);
          v47 = v42 ^ 1;
          v48 = v45 >> 1;
          if (v45 >> 1 == v46)
            goto LABEL_54;
        }
        else
        {
          v46 = 6;
          v47 = v42 ^ 1;
          v48 = v45 >> 1;
          if (v45 >> 1 == 6)
          {
LABEL_54:
            if (((v46 >> 61) & 3) != 0)
              goto LABEL_107;
            v49 = (char *)operator new(8 * v46);
            v50 = v49;
            *(_DWORD *)&v49[4 * v46] = v47;
            if (v45 >= 2)
            {
              v51 = 0;
              if (v46 < 8 || (unint64_t)&v49[-v44] < 0x20)
              {
                v52 = (int *)v44;
              }
              else
              {
                v51 = v46 & 0xFFFFFFFFFFFFFFF8;
                v52 = (int *)(v44 + 4 * (v46 & 0xFFFFFFFFFFFFFFF8));
                v53 = v49 + 16;
                v54 = (__int128 *)(v44 + 16);
                v55 = v46 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v56 = *v54;
                  *(v53 - 1) = *(v54 - 1);
                  *v53 = v56;
                  v53 += 2;
                  v54 += 2;
                  v55 -= 8;
                }
                while (v55);
                if (v46 == v51)
                  goto LABEL_65;
              }
              v57 = v46 - v51;
              v58 = &v49[4 * v51];
              do
              {
                v59 = *v52++;
                *(_DWORD *)v58 = v59;
                v58 += 4;
                --v57;
              }
              while (v57);
            }
LABEL_65:
            if ((v45 & 1) != 0)
            {
              operator delete(*(void **)(v43 + 8));
              v45 = *(_QWORD *)v43;
            }
            *(_QWORD *)(v43 + 8) = v50;
            *(_QWORD *)(v43 + 16) = 2 * v46;
            v45 |= 1uLL;
            v3 = this;
LABEL_47:
            *(_QWORD *)v43 = v45 + 2;
LABEL_48:
            if (++v41 == v39)
            {
              v36 = v89 + 1;
              if (v89 + 1 == v39)
                goto LABEL_3;
              continue;
            }
            goto LABEL_49;
          }
        }
        break;
      }
      *(_DWORD *)(v44 + 4 * v48) = v47;
      goto LABEL_47;
    }
    while (1)
    {
      while (1)
      {
        v60 = *v36;
        v62 = *((_QWORD *)v3 + 28);
        v61 = *((_QWORD *)v3 + 29);
        v63 = (v61 - v62) >> 5;
        if ((int)v60 >= (int)v63)
        {
          if (v60 + 1 <= v63)
          {
            if (v60 + 1 < v63)
            {
              v64 = v62 + 32 * (v60 + 1);
              if (v61 != v64)
              {
                v65 = *((_QWORD *)v3 + 29);
                do
                {
                  v66 = *(_BYTE *)(v65 - 32);
                  v65 -= 32;
                  if ((v66 & 1) != 0)
                  {
                    operator delete(*(void **)(v61 - 24));
                    v3 = this;
                  }
                  v61 = v65;
                }
                while (v65 != v64);
              }
              *((_QWORD *)v3 + 29) = v64;
            }
          }
          else
          {
            std::vector<absl::lts_2020_02_25::InlinedVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,6ul,std::allocator<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>>::__append(v92, v60 + 1 - v63);
            v3 = this;
          }
        }
        if (((*(_QWORD *)(*((_QWORD *)v3 + 68) + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v60) & 1) != 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v94, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 647);
          v84 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v94);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Check failed: !is_redundant_[l.Index()] ", 40);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v94);
        }
        v67 = *v92 + 32 * v60;
        v68 = v67 + 8;
        v69 = *(_QWORD *)v67;
        if ((*(_QWORD *)v67 & 1) == 0)
          break;
        v68 = *(_QWORD *)(v67 + 8);
        v70 = *(_QWORD *)(v67 + 16);
        v71 = v69 >> 1;
        if (v69 >> 1 == v70)
          goto LABEL_84;
LABEL_68:
        *(_DWORD *)(v68 + 4 * v71) = v90;
        *(_QWORD *)v67 = v69 + 2;
        if (++v36 == v39)
          goto LABEL_98;
      }
      v70 = 6;
      v71 = v69 >> 1;
      if (v69 >> 1 != 6)
        goto LABEL_68;
LABEL_84:
      if (((v70 >> 61) & 3) != 0)
LABEL_107:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v72 = (char *)operator new(8 * v70);
      v73 = v72;
      *(_DWORD *)&v72[4 * v70] = v90;
      if (v69 < 2)
        goto LABEL_95;
      v74 = 0;
      if (v70 < 8 || (unint64_t)&v72[-v68] < 0x20)
      {
        v75 = (int *)v68;
      }
      else
      {
        v74 = v70 & 0xFFFFFFFFFFFFFFF8;
        v75 = (int *)(v68 + 4 * (v70 & 0xFFFFFFFFFFFFFFF8));
        v76 = v72 + 16;
        v77 = (__int128 *)(v68 + 16);
        v78 = v70 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v79 = *v77;
          *(v76 - 1) = *(v77 - 1);
          *v76 = v79;
          v76 += 2;
          v77 += 2;
          v78 -= 8;
        }
        while (v78);
        if (v70 == v74)
          goto LABEL_95;
      }
      v80 = v70 - v74;
      v81 = &v72[4 * v74];
      do
      {
        v82 = *v75++;
        *(_DWORD *)v81 = v82;
        v81 += 4;
        --v80;
      }
      while (v80);
LABEL_95:
      if ((v69 & 1) != 0)
      {
        operator delete(*(void **)(v67 + 8));
        v69 = *(_QWORD *)v67;
      }
      *(_QWORD *)(v67 + 8) = v73;
      *(_QWORD *)(v67 + 16) = 2 * v70;
      v3 = this;
      *(_QWORD *)v67 = (v69 | 1) + 2;
      if (++v36 == v39)
      {
LABEL_98:
        v2 = (v37 + 1);
        *(_DWORD *)(*v5 + 4 * v37) = -1;
LABEL_4:
        LODWORD(v7) = v7 + 1;
        if ((int)v7 >= (int)v87)
        {
          v4 = *((_QWORD *)v3 + 31);
          v6 = *((_QWORD *)v3 + 32) - v4;
          goto LABEL_101;
        }
        goto LABEL_5;
      }
    }
  }
LABEL_21:
  if ((int)v2 >= v12)
    goto LABEL_4;
  v20 = 4 * (int)v2;
  while (1)
  {
    v21 = *(int *)(*v5 + v20);
    v22 = *(_QWORD *)(*(_QWORD *)(v91 + 24) + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v22 >> (v21 & 0x3F ^ 1)) & 1) == 0)
    {
      if (((v22 >> (v21 & 0x3F)) & 1) != 0)
        return 0;
      result = operations_research::sat::BinaryImplicationGraph::FixLiteral((uint64_t)v3, v21 ^ 1);
      v3 = this;
      if (!result)
        return result;
    }
    --v12;
    v20 += 4;
    if ((_DWORD)v2 == v12)
      goto LABEL_4;
  }
}

void sub_22DA49198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BinaryImplicationGraph::FixLiteral(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = (unint64_t)a2 >> 6;
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * v4);
  result = 1;
  v7 = 1 << a2;
  if ((v5 & (1 << a2)) == 0)
  {
    if (((v5 >> (a2 & 0x3F ^ 1u)) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 136);
      if (v9)
      {
        v13 = a2;
        operations_research::sat::DratProofHandler::AddClause(v9, &v13, 1);
        v3 = *(_QWORD *)(a1 + 128);
      }
      *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * *(int *)(v3 + 12)) = a2;
      *(_DWORD *)(v3 + 8) = (*(_DWORD *)(v3 + 8) & 0xFFFFFFE | a2 & 1) ^ 0x10000001;
      *(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * (a2 >> 1)) = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * v4) |= v7;
      ++*(_DWORD *)(v3 + 12);
      v10 = *(_QWORD *)(a1 + 128);
      if (!*(_QWORD *)(a1 + 216) && *(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 232))
      {
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(v10 + 12);
        return 1;
      }
      else
      {
        while (1)
        {
          v11 = *(int *)(a1 + 36);
          v12 = *(_DWORD *)(v10 + 12);
          result = (int)v11 >= v12;
          if ((int)v11 >= v12)
            break;
          *(_DWORD *)(a1 + 36) = v11 + 1;
          if ((operations_research::sat::BinaryImplicationGraph::PropagateOnTrue(a1, *(_DWORD *)(*(_QWORD *)(v10 + 72) + 4 * v11), v10) & 1) == 0)return 0;
        }
      }
    }
  }
  return result;
}

uint64_t operations_research::sat::BinaryImplicationGraph::PropagateOnTrue(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 192) + 32 * a2);
  v6 = *v3;
  v4 = (int *)(v3 + 1);
  v5 = v6;
  v7 = v6 >> 1;
  *(_QWORD *)(a1 + 280) += v6 >> 1;
  if ((v6 & 1) != 0)
    v4 = *(int **)v4;
  if (v5 >= 2)
  {
    v14 = *(_QWORD *)(a3 + 24);
    v15 = 4 * v7;
    do
    {
      v17 = *v4;
      v18 = (unint64_t)*v4 >> 6;
      v19 = 1 << *v4;
      if ((v19 & *(_QWORD *)(v14 + 8 * v18)) == 0)
      {
        ++*(_QWORD *)(a1 + 272);
        if (((*(_QWORD *)(v14 + 8 * v18) >> (v17 & 0x3F ^ 1u)) & 1) != 0)
        {
          v29 = a2 ^ 1;
          v30 = v17;
          *(_QWORD *)(a3 + 144) = 0;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a3 + 96), (char *)&v29, (char *)&v31, 2uLL);
          return 0;
        }
        v16 = *(_QWORD *)(a1 + 176) + *(int *)(a3 + 12);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + ((v16 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v16 & 0x3FF)) = a2 ^ 1;
        LODWORD(v16) = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(*(_QWORD *)(a3 + 72) + 4 * *(int *)(a3 + 12)) = v17;
        *(_DWORD *)(a3 + 8) = (*(_DWORD *)(a3 + 8) & 0xFFFFFFE | v17 & 1 | ((_DWORD)v16 << 28)) ^ 1;
        *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * (v17 >> 1)) = *(_QWORD *)(a3 + 8);
        v14 = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(v14 + 8 * v18) |= v19;
        ++*(_DWORD *)(a3 + 12);
      }
      ++v4;
      v15 -= 4;
    }
    while (v15);
  }
  v8 = *(_QWORD *)(a1 + 224);
  if (a2 >= (int)((unint64_t)(*(_QWORD *)(a1 + 232) - v8) >> 5))
    return 1;
  v9 = (_QWORD *)(v8 + 32 * a2);
  v12 = *v9;
  v10 = (int *)(v9 + 1);
  v11 = v12;
  if ((v12 & 1) != 0)
    v10 = *(int **)v10;
  if (v11 < 2)
    return 1;
  v20 = &v10[v11 >> 1];
  v21 = *(_QWORD *)(a1 + 248);
  while (1)
  {
    v22 = *v10;
    v23 = *(_DWORD *)(v21 + 4 * v22);
    if (v23 != -1)
      break;
LABEL_17:
    if (++v10 == v20)
      return 1;
  }
  v24 = 4 * v22 + 4;
  while (1)
  {
    ++*(_QWORD *)(a1 + 280);
    if (v23 == a2)
      goto LABEL_20;
    v25 = (unint64_t)v23 >> 6;
    v26 = *(_QWORD *)(a3 + 24);
    if (((*(_QWORD *)(v26 + 8 * v25) >> (v23 & 0x3F ^ 1u)) & 1) != 0)
      goto LABEL_20;
    ++*(_QWORD *)(a1 + 272);
    if (((*(_QWORD *)(v26 + 8 * v25) >> (v23 & 0x3F)) & 1) != 0)
      break;
    v27 = *(_QWORD *)(a1 + 176) + *(int *)(a3 + 12);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + ((v27 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v27 & 0x3FF)) = a2 ^ 1;
    v28 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(*(_QWORD *)(a3 + 72) + 4 * *(int *)(a3 + 12)) = v23 ^ 1;
    *(_DWORD *)(a3 + 8) = (*(_DWORD *)(a3 + 8) & 0xFFFFFFE | (v23 ^ 1) & 1 | (v28 << 28)) ^ 1;
    *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * (v23 >> 1)) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v25) |= 1 << (v23 ^ 1u);
    ++*(_DWORD *)(a3 + 12);
    v21 = *(_QWORD *)(a1 + 248);
LABEL_20:
    v23 = *(_DWORD *)(v21 + v24);
    v24 += 4;
    if (v23 == -1)
      goto LABEL_17;
  }
  v29 = a2 ^ 1;
  v30 = v23 ^ 1;
  *(_QWORD *)(a3 + 144) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a3 + 96), (char *)&v29, (char *)&v31, 2uLL);
  return 0;
}

uint64_t operations_research::sat::BinaryImplicationGraph::Reason(operations_research::sat::BinaryImplicationGraph *this, const operations_research::sat::Trail *a2, int a3)
{
  return *(_QWORD *)(*((_QWORD *)this + 19)
                   + (((unint64_t)(*((_QWORD *)this + 22) + a3) >> 7) & 0x1FFFFFFFFFFFFF8))
       + 4 * ((*((_QWORD *)this + 22) + a3) & 0x3FFLL);
}

void operations_research::sat::BinaryImplicationGraph::MinimizeConflictWithReachability(_QWORD *a1, uint64_t *a2)
{
  int v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _DWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _DWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  _DWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _OWORD *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  BOOL v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  char *v99;
  void **v100;
  _QWORD *v101;
  void **v102;

  a1[61] = a1[60];
  v4 = *(_DWORD *)*a2 ^ 1;
  v5 = a1 + 40;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 40), (a1[25] - a1[24]) >> 5);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v5, v4);
  v6 = (unint64_t *)(a1[24] + 32 * v4);
  v9 = *v6;
  v8 = v6 + 1;
  v7 = v9;
  v98 = a2;
  if ((v9 & 1) != 0)
    v8 = (_QWORD *)*v8;
  if (v7 >= 2)
  {
    v102 = (void **)(a1 + 60);
    v99 = (char *)v8 + 4 * (v7 >> 1);
    v100 = (void **)(a1 + 47);
    while (1)
    {
      v101 = v8;
      v20 = *(_DWORD *)v8;
      if (((*(_QWORD *)(a1[41] + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        break;
LABEL_12:
      v8 = (_QWORD *)((char *)v101 + 4);
      if ((char *)v101 + 4 == v99)
        goto LABEL_4;
    }
    v22 = (char *)a1[61];
    v21 = a1[62];
    if ((unint64_t)v22 < v21)
    {
      *(_DWORD *)v22 = v20;
      v23 = (uint64_t)(v22 + 4);
LABEL_35:
      a1[61] = v23;
      v41 = a1[60];
      while (1)
      {
        if (v41 == v23)
          goto LABEL_12;
        v43 = *(_DWORD *)(v23 - 4);
        v42 = v43;
        a1[61] = v23 - 4;
        v44 = v43;
        v45 = (unint64_t)v43 >> 6;
        v46 = a1[41];
        v47 = *(_QWORD *)(v46 + 8 * v45);
        v48 = 1 << v43;
        if ((v47 & (1 << v43)) != 0)
          goto LABEL_36;
        *(_QWORD *)(v46 + 8 * v45) = v47 | v48;
        v50 = (char *)a1[48];
        v49 = a1[49];
        if ((unint64_t)v50 < v49)
        {
          *(_DWORD *)v50 = v42;
          v51 = (uint64_t)(v50 + 4);
          goto LABEL_60;
        }
        v52 = (char *)*v100;
        v53 = v50 - (_BYTE *)*v100;
        v54 = v53 >> 2;
        v55 = (v53 >> 2) + 1;
        if (v55 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v56 = v49 - (_QWORD)v52;
        if (v56 >> 1 > v55)
          v55 = v56 >> 1;
        v57 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v55;
        if (v57)
          break;
        v58 = 0;
        v59 = (_DWORD *)(4 * v54);
        *(_DWORD *)(4 * v54) = v42;
        v51 = 4 * v54 + 4;
        if (v50 != v52)
          goto LABEL_52;
LABEL_58:
        a1[47] = v59;
        a1[48] = v51;
        a1[49] = &v58[4 * v57];
        if (v52)
          operator delete(v52);
LABEL_60:
        a1[48] = v51;
        v69 = (unint64_t *)(a1[24] + 32 * v44);
        v72 = *v69;
        v71 = v69 + 1;
        v70 = v72;
        if ((v72 & 1) != 0)
          v71 = (_QWORD *)*v71;
        if (v70 >= 2)
        {
          v73 = (_QWORD *)((char *)v71 + 4 * (v70 >> 1));
          while (2)
          {
            v75 = *(_DWORD *)v71;
            if (((*(_QWORD *)(a1[41] + (((unint64_t)v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v75) & 1) != 0)
              goto LABEL_66;
            v77 = (char *)a1[61];
            v76 = a1[62];
            if ((unint64_t)v77 >= v76)
            {
              v78 = (char *)*v102;
              v79 = v77 - (_BYTE *)*v102;
              v80 = v79 >> 2;
              v81 = (v79 >> 2) + 1;
              if (v81 >> 62)
                goto LABEL_92;
              v82 = v76 - (_QWORD)v78;
              if (v82 >> 1 > v81)
                v81 = v82 >> 1;
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                v83 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v83 = v81;
              if (v83)
              {
                if (v83 >> 62)
                  goto LABEL_93;
                v84 = operator new(4 * v83);
                v85 = &v84[4 * v80];
                *v85 = v75;
                v74 = (uint64_t)(v85 + 1);
                if (v77 == v78)
                {
LABEL_86:
                  a1[60] = v85;
                  a1[61] = v74;
                  a1[62] = &v84[4 * v83];
                  if (v78)
                    operator delete(v78);
LABEL_65:
                  a1[61] = v74;
LABEL_66:
                  v71 = (_QWORD *)((char *)v71 + 4);
                  if (v71 == v73)
                    goto LABEL_36;
                  continue;
                }
              }
              else
              {
                v84 = 0;
                v85 = (_DWORD *)(4 * v80);
                *(_DWORD *)(4 * v80) = v75;
                v74 = 4 * v80 + 4;
                if (v77 == v78)
                  goto LABEL_86;
              }
              v86 = v77 - 4 - v78;
              if (v86 < 0x2C)
                goto LABEL_97;
              if ((unint64_t)(v77 - &v84[v79]) < 0x20)
                goto LABEL_97;
              v87 = (v86 >> 2) + 1;
              v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
              v89 = &v77[-v88];
              v85 = (_DWORD *)((char *)v85 - v88);
              v90 = &v84[4 * v80 - 16];
              v91 = v77 - 16;
              v92 = v87 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v93 = *(_OWORD *)v91;
                *(v90 - 1) = *((_OWORD *)v91 - 1);
                *v90 = v93;
                v90 -= 2;
                v91 -= 32;
                v92 -= 8;
              }
              while (v92);
              v77 = v89;
              if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_97:
                do
                {
                  v94 = *((_DWORD *)v77 - 1);
                  v77 -= 4;
                  *--v85 = v94;
                }
                while (v77 != v78);
              }
              goto LABEL_86;
            }
            break;
          }
          *(_DWORD *)v77 = v75;
          v74 = (uint64_t)(v77 + 4);
          goto LABEL_65;
        }
LABEL_36:
        v41 = a1[60];
        v23 = a1[61];
      }
      if (v57 >> 62)
        goto LABEL_93;
      v58 = operator new(4 * v57);
      v59 = &v58[4 * v54];
      *v59 = v42;
      v51 = (uint64_t)(v59 + 1);
      if (v50 == v52)
        goto LABEL_58;
LABEL_52:
      v60 = v50 - 4 - v52;
      if (v60 < 0x2C)
        goto LABEL_98;
      if ((unint64_t)(v50 - &v58[v53]) < 0x20)
        goto LABEL_98;
      v61 = (v60 >> 2) + 1;
      v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
      v63 = &v50[-v62];
      v59 = (_DWORD *)((char *)v59 - v62);
      v64 = &v58[4 * v54 - 16];
      v65 = v50 - 16;
      v66 = v61 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v67 = *(_OWORD *)v65;
        *(v64 - 1) = *((_OWORD *)v65 - 1);
        *v64 = v67;
        v64 -= 2;
        v65 -= 32;
        v66 -= 8;
      }
      while (v66);
      v50 = v63;
      if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_98:
        do
        {
          v68 = *((_DWORD *)v50 - 1);
          v50 -= 4;
          *--v59 = v68;
        }
        while (v50 != v52);
      }
      goto LABEL_58;
    }
    v24 = (char *)*v102;
    v25 = v22 - (_BYTE *)*v102;
    v26 = v25 >> 2;
    v27 = (v25 >> 2) + 1;
    if (v27 >> 62)
LABEL_92:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v28 = v21 - (_QWORD)v24;
    if (v28 >> 1 > v27)
      v27 = v28 >> 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
      v29 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 >> 62)
LABEL_93:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = operator new(4 * v29);
      v31 = &v30[4 * v26];
      *v31 = v20;
      v23 = (uint64_t)(v31 + 1);
      if (v22 == v24)
        goto LABEL_33;
    }
    else
    {
      v30 = 0;
      v31 = (_DWORD *)(4 * v26);
      *(_DWORD *)(4 * v26) = v20;
      v23 = 4 * v26 + 4;
      if (v22 == v24)
      {
LABEL_33:
        a1[60] = v31;
        a1[61] = v23;
        a1[62] = &v30[4 * v29];
        if (v24)
          operator delete(v24);
        goto LABEL_35;
      }
    }
    v32 = v22 - 4 - v24;
    if (v32 < 0x2C)
      goto LABEL_99;
    if ((unint64_t)(v22 - &v30[v25]) < 0x20)
      goto LABEL_99;
    v33 = (v32 >> 2) + 1;
    v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
    v35 = &v22[-v34];
    v31 = (_DWORD *)((char *)v31 - v34);
    v36 = &v30[4 * v26 - 16];
    v37 = v22 - 16;
    v38 = v33 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 8;
    }
    while (v38);
    v22 = v35;
    if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_99:
      do
      {
        v40 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--v31 = v40;
      }
      while (v22 != v24);
    }
    goto LABEL_33;
  }
LABEL_4:
  v10 = *v98;
  v11 = v98[1] - *v98;
  v12 = v11 >> 2;
  if ((unint64_t)v11 < 5)
  {
    v17 = 1;
  }
  else
  {
    v13 = a1[41];
    v14 = 2;
    if (v12 > 2)
      v14 = v12;
    v15 = v14 - 1;
    v16 = (int *)(v10 + 4);
    v17 = 1;
    do
    {
      v19 = *v16++;
      v18 = v19;
      if (((*(_QWORD *)(v13 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v19 & 0x3F ^ 1u)) & 1) == 0)
        *(_DWORD *)(v10 + 4 * v17++) = v18;
      --v15;
    }
    while (v15);
  }
  v95 = v12 > v17;
  v96 = v12 - v17;
  if (v95)
  {
    v97 = v96 + a1[37];
    ++a1[36];
    a1[37] = v97;
    v98[1] = v10 + 4 * v17;
  }
}

void operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(uint64_t a1, int a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  void **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = *(int **)(a1 + 56);
  v4 = *(int **)(a1 + 64);
  if ((int)(300 * ((unint64_t)((char *)v4 - (char *)v3) >> 2)) >= a2)
  {
    v17 = a2 & ~(a2 >> 31);
    *(_DWORD *)a1 = v17;
    v19 = (void **)(a1 + 8);
    v18 = *(char **)(a1 + 8);
    v20 = (v17 + 63) >> 6;
    v21 = *(_QWORD *)(a1 + 16) - (_QWORD)v18;
    v22 = v21 >> 3;
    v24 = 0;
    if (v20 <= v21 >> 3)
    {
      if (v20 < v21 >> 3)
        *(_QWORD *)(a1 + 16) = &v18[8 * v20];
    }
    else
    {
      std::vector<unsigned long long>::__append(a1 + 8, v20 - (v21 >> 3), &v24);
      v18 = (char *)*v19;
    }
    if (v20 >= v22)
      v23 = v22;
    else
      v23 = v20;
    bzero(v18, 8 * v23);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v5 = a1 + 8;
    v6 = *(_QWORD *)(a1 + 8);
    if (v3 != v4)
    {
      v7 = (char *)v4 - (char *)v3 - 4;
      v8 = v3;
      if (v7 < 4)
        goto LABEL_23;
      v9 = (v7 >> 2) + 1;
      v8 = &v3[v9 & 0x7FFFFFFFFFFFFFFELL];
      v10 = v3 + 1;
      v11 = v9 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v12 = ((unint64_t)*v10 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(_QWORD *)(v6 + (((unint64_t)*(v10 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) = 0;
        *(_QWORD *)(v6 + v12) = 0;
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
      if (v9 != (v9 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_23:
        do
        {
          v13 = *v8++;
          *(_QWORD *)(v6 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) = 0;
        }
        while (v8 != v4);
      }
    }
    *(_QWORD *)(a1 + 64) = v3;
    v14 = a2 & ~(a2 >> 31);
    *(_DWORD *)a1 = v14;
    v15 = (v14 + 63) >> 6;
    v24 = 0;
    v16 = (*(_QWORD *)(a1 + 16) - v6) >> 3;
    if (v15 <= v16)
    {
      if (v15 < v16)
        *(_QWORD *)(a1 + 16) = v6 + 8 * v15;
    }
    else
    {
      std::vector<unsigned long long>::__append(v5, v15 - v16, &v24);
    }
  }
}

void operations_research::sat::BinaryImplicationGraph::MinimizeConflictFirst(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int *v8;
  int *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _BYTE v25[16];

  if (*a3 == a3[1])
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v25, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 834);
    v24 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: !conflict->empty() ", 33);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v25);
  }
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 40), (a1[25] - a1[24]) >> 5);
  operations_research::sat::BinaryImplicationGraph::MarkDescendants(a1, *(_DWORD *)*a3 ^ 1);
  v8 = (int *)a1[47];
  v9 = (int *)a1[48];
  while (v8 != v9)
  {
    v10 = *v8;
    if (((*(_QWORD *)(*(_QWORD *)(a2 + 24) + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 & 0x3F ^ 1u)) & 1) != 0)
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a4, v10 >> 1);
    ++v8;
  }
  v11 = (_DWORD *)*a3;
  v12 = a3[1] - *a3;
  v13 = v12 >> 2;
  if ((unint64_t)v12 < 5)
  {
    v18 = 1;
  }
  else
  {
    v14 = a1[41];
    v15 = 2;
    if (v13 > 2)
      v15 = v13;
    v16 = v15 - 1;
    v17 = v11 + 1;
    v18 = 1;
    do
    {
      v20 = *v17++;
      v19 = v20;
      if (((*(_QWORD *)(v14 + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v20 & 0x3F ^ 1u)) & 1) == 0)
        v11[v18++] = v19;
      --v16;
    }
    while (v16);
  }
  v21 = v13 > v18;
  v22 = v13 - v18;
  if (v21)
  {
    v23 = v22 + a1[37];
    ++a1[36];
    a1[37] = v23;
    a3[1] = &v11[v18];
  }
}

void sub_22DA49F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::BinaryImplicationGraph::MarkDescendants(_QWORD *a1, int a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unint64_t v15;
  int *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  int *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  _OWORD *v41;
  int *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  int *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  _OWORD *v61;
  int *v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  int *v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  _DWORD *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  int v111;
  uint64_t v112;
  void **v113;
  void **v114;
  int *v115;
  uint64_t v116;
  int *v117;
  int *v118;
  unint64_t v119;
  unint64_t v120;
  int __src;
  uint64_t v122;

  __src = a2;
  v4 = (void **)(a1 + 60);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a1 + 60, (char *)&__src, (char *)&v122, 1uLL);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 40, a2);
  if (((*(_QWORD *)(a1[68] + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
  {
    v5 = a1[60];
    if (a1[61] != v5)
    {
      v6 = 0;
      v113 = (void **)(a1 + 47);
      v114 = v4;
      while (1)
      {
        v116 = *(int *)(v5 + 4 * v6);
        v8 = (_QWORD *)(a1[24] + 32 * v116);
        v11 = *v8;
        v10 = (int *)(v8 + 1);
        v9 = v11;
        v112 = v6;
        if ((v11 & 1) != 0)
          v10 = *(int **)v10;
        if (v9 >= 2)
          break;
LABEL_8:
        v12 = a1[28];
        v13 = v116;
        if ((int)v116 < (int)((unint64_t)(a1[29] - v12) >> 5))
        {
          v14 = (_QWORD *)(v12 + 32 * v116);
          v17 = *v14;
          v16 = (int *)(v14 + 1);
          v15 = v17;
          if ((v17 & 1) != 0)
            v16 = *(int **)v16;
          if (v15 >= 2)
          {
            v115 = &v16[v15 >> 1];
            v18 = a1[31];
            while (1)
            {
              v19 = *v16;
              v20 = *(_DWORD *)(v18 + 4 * v19);
              if (v20 != -1)
                break;
LABEL_14:
              if (++v16 == v115)
                goto LABEL_4;
            }
            v117 = v16;
            while (2)
            {
              if (v20 == v13)
                goto LABEL_19;
              v22 = v20 ^ 1;
              v23 = (unint64_t)v20 >> 6;
              v24 = a1[41];
              v25 = 1 << (v20 ^ 1u);
              if ((*(_QWORD *)(v24 + 8 * v23) & v25) != 0 || (*(_QWORD *)(a1[68] + 8 * v23) & v25) != 0)
                goto LABEL_19;
              v27 = (int *)a1[61];
              v26 = a1[62];
              if ((unint64_t)v27 < v26)
              {
                *v27 = v22;
                a1[61] = v27 + 1;
                v28 = *(_QWORD *)(v24 + 8 * v23);
                if ((v28 & v25) == 0)
                  goto LABEL_45;
LABEL_19:
                ++v19;
                v18 = a1[31];
                v20 = *(_DWORD *)(v18 + 4 * v19);
                if (v20 == -1)
                {
                  v16 = v117;
                  goto LABEL_14;
                }
                continue;
              }
              break;
            }
            v29 = (int *)*v114;
            v30 = (char *)v27 - (_BYTE *)*v114;
            v31 = v30 >> 2;
            v32 = (v30 >> 2) + 1;
            if (v32 >> 62)
              goto LABEL_120;
            v33 = v26 - (_QWORD)v29;
            if (v33 >> 1 > v32)
              v32 = v33 >> 1;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
              v32 = 0x3FFFFFFFFFFFFFFFLL;
            v119 = v32;
            if (v32)
            {
              if (v32 >> 62)
                goto LABEL_121;
              v34 = operator new(4 * v32);
              v35 = (int *)&v34[4 * v31];
              *v35 = v22;
              v36 = (uint64_t)(v35 + 1);
              if (v27 == v29)
              {
LABEL_42:
                a1[60] = v35;
                a1[61] = v36;
                a1[62] = &v34[4 * v119];
                if (v29)
                {
                  v46 = v36;
                  operator delete(v29);
                  v36 = v46;
                  v24 = a1[41];
                }
                v13 = v116;
                a1[61] = v36;
                v28 = *(_QWORD *)(v24 + 8 * v23);
                if ((v28 & v25) != 0)
                  goto LABEL_19;
LABEL_45:
                *(_QWORD *)(v24 + 8 * v23) = v28 | v25;
                v48 = (int *)a1[48];
                v47 = a1[49];
                if ((unint64_t)v48 < v47)
                {
                  *v48 = v22;
                  v21 = (uint64_t)(v48 + 1);
                }
                else
                {
                  v49 = (int *)*v113;
                  v50 = (char *)v48 - (_BYTE *)*v113;
                  v51 = v50 >> 2;
                  v52 = (v50 >> 2) + 1;
                  if (v52 >> 62)
                    goto LABEL_122;
                  v53 = v47 - (_QWORD)v49;
                  if (v53 >> 1 > v52)
                    v52 = v53 >> 1;
                  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
                    v54 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v54 = v52;
                  if (v54)
                  {
                    if (v54 >> 62)
                      goto LABEL_121;
                    v55 = operator new(4 * v54);
                    v56 = (int *)&v55[4 * v51];
                    *v56 = v22;
                    v21 = (uint64_t)(v56 + 1);
                    if (v48 != v49)
                    {
LABEL_55:
                      v57 = (char *)(v48 - 1) - (char *)v49;
                      if (v57 < 0x2C)
                        goto LABEL_125;
                      if ((unint64_t)((char *)v48 - &v55[v50]) < 0x20)
                        goto LABEL_125;
                      v58 = (v57 >> 2) + 1;
                      v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
                      v60 = &v48[v59 / 0xFFFFFFFFFFFFFFFCLL];
                      v56 = (int *)((char *)v56 - v59);
                      v61 = &v55[4 * v51 - 16];
                      v62 = v48 - 4;
                      v63 = v58 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v64 = *(_OWORD *)v62;
                        *(v61 - 1) = *((_OWORD *)v62 - 1);
                        *v61 = v64;
                        v61 -= 2;
                        v62 -= 8;
                        v63 -= 8;
                      }
                      while (v63);
                      v48 = v60;
                      if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_125:
                        do
                        {
                          v65 = *--v48;
                          *--v56 = v65;
                        }
                        while (v48 != v49);
                      }
                    }
                  }
                  else
                  {
                    v55 = 0;
                    v56 = (int *)(4 * v51);
                    *(_DWORD *)(4 * v51) = v22;
                    v21 = 4 * v51 + 4;
                    if (v48 != v49)
                      goto LABEL_55;
                  }
                  a1[47] = v56;
                  a1[48] = v21;
                  a1[49] = &v55[4 * v54];
                  if (v49)
                    operator delete(v49);
                  v13 = v116;
                }
                a1[48] = v21;
                goto LABEL_19;
              }
            }
            else
            {
              v34 = 0;
              v35 = (int *)(4 * v31);
              *(_DWORD *)(4 * v31) = v22;
              v36 = 4 * v31 + 4;
              if (v27 == v29)
                goto LABEL_42;
            }
            v37 = (char *)(v27 - 1) - (char *)v29;
            if (v37 < 0x2C)
              goto LABEL_126;
            if ((unint64_t)((char *)v27 - &v34[v30]) < 0x20)
              goto LABEL_126;
            v38 = (v37 >> 2) + 1;
            v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
            v40 = &v27[v39 / 0xFFFFFFFFFFFFFFFCLL];
            v35 = (int *)((char *)v35 - v39);
            v41 = &v34[4 * v31 - 16];
            v42 = v27 - 4;
            v43 = v38 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v44 = *(_OWORD *)v42;
              *(v41 - 1) = *((_OWORD *)v42 - 1);
              *v41 = v44;
              v41 -= 2;
              v42 -= 8;
              v43 -= 8;
            }
            while (v43);
            v27 = v40;
            if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_126:
              do
              {
                v45 = *--v27;
                *--v35 = v45;
              }
              while (v27 != v29);
            }
            goto LABEL_42;
          }
        }
LABEL_4:
        v6 = v112 + 1;
        v5 = a1[60];
        v7 = (a1[61] - v5) >> 2;
        v4 = v114;
        if (v7 <= v112 + 1)
          goto LABEL_118;
      }
      v66 = &v10[v9 >> 1];
      v118 = v66;
      while (1)
      {
        v68 = *v10;
        v69 = (unint64_t)*v10 >> 6;
        v70 = a1[41];
        v71 = 1 << *v10;
        if ((v71 & *(_QWORD *)(v70 + 8 * v69)) != 0 || (*(_QWORD *)(a1[68] + 8 * v69) & v71) != 0)
          goto LABEL_70;
        v73 = (char *)a1[61];
        v72 = a1[62];
        if ((unint64_t)v73 >= v72)
          break;
        *(_DWORD *)v73 = v68;
        a1[61] = v73 + 4;
        v74 = *(_QWORD *)(v70 + 8 * v69);
        if ((v74 & v71) != 0)
          goto LABEL_70;
LABEL_96:
        *(_QWORD *)(v70 + 8 * v69) = v74 | v71;
        v94 = (char *)a1[48];
        v93 = a1[49];
        if ((unint64_t)v94 >= v93)
        {
          v95 = (char *)*v113;
          v96 = v94 - (_BYTE *)*v113;
          v97 = v96 >> 2;
          v98 = (v96 >> 2) + 1;
          if (v98 >> 62)
LABEL_122:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v99 = v93 - (_QWORD)v95;
          if (v99 >> 1 > v98)
            v98 = v99 >> 1;
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
            v100 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v100 = v98;
          if (v100)
          {
            if (v100 >> 62)
LABEL_121:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v101 = operator new(4 * v100);
            v102 = &v101[4 * v97];
            *v102 = v68;
            v67 = (uint64_t)(v102 + 1);
            if (v94 == v95)
              goto LABEL_114;
LABEL_108:
            v103 = v94 - 4 - v95;
            if (v103 < 0x2C)
              goto LABEL_127;
            if ((unint64_t)(v94 - &v101[v96]) < 0x20)
              goto LABEL_127;
            v104 = (v103 >> 2) + 1;
            v105 = 4 * (v104 & 0x7FFFFFFFFFFFFFF8);
            v106 = &v94[-v105];
            v102 = (_DWORD *)((char *)v102 - v105);
            v107 = &v101[4 * v97 - 16];
            v108 = v94 - 16;
            v109 = v104 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v110 = *(_OWORD *)v108;
              *(v107 - 1) = *((_OWORD *)v108 - 1);
              *v107 = v110;
              v107 -= 2;
              v108 -= 32;
              v109 -= 8;
            }
            while (v109);
            v94 = v106;
            if (v104 != (v104 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_127:
              do
              {
                v111 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *--v102 = v111;
              }
              while (v94 != v95);
            }
          }
          else
          {
            v101 = 0;
            v102 = (_DWORD *)(4 * v97);
            *(_DWORD *)(4 * v97) = v68;
            v67 = 4 * v97 + 4;
            if (v94 != v95)
              goto LABEL_108;
          }
LABEL_114:
          a1[47] = v102;
          a1[48] = v67;
          a1[49] = &v101[4 * v100];
          if (v95)
            operator delete(v95);
          v4 = v114;
          v66 = v118;
          goto LABEL_69;
        }
        *(_DWORD *)v94 = v68;
        v67 = (uint64_t)(v94 + 4);
LABEL_69:
        a1[48] = v67;
LABEL_70:
        if (++v10 == v66)
          goto LABEL_8;
      }
      v75 = (char *)*v4;
      v76 = (v73 - v75) >> 2;
      v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 62)
LABEL_120:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v78 = v72 - (_QWORD)v75;
      if (v78 >> 1 > v77)
        v77 = v78 >> 1;
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
        v77 = 0x3FFFFFFFFFFFFFFFLL;
      v120 = v77;
      if (v77)
      {
        if (v77 >> 62)
          goto LABEL_121;
        v79 = (char *)operator new(4 * v77);
        v80 = &v79[4 * v76];
        *(_DWORD *)v80 = v68;
        v81 = (uint64_t)(v80 + 4);
        if (v73 == v75)
        {
LABEL_93:
          a1[60] = v80;
          a1[61] = v81;
          a1[62] = &v79[4 * v120];
          if (v75)
          {
            v91 = v75;
            v92 = v81;
            operator delete(v91);
            v81 = v92;
            v70 = a1[41];
          }
          v4 = v114;
          v66 = v118;
          a1[61] = v81;
          v74 = *(_QWORD *)(v70 + 8 * v69);
          if ((v74 & v71) != 0)
            goto LABEL_70;
          goto LABEL_96;
        }
      }
      else
      {
        v79 = 0;
        v80 = (char *)(4 * v76);
        *(_DWORD *)(4 * v76) = v68;
        v81 = 4 * v76 + 4;
        if (v73 == v75)
          goto LABEL_93;
      }
      v82 = v73 - 4 - v75;
      if (v82 < 0x2C)
        goto LABEL_128;
      if ((unint64_t)(v75 - v79) < 0x20)
        goto LABEL_128;
      v83 = (v82 >> 2) + 1;
      v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
      v85 = &v73[-v84];
      v80 -= v84;
      v86 = &v79[4 * v76 - 16];
      v87 = v73 - 16;
      v88 = v83 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v89 = *(_OWORD *)v87;
        *((_OWORD *)v86 - 1) = *((_OWORD *)v87 - 1);
        *(_OWORD *)v86 = v89;
        v86 -= 32;
        v87 -= 32;
        v88 -= 8;
      }
      while (v88);
      v73 = v85;
      if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_128:
        do
        {
          v90 = *((_DWORD *)v73 - 1);
          v73 -= 4;
          *((_DWORD *)v80 - 1) = v90;
          v80 -= 4;
        }
        while (v73 != v75);
      }
      goto LABEL_93;
    }
    v7 = 0;
LABEL_118:
    a1[63] += v7;
  }
}

void operations_research::sat::BinaryImplicationGraph::MinimizeConflictFirstWithTransitiveReduction(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  _DWORD *v20;
  unint64_t v21;
  int v22;
  _DWORD *v23;
  int v24;
  void **v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  int v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  _DWORD *v89;
  unint64_t v90;
  char *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  void **v108;
  _OWORD *v109;
  __int128 *v110;
  uint64_t v111;
  __int128 v112;
  unint64_t v113;
  char *v114;
  int v115;
  _DWORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  int v123;
  int v124;
  int v125;
  BOOL v126;
  unint64_t v127;
  unint64_t v128;
  void **v130;
  _DWORD *v131;
  unint64_t *v132;
  _DWORD *v133;
  int v134;
  void **v135;
  void **v136;
  _QWORD v137[2];
  __int128 v138;

  v7 = **(_DWORD **)a3 ^ 1;
  v8 = a1 + 40;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 40), (a1[25] - a1[24]) >> 5);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v8, v7);
  v9 = (unint64_t *)(a1[24] + 32 * v7);
  v11 = (void **)(v9 + 1);
  v10 = *v9;
  v12 = *v9 & 1;
  v13 = (int *)(v9 + 1);
  if ((*v9 & 1) != 0)
    v13 = (int *)*v11;
  if (4 * (v10 >> 1) >= 5)
  {
    v138 = xmmword_22DCE8C50;
    v14 = (unint64_t)&v13[(v10 >> 1) - 1];
    if (v14 > (unint64_t)v13)
    {
      v15 = v9;
      v16 = ((v10 >> 1) & 0x3FFFFFFFFFFFFFFFLL) - 1;
      do
      {
        v137[0] = 0;
        v137[1] = v16;
        v17 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v138, a5, v137);
        if (v17)
        {
          v18 = *v13;
          *v13 = v13[v17];
          v13[v17] = v18;
        }
        ++v13;
        --v16;
      }
      while ((unint64_t)v13 < v14);
      v9 = v15;
      v10 = *v15;
      v12 = *v15 & 1;
    }
  }
  v19 = (char *)a1[60];
  a1[61] = v19;
  v20 = v11;
  if (v12)
    v20 = *v11;
  v21 = v10 >> 1;
  v130 = v11;
  v22 = 0;
  if (v10 >= 2)
  {
    v135 = (void **)(a1 + 47);
    v136 = (void **)(a1 + 60);
    v23 = &v20[v21];
    v131 = v23;
    v132 = v9;
    while (1)
    {
      v24 = *v20;
      if (((*(_QWORD *)(a1[41] + (((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
        break;
LABEL_15:
      if (++v20 == v23)
      {
        v10 = *v9;
        v21 = *v9 >> 1;
        goto LABEL_100;
      }
    }
    v25 = v11;
    if ((*(_BYTE *)v9 & 1) != 0)
      v25 = (void **)*v11;
    *((_DWORD *)v25 + v22) = v24;
    v26 = a1[62];
    if ((unint64_t)v19 < v26)
    {
      *(_DWORD *)v19 = v24;
      v27 = (uint64_t)(v19 + 4);
      ++v22;
      a1[61] = v19 + 4;
      if ((char *)a1[60] != v19 + 4)
        goto LABEL_21;
      goto LABEL_91;
    }
    v81 = v22;
    v82 = (char *)*v136;
    v83 = v19 - (_BYTE *)*v136;
    v84 = v83 >> 2;
    v85 = (v83 >> 2) + 1;
    if (v85 >> 62)
LABEL_134:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v86 = v26 - (_QWORD)v82;
    if (v86 >> 1 > v85)
      v85 = v86 >> 1;
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
      v87 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v87 = v85;
    if (v87)
    {
      if (v87 >> 62)
        goto LABEL_135;
      v88 = operator new(4 * v87);
      v89 = &v88[4 * v84];
      *v89 = v24;
      v27 = (uint64_t)(v89 + 1);
      if (v19 != v82)
      {
LABEL_82:
        v90 = v19 - 4 - v82;
        if (v90 >= 0xBC
          && &v88[v83 - 4 - (v90 & 0xFFFFFFFFFFFFFFFCLL)] <= &v88[v83 - 4]
          && &v19[-(v90 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v19 - 4
          && (unint64_t)(v19 - v88 - v83) >= 0x20)
        {
          v94 = (v90 >> 2) + 1;
          v95 = 4 * (v94 & 0x7FFFFFFFFFFFFFF8);
          v91 = &v19[-v95];
          v89 = (_DWORD *)((char *)v89 - v95);
          v96 = &v88[4 * v84 - 16];
          v97 = v19 - 16;
          v98 = v94 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v99 = *(_OWORD *)v97;
            *(v96 - 1) = *((_OWORD *)v97 - 1);
            *v96 = v99;
            v96 -= 2;
            v97 -= 32;
            v98 -= 8;
          }
          while (v98);
          v92 = v81;
          if (v94 == (v94 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_88:
            a1[60] = v89;
            a1[61] = v27;
            a1[62] = &v88[4 * v87];
            if (!v82)
            {
LABEL_90:
              v23 = v131;
              v9 = v132;
              v22 = v92 + 1;
              a1[61] = v27;
              if (a1[60] == v27)
              {
LABEL_91:
                v19 = (char *)v27;
                v11 = v130;
                goto LABEL_15;
              }
LABEL_21:
              v133 = v20;
              v134 = v22;
              while (1)
              {
                v29 = *(_DWORD *)(v27 - 4);
                v28 = v29;
                a1[61] = v27 - 4;
                v30 = v29;
                v31 = (unint64_t)v29 >> 6;
                v32 = a1[41];
                v33 = *(_QWORD *)(v32 + 8 * v31);
                v34 = 1 << v29;
                if ((v33 & (1 << v29)) == 0)
                  break;
LABEL_22:
                v19 = (char *)a1[60];
                v27 = a1[61];
                if (v19 == (char *)v27)
                {
                  v9 = v132;
                  v20 = v133;
                  v11 = v130;
                  v23 = v131;
                  v22 = v134;
                  goto LABEL_15;
                }
              }
              *(_QWORD *)(v32 + 8 * v31) = v33 | v34;
              v36 = (char *)a1[48];
              v35 = a1[49];
              if ((unint64_t)v36 < v35)
              {
                *(_DWORD *)v36 = v28;
                v37 = (uint64_t)(v36 + 4);
                goto LABEL_45;
              }
              v38 = (char *)*v135;
              v39 = v36 - (_BYTE *)*v135;
              v40 = v39 >> 2;
              v41 = (v39 >> 2) + 1;
              if (v41 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v42 = v35 - (_QWORD)v38;
              if (v42 >> 1 > v41)
                v41 = v42 >> 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                if (v43 >> 62)
                  goto LABEL_135;
                v44 = operator new(4 * v43);
                v45 = &v44[4 * v40];
                *v45 = v28;
                v37 = (uint64_t)(v45 + 1);
                if (v36 == v38)
                  goto LABEL_43;
              }
              else
              {
                v44 = 0;
                v45 = (_DWORD *)(4 * v40);
                *(_DWORD *)(4 * v40) = v28;
                v37 = 4 * v40 + 4;
                if (v36 == v38)
                {
LABEL_43:
                  a1[47] = v45;
                  a1[48] = v37;
                  a1[49] = &v44[4 * v43];
                  if (v38)
                    operator delete(v38);
LABEL_45:
                  a1[48] = v37;
                  v55 = (unint64_t *)(a1[24] + 32 * v30);
                  v58 = *v55;
                  v57 = v55 + 1;
                  v56 = v58;
                  if ((v58 & 1) != 0)
                    v57 = (_QWORD *)*v57;
                  if (v56 >= 2)
                  {
                    v59 = (_QWORD *)((char *)v57 + 4 * (v56 >> 1));
                    while (2)
                    {
                      v61 = *(_DWORD *)v57;
                      if (((*(_QWORD *)(a1[41] + (((unint64_t)v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v61) & 1) != 0)
                        goto LABEL_51;
                      v63 = (char *)a1[61];
                      v62 = a1[62];
                      if ((unint64_t)v63 >= v62)
                      {
                        v64 = (char *)*v136;
                        v65 = v63 - (_BYTE *)*v136;
                        v66 = v65 >> 2;
                        v67 = (v65 >> 2) + 1;
                        if (v67 >> 62)
                          goto LABEL_134;
                        v68 = v62 - (_QWORD)v64;
                        if (v68 >> 1 > v67)
                          v67 = v68 >> 1;
                        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
                          v69 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v69 = v67;
                        if (v69)
                        {
                          if (v69 >> 62)
                            goto LABEL_135;
                          v70 = operator new(4 * v69);
                          v71 = &v70[4 * v66];
                          *v71 = v61;
                          v60 = (uint64_t)(v71 + 1);
                          if (v63 == v64)
                          {
LABEL_71:
                            a1[60] = v71;
                            a1[61] = v60;
                            a1[62] = &v70[4 * v69];
                            if (v64)
                              operator delete(v64);
LABEL_50:
                            a1[61] = v60;
LABEL_51:
                            v57 = (_QWORD *)((char *)v57 + 4);
                            if (v57 == v59)
                              goto LABEL_22;
                            continue;
                          }
                        }
                        else
                        {
                          v70 = 0;
                          v71 = (_DWORD *)(4 * v66);
                          *(_DWORD *)(4 * v66) = v61;
                          v60 = 4 * v66 + 4;
                          if (v63 == v64)
                            goto LABEL_71;
                        }
                        v72 = v63 - 4 - v64;
                        if (v72 < 0x2C)
                          goto LABEL_139;
                        if ((unint64_t)(v63 - &v70[v65]) < 0x20)
                          goto LABEL_139;
                        v73 = (v72 >> 2) + 1;
                        v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                        v75 = &v63[-v74];
                        v71 = (_DWORD *)((char *)v71 - v74);
                        v76 = &v70[4 * v66 - 16];
                        v77 = v63 - 16;
                        v78 = v73 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v79 = *(_OWORD *)v77;
                          *(v76 - 1) = *((_OWORD *)v77 - 1);
                          *v76 = v79;
                          v76 -= 2;
                          v77 -= 32;
                          v78 -= 8;
                        }
                        while (v78);
                        v63 = v75;
                        if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_139:
                          do
                          {
                            v80 = *((_DWORD *)v63 - 1);
                            v63 -= 4;
                            *--v71 = v80;
                          }
                          while (v63 != v64);
                        }
                        goto LABEL_71;
                      }
                      break;
                    }
                    *(_DWORD *)v63 = v61;
                    v60 = (uint64_t)(v63 + 4);
                    goto LABEL_50;
                  }
                  goto LABEL_22;
                }
              }
              v46 = v36 - 4 - v38;
              if (v46 < 0x2C)
                goto LABEL_140;
              if ((unint64_t)(v36 - &v44[v39]) < 0x20)
                goto LABEL_140;
              v47 = (v46 >> 2) + 1;
              v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
              v49 = &v36[-v48];
              v45 = (_DWORD *)((char *)v45 - v48);
              v50 = &v44[4 * v40 - 16];
              v51 = v36 - 16;
              v52 = v47 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v53 = *(_OWORD *)v51;
                *(v50 - 1) = *((_OWORD *)v51 - 1);
                *v50 = v53;
                v50 -= 2;
                v51 -= 32;
                v52 -= 8;
              }
              while (v52);
              v36 = v49;
              if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_140:
                do
                {
                  v54 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *--v45 = v54;
                }
                while (v36 != v38);
              }
              goto LABEL_43;
            }
LABEL_89:
            operator delete(v82);
            goto LABEL_90;
          }
        }
        else
        {
          v91 = v19;
          v92 = v81;
        }
        do
        {
          v93 = *((_DWORD *)v91 - 1);
          v91 -= 4;
          *--v89 = v93;
        }
        while (v91 != v82);
        goto LABEL_88;
      }
    }
    else
    {
      v88 = 0;
      v89 = (_DWORD *)(4 * v84);
      *(_DWORD *)(4 * v84) = v24;
      v27 = 4 * v84 + 4;
      if (v19 != v82)
        goto LABEL_82;
    }
    v92 = v81;
    a1[60] = v89;
    a1[61] = v27;
    a1[62] = &v88[4 * v87];
    if (!v82)
      goto LABEL_90;
    goto LABEL_89;
  }
LABEL_100:
  if (v21 <= v22)
    goto LABEL_123;
  a1[38] += v21 - v22;
  v100 = v10 & 1;
  if ((v10 & 1) == 0)
  {
    v101 = 6;
    if ((unint64_t)v22 <= 6)
      goto LABEL_122;
LABEL_105:
    v102 = 2 * v101;
    if (v102 <= v22)
      v103 = v22;
    else
      v103 = v102;
    if (v103 >> 62)
LABEL_135:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v104 = v9;
    v105 = (char *)operator new(4 * v103);
    v106 = v105;
    v9 = v104;
    if (v10 < 2)
      goto LABEL_119;
    v107 = 0;
    if (v21 < 8 || (unint64_t)(v105 - (char *)v11) < 0x20)
    {
      v108 = v11;
    }
    else
    {
      v107 = v21 & 0x7FFFFFFFFFFFFFF8;
      v108 = (void **)((char *)v11 + 4 * (v21 & 0x7FFFFFFFFFFFFFF8));
      v109 = v105 + 16;
      v110 = (__int128 *)(v11 + 2);
      v111 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v112 = *v110;
        *(v109 - 1) = *(v110 - 1);
        *v109 = v112;
        v109 += 2;
        v110 += 2;
        v111 -= 8;
      }
      while (v111);
      if (v21 == v107)
        goto LABEL_119;
    }
    v113 = v21 - v107;
    v114 = &v105[4 * v107];
    do
    {
      v115 = *(_DWORD *)v108;
      v108 = (void **)((char *)v108 + 4);
      *(_DWORD *)v114 = v115;
      v114 += 4;
      --v113;
    }
    while (v113);
LABEL_119:
    if ((v10 & 1) != 0)
    {
      operator delete(*v130);
      v9 = v104;
    }
    v9[1] = (unint64_t)v106;
    v9[2] = v103;
    v100 = 1;
    goto LABEL_122;
  }
  v11 = (void **)v9[1];
  v101 = v9[2];
  if (v101 < v22)
    goto LABEL_105;
LABEL_122:
  *v9 = v100 | (2 * v22);
LABEL_123:
  v116 = *(_DWORD **)a3;
  v117 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  v118 = v117 >> 2;
  if ((unint64_t)v117 < 5)
  {
    v123 = 1;
  }
  else
  {
    v119 = a1[41];
    v120 = 2;
    if (v118 > 2)
      v120 = v118;
    v121 = v120 - 1;
    v122 = v116 + 1;
    v123 = 1;
    do
    {
      v125 = *v122++;
      v124 = v125;
      if (((*(_QWORD *)(v119 + (((unint64_t)v125 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v125 & 0x3F ^ 1u)) & 1) == 0)
        v116[v123++] = v124;
      --v121;
    }
    while (v121);
  }
  v126 = v118 > v123;
  v127 = v118 - v123;
  if (v126)
  {
    v128 = v127 + a1[37];
    ++a1[36];
    a1[37] = v128;
    *(_QWORD *)(a3 + 8) = &v116[v123];
  }
}

void operations_research::sat::BinaryImplicationGraph::MinimizeConflictExperimental(_QWORD *a1, uint64_t a2, int **a3)
{
  _QWORD *v6;
  int *v7;
  int *v8;
  int v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;

  v6 = a1 + 40;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 40), (a1[25] - a1[24]) >> 5);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)(a1 + 50), (a1[25] - a1[24]) >> 5);
  v7 = *a3;
  v8 = a3[1];
  if (*a3 == v8)
  {
    v10 = *a3;
    v11 = 0;
LABEL_17:
    v14 = v11 >> 2;
    v13 = 1;
    goto LABEL_18;
  }
  do
  {
    v9 = *v7++;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v6, v9);
  }
  while (v7 != v8);
  v7 = *a3;
  v10 = a3[1];
  v11 = (char *)v10 - (char *)*a3;
  if (v11 < 5)
    goto LABEL_17;
  v12 = 1;
  v13 = 1;
  do
  {
    while (1)
    {
      v15 = v7[v12];
      v16 = (_QWORD *)(a1[24] + 32 * v15);
      v19 = *v16;
      v17 = (int *)(v16 + 1);
      v18 = v19;
      if ((v19 & 1) != 0)
        v17 = *(int **)v17;
      if (v18 >= 2)
        break;
LABEL_5:
      v7[v13++] = v15;
      ++v12;
      v14 = v10 - v7;
      if (v14 <= v12)
        goto LABEL_18;
    }
    v20 = 4 * (v18 >> 1);
    while (1)
    {
      v21 = (unint64_t)*v17 >> 6;
      if (((1 << *v17) & *(_QWORD *)(a1[41] + 8 * v21)) != 0
        && (((*(_DWORD *)(*(_QWORD *)(a2 + 120) + 8 * (*v17 >> 1)) ^ *(_DWORD *)(*(_QWORD *)(a2 + 120)
                                                                                 + 8 * ((int)v15 >> 1))) & 0xFFFFFFE) != 0
         || (*(_QWORD *)(a1[51] + 8 * v21) & (1 << *v17)) == 0))
      {
        break;
      }
      ++v17;
      v20 -= 4;
      if (!v20)
        goto LABEL_5;
    }
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 50, v15);
    v7 = *a3;
    v10 = a3[1];
    ++v12;
    v14 = v10 - *a3;
  }
  while (v14 > v12);
LABEL_18:
  v22 = v14 > v13;
  v23 = v14 - v13;
  if (v22)
  {
    v24 = a1[37];
    ++a1[36];
    a1[37] = v23 + v24;
    v25 = &v7[v13];
    if (v25 != v10)
      a3[1] = v25;
  }
}

uint64_t operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  int *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  _OWORD *v33;
  int *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int *v41;
  int *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char *v46;
  int *v47;
  unint64_t v48;
  int *v49;
  char *v50;
  int *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  int v64;
  char *v65;
  char *v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  uint64_t *v78;
  unint64_t v79;
  void *__p;
  uint64_t v81;

  v1 = this;
  v81 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(this + 128);
  LODWORD(v79) = (*(_DWORD *)(v2 + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v78) = 0;
  if ((_DWORD)v79)
  {
    this = google::MakeCheckOpString<int,int>((int)&v79, (int)&v78, "trail_->CurrentDecisionLevel() == 0");
    v78 = (uint64_t *)this;
    if (this)
    {
      google::LogMessageFatal::LogMessageFatal(&v79, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 963, &v78);
      google::LogMessage::stream((google::LogMessage *)&v79);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v79);
    }
    v2 = *(_QWORD *)(v1 + 128);
    v3 = *(_DWORD *)(v2 + 12);
    if (*(_DWORD *)(v1 + 712) == v3)
      return this;
  }
  else
  {
    v3 = *(_DWORD *)(v2 + 12);
    if (*(_DWORD *)(this + 712) == v3)
      return this;
  }
  v74 = v3;
  v73 = v2;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(v1 + 320, (*(_QWORD *)(v1 + 200) - *(_QWORD *)(v1 + 192)) >> 5);
  v4 = *(_DWORD *)(v1 + 712);
  v5 = v74;
  if (v4 < v74)
  {
    v77 = (void **)(v1 + 376);
    while (1)
    {
      v6 = *(int *)(*(_QWORD *)(*(_QWORD *)(v1 + 128) + 72) + 4 * v4);
      v7 = v6 ^ 1;
      v8 = *(_QWORD *)(v1 + 192);
      v9 = (_QWORD *)(v8 + 32 * (v6 ^ 1));
      v12 = *v9;
      v11 = (int *)(v9 + 1);
      v10 = v12;
      if ((v12 & 1) != 0)
        v11 = *(int **)v11;
      if (v10 >= 2)
        break;
LABEL_36:
      v79 = 0;
      absl::lts_2020_02_25::InlinedVector<operations_research::sat::Literal,6ul,std::allocator<operations_research::sat::Literal>>::swap((uint64_t)&v79, v8 + 32 * v6);
      if ((v79 & 1) != 0)
        operator delete(__p);
      v38 = *(_QWORD *)(v1 + 192) + 32 * v7;
      v79 = 0;
      absl::lts_2020_02_25::InlinedVector<operations_research::sat::Literal,6ul,std::allocator<operations_research::sat::Literal>>::swap((uint64_t)&v79, v38);
      if ((v79 & 1) != 0)
        operator delete(__p);
      v39 = *(_QWORD *)(v1 + 224);
      v40 = (unint64_t)(*(_QWORD *)(v1 + 232) - v39) >> 5;
      if ((int)v6 < (int)v40)
      {
        v79 = 0;
        absl::lts_2020_02_25::InlinedVector<operations_research::sat::Literal,6ul,std::allocator<operations_research::sat::Literal>>::swap((uint64_t)&v79, v39 + 32 * v6);
        if ((v79 & 1) != 0)
          operator delete(__p);
        v39 = *(_QWORD *)(v1 + 224);
        v40 = (unint64_t)(*(_QWORD *)(v1 + 232) - v39) >> 5;
      }
      if ((int)v7 < (int)v40)
      {
        v79 = 0;
        absl::lts_2020_02_25::InlinedVector<operations_research::sat::Literal,6ul,std::allocator<operations_research::sat::Literal>>::swap((uint64_t)&v79, v39 + 32 * v7);
        if ((v79 & 1) != 0)
          operator delete(__p);
      }
      v4 = *(_DWORD *)(v1 + 712) + 1;
      *(_DWORD *)(v1 + 712) = v4;
      if (v4 >= v5)
        goto LABEL_47;
    }
    v75 = v6;
    v76 = v6 ^ 1;
    v13 = &v11[v10 >> 1];
    while (1)
    {
      v15 = *v11 ^ 1;
      v16 = (unint64_t)*v11 >> 6;
      v17 = *(_QWORD *)(v1 + 328);
      v18 = *(_QWORD *)(v17 + 8 * v16);
      if (((1 << v15) & v18) != 0)
        goto LABEL_12;
      *(_QWORD *)(v17 + 8 * v16) = (1 << v15) | v18;
      v20 = *(int **)(v1 + 384);
      v19 = *(_QWORD *)(v1 + 392);
      if ((unint64_t)v20 >= v19)
        break;
      *v20 = v15;
      v14 = (uint64_t)(v20 + 1);
LABEL_11:
      *(_QWORD *)(v1 + 384) = v14;
LABEL_12:
      if (++v11 == v13)
      {
        v8 = *(_QWORD *)(v1 + 192);
        v5 = v74;
        v6 = v75;
        v7 = v76;
        goto LABEL_36;
      }
    }
    v21 = (int *)*v77;
    v22 = (char *)v20 - (_BYTE *)*v77;
    v23 = v22 >> 2;
    v24 = (v22 >> 2) + 1;
    if (v24 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v25 = v19 - (_QWORD)v21;
    if (v25 >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v26 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = operator new(4 * v26);
      v28 = (int *)&v27[4 * v23];
      *v28 = v15;
      v14 = (uint64_t)(v28 + 1);
      if (v20 == v21)
        goto LABEL_32;
    }
    else
    {
      v27 = 0;
      v28 = (int *)(4 * v23);
      *(_DWORD *)(4 * v23) = v15;
      v14 = 4 * v23 + 4;
      if (v20 == v21)
      {
LABEL_32:
        *(_QWORD *)(v1 + 376) = v28;
        *(_QWORD *)(v1 + 384) = v14;
        *(_QWORD *)(v1 + 392) = &v27[4 * v26];
        if (v21)
          operator delete(v21);
        goto LABEL_11;
      }
    }
    v29 = (char *)(v20 - 1) - (char *)v21;
    if (v29 < 0x2C)
      goto LABEL_95;
    if ((unint64_t)((char *)v20 - &v27[v22]) < 0x20)
      goto LABEL_95;
    v30 = (v29 >> 2) + 1;
    v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
    v32 = &v20[v31 / 0xFFFFFFFFFFFFFFFCLL];
    v28 = (int *)((char *)v28 - v31);
    v33 = &v27[4 * v23 - 16];
    v34 = v20 - 4;
    v35 = v30 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *v33 = v36;
      v33 -= 2;
      v34 -= 8;
      v35 -= 8;
    }
    while (v35);
    v20 = v32;
    if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_95:
      do
      {
        v37 = *--v20;
        *--v28 = v37;
      }
      while (v20 != v21);
    }
    goto LABEL_32;
  }
LABEL_47:
  v41 = *(int **)(v1 + 376);
  v42 = *(int **)(v1 + 384);
  if (v41 != v42)
  {
    v43 = *(_QWORD *)(v1 + 192);
    while (1)
    {
      v44 = (_QWORD *)(v43 + 32 * *v41);
      v46 = (char *)(v44 + 1);
      v45 = *v44;
      v47 = (int *)(v44 + 1);
      if ((*v44 & 1) != 0)
        v47 = *(int **)v46;
      v48 = v45 >> 1;
      v49 = &v47[v45 >> 1];
      if (v45 >= 2)
      {
        v54 = 4 * v48;
        while (((*(_QWORD *)(*(_QWORD *)(v73 + 24) + (((unint64_t)*v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v47) & 1) == 0)
        {
          ++v47;
          v54 -= 4;
          if (!v54)
          {
            v50 = (char *)v49;
            goto LABEL_62;
          }
        }
      }
      v50 = (char *)v49;
      if (v47 == v49)
        goto LABEL_62;
      v51 = v47 + 1;
      if (v47 + 1 != v49)
        break;
      v50 = (char *)v47;
      if ((v45 & 1) != 0)
        goto LABEL_63;
LABEL_64:
      v55 = &v46[4 * v48];
      if (v50 != v55)
      {
        v56 = v55 - v50;
        v57 = (v50 - v46) >> 2;
        v58 = v57 + (v56 >> 2);
        v59 = v48 - v58;
        if (v48 != v58)
        {
          v60 = &v46[4 * v58];
          if (v59 < 0xC || (unint64_t)(v50 - v46 - 4 * v58) < 0x20)
          {
            v61 = 0;
            goto LABEL_69;
          }
          v61 = v59 & 0xFFFFFFFFFFFFFFF8;
          v60 += 4 * (v59 & 0xFFFFFFFFFFFFFFF8);
          v65 = &v46[4 * v57 + 16];
          v66 = &v46[4 * v58 + 16];
          v67 = v59 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v68 = *(_OWORD *)v66;
            *((_OWORD *)v65 - 1) = *((_OWORD *)v66 - 1);
            *(_OWORD *)v65 = v68;
            v65 += 32;
            v66 += 32;
            v67 -= 8;
          }
          while (v67);
          if (v59 != v61)
          {
LABEL_69:
            v62 = v48 - v61 - v58;
            v63 = &v46[4 * v61 + 4 * v57];
            do
            {
              v64 = *(_DWORD *)v60;
              v60 += 4;
              *(_DWORD *)v63 = v64;
              v63 += 4;
              --v62;
            }
            while (v62);
          }
        }
        *v44 = v45 - (v56 >> 1);
      }
      if (++v41 == v42)
        goto LABEL_80;
    }
    v52 = *(_QWORD *)(v73 + 24);
    v50 = (char *)v47;
    do
    {
      v53 = *v51;
      if (((*(_QWORD *)(v52 + (((unint64_t)v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
      {
        *(_DWORD *)v50 = v53;
        v50 += 4;
      }
      ++v51;
    }
    while (v51 != v49);
LABEL_62:
    if ((v45 & 1) == 0)
      goto LABEL_64;
LABEL_63:
    v46 = *(char **)v46;
    goto LABEL_64;
  }
LABEL_80:
  v70 = *(_QWORD *)(v1 + 224);
  v69 = *(_QWORD *)(v1 + 232);
  if (v69 != v70)
  {
    v71 = *(_QWORD *)(v1 + 232);
    do
    {
      v72 = *(_BYTE *)(v71 - 32);
      v71 -= 32;
      if ((v72 & 1) != 0)
        operator delete(*(void **)(v69 - 24));
      v69 = v71;
    }
    while (v71 != v70);
  }
  *(_QWORD *)(v1 + 232) = v70;
  return operations_research::sat::BinaryImplicationGraph::CleanUpAndAddAtMostOnes((operations_research::sat::BinaryImplicationGraph *)v1, 0);
}

void sub_22DA4B650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA4B658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p)
{
  if ((a16 & 1) != 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::BinaryImplicationGraph::DetectEquivalences(operations_research::sat::BinaryImplicationGraph *this, int a2)
{
  uint64_t v2;
  _BOOL4 inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  double v22;
  int **v23;
  int v24;
  char *v25;
  int *v26;
  int *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  int *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  int *v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  int **v65;
  int *v66;
  unint64_t v67;
  int *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int *v73;
  unint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  int *v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int *v89;
  int *v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  int *v107;
  _OWORD *v108;
  __int128 *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int *v116;
  int *v117;
  uint64_t v118;
  int v119;
  int v120;
  int *v121;
  unint64_t j;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int *v128;
  unint64_t v129;
  unint64_t v130;
  _DWORD *v131;
  int v132;
  unint64_t v133;
  char *v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  int *v139;
  unint64_t v140;
  int *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int **v146;
  int *v147;
  int v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  int *v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  unint64_t v157;
  int *v158;
  _OWORD *v159;
  __int128 *v160;
  unint64_t v161;
  __int128 v162;
  unint64_t v163;
  char *v164;
  int v165;
  char *v166;
  char *v167;
  unint64_t v168;
  int *v169;
  _OWORD *v170;
  __int128 *v171;
  unint64_t v172;
  __int128 v173;
  unint64_t v174;
  char *v175;
  int v176;
  int *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  _BYTE *v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  int *v186;
  uint64_t v187;
  int v188;
  int v189;
  int *v190;
  unint64_t i;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  int *v197;
  unint64_t v198;
  unint64_t v199;
  _DWORD *v200;
  int v201;
  _OWORD *v202;
  __int128 *v203;
  unint64_t v204;
  __int128 v205;
  _OWORD *v206;
  __int128 *v207;
  unint64_t v208;
  __int128 v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  absl::lts_2020_02_25 *v219;
  _QWORD *v220;
  int **v221;
  int **v222;
  int **v223;
  int **v224;
  int *v225;
  int *v226;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  const double *v237;
  unint64_t v238;
  int64x2_t v239;
  int64x2_t v240;
  const double *v241;
  unsigned __int128 v242;
  unsigned __int128 v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  int v248;
  int v249;
  unsigned int v250;
  void **v251;
  uint64_t *v252;
  int v253;
  int **v254;
  unint64_t v255;
  int **v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  void **v262;
  void *v263[2];
  __int128 v264;
  __int128 *v265;
  char *v266;
  char *v267;
  char *v268;
  void *v269[2];
  void *v270[2];
  __int128 v271;
  void *__p[2];
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  int **v280;
  int **v281;
  uint64_t v282;

  if (*((_BYTE *)this + 512))
    return 1;
  absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  if (*operations_research::sat::BinaryImplicationGraph::DetectEquivalences(BOOL)::vlocal__ < 1)
  {
    inited = 0;
    v6 = *((_QWORD *)this + 16);
    if (*((_QWORD *)this + 27))
      goto LABEL_11;
  }
  else if (operations_research::sat::BinaryImplicationGraph::DetectEquivalences(BOOL)::vlocal__ == &google::kLogSiteUninitialized)
  {
    inited = google::InitVLOG3__((google *)&operations_research::sat::BinaryImplicationGraph::DetectEquivalences(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/clause.cc", (const char *)1);
    v6 = *((_QWORD *)this + 16);
    if (*((_QWORD *)this + 27))
      goto LABEL_11;
  }
  else
  {
    inited = 1;
    v6 = *((_QWORD *)this + 16);
    if (*((_QWORD *)this + 27))
      goto LABEL_11;
  }
  if (*((_QWORD *)this + 28) == *((_QWORD *)this + 29))
  {
    *((_DWORD *)this + 9) = *(_DWORD *)(v6 + 12);
LABEL_15:
    operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables((uint64_t)this);
    v8 = *((_QWORD *)this + 16);
    v9 = *((_QWORD *)this + 25) - *((_QWORD *)this + 24);
    v10 = v9 >> 5;
    v280 = 0;
    v281 = 0;
    v282 = 0;
    v278 = 0u;
    v279 = 0u;
    v276 = 0u;
    v277 = 0u;
    v274 = 0u;
    v275 = 0u;
    *(_OWORD *)v263 = 0u;
    v264 = 0u;
    v265 = &v274;
    v266 = (char *)this + 192;
    v257 = (uint64_t *)((char *)this + 192);
    v267 = (char *)this + 224;
    v268 = (char *)this + 248;
    *(_OWORD *)v269 = 0u;
    *(_OWORD *)v270 = 0u;
    v271 = 0u;
    *(_OWORD *)__p = 0u;
    v273 = 0;
    StronglyConnectedComponentsFinder<int,operations_research::sat::SccGraph,std::vector<std::vector<int>>>::FindStronglyConnectedComponents((std::vector<int> *)&v274, v9 >> 5, (uint64_t)v263, (uint64_t)&v280);
    v255 = v9;
    v11 = *((_QWORD *)&v264 + 1);
    v12 = (int *)v263[0];
    v13 = (int *)v263[1];
    if (v263[0] == v263[1])
    {
      v14 = 0;
LABEL_24:
      v2 = 1;
      v17 = __p[0];
      if (!__p[0])
        goto LABEL_26;
    }
    else
    {
      v14 = 0;
      while (1)
      {
        v15 = *v12;
        v16 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if (((v16 >> (v15 & 0x3F ^ 1)) & 1) != 0)
          break;
        if (((v16 >> (v15 & 0x3F)) & 1) == 0)
        {
          v14 = (v14 + 1);
          if (!operations_research::sat::BinaryImplicationGraph::FixLiteral((uint64_t)this, *v12))
            break;
        }
        if (++v12 == v13)
          goto LABEL_24;
      }
      v2 = 0;
      v17 = __p[0];
      if (!__p[0])
        goto LABEL_26;
    }
    __p[1] = v17;
    operator delete(v17);
LABEL_26:
    if (v270[1])
      operator delete(v270[1]);
    if (v269[0])
    {
      v269[1] = v269[0];
      operator delete(v269[0]);
    }
    if (v263[0])
    {
      v263[1] = v263[0];
      operator delete(v263[0]);
    }
    if (*((_QWORD *)&v278 + 1))
    {
      *(_QWORD *)&v279 = *((_QWORD *)&v278 + 1);
      operator delete(*((void **)&v278 + 1));
    }
    if ((_QWORD)v277)
    {
      *((_QWORD *)&v277 + 1) = v277;
      operator delete((void *)v277);
    }
    if (*((_QWORD *)&v275 + 1))
    {
      *(_QWORD *)&v276 = *((_QWORD *)&v275 + 1);
      operator delete(*((void **)&v275 + 1));
    }
    if ((_QWORD)v274)
    {
      *((_QWORD *)&v274 + 1) = v274;
      operator delete((void *)v274);
    }
    if (!(_DWORD)v2)
      goto LABEL_274;
    v258 = v8;
    v18 = (int)((uint64_t)v255 >> 5);
    v19 = *((_QWORD *)this + 71);
    v20 = (*((_QWORD *)this + 72) - v19) >> 2;
    v252 = (uint64_t *)((char *)this + 568);
    if (v18 <= v20)
    {
      if (v18 < v20)
        *((_QWORD *)this + 72) = v19 + 4 * v18;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 568), v18 - v20, &operations_research::sat::kNoLiteralIndex);
    }
    v21 = (uint64_t *)((char *)this + 544);
    std::vector<BOOL>::resize((uint64_t)this + 544, v18, 0);
    v253 = inited | a2;
    v22 = (double)v11 * 0.00000004 + 0.0;
    *((_QWORD *)this + 66) = *((_QWORD *)this + 65);
    v23 = v280;
    v254 = v281;
    if (v280 == v281)
    {
      *((_BYTE *)this + 512) = 1;
LABEL_267:
      *(double *)(*((_QWORD *)this + 15) + 112) = v22 + *(double *)(*((_QWORD *)this + 15) + 112);
      if (v253)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v263, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1292);
        v210 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v263);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)"SCC. ", 5);
        v211 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)" redundant equivalent literals. ", 32);
        v212 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v212, (uint64_t)" fixed. ", 8);
        v213 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)" implications left. ", 20);
        v214 = (_QWORD *)std::ostream::operator<<();
        v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)" literals.", 10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)" size of at_most_one buffer = ", 30);
        v216 = (_QWORD *)std::ostream::operator<<();
        v217 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)".", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, (uint64_t)" dtime: ", 8);
        v218 = (_QWORD *)std::ostream::operator<<();
        v219 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, (uint64_t)" wtime: ", 8);
        absl::lts_2020_02_25::GetCurrentTimeNanos(v219);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v263);
      }
      v2 = 1;
LABEL_274:
      v221 = v280;
      if (v280)
      {
        v222 = v281;
        v223 = v280;
        if (v281 != v280)
        {
          v224 = v281;
          do
          {
            v226 = *(v224 - 3);
            v224 -= 3;
            v225 = v226;
            if (v226)
            {
              *(v222 - 2) = v225;
              operator delete(v225);
            }
            v222 = v224;
          }
          while (v224 != v221);
          v223 = v280;
        }
        v281 = v221;
        operator delete(v223);
      }
      return v2;
    }
    v248 = v10;
    v24 = 0;
    v251 = (void **)((char *)this + 520);
    while (1)
    {
      v25 = (char *)*v23;
      v26 = v23[1];
      if (*v23 != v26)
      {
        v27 = *v23;
        while (1)
        {
          v28 = *v27;
          v29 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 24) + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v29 >> (v28 & 0x3E)) & 3) != 0)
            break;
          if (++v27 == v26)
            goto LABEL_53;
        }
        v34 = ((v29 >> v28) & 1) == 0;
        while (1)
        {
          v35 = *(int *)v25;
          v36 = *v21;
          v37 = v35 >> 6;
          v38 = *(_QWORD *)(*v21 + 8 * (v35 >> 6));
          if (((1 << v35) & v38) == 0)
          {
            ++*((_QWORD *)this + 39);
            *(_QWORD *)(v36 + 8 * v37) = (1 << v35) | v38;
          }
          v39 = v35;
          v40 = *(_QWORD *)(*(_QWORD *)(v258 + 24) + 8 * v37);
          v41 = v35 & 0x3F ^ v34;
          if (((v40 >> (v41 ^ 1u)) & 1) != 0)
            break;
          if (((v40 >> v41) & 1) == 0)
          {
            if (!operations_research::sat::BinaryImplicationGraph::FixLiteral((uint64_t)this, v39))
              break;
            v14 = (v14 + 1);
          }
          v25 += 4;
          if (v25 == (char *)v26)
            goto LABEL_48;
        }
LABEL_273:
        v2 = 0;
        goto LABEL_274;
      }
LABEL_53:
      if ((char *)v26 - v25 == 4
        && ((*(_QWORD *)(*((_QWORD *)this + 83) + (((unint64_t)*(int *)v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)v25) & 1) != 0)
      {
        goto LABEL_48;
      }
      std::__sort<std::__less<int,int> &,int *>();
      v30 = **v23;
      v31 = (char *)*((_QWORD *)this + 66);
      v32 = *((_QWORD *)this + 67);
      v256 = v23;
      if ((unint64_t)v31 < v32)
      {
        *(_DWORD *)v31 = v30;
        v33 = (uint64_t)(v31 + 4);
        goto LABEL_86;
      }
      v42 = v14;
      v43 = (char *)*v251;
      v44 = v31 - (_BYTE *)*v251;
      v45 = v44 >> 2;
      v46 = (v44 >> 2) + 1;
      if (v46 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v47 = v32 - (_QWORD)v43;
      if (v47 >> 1 > v46)
        v46 = v47 >> 1;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
        v48 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        if (v48 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v49 = operator new(4 * v48);
        v50 = (int *)&v49[4 * v45];
        *v50 = v30;
        v33 = (uint64_t)(v50 + 1);
        if (v31 == v43)
        {
LABEL_77:
          v14 = v42;
          goto LABEL_83;
        }
      }
      else
      {
        v49 = 0;
        v50 = (int *)(4 * v45);
        *(_DWORD *)(4 * v45) = v30;
        v33 = 4 * v45 + 4;
        if (v31 == v43)
          goto LABEL_77;
      }
      v51 = v31 - 4 - v43;
      if (v51 >= 0x2C)
      {
        v52 = v31 - &v49[v44];
        v14 = v42;
        if (v52 >= 0x20)
        {
          v53 = (v51 >> 2) + 1;
          v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
          v55 = &v31[-v54];
          v50 = (int *)((char *)v50 - v54);
          v56 = &v49[4 * v45 - 16];
          v57 = v31 - 16;
          v58 = v53 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v59 = *(_OWORD *)v57;
            *(v56 - 1) = *((_OWORD *)v57 - 1);
            *v56 = v59;
            v56 -= 2;
            v57 -= 32;
            v58 -= 8;
          }
          while (v58);
          v31 = v55;
          if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_83;
        }
      }
      else
      {
        v14 = v42;
      }
      do
      {
        v60 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *--v50 = v60;
      }
      while (v31 != v43);
LABEL_83:
      *((_QWORD *)this + 65) = v50;
      *((_QWORD *)this + 66) = v33;
      *((_QWORD *)this + 67) = &v49[4 * v48];
      if (v43)
        operator delete(v43);
      v23 = v256;
LABEL_86:
      *((_QWORD *)this + 66) = v33;
      v61 = *v23;
      v62 = (char *)v23[1] - (char *)*v23;
      if (v62 != 4)
      {
        if ((unint64_t)v62 >= 5)
        {
          v76 = v62 >> 2;
          v77 = *((_QWORD *)this + 68);
          v78 = *v252;
          if ((unint64_t)(v62 >> 2) <= 2)
            v76 = 2;
          v79 = v61 + 1;
          v80 = v76 - 1;
          v81 = v61 + 1;
          while (1)
          {
            v82 = *v81++;
            v83 = v82;
            v84 = (unint64_t)v82 >> 6;
            v85 = 1 << v82;
            v86 = *(_QWORD *)(v77 + 8 * v84);
            if (((1 << v82) & v86) == 0)
            {
              ++*((_QWORD *)this + 39);
              *(_QWORD *)(v77 + 8 * v84) = v85 | v86;
            }
            *(_DWORD *)(v78 + 4 * v83) = v30;
            if ((*(v79 - 1) ^ 1) == (_DWORD)v83)
              break;
            v79 = v81;
            if (!--v80)
              goto LABEL_109;
          }
          if (v253)
          {
            google::LogMessage::LogMessage((google::LogMessage *)v263, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1240);
            v220 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v263);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)"Trivially UNSAT in DetectEquivalences()", 39);
            google::LogMessage::~LogMessage((google::LogMessage *)v263);
          }
          goto LABEL_273;
        }
LABEL_109:
        v250 = v14;
        v87 = *v257 + 32 * v30;
        v89 = (int *)(v87 + 8);
        v88 = *(_QWORD *)v87;
        v90 = (int *)(v87 + 8);
        if ((*(_QWORD *)v87 & 1) != 0)
          v90 = *(int **)v89;
        v91 = *(_QWORD *)v87 & 1;
        v92 = v88 >> 1;
        if (v88 < 2)
        {
          v93 = 0;
LABEL_113:
          v249 = v24;
          if ((v88 & 1) != 0)
          {
            v94 = *(_QWORD *)(v87 + 8);
            v95 = *(_QWORD *)(v87 + 16);
            v96 = v93;
            v262 = (void **)(v87 + 8);
            if (v95 >= v93)
              goto LABEL_173;
          }
          else
          {
            v94 = v87 + 8;
            v95 = 6;
            v96 = v93;
            v262 = (void **)(v87 + 8);
            if ((unint64_t)v93 <= 6)
              goto LABEL_173;
          }
          if (2 * v95 <= v96)
            v103 = v96;
          else
            v103 = 2 * v95;
          if (v103 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v104 = (char *)operator new(4 * v103);
          v105 = v104;
          if (v88 >= 2)
          {
            v106 = 0;
            if (v88 < 0x10 || (unint64_t)&v104[-v94] < 0x20)
            {
              v107 = (int *)v94;
            }
            else
            {
              v106 = v92 & 0x7FFFFFFFFFFFFFF8;
              v107 = (int *)(v94 + 4 * (v92 & 0x7FFFFFFFFFFFFFF8));
              v108 = v104 + 16;
              v109 = (__int128 *)(v94 + 16);
              v110 = v92 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v111 = *v109;
                *(v108 - 1) = *(v109 - 1);
                *v108 = v111;
                v108 += 2;
                v109 += 2;
                v110 -= 8;
              }
              while (v110);
              if (v92 == v106)
                goto LABEL_170;
            }
            v133 = v92 - v106;
            v134 = &v104[4 * v106];
            do
            {
              v135 = *v107++;
              *(_DWORD *)v134 = v135;
              v134 += 4;
              --v133;
            }
            while (v133);
          }
LABEL_170:
          if ((v88 & 1) != 0)
            operator delete(*v262);
          *(_QWORD *)(v87 + 8) = v105;
          *(_QWORD *)(v87 + 16) = v103;
          v61 = *v256;
          v62 = (char *)v256[1] - (char *)*v256;
          v91 = 1;
          v89 = (int *)v262;
LABEL_173:
          v136 = v91 | (2 * v96);
          *(_QWORD *)v87 = v136;
          if ((unint64_t)v62 < 5)
            goto LABEL_227;
          v137 = 1;
          while (2)
          {
            v259 = v61[v137];
            v260 = *v257 + 32 * v259;
            v261 = v137;
            v138 = *(_QWORD *)v260;
            v139 = (int *)(v260 + 8);
            if ((*(_QWORD *)v260 & 1) != 0)
              v139 = *(int **)(v260 + 8);
            if (v138 < 2)
            {
LABEL_180:
              v140 = *(_QWORD *)v87;
              if ((*(_QWORD *)v87 & 1) != 0)
              {
                v141 = *(int **)(v87 + 8);
                v142 = *(_QWORD *)(v87 + 16);
                v143 = v140 >> 1;
                if (v140 >> 1 == v142)
                  goto LABEL_211;
LABEL_182:
                v141[v143] = v259;
                *(_QWORD *)v87 = v140 + 2;
                v145 = v260;
                v144 = v261;
                v146 = v256;
                if ((*(_BYTE *)v260 & 1) != 0)
                  goto LABEL_175;
              }
              else
              {
                v141 = v89;
                v142 = 6;
                v143 = v140 >> 1;
                if (v140 >> 1 != 6)
                  goto LABEL_182;
LABEL_211:
                if (((v142 >> 61) & 3) != 0)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v166 = (char *)operator new(8 * v142);
                v167 = v166;
                *(_DWORD *)&v166[4 * v142] = v259;
                if (v140 >= 2)
                {
                  v168 = 0;
                  if (v142 < 8 || (unint64_t)(v166 - (char *)v141) < 0x20)
                  {
                    v169 = v141;
                  }
                  else
                  {
                    v168 = v142 & 0xFFFFFFFFFFFFFFF8;
                    v169 = &v141[v142 & 0xFFFFFFFFFFFFFFF8];
                    v170 = v166 + 16;
                    v171 = (__int128 *)(v141 + 4);
                    v172 = v142 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v173 = *v171;
                      *(v170 - 1) = *(v171 - 1);
                      *v170 = v173;
                      v170 += 2;
                      v171 += 2;
                      v172 -= 8;
                    }
                    while (v172);
                    if (v142 == v168)
                      goto LABEL_222;
                  }
                  v174 = v142 - v168;
                  v175 = &v166[4 * v168];
                  do
                  {
                    v176 = *v169++;
                    *(_DWORD *)v175 = v176;
                    v175 += 4;
                    --v174;
                  }
                  while (v174);
                }
LABEL_222:
                if ((v140 & 1) != 0)
                {
                  operator delete(*(void **)(v87 + 8));
                  v140 = *(_QWORD *)v87;
                }
                *(_QWORD *)(v87 + 8) = v167;
                *(_QWORD *)(v87 + 16) = 2 * v142;
                v89 = (int *)v262;
                *(_QWORD *)v87 = (v140 | 1) + 2;
                v145 = v260;
                v144 = v261;
                v146 = v256;
                if ((*(_BYTE *)v260 & 1) != 0)
LABEL_175:
                  operator delete(*(void **)(v260 + 8));
              }
              *(_DWORD *)(v145 + 8) = v30;
              *(_QWORD *)v145 = 2;
              v137 = v144 + 1;
              v61 = *v146;
              if (v137 >= v146[1] - *v146)
              {
                v136 = *(_QWORD *)v87;
LABEL_227:
                v177 = v89;
                if ((v136 & 1) != 0)
                  v177 = *(int **)v89;
                v178 = 126 - 2 * __clz(v136 >> 1);
                if (v136 >= 2)
                  v179 = v178;
                else
                  v179 = 0;
                std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v177, (char *)&v177[v136 >> 1], (uint64_t)v263, v179, 1);
                v180 = *(_QWORD *)v87;
                v181 = v262;
                v182 = (char *)v262;
                if ((*(_QWORD *)v87 & 1) != 0)
                  v182 = (char *)*v262;
                v183 = v180 >> 1;
                v21 = (uint64_t *)((char *)this + 544);
                v23 = v256;
                if (v180 >= 2)
                {
                  v185 = &v182[4 * v183];
                  v186 = (int *)(v182 + 4);
                  v187 = 4 * v183 - 4;
                  do
                  {
                    if (!v187)
                    {
                      v182 = v185;
                      if ((v180 & 1) == 0)
                        goto LABEL_236;
                      goto LABEL_247;
                    }
                    v189 = *(v186 - 1);
                    v188 = *v186++;
                    v187 -= 4;
                  }
                  while (v189 != v188);
                  v190 = v186 - 2;
                  if (v187)
                  {
                    for (i = 0; i != v187; i += 4)
                    {
                      v192 = v188;
                      v188 = v186[i / 4];
                      if (v192 != v188)
                      {
                        v190[1] = v188;
                        ++v190;
                      }
                    }
                  }
                  v182 = (char *)(v190 + 1);
                  if ((v180 & 1) == 0)
                    goto LABEL_236;
                }
                else if ((v180 & 1) == 0)
                {
LABEL_236:
                  v184 = (uint64_t)v262 + 4 * v183;
                  if (v182 == (char *)v184)
                  {
LABEL_255:
                    v24 = v249 + ((unint64_t)((char *)v256[1] - (char *)*v256) >> 2) - 1;
                    v14 = v250;
                    goto LABEL_48;
                  }
LABEL_248:
                  v193 = v184 - (_QWORD)v182;
                  v194 = (v182 - v181) >> 2;
                  v195 = v194 + (v193 >> 2);
                  v196 = v183 - v195;
                  if (v183 != v195)
                  {
                    v197 = (int *)&v181[4 * v195];
                    if (v196 < 0xC || (unint64_t)(v182 - v181 - 4 * v195) < 0x20)
                    {
                      v198 = 0;
                      goto LABEL_252;
                    }
                    v198 = v196 & 0xFFFFFFFFFFFFFFF8;
                    v197 += v196 & 0xFFFFFFFFFFFFFFF8;
                    v202 = &v181[4 * v194 + 16];
                    v203 = (__int128 *)&v181[4 * v195 + 16];
                    v204 = v196 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v205 = *v203;
                      *(v202 - 1) = *(v203 - 1);
                      *v202 = v205;
                      v202 += 2;
                      v203 += 2;
                      v204 -= 8;
                    }
                    while (v204);
                    if (v196 != v198)
                    {
LABEL_252:
                      v199 = v183 - v198 - v195;
                      v200 = &v181[4 * v198 + 4 * v194];
                      do
                      {
                        v201 = *v197++;
                        *v200++ = v201;
                        --v199;
                      }
                      while (v199);
                    }
                  }
                  *(_QWORD *)v87 = v180 - (v193 >> 1);
                  goto LABEL_255;
                }
LABEL_247:
                v181 = *v262;
                v184 = (uint64_t)*v262 + 4 * v183;
                if (v182 == (char *)v184)
                  goto LABEL_255;
                goto LABEL_248;
              }
              continue;
            }
            break;
          }
          v147 = &v139[v138 >> 1];
          while (2)
          {
            v148 = *v139;
            v149 = *((_QWORD *)this + 71);
            if (*v139 < (int)((unint64_t)(*((_QWORD *)this + 72) - v149) >> 2))
            {
              v150 = *(_DWORD *)(v149 + 4 * v148);
              if (v150 != -1)
                v148 = v150;
            }
            if (v148 == v30)
              goto LABEL_187;
            v151 = *(_QWORD *)v87;
            if ((*(_QWORD *)v87 & 1) != 0)
            {
              v152 = *(int **)(v87 + 8);
              v153 = *(_QWORD *)(v87 + 16);
              v154 = v151 >> 1;
              if (v151 >> 1 == v153)
                goto LABEL_196;
            }
            else
            {
              v152 = v89;
              v153 = 6;
              v154 = v151 >> 1;
              if (v151 >> 1 == 6)
              {
LABEL_196:
                if (((v153 >> 61) & 3) != 0)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v155 = (char *)operator new(8 * v153);
                v156 = v155;
                *(_DWORD *)&v155[4 * v153] = v148;
                if (v151 >= 2)
                {
                  v157 = 0;
                  if (v153 < 8 || (unint64_t)(v155 - (char *)v152) < 0x20)
                  {
                    v158 = v152;
                  }
                  else
                  {
                    v157 = v153 & 0xFFFFFFFFFFFFFFF8;
                    v158 = &v152[v153 & 0xFFFFFFFFFFFFFFF8];
                    v159 = v155 + 16;
                    v160 = (__int128 *)(v152 + 4);
                    v161 = v153 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v162 = *v160;
                      *(v159 - 1) = *(v160 - 1);
                      *v159 = v162;
                      v159 += 2;
                      v160 += 2;
                      v161 -= 8;
                    }
                    while (v161);
                    if (v153 == v157)
                      goto LABEL_207;
                  }
                  v163 = v153 - v157;
                  v164 = &v155[4 * v157];
                  do
                  {
                    v165 = *v158++;
                    *(_DWORD *)v164 = v165;
                    v164 += 4;
                    --v163;
                  }
                  while (v163);
                }
LABEL_207:
                if ((v151 & 1) != 0)
                {
                  operator delete(*(void **)(v87 + 8));
                  v151 = *(_QWORD *)v87;
                }
                *(_QWORD *)(v87 + 8) = v156;
                *(_QWORD *)(v87 + 16) = 2 * v153;
                v151 |= 1uLL;
                v89 = (int *)v262;
LABEL_186:
                *(_QWORD *)v87 = v151 + 2;
LABEL_187:
                if (++v139 == v147)
                  goto LABEL_180;
                continue;
              }
            }
            break;
          }
          v152[v154] = v148;
          goto LABEL_186;
        }
        v93 = 0;
        v97 = *((_QWORD *)this + 71);
        v98 = (unint64_t)(*((_QWORD *)this + 72) - v97) >> 2;
        v99 = 4 * v92;
        while (2)
        {
          v101 = *v90;
          if (*v90 >= (int)v98)
          {
            if (v101 != v30)
              goto LABEL_125;
          }
          else
          {
            if (*(_DWORD *)(v97 + 4 * v101) != -1)
              v101 = *(_DWORD *)(v97 + 4 * v101);
            if (v101 != v30)
            {
LABEL_125:
              v102 = v87 + 8;
              if ((v88 & 1) != 0)
                v102 = *(_QWORD *)v89;
              v100 = v93++;
              *(_DWORD *)(v102 + 4 * v100) = v101;
            }
          }
          ++v90;
          v99 -= 4;
          if (!v99)
            goto LABEL_113;
          continue;
        }
      }
      v21 = (uint64_t *)((char *)this + 544);
      if (v24 < 1)
        goto LABEL_48;
      v63 = (_QWORD *)(*v257 + 32 * v30);
      v65 = (int **)(v63 + 1);
      v64 = *v63;
      v66 = (int *)(v63 + 1);
      if ((*v63 & 1) != 0)
        v66 = *v65;
      v67 = v64 >> 1;
      if (v64 >= 2)
      {
        v112 = *v252;
        v113 = 4 * v67;
        do
        {
          v114 = *(_DWORD *)(v112 + 4 * *v66);
          if (v114 != v30 && v114 != -1)
            *v66 = v114;
          ++v66;
          v113 -= 4;
        }
        while (v113);
      }
      v68 = (int *)(v63 + 1);
      if ((v64 & 1) != 0)
        v68 = *v65;
      v69 = (char *)&v68[v67];
      v70 = 126 - 2 * __clz(v67);
      if (v64 >= 2)
        v71 = v70;
      else
        v71 = 0;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v68, v69, (uint64_t)v263, v71, 1);
      v72 = *v63;
      v73 = (int *)(v63 + 1);
      if ((*v63 & 1) != 0)
      {
        v73 = *v65;
        v74 = v72 >> 1;
        if (v72 >= 2)
        {
LABEL_147:
          v116 = &v73[v74];
          v117 = v73 + 1;
          v118 = 4 * v74 - 4;
          do
          {
            if (!v118)
            {
              v73 = v116;
              if ((v72 & 1) == 0)
                goto LABEL_99;
              goto LABEL_156;
            }
            v120 = *(v117 - 1);
            v119 = *v117++;
            v118 -= 4;
          }
          while (v120 != v119);
          v121 = v117 - 2;
          if (v118)
          {
            for (j = 0; j != v118; j += 4)
            {
              v123 = v119;
              v119 = v117[j / 4];
              if (v123 != v119)
              {
                v121[1] = v119;
                ++v121;
              }
            }
          }
          v73 = v121 + 1;
          if ((v72 & 1) == 0)
            goto LABEL_99;
          goto LABEL_156;
        }
      }
      else
      {
        v74 = v72 >> 1;
        if (v72 >= 2)
          goto LABEL_147;
      }
      if ((v72 & 1) == 0)
      {
LABEL_99:
        v75 = (int *)v65 + v74;
        if (v73 != v75)
          goto LABEL_157;
        goto LABEL_48;
      }
LABEL_156:
      v65 = (int **)*v65;
      v75 = (int *)v65 + v74;
      if (v73 != v75)
      {
LABEL_157:
        v124 = (char *)v75 - (char *)v73;
        v125 = ((char *)v73 - (char *)v65) >> 2;
        v126 = v125 + (v124 >> 2);
        v127 = v74 - v126;
        if (v74 != v126)
        {
          v128 = (int *)v65 + v126;
          if (v127 < 0xC || (unint64_t)((char *)v73 - (char *)v65 - 4 * v126) < 0x20)
          {
            v129 = 0;
            goto LABEL_161;
          }
          v129 = v127 & 0xFFFFFFFFFFFFFFF8;
          v128 += v127 & 0xFFFFFFFFFFFFFFF8;
          v206 = (_OWORD *)((char *)v65 + 4 * v125 + 16);
          v207 = (__int128 *)((char *)v65 + 4 * v126 + 16);
          v208 = v127 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v209 = *v207;
            *(v206 - 1) = *(v207 - 1);
            *v206 = v209;
            v206 += 2;
            v207 += 2;
            v208 -= 8;
          }
          while (v208);
          if (v127 != v129)
          {
LABEL_161:
            v130 = v74 - v129 - v126;
            v131 = (_DWORD *)v65 + v129 + v125;
            do
            {
              v132 = *v128++;
              *v131++ = v132;
              --v130;
            }
            while (v130);
          }
        }
        *v63 = v72 - (v124 >> 1);
      }
LABEL_48:
      v23 += 3;
      if (v23 == v254)
      {
        *((_BYTE *)this + 512) = 1;
        if (v24)
        {
          v229 = *((_QWORD *)this + 28);
          v228 = *((_QWORD *)this + 29);
          if (v228 != v229)
          {
            v230 = *((_QWORD *)this + 29);
            do
            {
              v231 = *(_BYTE *)(v230 - 32);
              v230 -= 32;
              if ((v231 & 1) != 0)
                operator delete(*(void **)(v228 - 24));
              v228 = v230;
            }
            while (v230 != v229);
          }
          *((_QWORD *)this + 29) = v229;
          operations_research::sat::BinaryImplicationGraph::CleanUpAndAddAtMostOnes(this, 0);
          *((_QWORD *)this + 27) = 0;
          if (v248 < 1)
          {
            v235 = 0;
          }
          else
          {
            v232 = *v257;
            v233 = (v255 >> 5);
            if (v233 >= 5)
            {
              if (((v255 >> 5) & 3) != 0)
                v236 = (v255 >> 5) & 3;
              else
                v236 = 4;
              v234 = v233 - v236;
              v237 = (const double *)(v232 + 64);
              v238 = v236 - v233;
              v239 = 0uLL;
              v240 = 0uLL;
              do
              {
                v241 = v237 - 8;
                v242 = (unsigned __int128)vld4q_f64(v241);
                v243 = (unsigned __int128)vld4q_f64(v237);
                v239 = (int64x2_t)vsraq_n_u64((uint64x2_t)v239, (uint64x2_t)v242, 1uLL);
                v240 = (int64x2_t)vsraq_n_u64((uint64x2_t)v240, (uint64x2_t)v243, 1uLL);
                v237 += 16;
                v238 += 4;
              }
              while (v238);
              v235 = vaddvq_s64(vaddq_s64(v240, v239));
            }
            else
            {
              v234 = 0;
              v235 = 0;
            }
            v244 = (unint64_t *)(v232 + 32 * v234);
            v245 = v234 - v233;
            do
            {
              v246 = *v244;
              v244 += 4;
              v235 += v246 >> 1;
            }
            while (!__CFADD__(v245++, 1));
            *((_QWORD *)this + 27) = v235;
          }
          v22 = v22 + (double)v235 * 0.00000002;
        }
        goto LABEL_267;
      }
    }
  }
  do
  {
LABEL_11:
    v7 = *((int *)this + 9);
    if ((int)v7 >= *(_DWORD *)(v6 + 12))
      goto LABEL_15;
    *((_DWORD *)this + 9) = v7 + 1;
  }
  while ((operations_research::sat::BinaryImplicationGraph::PropagateOnTrue((uint64_t)this, *(_DWORD *)(*(_QWORD *)(v6 + 72) + 4 * v7), v6) & 1) != 0);
  return 0;
}

void sub_22DA4C848(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_22DA4C85C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_22DA4C870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  google::LogMessage::~LogMessage((google::LogMessage *)&a27);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v27 - 128));
  _Unwind_Resume(a1);
}

void sub_22DA4C9A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_22DA4C9BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void StronglyConnectedComponentsFinder<int,operations_research::sat::SccGraph,std::vector<std::vector<int>>>::FindStronglyConnectedComponents(std::vector<int> *a1, int a2, uint64_t a3, uint64_t a4)
{
  std::vector<int> *v6;
  std::vector<int> *v7;
  int *begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  std::vector<int>::pointer v22;
  int v23;
  unint64_t v24;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v26;
  int *v27;
  _QWORD *v28;
  int64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int *v33;
  char *v34;
  uint64_t v35;
  std::vector<int>::pointer v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  int *v43;
  std::vector<int>::pointer v44;
  unint64_t v45;
  std::vector<int>::pointer v46;
  unint64_t v47;
  std::vector<int>::pointer v48;
  std::vector<int>::pointer v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  unint64_t v59;
  int *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  int *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  void **v80;
  void *v81;
  int *v82;
  int v83;
  uint64_t v84;
  int v85;
  int *v86;
  std::vector<int>::pointer v87;
  std::vector<int>::pointer v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  int *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  _OWORD *v102;
  __int128 *v103;
  uint64_t v104;
  __int128 v105;
  int v106;
  int *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void **p_begin;
  uint64_t v112;
  std::vector<int> *v114;
  void **v115;
  std::vector<int> *v116;
  unint64_t v117;
  std::vector<int>::pointer v118;
  std::vector<int>::value_type __u[2];

  v6 = a1;
  a1->__end_ = a1->__begin_;
  p_begin = (void **)&a1[1].__begin_;
  a1[1].__end_ = a1[1].__begin_;
  v7 = a1 + 2;
  __u[0] = 0;
  std::vector<int>::assign(a1 + 2, a2, __u);
  begin = v6[3].__begin_;
  v115 = (void **)&v6[3].__begin_;
  v6[3].__end_ = begin;
  if (a2 < 1)
    return;
  v9 = 0;
  v10 = 0;
  v11 = a2;
  v112 = a4;
  v116 = v7;
  v109 = a2;
  v114 = v6;
  while (2)
  {
    if (v7->__begin_[v9])
      goto LABEL_4;
    value = v6[3].__end_cap_.__value_;
    v110 = v9;
    v117 = v10;
    if (begin >= value)
    {
      v14 = 1;
      v15 = (char *)value - (char *)begin;
      if ((unint64_t)(v15 >> 1) > 1)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 62)
LABEL_117:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v17 = (int *)operator new(4 * v16);
        v18 = v17;
        *v17 = v110;
        v13 = (uint64_t)(v17 + 1);
      }
      else
      {
        v17 = 0;
        v18 = 0;
        MEMORY[0] = v9;
        v13 = 4;
      }
      v6[3].__begin_ = v18;
      v6[3].__end_ = (std::vector<int>::pointer)v13;
      v6[3].__end_cap_.__value_ = &v17[v16];
      if (begin)
        operator delete(begin);
    }
    else
    {
      *begin = v9;
      v13 = (uint64_t)(begin + 1);
    }
    v6[3].__end_ = (std::vector<int>::pointer)v13;
    while (2)
    {
      v21 = *(_DWORD *)(v13 - 4);
      v19 = (int *)(v13 - 4);
      v20 = v21;
      v22 = v7->__begin_;
      v23 = v7->__begin_[v21];
      if (v23)
      {
        v6[3].__end_ = v19;
        if ((_DWORD)v117 != v23)
          goto LABEL_21;
        v24 = (int)v117 - 1;
        v26 = v6->__begin_;
        end = v6->__end_;
        v27 = &v6->__begin_[v24];
        v118 = end;
        *(_QWORD *)__u = v27;
        v28 = *(_QWORD **)(v112 + 8);
        if ((unint64_t)v28 >= *(_QWORD *)(v112 + 16))
        {
          v32 = std::vector<std::vector<int>>::__emplace_back_slow_path<int *,int *>((char **)v112, (const void **)__u, (const void **)&v118);
        }
        else
        {
          *v28 = 0;
          v28[1] = 0;
          v28[2] = 0;
          if (end - v26 != v24)
          {
            v29 = (char *)end - (char *)v27;
            if ((char *)end - (char *)v27 < 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v30 = (char *)operator new((char *)end - (char *)v27);
            *v28 = v30;
            v28[1] = v30;
            v31 = &v30[4 * (v29 >> 2)];
            v28[2] = v31;
            memcpy(v30, v27, v29);
            v28[1] = v31;
            v7 = v116;
          }
          v32 = (char *)(v28 + 3);
          *(_QWORD *)(v112 + 8) = v28 + 3;
        }
        *(_QWORD *)(v112 + 8) = v32;
        v44 = v6->__begin_;
        v45 = v6->__end_ - v6->__begin_;
        if (v24 >= v45)
        {
          if (v24 <= v45)
            goto LABEL_49;
        }
        else
        {
          v46 = v7->__begin_;
          v47 = (int)v117 - 1;
          do
            v46[v44[v47++]] = 0x7FFFFFFF;
          while (v45 > v47);
          if (v24 <= v45)
          {
            v6->__end_ = &v44[v24];
            goto LABEL_49;
          }
        }
        std::vector<int>::__append(v6, v24 - v45);
LABEL_49:
        v49 = v6[1].__begin_;
        v48 = v6[1].__end_;
        v6[1].__end_ = v48 - 1;
        if (v49 == v48 - 1)
          v117 = 0;
        else
          v117 = *(v48 - 2);
        goto LABEL_21;
      }
      v34 = (char *)v6->__end_;
      v33 = v6->__end_cap_.__value_;
      if (v34 < (char *)v33)
      {
        *(_DWORD *)v34 = v20;
        v35 = (uint64_t)(v34 + 4);
        goto LABEL_61;
      }
      v36 = v6->__begin_;
      v37 = v34 - (char *)v6->__begin_;
      v38 = v37 >> 2;
      v39 = (v37 >> 2) + 1;
      if (v39 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v40 = (char *)v33 - (char *)v36;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        if (v41 >> 62)
          goto LABEL_117;
        v42 = operator new(4 * v41);
        v43 = (int *)&v42[4 * v38];
        *v43 = v20;
        v35 = (uint64_t)(v43 + 1);
        if (v34 == (char *)v36)
          goto LABEL_58;
        goto LABEL_52;
      }
      v42 = 0;
      v43 = (int *)(4 * v38);
      *(_DWORD *)(4 * v38) = v20;
      v35 = 4 * v38 + 4;
      if (v34 != (char *)v36)
      {
LABEL_52:
        v50 = v34 - 4 - (char *)v36;
        if (v50 < 0x2C)
          goto LABEL_123;
        if ((unint64_t)(v34 - &v42[v37]) < 0x20)
          goto LABEL_123;
        v51 = (v50 >> 2) + 1;
        v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
        v53 = &v34[-v52];
        v43 = (int *)((char *)v43 - v52);
        v54 = &v42[4 * v38 - 16];
        v55 = v34 - 16;
        v56 = v51 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 8;
        }
        while (v56);
        v34 = v53;
        if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_123:
          do
          {
            v58 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *--v43 = v58;
          }
          while (v34 != (char *)v36);
        }
      }
LABEL_58:
      v6->__begin_ = v43;
      v6->__end_ = (std::vector<int>::pointer)v35;
      v6->__end_cap_.__value_ = (int *)&v42[4 * v41];
      if (v36)
      {
        operator delete(v36);
        v7 = v116;
        v22 = v116->__begin_;
      }
      else
      {
        v7 = v116;
      }
LABEL_61:
      v6->__end_ = (std::vector<int>::pointer)v35;
      v59 = (v35 - (unint64_t)v6->__begin_) >> 2;
      v22[v20] = v59;
      v61 = (char *)v6[1].__end_;
      v60 = v6[1].__end_cap_.__value_;
      v117 = v59;
      if (v61 >= (char *)v60)
      {
        v63 = (char *)*p_begin;
        v64 = v61 - (_BYTE *)*p_begin;
        v65 = v64 >> 2;
        v66 = (v64 >> 2) + 1;
        if (v66 >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v67 = (char *)v60 - v63;
        if (v67 >> 1 > v66)
          v66 = v67 >> 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          if (v68 >> 62)
            goto LABEL_117;
          v69 = operator new(4 * v68);
          v70 = (int *)&v69[4 * v65];
          *v70 = v117;
          v62 = (uint64_t)(v70 + 1);
          if (v61 == v63)
            goto LABEL_80;
        }
        else
        {
          v69 = 0;
          v70 = (int *)(4 * v65);
          *(_DWORD *)(4 * v65) = v117;
          v62 = 4 * v65 + 4;
          if (v61 == v63)
          {
LABEL_80:
            v6[1].__begin_ = v70;
            v6[1].__end_ = (std::vector<int>::pointer)v62;
            v6[1].__end_cap_.__value_ = (int *)&v69[4 * v68];
            if (v63)
              operator delete(v63);
            goto LABEL_82;
          }
        }
        v71 = v61 - 4 - v63;
        if (v71 < 0x2C)
          goto LABEL_124;
        if ((unint64_t)(v61 - &v69[v64]) < 0x20)
          goto LABEL_124;
        v72 = (v71 >> 2) + 1;
        v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
        v74 = &v61[-v73];
        v70 = (int *)((char *)v70 - v73);
        v75 = &v69[4 * v65 - 16];
        v76 = v61 - 16;
        v77 = v72 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *v75 = v78;
          v75 -= 2;
          v76 -= 32;
          v77 -= 8;
        }
        while (v77);
        v61 = v74;
        if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_124:
          do
          {
            v79 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *--v70 = v79;
          }
          while (v61 != v63);
        }
        goto LABEL_80;
      }
      *(_DWORD *)v61 = v59;
      v62 = (uint64_t)(v61 + 4);
LABEL_82:
      v6[1].__end_ = (std::vector<int>::pointer)v62;
      v80 = operations_research::sat::SccGraph::operator[](a3, v20);
      v82 = (int *)*v80;
      v81 = v80[1];
      if (*v80 == v81)
        goto LABEL_21;
      v83 = 0x7FFFFFFF;
      do
      {
        v84 = *v82;
        v85 = v7->__begin_[v84];
        if (!v85)
        {
          v87 = v6[3].__end_;
          v86 = v6[3].__end_cap_.__value_;
          if (v87 < v86)
          {
            *v87 = v84;
            v6[3].__end_ = v87 + 1;
            goto LABEL_86;
          }
          v88 = (std::vector<int>::pointer)*v115;
          v89 = (char *)v87 - (_BYTE *)*v115;
          v90 = v89 >> 2;
          v91 = (v89 >> 2) + 1;
          if (v91 >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v92 = (char *)v86 - (char *)v88;
          if (v92 >> 1 > v91)
            v91 = v92 >> 1;
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
            v93 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v93 = v91;
          if (v93)
          {
            if (v93 >> 62)
              goto LABEL_117;
            v94 = operator new(4 * v93);
            v95 = (int *)&v94[4 * v90];
            *v95 = v84;
            v96 = (uint64_t)(v95 + 1);
            if (v87 != v88)
              goto LABEL_99;
          }
          else
          {
            v94 = 0;
            v95 = (int *)(4 * v90);
            *(_DWORD *)(4 * v90) = v84;
            v96 = 4 * v90 + 4;
            if (v87 != v88)
            {
LABEL_99:
              v97 = (char *)(v87 - 1) - (char *)v88;
              if (v97 >= 0x2C)
              {
                v98 = (char *)v87 - &v94[v89];
                v7 = v116;
                if (v98 >= 0x20)
                {
                  v99 = (v97 >> 2) + 1;
                  v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
                  v101 = &v87[v100 / 0xFFFFFFFFFFFFFFFCLL];
                  v95 = (int *)((char *)v95 - v100);
                  v102 = &v94[4 * v90 - 16];
                  v103 = (__int128 *)(v87 - 4);
                  v104 = v99 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v105 = *v103;
                    *(v102 - 1) = *(v103 - 1);
                    *v102 = v105;
                    v102 -= 2;
                    v103 -= 2;
                    v104 -= 8;
                  }
                  while (v104);
                  v87 = v101;
                  if (v99 == (v99 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_108;
                }
              }
              else
              {
                v7 = v116;
              }
              do
              {
                v106 = *--v87;
                *--v95 = v106;
              }
              while (v87 != v88);
LABEL_108:
              v6 = v114;
              v114[3].__begin_ = v95;
              v114[3].__end_ = (std::vector<int>::pointer)v96;
              v114[3].__end_cap_.__value_ = (int *)&v94[4 * v93];
              if (v88)
                operator delete(v88);
              v114[3].__end_ = (std::vector<int>::pointer)v96;
              goto LABEL_86;
            }
          }
          v7 = v116;
          goto LABEL_108;
        }
        if (v85 < v83)
          v83 = v7->__begin_[v84];
LABEL_86:
        ++v82;
      }
      while (v82 != v81);
      if (v83 < (int)v117)
      {
        v107 = v6[1].__end_;
        do
        {
          v108 = *(v107 - 2);
          --v107;
        }
        while ((int)v108 > v83);
        v117 = v108;
        v6[1].__end_ = v107;
      }
LABEL_21:
      begin = v6[3].__begin_;
      v13 = (uint64_t)v6[3].__end_;
      if (begin != (int *)v13)
        continue;
      break;
    }
    v11 = v109;
    v9 = v110;
    v10 = v117;
LABEL_4:
    if (++v9 != v11)
      continue;
    break;
  }
}

void sub_22DA4D1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(a13 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SccGraph::~SccGraph(operations_research::sat::SccGraph *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

uint64_t StronglyConnectedComponentsFinder<int,operations_research::sat::SccGraph,std::vector<std::vector<int>>>::~StronglyConnectedComponentsFinder(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(operations_research::sat::BinaryImplicationGraph *this, int a2)
{
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  int v9;
  unint64_t v10;
  int *v11;
  int *v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int **v24;
  int *v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int **v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v38;
  int *v39;
  uint64_t v40;
  int v41;
  int **v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int **v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  int *v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  char *v61;
  int v62;
  char *v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  char v67;
  int **v68;
  unint64_t v69;
  char *v70;
  int **v71;
  unint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  unint64_t v75;
  __int128 v76;
  unint64_t v77;
  _DWORD *v78;
  int v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  absl::lts_2020_02_25 *v87;
  _QWORD *v88;
  const char *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  unint64_t *v106;
  unint64_t v107;
  void **v108;
  unint64_t v109;
  unint64_t v110[2];
  uint64_t *v111;

  LODWORD(v110[0]) = (*(_DWORD *)(*((_QWORD *)this + 16) + 8) >> 1) & 0x7FFFFFF;
  LODWORD(v111) = 0;
  if (LODWORD(v110[0]))
  {
    v111 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v110, (int)&v111, "trail_->CurrentDecisionLevel() == 0");
    if (v111)
    {
      google::LogMessageFatal::LogMessageFatal(v110, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1310, &v111);
      google::LogMessage::stream((google::LogMessage *)v110);
      goto LABEL_121;
    }
  }
  v4 = operations_research::sat::BinaryImplicationGraph::DetectEquivalences(this, 0);
  result = 0;
  if ((v4 & 1) == 0)
    return result;
  v6 = *((_QWORD *)this + 16);
  if (!*((_QWORD *)this + 27) && *((_QWORD *)this + 28) == *((_QWORD *)this + 29))
  {
    *((_DWORD *)this + 9) = *(_DWORD *)(v6 + 12);
  }
  else
  {
    while (1)
    {
      v7 = *((int *)this + 9);
      if ((int)v7 >= *(_DWORD *)(v6 + 12))
        break;
      *((_DWORD *)this + 9) = v7 + 1;
      if ((operations_research::sat::BinaryImplicationGraph::PropagateOnTrue((uint64_t)this, *(_DWORD *)(*(_QWORD *)(v6 + 72) + 4 * v7), v6) & 1) == 0)return 0;
    }
  }
  inited = operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables((uint64_t)this);
  if (*operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(BOOL)::vlocal__ < 1)
  {
    v9 = 0;
  }
  else if (operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(BOOL)::vlocal__ == &google::kLogSiteUninitialized)
  {
    inited = google::InitVLOG3__((google *)&operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/clause.cc", (const char *)1);
    v9 = inited;
  }
  else
  {
    v9 = 1;
  }
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
  *((_QWORD *)this + 63) = 0;
  v10 = *((_QWORD *)this + 25) - *((_QWORD *)this + 24);
  v11 = (int *)*((_QWORD *)this + 65);
  v12 = (int *)*((_QWORD *)this + 66);
  v13 = v10 >> 5;
  if (v11 == v12)
  {
    v16 = 0;
    v17 = 1;
    goto LABEL_110;
  }
  v99 = 0;
  v100 = v10 >> 5;
  v97 = v9;
  v98 = a2;
  v101 = (int *)*((_QWORD *)this + 66);
  v102 = 0;
  v14 = 0;
  v105 = (_QWORD *)((char *)this + 320);
  v15 = -1;
  while (1)
  {
    v19 = *v11;
    v20 = (unint64_t)*v11 >> 6;
    if (((1 << *v11) & *(_QWORD *)(*((_QWORD *)this + 68) + 8 * v20)) == 0)
    {
      v21 = 3 << (v19 & 0x3E);
      if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 24) + 8 * v20) & v21) == 0)
      {
        v22 = (_QWORD *)(*((_QWORD *)this + 24) + 32 * v19);
        v23 = *v22;
        if (*v22 >= 2uLL)
          break;
      }
    }
LABEL_21:
    if (++v11 == v12)
    {
      v17 = 1;
      goto LABEL_109;
    }
  }
  v24 = (int **)(v22 + 1);
  v25 = (int *)(v22 + 1);
  if ((v23 & 1) != 0)
    v25 = *v24;
  v26 = (2 * v23) & 0xFFFFFFFFFFFFFFFCLL;
  v108 = (void **)(v22 + 1);
  while (*v25 != v15)
  {
    ++v25;
    v26 -= 4;
    if (!v26)
    {
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)v105, v100);
      v24 = (int **)(v22 + 1);
      v23 = *v22;
      v106 = v22;
      v103 = 0;
      v27 = (int *)(v22 + 1);
      if ((*v22 & 1) == 0)
        goto LABEL_34;
      goto LABEL_33;
    }
  }
  *(_QWORD *)(*((_QWORD *)this + 41) + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v15);
  v106 = v22;
  v103 = v14;
  v27 = (int *)(v22 + 1);
  if ((v23 & 1) == 0)
    goto LABEL_34;
LABEL_33:
  v27 = *v24;
LABEL_34:
  if (v23 < 2)
    goto LABEL_35;
  v33 = 4 * (v23 >> 1);
  while (1)
  {
    v34 = *v27;
    v35 = v34 >> 6;
    v36 = 1 << v34;
    if (((1 << v34) & *(_QWORD *)(*((_QWORD *)this + 68) + 8 * (v34 >> 6))) != 0)
      goto LABEL_44;
    if ((_DWORD)v34 == v19 || (*(_QWORD *)(*((_QWORD *)this + 41) + 8 * v35) & v36) != 0)
      goto LABEL_44;
    if ((v34 ^ 1) == v19)
      break;
    operations_research::sat::BinaryImplicationGraph::MarkDescendants(this, v34);
    *(_QWORD *)(*((_QWORD *)this + 41) + 8 * v35) &= ~v36;
LABEL_44:
    ++v27;
    v33 -= 4;
    if (!v33)
      goto LABEL_35;
  }
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v105, v34);
LABEL_35:
  if ((*(_QWORD *)(*((_QWORD *)this + 41) + 8 * v20) & (1 << v19)) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v110, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1399);
    v92 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v110);
    v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Check failed: !is_marked_[root] ", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"DetectEquivalences() should have removed cycles!", 48);
    goto LABEL_121;
  }
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v105, v19);
  v28 = *((_QWORD *)this + 47);
  v29 = (*((_QWORD *)this + 48) - v28) >> 2;
  v14 = v103;
  v30 = (int)v103;
  if (v29 <= (int)v103)
  {
    v12 = v101;
    goto LABEL_57;
  }
  v12 = v101;
  v31 = (int **)v108;
  do
  {
    if (((*(_QWORD *)(*((_QWORD *)this + 41) + (((unint64_t)*(int *)(v28 + 4 * v30) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(_DWORD *)(v28 + 4 * v30) & 0x3F ^ 1u)) & 1) != 0)
    {
      if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 24) + 8 * v20) & v21) == 0)
      {
        if (!operations_research::sat::BinaryImplicationGraph::FixLiteral((uint64_t)this, v19 ^ 1))
          return 0;
        ++v99;
        v14 = v30;
LABEL_57:
        v32 = v106;
        v31 = (int **)v108;
        if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 24) + 8 * v20) & v21) == 0)
          goto LABEL_58;
        goto LABEL_20;
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v110, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1411);
      v94 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v110);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Check failed: !trail_->Assignment().LiteralIsAssigned(Literal(root)) ", 69);
LABEL_121:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v110);
    }
    ++v30;
  }
  while (v29 > v30);
  v14 = v30;
  v32 = v106;
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 24) + 8 * v20) & v21) != 0)
    goto LABEL_20;
LABEL_58:
  v38 = *v32;
  v39 = (int *)v31;
  if ((*v32 & 1) != 0)
    v39 = *v31;
  v40 = *v32 & 1;
  if (v38 >= 2)
  {
    v41 = 0;
    v47 = *((_QWORD *)this + 41);
    v48 = 4 * (v38 >> 1);
    while (1)
    {
      v49 = (unint64_t)*v39 >> 6;
      if (((1 << *v39) & *(_QWORD *)(v47 + 8 * v49)) != 0)
      {
        if ((*(_QWORD *)(*((_QWORD *)this + 68) + 8 * v49) & (1 << *v39)) != 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v110, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1435);
          v91 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v110);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Check failed: !is_redundant_[l.Index()] ", 40);
          goto LABEL_121;
        }
      }
      else
      {
        v50 = v31;
        if ((v38 & 1) != 0)
          v50 = (int **)*v31;
        *((_DWORD *)v50 + v41++) = *v39;
      }
      ++v39;
      v48 -= 4;
      if (!v48)
        goto LABEL_62;
    }
  }
  v41 = 0;
LABEL_62:
  v104 = v38 >> 1;
  if ((v38 & 1) == 0)
  {
    v42 = v31;
    v43 = 6;
    v44 = v41;
    if ((unint64_t)v41 <= 6)
      goto LABEL_64;
LABEL_75:
    v51 = 2 * v43;
    v96 = v44;
    if (v51 <= v44)
      v52 = v44;
    else
      v52 = v51;
    if (!(v52 >> 62))
    {
      v95 = v52;
      v53 = (char *)operator new(4 * v52);
      if (v38 < 2)
        goto LABEL_89;
      v54 = 0;
      if (v38 < 0x10 || (unint64_t)(v53 - (char *)v42) < 0x20)
      {
        v55 = (int *)v42;
      }
      else
      {
        v54 = v104 & 0x7FFFFFFFFFFFFFF8;
        v55 = (int *)v42 + (v104 & 0x7FFFFFFFFFFFFFF8);
        v56 = v53 + 16;
        v57 = (__int128 *)(v42 + 2);
        v58 = v104 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v59 = *v57;
          *(v56 - 1) = *(v57 - 1);
          *v56 = v59;
          v56 += 2;
          v57 += 2;
          v58 -= 8;
        }
        while (v58);
        if (v104 == v54)
        {
LABEL_89:
          if ((v38 & 1) != 0)
          {
            v63 = v53;
            operator delete(*v108);
            v53 = v63;
          }
          v46 = v106;
          v44 = v96;
          v106[1] = (unint64_t)v53;
          v106[2] = v95;
          v45 = (2 * v96) | 1;
          *v106 = v45;
          v31 = (int **)v108;
          goto LABEL_92;
        }
      }
      v60 = v104 - v54;
      v61 = &v53[4 * v54];
      do
      {
        v62 = *v55++;
        *(_DWORD *)v61 = v62;
        v61 += 4;
        --v60;
      }
      while (v60);
      goto LABEL_89;
    }
LABEL_126:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v42 = (int **)v32[1];
  v43 = v32[2];
  v44 = v41;
  if (v43 < v41)
    goto LABEL_75;
LABEL_64:
  v45 = v40 | (2 * v44);
  v46 = v106;
  *v106 = v45;
  if ((v38 & 1) != 0)
  {
LABEL_92:
    v64 = v44 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v44 & 0x7FFFFFFFFFFFFFFFLL) == v46[2])
      goto LABEL_19;
    v65 = (char *)v46[1];
    if (v45 < 0xE)
    {
      if (v45 <= 1)
      {
        operator delete((void *)v46[1]);
        goto LABEL_18;
      }
      v68 = 0;
      v109 = 0;
      v69 = 0;
      if (v64 >= 8)
        goto LABEL_96;
    }
    else
    {
      if ((v45 & 0x8000000000000000) != 0)
        goto LABEL_126;
      v66 = v14;
      v67 = v44;
      v107 = v44 & 0x7FFFFFFFFFFFFFFFLL;
      v31 = (int **)operator new(4 * v44);
      v64 = v107;
      v68 = v31;
      v109 = v107;
      LOBYTE(v44) = v67;
      v14 = v66;
      v69 = 0;
      if (v107 >= 8)
      {
LABEL_96:
        v70 = v65;
        v71 = v68;
        if ((unint64_t)((char *)v31 - v65) >= 0x20)
        {
          v72 = v44 & 7;
          v69 = v64 - v72;
          v70 = &v65[4 * (v64 - v72)];
          v73 = v31 + 2;
          v74 = (__int128 *)(v65 + 16);
          v75 = v64 - v72;
          do
          {
            v76 = *v74;
            *(v73 - 1) = *(v74 - 1);
            *v73 = v76;
            v73 += 2;
            v74 += 2;
            v75 -= 8;
          }
          while (v75);
          if (!v72)
          {
LABEL_106:
            operator delete(v65);
            if (v71)
            {
              v46[1] = (unint64_t)v71;
              v46[2] = v109;
              goto LABEL_19;
            }
LABEL_18:
            *v46 &= ~1uLL;
            goto LABEL_19;
          }
        }
LABEL_104:
        v77 = v64 - v69;
        v78 = (_DWORD *)v31 + v69;
        do
        {
          v79 = *(_DWORD *)v70;
          v70 += 4;
          *v78++ = v79;
          --v77;
        }
        while (v77);
        goto LABEL_106;
      }
    }
    v70 = v65;
    v71 = v68;
    goto LABEL_104;
  }
LABEL_19:
  v18 = (int)v104 - v41;
  v102 += v18;
  *((_QWORD *)this + 27) -= v18;
  if (*((uint64_t *)this + 63) <= 100000000)
  {
LABEL_20:
    v15 = v19;
    goto LABEL_21;
  }
  v17 = 0;
LABEL_109:
  v9 = v97;
  a2 = v98;
  v16 = v102;
  v13 = v100;
LABEL_110:
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 320, v13);
  *(double *)(*((_QWORD *)this + 15) + 112) = *(double *)(*((_QWORD *)this + 15) + 112)
                                              + (double)*((uint64_t *)this + 63) * 0.00000001;
  *((_QWORD *)this + 38) += v16;
  if (v9 | a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v110, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1456);
    v80 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v110);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"Transitive reduction removed ", 29);
    v81 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" literals. ", 11);
    v82 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)" fixed. ", 8);
    v83 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" implications left. ", 20);
    v84 = (_QWORD *)std::ostream::operator<<();
    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" literals.", 10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" dtime: ", 8);
    v86 = (_QWORD *)std::ostream::operator<<();
    v87 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v87);
    v88 = (_QWORD *)std::ostream::operator<<();
    if (v17)
      v89 = "";
    else
      v89 = " Aborted.";
    if (v17)
      v90 = 0;
    else
      v90 = 9;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v89, v90);
    google::LogMessage::~LogMessage((google::LogMessage *)v110);
  }
  return 1;
}

void sub_22DA4DBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA4DC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DA4DC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA4DC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA4DC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(operations_research::sat::BinaryImplicationGraph *a1, uint64_t **a2, uint64_t a3)
{
  operations_research::sat::BinaryImplicationGraph *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t i;
  char **v59;
  char *v60;
  char *v61;
  _DWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  char **v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  int *v71;
  int *v72;
  char *v73;
  char *v74;
  uint64_t *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  _DWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _OWORD *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  void *v105;
  char *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void *v113;
  unsigned int v115;
  operations_research::sat::BinaryImplicationGraph *v116;
  uint64_t v117;
  uint64_t *v118;
  int v119;
  int v120;
  uint64_t *v121;
  int v122;
  int *v123;
  uint64_t v124;
  int v125;
  __int128 v126;
  uint64_t v127;
  void *__p;
  char *v129;
  void *v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;

  v5 = a1;
  v115 = operations_research::sat::BinaryImplicationGraph::DetectEquivalences(a1, 0);
  if (v115)
  {
    *((_QWORD *)v5 + 63) = 0;
    v130 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v131 = 0u;
    v132 = 0u;
    v133 = 0;
    std::vector<std::vector<int>>::vector(&__p, (uint64_t)(*((_QWORD *)v5 + 25) - *((_QWORD *)v5 + 24)) >> 5);
    v6 = a2[1];
    v7 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v6 - *a2));
    if (v6 == *a2)
      v8 = 0;
    else
      v8 = v7;
    std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,false>(*a2, v6, v8, 1);
    v10 = *a2;
    v9 = a2[1];
    if (v10 != v9)
    {
      v11 = 0;
      v122 = 0;
      v12 = 0;
      v116 = v5;
      v117 = a3;
      v118 = v9;
      while (1)
      {
        v14 = (char *)*v10;
        v13 = (char *)v10[1];
        v124 = (uint64_t)&v13[-*v10];
        if (v124)
        {
          v15 = *((_QWORD *)v5 + 71);
          v16 = (char *)*v10;
          do
          {
            v17 = *(_DWORD *)(v15 + 4 * *(int *)v16);
            if (v17 != -1)
              *(_DWORD *)v16 = v17;
            v16 += 4;
          }
          while (v16 != v13);
        }
        if ((v124 & 0x3FFFFFFFCLL) == 8)
        {
          v18 = *((_DWORD *)v14 + 1);
          if (*(_DWORD *)v14 != v18)
          {
            v19 = (uint64_t *)((char *)__p + 24 * *(int *)v14);
            v20 = *v19;
            v21 = v19[1];
            v22 = v21 - v20;
            if (v21 != v20)
            {
              v23 = 0;
              v24 = 0;
              v25 = 0;
              v26 = (uint64_t *)((char *)__p + 24 * v18);
              v27 = v22 >> 2;
              v28 = *v26;
              v29 = (v26[1] - *v26) >> 2;
              while (1)
              {
                if (v29 <= v24)
                  goto LABEL_26;
                v30 = *(_DWORD *)(v20 + 4 * v23);
                v31 = *(_DWORD *)(v28 + 4 * v24);
                v32 = v30 < v31;
                if (v30 == v31)
                  break;
                if (v30 >= v31)
                  v23 = v25;
                else
                  v23 = v25 + 1;
                if (!v32)
                  ++v24;
                v25 = v23;
                if (v27 <= v23)
                  goto LABEL_26;
              }
              ++v122;
              v10[1] = (uint64_t)v14;
              goto LABEL_8;
            }
          }
        }
LABEL_26:
        if (*((_QWORD *)v5 + 63) >= a3)
        {
          v34 = v124;
        }
        else
        {
          operations_research::sat::BinaryImplicationGraph::ExpandAtMostOne((uint64_t)v5, v14, v124 >> 2, (int **)&v126);
          v33 = (void *)*v10;
          if (*v10)
          {
            v10[1] = (uint64_t)v33;
            operator delete(v33);
            *v10 = 0;
            v10[1] = 0;
            v10[2] = 0;
          }
          *(_OWORD *)v10 = v126;
          v10[2] = v127;
          v14 = (char *)*v10;
          v13 = (char *)v10[1];
          v34 = (uint64_t)&v13[-*v10];
        }
        v35 = 126 - 2 * __clz(v34 >> 2);
        if (v13 == v14)
          v36 = 0;
        else
          v36 = v35;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>((int *)v14, v13, (uint64_t)&v126, v36, 1);
        v37 = *v10;
        v38 = (int *)v10[1];
        if ((int *)*v10 == v38)
        {
          v40 = 0;
        }
        else
        {
          v39 = 0;
          v40 = 0;
          v41 = (int *)*v10;
          do
          {
            v42 = *v41++;
            v43 = (v39 + 0x1F73E299748A907ELL + v42) ^ (v40 >> 43);
            v44 = (v39 - v43 - 0x1F73E299748A907ELL) ^ (v43 << 9);
            v45 = (v40 - v43 - v44) ^ (v44 >> 8);
            v46 = (v43 - v44 - v45) ^ (v45 >> 38);
            v47 = (v44 - v45 - v46) ^ (v46 << 23);
            v48 = (v45 - v46 - v47) ^ (v47 >> 5);
            v49 = (v46 - v47 - v48) ^ (v48 >> 35);
            v50 = (v47 - v48 - v49) ^ (v49 << 49);
            v51 = (v48 - v49 - v50) ^ (v50 >> 11);
            v52 = (v49 - v50 - v51) ^ (v51 >> 12);
            v40 = (v51 - v52 - ((v50 - v51 - v52) ^ (v52 << 18))) ^ (((v50 - v51 - v52) ^ (v52 << 18)) >> 22);
            v39 = -(uint64_t)v40;
          }
          while (v41 != v38);
        }
        v53 = 0;
        v54 = ((unint64_t)v130 >> 12) ^ (v40 >> 7);
        v55 = (char *)v38 - v37;
        while (1)
        {
          v56 = v54 & v132;
          v57 = *(_QWORD *)((char *)v130 + v56);
          for (i = ((v57 ^ (0x101010101010101 * (v40 & 0x7F))) - 0x101010101010101) & ~(v57 ^ (0x101010101010101
                                                                                                  * (v40 & 0x7F))) & 0x8080808080808080;
                i;
                i &= i - 1)
          {
            v59 = (char **)(v131 + 24 * ((v56 + (__clz(__rbit64(i)) >> 3)) & v132));
            v60 = *v59;
            v61 = v59[1];
            if ((char *)(v61 - v60) == v55)
            {
              if (v60 == v61)
              {
LABEL_7:
                ++v122;
                v10[1] = v37;
                goto LABEL_8;
              }
              v62 = (_DWORD *)*v10;
              while (*(_DWORD *)v60 == *v62)
              {
                v60 += 4;
                ++v62;
                if (v60 == v61)
                  goto LABEL_7;
              }
            }
          }
          if ((v57 & (~v57 << 6) & 0x8080808080808080) != 0)
            break;
          v53 += 8;
          v54 = v53 + v56;
        }
        v119 = v11;
        v120 = v12;
        v64 = (_QWORD *)(v131 + 24 * v63);
        v64[1] = 0;
        v65 = (char **)(v64 + 1);
        v64[2] = 0;
        *v64 = 0;
        v67 = (const void *)*v10;
        v66 = v10[1];
        v121 = v10;
        v68 = v66 - *v10;
        if (v66 == *v10)
        {
          v95 = *v10;
          v71 = (int *)*v10;
        }
        else
        {
          if (v68 < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v69 = (char *)operator new(v66 - (_QWORD)v67);
          *v64 = v69;
          *v65 = v69;
          v70 = &v69[4 * (v68 >> 2)];
          v64[2] = v70;
          memcpy(v69, v67, v68);
          *v65 = v70;
          v72 = (int *)*v10;
          v71 = (int *)v10[1];
          if ((int *)*v10 != v71)
          {
            v125 = DWORD2(v131);
            v123 = (int *)v10[1];
            while (1)
            {
              while (1)
              {
                v73 = (char *)__p + 24 * *v72;
                v75 = (uint64_t *)(v73 + 8);
                v74 = (char *)*((_QWORD *)v73 + 1);
                v76 = *((_QWORD *)v73 + 2);
                if ((unint64_t)v74 >= v76)
                  break;
                *(_DWORD *)v74 = v125;
                *v75 = (uint64_t)(v74 + 4);
                if (++v72 == v71)
                  goto LABEL_77;
              }
              v77 = *(char **)v73;
              v78 = (uint64_t)&v74[-*(_QWORD *)v73];
              v79 = v78 >> 2;
              v80 = (v78 >> 2) + 1;
              if (v80 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v81 = v76 - (_QWORD)v77;
              if (v81 >> 1 > v80)
                v80 = v81 >> 1;
              v82 = (unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v80;
              if (v82)
                break;
              v83 = 0;
              v84 = (_DWORD *)(4 * v79);
              *(_DWORD *)(4 * v79) = v125;
              v85 = 4 * v79 + 4;
              if (v74 != v77)
                goto LABEL_65;
LABEL_74:
              *(_QWORD *)v73 = v84;
              *v75 = v85;
              *((_QWORD *)v73 + 2) = &v83[4 * v82];
              if (v77)
                operator delete(v77);
              v71 = v123;
              *v75 = v85;
              if (++v72 == v123)
              {
LABEL_77:
                v10 = v121;
                v71 = (int *)*v121;
                v95 = v121[1];
                v5 = v116;
                a3 = v117;
                goto LABEL_80;
              }
            }
            if (v82 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v83 = operator new(4 * v82);
            v84 = &v83[4 * v79];
            *v84 = v125;
            v85 = (uint64_t)(v84 + 1);
            if (v74 == v77)
              goto LABEL_74;
LABEL_65:
            v86 = v74 - 4 - v77;
            if (v86 < 0x2C)
              goto LABEL_121;
            if ((unint64_t)(v74 - &v83[v78]) < 0x20)
              goto LABEL_121;
            v87 = (v86 >> 2) + 1;
            v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
            v89 = &v74[-v88];
            v84 = (_DWORD *)((char *)v84 - v88);
            v90 = &v83[4 * v79 - 16];
            v91 = v74 - 16;
            v92 = v87 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v93 = *(_OWORD *)v91;
              *(v90 - 1) = *((_OWORD *)v91 - 1);
              *v90 = v93;
              v90 -= 2;
              v91 -= 32;
              v92 -= 8;
            }
            while (v92);
            v74 = v89;
            if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_121:
              do
              {
                v94 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *--v84 = v94;
              }
              while (v74 != v77);
            }
            goto LABEL_74;
          }
          v95 = v10[1];
          v5 = v116;
          a3 = v117;
        }
LABEL_80:
        v11 = v119;
        if ((v95 - (uint64_t)v71) >> 2 > (unint64_t)(int)((unint64_t)v124 >> 2))
          v11 = v119 + 1;
        v12 = v120 + 1;
        v9 = v118;
LABEL_8:
        v10 += 3;
        if (v10 == v9)
          goto LABEL_85;
      }
    }
    v12 = 0;
    v122 = 0;
    v11 = 0;
LABEL_85:
    if ((v11 > 0 || v122 > 0 || v12 > 0)
      && *operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::vlocal__ >= 1
      && (operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/clause.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v126, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1567);
      v96 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v126);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"Clique Extended: ", 17);
      v97 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" Removed: ", 10);
      v98 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" Added: ", 8);
      v99 = (_QWORD *)std::ostream::operator<<();
      v100 = *((_QWORD *)v5 + 63);
      if (v100 <= a3)
        v101 = "";
      else
        v101 = " (Aborted)";
      if (v100 <= a3)
        v102 = 0;
      else
        v102 = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v101, v102);
      google::LogMessage::~LogMessage((google::LogMessage *)&v126);
    }
    v103 = (char *)__p;
    if (__p)
    {
      v104 = v129;
      v105 = __p;
      if (v129 != __p)
      {
        v106 = v129;
        do
        {
          v108 = (void *)*((_QWORD *)v106 - 3);
          v106 -= 24;
          v107 = v108;
          if (v108)
          {
            *((_QWORD *)v104 - 2) = v107;
            operator delete(v107);
          }
          v104 = v106;
        }
        while (v106 != v103);
        v105 = __p;
      }
      v129 = v103;
      operator delete(v105);
    }
    v109 = v132;
    if ((_QWORD)v132)
    {
      v110 = 0;
      v111 = 0;
      v112 = (char *)v130;
      do
      {
        if ((v112[v111] & 0x80000000) == 0)
        {
          v113 = *(void **)(v131 + v110);
          if (v113)
          {
            *(_QWORD *)(v131 + v110 + 8) = v113;
            operator delete(v113);
          }
        }
        ++v111;
        v110 += 24;
      }
      while (v109 != v111);
      operator delete(v112);
      v130 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v133 = 0;
      *(_QWORD *)&v132 = 0;
      v131 = 0uLL;
    }
    if (*((_QWORD *)&v132 + 1))
      absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v132 + 1));
  }
  return v115;
}

void sub_22DA4E4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void operations_research::sat::BinaryImplicationGraph::ExpandAtMostOne(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  size_t v6;
  int *v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int *v22;
  int *i;
  int v24;
  std::vector<int>::pointer begin;
  int *end;
  int v27;
  std::vector<int>::pointer v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int *v33;
  int *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  int *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  _OWORD *v47;
  int *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  std::vector<int> v52;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    v6 = 4 * a3;
    if (4 * a3 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (int *)operator new(4 * a3);
    v10 = (4 * a3) >> 2;
    *a4 = v9;
    v11 = &v9[v10];
    a4[2] = v11;
    memcpy(v9, a2, v6);
    a4[1] = v11;
    if (a2 != &a2[v6])
    {
      if (v10 <= 1)
        v12 = 1;
      else
        v12 = v10;
      do
      {
        v14 = *v9++;
        v13 = v14;
        if (*(_QWORD *)(*(_QWORD *)(a1 + 192) + 32 * v14) < 2uLL
          || ((*(_QWORD *)(*(_QWORD *)(a1 + 544) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
        {
          return;
        }
        --v12;
      }
      while (v12);
      v15 = 0;
      v16 = a1 + 320;
      v17 = -12;
      memset(&v52, 0, sizeof(v52));
      while (1)
      {
        operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(v16, (*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 5);
        operations_research::sat::BinaryImplicationGraph::MarkDescendants((_QWORD *)a1, (*a4)[v15]);
        if (v15)
        {
          v20 = *a4;
          v21 = *(_QWORD *)(a1 + 328);
        }
        else
        {
          if (&v52 != (std::vector<int> *)(a1 + 376))
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v52, *(char **)(a1 + 376), *(char **)(a1 + 384), (uint64_t)(*(_QWORD *)(a1 + 384) - *(_QWORD *)(a1 + 376)) >> 2);
          v20 = *a4;
          v22 = a4[1];
          v21 = *(_QWORD *)(a1 + 328);
          for (i = *a4;
                i != v22;
                *(_QWORD *)(v21 + (((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v24 & 0x3F ^ 1u)))
          {
            v24 = *i++;
          }
        }
        *(_QWORD *)(v21 + (((unint64_t)v20[v15] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v20[v15] & 0x3F ^ 1u));
        begin = v52.__begin_;
        end = v52.__end_;
        if (v52.__begin_ == v52.__end_)
        {
          v27 = 0;
        }
        else
        {
          v27 = 0;
          v28 = v52.__begin_;
          do
          {
            v29 = *v28;
            if (((*(_QWORD *)(v21 + (((unint64_t)v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
              begin[v27++] = v29;
            ++v28;
          }
          while (v28 != end);
        }
        v30 = v27;
        v31 = end - begin;
        if (v30 <= v31)
        {
          if (v30 < v31)
          {
            end = &begin[v30];
            v52.__end_ = end;
          }
        }
        else
        {
          std::vector<int>::__append(&v52, v30 - v31);
          begin = v52.__begin_;
          end = v52.__end_;
        }
        if (begin == end)
        {
LABEL_55:
          if (end)
          {
            v52.__end_ = end;
            operator delete(end);
          }
          return;
        }
        v32 = v15 + 1;
        v33 = *a4;
        v34 = a4[1];
        v19 = v34 - *a4;
        if (v19 == v15 + 1)
          break;
LABEL_14:
        v17 += 4;
        ++v15;
        if (v19 <= v32)
        {
          end = v52.__begin_;
          goto LABEL_55;
        }
      }
      v35 = *(end - 1) ^ 1;
      v36 = (unint64_t)a4[2];
      if ((unint64_t)v34 < v36)
      {
        *v34 = v35;
        v18 = (uint64_t)(v34 + 1);
      }
      else
      {
        v37 = v15 + 2;
        if ((unint64_t)(v15 + 2) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v38 = v36 - (_QWORD)v33;
        if (v38 >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          if (v39 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v40 = v39;
          v41 = operator new(4 * v39);
          v39 = v40;
          v42 = (int *)&v41[4 * v32];
          *v42 = v35;
          v18 = (uint64_t)(v42 + 1);
          if (v34 != v33)
          {
LABEL_43:
            v43 = (char *)(v34 - 1) - (char *)v33;
            if (v43 < 0x1C)
              goto LABEL_62;
            if ((unint64_t)((char *)(v34 - 1) - &v41[4 * v15]) < 0x20)
              goto LABEL_62;
            v44 = (v43 >> 2) + 1;
            v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
            v46 = &v34[v45 / 0xFFFFFFFFFFFFFFFCLL];
            v42 = (int *)((char *)v42 - v45);
            v47 = &v41[v17];
            v48 = v34 - 4;
            v49 = v44 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              *v47 = v50;
              v47 -= 2;
              v48 -= 8;
              v49 -= 8;
            }
            while (v49);
            v34 = v46;
            if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_62:
              do
              {
                v51 = *--v34;
                *--v42 = v51;
              }
              while (v34 != v33);
            }
            *a4 = v42;
            a4[1] = (int *)v18;
            a4[2] = (int *)&v41[4 * v39];
            if (!v33)
              goto LABEL_13;
            goto LABEL_53;
          }
        }
        else
        {
          v41 = 0;
          v42 = (int *)(4 * v32);
          *(_DWORD *)(4 * v32) = v35;
          v18 = 4 * v32 + 4;
          if (v34 != v33)
            goto LABEL_43;
        }
        *a4 = v42;
        a4[1] = (int *)v18;
        a4[2] = (int *)&v41[4 * v39];
        if (v33)
        {
LABEL_53:
          operator delete(v33);
          end = v52.__end_;
        }
      }
LABEL_13:
      a4[1] = (int *)v18;
      v52.__end_ = end - 1;
      v19 = (v18 - (uint64_t)*a4) >> 2;
      v16 = a1 + 320;
      goto LABEL_14;
    }
  }
}

void sub_22DA4E990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  if (__p)
    operator delete(__p);
  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<std::vector<operations_research::sat::Literal>,operations_research::sat::`anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::~flat_hash_set(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v4) & 0x80000000) == 0)
      {
        v6 = *(void **)(*v5 + v3);
        if (v6)
        {
          *(_QWORD *)(*v5 + v3 + 8) = v6;
          operator delete(v6);
          v2 = *(_QWORD *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 24;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v5 = 0;
  }
  v7 = *(_QWORD **)(a1 + 32);
  if (v7)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  return a1;
}

void **operations_research::sat::BinaryImplicationGraph::DirectImplications(_QWORD *a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v20;
  _QWORD *v22;
  int *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  int *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  _BYTE *v65;
  _DWORD *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  unint64_t v85;
  unint64_t v86;
  void **v87;
  _BYTE v88[16];

  v2 = a2;
  v3 = (unint64_t)a2 >> 6;
  v4 = 1 << a2;
  if ((*(_QWORD *)(a1[83] + 8 * v3) & (1 << a2)) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v88, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1648);
    v77 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Check failed: !is_removed_[literal.Index()] ", 44);
    goto LABEL_89;
  }
  v6 = a1;
  v7 = (char *)a1[74];
  v8 = (char *)a1[75];
  if (v7 != v8)
  {
    v9 = a1[80];
    v10 = (char *)a1[74];
    do
    {
      v11 = *(_DWORD *)v10;
      v10 += 4;
      *(_QWORD *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  a1[75] = v7;
  v12 = a1[16];
  if (((*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v3) >> (a2 & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v88, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1658);
    v78 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Check failed: !assignment.LiteralIsAssigned(literal) ", 53);
    goto LABEL_89;
  }
  v13 = (unint64_t *)(a1[24] + 32 * a2);
  v16 = *v13;
  v15 = v13 + 1;
  v14 = v16;
  if ((v16 & 1) != 0)
    v15 = (_QWORD *)*v15;
  v87 = (void **)(a1 + 74);
  if (v14 >= 2)
  {
    v22 = (_QWORD *)((char *)v15 + 4 * (v14 >> 1));
    while (1)
    {
      v52 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 == a2)
        goto LABEL_57;
      v53 = (unint64_t)v52 >> 6;
      if (((*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v53) >> (v52 & 0x3E)) & 3) != 0)
        goto LABEL_57;
      v54 = 1 << v52;
      if ((*(_QWORD *)(v6[83] + 8 * v53) & (1 << v52)) != 0)
        goto LABEL_57;
      v55 = v6[80];
      v56 = *(_QWORD *)(v55 + 8 * v53);
      if ((v56 & v54) != 0)
        goto LABEL_57;
      *(_QWORD *)(v55 + 8 * v53) = v56 | v54;
      v57 = v6[76];
      if ((unint64_t)v7 >= v57)
        break;
      *(_DWORD *)v7 = v52;
      v51 = (uint64_t)(v7 + 4);
LABEL_56:
      v6[75] = v51;
      v7 = (char *)v51;
LABEL_57:
      v15 = (_QWORD *)((char *)v15 + 4);
      if (v15 == v22)
        goto LABEL_9;
    }
    v58 = v2;
    v59 = (char *)*v87;
    v60 = v7 - (_BYTE *)*v87;
    v61 = v60 >> 2;
    v62 = (v60 >> 2) + 1;
    if (v62 >> 62)
LABEL_91:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v63 = v57 - (_QWORD)v59;
    if (v63 >> 1 > v62)
      v62 = v63 >> 1;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
      v62 = 0x3FFFFFFFFFFFFFFFLL;
    v86 = v3;
    v83 = v4;
    v80 = v62;
    if (v62)
    {
      if (v62 >> 62)
LABEL_92:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v64 = v7;
      v65 = operator new(4 * v62);
      v7 = v64;
      v66 = &v65[4 * v61];
      *v66 = v52;
      v51 = (uint64_t)(v66 + 1);
      if (v7 != v59)
      {
LABEL_71:
        v67 = v7 - 4 - v59;
        if (v67 < 0xBC
          || &v65[v60 - 4 - (v67 & 0xFFFFFFFFFFFFFFFCLL)] > &v65[v60 - 4]
          || &v7[-(v67 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
          || (unint64_t)(v7 - &v65[v60]) < 0x20)
        {
          v68 = v7;
          v2 = v58;
          v69 = v80;
        }
        else
        {
          v71 = (v67 >> 2) + 1;
          v72 = 4 * (v71 & 0x7FFFFFFFFFFFFFF8);
          v68 = &v7[-v72];
          v66 = (_DWORD *)((char *)v66 - v72);
          v73 = &v65[4 * v61 - 16];
          v74 = v7 - 16;
          v75 = v71 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v76 = *(_OWORD *)v74;
            *(v73 - 1) = *((_OWORD *)v74 - 1);
            *v73 = v76;
            v73 -= 2;
            v74 -= 32;
            v75 -= 8;
          }
          while (v75);
          v2 = v58;
          v69 = v80;
          if (v71 == (v71 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_74:
            v6 = a1;
            a1[74] = v66;
            a1[75] = v51;
            a1[76] = &v65[4 * v69];
            if (!v59)
            {
LABEL_76:
              v3 = v86;
              v4 = v83;
              goto LABEL_56;
            }
LABEL_75:
            operator delete(v59);
            goto LABEL_76;
          }
        }
        do
        {
          v70 = *((_DWORD *)v68 - 1);
          v68 -= 4;
          *--v66 = v70;
        }
        while (v68 != v59);
        goto LABEL_74;
      }
    }
    else
    {
      v65 = 0;
      v66 = (_DWORD *)(4 * v61);
      *(_DWORD *)(4 * v61) = v52;
      v51 = 4 * v61 + 4;
      if (v7 != v59)
        goto LABEL_71;
    }
    v2 = v58;
    v6 = a1;
    a1[74] = v66;
    a1[75] = v51;
    a1[76] = &v65[4 * v80];
    if (!v59)
      goto LABEL_76;
    goto LABEL_75;
  }
LABEL_9:
  v17 = v6[28];
  v81 = v2;
  if (a2 >= (int)((unint64_t)(v6[29] - v17) >> 5))
    goto LABEL_17;
  v18 = *(_QWORD *)(v17 + 32 * v2);
  if ((*(_QWORD *)(v6[68] + 8 * v3) & v4) != 0 && v18 >= 2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v88, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1669);
    v79 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Check failed: at_most_ones_[literal.Index()].empty() ", 53);
LABEL_89:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v88);
  }
  v20 = (int *)(v17 + 32 * v2 + 8);
  if ((v18 & 1) != 0)
    v20 = *(int **)v20;
  if (v18 >= 2)
  {
    v23 = &v20[v18 >> 1];
    v24 = v6[31];
    v82 = v23;
    do
    {
      for (i = *v20; ; ++i)
      {
        v27 = *(_DWORD *)(v24 + 4 * i);
        if (v27 == -1)
          break;
        if (v27 != a2)
        {
          v28 = (unint64_t)v27 >> 6;
          if (((*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v28) >> (v27 & 0x3E)) & 3) == 0
            && ((*(_QWORD *)(v6[83] + 8 * v28) >> v27) & 1) == 0)
          {
            v29 = v27 ^ 1;
            v30 = v6[80];
            v31 = *(_QWORD *)(v30 + 8 * v28);
            if ((v31 & (1 << v29)) == 0)
            {
              *(_QWORD *)(v30 + 8 * v28) = v31 | (1 << v29);
              v32 = v6[76];
              if ((unint64_t)v7 < v32)
              {
                *(_DWORD *)v7 = v29;
                v26 = (uint64_t)(v7 + 4);
              }
              else
              {
                v33 = (char *)*v87;
                v34 = v7 - (_BYTE *)*v87;
                v35 = v34 >> 2;
                v36 = (v34 >> 2) + 1;
                if (v36 >> 62)
                  goto LABEL_91;
                v37 = v32 - (_QWORD)v33;
                if (v37 >> 1 > v36)
                  v36 = v37 >> 1;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                  v36 = 0x3FFFFFFFFFFFFFFFLL;
                v85 = v36;
                if (v36)
                {
                  if (v36 >> 62)
                    goto LABEL_92;
                  v38 = v7;
                  v39 = operator new(4 * v36);
                  v7 = v38;
                  v40 = (int *)&v39[4 * v35];
                  *v40 = v29;
                  v26 = (uint64_t)(v40 + 1);
                  if (v7 != v33)
                  {
LABEL_39:
                    v41 = v7 - 4 - v33;
                    if (v41 < 0xBC
                      || &v39[v34 - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[v34 - 4]
                      || &v7[-(v41 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
                      || (unint64_t)(v7 - v39 - v34) < 0x20)
                    {
                      v42 = v7;
                      v6 = a1;
                      v43 = v85;
                    }
                    else
                    {
                      v45 = (v41 >> 2) + 1;
                      v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
                      v42 = &v7[-v46];
                      v40 = (int *)((char *)v40 - v46);
                      v47 = &v39[4 * v35 - 16];
                      v48 = v7 - 16;
                      v49 = v45 & 0x7FFFFFFFFFFFFFF8;
                      v6 = a1;
                      do
                      {
                        v50 = *(_OWORD *)v48;
                        *(v47 - 1) = *((_OWORD *)v48 - 1);
                        *v47 = v50;
                        v47 -= 2;
                        v48 -= 32;
                        v49 -= 8;
                      }
                      while (v49);
                      v43 = v85;
                      if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_42:
                        v6[74] = v40;
                        v6[75] = v26;
                        v6[76] = &v39[4 * v43];
                        if (v33)
                          goto LABEL_43;
                        goto LABEL_44;
                      }
                    }
                    do
                    {
                      v44 = *((_DWORD *)v42 - 1);
                      v42 -= 4;
                      *--v40 = v44;
                    }
                    while (v42 != v33);
                    goto LABEL_42;
                  }
                }
                else
                {
                  v39 = 0;
                  v40 = (int *)(4 * v35);
                  *(_DWORD *)(4 * v35) = v29;
                  v26 = 4 * v35 + 4;
                  if (v7 != v33)
                    goto LABEL_39;
                }
                v6 = a1;
                a1[74] = v40;
                a1[75] = v26;
                a1[76] = &v39[4 * v85];
                if (v33)
                {
LABEL_43:
                  operator delete(v33);
                  v24 = v6[31];
                }
LABEL_44:
                v23 = v82;
              }
              v6[75] = v26;
              v7 = (char *)v26;
              continue;
            }
          }
        }
      }
      ++v20;
    }
    while (v20 != v23);
  }
LABEL_17:
  *(_DWORD *)(v6[86] + 4 * v81) = (unint64_t)&v7[-v6[74]] >> 2;
  return v87;
}

void sub_22DA4F0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA4F0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DA4F100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BinaryImplicationGraph::FindFailedLiteralAroundVar(uint64_t a1, int a2, _BYTE *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  char **v10;
  int *v11;
  int *v12;
  unint64_t v13[2];
  uint64_t *v14;

  v6 = *(_DWORD *)(a1 + 36);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_DWORD *)(v7 + 12);
  LODWORD(v13[0]) = v6;
  LODWORD(v14) = v8;
  if (v6 != v8)
  {
    v14 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v13, (int)&v14, "propagation_trail_index_ == trail_->Index()");
    if (v14)
    {
      google::LogMessageFatal::LogMessageFatal(v13, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1692, &v14);
      google::LogMessage::stream((google::LogMessage *)v13);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v13);
    }
    v7 = *(_QWORD *)(a1 + 128);
  }
  if (((*(_QWORD *)(*(_QWORD *)(v7 + 24) + (((unint64_t)(2 * a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (a2 & 0x1Fu))) & 3) != 0)
    return 0;
  v10 = (char **)operations_research::sat::BinaryImplicationGraph::DirectImplications((_QWORD *)a1, (2 * a2) | 1u);
  if ((char **)(a1 + 616) != v10)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 616), *v10, v10[1], (v10[1] - *v10) >> 2);
  operations_research::sat::BinaryImplicationGraph::DirectImplications((_QWORD *)a1, 2 * a2);
  v11 = *(int **)(a1 + 616);
  v12 = *(int **)(a1 + 624);
  while (v11 != v12)
  {
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 640) + (((unint64_t)*v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v11) & 1) != 0
      && !operations_research::sat::BinaryImplicationGraph::FixLiteral(a1, *v11))
    {
      result = 0;
      *a3 = 1;
      return result;
    }
    ++v11;
  }
  return *(_DWORD *)(a1 + 36) > v6;
}

void sub_22DA4F2A4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::BinaryImplicationGraph::NumImplicationOnVariableRemoval(_QWORD *a1, int a2)
{
  int v3;
  char **v4;
  void **v5;
  int *v6;
  int *v7;
  void **v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE v13[16];

  v3 = 2 * a2;
  v4 = (char **)operations_research::sat::BinaryImplicationGraph::DirectImplications(a1, (2 * a2) | 1u);
  if (a1 + 77 != v4)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a1 + 77, *v4, v4[1], (v4[1] - *v4) >> 2);
  v5 = operations_research::sat::BinaryImplicationGraph::DirectImplications(a1, v3);
  v6 = (int *)a1[77];
  v7 = (int *)a1[78];
  if (v6 == v7)
    return 0;
  v8 = v5;
  result = 0;
  v10 = ((_BYTE *)v8[1] - (_BYTE *)*v8) >> 2;
  do
  {
    v11 = *(_QWORD *)(a1[80] + (((unint64_t)*v6 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v11 >> *v6) & 1) != 0)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1725);
      v12 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Check failed: !in_direct_implications_[l.Index()] ", 50);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v13);
    }
    result = result + v10 - ((v11 >> (*v6++ & 0x3F ^ 1u)) & 1);
  }
  while (v6 != v7);
  return result;
}

void sub_22DA4F3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void operations_research::sat::BinaryImplicationGraph::RemoveBooleanVariable(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  char **v6;
  void **v7;
  int *v8;
  int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v5 = (2 * a2);
  v6 = (char **)operations_research::sat::BinaryImplicationGraph::DirectImplications(a1, v5 | 1);
  if (a1 + 77 != v6)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a1 + 77, *v6, v6[1], (v6[1] - *v6) >> 2);
  v7 = operations_research::sat::BinaryImplicationGraph::DirectImplications(a1, v5);
  v8 = (int *)*v7;
  v9 = (int *)v7[1];
  v10 = (unsigned int *)a1[77];
  if (*v7 != v9)
  {
    if (v10 == (unsigned int *)a1[78])
    {
      v11 = a1[86];
      do
      {
        v12 = *v8++;
        --*(_DWORD *)(v11 + 4 * (v12 ^ 1));
      }
      while (v8 != v9);
    }
    else
    {
      do
      {
        v13 = *v8;
        --*(_DWORD *)(a1[86] + 4 * (*v8 ^ 1));
        v14 = (int *)a1[77];
        v15 = (int *)a1[78];
        while (v14 != v15)
        {
          if ((*v14 ^ 1) != v13)
            operations_research::sat::BinaryImplicationGraph::AddBinaryClause((uint64_t)a1, *v14, v13);
          ++v14;
        }
        ++v8;
      }
      while (v8 != v9);
      v10 = (unsigned int *)a1[77];
    }
  }
  v16 = (int *)a1[78];
  if (v10 != (unsigned int *)v16)
  {
    v17 = a1[86];
    v18 = (int *)v10;
    do
    {
      v19 = *v18++;
      --*(_DWORD *)(v17 + 4 * (v19 ^ 1));
    }
    while (v18 != v16);
  }
  v20 = (unsigned int *)a1[74];
  v21 = (unsigned int *)a1[75];
  if (v20 != v21)
  {
    do
    {
      v23 = *v20;
      v24 = a1[17];
      if (v24)
      {
        v51 = v5 | 1;
        v52 = v23;
        operations_research::sat::DratProofHandler::DeleteClause(v24, &v51, 2);
      }
      v25 = operator new(8uLL);
      v26 = a3[1];
      v28 = a3[2] - v26;
      v27 = a3[2] == v26;
      *v25 = v5 | 1 | (unint64_t)(v23 << 32);
      v29 = 170 * (v28 >> 3) - 1;
      if (v27)
        v30 = 0;
      else
        v30 = v29;
      v31 = a3[5] + a3[4];
      if (v30 == v31)
      {
        std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity((uint64_t)a3);
        v26 = a3[1];
        v31 = a3[5] + a3[4];
      }
      v22 = (_QWORD *)(*(_QWORD *)(v26 + 8 * (v31 / 0xAA)) + 24 * (v31 % 0xAA));
      v22[1] = 0;
      v22[2] = 0;
      *v22 = v25;
      *(int64x2_t *)(v22 + 1) = vdupq_n_s64((unint64_t)(v25 + 1));
      ++a3[5];
      ++v20;
    }
    while (v20 != v21);
    v10 = (unsigned int *)a1[77];
    v16 = (int *)a1[78];
  }
  for (; v10 != (unsigned int *)v16; ++v10)
  {
    v33 = *v10;
    v34 = a1[17];
    if (v34)
    {
      v51 = v5;
      v52 = v33;
      operations_research::sat::DratProofHandler::DeleteClause(v34, &v51, 2);
    }
    v35 = operator new(8uLL);
    v36 = a3[1];
    v37 = a3[2] - v36;
    v27 = a3[2] == v36;
    *v35 = v5 | (v33 << 32);
    v38 = 170 * (v37 >> 3) - 1;
    if (v27)
      v39 = 0;
    else
      v39 = v38;
    v40 = a3[5] + a3[4];
    if (v39 == v40)
    {
      std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity((uint64_t)a3);
      v36 = a3[1];
      v40 = a3[5] + a3[4];
    }
    v32 = (_QWORD *)(*(_QWORD *)(v36 + 8 * (v40 / 0xAA)) + 24 * (v40 % 0xAA));
    v32[1] = 0;
    v32[2] = 0;
    *v32 = v35;
    *(int64x2_t *)(v32 + 1) = vdupq_n_s64((unint64_t)(v35 + 1));
    ++a3[5];
  }
  v41 = a1[83];
  v42 = 8 * ((unint64_t)(int)v5 >> 6);
  v43 = 1 << (v5 & 0x3E);
  *(_QWORD *)(v41 + v42) |= v43;
  v44 = a1[68];
  v45 = *(_QWORD *)(v44 + v42);
  if ((v45 & v43) != 0)
  {
    v46 = a1[24] + 32 * (int)v5;
    v47 = (int)v5 | 1;
    if ((*(_BYTE *)v46 & 1) == 0)
      goto LABEL_42;
    goto LABEL_41;
  }
  ++a1[39];
  *(_QWORD *)(v44 + 8 * ((unint64_t)(int)v5 >> 6)) = v45 | v43;
  v46 = a1[24] + 32 * (int)v5;
  v47 = (int)v5 | 1;
  if ((*(_BYTE *)v46 & 1) != 0)
  {
LABEL_41:
    operator delete(*(void **)(v46 + 8));
    v41 = a1[83];
    v44 = a1[68];
  }
LABEL_42:
  *(_QWORD *)v46 = 0;
  v48 = 8 * (v47 >> 6);
  *(_QWORD *)(v41 + v48) |= 1 << v47;
  v49 = *(_QWORD *)(v44 + v48);
  if ((v49 & (1 << v47)) == 0)
  {
    ++a1[39];
    *(_QWORD *)(v44 + 8 * (v47 >> 6)) = v49 | (1 << v47);
    v50 = a1[24] + 32 * v47;
    if ((*(_BYTE *)v50 & 1) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
  v50 = a1[24] + 32 * v47;
  if ((*(_BYTE *)v50 & 1) != 0)
LABEL_44:
    operator delete(*(void **)(v50 + 8));
LABEL_45:
  *(_QWORD *)v50 = 0;
}

void sub_22DA4F818(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DA4F82C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::BinaryImplicationGraph::CleanupAllRemovedVariables(operations_research::sat::BinaryImplicationGraph *this)
{
  unint64_t *v1;
  unint64_t *v2;
  uint64_t v3;
  void **v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int *v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v1 = (unint64_t *)*((_QWORD *)this + 24);
  v2 = (unint64_t *)*((_QWORD *)this + 25);
  while (v1 != v2)
  {
    v4 = (void **)(v1 + 1);
    v3 = *v1 & 1;
    v5 = *v1 >> 1;
    if ((*v1 & 1) != 0)
    {
      if (*v1 < 2)
      {
        v7 = 0;
        v6 = 1;
        goto LABEL_22;
      }
      v9 = 0;
      v12 = (int *)*v4;
      v13 = *((_QWORD *)this + 83);
      v14 = 4 * v5;
      do
      {
        v15 = *v12;
        if (((*(_QWORD *)(v13 + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          *((_DWORD *)*v4 + v9++) = v15;
        ++v12;
        v14 -= 4;
      }
      while (v14);
    }
    else
    {
      if (*v1 < 2)
      {
        v6 = 1;
        v7 = 0;
        if (!v3)
          goto LABEL_20;
        goto LABEL_22;
      }
      v8 = 0;
      v9 = 0;
      v10 = *((_QWORD *)this + 83);
      do
      {
        v11 = *(_DWORD *)((char *)v1 + v8 + 8);
        if (((*(_QWORD *)(v10 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
          *((_DWORD *)v4 + v9++) = v11;
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
    v6 = 0;
    v7 = v9;
    if (!v3)
    {
LABEL_20:
      v16 = v1 + 1;
      v17 = 6;
      if (v7 <= 6)
        goto LABEL_3;
      goto LABEL_23;
    }
LABEL_22:
    v16 = (_QWORD *)v1[1];
    v17 = v1[2];
    if (v17 >= v7)
      goto LABEL_3;
LABEL_23:
    v18 = 2 * v17;
    if (v18 <= v7)
      v19 = v7;
    else
      v19 = v18;
    if (v19 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v20 = (char *)operator new(4 * v19);
    v21 = v20;
    if ((v6 & 1) != 0)
      goto LABEL_37;
    v22 = 0;
    if (v5 < 8 || (unint64_t)(v20 - (char *)v16) < 0x20)
    {
      v23 = (int *)v16;
LABEL_35:
      v28 = v5 - v22;
      v29 = &v20[4 * v22];
      do
      {
        v30 = *v23++;
        *(_DWORD *)v29 = v30;
        v29 += 4;
        --v28;
      }
      while (v28);
      goto LABEL_37;
    }
    v22 = v5 & 0x7FFFFFFFFFFFFFF8;
    v23 = (int *)v16 + (v5 & 0x7FFFFFFFFFFFFFF8);
    v24 = v20 + 16;
    v25 = (__int128 *)(v16 + 2);
    v26 = v5 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *v24 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 8;
    }
    while (v26);
    if (v5 != v22)
      goto LABEL_35;
LABEL_37:
    if (v3)
      operator delete(*v4);
    v1[1] = (unint64_t)v21;
    v1[2] = v19;
    v3 = 1;
LABEL_3:
    *v1 = v3 | (2 * v7);
    v1 += 4;
  }
  v32 = *((_QWORD *)this + 28);
  v31 = *((_QWORD *)this + 29);
  if (v31 != v32)
  {
    v33 = *((_QWORD *)this + 29);
    do
    {
      v34 = *(_BYTE *)(v33 - 32);
      v33 -= 32;
      if ((v34 & 1) != 0)
        operator delete(*(void **)(v31 - 24));
      v31 = v33;
    }
    while (v33 != v32);
  }
  *((_QWORD *)this + 29) = v32;
  return operations_research::sat::BinaryImplicationGraph::CleanUpAndAddAtMostOnes(this, 0);
}

uint64_t operations_research::sat::SatClause::RemoveFixedLiteralsAndTestIfTrue(int *a1, uint64_t a2)
{
  int v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;

  v2 = a1[1];
  v3 = v2 & 0xFE;
  v4 = 2 * (v2 >> 1);
  v5 = *(_QWORD *)(a2 + 8);
  if (((*(_QWORD *)(v5 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 & 0x3E)) & 3) != 0)
    return 1;
  if (((*(_QWORD *)(v5 + (((unint64_t)(2 * (a1[2] >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a1[2] & 0x3E)) & 3) != 0)
    return 1;
  v7 = *a1;
  if ((int)v7 < 3)
  {
    v9 = 2;
LABEL_11:
    *a1 = v9;
    return 0;
  }
  v8 = 0;
  while (((*(_QWORD *)(v5 + (((unint64_t)(2 * (a1[v8 + 3] >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a1[v8 + 3] & 0x3E)) & 3) == 0)
  {
    if (v7 - 2 == ++v8)
    {
      *a1 = v7;
      return 0;
    }
  }
  v9 = v8 + 2;
  if (v9 >= (int)v7)
    goto LABEL_11;
  v10 = v9;
  while (1)
  {
    v12 = (unsigned int *)&a1[v10];
    v13 = v12[1];
    if (((*(_QWORD *)(v5 + (((unint64_t)(2 * (v13 >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 & 0x3E)) & 3) != 0)
      break;
    v7 = (unint64_t)&a1[v9];
    v11 = *(_DWORD *)(v7 + 4);
    *(_DWORD *)(v7 + 4) = v13;
    v12[1] = v11;
    ++v9;
    LODWORD(v7) = *a1;
LABEL_15:
    if ((int)v7 <= (int)++v10)
      goto LABEL_11;
  }
  if (((*(_QWORD *)(v5 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
    goto LABEL_15;
  return 1;
}

void operations_research::sat::BinaryImplicationGraph::~BinaryImplicationGraph(operations_research::sat::BinaryImplicationGraph *this)
{
  operations_research::sat::BinaryImplicationGraph::~BinaryImplicationGraph(this);
  JUMPOUT(0x22E31DF78);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;

  *(_QWORD *)this = &off_24F981040;
  v2 = (void *)*((_QWORD *)this + 86);
  if (v2)
  {
    *((_QWORD *)this + 87) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 83);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 80);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 77);
  if (v5)
  {
    *((_QWORD *)this + 78) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 74);
  if (v6)
  {
    *((_QWORD *)this + 75) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 71);
  if (v7)
  {
    *((_QWORD *)this + 72) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 68);
  if (v8)
    operator delete(v8);
  v9 = (void *)*((_QWORD *)this + 65);
  if (v9)
  {
    *((_QWORD *)this + 66) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 60);
  if (v10)
  {
    *((_QWORD *)this + 61) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 57);
  if (v11)
  {
    *((_QWORD *)this + 58) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 51);
  if (v12)
  {
    *((_QWORD *)this + 52) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 47);
  if (v13)
  {
    *((_QWORD *)this + 48) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 41);
  if (v14)
  {
    *((_QWORD *)this + 42) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 31);
  if (v15)
  {
    *((_QWORD *)this + 32) = v15;
    operator delete(v15);
  }
  v16 = *((_QWORD *)this + 28);
  if (v16)
  {
    v17 = *((_QWORD *)this + 29);
    v18 = (void *)*((_QWORD *)this + 28);
    if (v17 != v16)
    {
      v19 = *((_QWORD *)this + 29);
      do
      {
        v20 = *(_BYTE *)(v19 - 32);
        v19 -= 32;
        if ((v20 & 1) != 0)
          operator delete(*(void **)(v17 - 24));
        v17 = v19;
      }
      while (v19 != v16);
      v18 = (void *)*((_QWORD *)this + 28);
    }
    *((_QWORD *)this + 29) = v16;
    operator delete(v18);
  }
  v21 = *((_QWORD *)this + 24);
  if (v21)
  {
    v22 = *((_QWORD *)this + 25);
    v23 = (void *)*((_QWORD *)this + 24);
    if (v22 != v21)
    {
      v24 = *((_QWORD *)this + 25);
      do
      {
        v25 = *(_BYTE *)(v24 - 32);
        v24 -= 32;
        if ((v25 & 1) != 0)
          operator delete(*(void **)(v22 - 24));
        v22 = v24;
      }
      while (v24 != v21);
      v23 = (void *)*((_QWORD *)this + 24);
    }
    *((_QWORD *)this + 25) = v21;
    operator delete(v23);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)this + 144);
  operations_research::StatsGroup::~StatsGroup((operations_research::sat::BinaryImplicationGraph *)((char *)this + 40));
  *(_QWORD *)this = off_24F980668;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void **gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  char v6;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (void **)a1[1];
      do
      {
        v6 = *((_BYTE *)v5 - 32);
        v5 -= 4;
        if ((v6 & 1) != 0)
          operator delete(*(v3 - 3));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::vector<operations_research::sat::Literal>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    *(_QWORD *)(a1 + 8) = &v5[4 * a2];
    return;
  }
  v6 = *(_BYTE **)a1;
  v7 = (uint64_t)&v5[-*(_QWORD *)a1];
  v8 = v7 >> 2;
  v9 = (v7 >> 2) + a2;
  if (v9 >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v10 = v4 - (_QWORD)v6;
  if (v10 >> 1 > v9)
    v9 = v10 >> 1;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
    v11 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(4 * v11);
    v13 = (uint64_t)&v12[4 * v8];
    v14 = &v12[4 * v11];
    v15 = v13 + 4 * a2;
    v16 = v5 - v6;
    if (v5 == v6)
      goto LABEL_20;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = 4 * v8;
  v14 = 0;
  v15 = 4 * v8 + 4 * a2;
  v16 = v5 - v6;
  if (v5 != v6)
  {
LABEL_14:
    v17 = v16 - 4;
    if (v17 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)(v5 - &v12[v7]) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v5[-v19];
    v13 -= v19;
    v21 = &v12[4 * v8 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 8;
    }
    while (v23);
    v5 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v25 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *(_DWORD *)(v13 - 4) = v25;
        v13 -= 4;
      }
      while (v5 != v6);
    }
  }
LABEL_20:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 16) = v14;
  if (v6)
    operator delete(v6);
}

operations_research::sat::BinaryImplicationGraph *operations_research::sat::BinaryImplicationGraph::BinaryImplicationGraph(operations_research::sat::BinaryImplicationGraph *this, operations_research::sat::Model *a2)
{
  operations_research::sat::Trail *v4;

  *((_BYTE *)this + 31) = 22;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  strcpy((char *)this + 40, "BinaryImplicationGraph");
  *(_QWORD *)this = &off_24F981040;
  strcpy((char *)this + 8, "BinaryImplicationGraph");
  *((_BYTE *)this + 63) = 22;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  *((_QWORD *)this + 15) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  v4 = (operations_research::sat::Trail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  *((_QWORD *)this + 16) = v4;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = (char *)this + 320;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_DWORD *)this + 90) = -1;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = (char *)this + 400;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 110) = -1;
  *(_OWORD *)((char *)this + 497) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_DWORD *)this + 178) = 0;
  operations_research::sat::Trail::RegisterPropagator(v4, this);
  return this;
}

void sub_22DA50194(_Unwind_Exception *a1)
{
  uint64_t v1;
  operations_research::StatsGroup *v2;
  uint64_t v3;
  void **v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;

  v10 = *(void **)(v1 + 688);
  if (v10)
  {
    *(_QWORD *)(v1 + 696) = v10;
    operator delete(v10);
    v11 = *(void **)(v1 + 664);
    if (!v11)
    {
LABEL_3:
      v12 = *(void **)(v1 + 640);
      if (!v12)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else
  {
    v11 = *(void **)(v1 + 664);
    if (!v11)
      goto LABEL_3;
  }
  operator delete(v11);
  v12 = *(void **)(v1 + 640);
  if (!v12)
  {
LABEL_4:
    v13 = *(void **)(v1 + 616);
    if (!v13)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v12);
  v13 = *(void **)(v1 + 616);
  if (!v13)
  {
LABEL_5:
    v14 = *(void **)(v1 + 592);
    if (!v14)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v1 + 624) = v13;
  operator delete(v13);
  v14 = *(void **)(v1 + 592);
  if (!v14)
  {
LABEL_6:
    v15 = *(void **)(v1 + 568);
    if (!v15)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v1 + 600) = v14;
  operator delete(v14);
  v15 = *(void **)(v1 + 568);
  if (!v15)
  {
LABEL_7:
    v16 = *(void **)(v1 + 544);
    if (!v16)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v1 + 576) = v15;
  operator delete(v15);
  v16 = *(void **)(v1 + 544);
  if (!v16)
  {
LABEL_8:
    v17 = *v8;
    if (!*v8)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v16);
  v17 = *v8;
  if (!*v8)
  {
LABEL_9:
    v18 = *(void **)(v1 + 480);
    if (!v18)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  *(_QWORD *)(v1 + 528) = v17;
  operator delete(v17);
  v18 = *(void **)(v1 + 480);
  if (!v18)
  {
LABEL_10:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v7);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v6);
    v19 = *(void **)(v1 + 248);
    if (!v19)
    {
LABEL_12:
      gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v5);
      gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>,std::allocator<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>>::~ITIVector(v4);
      std::deque<int>::~deque[abi:ne180100](v3);
      operations_research::StatsGroup::~StatsGroup(v2);
      v20 = *(char *)(v1 + 31);
      *(_QWORD *)v1 = off_24F980668;
      if (v20 < 0)
        operator delete(*(void **)(v1 + 8));
      _Unwind_Resume(a1);
    }
LABEL_11:
    *(_QWORD *)(v1 + 256) = v19;
    operator delete(v19);
    goto LABEL_12;
  }
LABEL_21:
  *(_QWORD *)(v1 + 488) = v18;
  operator delete(v18);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v7);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v6);
  v19 = *(void **)(v1 + 248);
  if (!v19)
    goto LABEL_12;
  goto LABEL_11;
}

_QWORD *operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t CurrentTimeNanos;
  _QWORD *v9;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v21;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d)
    return (_QWORD *)v4[5];
LABEL_12:
  CurrentTimeNanos = operator new();
  v9 = (_QWORD *)CurrentTimeNanos;
  *(_QWORD *)(CurrentTimeNanos + 24) = (uint64_t)(0.0001 * 1000000000.0);
  *(_DWORD *)(CurrentTimeNanos + 32) = 100;
  *(_QWORD *)(CurrentTimeNanos + 88) = 0;
  *(_OWORD *)(CurrentTimeNanos + 40) = 0u;
  *(_OWORD *)(CurrentTimeNanos + 56) = 0u;
  *(_BYTE *)(CurrentTimeNanos + 72) = 0;
  *(_QWORD *)(CurrentTimeNanos + 104) = 0x7FF0000000000000;
  *(_QWORD *)(CurrentTimeNanos + 112) = 0;
  *(_QWORD *)(CurrentTimeNanos + 120) = 0;
  *(_QWORD *)(CurrentTimeNanos + 128) = 0x7FF0000000000000;
  if (FLAGS_time_limit_use_usertime)
  {
    *(_BYTE *)(CurrentTimeNanos + 72) = 1;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
    v9[10] = CurrentTimeNanos;
    v9[12] = 0x7FF0000000000000;
  }
  v10 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
  *v9 = v10;
  v9[1] = v10;
  v9[2] = 0x7FFFFFFFFFFFFFFFLL;
  v11 = (_QWORD *)*v3;
  v12 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v12 = v11;
        v13 = v11[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d)
          break;
        v11 = (_QWORD *)*v12;
        v3 = v12;
        if (!*v12)
          goto LABEL_21;
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d)
        break;
      v11 = (_QWORD *)v12[1];
      if (!v11)
      {
        v3 = v12 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    v14 = v12;
    v12 = operator new(0x30uLL);
    v12[4] = &gtl::FastTypeId<operations_research::TimeLimit>(void)::d;
    v12[5] = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v3 = v12;
    v15 = **(_QWORD **)(a1 + 24);
    v16 = v12;
    if (v15)
    {
      *(_QWORD *)(a1 + 24) = v15;
      v16 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v16);
    ++*(_QWORD *)(a1 + 40);
  }
  v12[5] = v9;
  v17 = (_QWORD *)operator new();
  *v17 = &off_24F9810A8;
  v17[1] = v9;
  v21 = v17;
  v18 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v18 >= *(_QWORD *)(a1 + 64))
  {
    v19 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v21);
  }
  else
  {
    *v18 = v17;
    v19 = (char *)(v18 + 1);
  }
  *(_QWORD *)(a1 + 56) = v19;
  return v9;
}

void sub_22DA504F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1030C40021678CBLL);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::TimeLimit>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = &off_24F9810A8;
  a1[1] = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(_QWORD *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x22E31DF78](v2, 0x1030C40021678CBLL);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::TimeLimit>::~Delete(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &off_24F9810A8;
  a1[1] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 40);
    if (v2)
    {
      *(_QWORD *)(v1 + 48) = v2;
      operator delete(v2);
    }
    MEMORY[0x22E31DF78](v1, 0x1030C40021678CBLL);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::BinaryImplicationGraph>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9810E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::BinaryImplicationGraph>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9810E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

int **std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::LiteralWatchers::DeleteRemovedClauses(void)::$_0 &,std::__wrap_iter<operations_research::sat::SatClause **>,long,std::pair<operations_research::sat::SatClause **,long>>(int8x16_t *a1, int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int **v16;
  int **v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  int **v36;
  int **v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int **v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  char v61;
  uint64_t v62;

  v6 = (uint64_t *)a1;
  if (a3 == 3)
  {
    v9 = &a1->i8[8];
    v10 = (int *)a1->i64[1];
    if (*v10 < 1)
    {
      a1->i64[1] = (uint64_t)*a2;
      *a2 = v10;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
    }
    else
    {
      v11 = a1->i64[0];
      a1->i64[0] = (uint64_t)v10;
      a1->i64[1] = v11;
      a1->i64[1] = (uint64_t)*a2;
      *a2 = (int *)v11;
      return a2;
    }
    return (int **)v9;
  }
  if (a3 == 2)
  {
    v8 = a1->i64[0];
    a1->i64[0] = (uint64_t)*a2;
    *a2 = (int *)v8;
    return a2;
  }
  v13 = (uint64_t *)a4;
  if (a5 < a3)
  {
    if (a3 >= 0)
      v14 = a3;
    else
      v14 = a3 + 1;
    v15 = v14 >> 1;
    v16 = (int **)a1 + (v14 >> 1);
    v17 = v16 - 1;
    if (**(v16 - 1) <= 0)
    {
      v31 = 8 - 8 * v15;
      v32 = v15;
      while (v31)
      {
        v18 = v32 - 1;
        v33 = *(_DWORD *)a1[-1].i64[v32];
        v31 += 8;
        --v32;
        if (v33 >= 1)
        {
          v17 = (int **)((char *)a1 - v31);
          goto LABEL_31;
        }
      }
      v34 = (uint64_t *)a1;
      v35 = a3 - v15;
      if (**v16 >= 1)
        goto LABEL_32;
    }
    else
    {
      v18 = v14 >> 1;
LABEL_31:
      v34 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::LiteralWatchers::DeleteRemovedClauses(void)::$_0 &,std::__wrap_iter<operations_research::sat::SatClause **>,long,std::pair<operations_research::sat::SatClause **,long>>(a1, v17, v18, a4, a5);
      v35 = a3 - v15;
      if (**v16 >= 1)
      {
LABEL_32:
        v9 = (char *)(a2 + 1);
        v36 = (int **)&v6[v15 + 1];
        v37 = v16;
        while (v36 != a2)
        {
          --v35;
          v38 = *v36++;
          ++v37;
          if (*v38 <= 0)
            goto LABEL_38;
        }
LABEL_39:
        if (v34 != (uint64_t *)v16)
        {
          if (v16 == (int **)v9)
          {
            return (int **)v34;
          }
          else if (v34 + 1 == (uint64_t *)v16)
          {
            v46 = *v34;
            v47 = v9 - (char *)v16;
            memmove(v34, v16, v47);
            v9 = (char *)v34 + v47;
            *(_QWORD *)v9 = v46;
          }
          else if (v16 + 1 == (int **)v9)
          {
            v48 = v9 - 8;
            v49 = *((_QWORD *)v9 - 1);
            v9 = (char *)(v34 + 1);
            if (v48 != (char *)v34)
              memmove(v34 + 1, v34, v48 - (char *)v34);
            *v34 = v49;
          }
          else
          {
            v39 = ((char *)v16 - (char *)v34) >> 3;
            v40 = (v9 - (char *)v16) >> 3;
            if (v39 == v40)
            {
              v41 = (int **)(v34 + 1);
              v42 = (uint64_t)&v6[v15 + 1];
              do
              {
                v43 = (uint64_t)*(v41 - 1);
                *(v41 - 1) = *(int **)(v42 - 8);
                *(_QWORD *)(v42 - 8) = v43;
                if (v41 == v16)
                  break;
                ++v41;
                v44 = v42 == (_QWORD)v9;
                v42 += 8;
              }
              while (!v44);
              return v16;
            }
            else
            {
              v50 = (v9 - (char *)v16) >> 3;
              v51 = ((char *)v16 - (char *)v34) >> 3;
              do
              {
                v52 = v51;
                v51 = v50;
                v50 = v52 % v50;
              }
              while (v50);
              if (v51)
              {
                v53 = &v34[v51];
                do
                {
                  v55 = *--v53;
                  v54 = v55;
                  v56 = &v53[v39];
                  v57 = v53;
                  do
                  {
                    v58 = v56;
                    *v57 = *v56;
                    v59 = (v9 - (char *)v56) >> 3;
                    v60 = __OFSUB__(v39, v59);
                    v62 = v39 - v59;
                    v61 = (v62 < 0) ^ v60;
                    v56 = &v34[v62];
                    if (v61)
                      v56 = &v58[v39];
                    v57 = v58;
                  }
                  while (v56 != v53);
                  *v58 = v54;
                }
                while (v53 != v34);
              }
              return (int **)&v34[v40];
            }
          }
        }
        return (int **)v9;
      }
    }
    v37 = v16;
LABEL_38:
    v9 = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::LiteralWatchers::DeleteRemovedClauses(void)::$_0 &,std::__wrap_iter<operations_research::sat::SatClause **>,long,std::pair<operations_research::sat::SatClause **,long>>(v37, a2, v35, v13, a5);
    goto LABEL_39;
  }
  v9 = &a1->i8[8];
  *(_QWORD *)a4 = a1->i64[0];
  v19 = (uint64_t *)(a4 + 8);
  if (&a1->u64[1] == (unint64_t *)a2)
  {
    a1->i64[0] = (uint64_t)*a2;
    goto LABEL_18;
  }
  do
  {
    while (1)
    {
      v20 = *(_QWORD *)v9;
      if (**(int **)v9 >= 1)
        break;
      *v19++ = v20;
      v9 += 8;
      if (v9 == (char *)a2)
        goto LABEL_17;
    }
    *v6++ = v20;
    v9 += 8;
  }
  while (v9 != (char *)a2);
LABEL_17:
  *v6 = (uint64_t)*a2;
  v9 = (char *)(v6 + 1);
  if ((unint64_t)v19 > a4)
  {
LABEL_18:
    v21 = (uint64_t *)(a4 + 8);
    if ((unint64_t)v19 > a4 + 8)
      v21 = v19;
    v22 = (unint64_t)v21 + ~a4;
    if (v22 < 0x18)
    {
      v23 = v9;
    }
    else
    {
      v23 = v9;
      if ((unint64_t)&v9[-a4] >= 0x20)
      {
        v24 = 0;
        v25 = (v22 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = (uint64_t *)(a4 + v26);
        v23 = &v9[v26];
        v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = &v9[v24];
          v30 = *(_OWORD *)(a4 + v24 + 16);
          *(_OWORD *)v29 = *(_OWORD *)(a4 + v24);
          *((_OWORD *)v29 + 1) = v30;
          v24 += 32;
          v28 -= 4;
        }
        while (v28);
        v13 = v27;
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          return (int **)v9;
      }
    }
    do
    {
      v45 = *v13++;
      *(_QWORD *)v23 = v45;
      v23 += 8;
    }
    while (v13 < v19);
  }
  return (int **)v9;
}

void std::deque<operations_research::sat::Literal>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1[1];
  v5 = a1[2];
  if (v5 == v4)
    v6 = 0;
  else
    v6 = ((v5 - v4) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  v9 = v6 - v8;
  v10 = a2 > v9;
  v11 = a2 - v9;
  if (v10)
  {
    std::deque<operations_research::sat::Literal>::__add_back_capacity((uint64_t)a1, v11);
    v7 = a1[5];
    v4 = a1[1];
    v5 = a1[2];
    v8 = a1[4] + v7;
  }
  v12 = (_QWORD *)(v4 + 8 * (v8 >> 10));
  if (v5 == v4)
  {
    v13 = 0;
    if (!a2)
      return;
  }
  else
  {
    v13 = *v12 + 4 * (v8 & 0x3FF);
    if (!a2)
      return;
  }
  v14 = a2 + ((v13 - *v12) >> 2);
  if (v14 < 1)
  {
    v16 = 1023 - v14;
    LOWORD(v14) = ~(1023 - v14);
    v15 = &v12[-(v16 >> 10)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 10];
  }
  v17 = *v15 + 4 * (v14 & 0x3FF);
  if (v13 != v17)
  {
    while (v12 != v15)
    {
      v7 += (*v12 - v13 + 4096) >> 2;
      v18 = v12[1];
      ++v12;
      v13 = v18;
      if (v18 == v17)
      {
        a1[5] = v7;
        return;
      }
    }
    a1[5] = v7 + ((v17 - v13) >> 2);
  }
}

void std::deque<operations_research::sat::Literal>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x3FF) != 0)
    v6 = (v5 >> 10) + 1;
  else
    v6 = v5 >> 10;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 10)
    v8 = v7 >> 10;
  else
    v8 = v6;
  if (v6 <= v7 >> 10)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 10);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 1023;
        else
          v116 = 1024;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 10);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 10;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 10;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_22DA51474(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_22DA514C0()
{
  __cxa_end_catch();
  JUMPOUT(0x22DA514C8);
}

char *std::vector<operations_research::sat::Literal>::__insert_with_size[abi:ne180100]<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  int *v27;
  _DWORD *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  char *v53;
  size_t v54;
  int v55;
  char *v56;
  unint64_t v58;
  uint64_t v59;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  if (a5 < 1)
    return v8;
  v13 = a1[1];
  v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 2)
  {
    v14 = a5 + ((uint64_t)(v13 - v6) >> 2);
    if (v14 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = v12 - v6;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      v18 = (char *)operator new(4 * v16);
    }
    else
    {
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      v18 = 0;
    }
    v40 = 4 * a5;
    v59 = 4 * a5;
    v41 = &v18[4 * (v7 >> 2)];
    v42 = v18;
    memcpy(v41, __src, v40);
    v43 = v41;
    if ((void *)v6 != a2)
    {
      v44 = v17;
      v43 = v41;
      if ((unint64_t)(v7 - 4) < 0x3C)
        goto LABEL_51;
      v44 = v17;
      v43 = v41;
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v42[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
        goto LABEL_51;
      v45 = ((unint64_t)(v7 - 4) >> 2) + 1;
      v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
      v44 = &v17[-v46];
      v43 = &v41[-v46];
      v47 = 4 * (v7 >> 2) - 16;
      v48 = &v42[v47];
      v49 = (__int128 *)(v6 + v47);
      v50 = v45 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v51 = *v49;
        *((_OWORD *)v48 - 1) = *(v49 - 1);
        *(_OWORD *)v48 = v51;
        v48 -= 32;
        v49 -= 2;
        v50 -= 8;
      }
      while (v50);
      if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_51:
        do
        {
          v52 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v43 - 1) = v52;
          v43 -= 4;
        }
        while (v44 != (char *)v6);
      }
    }
    v53 = &v42[4 * v16];
    v54 = v13 - (_QWORD)v17;
    if (v54)
      memmove(&v41[v59], v17, v54);
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v41[v59 + v54];
    a1[2] = (unint64_t)v53;
    if (v6)
      operator delete((void *)v6);
    return v41;
  }
  v19 = v13 - (_QWORD)v8;
  v20 = (uint64_t)(v13 - (_QWORD)v8) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = a1[1];
  }
  else
  {
    v21 = &__src[4 * v20];
    v22 = a4 - v21;
    if (a4 != v21)
    {
      v58 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v20], a4 - v21);
      v8 = (char *)v58;
    }
    v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1)
      return v8;
  }
  v24 = &v8[4 * a5];
  v25 = v23 - (_QWORD)v24;
  v26 = (uint64_t)(v23 - (_QWORD)v24) >> 2;
  v27 = (int *)(v23 - 4 * a5);
  v28 = (_DWORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    v29 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v25;
    v30 = (char *)(v29 + v6);
    v31 = v29 + v6 + 4;
    if (v13 > v31)
      v31 = v13;
    v32 = v31 + ~v6 - v29;
    if (v32 < 0x2C)
    {
      v28 = (_DWORD *)v23;
    }
    else
    {
      v33 = v23 - (_QWORD)v30;
      v28 = (_DWORD *)v23;
      if (v33 >= 0x20)
      {
        v34 = (v32 >> 2) + 1;
        v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
        v27 = (int *)((char *)v27 + v35);
        v28 = (_DWORD *)(v23 + v35);
        v36 = (_OWORD *)(v23 + 16);
        v37 = (__int128 *)(4 * v26 + 4 * (v7 >> 2) + v6 + 16);
        v38 = v34 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v39 = *v37;
          *(v36 - 1) = *(v37 - 1);
          *v36 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 8;
        }
        while (v38);
        if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_41;
      }
    }
    do
    {
      v55 = *v27++;
      *v28++ = v55;
    }
    while ((unint64_t)v27 < v13);
  }
LABEL_41:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    v56 = v8;
    memmove((void *)(v23 - 4 * v26), v8, v25);
    v8 = v56;
  }
  if (v21 != __src)
  {
    v41 = v8;
    memmove(v8, __src, v21 - __src);
    return v41;
  }
  return v8;
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int *v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  int *v53;
  int *v54;
  int v55;
  int v56;
  int *v57;
  BOOL v58;
  int v59;
  int v60;
  int *v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int *v74;
  int *v75;
  int *v76;
  int v77;
  int *v78;
  int *v79;
  _DWORD *v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 2;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_DWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_DWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_DWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_DWORD *)a2 - 1) = v72;
            v91 = *v10;
            v90 = v10[1];
            if (v90 < *v10)
            {
              *v10 = v90;
              v10[1] = v91;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v98 = *((_DWORD *)a2 - 1);
            if (v98 >= v71)
              return result;
            v10[1] = v98;
          }
          else
          {
            *v10 = v73;
          }
          *((_DWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (int *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (int *)*v10;
        if ((int)v75 >= (int)v78)
        {
          if (v77 >= (int)v75)
          {
LABEL_144:
            LODWORD(v75) = v77;
            v92 = *((_DWORD *)a2 - 1);
            if (v92 >= (int)v75)
              return result;
LABEL_145:
            *v76 = v92;
            *((_DWORD *)a2 - 1) = (_DWORD)v75;
            v95 = *v76;
            v96 = *v74;
            if (v95 < v96)
            {
              v10[1] = v95;
              v10[2] = v96;
              v97 = *v10;
              if (v95 < *v10)
              {
                *v10 = v95;
                v10[1] = v97;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (int)v75;
          v79 = v10;
          v80 = v10 + 1;
          result = v75;
          if (v77 >= (int)v78)
          {
LABEL_136:
            v92 = *((_DWORD *)a2 - 1);
            if (v92 >= (int)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = v10 + 2;
          result = (int *)*v10;
          if (v77 >= (int)v75)
          {
            *v10 = (int)v75;
            v10[1] = (int)v78;
            v79 = v10 + 1;
            v80 = v10 + 2;
            result = v78;
            if (v77 >= (int)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = (_DWORD)v78;
        LODWORD(v75) = (_DWORD)result;
        goto LABEL_136;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(v10, v10 + 1, v10 + 2, v10 + 3, (int *)a2 - 1);
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != (int *)a2)
              return (int *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_DWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x201)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_DWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_DWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_DWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_DWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_DWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_DWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_DWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_DWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_DWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_DWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_DWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_DWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_DWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_DWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_DWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (int *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (int *)a2;
            if (v10 < (int *)a2)
            {
              v62 = (int *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (int *)v49)
                break;
              v51 = *((_DWORD *)v49 - 1);
              v49 -= 4;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_DWORD *)v49 - 1);
              v49 -= 4;
            }
            while (v50 >= v22);
          }
          if (v48 >= (int *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_DWORD *)v49;
            v53 = &v10[v46];
            v54 = (int *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (int *)v49)
            goto LABEL_77;
          v58 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *>(v10, v57);
          v10 = v57 + 1;
          result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *>(v57 + 1, (int *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (int *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 0;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (int *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(int *)((char *)v10 + v89 + 4) = v88;
                  if (!v89)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(int *)((char *)v10 + v89 - 4);
                  v89 -= 4;
                }
                while (v87 < v88);
                v86 = (int *)((char *)v10 + v89 + 4);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 4;
            }
            while (v85 + 1 != (int *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v94 = *v9;
            v93 = v9[1];
            v9 = (int *)v81;
            if (v93 < v94)
            {
              do
              {
                *(_DWORD *)v81 = v94;
                v94 = *((_DWORD *)v81 - 2);
                v81 -= 4;
              }
              while (v93 < v94);
              *(_DWORD *)v81 = v93;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (int *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *>(int *a1, int *a2)
{
  int v3;
  int *v4;
  int v5;
  int v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int *v22;
  int v23;
  uint64_t i;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::glop::ColIndex_tag_,int> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 12; ; i += 4)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

uint64_t std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64x2_t v20;
  __int128 v21;
  uint64_t v22;

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      v18 = a2;
      v19 = xmmword_22DCE8C60;
      v20 = vdupq_n_s64(2uLL);
      v21 = xmmword_22DCE8C70;
      v22 = -1;
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(&v18);
    }
    v7 = __clz(v5);
    v8 = 63;
    if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = 64;
    v9 = v8 - v7;
    v18 = a2;
    *(_QWORD *)&v19 = v9;
    v10 = (v8 - v7) >> 5;
    if ((v9 & 0x1F) != 0)
      v11 = v10 + 1;
    else
      v11 = v10;
    v12 = v9 / v11;
    *((_QWORD *)&v19 + 1) = v12;
    v20.i64[0] = v11;
    v13 = (-1 << (v9 / v11)) & 0x100000000;
    if (v12 >= 0x40)
      v13 = 0;
    *(_QWORD *)&v21 = v13;
    if ((v13 ^ 0x100000000) > v13 / v11)
    {
      v12 = v9 / ++v11;
      *((_QWORD *)&v19 + 1) = v12;
      v20.i64[0] = v11;
      if (v12 > 0x3F)
      {
        v20.i64[1] = v11 - (v9 % v11);
        *(_QWORD *)&v21 = 0;
        LODWORD(v12) = 64;
        goto LABEL_22;
      }
      *(_QWORD *)&v21 = (-1 << (v9 / v11)) & 0x100000000;
    }
    v20.i64[1] = v11 - v9 % v11;
    if (v12 < 0x3F)
    {
      *((_QWORD *)&v21 + 1) = 0x80000000uLL >> v12 << (v12 + 1);
      v14 = 0xFFFFFFFF >> -(char)v12;
      if (!v12)
        v14 = 0;
      LODWORD(v22) = v14;
      if (v12 >= 0x1F)
        v15 = -1;
      else
        v15 = 0xFFFFFFFF >> ~(_BYTE)v12;
      goto LABEL_23;
    }
LABEL_22:
    *((_QWORD *)&v21 + 1) = 0;
    v16 = -(int)v12;
    v15 = -1;
    LODWORD(v22) = 0xFFFFFFFF >> v16;
LABEL_23:
    HIDWORD(v22) = v15;
    do
      v17 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(&v18);
    while (v17 >= v5);
    return *a3 + v17;
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;

  v1 = a1[4];
  if (v1)
  {
    v2 = *a1;
    v3 = a1[5];
    v4 = a1[2];
    v5 = *(_QWORD *)(*a1 + 2496);
    if (v4 >= 0x40)
    {
      for (i = 0; i != v1; ++i)
      {
        do
        {
          v16 = 4 * v5;
          v17 = v5 + 397;
          v5 = (v5 + 1) % 0x270;
          v18 = *(_DWORD *)(v2 + 4 * (v17 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v16) = v18;
          v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
          v20 = (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
        }
        while (v3 <= v20);
      }
      v6 = (_DWORD)a1[7] & v20;
    }
    else
    {
      v6 = 0;
      for (j = 0; j != v1; ++j)
      {
        do
        {
          v8 = 4 * v5;
          v9 = v5 + 397;
          v5 = (v5 + 1) % 0x270;
          v10 = *(_DWORD *)(v2 + 4 * (v9 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v8) = v10;
          v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
          v12 = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
        }
        while (v3 <= v12);
        v6 = (v6 << v4) + ((_DWORD)a1[7] & v12);
      }
    }
    *(_QWORD *)(v2 + 2496) = v5;
    v13 = a1[3];
    if (v1 < v13)
      goto LABEL_14;
    return v6;
  }
  v6 = 0;
  v13 = a1[3];
  if (!v13)
    return v6;
LABEL_14:
  v21 = *a1;
  v22 = a1[6];
  v23 = a1[2];
  v24 = *(_QWORD *)(*a1 + 2496);
  if (v23 >= 0x3F)
  {
    do
    {
      do
      {
        v31 = 4 * v24;
        v32 = v24 + 397;
        v24 = (v24 + 1) % 0x270;
        v33 = *(_DWORD *)(v21 + 4 * (v32 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v31) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v31) = v33;
        v34 = ((v33 ^ (v33 >> 11)) << 7) & 0x9D2C5680 ^ v33 ^ (v33 >> 11);
        v35 = (v34 << 15) & 0xEFC60000 ^ v34 ^ (((v34 << 15) & 0xEFC60000 ^ v34) >> 18);
      }
      while (v22 <= v35);
      ++v1;
    }
    while (v1 != v13);
    v36 = *((_DWORD *)a1 + 15) & v35;
    *(_QWORD *)(v21 + 2496) = v24;
    return v36;
  }
  else
  {
    v25 = v23 + 1;
    do
    {
      do
      {
        v26 = 4 * v24;
        v27 = v24 + 397;
        v24 = (v24 + 1) % 0x270;
        v28 = *(_DWORD *)(v21 + 4 * (v27 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v26) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v26) = v28;
        v29 = ((v28 ^ (v28 >> 11)) << 7) & 0x9D2C5680 ^ v28 ^ (v28 >> 11);
        v30 = (v29 << 15) & 0xEFC60000 ^ v29 ^ (((v29 << 15) & 0xEFC60000 ^ v29) >> 18);
      }
      while (v22 <= v30);
      v6 = (v6 << v25) + (*((_DWORD *)a1 + 15) & v30);
      ++v1;
    }
    while (v1 != v13);
    *(_QWORD *)(v21 + 2496) = v24;
    return v6;
  }
}

uint64_t absl::lts_2020_02_25::InlinedVector<operations_research::sat::Literal,6ul,std::allocator<operations_research::sat::Literal>>::swap(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  _DWORD *v31;
  int v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  int *v36;
  int *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  unint64_t v51;
  __int128 v52;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if ((*(_QWORD *)result & 1) != 0)
    {
      v2 = *(_QWORD *)a2;
      v4 = result;
      v5 = a2;
      if ((v3 & 1) != 0)
      {
        v33 = *(_OWORD *)(result + 8);
        *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a2 + 8) = v33;
        goto LABEL_51;
      }
    }
    else
    {
      v4 = a2;
      v5 = result;
      if ((v3 & 1) == 0)
      {
        if (v2 >> 1 <= v3 >> 1)
          v6 = *(_QWORD *)a2;
        else
          v6 = *(_QWORD *)result;
        if (v2 >> 1 <= v3 >> 1)
          v7 = a2;
        else
          v7 = result;
        if (v2 >> 1 <= v3 >> 1)
          v8 = *(_QWORD *)result;
        else
          v8 = *(_QWORD *)a2;
        if (v2 >> 1 <= v3 >> 1)
          v9 = result;
        else
          v9 = a2;
        v10 = v8 >> 1;
        if (v8 >= 2)
        {
          if (v10 <= 1)
            v11 = 1;
          else
            v11 = v8 >> 1;
          if (v11 < 8
            || ((v12 = 4 * v11 + 8, v9 + 8 < (unint64_t)(v7 + v12))
              ? (v13 = v7 + 8 >= (unint64_t)(v9 + v12))
              : (v13 = 1),
                !v13))
          {
            v14 = 0;
LABEL_42:
            v34 = v11 - v14;
            v35 = 4 * v14 + 8;
            v36 = (int *)(v7 + v35);
            v37 = (int *)(v9 + v35);
            do
            {
              v38 = *v37;
              *v37++ = *v36;
              *v36++ = v38;
              --v34;
            }
            while (v34);
            goto LABEL_44;
          }
          v14 = v11 & 0x7FFFFFFFFFFFFFF8;
          v15 = (__int128 *)(v9 + 24);
          v16 = (__int128 *)(v7 + 24);
          v17 = v11 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v18 = *(v15 - 1);
            v19 = *v15;
            v20 = *v16;
            *(v15 - 1) = *(v16 - 1);
            *v15 = v20;
            *(v16 - 1) = v18;
            *v16 = v19;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          if (v11 != v14)
            goto LABEL_42;
        }
LABEL_44:
        v39 = v6 >> 1;
        v40 = (v6 >> 1) - v10;
        if (v6 >> 1 != v10)
        {
          v41 = (int *)(v7 + 4 * v10 + 8);
          if (v40 >= 0xC && (v42 = 4 * v10, 4 * v10 + v9 - (4 * v10 + v7) >= 0x20))
          {
            v43 = v40 & 0xFFFFFFFFFFFFFFF8;
            v41 += v40 & 0xFFFFFFFFFFFFFFF8;
            v48 = v42 + 24;
            v49 = (_OWORD *)(v9 + v42 + 24);
            v50 = (__int128 *)(v7 + v48);
            v51 = v40 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v52 = *v50;
              *(v49 - 1) = *(v50 - 1);
              *v49 = v52;
              v49 += 2;
              v50 += 2;
              v51 -= 8;
            }
            while (v51);
            if (v40 == v43)
              goto LABEL_51;
          }
          else
          {
            v43 = 0;
          }
          v44 = v43 + v10 - v39;
          v45 = (_DWORD *)(4 * v43 + 4 * v10 + v9 + 8);
          do
          {
            v46 = *v41++;
            *v45++ = v46;
            v13 = __CFADD__(v44++, 1);
          }
          while (!v13);
        }
LABEL_51:
        v47 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v47;
        return result;
      }
    }
    v21 = *(_QWORD *)(v4 + 8);
    v22 = *(_QWORD *)(v4 + 16);
    if (v2 >= 2)
    {
      v23 = 0;
      v24 = (int *)(v5 + 8);
      v25 = v2 >> 1;
      if (v2 < 0x10)
        goto LABEL_37;
      if ((unint64_t)(v4 - v5) < 0x20)
        goto LABEL_37;
      v23 = v25 & 0x7FFFFFFFFFFFFFF8;
      v24 += v25 & 0x7FFFFFFFFFFFFFF8;
      v26 = (_OWORD *)(v4 + 24);
      v27 = (__int128 *)(v5 + 24);
      v28 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 8;
      }
      while (v28);
      if (v25 != v23)
      {
LABEL_37:
        v30 = v25 - v23;
        v31 = (_DWORD *)(v4 + 4 * v23 + 8);
        do
        {
          v32 = *v24++;
          *v31++ = v32;
          --v30;
        }
        while (v30);
      }
    }
    *(_QWORD *)(v5 + 8) = v21;
    *(_QWORD *)(v5 + 16) = v22;
    goto LABEL_51;
  }
  return result;
}

void **operations_research::sat::SccGraph::operator[](uint64_t a1, int a2)
{
  int v2;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  unint64_t v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  _DWORD *v72;
  int v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  int *v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  int *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  _OWORD *v92;
  int *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  unint64_t v97;
  int *v98;
  int *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  int *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  _OWORD *v112;
  int *v113;
  uint64_t v114;
  __int128 v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  int v125;
  std::vector<int> *v126;
  int *v127;
  _QWORD *v128;
  unint64_t v129;
  int *v130;
  void **v131;
  _QWORD *v132;
  int v133;
  unint64_t v134[2];
  uint64_t *v135;

  v2 = a2;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  v131 = (void **)(a1 + 64);
  v4 = (unint64_t *)(**(_QWORD **)(a1 + 40) + 32 * a2);
  v7 = *v4;
  v6 = v4 + 1;
  v5 = v7;
  if ((v7 & 1) != 0)
    v6 = (_QWORD *)*v6;
  v129 = a2;
  if (v5 >= 2)
  {
    v132 = (_QWORD *)((char *)v6 + 4 * (v5 >> 1));
    while (1)
    {
      v15 = *(_DWORD *)v6;
      v17 = *(char **)(a1 + 72);
      v16 = *(_QWORD *)(a1 + 80);
      if ((unint64_t)v17 < v16)
      {
        *(_DWORD *)v17 = v15;
        v18 = (uint64_t)(v17 + 4);
        goto LABEL_34;
      }
      v19 = (char *)*v131;
      v20 = v17 - (_BYTE *)*v131;
      v21 = v20 >> 2;
      v22 = (v20 >> 2) + 1;
      if (v22 >> 62)
LABEL_140:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v23 = v16 - (_QWORD)v19;
      if (v23 >> 1 > v22)
        v22 = v23 >> 1;
      v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v22;
      if (v24)
        break;
      v25 = 0;
      v26 = (_DWORD *)(4 * v21);
      *(_DWORD *)(4 * v21) = v15;
      v18 = 4 * v21 + 4;
      if (v17 != v19)
        goto LABEL_26;
LABEL_32:
      *(_QWORD *)(a1 + 64) = v26;
      *(_QWORD *)(a1 + 72) = v18;
      *(_QWORD *)(a1 + 80) = &v25[4 * v24];
      if (v19)
        operator delete(v19);
LABEL_34:
      *(_QWORD *)(a1 + 72) = v18;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 4 * (v15 ^ 1)) - 1) > 0x7FFFFFFD)
        goto LABEL_12;
      v37 = *(char **)(a1 + 8);
      v36 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v37 >= v36)
      {
        v38 = *(int **)a1;
        v39 = (uint64_t)&v37[-*(_QWORD *)a1];
        v40 = v39 >> 2;
        v41 = (v39 >> 2) + 1;
        if (v41 >> 62)
LABEL_142:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v42 = v36 - (_QWORD)v38;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          if (v43 >> 62)
LABEL_141:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v44 = operator new(4 * v43);
          v45 = &v44[4 * v40];
          *v45 = v15;
          v14 = (uint64_t)(v45 + 1);
          if (v37 == (char *)v38)
            goto LABEL_53;
LABEL_47:
          v46 = v37 - 4 - (char *)v38;
          if (v46 < 0x2C)
            goto LABEL_145;
          if ((unint64_t)(v37 - &v44[v39]) < 0x20)
            goto LABEL_145;
          v47 = (v46 >> 2) + 1;
          v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
          v49 = &v37[-v48];
          v45 = (_DWORD *)((char *)v45 - v48);
          v50 = &v44[4 * v40 - 16];
          v51 = v37 - 16;
          v52 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v53 = *(_OWORD *)v51;
            *(v50 - 1) = *((_OWORD *)v51 - 1);
            *v50 = v53;
            v50 -= 2;
            v51 -= 32;
            v52 -= 8;
          }
          while (v52);
          v37 = v49;
          if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_145:
            do
            {
              v54 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *--v45 = v54;
            }
            while (v37 != (char *)v38);
          }
        }
        else
        {
          v44 = 0;
          v45 = (_DWORD *)(4 * v40);
          *(_DWORD *)(4 * v40) = v15;
          v14 = 4 * v40 + 4;
          if (v37 != (char *)v38)
            goto LABEL_47;
        }
LABEL_53:
        *(_QWORD *)a1 = v45;
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v44[4 * v43];
        if (v38)
          operator delete(v38);
        goto LABEL_11;
      }
      *(_DWORD *)v37 = v15;
      v14 = (uint64_t)(v37 + 4);
LABEL_11:
      *(_QWORD *)(a1 + 8) = v14;
LABEL_12:
      v6 = (_QWORD *)((char *)v6 + 4);
      if (v6 == v132)
        goto LABEL_4;
    }
    if (v24 >> 62)
      goto LABEL_141;
    v25 = operator new(4 * v24);
    v26 = &v25[4 * v21];
    *v26 = v15;
    v18 = (uint64_t)(v26 + 1);
    if (v17 == v19)
      goto LABEL_32;
LABEL_26:
    v27 = v17 - 4 - v19;
    if (v27 < 0x2C)
      goto LABEL_146;
    if ((unint64_t)(v17 - &v25[v20]) < 0x20)
      goto LABEL_146;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v17[-v29];
    v26 = (_DWORD *)((char *)v26 - v29);
    v31 = &v25[4 * v21 - 16];
    v32 = v17 - 16;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    v17 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_146:
      do
      {
        v35 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *--v26 = v35;
      }
      while (v17 != v19);
    }
    goto LABEL_32;
  }
LABEL_4:
  v8 = **(_QWORD **)(a1 + 48);
  if (v129 < (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - v8) >> 5)
  {
    v9 = (_QWORD *)(v8 + 32 * v129);
    v12 = *v9;
    v11 = (int *)(v9 + 1);
    v10 = v12;
    if ((v12 & 1) != 0)
      v11 = *(int **)v11;
    if (v10 >= 2)
    {
      v127 = &v11[v10 >> 1];
      v128 = (_QWORD *)(a1 + 88);
      v126 = (std::vector<int> *)(a1 + 112);
      v133 = v2;
      while (1)
      {
        v56 = *v11;
        if (*(_QWORD *)(a1 + 96) <= v56)
        {
          v57 = (int)v56 + 1;
          std::vector<BOOL>::resize((uint64_t)v128, v57, 0);
          v58 = *(_QWORD *)(a1 + 112);
          v59 = (*(_QWORD *)(a1 + 120) - v58) >> 2;
          if (v57 <= v59)
          {
            if (v57 < v59)
              *(_QWORD *)(a1 + 120) = v58 + 4 * v57;
          }
          else
          {
            std::vector<int>::__append(v126, v57 - v59);
          }
        }
        v60 = *(_QWORD *)(*v128 + 8 * (v56 >> 6));
        v130 = v11;
        if ((v60 & (1 << v56)) == 0)
        {
          *(_QWORD *)(*v128 + 8 * (v56 >> 6)) = v60 | (1 << v56);
LABEL_79:
          *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v56) = v2;
          v73 = *(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v56);
          while (2)
          {
            if (v73 == -1)
              goto LABEL_58;
            if (v73 == v2)
              goto LABEL_82;
            v75 = v73 ^ 1;
            v77 = *(int **)(a1 + 72);
            v76 = *(_QWORD *)(a1 + 80);
            if ((unint64_t)v77 < v76)
            {
              *v77 = v75;
              v78 = (uint64_t)(v77 + 1);
              goto LABEL_107;
            }
            v79 = (int *)*v131;
            v80 = (char *)v77 - (_BYTE *)*v131;
            v81 = v80 >> 2;
            v82 = (v80 >> 2) + 1;
            if (v82 >> 62)
              goto LABEL_140;
            v83 = v76 - (_QWORD)v79;
            if (v83 >> 1 > v82)
              v82 = v83 >> 1;
            if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
              v84 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v84 = v82;
            if (v84)
            {
              if (v84 >> 62)
                goto LABEL_141;
              v85 = operator new(4 * v84);
              v86 = (int *)&v85[4 * v81];
              *v86 = v75;
              v78 = (uint64_t)(v86 + 1);
              if (v77 != v79)
              {
LABEL_96:
                v87 = (char *)(v77 - 1) - (char *)v79;
                if (v87 < 0x2C)
                {
                  v2 = v133;
                  goto LABEL_104;
                }
                v88 = (char *)v77 - &v85[v80];
                v2 = v133;
                if (v88 < 0x20)
                  goto LABEL_147;
                v89 = (v87 >> 2) + 1;
                v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
                v91 = &v77[v90 / 0xFFFFFFFFFFFFFFFCLL];
                v86 = (int *)((char *)v86 - v90);
                v92 = &v85[4 * v81 - 16];
                v93 = v77 - 4;
                v94 = v89 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v95 = *(_OWORD *)v93;
                  *(v92 - 1) = *((_OWORD *)v93 - 1);
                  *v92 = v95;
                  v92 -= 2;
                  v93 -= 8;
                  v94 -= 8;
                }
                while (v94);
                v77 = v91;
                if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_147:
                  do
                  {
LABEL_104:
                    v96 = *--v77;
                    *--v86 = v96;
                  }
                  while (v77 != v79);
                }
LABEL_105:
                *(_QWORD *)(a1 + 64) = v86;
                *(_QWORD *)(a1 + 72) = v78;
                *(_QWORD *)(a1 + 80) = &v85[4 * v84];
                if (v79)
                  operator delete(v79);
LABEL_107:
                *(_QWORD *)(a1 + 72) = v78;
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 4 * v73) - 1) > 0x7FFFFFFD)
                  goto LABEL_82;
                v98 = *(int **)(a1 + 8);
                v97 = *(_QWORD *)(a1 + 16);
                if ((unint64_t)v98 < v97)
                {
                  *v98 = v75;
                  v74 = (uint64_t)(v98 + 1);
                  goto LABEL_81;
                }
                v99 = *(int **)a1;
                v100 = (uint64_t)v98 - *(_QWORD *)a1;
                v101 = v100 >> 2;
                v102 = (v100 >> 2) + 1;
                if (v102 >> 62)
                  goto LABEL_142;
                v103 = v97 - (_QWORD)v99;
                if (v103 >> 1 > v102)
                  v102 = v103 >> 1;
                if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
                  v104 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v104 = v102;
                if (v104)
                {
                  if (v104 >> 62)
                    goto LABEL_141;
                  v105 = operator new(4 * v104);
                  v106 = (int *)&v105[4 * v101];
                  *v106 = v75;
                  v74 = (uint64_t)(v106 + 1);
                  if (v98 != v99)
                  {
LABEL_118:
                    v107 = (char *)(v98 - 1) - (char *)v99;
                    if (v107 < 0x2C)
                    {
                      v2 = v133;
                      goto LABEL_126;
                    }
                    v108 = (char *)v98 - &v105[v100];
                    v2 = v133;
                    if (v108 < 0x20)
                      goto LABEL_148;
                    v109 = (v107 >> 2) + 1;
                    v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
                    v111 = &v98[v110 / 0xFFFFFFFFFFFFFFFCLL];
                    v106 = (int *)((char *)v106 - v110);
                    v112 = &v105[4 * v101 - 16];
                    v113 = v98 - 4;
                    v114 = v109 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v115 = *(_OWORD *)v113;
                      *(v112 - 1) = *((_OWORD *)v113 - 1);
                      *v112 = v115;
                      v112 -= 2;
                      v113 -= 8;
                      v114 -= 8;
                    }
                    while (v114);
                    v98 = v111;
                    if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_148:
                      do
                      {
LABEL_126:
                        v116 = *--v98;
                        *--v106 = v116;
                      }
                      while (v98 != v99);
                    }
LABEL_127:
                    *(_QWORD *)a1 = v106;
                    *(_QWORD *)(a1 + 8) = v74;
                    *(_QWORD *)(a1 + 16) = &v105[4 * v104];
                    if (v99)
                      operator delete(v99);
LABEL_81:
                    *(_QWORD *)(a1 + 8) = v74;
LABEL_82:
                    ++v56;
                    v73 = *(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v56);
                    continue;
                  }
                }
                else
                {
                  v105 = 0;
                  v106 = (int *)(4 * v101);
                  *(_DWORD *)(4 * v101) = v75;
                  v74 = 4 * v101 + 4;
                  if (v98 != v99)
                    goto LABEL_118;
                }
                v2 = v133;
                goto LABEL_127;
              }
            }
            else
            {
              v85 = 0;
              v86 = (int *)(4 * v81);
              *(_DWORD *)(4 * v81) = v75;
              v78 = 4 * v81 + 4;
              if (v77 != v79)
                goto LABEL_96;
            }
            break;
          }
          v2 = v133;
          goto LABEL_105;
        }
        v61 = v126->__begin_[v56];
        LODWORD(v134[0]) = v2;
        LODWORD(v135) = v61;
        if ((_DWORD)v61 == v2)
        {
          v135 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v134, (int)&v135, "node != first_node");
          if (v135)
          {
            google::LogMessageFatal::LogMessageFatal(v134, (google::glog_internal_namespace_ *)"./ortools/sat/clause.cc", 1057, &v135);
            google::LogMessage::stream((google::LogMessage *)v134);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v134);
          }
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) + 4 * v61) - 1) < 0x7FFFFFFE)
          goto LABEL_79;
        v62 = v61 ^ 1;
        v64 = *(char **)(a1 + 72);
        v63 = *(_QWORD *)(a1 + 80);
        if ((unint64_t)v64 < v63)
        {
          *(_DWORD *)v64 = v62;
          v55 = (uint64_t)(v64 + 4);
          goto LABEL_57;
        }
        v65 = (char *)*v131;
        v66 = v64 - (_BYTE *)*v131;
        v67 = v66 >> 2;
        v68 = (v66 >> 2) + 1;
        if (v68 >> 62)
          goto LABEL_140;
        v69 = v63 - (_QWORD)v65;
        if (v69 >> 1 > v68)
          v68 = v69 >> 1;
        v70 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v68;
        if (v70)
          break;
        v71 = 0;
        v72 = (_DWORD *)(4 * v67);
        *(_DWORD *)(4 * v67) = v62;
        v55 = 4 * v67 + 4;
        if (v64 != v65)
          goto LABEL_130;
LABEL_136:
        *(_QWORD *)(a1 + 64) = v72;
        *(_QWORD *)(a1 + 72) = v55;
        *(_QWORD *)(a1 + 80) = &v71[4 * v70];
        if (v65)
          operator delete(v65);
LABEL_57:
        *(_QWORD *)(a1 + 72) = v55;
LABEL_58:
        v11 = v130 + 1;
        if (v130 + 1 == v127)
          goto LABEL_8;
      }
      if (v70 >> 62)
        goto LABEL_141;
      v71 = operator new(4 * v70);
      v72 = &v71[4 * v67];
      *v72 = v62;
      v55 = (uint64_t)(v72 + 1);
      if (v64 == v65)
        goto LABEL_136;
LABEL_130:
      v117 = v64 - 4 - v65;
      if (v117 < 0x2C)
        goto LABEL_149;
      if ((unint64_t)(v64 - &v71[v66]) < 0x20)
        goto LABEL_149;
      v118 = (v117 >> 2) + 1;
      v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
      v120 = &v64[-v119];
      v72 = (_DWORD *)((char *)v72 - v119);
      v121 = &v71[4 * v67 - 16];
      v122 = v64 - 16;
      v123 = v118 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v124 = *(_OWORD *)v122;
        *(v121 - 1) = *((_OWORD *)v122 - 1);
        *v121 = v124;
        v121 -= 2;
        v122 -= 32;
        v123 -= 8;
      }
      while (v123);
      v64 = v120;
      if (v118 != (v118 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_149:
        do
        {
          v125 = *((_DWORD *)v64 - 1);
          v64 -= 4;
          *--v72 = v125;
        }
        while (v64 != v65);
      }
      goto LABEL_136;
    }
  }
LABEL_8:
  *(_QWORD *)(a1 + 24) += (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2;
  return v131;
}

void sub_22DA532A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

char *std::vector<std::vector<int>>::__emplace_back_slow_path<int *,int *>(char **a1, const void **a2, const void **a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  char **v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  char *v28;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v6];
  v13 = &v11[24 * v10];
  v14 = *a2;
  *((_QWORD *)v12 + 1) = 0;
  v15 = (char **)(v12 + 8);
  v16 = *a3;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = 0;
  v17 = v16 - v14;
  if (v16 != v14)
  {
    if (v17 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v16 - v14);
    *(_QWORD *)v12 = v18;
    *v15 = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *((_QWORD *)v12 + 2) = v19;
    memcpy(v18, v14, v17);
    *v15 = v19;
  }
  v20 = v12 + 24;
  v28 = v12 + 24;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v20;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v21 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v22 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v12 - 24) = v22;
      v12 -= 24;
      *((_QWORD *)v21 - 1) = *((_QWORD *)v4 + 2);
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
    }
    while (v4 != v5);
    v23 = *a1;
    v4 = a1[1];
    v20 = v28;
    *a1 = v12;
    a1[1] = v28;
    a1[2] = v13;
    if (v4 != v23)
    {
      v24 = v4;
      do
      {
        v26 = (void *)*((_QWORD *)v24 - 3);
        v24 -= 24;
        v25 = v26;
        if (v26)
        {
          *((_QWORD *)v4 - 2) = v25;
          operator delete(v25);
        }
        v4 = v24;
      }
      while (v24 != v23);
      v4 = v23;
    }
  }
  if (v4)
    operator delete(v4);
  return v20;
}

void sub_22DA534A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *j;
  BOOL v36;
  _BYTE *v37;
  uint64_t *v38;
  _BYTE *v39;
  int64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  const void *v45;
  uint64_t *v46;
  int64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  _BYTE *v56;
  _BYTE *v57;
  int64_t v58;
  char *v59;
  char *v60;
  _BOOL4 v61;
  _BYTE *v62;
  _BYTE *v63;
  int64_t v64;
  char *v65;
  char *v66;
  void *v67;
  uint64_t *v68;
  uint64_t *v69;
  BOOL v70;
  uint64_t v71;
  const void *v72;
  __int128 v73;
  const void *v74;
  size_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  size_t v81;
  BOOL v82;
  BOOL v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  size_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t *v97;
  BOOL v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL4 v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  int64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  size_t v134;
  _BOOL4 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  int64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t *v145;
  const void *v146;
  uint64_t v147;
  int64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  size_t v154;
  _BOOL4 v155;
  uint64_t v156;
  const void *v157;
  int64_t v158;
  char *v159;
  char *v160;
  uint64_t *v161;
  uint64_t v162;
  unint64_t v163;
  BOOL v164;
  void *v165;
  uint64_t v166;
  __int128 v167;
  _BOOL4 v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  const void *v173;
  uint64_t v174;
  int64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  size_t v181;
  _BOOL4 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const void *v186;
  int64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  const void *v204;
  uint64_t v205;
  int64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  size_t v212;
  _BOOL4 v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  const void *v223;
  int64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  _BOOL4 v229;
  void *v230;
  const void *v231;
  __int128 v232;
  size_t v233;
  BOOL v234;
  uint64_t *v235;
  uint64_t v236;
  const void *v237;
  int64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t *v243;
  _BYTE *v244;
  _BYTE *v245;
  int64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  size_t v250;
  _BOOL4 v251;
  _BYTE *v252;
  _BYTE *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  void *v260;
  uint64_t i;
  char *v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t *v268;
  _BYTE *v269;
  _BYTE *v270;
  int64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  size_t v275;
  _BOOL4 v276;
  const void *v277;
  __int128 v278;
  size_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  size_t v287;
  void *v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t *v291;
  unint64_t v292;
  __int128 v294;
  uint64_t *v295;
  int64_t v296;
  uint64_t *v297;
  unint64_t v298;
  uint64_t *__sz;
  size_t __sza;
  uint64_t __szb;
  size_t __szc[2];
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  const void *v308;
  __int128 v309;
  int64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  __int128 v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;

void sub_22DA55420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  void *v45;
  void *v46;
  uint64_t v47;
  void *v49;

  v49 = *(void **)(v47 - 136);
  if (v49)
  {
    *(_QWORD *)(v47 - 128) = v49;
    operator delete(v49);
  }
  if (v46)
  {
    *(_QWORD *)(v47 - 104) = v46;
    operator delete(v46);
    if (!v45)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v45)
  {
    goto LABEL_8;
  }
  operator delete(v45);
  goto LABEL_8;
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  int64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  int64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(a1, a2, a3, a4);
  v11 = (const void *)*a5;
  v10 = a5[1];
  v12 = v10 - *a5;
  if (v10 == *a5)
  {
    v14 = 0;
    v13 = 0;
    v54 = a4[1];
    v16 = v54 - *a4;
    if (v54 != *a4)
      goto LABEL_4;
  }
  else
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - *a5);
    v14 = &v13[4 * (v12 >> 2)];
    memcpy(v13, v11, v12);
    v15 = a4[1];
    v16 = v15 - *a4;
    if (v15 != *a4)
    {
LABEL_4:
      if ((v16 & 0x8000000000000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v58 = operator new(v16);
      v17 = v14 - v13 > v16;
      operator delete(v58);
      if (v13)
        goto LABEL_6;
      goto LABEL_7;
    }
  }
  v17 = v14 != v13;
  if (v13)
LABEL_6:
    operator delete(v13);
LABEL_7:
  if (!v17)
    return;
  v18 = *a4;
  *a4 = *a5;
  *a5 = v18;
  v19 = a4[1];
  a4[1] = a5[1];
  a5[1] = v19;
  v20 = a4[2];
  a4[2] = a5[2];
  a5[2] = v20;
  v22 = (const void *)*a4;
  v21 = a4[1];
  v23 = v21 - *a4;
  if (v21 == *a4)
  {
    v25 = 0;
    v24 = 0;
    v55 = a3[1];
    v27 = v55 - *a3;
    if (v55 != *a3)
      goto LABEL_11;
  }
  else
  {
    if (v23 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v24 = (char *)operator new(v21 - *a4);
    v25 = &v24[4 * (v23 >> 2)];
    memcpy(v24, v22, v23);
    v26 = a3[1];
    v27 = v26 - *a3;
    if (v26 != *a3)
    {
LABEL_11:
      if ((v27 & 0x8000000000000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v28 = v25 - v24 > v27;
      if (v24)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  v28 = v25 != v24;
  if (v24)
LABEL_13:
    operator delete(v24);
LABEL_14:
  if (!v28)
    return;
  v29 = *a3;
  *a3 = *a4;
  *a4 = v29;
  v30 = a3[1];
  a3[1] = a4[1];
  a4[1] = v30;
  v31 = a3[2];
  a3[2] = a4[2];
  a4[2] = v31;
  v33 = (const void *)*a3;
  v32 = a3[1];
  v34 = v32 - *a3;
  if (v32 == *a3)
  {
    v36 = 0;
    v35 = 0;
    v56 = a2[1];
    v38 = v56 - *a2;
    if (v56 != *a2)
      goto LABEL_18;
  }
  else
  {
    if (v34 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v35 = (char *)operator new(v32 - *a3);
    v36 = &v35[4 * (v34 >> 2)];
    memcpy(v35, v33, v34);
    v37 = a2[1];
    v38 = v37 - *a2;
    if (v37 != *a2)
    {
LABEL_18:
      if ((v38 & 0x8000000000000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v39 = v36 - v35 > v38;
      if (v35)
        goto LABEL_20;
      goto LABEL_21;
    }
  }
  v39 = v36 != v35;
  if (v35)
LABEL_20:
    operator delete(v35);
LABEL_21:
  if (!v39)
    return;
  v40 = *a2;
  *a2 = *a3;
  *a3 = v40;
  v41 = a2[1];
  a2[1] = a3[1];
  a3[1] = v41;
  v42 = a2[2];
  a2[2] = a3[2];
  a3[2] = v42;
  v44 = (const void *)*a2;
  v43 = a2[1];
  v45 = v43 - *a2;
  if (v43 == *a2)
  {
    v47 = 0;
    v46 = 0;
    v57 = a1[1];
    v49 = v57 - *a1;
    if (v57 != *a1)
      goto LABEL_25;
  }
  else
  {
    if (v45 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v46 = (char *)operator new(v43 - *a2);
    v47 = &v46[4 * (v45 >> 2)];
    memcpy(v46, v44, v45);
    v48 = a1[1];
    v49 = v48 - *a1;
    if (v48 != *a1)
    {
LABEL_25:
      if ((v49 & 0x8000000000000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v50 = v47 - v46 > v49;
      if (!v46)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  v50 = v47 != v46;
  if (v46)
LABEL_27:
    operator delete(v46);
LABEL_28:
  if (v50)
  {
    v51 = *a1;
    *a1 = *a2;
    *a2 = v51;
    v52 = a1[1];
    a1[1] = a2[1];
    a2[1] = v52;
    v53 = a1[2];
    a1[2] = a2[2];
    a2[2] = v53;
  }
}

void sub_22DA55E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;

  if (__p)
    operator delete(__p);
  if (v25)
    operator delete(v25);
  _Unwind_Resume(exception_object);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  uint64_t v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  const void *v38;
  int64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;

  v7 = (const void *)*a2;
  v6 = a2[1];
  v8 = v6 - *a2;
  if (v6 == *a2)
  {
    v10 = 0;
    v9 = 0;
    v47 = a1[1];
    v12 = v47 - *a1;
    if (v47 != *a1)
      goto LABEL_4;
  }
  else
  {
    if (v8 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - *a2);
    v10 = &v9[4 * (v8 >> 2)];
    memcpy(v9, v7, v8);
    v11 = a1[1];
    v12 = v11 - *a1;
    if (v11 != *a1)
    {
LABEL_4:
      if ((v12 & 0x8000000000000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v64 = operator new(v12);
      v13 = v10 - v9 > v12;
      operator delete(v64);
      if (v9)
        goto LABEL_6;
      goto LABEL_7;
    }
  }
  v13 = v10 != v9;
  if (v9)
LABEL_6:
    operator delete(v9);
LABEL_7:
  if (!v13)
  {
    v26 = (const void *)*a3;
    v25 = a3[1];
    v27 = v25 - *a3;
    if (v25 == *a3)
    {
      v29 = 0;
      v28 = 0;
      v61 = a2[1];
      v31 = v61 - *a2;
      if (v61 != *a2)
        goto LABEL_19;
    }
    else
    {
      if (v27 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v28 = (char *)operator new(v25 - *a3);
      v29 = &v28[4 * (v27 >> 2)];
      memcpy(v28, v26, v27);
      v30 = a2[1];
      v31 = v30 - *a2;
      if (v30 != *a2)
      {
LABEL_19:
        if ((v31 & 0x8000000000000000) != 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v32 = v29 - v28 > v31;
        if (v28)
          goto LABEL_21;
        goto LABEL_22;
      }
    }
    v32 = v29 != v28;
    if (v28)
LABEL_21:
      operator delete(v28);
LABEL_22:
    if (!v32)
      return;
    v33 = *a2;
    *a2 = *a3;
    *a3 = v33;
    v34 = a2[1];
    a2[1] = a3[1];
    a3[1] = v34;
    v36 = a2 + 2;
    v35 = a2[2];
    a2[2] = a3[2];
    a3[2] = v35;
    v38 = (const void *)*a2;
    v37 = a2[1];
    v39 = v37 - *a2;
    if (v37 == *a2)
    {
      v41 = 0;
      v40 = 0;
      v62 = a1[1];
      v43 = v62 - *a1;
      if (v62 != *a1)
        goto LABEL_26;
    }
    else
    {
      if (v39 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v40 = (char *)operator new(v37 - *a2);
      v41 = &v40[4 * (v39 >> 2)];
      memcpy(v40, v38, v39);
      v42 = a1[1];
      v43 = v42 - *a1;
      if (v42 != *a1)
      {
LABEL_26:
        if ((v43 & 0x8000000000000000) != 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v44 = v41 - v40 > v43;
        if (!v40)
          goto LABEL_29;
LABEL_28:
        operator delete(v40);
LABEL_29:
        if (!v44)
          return;
        v45 = *a1;
        *a1 = *a2;
        *a2 = v45;
        v46 = a1[1];
        a1[1] = a2[1];
        a2[1] = v46;
        v23 = a1 + 2;
        goto LABEL_43;
      }
    }
    v44 = v41 != v40;
    if (!v40)
      goto LABEL_29;
    goto LABEL_28;
  }
  v15 = (const void *)*a3;
  v14 = a3[1];
  v16 = v14 - *a3;
  if (v14 == *a3)
  {
    v18 = 0;
    v17 = 0;
    v60 = a2[1];
    v20 = v60 - *a2;
    if (v60 != *a2)
      goto LABEL_11;
  }
  else
  {
    if (v16 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = (char *)operator new(v14 - *a3);
    v18 = &v17[4 * (v16 >> 2)];
    memcpy(v17, v15, v16);
    v19 = a2[1];
    v20 = v19 - *a2;
    if (v19 != *a2)
    {
LABEL_11:
      if ((v20 & 0x8000000000000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v21 = v18 - v17 > v20;
      if (v17)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  v21 = v18 != v17;
  if (v17)
LABEL_13:
    operator delete(v17);
LABEL_14:
  v23 = a1 + 2;
  v22 = *a1;
  if (!v21)
  {
    *a1 = *a2;
    *a2 = v22;
    v48 = a1[1];
    a1[1] = a2[1];
    a2[1] = v48;
    v23 = a2 + 2;
    v49 = a1[2];
    a1[2] = a2[2];
    a2[2] = v49;
    v51 = (const void *)*a3;
    v50 = a3[1];
    v52 = v50 - *a3;
    if (v50 == *a3)
    {
      v54 = 0;
      v53 = 0;
      v63 = a2[1];
      v56 = v63 - *a2;
      if (v63 != *a2)
        goto LABEL_37;
    }
    else
    {
      if (v52 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v53 = (char *)operator new(v50 - *a3);
      v54 = &v53[4 * (v52 >> 2)];
      memcpy(v53, v51, v52);
      v55 = a2[1];
      v56 = v55 - *a2;
      if (v55 != *a2)
      {
LABEL_37:
        if ((v56 & 0x8000000000000000) != 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v57 = v54 - v53 > v56;
        if (!v53)
          goto LABEL_40;
LABEL_39:
        operator delete(v53);
LABEL_40:
        if (!v57)
          return;
        v58 = *a2;
        *a2 = *a3;
        *a3 = v58;
        v24 = a2[1];
        a2[1] = a3[1];
        goto LABEL_42;
      }
    }
    v57 = v54 != v53;
    if (!v53)
      goto LABEL_40;
    goto LABEL_39;
  }
  *a1 = *a3;
  *a3 = v22;
  v24 = a1[1];
  a1[1] = a3[1];
LABEL_42:
  a3[1] = v24;
  v36 = a3 + 2;
LABEL_43:
  v59 = *v23;
  *v23 = *v36;
  *v36 = v59;
}

void sub_22DA56380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;

  if (__p)
    operator delete(__p);
  if (v28)
    operator delete(v28);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v4;
  _BOOL8 result;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  int64_t v25;
  char *v26;
  char *v27;
  size_t v28;
  _BOOL4 v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  void **v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  BOOL v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  void *v53;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (_BYTE *)*(a2 - 3);
      v6 = (_BYTE *)*(a2 - 2);
      v8 = v6 - v7;
      if (v6 == v7)
      {
        v10 = 0;
        v9 = 0;
        v46 = a1[1];
        v12 = v46 - *a1;
        if (v46 != *a1)
          goto LABEL_5;
      }
      else
      {
        if (v8 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v9 = (char *)operator new(v6 - v7);
        v10 = &v9[4 * (v8 >> 2)];
        memcpy(v9, v7, v8);
        v11 = a1[1];
        v12 = v11 - *a1;
        if (v11 != *a1)
        {
LABEL_5:
          if ((v12 & 0x8000000000000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v13 = v10 - v9 > v12;
          if (!v9)
            goto LABEL_8;
          goto LABEL_7;
        }
      }
      v13 = v10 != v9;
      if (!v9)
      {
LABEL_8:
        if (v13)
        {
          v14 = *a1;
          *a1 = *(v2 - 3);
          *(v2 - 3) = v14;
          v15 = a1[1];
          a1[1] = *(v2 - 2);
          *(v2 - 2) = v15;
          v16 = a1[2];
          a1[2] = *(v2 - 1);
          *(v2 - 1) = v16;
        }
        return 1;
      }
LABEL_7:
      operator delete(v9);
      goto LABEL_8;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*,0>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v17 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(a1, a1 + 3, a1 + 6);
      v18 = a1 + 9;
      if (a1 + 9 == v2)
        return 1;
      v19 = 0;
      v20 = 0;
      v47 = v2;
LABEL_17:
      v24 = (const void *)*v18;
      v23 = v18[1];
      v25 = v23 - *v18;
      if (v23 == *v18)
      {
        v27 = 0;
        v26 = 0;
        v28 = v17[1] - *v17;
        if (v28)
          goto LABEL_20;
      }
      else
      {
        if (v25 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v26 = (char *)operator new(v23 - *v18);
        v27 = &v26[4 * (v25 >> 2)];
        memcpy(v26, v24, v25);
        v28 = v17[1] - *v17;
        if (v28)
        {
LABEL_20:
          if ((v28 & 0x8000000000000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v53 = operator new(v28);
          v29 = v27 - v26 > v28;
          operator delete(v53);
          if (v26)
            goto LABEL_22;
          goto LABEL_23;
        }
      }
      v29 = v27 != v26;
      if (v26)
LABEL_22:
        operator delete(v26);
LABEL_23:
      if (!v29)
        goto LABEL_16;
      v49 = v20;
      v30 = (_BYTE *)*v18;
      v31 = (_BYTE *)v18[1];
      v48 = v18[2];
      v18[1] = 0;
      v18[2] = 0;
      *v18 = 0;
      v50 = v19;
      v51 = v18;
      v32 = v19;
      v33 = (char *)a1 + v19;
      v34 = (_OWORD *)((char *)a1 + v19 + 72);
      break;
  }
  while (1)
  {
    v35 = (void **)(v33 + 48);
    *v34 = *((_OWORD *)v33 + 3);
    *((_QWORD *)v33 + 11) = *((_QWORD *)v33 + 8);
    *((_QWORD *)v33 + 6) = 0;
    *((_QWORD *)v33 + 7) = 0;
    *((_QWORD *)v33 + 8) = 0;
    if (v32 == -48)
    {
      v21 = a1 + 1;
      v22 = (uint64_t)a1;
      goto LABEL_15;
    }
    if (v31 == v30)
    {
      v37 = 0;
      v36 = 0;
      v44 = *(uint64_t *)((char *)a1 + v32 + 24);
      v43 = *(uint64_t *)((char *)a1 + v32 + 32);
      v40 = v43 - v44;
      if (v43 == v44)
        goto LABEL_37;
    }
    else
    {
      if (v31 - v30 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v36 = (char *)operator new(v31 - v30);
      v37 = &v36[4 * ((v31 - v30) >> 2)];
      memcpy(v36, v30, v31 - v30);
      v39 = *(uint64_t *)((char *)a1 + v32 + 24);
      v38 = *(uint64_t *)((char *)a1 + v32 + 32);
      v40 = v38 - v39;
      if (v38 == v39)
      {
LABEL_37:
        v41 = v37 != v36;
        if (v36)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    if ((v40 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v52 = operator new(v40);
    v41 = v37 - v36 > v40;
    operator delete(v52);
    if (v36)
LABEL_32:
      operator delete(v36);
LABEL_33:
    if (!v41)
      break;
    v42 = *v35;
    v32 -= 24;
    v33 = (char *)a1 + v32;
    v34 = (_OWORD *)((char *)a1 + v32 + 72);
    if (*v35)
    {
      *((_QWORD *)v33 + 10) = v42;
      operator delete(v42);
      *(_QWORD *)v34 = 0;
      *(uint64_t *)((char *)a1 + v32 + 80) = 0;
      *(uint64_t *)((char *)a1 + v32 + 88) = 0;
    }
  }
  v22 = (uint64_t)a1 + v32 + 48;
  v45 = *(void **)v22;
  v21 = (uint64_t *)((char *)a1 + v32 + 56);
  if (*(_QWORD *)v22)
  {
    *v21 = v45;
    operator delete(v45);
    *(_QWORD *)v22 = 0;
    *(uint64_t *)((char *)a1 + v32 + 56) = 0;
    *(uint64_t *)((char *)a1 + v32 + 64) = 0;
  }
LABEL_15:
  v2 = v47;
  v19 = v50;
  v18 = v51;
  *(_QWORD *)v22 = v30;
  *v21 = v31;
  *(_QWORD *)(v22 + 16) = v48;
  v20 = v49 + 1;
  if (v49 == 7)
    return v51 + 3 == v47;
LABEL_16:
  v17 = v18;
  v19 += 24;
  v18 += 3;
  if (v18 != v2)
    goto LABEL_17;
  return 1;
}

void sub_22DA568F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 136);
  if (v29)
  {
    *(_QWORD *)(v27 - 128) = v29;
    operator delete(v29);
  }
  if (v26)
    operator delete(v26);
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(std::vector<std::vector<operations_research::sat::Literal>> *,long long)::$_0 &,std::vector<operations_research::sat::Literal>*>(a1, a2, a3);
  v9 = (const void *)*a4;
  v8 = a4[1];
  v10 = v8 - *a4;
  if (v8 == *a4)
  {
    v12 = 0;
    v11 = 0;
    v41 = a3[1];
    v14 = v41 - *a3;
    if (v41 != *a3)
      goto LABEL_4;
  }
  else
  {
    if (v10 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = (char *)operator new(v8 - *a4);
    v12 = &v11[4 * (v10 >> 2)];
    memcpy(v11, v9, v10);
    v13 = a3[1];
    v14 = v13 - *a3;
    if (v13 != *a3)
    {
LABEL_4:
      if ((v14 & 0x8000000000000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v15 = v12 - v11 > v14;
      if (v11)
        goto LABEL_6;
      goto LABEL_7;
    }
  }
  v15 = v12 != v11;
  if (v11)
LABEL_6:
    operator delete(v11);
LABEL_7:
  if (!v15)
    return;
  v16 = *a3;
  *a3 = *a4;
  *a4 = v16;
  v17 = a3[1];
  a3[1] = a4[1];
  a4[1] = v17;
  v18 = a3[2];
  a3[2] = a4[2];
  a4[2] = v18;
  v20 = (const void *)*a3;
  v19 = a3[1];
  v21 = v19 - *a3;
  if (v19 == *a3)
  {
    v23 = 0;
    v22 = 0;
    v42 = a2[1];
    v25 = v42 - *a2;
    if (v42 != *a2)
      goto LABEL_11;
  }
  else
  {
    if (v21 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v22 = (char *)operator new(v19 - *a3);
    v23 = &v22[4 * (v21 >> 2)];
    memcpy(v22, v20, v21);
    v24 = a2[1];
    v25 = v24 - *a2;
    if (v24 != *a2)
    {
LABEL_11:
      if ((v25 & 0x8000000000000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v26 = v23 - v22 > v25;
      if (v22)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  v26 = v23 != v22;
  if (v22)
LABEL_13:
    operator delete(v22);
LABEL_14:
  if (!v26)
    return;
  v27 = *a2;
  *a2 = *a3;
  *a3 = v27;
  v28 = a2[1];
  a2[1] = a3[1];
  a3[1] = v28;
  v29 = a2[2];
  a2[2] = a3[2];
  a3[2] = v29;
  v31 = (const void *)*a2;
  v30 = a2[1];
  v32 = v30 - *a2;
  if (v30 == *a2)
  {
    v34 = 0;
    v33 = 0;
    v43 = a1[1];
    v36 = v43 - *a1;
    if (v43 != *a1)
      goto LABEL_18;
  }
  else
  {
    if (v32 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v33 = (char *)operator new(v30 - *a2);
    v34 = &v33[4 * (v32 >> 2)];
    memcpy(v33, v31, v32);
    v35 = a1[1];
    v36 = v35 - *a1;
    if (v35 != *a1)
    {
LABEL_18:
      if ((v36 & 0x8000000000000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v37 = v34 - v33 > v36;
      if (!v33)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  v37 = v34 != v33;
  if (v33)
LABEL_20:
    operator delete(v33);
LABEL_21:
  if (v37)
  {
    v38 = *a1;
    *a1 = *a2;
    *a2 = v38;
    v39 = a1[1];
    a1[1] = a2[1];
    a2[1] = v39;
    v40 = a1[2];
    a1[2] = a2[2];
    a2[2] = v40;
  }
}

void sub_22DA56C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  if (__p)
    operator delete(__p);
  if (v22)
    operator delete(v22);
  _Unwind_Resume(exception_object);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::vector<operations_research::sat::Literal>>,operations_research::sat::`anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::prepare_insert(unint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = ((*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      v4 = *a1;
      v7 = v13;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::vector<operations_research::sat::Literal>>,operations_research::sat::`anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::find_first_non_full(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = ((a3 >> 7) ^ (a1 >> 12)) & a2;
  v4 = *(_QWORD *)(a1 + v3) & (~*(_QWORD *)(a1 + v3) << 7) & 0x8080808080808080;
  if (!v4)
  {
    v5 = 0;
    do
    {
      v5 += 8;
      v3 = (v5 + v3) & a2;
      v4 = *(_QWORD *)(a1 + v3) & (~*(_QWORD *)(a1 + v3) << 7) & 0x8080808080808080;
    }
    while (!v4);
  }
  return (v3 + (__clz(__rbit64(v4)) >> 3)) & a2;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::vector<operations_research::sat::Literal>>,operations_research::sat::`anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    return;
  }
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::vector<operations_research::sat::Literal>>,operations_research::sat::`anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  int **v19;
  int *v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 24 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (v6)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      if ((v13[(_QWORD)v4] & 0x80000000) == 0)
      {
        v19 = (int **)&v5[24 * (_QWORD)v13];
        v20 = *v19;
        v21 = v19[1];
        if (*v19 == v21)
        {
          v23 = 0;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          do
          {
            v24 = *v20++;
            v25 = (v22 + 0x1F73E299748A907ELL + v24) ^ (v23 >> 43);
            v26 = (v22 - v25 - 0x1F73E299748A907ELL) ^ (v25 << 9);
            v27 = (v23 - v25 - v26) ^ (v26 >> 8);
            v28 = (v25 - v26 - v27) ^ (v27 >> 38);
            v29 = (v26 - v27 - v28) ^ (v28 << 23);
            v30 = (v27 - v28 - v29) ^ (v29 >> 5);
            v31 = (v28 - v29 - v30) ^ (v30 >> 35);
            v32 = (v29 - v30 - v31) ^ (v31 << 49);
            v33 = (v30 - v31 - v32) ^ (v32 >> 11);
            v34 = (v31 - v32 - v33) ^ (v33 >> 12);
            v23 = (v33 - v34 - ((v32 - v33 - v34) ^ (v34 << 18))) ^ (((v32 - v33 - v34) ^ (v34 << 18)) >> 22);
            v22 = -(uint64_t)v23;
          }
          while (v20 != v21);
        }
        v35 = *a1;
        v36 = a1[3];
        v37 = (((unint64_t)*a1 >> 12) ^ (v23 >> 7)) & (unint64_t)v36;
        v38 = *(_QWORD *)&(*a1)[v37] & (~*(_QWORD *)&(*a1)[v37] << 7) & 0x8080808080808080;
        if (v38)
        {
          v15 = 0;
        }
        else
        {
          v15 = 0;
          do
          {
            v15 += 8;
            v37 = (v15 + v37) & (unint64_t)v36;
            v38 = *(_QWORD *)&v35[v37] & (~*(_QWORD *)&v35[v37] << 7) & 0x8080808080808080;
          }
          while (!v38);
        }
        v16 = (v37 + (__clz(__rbit64(v38)) >> 3)) & (unint64_t)v36;
        v14 += v15;
        v17 = v23 & 0x7F;
        v35[v16] = v17;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
        v18 = &a1[1][24 * v16];
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        *(_OWORD *)v18 = *(_OWORD *)v19;
        *((_QWORD *)v18 + 2) = *(_QWORD *)&v5[24 * (_QWORD)v13 + 16];
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
      }
      ++v13;
    }
    while (v13 != v6);
    operator delete(v4);
  }
  else
  {
    v14 = 0;
  }
  v39 = a1[4];
  if (v39)
  {
    *((_QWORD *)v39 + 4) = v14 >> 3;
    *((_QWORD *)v39 + 2) = 0;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::vector<operations_research::sat::Literal>>,operations_research::sat::`anonymous namespace'::VectorHash,std::equal_to<std::vector<operations_research::sat::Literal>>,std::allocator<std::vector<operations_research::sat::Literal>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int8x16_t *v18;
  uint64_t v19;
  int *v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_34;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v52 = *(_QWORD *)(result + 32);
    if (!v52)
      return result;
LABEL_31:
    *(_QWORD *)(v52 + 32) = v15 >> 3;
    *(_QWORD *)(v52 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v18 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v19 = *(_QWORD *)(result + 8) + 24 * v14;
      v21 = *(int **)v19;
      v20 = *(int **)(v19 + 8);
      if (*(int **)v19 == v20)
      {
        v23 = 0;
      }
      else
      {
        v22 = 0;
        v23 = 0;
        do
        {
          v24 = *v21++;
          v25 = (v22 + 0x1F73E299748A907ELL + v24) ^ (v23 >> 43);
          v26 = (v22 - v25 - 0x1F73E299748A907ELL) ^ (v25 << 9);
          v27 = (v23 - v25 - v26) ^ (v26 >> 8);
          v28 = (v25 - v26 - v27) ^ (v27 >> 38);
          v29 = (v26 - v27 - v28) ^ (v28 << 23);
          v30 = (v27 - v28 - v29) ^ (v29 >> 5);
          v31 = (v28 - v29 - v30) ^ (v30 >> 35);
          v32 = (v29 - v30 - v31) ^ (v31 << 49);
          v33 = (v30 - v31 - v32) ^ (v32 >> 11);
          v34 = (v31 - v32 - v33) ^ (v33 >> 12);
          v23 = (v33 - v34 - ((v32 - v33 - v34) ^ (v34 << 18))) ^ (((v32 - v33 - v34) ^ (v34 << 18)) >> 22);
          v22 = -(uint64_t)v23;
        }
        while (v21 != v20);
      }
      v35 = ((v23 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      v36 = 0;
      v37 = *(uint64_t *)((_BYTE *)v18->i64 + v35) & (~*(uint64_t *)((char *)v18->i64 + v35) << 7) & 0x8080808080808080;
      if (v37)
      {
        v16 = ((v23 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
      }
      else
      {
        v16 = ((v23 >> 7) ^ ((unint64_t)v18 >> 12)) & v13;
        do
        {
          v36 += 8;
          v16 = (v36 + v16) & v13;
          v37 = *(uint64_t *)((_BYTE *)v18->i64 + v16) & (~*(uint64_t *)((char *)v18->i64 + v16) << 7) & 0x8080808080808080;
        }
        while (!v37);
      }
      v17 = (v16 + (__clz(__rbit64(v37)) >> 3)) & v13;
      v15 += v36;
      if ((((v17 - v35) ^ (v14 - v35)) & v13) > 7)
      {
        v38 = v18->u8[v17];
        v18->i8[v17] = v23 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v17 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v23 & 0x7F;
        v39 = *(_QWORD *)(result + 8);
        if (v38 == 128)
        {
          v40 = (_QWORD *)(v39 + 24 * v17);
          v41 = v39 + 24 * v14;
          *v40 = 0;
          v40[1] = 0;
          v40[2] = 0;
          *(_OWORD *)v40 = *(_OWORD *)v41;
          v40[2] = *(_QWORD *)(v41 + 16);
          *(_QWORD *)v41 = 0;
          *(_QWORD *)(v41 + 8) = 0;
          *(_QWORD *)(v41 + 16) = 0;
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v42 = (__int128 *)(v39 + 24 * v14);
          v43 = *((_QWORD *)v42 + 2);
          v44 = *v42;
          *((_QWORD *)v42 + 1) = 0;
          *((_QWORD *)v42 + 2) = 0;
          *(_QWORD *)v42 = 0;
          v45 = *(_QWORD *)(result + 8);
          v46 = (_QWORD *)(v45 + 24 * v14);
          v47 = v45 + 24 * v17;
          *v46 = 0;
          v46[1] = 0;
          v46[2] = 0;
          *(_OWORD *)v46 = *(_OWORD *)v47;
          v46[2] = *(_QWORD *)(v47 + 16);
          *(_QWORD *)v47 = 0;
          *(_QWORD *)(v47 + 8) = 0;
          *(_QWORD *)(v47 + 16) = 0;
          v48 = *(_QWORD *)(result + 8) + 24 * v17;
          *(_OWORD *)v48 = v44;
          *(_QWORD *)(v48 + 16) = v43;
          --v14;
        }
      }
      else
      {
        v18->i8[v14] = v23 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v23 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v49 = v14 - (v14 >> 3);
  v50 = v14 == 7;
  v51 = 6;
  if (!v50)
    v51 = v49;
  *(_QWORD *)(result + 40) = v51 - *(_QWORD *)(result + 16);
  v52 = *(_QWORD *)(result + 32);
  if (v52)
    goto LABEL_31;
  return result;
}

void std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFF0uLL);
      std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFF0uLL);
    std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_22DA57AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_22DA57B18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DA57B2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DA57B44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::BooleanXorPropagator::Propagate(operations_research::sat::BooleanXorPropagator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  int *v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  int *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  signed int v60;
  char v61;
  uint64_t v62;
  void **v63;
  void **v64;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = v2 - v3;
  if (v2 == v3)
  {
    v6 = 0;
LABEL_46:
    if (*((_BYTE *)this + 32) == (v6 & 1))
      return 1;
    v36 = (_QWORD *)*((_QWORD *)this + 8);
    v36[18] = 0;
    v37 = (char *)v36[12];
    v64 = (void **)(v36 + 12);
    v36[13] = v37;
    if (*((_QWORD *)this + 2) == v3)
      return 0;
    v38 = 0;
    while (1)
    {
      v40 = *(_DWORD *)(v3 + 4 * v38) ^ (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 24)
                                                     + (((unint64_t)*(int *)(v3 + 4 * v38) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(_DWORD *)(v3 + 4 * v38) & 0x3F ^ 1u)) & 1) == 0);
      v41 = v36[14];
      if ((unint64_t)v37 >= v41)
        break;
      *(_DWORD *)v37 = v40;
      v39 = (uint64_t)(v37 + 4);
LABEL_50:
      v36[13] = v39;
      ++v38;
      v3 = *((_QWORD *)this + 1);
      v37 = (char *)v39;
      if (v38 >= (*((_QWORD *)this + 2) - v3) >> 2)
        return 0;
    }
    v42 = (char *)*v64;
    v43 = v37 - (_BYTE *)*v64;
    v44 = v43 >> 2;
    v45 = (v43 >> 2) + 1;
    if (v45 >> 62)
LABEL_80:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v46 = v41 - (_QWORD)v42;
    if (v46 >> 1 > v45)
      v45 = v46 >> 1;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
      v47 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    if (v47)
    {
      if (v47 >> 62)
LABEL_81:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v48 = operator new(4 * v47);
      v49 = (int *)&v48[4 * v44];
      *v49 = v40;
      v39 = (uint64_t)(v49 + 1);
      if (v37 == v42)
        goto LABEL_75;
    }
    else
    {
      v48 = 0;
      v49 = (int *)(4 * v44);
      *(_DWORD *)(4 * v44) = v40;
      v39 = 4 * v44 + 4;
      if (v37 == v42)
        goto LABEL_75;
    }
    v50 = v37 - 4 - v42;
    if (v50 >= 0xBC)
    {
      if (&v48[v43 - 4 - (v50 & 0xFFFFFFFFFFFFFFFCLL)] > &v48[v43 - 4])
      {
        v51 = v37;
      }
      else if (&v37[-(v50 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v37 - 4)
      {
        v51 = v37;
      }
      else if ((unint64_t)(v37 - v48 - v43) >= 0x20)
      {
        v52 = (v50 >> 2) + 1;
        v53 = 4 * (v52 & 0x7FFFFFFFFFFFFFF8);
        v51 = &v37[-v53];
        v49 = (int *)((char *)v49 - v53);
        v54 = &v48[4 * v44 - 16];
        v55 = v37 - 16;
        v56 = v52 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 8;
        }
        while (v56);
        if (v52 == (v52 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_75:
          v36[12] = v49;
          v36[13] = v39;
          v36[14] = &v48[4 * v47];
          if (v42)
            operator delete(v42);
          goto LABEL_50;
        }
      }
      else
      {
        v51 = v37;
      }
    }
    else
    {
      v51 = v37;
    }
    do
    {
      v58 = *((_DWORD *)v51 - 1);
      v51 -= 4;
      *--v49 = v58;
    }
    while (v51 != v42);
    goto LABEL_75;
  }
  v5 = 0;
  v6 = 0;
  v7 = v4 >> 2;
  if ((unint64_t)(v4 >> 2) <= 1)
    v7 = 1;
  v8 = -1;
  do
  {
    v9 = *(_DWORD *)(v3 + 4 * v5);
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 24) + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8));
    v11 = v9 & 0x3F;
    if (((v10 >> (v11 ^ 1u)) & 1) == 0)
    {
      if (((v10 >> v11) & 1) != 0)
      {
        v6 ^= 1u;
      }
      else
      {
        if (v8 != -1)
          return 1;
        v8 = v5;
      }
    }
    ++v5;
  }
  while (v7 != v5);
  if (v8 == -1)
    goto LABEL_46;
  v60 = v8;
  v61 = v6;
  v12 = 0;
  v13 = (char *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 6) = v13;
  v14 = v8;
  v62 = v8;
  v63 = (void **)((char *)this + 40);
  do
  {
    if (v12 != v14)
    {
      v16 = *((_QWORD *)this + 7);
      v17 = *(_DWORD *)(v3 + 4 * v12) ^ (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 24)
                                                     + (((unint64_t)*(int *)(v3 + 4 * v12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(_DWORD *)(v3 + 4 * v12) & 0x3F ^ 1u)) & 1) == 0);
      if ((unint64_t)v13 < v16)
      {
        *(_DWORD *)v13 = v17;
        v15 = (uint64_t)(v13 + 4);
LABEL_14:
        *((_QWORD *)this + 6) = v15;
        v13 = (char *)v15;
        goto LABEL_15;
      }
      v18 = (char *)*v63;
      v19 = v13 - (_BYTE *)*v63;
      v20 = v19 >> 2;
      v21 = (v19 >> 2) + 1;
      if (v21 >> 62)
        goto LABEL_80;
      v22 = v16 - (_QWORD)v18;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 62)
          goto LABEL_81;
        v24 = v2;
        v25 = operator new(4 * v23);
        v2 = v24;
        v26 = (int *)&v25[4 * v20];
        *v26 = v17;
        v15 = (uint64_t)(v26 + 1);
        if (v13 == v18)
          goto LABEL_32;
      }
      else
      {
        v25 = 0;
        v26 = (int *)(4 * v20);
        *(_DWORD *)(4 * v20) = v17;
        v15 = 4 * v20 + 4;
        if (v13 == v18)
          goto LABEL_32;
      }
      v27 = v13 - 4 - v18;
      if (v27 >= 0xBC)
      {
        if (&v25[v19 - 4 - (v27 & 0xFFFFFFFFFFFFFFFCLL)] > &v25[v19 - 4])
        {
          v28 = v13;
        }
        else if (&v13[-(v27 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4)
        {
          v28 = v13;
        }
        else if ((unint64_t)(v13 - v25 - v19) >= 0x20)
        {
          v30 = (v27 >> 2) + 1;
          v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
          v28 = &v13[-v31];
          v26 = (int *)((char *)v26 - v31);
          v32 = &v25[4 * v20 - 16];
          v33 = v13 - 16;
          v34 = v30 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *v32 = v35;
            v32 -= 2;
            v33 -= 32;
            v34 -= 8;
          }
          while (v34);
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_32:
            *((_QWORD *)this + 5) = v26;
            *((_QWORD *)this + 6) = v15;
            *((_QWORD *)this + 7) = &v25[4 * v23];
            if (v18)
            {
              operator delete(v18);
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
            }
            v14 = v62;
            goto LABEL_14;
          }
        }
        else
        {
          v28 = v13;
        }
      }
      else
      {
        v28 = v13;
      }
      do
      {
        v29 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--v26 = v29;
      }
      while (v28 != v18);
      goto LABEL_32;
    }
LABEL_15:
    ++v12;
  }
  while (v12 < (v2 - v3) >> 2);
  operations_research::sat::IntegerTrail::EnqueueLiteral(*((_QWORD *)this + 9), *(_DWORD *)(v3 + 4 * v60) ^ (*((_BYTE *)this + 32) == (v61 & 1)), *((char **)this + 5), (uint64_t)&v13[-*((_QWORD *)this + 5)] >> 2, 0, 0);
  return 1;
}

void operations_research::sat::BooleanXorPropagator::RegisterWith(operations_research::sat::BooleanXorPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  if (v6 != v5)
  {
    v7 = v4;
    do
    {
      operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, *v6, v7, 0xFFFFFFFFLL);
      v8 = *v6++;
      operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, v8 ^ 1, v7, 0xFFFFFFFFLL);
    }
    while (v6 != v5);
  }
}

uint64_t operations_research::sat::GreaterThanAtLeastOneOfPropagator::GreaterThanAtLeastOneOfPropagator(uint64_t a1, int a2, const void *a3, uint64_t a4, const void *a5, size_t __sz, const void *a7, uint64_t a8, void *__src, uint64_t a10, uint64_t a11)
{
  size_t v17;
  char *v19;
  char *v20;
  size_t v21;
  char *v22;
  char *v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;

  *(_QWORD *)a1 = &off_24F981118;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a4)
  {
    v17 = 4 * a4;
    if (4 * a4 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v19 = (char *)operator new(4 * a4);
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(a1 + 24) = v19;
    v20 = &v19[4 * ((4 * a4) >> 2)];
    *(_QWORD *)(a1 + 32) = v20;
    memcpy(v19, a3, v17);
    *(_QWORD *)(a1 + 24) = v20;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (__sz)
  {
    v21 = 8 * __sz;
    if (((8 * __sz) & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v22 = (char *)operator new(8 * __sz);
    *(_QWORD *)(a1 + 40) = v22;
    *(_QWORD *)(a1 + 48) = v22;
    v23 = &v22[8 * ((uint64_t)(8 * __sz) >> 3)];
    *(_QWORD *)(a1 + 56) = v23;
    memcpy(v22, a5, v21);
    *(_QWORD *)(a1 + 48) = v23;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (a8)
  {
    v24 = 4 * a8;
    if (4 * a8 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(4 * a8);
    *(_QWORD *)(a1 + 64) = v25;
    *(_QWORD *)(a1 + 72) = v25;
    v26 = &v25[4 * ((4 * a8) >> 2)];
    *(_QWORD *)(a1 + 80) = v26;
    memcpy(v25, a7, v24);
    *(_QWORD *)(a1 + 72) = v26;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (a10)
  {
    if (4 * a10 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v27 = (char *)operator new(4 * a10);
    *(_QWORD *)(a1 + 88) = v27;
    *(_QWORD *)(a1 + 96) = v27;
    v28 = &v27[4 * ((4 * a10) >> 2)];
    *(_QWORD *)(a1 + 104) = v28;
    memcpy(v27, __src, 4 * a10);
    *(_QWORD *)(a1 + 96) = v28;
  }
  *(_QWORD *)(a1 + 112) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>(a11);
  *(_QWORD *)(a1 + 120) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a11);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return a1;
}

void sub_22DA582A0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
    v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      v9 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v8 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[9] = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    v10 = *v2;
    if (!*v2)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v1[6] = v9;
  operator delete(v9);
  v10 = *v2;
  if (!*v2)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  v1[3] = v10;
  operator delete(v10);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::GreaterThanAtLeastOneOfPropagator::GreaterThanAtLeastOneOfPropagator(uint64_t a1, int a2, const void *a3, uint64_t a4, const void *a5, size_t a6, const void *a7, uint64_t a8, void *__src, uint64_t a10, uint64_t a11)
{
  return operations_research::sat::GreaterThanAtLeastOneOfPropagator::GreaterThanAtLeastOneOfPropagator(a1, a2, a3, a4, a5, a6, a7, a8, __src, a10, a11);
}

uint64_t operations_research::sat::GreaterThanAtLeastOneOfPropagator::Propagate(operations_research::sat::GreaterThanAtLeastOneOfPropagator *this)
{
  int *v2;
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int *v18;
  int v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  int *v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _DWORD *v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  void **v76;
  unint64_t v77;
  _BYTE v78[12];
  uint64_t v79;

  v2 = (int *)*((_QWORD *)this + 11);
  v3 = (int *)*((_QWORD *)this + 12);
  if (v2 == v3)
  {
LABEL_5:
    v5 = *((_QWORD *)this + 2);
    v6 = *((_QWORD *)this + 3);
    v7 = v6 - v5;
    if (v6 == v5)
      goto LABEL_17;
    v8 = 0;
    v9 = *(_QWORD *)(*((_QWORD *)this + 15) + 40);
    v10 = *(_QWORD *)(v9 + 12 * *((int *)this + 2));
    v11 = v7 >> 2;
    if ((unint64_t)(v7 >> 2) <= 1)
      v11 = 1;
    v12 = 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v13 = *(_DWORD *)(*((_QWORD *)this + 8) + 4 * v8);
      v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 24)
                      + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8));
      if (((v14 >> v13) & 1) != 0)
        return 1;
      if (((v14 >> (v13 & 0x3F ^ 1u)) & 1) == 0)
      {
        v15 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v8);
        if (v15 + *(_QWORD *)(v9 + 12 * *(int *)(v5 + 4 * v8)) < v12)
          v12 = v15 + *(_QWORD *)(v9 + 12 * *(int *)(v5 + 4 * v8));
        if (v12 <= v10)
          return 1;
      }
      ++v8;
    }
    while (v11 != v8);
    if (v12 == 0x7FFFFFFFFFFFFFFELL)
    {
LABEL_17:
      v17 = *((_QWORD *)this + 14);
      *(_QWORD *)(v17 + 144) = 0;
      if ((operations_research::sat::GreaterThanAtLeastOneOfPropagator *)(v17 + 96) != (operations_research::sat::GreaterThanAtLeastOneOfPropagator *)((char *)this + 64))
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v17 + 96), *((char **)this + 8), *((char **)this + 9), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 2);
      return 0;
    }
    v18 = (int *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 17) = v18;
    v75 = (_QWORD *)((char *)this + 152);
    v76 = (void **)((char *)this + 128);
    *((_QWORD *)this + 20) = *((_QWORD *)this + 19);
    if (v2 == v3)
    {
      if (v6 != v5)
        goto LABEL_51;
LABEL_95:
      LODWORD(v79) = *((_DWORD *)this + 2);
      HIDWORD(v79) = v12;
      return operations_research::sat::IntegerTrail::Enqueue(*((_QWORD *)this + 15), v79, SHIDWORD(v12), *((char **)this + 16), ((uint64_t)v18 - *((_QWORD *)this + 16)) >> 2, *((uint64_t **)this + 19), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2));
    }
    while (1)
    {
      while (1)
      {
        v19 = *v2 ^ 1;
        v20 = *((_QWORD *)this + 18);
        if ((unint64_t)v18 >= v20)
          break;
        *v18++ = v19;
        *((_QWORD *)this + 17) = v18;
        if (++v2 == v3)
          goto LABEL_50;
      }
      v21 = (int *)*v76;
      v22 = (char *)v18 - (_BYTE *)*v76;
      v23 = v22 >> 2;
      v24 = (v22 >> 2) + 1;
      if (v24 >> 62)
LABEL_96:
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v25 = v20 - (_QWORD)v21;
      if (v25 >> 1 > v24)
        v24 = v25 >> 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
        v24 = 0x3FFFFFFFFFFFFFFFLL;
      v77 = v24;
      if (v24)
      {
        if (v24 >> 62)
LABEL_97:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v26 = operator new(4 * v24);
        v27 = (int *)&v26[4 * v23];
        *v27 = v19;
        v28 = (uint64_t)(v27 + 1);
        if (v18 == v21)
        {
LABEL_44:
          *((_QWORD *)this + 16) = v27;
          *((_QWORD *)this + 17) = v28;
          *((_QWORD *)this + 18) = &v26[4 * v77];
          if (!v21)
            goto LABEL_41;
LABEL_40:
          operator delete(v21);
          goto LABEL_41;
        }
      }
      else
      {
        v26 = 0;
        v27 = (int *)(4 * v23);
        *(_DWORD *)(4 * v23) = v19;
        v28 = 4 * v23 + 4;
        if (v18 == v21)
          goto LABEL_44;
      }
      v29 = (char *)(v18 - 1) - (char *)v21;
      if (v29 < 0xBC
        || &v26[v22 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v22 - 4]
        || (int *)((char *)v18 - (v29 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v18 - 1
        || (unint64_t)((char *)v18 - &v26[v22]) < 0x20)
      {
        break;
      }
      v33 = (v29 >> 2) + 1;
      v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
      v30 = &v18[v34 / 0xFFFFFFFFFFFFFFFCLL];
      v27 = (int *)((char *)v27 - v34);
      v35 = &v26[4 * v23 - 16];
      v36 = v18 - 4;
      v37 = v33 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v38 = *(_OWORD *)v36;
        *(v35 - 1) = *((_OWORD *)v36 - 1);
        *v35 = v38;
        v35 -= 2;
        v36 -= 8;
        v37 -= 8;
      }
      while (v37);
      v31 = v77;
      if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_38;
LABEL_39:
      *((_QWORD *)this + 16) = v27;
      *((_QWORD *)this + 17) = v28;
      *((_QWORD *)this + 18) = &v26[4 * v31];
      if (v21)
        goto LABEL_40;
LABEL_41:
      v18 = (int *)v28;
      *((_QWORD *)this + 17) = v28;
      if (++v2 == v3)
      {
LABEL_50:
        v5 = *((_QWORD *)this + 2);
        if (*((_QWORD *)this + 3) == v5)
          goto LABEL_95;
LABEL_51:
        v39 = 0;
        while (2)
        {
          v40 = *((_QWORD *)this + 8);
          v41 = *(_DWORD *)(v40 + 4 * v39);
          if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 24)
                           + (((unint64_t)v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v41 & 0x3F ^ 1u)) & 1) != 0)
          {
            v43 = (char *)*((_QWORD *)this + 17);
            v42 = *((_QWORD *)this + 18);
            if ((unint64_t)v43 < v42)
            {
              *(_DWORD *)v43 = v41;
              *((_QWORD *)this + 17) = v43 + 4;
              goto LABEL_53;
            }
            v44 = (char *)*v76;
            v45 = v43 - (_BYTE *)*v76;
            v46 = v45 >> 2;
            v47 = (v45 >> 2) + 1;
            if (v47 >> 62)
              goto LABEL_96;
            v48 = v42 - (_QWORD)v44;
            if (v48 >> 1 > v47)
              v47 = v48 >> 1;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
              v49 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            if (v49)
            {
              if (v49 >> 62)
                goto LABEL_97;
              v50 = operator new(4 * v49);
              v51 = &v50[4 * v46];
              *v51 = *(_DWORD *)(v40 + 4 * v39);
              v52 = (uint64_t)(v51 + 1);
              if (v43 == v44)
              {
LABEL_84:
                *((_QWORD *)this + 16) = v51;
                *((_QWORD *)this + 17) = v52;
                *((_QWORD *)this + 18) = &v50[4 * v49];
                if (v44)
                  operator delete(v44);
                *((_QWORD *)this + 17) = v52;
                goto LABEL_53;
              }
            }
            else
            {
              v50 = 0;
              v51 = (_DWORD *)(4 * v46);
              *(_DWORD *)(4 * v46) = v41;
              v52 = 4 * v46 + 4;
              if (v43 == v44)
                goto LABEL_84;
            }
            v62 = v43 - 4 - v44;
            if (v62 < 0x2C)
              goto LABEL_101;
            if ((unint64_t)(v43 - &v50[v45]) < 0x20)
              goto LABEL_101;
            v63 = (v62 >> 2) + 1;
            v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
            v65 = &v43[-v64];
            v51 = (_DWORD *)((char *)v51 - v64);
            v66 = &v50[4 * v46 - 16];
            v67 = v43 - 16;
            v68 = v63 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v69 = *(_OWORD *)v67;
              *(v66 - 1) = *((_OWORD *)v67 - 1);
              *v66 = v69;
              v66 -= 2;
              v67 -= 32;
              v68 -= 8;
            }
            while (v68);
            v43 = v65;
            if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_101:
              do
              {
                v70 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *--v51 = v70;
              }
              while (v43 != v44);
            }
            goto LABEL_84;
          }
          *(_DWORD *)v78 = *(_DWORD *)(v5 + 4 * v39);
          *(_QWORD *)&v78[4] = v12 - *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v39);
          v54 = (_DWORD *)*((_QWORD *)this + 20);
          v53 = *((_QWORD *)this + 21);
          if ((unint64_t)v54 >= v53)
          {
            v56 = (_DWORD *)*v75;
            v57 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v54 - *v75) >> 2);
            v58 = v57 + 1;
            if (v57 + 1 > 0x1555555555555555)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - (_QWORD)v56) >> 2);
            if (2 * v59 > v58)
              v58 = 2 * v59;
            if (v59 >= 0xAAAAAAAAAAAAAAALL)
              v60 = 0x1555555555555555;
            else
              v60 = v58;
            if (v60)
            {
              if (v60 > 0x1555555555555555)
                goto LABEL_97;
              v61 = (char *)operator new(12 * v60);
            }
            else
            {
              v61 = 0;
            }
            v71 = &v61[12 * v57];
            *(_QWORD *)v71 = *(_QWORD *)v78;
            *((_DWORD *)v71 + 2) = *(_DWORD *)&v78[8];
            v72 = v71;
            if (v54 != v56)
            {
              do
              {
                v73 = *(_QWORD *)(v54 - 3);
                v54 -= 3;
                v74 = v54[2];
                *(_QWORD *)(v72 - 12) = v73;
                v72 -= 12;
                *((_DWORD *)v72 + 2) = v74;
              }
              while (v54 != v56);
              v54 = (_DWORD *)*v75;
            }
            v55 = v71 + 12;
            *((_QWORD *)this + 19) = v72;
            *((_QWORD *)this + 20) = v71 + 12;
            *((_QWORD *)this + 21) = &v61[12 * v60];
            if (v54)
              operator delete(v54);
          }
          else
          {
            *(_QWORD *)v54 = *(_QWORD *)v78;
            v54[2] = *(_DWORD *)&v78[8];
            v55 = v54 + 3;
          }
          *((_QWORD *)this + 20) = v55;
LABEL_53:
          ++v39;
          v5 = *((_QWORD *)this + 2);
          if (v39 >= (*((_QWORD *)this + 3) - v5) >> 2)
          {
            v18 = (int *)*((_QWORD *)this + 17);
            goto LABEL_95;
          }
          continue;
        }
      }
    }
    v30 = v18;
    v31 = v77;
    do
    {
LABEL_38:
      v32 = *--v30;
      *--v27 = v32;
    }
    while (v30 != v21);
    goto LABEL_39;
  }
  v4 = (int *)*((_QWORD *)this + 11);
  while (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 24)
                      + (((unint64_t)*v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v4) & 1) != 0)
  {
    if (++v4 == v3)
      goto LABEL_5;
  }
  return 1;
}

void operations_research::sat::GreaterThanAtLeastOneOfPropagator::RegisterWith(operations_research::sat::GreaterThanAtLeastOneOfPropagator *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;

  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v5 = (unsigned int *)*((_QWORD *)this + 8);
  v6 = (unsigned int *)*((_QWORD *)this + 9);
  while (v5 != v6)
  {
    v7 = *v5++;
    operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, v7 ^ 1, v4, 0xFFFFFFFFLL);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 11);
  v9 = (unsigned int *)*((_QWORD *)this + 12);
  while (v8 != v9)
  {
    v10 = *v8++;
    operations_research::sat::GenericLiteralWatcher::WatchLiteral((uint64_t)a2, v10, v4, 0xFFFFFFFFLL);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 2);
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  while (v12 != v11)
  {
    v13 = *v12++;
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v13, v4, 0xFFFFFFFFLL);
  }
}

void operations_research::sat::BooleanXorPropagator::~BooleanXorPropagator(operations_research::sat::BooleanXorPropagator *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F981148;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F981148;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::GreaterThanAtLeastOneOfPropagator::~GreaterThanAtLeastOneOfPropagator(operations_research::sat::GreaterThanAtLeastOneOfPropagator *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24F981118;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 6) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24F981118;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 6) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::BoolVar::BoolVar(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t operations_research::sat::BoolVar::BoolVar(uint64_t result, int a2, uint64_t a3)
{
  *(_QWORD *)result = a3;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t operations_research::sat::BoolVar::WithName(int *a1, std::string *__str)
{
  uint64_t v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 8 * a1[2] + 8);
  v5 = (std::string **)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) != 0)
  {
    v7 = *(google::protobuf::Arena **)v7;
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
  }
  else
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      std::string::operator=(v8, __str);
      return *(_QWORD *)a1;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, (__int128 *)__str);
  return *(_QWORD *)a1;
}

uint64_t operations_research::sat::IntVar::IntVar(uint64_t this, const operations_research::sat::BoolVar *a2)
{
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  return this;
}

uint64_t operations_research::sat::LinearExpr::LinearExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  operations_research::sat::LinearExpr::AddTerm((char **)a1, a2, a3, 1);
  return a1;
}

void sub_22DA58D44(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  operations_research::sat::LinearExpr::LinearExpr((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::LinearExpr::LinearExpr(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  operations_research::sat::LinearExpr::AddTerm((char **)a1, a2, a3, 1);
  return a1;
}

void sub_22DA58DA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  operations_research::sat::LinearExpr::LinearExpr((void **)v1);
  _Unwind_Resume(a1);
}

double operations_research::sat::LinearExpr::LinearExpr(operations_research::sat::LinearExpr *this, uint64_t a2)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 6) = a2;
  return result;
}

void operations_research::sat::LinearExpr::ScalProd(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11[2];
  uint64_t v12;
  uint64_t *v13;

  v6 = a2;
  v11[0] = a2;
  v12 = a4;
  if (a2 != a4)
  {
    v13 = (uint64_t *)google::MakeCheckOpString<unsigned long,unsigned long>((int)v11, (int)&v12, "vars.size() == coeffs.size()");
    if (v13)
    {
      google::LogMessageFatal::LogMessageFatal(v11, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model.cc", 153, &v13);
      google::LogMessage::stream((google::LogMessage *)v11);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v11);
    }
  }
  *(_QWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  if (v6)
  {
    v9 = (uint64_t *)(a1 + 8);
    do
    {
      v10 = *a3++;
      operations_research::sat::LinearExpr::AddTerm((char **)a5, *(v9 - 1), *v9, v10);
      v9 += 2;
      --v6;
    }
    while (v6);
  }
}

void sub_22DA58E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DA58EA4(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearExpr::AddTerm(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  char *v65;
  char *v66;
  int64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;

  if ((a3 & 0x80000000) != 0)
  {
    v11 = ~(_DWORD)a3;
    v13 = a1[1];
    v12 = (unint64_t)a1[2];
    if ((unint64_t)v13 >= v12)
    {
      v23 = *a1;
      v24 = (v13 - *a1) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        goto LABEL_81;
      v26 = v12 - (_QWORD)v23;
      if (v26 >> 3 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 60)
          goto LABEL_80;
        v28 = (char *)operator new(16 * v27);
      }
      else
      {
        v28 = 0;
      }
      v52 = &v28[16 * v24];
      *(_QWORD *)v52 = a2;
      *((_DWORD *)v52 + 2) = v11;
      v14 = v52 + 16;
      if (v13 != v23)
      {
        do
        {
          v53 = *((_QWORD *)v13 - 2);
          v13 -= 16;
          v54 = *((_DWORD *)v13 + 2);
          *((_QWORD *)v52 - 2) = v53;
          v52 -= 16;
          *((_DWORD *)v52 + 2) = v54;
        }
        while (v13 != v23);
        v13 = *a1;
      }
      *a1 = v52;
      a1[1] = v14;
      a1[2] = &v28[16 * v27];
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_QWORD *)v13 = a2;
      *((_DWORD *)v13 + 2) = v11;
      v14 = v13 + 16;
    }
    a1[1] = v14;
    v55 = -a4;
    v57 = a1[4];
    v56 = (unint64_t)a1[5];
    if ((unint64_t)v57 < v56)
    {
      *(_QWORD *)v57 = v55;
      v58 = (uint64_t)(v57 + 8);
LABEL_79:
      a1[4] = (char *)v58;
      a1[6] += a4;
      return;
    }
    v59 = a1[3];
    v60 = (v57 - v59) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_82;
    v62 = v56 - (_QWORD)v59;
    if (v62 >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 >> 61)
        goto LABEL_80;
      v64 = operator new(8 * v63);
      v65 = &v64[8 * v60];
      v66 = &v64[8 * v63];
      *(_QWORD *)v65 = v55;
      v58 = (uint64_t)(v65 + 8);
      v67 = v57 - v59;
      if (v57 == v59)
        goto LABEL_77;
    }
    else
    {
      v64 = 0;
      v65 = (char *)(8 * v60);
      v66 = 0;
      *(_QWORD *)(8 * v60) = v55;
      v58 = 8 * v60 + 8;
      v67 = v57 - v59;
      if (v57 == v59)
      {
LABEL_77:
        a1[3] = v65;
        a1[4] = (char *)v58;
        a1[5] = v66;
        if (v59)
          operator delete(v59);
        goto LABEL_79;
      }
    }
    v68 = v67 - 8;
    if (v68 < 0x58)
      goto LABEL_85;
    if ((unint64_t)(v59 - v64) < 0x20)
      goto LABEL_85;
    v69 = (v68 >> 3) + 1;
    v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
    v71 = &v57[-v70];
    v65 -= v70;
    v72 = &v64[8 * v60 - 16];
    v73 = v57 - 16;
    v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v75 = *(_OWORD *)v73;
      *(v72 - 1) = *((_OWORD *)v73 - 1);
      *v72 = v75;
      v72 -= 2;
      v73 -= 32;
      v74 -= 4;
    }
    while (v74);
    v57 = v71;
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_85:
      do
      {
        v76 = *((_QWORD *)v57 - 1);
        v57 -= 8;
        *((_QWORD *)v65 - 1) = v76;
        v65 -= 8;
      }
      while (v57 != v59);
    }
    goto LABEL_77;
  }
  v9 = a1[1];
  v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 < v8)
  {
    *(_QWORD *)v9 = a2;
    *((_QWORD *)v9 + 1) = a3;
    v10 = (uint64_t)(v9 + 16);
    goto LABEL_30;
  }
  v15 = *a1;
  v16 = (v9 - *a1) >> 4;
  v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 60)
LABEL_81:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v18 = v8 - (_QWORD)v15;
  if (v18 >> 3 > v17)
    v17 = v18 >> 3;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
    v19 = 0xFFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 >> 60)
      goto LABEL_80;
    v20 = (char *)operator new(16 * v19);
    v21 = &v20[16 * v16];
    v22 = &v20[16 * v19];
    *(_QWORD *)v21 = a2;
    *((_QWORD *)v21 + 1) = a3;
    v10 = (uint64_t)(v21 + 16);
    if (v9 == v15)
      goto LABEL_28;
  }
  else
  {
    v21 = (char *)(16 * v16);
    v22 = 0;
    *(_QWORD *)v21 = a2;
    *((_QWORD *)v21 + 1) = a3;
    v10 = 16 * v16 + 16;
    if (v9 == v15)
      goto LABEL_28;
  }
  do
  {
    v29 = *((_QWORD *)v9 - 2);
    v9 -= 16;
    v30 = *((_DWORD *)v9 + 2);
    *((_QWORD *)v21 - 2) = v29;
    v21 -= 16;
    *((_DWORD *)v21 + 2) = v30;
  }
  while (v9 != v15);
  v9 = *a1;
LABEL_28:
  *a1 = v21;
  a1[1] = (char *)v10;
  a1[2] = v22;
  if (v9)
    operator delete(v9);
LABEL_30:
  a1[1] = (char *)v10;
  v32 = a1[4];
  v31 = (unint64_t)a1[5];
  if ((unint64_t)v32 < v31)
  {
    *(_QWORD *)v32 = a4;
    a1[4] = v32 + 8;
    return;
  }
  v33 = a1[3];
  v34 = (v32 - v33) >> 3;
  v35 = v34 + 1;
  if ((unint64_t)(v34 + 1) >> 61)
LABEL_82:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v36 = v31 - (_QWORD)v33;
  if (v36 >> 2 > v35)
    v35 = v36 >> 2;
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
    v37 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v37 = v35;
  if (v37)
  {
    if (!(v37 >> 61))
    {
      v38 = operator new(8 * v37);
      v39 = &v38[8 * v34];
      v40 = &v38[8 * v37];
      *(_QWORD *)v39 = a4;
      v41 = (uint64_t)(v39 + 8);
      v42 = v32 - v33;
      if (v32 == v33)
        goto LABEL_49;
LABEL_43:
      v43 = v42 - 8;
      if (v43 < 0x58)
        goto LABEL_86;
      if ((unint64_t)(v33 - v38) < 0x20)
        goto LABEL_86;
      v44 = (v43 >> 3) + 1;
      v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
      v46 = &v32[-v45];
      v39 -= v45;
      v47 = &v38[8 * v34 - 16];
      v48 = v32 - 16;
      v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v50 = *(_OWORD *)v48;
        *(v47 - 1) = *((_OWORD *)v48 - 1);
        *v47 = v50;
        v47 -= 2;
        v48 -= 32;
        v49 -= 4;
      }
      while (v49);
      v32 = v46;
      if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_86:
        do
        {
          v51 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *((_QWORD *)v39 - 1) = v51;
          v39 -= 8;
        }
        while (v32 != v33);
      }
      goto LABEL_49;
    }
LABEL_80:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v38 = 0;
  v39 = (char *)(8 * v34);
  v40 = 0;
  *(_QWORD *)(8 * v34) = a4;
  v41 = 8 * v34 + 8;
  v42 = v32 - v33;
  if (v32 != v33)
    goto LABEL_43;
LABEL_49:
  a1[3] = v39;
  a1[4] = (char *)v41;
  a1[5] = v40;
  if (v33)
    operator delete(v33);
  a1[4] = (char *)v41;
}

void operations_research::sat::LinearExpr::BooleanSum(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (a2)
  {
    v4 = a1;
    v6 = a1 + 16 * a2;
    do
    {
      v3 = v3 & 0xFFFFFFFF00000000 | *(unsigned int *)(v4 + 8);
      operations_research::sat::LinearExpr::AddTerm((char **)a3, *(_QWORD *)v4, v3, 1);
      v4 += 16;
    }
    while (v4 != v6);
  }
}

void sub_22DA593A8(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::LinearExpr::BooleanScalProd(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11[2];
  uint64_t v12;
  uint64_t *v13;

  v6 = a2;
  v11[0] = a2;
  v12 = a4;
  if (a2 != a4)
  {
    v13 = (uint64_t *)google::MakeCheckOpString<unsigned long,unsigned long>((int)v11, (int)&v12, "vars.size() == coeffs.size()");
    if (v13)
    {
      google::LogMessageFatal::LogMessageFatal(v11, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model.cc", 177, &v13);
      google::LogMessage::stream((google::LogMessage *)v11);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v11);
    }
  }
  *(_QWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  if (v6)
  {
    v9 = (unsigned int *)(a1 + 8);
    do
    {
      v10 = *a3++;
      operations_research::sat::LinearExpr::AddTerm((char **)a5, *((_QWORD *)v9 - 1), *v9, v10);
      v9 += 4;
      --v6;
    }
    while (v6);
  }
}

void sub_22DA59480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DA59488(_Unwind_Exception *a1)
{
  operations_research::sat::LinearExpr *v1;

  operations_research::sat::LinearExpr::~LinearExpr(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Constraint::WithName(uint64_t *a1, std::string *__str)
{
  uint64_t v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;

  v4 = *a1;
  v5 = (std::string **)(*a1 + 40);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) != 0)
  {
    v7 = *(google::protobuf::Arena **)v7;
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
  }
  else
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      std::string::operator=(v8, __str);
      return *a1;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, (__int128 *)__str);
  return *a1;
}

uint64_t operations_research::sat::Constraint::OnlyEnforceIf(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;

  v5 = *a1;
  v8 = *(_DWORD *)(*a1 + 16);
  v6 = (unsigned int *)(*a1 + 16);
  v7 = v8;
  v9 = v8 + 1;
  v10 = v5;
  if (v8 == *(_DWORD *)(v5 + 20))
  {
    google::protobuf::RepeatedField<int>::Reserve(v6, v9);
    v10 = *a1;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + 24) + 4 * v7) = a3;
  *(_DWORD *)(v5 + 16) = v9;
  return v10;
}

uint64_t operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex(operations_research::sat::CpModelBuilder *this, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  void *v33;
  uint64_t j;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  std::string **v40;
  uint64_t v41;
  google::protobuf::Arena *v42;
  std::string *v43;
  int *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int *v54;
  _QWORD *v56;
  uint64_t v57;
  std::string __str;
  void *v59[2];
  void *__p[2];
  __int128 v61;
  uint64_t v62;
  void *v63[2];
  void *v64[2];
  __int128 v65;
  uint64_t v66;
  _QWORD v67[8];

  v2 = a2;
  v67[6] = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0x80000000) == 0)
    return a2;
  v5 = 0;
  v7 = (uint64_t *)((char *)this + 192);
  v6 = *((_QWORD *)this + 24);
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + (int)a2));
  v9 = v8 >> 7;
  v10 = (v8 >> 7) ^ (v6 >> 12);
  v11 = *((_QWORD *)this + 27);
  v12 = 0x101010101010101 * (v8 & 0x7F);
  v13 = *((_QWORD *)this + 25);
  for (i = v10; ; i = v5 + v15)
  {
    v15 = i & v11;
    v16 = *(_QWORD *)(v6 + v15);
    v17 = ((v16 ^ v12) - 0x101010101010101) & ~(v16 ^ v12) & 0x8080808080808080;
    if (v17)
      break;
LABEL_7:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
      goto LABEL_10;
    v5 += 8;
  }
  while (1)
  {
    v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v11;
    if (*(_DWORD *)(v13 + 8 * v18) == v2)
      break;
    v17 &= v17 - 1;
    if (!v17)
      goto LABEL_7;
  }
  if (v18 == v11)
  {
LABEL_10:
    v57 = 0x101010101010101 * (v8 & 0x7F);
    if (~v2 <= v2)
      v19 = v2;
    else
      v19 = ~v2;
    v20 = (int *)*((_QWORD *)this + 4);
    v21 = *(_QWORD *)&v20[2 * v19 + 2];
    v3 = *((unsigned int *)this + 6);
    v22 = *v20;
    if ((int)v3 >= *v20)
    {
      if (v22 == *((_DWORD *)this + 7))
      {
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v22 + 1);
        v20 = (int *)*((_QWORD *)this + 4);
        v22 = *v20;
      }
      *v20 = v22 + 1;
      v23 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 2));
      v28 = *((_QWORD *)this + 4);
      v29 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v29 + 1;
      *(_QWORD *)(v28 + 8 * v29 + 8) = v23;
      v26 = *(unsigned int *)(v23 + 16);
      v24 = *(_DWORD *)(v23 + 20);
      v25 = (unsigned int *)(v23 + 16);
      v27 = v26 + 1;
      if ((_DWORD)v26 != v24)
      {
LABEL_20:
        v30 = *(_QWORD *)(v23 + 24);
        *(_QWORD *)(v30 + 8 * v26) = 0;
        *(_DWORD *)(v23 + 16) = v27;
        v31 = v26 + 2;
        if (v27 == v24)
        {
          google::protobuf::RepeatedField<long long>::Reserve(v25, v31);
          v30 = *(_QWORD *)(v23 + 24);
        }
        *(_QWORD *)(v30 + 8 * v27) = 1;
        *v25 = v31;
        v32 = *(_QWORD **)(v21 + 40);
        v33 = (void *)*((unsigned __int8 *)v32 + 23);
        if (*((char *)v32 + 23) < 0)
        {
          if (!v32[1])
            goto LABEL_43;
        }
        else if (!*((_BYTE *)v32 + 23))
        {
          goto LABEL_43;
        }
        v63[0] = "Not(";
        v63[1] = (void *)4;
        v39 = (void *)v32[1];
        if ((char)v33 < 0)
        {
          v32 = (_QWORD *)*v32;
          v33 = v39;
        }
        v59[0] = v32;
        v59[1] = v33;
        v67[0] = ")";
        v67[1] = 1;
        absl::lts_2020_02_25::StrCat((uint64_t)v63, (uint64_t)v59, (uint64_t)v67, &__str);
        v40 = (std::string **)(v23 + 40);
        v41 = *(_QWORD *)(v23 + 8);
        v42 = (google::protobuf::Arena *)(v41 & 0xFFFFFFFFFFFFFFFELL);
        if ((v41 & 1) != 0)
        {
          v42 = *(google::protobuf::Arena **)v42;
          v43 = *v40;
          if (*v40 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_36;
        }
        else
        {
          v43 = *v40;
          if (*v40 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_36:
            std::string::operator=(v43, &__str);
            goto LABEL_41;
          }
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v40, v42, (__int128 *)&__str);
LABEL_41:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
LABEL_43:
        if ((v3 & 0x80000000) != 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v59, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model.cc", 74);
          v56 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Check failed: RefIsPositive(index) ", 35);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v59);
        }
        v66 = 0;
        *(_OWORD *)v64 = 0u;
        v65 = 0u;
        *(_OWORD *)v63 = 0u;
        operations_research::sat::LinearExpr::AddTerm((char **)v63, (uint64_t)this, v3, 1);
        v62 = 0;
        *(_OWORD *)__p = 0u;
        v61 = 0u;
        *(_OWORD *)v59 = 0u;
        operations_research::sat::LinearExpr::AddTerm((char **)v59, (uint64_t)this, v2, 1);
        operations_research::sat::CpModelBuilder::AddEquality(this, (const operations_research::sat::LinearExpr *)v63, (const operations_research::sat::LinearExpr *)v59);
        if (__p[1])
        {
          *(void **)&v61 = __p[1];
          operator delete(__p[1]);
        }
        if (v59[0])
        {
          v59[1] = v59[0];
          operator delete(v59[0]);
        }
        if (v64[1])
        {
          *(void **)&v65 = v64[1];
          operator delete(v64[1]);
        }
        if (v63[0])
        {
          v63[1] = v63[0];
          operator delete(v63[0]);
        }
        v45 = 0;
        v46 = *((_QWORD *)this + 24);
        v47 = v9 ^ (v46 >> 12);
        v48 = *((_QWORD *)this + 27);
        while (1)
        {
          v49 = v47 & v48;
          v50 = *(_QWORD *)(v46 + v49);
          v51 = ((v50 ^ v57) - 0x101010101010101) & ~(v50 ^ v57) & 0x8080808080808080;
          if (v51)
            break;
LABEL_57:
          if ((v50 & (~v50 << 6) & 0x8080808080808080) != 0)
          {
            v53 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(v7, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v2)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v2)));
            v52 = *((_QWORD *)this + 25);
            v54 = (int *)(v52 + 8 * v53);
            *v54 = v2;
            v54[1] = 0;
            goto LABEL_60;
          }
          v45 += 8;
          v47 = v45 + v49;
        }
        v52 = *((_QWORD *)this + 25);
        while (1)
        {
          v53 = (v49 + (__clz(__rbit64(v51)) >> 3)) & v48;
          if (*(_DWORD *)(v52 + 8 * v53) == v2)
            break;
          v51 &= v51 - 1;
          if (!v51)
            goto LABEL_57;
        }
LABEL_60:
        *(_DWORD *)(v52 + 8 * v53 + 4) = v3;
        return v3;
      }
    }
    else
    {
      *((_DWORD *)this + 6) = v3 + 1;
      v23 = *(_QWORD *)&v20[2 * (int)v3 + 2];
      v26 = *(unsigned int *)(v23 + 16);
      v24 = *(_DWORD *)(v23 + 20);
      v25 = (unsigned int *)(v23 + 16);
      v27 = v26 + 1;
      if ((_DWORD)v26 != v24)
        goto LABEL_20;
    }
    google::protobuf::RepeatedField<long long>::Reserve(v25, v27);
    v24 = *(_DWORD *)(v23 + 20);
    goto LABEL_20;
  }
  for (j = 0; ; v10 = j + v35)
  {
    v35 = v10 & v11;
    v36 = *(_QWORD *)(v6 + v35);
    v37 = ((v36 ^ v12) - 0x101010101010101) & ~(v36 ^ v12) & 0x8080808080808080;
    if (v37)
      break;
LABEL_29:
    if ((v36 & (~v36 << 6) & 0x8080808080808080) != 0)
    {
      v38 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(v7, v8);
      v13 = *((_QWORD *)this + 25);
      v44 = (int *)(v13 + 8 * v38);
      *v44 = v2;
      v44[1] = 0;
      return *(unsigned int *)(v13 + 8 * v38 + 4);
    }
    j += 8;
  }
  while (1)
  {
    v38 = (v35 + (__clz(__rbit64(v37)) >> 3)) & v11;
    if (*(_DWORD *)(v13 + 8 * v38) == v2)
      return *(unsigned int *)(v13 + 8 * v38 + 4);
    v37 &= v37 - 1;
    if (!v37)
      goto LABEL_29;
  }
}

void sub_22DA59AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelBuilder::IndexFromConstant(operations_research::sat::CpModelBuilder *this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  unint64_t v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t j;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t k;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v45;

  v4 = 0;
  v6 = (uint64_t *)((char *)this + 144);
  v5 = *((_QWORD *)this + 18);
  v7 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a2));
  v8 = v7 >> 7;
  v9 = (v7 >> 7) ^ (v5 >> 12);
  v10 = *((_QWORD *)this + 21);
  v11 = 0x101010101010101 * (v7 & 0x7F);
  for (i = v9; ; i = v4 + v13)
  {
    v13 = i & v10;
    v14 = *(_QWORD *)(v5 + v13);
    v15 = ((v14 ^ v11) - 0x101010101010101) & ~(v14 ^ v11) & 0x8080808080808080;
    if (v15)
      break;
LABEL_5:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
      goto LABEL_8;
    v4 += 8;
  }
  while (1)
  {
    v16 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v10;
    if (*(_QWORD *)(*((_QWORD *)this + 19) + 16 * v16) == a2)
      break;
    v15 &= v15 - 1;
    if (!v15)
      goto LABEL_5;
  }
  if (v16 == v10)
  {
LABEL_8:
    v17 = *((_DWORD *)this + 6);
    v18 = (int *)*((_QWORD *)this + 4);
    v45 = v17;
    if (v18)
    {
      v19 = *v18;
      if (v17 < *v18)
      {
        *((_DWORD *)this + 6) = v17 + 1;
        v20 = *(_QWORD *)&v18[2 * v17 + 2];
        v23 = *(unsigned int *)(v20 + 16);
        v21 = *(_DWORD *)(v20 + 20);
        v22 = (unsigned int *)(v20 + 16);
        v24 = v23 + 1;
        if ((_DWORD)v23 != v21)
        {
LABEL_17:
          v27 = *(_QWORD *)(v20 + 24);
          *(_QWORD *)(v27 + 8 * v23) = a2;
          *(_DWORD *)(v20 + 16) = v24;
          v28 = v23 + 2;
          if (v24 == v21)
          {
            google::protobuf::RepeatedField<long long>::Reserve(v22, v28);
            v27 = *(_QWORD *)(v20 + 24);
          }
          v29 = 0;
          *(_QWORD *)(v27 + 8 * v24) = a2;
          *v22 = v28;
          v5 = *((_QWORD *)this + 18);
          v9 = v8 ^ (v5 >> 12);
          v10 = *((_QWORD *)this + 21);
          for (j = v9; ; j = v29 + v31)
          {
            v31 = j & v10;
            v32 = *(_QWORD *)(v5 + (j & v10));
            v33 = ((v32 ^ v11) - 0x101010101010101) & ~(v32 ^ v11) & 0x8080808080808080;
            if (v33)
              break;
LABEL_24:
            if ((v32 & (~v32 << 6) & 0x8080808080808080) != 0)
            {
              v35 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert(v6, v7);
              v5 = *((_QWORD *)this + 18);
              v34 = *((_QWORD *)this + 19);
              v36 = v34 + 16 * v35;
              *(_QWORD *)v36 = a2;
              *(_DWORD *)(v36 + 8) = 0;
              v10 = *((_QWORD *)this + 21);
              v9 = v8 ^ (v5 >> 12);
              goto LABEL_27;
            }
            v29 += 8;
          }
          v34 = *((_QWORD *)this + 19);
          while (1)
          {
            v35 = (v31 + (__clz(__rbit64(v33)) >> 3)) & v10;
            if (*(_QWORD *)(v34 + 16 * v35) == a2)
              break;
            v33 &= v33 - 1;
            if (!v33)
              goto LABEL_24;
          }
LABEL_27:
          *(_DWORD *)(v34 + 16 * v35 + 8) = v45;
          goto LABEL_28;
        }
LABEL_16:
        google::protobuf::RepeatedField<long long>::Reserve(v22, v24);
        v21 = *(_DWORD *)(v20 + 20);
        goto LABEL_17;
      }
      if (v19 != *((_DWORD *)this + 7))
      {
LABEL_15:
        *v18 = v19 + 1;
        v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 2));
        v25 = *((_QWORD *)this + 4);
        v26 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v26 + 1;
        *(_QWORD *)(v25 + 8 * v26 + 8) = v20;
        v23 = *(unsigned int *)(v20 + 16);
        v21 = *(_DWORD *)(v20 + 20);
        v22 = (unsigned int *)(v20 + 16);
        v24 = v23 + 1;
        if ((_DWORD)v23 != v21)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    else
    {
      v19 = *((_DWORD *)this + 7);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v19 + 1);
    v18 = (int *)*((_QWORD *)this + 4);
    v19 = *v18;
    goto LABEL_15;
  }
LABEL_28:
  for (k = 0; ; v9 = k + v38)
  {
    v38 = v9 & v10;
    v39 = *(_QWORD *)(v5 + v38);
    v40 = ((v39 ^ v11) - 0x101010101010101) & ~(v39 ^ v11) & 0x8080808080808080;
    if (v40)
      break;
LABEL_33:
    if ((v39 & (~v39 << 6) & 0x8080808080808080) != 0)
    {
      v42 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert(v6, v7);
      v41 = *((_QWORD *)this + 19);
      v43 = v41 + 16 * v42;
      *(_QWORD *)v43 = a2;
      *(_DWORD *)(v43 + 8) = 0;
      return *(unsigned int *)(v41 + 16 * v42 + 8);
    }
    k += 8;
  }
  v41 = *((_QWORD *)this + 19);
  while (1)
  {
    v42 = (v38 + (__clz(__rbit64(v40)) >> 3)) & v10;
    if (*(_QWORD *)(v41 + 16 * v42) == a2)
      return *(unsigned int *)(v41 + 16 * v42 + 8);
    v40 &= v40 - 1;
    if (!v40)
      goto LABEL_33;
  }
}

void operations_research::sat::CumulativeConstraint::AddDemand(uint64_t *a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  google::protobuf::Arena *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::Arena *v18;
  int IntegerIndex;
  uint64_t v20;

  v8 = *a1;
  if (*(_DWORD *)(*a1 + 60) == 22)
  {
    v9 = *(_QWORD *)(v8 + 48);
    v11 = *(unsigned int *)(v9 + 16);
    v10 = (unsigned int *)(v9 + 16);
    v12 = v11 + 1;
    if ((_DWORD)v11 != *(_DWORD *)(v9 + 20))
      goto LABEL_8;
LABEL_7:
    google::protobuf::RepeatedField<int>::Reserve(v10, v12);
    goto LABEL_8;
  }
  operations_research::sat::ConstraintProto::clear_constraint(*a1);
  *(_DWORD *)(v8 + 60) = 22;
  v13 = *(_QWORD *)(v8 + 8);
  v14 = (google::protobuf::Arena *)(v13 & 0xFFFFFFFFFFFFFFFELL);
  if ((v13 & 1) != 0)
    v14 = *(google::protobuf::Arena **)v14;
  v9 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v14);
  *(_QWORD *)(v8 + 48) = v9;
  v11 = *(unsigned int *)(v9 + 16);
  v10 = (unsigned int *)(v9 + 16);
  v12 = v11 + 1;
  if ((_DWORD)v11 == *(_DWORD *)(v9 + 20))
    goto LABEL_7;
LABEL_8:
  *(_DWORD *)(*(_QWORD *)(v9 + 24) + 4 * v11) = a3;
  *(_DWORD *)(v9 + 16) = v12;
  v15 = *a1;
  if (*(_DWORD *)(*a1 + 60) == 22)
  {
    v16 = *(_QWORD *)(v15 + 48);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint(*a1);
    *(_DWORD *)(v15 + 60) = 22;
    v17 = *(_QWORD *)(v15 + 8);
    v18 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
    if ((v17 & 1) != 0)
      v18 = *(google::protobuf::Arena **)v18;
    v16 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v18);
    *(_QWORD *)(v15 + 48) = v16;
  }
  IntegerIndex = operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex((operations_research::sat::CpModelBuilder *)a1[1], a5);
  v20 = *(unsigned int *)(v16 + 40);
  if ((_DWORD)v20 == *(_DWORD *)(v16 + 44))
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v16 + 40), v20 + 1);
  *(_DWORD *)(*(_QWORD *)(v16 + 48) + 4 * v20) = IntegerIndex;
  *(_DWORD *)(v16 + 40) = v20 + 1;
}

uint64_t operations_research::sat::IntervalVar::WithName(int *a1, std::string *__str)
{
  uint64_t v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 8 * a1[2] + 8);
  v5 = (std::string **)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) != 0)
  {
    v7 = *(google::protobuf::Arena **)v7;
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
  }
  else
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      std::string::operator=(v8, __str);
      return *(_QWORD *)a1;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, (__int128 *)__str);
  return *(_QWORD *)a1;
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::AddEquality(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2, const operations_research::sat::LinearExpr *a3)
{
  operations_research::sat::CpModelBuilder *v5;
  int *v6;
  uint64_t v7;
  int v8;
  operations_research::sat::CpModelBuilder *v9;
  uint64_t v10;
  google::protobuf::Arena *v11;
  operations_research::sat::LinearConstraintProto *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  google::protobuf::Arena *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  google::protobuf::Arena *v29;

  v5 = this;
  v6 = (int *)*((_QWORD *)this + 7);
  if (!v6)
  {
    v8 = *((_DWORD *)this + 13);
LABEL_9:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v8 + 1);
    v6 = (int *)*((_QWORD *)v5 + 7);
    v8 = *v6;
LABEL_10:
    *v6 = v8 + 1;
    this = (operations_research::sat::CpModelBuilder *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*((google::protobuf::Arena **)v5 + 5));
    v9 = this;
    v13 = *((_QWORD *)v5 + 7);
    v14 = *((int *)v5 + 12);
    *((_DWORD *)v5 + 12) = v14 + 1;
    *(_QWORD *)(v13 + 8 * v14 + 8) = this;
    if (*((_DWORD *)this + 15) != 12)
      goto LABEL_4;
LABEL_11:
    v12 = (operations_research::sat::LinearConstraintProto *)*((_QWORD *)v9 + 6);
    goto LABEL_12;
  }
  v7 = *((int *)this + 12);
  v8 = *v6;
  if ((int)v7 >= *v6)
  {
    if (v8 != *((_DWORD *)this + 13))
      goto LABEL_10;
    goto LABEL_9;
  }
  *((_DWORD *)this + 12) = v7 + 1;
  v9 = *(operations_research::sat::CpModelBuilder **)&v6[2 * v7 + 2];
  if (*((_DWORD *)v9 + 15) == 12)
    goto LABEL_11;
LABEL_4:
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v10 = *((_QWORD *)v9 + 1);
  v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if ((v10 & 1) != 0)
    v11 = *(google::protobuf::Arena **)v11;
  this = (operations_research::sat::CpModelBuilder *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v11);
  v12 = this;
  *((_QWORD *)v9 + 6) = this;
LABEL_12:
  operations_research::sat::CpModelBuilder::FillLinearTerms(this, a2, a3, v12);
  v15 = *((_QWORD *)a3 + 6);
  v16 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)v9 + 15) == 12)
  {
    v17 = *((_QWORD *)v9 + 6);
    v18 = v15 - v16;
    v20 = *(unsigned int *)(v17 + 64);
    v19 = (unsigned int *)(v17 + 64);
    v21 = v20 + 1;
    if ((_DWORD)v20 != *(_DWORD *)(v17 + 68))
      goto LABEL_19;
LABEL_18:
    google::protobuf::RepeatedField<long long>::Reserve(v19, v21);
    goto LABEL_19;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v22 = *((_QWORD *)v9 + 1);
  v23 = (google::protobuf::Arena *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if ((v22 & 1) != 0)
    v23 = *(google::protobuf::Arena **)v23;
  v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v23);
  *((_QWORD *)v9 + 6) = v17;
  v18 = v15 - v16;
  v20 = *(unsigned int *)(v17 + 64);
  v19 = (unsigned int *)(v17 + 64);
  v21 = v20 + 1;
  if ((_DWORD)v20 == *(_DWORD *)(v17 + 68))
    goto LABEL_18;
LABEL_19:
  *(_QWORD *)(*(_QWORD *)(v17 + 72) + 8 * v20) = v18;
  *(_DWORD *)(v17 + 64) = v21;
  if (*((_DWORD *)v9 + 15) == 12)
  {
    v24 = *((_QWORD *)v9 + 6);
    v26 = *(unsigned int *)(v24 + 64);
    v25 = (unsigned int *)(v24 + 64);
    v27 = v26 + 1;
    if ((_DWORD)v26 != *(_DWORD *)(v24 + 68))
      goto LABEL_26;
    goto LABEL_25;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v28 = *((_QWORD *)v9 + 1);
  v29 = (google::protobuf::Arena *)(v28 & 0xFFFFFFFFFFFFFFFELL);
  if ((v28 & 1) != 0)
    v29 = *(google::protobuf::Arena **)v29;
  v24 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v29);
  *((_QWORD *)v9 + 6) = v24;
  v26 = *(unsigned int *)(v24 + 64);
  v25 = (unsigned int *)(v24 + 64);
  v27 = v26 + 1;
  if ((_DWORD)v26 == *(_DWORD *)(v24 + 68))
LABEL_25:
    google::protobuf::RepeatedField<long long>::Reserve(v25, v27);
LABEL_26:
  *(_QWORD *)(*(_QWORD *)(v24 + 72) + 8 * v26) = v18;
  *(_DWORD *)(v24 + 64) = v27;
  return v9;
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::NewIntVar(operations_research::sat::CpModelBuilder *this, const operations_research::Domain *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _BYTE v25[16];

  v4 = *((int *)this + 6);
  v5 = *((_DWORD *)this + 6);
  v6 = (int *)*((_QWORD *)this + 4);
  if (!v6)
  {
    v7 = *((_DWORD *)this + 7);
LABEL_10:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v7 + 1);
    v6 = (int *)*((_QWORD *)this + 4);
    v7 = *v6;
    goto LABEL_11;
  }
  v7 = *v6;
  if ((int)v4 < *v6)
  {
    *((_DWORD *)this + 6) = v5 + 1;
    v8 = *(_QWORD *)&v6[2 * v4 + 2];
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 1) != 0)
      v10 = (uint64_t *)*((_QWORD *)a2 + 1);
    else
      v10 = (uint64_t *)((char *)a2 + 8);
    if (v9 < 2)
      goto LABEL_15;
    goto LABEL_17;
  }
  if (v7 == *((_DWORD *)this + 7))
    goto LABEL_10;
LABEL_11:
  *v6 = v7 + 1;
  v8 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 2));
  v11 = *((_QWORD *)this + 4);
  v12 = *((int *)this + 6);
  *((_DWORD *)this + 6) = v12 + 1;
  *(_QWORD *)(v11 + 8 * v12 + 8) = v8;
  v9 = *(_QWORD *)a2;
  v15 = (uint64_t *)*((_QWORD *)a2 + 1);
  v14 = (char *)a2 + 8;
  v13 = v15;
  if ((v9 & 1) != 0)
    v10 = v13;
  else
    v10 = (uint64_t *)v14;
  if (v9 < 2)
    goto LABEL_15;
LABEL_17:
  v17 = &v10[2 * (v9 >> 1)];
  v18 = *(_DWORD *)(v8 + 16);
  do
  {
    v19 = *v10;
    v20 = *(_DWORD *)(v8 + 20);
    v21 = v18 + 1;
    if (v18 == v20)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v8 + 16), v18 + 1);
      v20 = *(_DWORD *)(v8 + 20);
    }
    v22 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v22 + 8 * v18) = v19;
    *(_DWORD *)(v8 + 16) = v21;
    v23 = v10[1];
    v18 += 2;
    if (v21 == v20)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v8 + 16), v18);
      v22 = *(_QWORD *)(v8 + 24);
    }
    *(_QWORD *)(v22 + 8 * v21) = v23;
    *(_DWORD *)(v8 + 16) = v18;
    v10 += 2;
  }
  while (v10 != v17);
LABEL_15:
  if (v5 < 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v25, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model.cc", 74);
    v24 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Check failed: RefIsPositive(index) ", 35);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v25);
  }
  return this;
}

void sub_22DA5A44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::NewBoolVar(operations_research::sat::CpModelBuilder *this)
{
  uint64_t v2;
  int *v3;
  int v4;
  unint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v2 = *((int *)this + 6);
  v3 = (int *)*((_QWORD *)this + 4);
  if (!v3)
  {
    v4 = *((_DWORD *)this + 7);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v4 + 1);
    v3 = (int *)*((_QWORD *)this + 4);
    v4 = *v3;
LABEL_8:
    *v3 = v4 + 1;
    v5 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)this + 2));
    v10 = *((_QWORD *)this + 4);
    v11 = *((int *)this + 6);
    *((_DWORD *)this + 6) = v11 + 1;
    *(_QWORD *)(v10 + 8 * v11 + 8) = v5;
    v8 = *(unsigned int *)(v5 + 16);
    v6 = *(_DWORD *)(v5 + 20);
    v7 = (unsigned int *)(v5 + 16);
    v9 = v8 + 1;
    if ((_DWORD)v8 != v6)
      goto LABEL_10;
    goto LABEL_9;
  }
  v4 = *v3;
  if ((int)v2 >= *v3)
  {
    if (v4 != *((_DWORD *)this + 7))
      goto LABEL_8;
    goto LABEL_7;
  }
  ++*((_DWORD *)this + 6);
  v5 = *(_QWORD *)&v3[2 * v2 + 2];
  v8 = *(unsigned int *)(v5 + 16);
  v6 = *(_DWORD *)(v5 + 20);
  v7 = (unsigned int *)(v5 + 16);
  v9 = v8 + 1;
  if ((_DWORD)v8 == v6)
  {
LABEL_9:
    google::protobuf::RepeatedField<long long>::Reserve(v7, v9);
    v6 = *(_DWORD *)(v5 + 20);
  }
LABEL_10:
  v12 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v12 + 8 * v8) = 0;
  *(_DWORD *)(v5 + 16) = v9;
  v13 = v8 + 2;
  if (v9 == v6)
  {
    google::protobuf::RepeatedField<long long>::Reserve(v7, v13);
    v12 = *(_QWORD *)(v5 + 24);
  }
  *(_QWORD *)(v12 + 8 * v9) = 1;
  *v7 = v13;
  return this;
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::NewConstant(operations_research::sat::CpModelBuilder *this, uint64_t a2)
{
  _QWORD *v4;
  _BYTE v5[16];

  if ((operations_research::sat::CpModelBuilder::IndexFromConstant(this, a2) & 0x80000000) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v5, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model.cc", 74);
    v4 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: RefIsPositive(index) ", 35);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v5);
  }
  return this;
}

void sub_22DA5A5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::CpModelBuilder::NewIntervalVar(operations_research::sat::CpModelBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14;
  uint64_t v15;

  v14 = operations_research::sat::CpModelBuilder::IndexFromConstant(a1, 1);
  return operations_research::sat::CpModelBuilder::NewOptionalIntervalVar((uint64_t)a1, a2, a3, a4, a5, a6, a7, v15, (uint64_t)a1, v14);
}

uint64_t operations_research::sat::CpModelBuilder::NewOptionalIntervalVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  google::protobuf::Arena *v26;

  v14 = *(int *)(a1 + 48);
  v15 = *(int **)(a1 + 56);
  if (!v15)
  {
    v16 = *(_DWORD *)(a1 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 40), v16 + 1);
    v15 = *(int **)(a1 + 56);
    v16 = *v15;
LABEL_8:
    *v15 = v16 + 1;
    v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(a1 + 40));
    v22 = *(_QWORD *)(a1 + 56);
    v23 = *(int *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v23 + 1;
    *(_QWORD *)(v22 + 8 * v23 + 8) = v17;
    v18 = a10;
    v20 = *(unsigned int *)(v17 + 16);
    v19 = (unsigned int *)(v17 + 16);
    v21 = v20 + 1;
    if ((_DWORD)v20 != *(_DWORD *)(v17 + 20))
      goto LABEL_10;
    goto LABEL_9;
  }
  v16 = *v15;
  if ((int)v14 >= *v15)
  {
    if (v16 != *(_DWORD *)(a1 + 52))
      goto LABEL_8;
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 48);
  v17 = *(_QWORD *)&v15[2 * v14 + 2];
  v18 = a10;
  v20 = *(unsigned int *)(v17 + 16);
  v19 = (unsigned int *)(v17 + 16);
  v21 = v20 + 1;
  if ((_DWORD)v20 == *(_DWORD *)(v17 + 20))
LABEL_9:
    google::protobuf::RepeatedField<int>::Reserve(v19, v21);
LABEL_10:
  *(_DWORD *)(*(_QWORD *)(v17 + 24) + 4 * v20) = v18;
  *(_DWORD *)(v17 + 16) = v21;
  if (*(_DWORD *)(v17 + 60) == 19)
  {
    v24 = *(_DWORD **)(v17 + 48);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint(v17);
    *(_DWORD *)(v17 + 60) = 19;
    v25 = *(_QWORD *)(v17 + 8);
    v26 = (google::protobuf::Arena *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if ((v25 & 1) != 0)
      v26 = *(google::protobuf::Arena **)v26;
    v24 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntervalConstraintProto>(v26);
    *(_QWORD *)(v17 + 48) = v24;
  }
  v24[4] = operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex((operations_research::sat::CpModelBuilder *)a1, a3);
  v24[6] = operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex((operations_research::sat::CpModelBuilder *)a1, a5);
  v24[5] = operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex((operations_research::sat::CpModelBuilder *)a1, a7);
  return a1;
}

unint64_t operations_research::sat::CpModelBuilder::AddBoolAnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  google::protobuf::Arena *v20;

  v6 = *(int **)(a1 + 56);
  if (!v6)
  {
    v8 = *(_DWORD *)(a1 + 52);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 40), v8 + 1);
    v6 = *(int **)(a1 + 56);
    v8 = *v6;
    goto LABEL_8;
  }
  v7 = *(int *)(a1 + 48);
  v8 = *v6;
  if ((int)v7 < *v6)
  {
    *(_DWORD *)(a1 + 48) = v7 + 1;
    v9 = *(_QWORD *)&v6[2 * v7 + 2];
    if (!a3)
      return v9;
    goto LABEL_9;
  }
  if (v8 == *(_DWORD *)(a1 + 52))
    goto LABEL_7;
LABEL_8:
  *v6 = v8 + 1;
  v9 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(a1 + 40));
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(int *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = v9;
  if (a3)
  {
LABEL_9:
    v12 = 16 * a3;
    v13 = (int *)(a2 + 8);
    while (*(_DWORD *)(v9 + 60) == 4)
    {
      v14 = *(_QWORD *)(v9 + 48);
      v15 = *v13;
      v17 = *(unsigned int *)(v14 + 16);
      v16 = (unsigned int *)(v14 + 16);
      v18 = v17 + 1;
      if ((_DWORD)v17 == *(_DWORD *)(v14 + 20))
        goto LABEL_17;
LABEL_10:
      *(_DWORD *)(*(_QWORD *)(v14 + 24) + 4 * v17) = v15;
      *(_DWORD *)(v14 + 16) = v18;
      v13 += 4;
      v12 -= 16;
      if (!v12)
        return v9;
    }
    operations_research::sat::ConstraintProto::clear_constraint(v9);
    *(_DWORD *)(v9 + 60) = 4;
    v19 = *(_QWORD *)(v9 + 8);
    v20 = (google::protobuf::Arena *)(v19 & 0xFFFFFFFFFFFFFFFELL);
    if ((v19 & 1) != 0)
      v20 = *(google::protobuf::Arena **)v20;
    v14 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v20);
    *(_QWORD *)(v9 + 48) = v14;
    v15 = *v13;
    v17 = *(unsigned int *)(v14 + 16);
    v16 = (unsigned int *)(v14 + 16);
    v18 = v17 + 1;
    if ((_DWORD)v17 != *(_DWORD *)(v14 + 20))
      goto LABEL_10;
LABEL_17:
    google::protobuf::RepeatedField<int>::Reserve(v16, v18);
    goto LABEL_10;
  }
  return v9;
}

void operations_research::sat::CpModelBuilder::FillLinearTerms(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2, const operations_research::sat::LinearExpr *a3, operations_research::sat::LinearConstraintProto *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;

  v7 = *(_QWORD *)a2;
  v8 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v8)
  {
    v9 = *((_DWORD *)a4 + 4);
    do
    {
      v10 = *(_DWORD *)(v7 + 8);
      if (v9 == *((_DWORD *)a4 + 5))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)a4 + 4, v9 + 1);
      *(_DWORD *)(*((_QWORD *)a4 + 3) + 4 * v9) = v10;
      *((_DWORD *)a4 + 4) = v9 + 1;
      v7 += 16;
      ++v9;
    }
    while (v7 != v8);
  }
  v11 = (uint64_t *)*((_QWORD *)a2 + 3);
  v12 = (uint64_t *)*((_QWORD *)a2 + 4);
  if (v11 != v12)
  {
    v13 = *((_DWORD *)a4 + 10);
    do
    {
      v14 = *v11;
      if (v13 == *((_DWORD *)a4 + 11))
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)a4 + 10, v13 + 1);
      *(_QWORD *)(*((_QWORD *)a4 + 6) + 8 * v13) = v14;
      *((_DWORD *)a4 + 10) = v13 + 1;
      ++v11;
      ++v13;
    }
    while (v11 != v12);
  }
  v15 = *(_QWORD *)a3;
  v16 = *((_QWORD *)a3 + 1);
  if (*(_QWORD *)a3 != v16)
  {
    v17 = *((_DWORD *)a4 + 4);
    do
    {
      v18 = *(_DWORD *)(v15 + 8);
      if (v17 == *((_DWORD *)a4 + 5))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)a4 + 4, v17 + 1);
      *(_DWORD *)(*((_QWORD *)a4 + 3) + 4 * v17) = v18;
      *((_DWORD *)a4 + 4) = v17 + 1;
      v15 += 16;
      ++v17;
    }
    while (v15 != v16);
  }
  v19 = (uint64_t *)*((_QWORD *)a3 + 3);
  v20 = (uint64_t *)*((_QWORD *)a3 + 4);
  if (v19 != v20)
  {
    v21 = *((_DWORD *)a4 + 10);
    do
    {
      v22 = *v19;
      if (v21 == *((_DWORD *)a4 + 11))
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)a4 + 10, v21 + 1);
      *(_QWORD *)(*((_QWORD *)a4 + 6) + 8 * v21) = -v22;
      *((_DWORD *)a4 + 10) = v21 + 1;
      ++v19;
      ++v21;
    }
    while (v19 != v20);
  }
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::AddLessOrEqual(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2, const operations_research::sat::LinearExpr *a3)
{
  operations_research::sat::CpModelBuilder *v5;
  int *v6;
  uint64_t v7;
  int v8;
  operations_research::sat::CpModelBuilder *v9;
  uint64_t v10;
  google::protobuf::Arena *v11;
  operations_research::sat::LinearConstraintProto *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  google::protobuf::Arena *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  google::protobuf::Arena *v28;

  v5 = this;
  v6 = (int *)*((_QWORD *)this + 7);
  if (!v6)
  {
    v8 = *((_DWORD *)this + 13);
LABEL_9:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v8 + 1);
    v6 = (int *)*((_QWORD *)v5 + 7);
    v8 = *v6;
LABEL_10:
    *v6 = v8 + 1;
    this = (operations_research::sat::CpModelBuilder *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*((google::protobuf::Arena **)v5 + 5));
    v9 = this;
    v13 = *((_QWORD *)v5 + 7);
    v14 = *((int *)v5 + 12);
    *((_DWORD *)v5 + 12) = v14 + 1;
    *(_QWORD *)(v13 + 8 * v14 + 8) = this;
    if (*((_DWORD *)this + 15) != 12)
      goto LABEL_4;
LABEL_11:
    v12 = (operations_research::sat::LinearConstraintProto *)*((_QWORD *)v9 + 6);
    goto LABEL_12;
  }
  v7 = *((int *)this + 12);
  v8 = *v6;
  if ((int)v7 >= *v6)
  {
    if (v8 != *((_DWORD *)this + 13))
      goto LABEL_10;
    goto LABEL_9;
  }
  *((_DWORD *)this + 12) = v7 + 1;
  v9 = *(operations_research::sat::CpModelBuilder **)&v6[2 * v7 + 2];
  if (*((_DWORD *)v9 + 15) == 12)
    goto LABEL_11;
LABEL_4:
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v10 = *((_QWORD *)v9 + 1);
  v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if ((v10 & 1) != 0)
    v11 = *(google::protobuf::Arena **)v11;
  this = (operations_research::sat::CpModelBuilder *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v11);
  v12 = this;
  *((_QWORD *)v9 + 6) = this;
LABEL_12:
  operations_research::sat::CpModelBuilder::FillLinearTerms(this, a2, a3, v12);
  v15 = *((_QWORD *)a3 + 6);
  v16 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)v9 + 15) == 12)
  {
    v17 = *((_QWORD *)v9 + 6);
    v19 = *(unsigned int *)(v17 + 64);
    v18 = (unsigned int *)(v17 + 64);
    v20 = v19 + 1;
    if ((_DWORD)v19 != *(_DWORD *)(v17 + 68))
      goto LABEL_19;
LABEL_18:
    google::protobuf::RepeatedField<long long>::Reserve(v18, v20);
    goto LABEL_19;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v21 = *((_QWORD *)v9 + 1);
  v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
  if ((v21 & 1) != 0)
    v22 = *(google::protobuf::Arena **)v22;
  v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v22);
  *((_QWORD *)v9 + 6) = v17;
  v19 = *(unsigned int *)(v17 + 64);
  v18 = (unsigned int *)(v17 + 64);
  v20 = v19 + 1;
  if ((_DWORD)v19 == *(_DWORD *)(v17 + 68))
    goto LABEL_18;
LABEL_19:
  *(_QWORD *)(*(_QWORD *)(v17 + 72) + 8 * v19) = 0x8000000000000000;
  *(_DWORD *)(v17 + 64) = v20;
  if (*((_DWORD *)v9 + 15) == 12)
  {
    v23 = *((_QWORD *)v9 + 6);
    v25 = *(unsigned int *)(v23 + 64);
    v24 = (unsigned int *)(v23 + 64);
    v26 = v25 + 1;
    if ((_DWORD)v25 != *(_DWORD *)(v23 + 68))
      goto LABEL_26;
    goto LABEL_25;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v27 = *((_QWORD *)v9 + 1);
  v28 = (google::protobuf::Arena *)(v27 & 0xFFFFFFFFFFFFFFFELL);
  if ((v27 & 1) != 0)
    v28 = *(google::protobuf::Arena **)v28;
  v23 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v28);
  *((_QWORD *)v9 + 6) = v23;
  v25 = *(unsigned int *)(v23 + 64);
  v24 = (unsigned int *)(v23 + 64);
  v26 = v25 + 1;
  if ((_DWORD)v25 == *(_DWORD *)(v23 + 68))
LABEL_25:
    google::protobuf::RepeatedField<long long>::Reserve(v24, v26);
LABEL_26:
  *(_QWORD *)(*(_QWORD *)(v23 + 72) + 8 * v25) = v15 - v16;
  *(_DWORD *)(v23 + 64) = v26;
  return v9;
}

operations_research::sat::CpModelBuilder *operations_research::sat::CpModelBuilder::AddNotEqual(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2, const operations_research::sat::LinearExpr *a3)
{
  operations_research::sat::CpModelBuilder *v5;
  int *v6;
  uint64_t v7;
  int v8;
  operations_research::sat::CpModelBuilder *v9;
  uint64_t v10;
  google::protobuf::Arena *v11;
  operations_research::sat::LinearConstraintProto *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  google::protobuf::Arena *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  google::protobuf::Arena *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  google::protobuf::Arena *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  google::protobuf::Arena *v43;

  v5 = this;
  v6 = (int *)*((_QWORD *)this + 7);
  if (!v6)
  {
    v8 = *((_DWORD *)this + 13);
LABEL_9:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v8 + 1);
    v6 = (int *)*((_QWORD *)v5 + 7);
    v8 = *v6;
LABEL_10:
    *v6 = v8 + 1;
    this = (operations_research::sat::CpModelBuilder *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*((google::protobuf::Arena **)v5 + 5));
    v9 = this;
    v13 = *((_QWORD *)v5 + 7);
    v14 = *((int *)v5 + 12);
    *((_DWORD *)v5 + 12) = v14 + 1;
    *(_QWORD *)(v13 + 8 * v14 + 8) = this;
    if (*((_DWORD *)this + 15) != 12)
      goto LABEL_4;
LABEL_11:
    v12 = (operations_research::sat::LinearConstraintProto *)*((_QWORD *)v9 + 6);
    goto LABEL_12;
  }
  v7 = *((int *)this + 12);
  v8 = *v6;
  if ((int)v7 >= *v6)
  {
    if (v8 != *((_DWORD *)this + 13))
      goto LABEL_10;
    goto LABEL_9;
  }
  *((_DWORD *)this + 12) = v7 + 1;
  v9 = *(operations_research::sat::CpModelBuilder **)&v6[2 * v7 + 2];
  if (*((_DWORD *)v9 + 15) == 12)
    goto LABEL_11;
LABEL_4:
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v10 = *((_QWORD *)v9 + 1);
  v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if ((v10 & 1) != 0)
    v11 = *(google::protobuf::Arena **)v11;
  this = (operations_research::sat::CpModelBuilder *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v11);
  v12 = this;
  *((_QWORD *)v9 + 6) = this;
LABEL_12:
  operations_research::sat::CpModelBuilder::FillLinearTerms(this, a2, a3, v12);
  v15 = *((_QWORD *)a3 + 6);
  v16 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)v9 + 15) == 12)
  {
    v17 = *((_QWORD *)v9 + 6);
    v19 = *(unsigned int *)(v17 + 64);
    v18 = (unsigned int *)(v17 + 64);
    v20 = v19 + 1;
    if ((_DWORD)v19 != *(_DWORD *)(v17 + 68))
      goto LABEL_19;
LABEL_18:
    google::protobuf::RepeatedField<long long>::Reserve(v18, v20);
    goto LABEL_19;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v21 = *((_QWORD *)v9 + 1);
  v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
  if ((v21 & 1) != 0)
    v22 = *(google::protobuf::Arena **)v22;
  v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v22);
  *((_QWORD *)v9 + 6) = v17;
  v19 = *(unsigned int *)(v17 + 64);
  v18 = (unsigned int *)(v17 + 64);
  v20 = v19 + 1;
  if ((_DWORD)v19 == *(_DWORD *)(v17 + 68))
    goto LABEL_18;
LABEL_19:
  v23 = v15 - v16;
  *(_QWORD *)(*(_QWORD *)(v17 + 72) + 8 * v19) = 0x8000000000000000;
  *(_DWORD *)(v17 + 64) = v20;
  if (*((_DWORD *)v9 + 15) == 12)
  {
    v24 = *((_QWORD *)v9 + 6);
    v25 = v23 - 1;
    v27 = *(unsigned int *)(v24 + 64);
    v26 = (unsigned int *)(v24 + 64);
    v28 = v27 + 1;
    if ((_DWORD)v27 != *(_DWORD *)(v24 + 68))
      goto LABEL_26;
LABEL_25:
    google::protobuf::RepeatedField<long long>::Reserve(v26, v28);
    goto LABEL_26;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v29 = *((_QWORD *)v9 + 1);
  v30 = (google::protobuf::Arena *)(v29 & 0xFFFFFFFFFFFFFFFELL);
  if ((v29 & 1) != 0)
    v30 = *(google::protobuf::Arena **)v30;
  v24 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v30);
  *((_QWORD *)v9 + 6) = v24;
  v25 = v23 - 1;
  v27 = *(unsigned int *)(v24 + 64);
  v26 = (unsigned int *)(v24 + 64);
  v28 = v27 + 1;
  if ((_DWORD)v27 == *(_DWORD *)(v24 + 68))
    goto LABEL_25;
LABEL_26:
  *(_QWORD *)(*(_QWORD *)(v24 + 72) + 8 * v27) = v25;
  *(_DWORD *)(v24 + 64) = v28;
  if (*((_DWORD *)v9 + 15) == 12)
  {
    v31 = *((_QWORD *)v9 + 6);
    v32 = v23 + 1;
    v34 = *(unsigned int *)(v31 + 64);
    v33 = (unsigned int *)(v31 + 64);
    v35 = v34 + 1;
    if ((_DWORD)v34 != *(_DWORD *)(v31 + 68))
      goto LABEL_33;
LABEL_32:
    google::protobuf::RepeatedField<long long>::Reserve(v33, v35);
    goto LABEL_33;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v36 = *((_QWORD *)v9 + 1);
  v37 = (google::protobuf::Arena *)(v36 & 0xFFFFFFFFFFFFFFFELL);
  if ((v36 & 1) != 0)
    v37 = *(google::protobuf::Arena **)v37;
  v31 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v37);
  *((_QWORD *)v9 + 6) = v31;
  v32 = v23 + 1;
  v34 = *(unsigned int *)(v31 + 64);
  v33 = (unsigned int *)(v31 + 64);
  v35 = v34 + 1;
  if ((_DWORD)v34 == *(_DWORD *)(v31 + 68))
    goto LABEL_32;
LABEL_33:
  *(_QWORD *)(*(_QWORD *)(v31 + 72) + 8 * v34) = v32;
  *(_DWORD *)(v31 + 64) = v35;
  if (*((_DWORD *)v9 + 15) == 12)
  {
    v38 = *((_QWORD *)v9 + 6);
    v40 = *(unsigned int *)(v38 + 64);
    v39 = (unsigned int *)(v38 + 64);
    v41 = v40 + 1;
    if ((_DWORD)v40 != *(_DWORD *)(v38 + 68))
      goto LABEL_40;
    goto LABEL_39;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v9);
  *((_DWORD *)v9 + 15) = 12;
  v42 = *((_QWORD *)v9 + 1);
  v43 = (google::protobuf::Arena *)(v42 & 0xFFFFFFFFFFFFFFFELL);
  if ((v42 & 1) != 0)
    v43 = *(google::protobuf::Arena **)v43;
  v38 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v43);
  *((_QWORD *)v9 + 6) = v38;
  v40 = *(unsigned int *)(v38 + 64);
  v39 = (unsigned int *)(v38 + 64);
  v41 = v40 + 1;
  if ((_DWORD)v40 == *(_DWORD *)(v38 + 68))
LABEL_39:
    google::protobuf::RepeatedField<long long>::Reserve(v39, v41);
LABEL_40:
  *(_QWORD *)(*(_QWORD *)(v38 + 72) + 8 * v40) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(v38 + 64) = v41;
  return v9;
}

unint64_t operations_research::sat::CpModelBuilder::AddCumulative(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  google::protobuf::Arena *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(int **)(a1 + 56);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 52);
LABEL_9:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 40), v7 + 1);
    v5 = *(int **)(a1 + 56);
    v7 = *v5;
LABEL_10:
    *v5 = v7 + 1;
    v8 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(a1 + 40));
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(int *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13 + 1;
    *(_QWORD *)(v12 + 8 * v13 + 8) = v8;
    if (*(_DWORD *)(v8 + 60) != 22)
      goto LABEL_4;
LABEL_11:
    v11 = *(_QWORD *)(v8 + 48);
    goto LABEL_12;
  }
  v6 = *(int *)(a1 + 48);
  v7 = *v5;
  if ((int)v6 >= *v5)
  {
    if (v7 != *(_DWORD *)(a1 + 52))
      goto LABEL_10;
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 48) = v6 + 1;
  v8 = *(_QWORD *)&v5[2 * v6 + 2];
  if (*(_DWORD *)(v8 + 60) == 22)
    goto LABEL_11;
LABEL_4:
  operations_research::sat::ConstraintProto::clear_constraint(v8);
  *(_DWORD *)(v8 + 60) = 22;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = (google::protobuf::Arena *)(v9 & 0xFFFFFFFFFFFFFFFELL);
  if ((v9 & 1) != 0)
    v10 = *(google::protobuf::Arena **)v10;
  v11 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v10);
  *(_QWORD *)(v8 + 48) = v11;
LABEL_12:
  *(_DWORD *)(v11 + 60) = operations_research::sat::CpModelBuilder::GetOrCreateIntegerIndex((operations_research::sat::CpModelBuilder *)a1, a3);
  return v8;
}

double operations_research::sat::CpModelBuilder::Minimize(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2)
{
  operations_research::sat::CpObjectiveProto *v4;
  uint64_t v5;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  google::protobuf::Arena *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  google::protobuf::Arena *v24;
  uint64_t v25;
  uint64_t v26;
  google::protobuf::Arena *v27;
  double result;

  v4 = (operations_research::sat::CpObjectiveProto *)*((_QWORD *)this + 15);
  if (!v4)
  {
    v5 = *((_QWORD *)this + 1);
    v6 = (google::protobuf::Arena *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 1) != 0)
      v6 = *(google::protobuf::Arena **)v6;
    v4 = (operations_research::sat::CpObjectiveProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v6);
    *((_QWORD *)this + 15) = v4;
  }
  operations_research::sat::CpObjectiveProto::Clear(v4);
  v7 = *(_QWORD *)a2;
  v8 = *((_QWORD *)a2 + 1);
  while (v7 != v8)
  {
    v9 = *((_QWORD *)this + 15);
    if (v9)
    {
      v10 = *(_DWORD *)(v7 + 8);
      v12 = *(unsigned int *)(v9 + 16);
      v11 = (unsigned int *)(v9 + 16);
      v13 = v12 + 1;
      if ((_DWORD)v12 != *(_DWORD *)(v9 + 20))
        goto LABEL_6;
LABEL_14:
      google::protobuf::RepeatedField<int>::Reserve(v11, v13);
      goto LABEL_6;
    }
    v14 = *((_QWORD *)this + 1);
    v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    if ((v14 & 1) != 0)
      v15 = *(google::protobuf::Arena **)v15;
    v9 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v15);
    *((_QWORD *)this + 15) = v9;
    v10 = *(_DWORD *)(v7 + 8);
    v12 = *(unsigned int *)(v9 + 16);
    v11 = (unsigned int *)(v9 + 16);
    v13 = v12 + 1;
    if ((_DWORD)v12 == *(_DWORD *)(v9 + 20))
      goto LABEL_14;
LABEL_6:
    *(_DWORD *)(*(_QWORD *)(v9 + 24) + 4 * v12) = v10;
    *(_DWORD *)(v9 + 16) = v13;
    v7 += 16;
  }
  v16 = (uint64_t *)*((_QWORD *)a2 + 3);
  v17 = (uint64_t *)*((_QWORD *)a2 + 4);
  while (v16 != v17)
  {
    v18 = *v16;
    v19 = *((_QWORD *)this + 15);
    if (v19)
    {
      v21 = *(unsigned int *)(v19 + 40);
      v20 = (unsigned int *)(v19 + 40);
      v22 = v21 + 1;
      if ((_DWORD)v21 != *(_DWORD *)(v19 + 44))
        goto LABEL_16;
LABEL_24:
      google::protobuf::RepeatedField<long long>::Reserve(v20, v22);
      goto LABEL_16;
    }
    v23 = *((_QWORD *)this + 1);
    v24 = (google::protobuf::Arena *)(v23 & 0xFFFFFFFFFFFFFFFELL);
    if ((v23 & 1) != 0)
      v24 = *(google::protobuf::Arena **)v24;
    v19 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v24);
    *((_QWORD *)this + 15) = v19;
    v21 = *(unsigned int *)(v19 + 40);
    v20 = (unsigned int *)(v19 + 40);
    v22 = v21 + 1;
    if ((_DWORD)v21 == *(_DWORD *)(v19 + 44))
      goto LABEL_24;
LABEL_16:
    *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v21) = v18;
    *(_DWORD *)(v19 + 40) = v22;
    ++v16;
  }
  v25 = *((_QWORD *)this + 15);
  if (!v25)
  {
    v26 = *((_QWORD *)this + 1);
    v27 = (google::protobuf::Arena *)(v26 & 0xFFFFFFFFFFFFFFFELL);
    if ((v26 & 1) != 0)
      v27 = *(google::protobuf::Arena **)v27;
    v25 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v27);
    *((_QWORD *)this + 15) = v25;
  }
  result = (double)*((uint64_t *)a2 + 6);
  *(double *)(v25 + 88) = result;
  return result;
}

double operations_research::sat::CpModelBuilder::Maximize(operations_research::sat::CpModelBuilder *this, const operations_research::sat::LinearExpr *a2)
{
  operations_research::sat::CpObjectiveProto *v4;
  uint64_t v5;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  google::protobuf::Arena *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  google::protobuf::Arena *v24;
  uint64_t v25;
  uint64_t v26;
  google::protobuf::Arena *v27;
  double result;

  v4 = (operations_research::sat::CpObjectiveProto *)*((_QWORD *)this + 15);
  if (!v4)
  {
    v5 = *((_QWORD *)this + 1);
    v6 = (google::protobuf::Arena *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 1) != 0)
      v6 = *(google::protobuf::Arena **)v6;
    v4 = (operations_research::sat::CpObjectiveProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v6);
    *((_QWORD *)this + 15) = v4;
  }
  operations_research::sat::CpObjectiveProto::Clear(v4);
  v7 = *(_QWORD *)a2;
  v8 = *((_QWORD *)a2 + 1);
  while (v7 != v8)
  {
    v9 = *((_QWORD *)this + 15);
    if (v9)
    {
      v10 = *(_DWORD *)(v7 + 8);
      v12 = *(unsigned int *)(v9 + 16);
      v11 = (unsigned int *)(v9 + 16);
      v13 = v12 + 1;
      if ((_DWORD)v12 != *(_DWORD *)(v9 + 20))
        goto LABEL_6;
LABEL_14:
      google::protobuf::RepeatedField<int>::Reserve(v11, v13);
      goto LABEL_6;
    }
    v14 = *((_QWORD *)this + 1);
    v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    if ((v14 & 1) != 0)
      v15 = *(google::protobuf::Arena **)v15;
    v9 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v15);
    *((_QWORD *)this + 15) = v9;
    v10 = *(_DWORD *)(v7 + 8);
    v12 = *(unsigned int *)(v9 + 16);
    v11 = (unsigned int *)(v9 + 16);
    v13 = v12 + 1;
    if ((_DWORD)v12 == *(_DWORD *)(v9 + 20))
      goto LABEL_14;
LABEL_6:
    *(_DWORD *)(*(_QWORD *)(v9 + 24) + 4 * v12) = v10;
    *(_DWORD *)(v9 + 16) = v13;
    v7 += 16;
  }
  v16 = (uint64_t *)*((_QWORD *)a2 + 3);
  v17 = (uint64_t *)*((_QWORD *)a2 + 4);
  while (v16 != v17)
  {
    v18 = *v16;
    v19 = *((_QWORD *)this + 15);
    if (v19)
    {
      v21 = *(unsigned int *)(v19 + 40);
      v20 = (unsigned int *)(v19 + 40);
      v22 = v21 + 1;
      if ((_DWORD)v21 != *(_DWORD *)(v19 + 44))
        goto LABEL_16;
LABEL_24:
      google::protobuf::RepeatedField<long long>::Reserve(v20, v22);
      goto LABEL_16;
    }
    v23 = *((_QWORD *)this + 1);
    v24 = (google::protobuf::Arena *)(v23 & 0xFFFFFFFFFFFFFFFELL);
    if ((v23 & 1) != 0)
      v24 = *(google::protobuf::Arena **)v24;
    v19 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v24);
    *((_QWORD *)this + 15) = v19;
    v21 = *(unsigned int *)(v19 + 40);
    v20 = (unsigned int *)(v19 + 40);
    v22 = v21 + 1;
    if ((_DWORD)v21 == *(_DWORD *)(v19 + 44))
      goto LABEL_24;
LABEL_16:
    *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v21) = -v18;
    *(_DWORD *)(v19 + 40) = v22;
    ++v16;
  }
  v25 = *((_QWORD *)this + 15);
  if (!v25)
  {
    v26 = *((_QWORD *)this + 1);
    v27 = (google::protobuf::Arena *)(v26 & 0xFFFFFFFFFFFFFFFELL);
    if ((v26 & 1) != 0)
      v27 = *(google::protobuf::Arena **)v27;
    v25 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v27);
    *((_QWORD *)this + 15) = v25;
  }
  result = (double)(uint64_t)-*((_QWORD *)a2 + 6);
  *(double *)(v25 + 88) = result;
  *(_QWORD *)(v25 + 96) = 0xBFF0000000000000;
  return result;
}

uint64_t operations_research::sat::SolutionIntegerValue(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  unint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = a2[6];
  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5)
  {
    v6 = v5 >> 4;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = a2[3];
    if (v6 <= 1)
      v6 = 1;
    if (v6 < 2)
    {
      v9 = 0;
LABEL_9:
      v14 = (int *)(v4 + 16 * v9 + 8);
      v15 = (uint64_t *)(v8 + 8 * v9);
      v16 = v6 - v9;
      do
      {
        v17 = *v14;
        v14 += 4;
        v18 = *(_QWORD *)(v7 + 8 * v17);
        v19 = *v15++;
        result += v19 * v18;
        --v16;
      }
      while (v16);
      return result;
    }
    v10 = 0;
    v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v11 = (int *)(v4 + 24);
    v12 = (_QWORD *)(v8 + 8);
    v13 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      result += *(v12 - 1) * *(_QWORD *)(v7 + 8 * *(v11 - 4));
      v10 += *v12 * *(_QWORD *)(v7 + 8 * *v11);
      v11 += 8;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    result += v10;
    if (v6 != v9)
      goto LABEL_9;
  }
  return result;
}

BOOL operations_research::sat::SolutionBooleanValue(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;

  v3 = a3;
  if ((a3 & 0x80000000) != 0)
    v3 = a3 ^ 0xFFFFFFFFLL;
  return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v3) == (((unint64_t)(a3 & 0x80000000) >> 31) ^ 1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(_QWORD *)(*(_QWORD *)(result + 8) + 16 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_OWORD *)(v25 + 16 * v18) = *(_OWORD *)(v25 + 16 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_OWORD *)(v25 + 16 * v14);
          *(_OWORD *)(v25 + 16 * v14) = *(_OWORD *)(v25 + 16 * v18);
          *(_OWORD *)(*(_QWORD *)(result + 8) + 16 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[8 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_QWORD *)&a1[1][8 * v16] = *(_QWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(result + 8) + 8 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_QWORD *)(v25 + 8 * v18) = *(_QWORD *)(v25 + 8 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_QWORD *)(v25 + 8 * v14);
          *(_QWORD *)(v25 + 8 * v14) = *(_QWORD *)(v25 + 8 * v18);
          *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

void OUTLINED_FUNCTION_0_5(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = __p;
  operator delete(__p);
}

void InitDefaultsscc_info_AllDifferentConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_AllDifferentConstraintProto_default_instance_ = (uint64_t)off_24F9816B8;
  qword_25408B0B8 = 0;
  dword_25408B0D4 = 0;
  qword_25408B0C0 = 0;
  qword_25408B0C8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_AllDifferentConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_AutomatonConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_AutomatonConstraintProto_default_instance_ = (uint64_t)&off_24F981FA8;
  *(_QWORD *)algn_25408AEB8 = 0;
  dword_25408AF40 = 0;
  qword_25408AF38 = 0;
  qword_25408AEC0 = 0;
  qword_25408AEC8 = 0;
  qword_25408AED8 = 0;
  qword_25408AEE0 = 0;
  qword_25408AEF0 = 0;
  qword_25408AEF8 = 0;
  qword_25408AF08 = 0;
  qword_25408AF10 = 0;
  qword_25408AF20 = 0;
  qword_25408AF28 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_AutomatonConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_BoolArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_BoolArgumentProto_default_instance_ = (uint64_t)off_24F9813F8;
  qword_25408AA68 = 0;
  dword_25408AA84 = 0;
  qword_25408AA70 = 0;
  qword_25408AA78 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_BoolArgumentProto_default_instance_, v4);
}

void InitDefaultsscc_info_CircuitConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_CircuitConstraintProto_default_instance_ = (uint64_t)&off_24F981C38;
  unk_25408AD80 = 0;
  dword_25408ADCC = 0;
  qword_25408AD88 = 0;
  unk_25408AD90 = 0;
  qword_25408ADA0 = 0;
  unk_25408ADA8 = 0;
  qword_25408ADB8 = 0;
  unk_25408ADC0 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CircuitConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_CircuitCoveringConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_CircuitCoveringConstraintProto_default_instance_ = (uint64_t)&off_24F981D98;
  unk_25408B0E0 = 0;
  dword_25408B114 = 0;
  qword_25408B0E8 = 0;
  qword_25408B0F0 = 0;
  qword_25408B100 = 0;
  unk_25408B108 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CircuitCoveringConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_ConstraintProto_default_instance_ = (uint64_t)&off_24F982058;
  unk_25408A7B0 = 0;
  dword_25408A7E0 = 0;
  qword_25408A7B8 = 0;
  unk_25408A7C0 = 0;
  if (atomic_load(scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  qword_25408A7D0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  dword_25408A7E4 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_ConstraintProto_default_instance_, v4);
  qword_25408A7E8 = (uint64_t)&operations_research::sat::_BoolArgumentProto_default_instance_;
  unk_25408A7F0 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  qword_25408A7F8 = (uint64_t)&operations_research::sat::_BoolArgumentProto_default_instance_;
  unk_25408A800 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  qword_25408A808 = (uint64_t)&operations_research::sat::_IntegerArgumentProto_default_instance_;
  unk_25408A810 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  qword_25408A818 = (uint64_t)&operations_research::sat::_IntegerArgumentProto_default_instance_;
  unk_25408A820 = &operations_research::sat::_LinearArgumentProto_default_instance_;
  qword_25408A828 = (uint64_t)&operations_research::sat::_IntegerArgumentProto_default_instance_;
  unk_25408A830 = &operations_research::sat::_LinearArgumentProto_default_instance_;
  qword_25408A838 = (uint64_t)&operations_research::sat::_IntegerArgumentProto_default_instance_;
  unk_25408A840 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  qword_25408A848 = (uint64_t)&operations_research::sat::_AllDifferentConstraintProto_default_instance_;
  unk_25408A850 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  qword_25408A858 = (uint64_t)&operations_research::sat::_CircuitConstraintProto_default_instance_;
  unk_25408A860 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
  qword_25408A868 = (uint64_t)&operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
  unk_25408A870 = &operations_research::sat::_TableConstraintProto_default_instance_;
  qword_25408A878 = (uint64_t)&operations_research::sat::_AutomatonConstraintProto_default_instance_;
  unk_25408A880 = &operations_research::sat::_InverseConstraintProto_default_instance_;
  qword_25408A888 = (uint64_t)&operations_research::sat::_ReservoirConstraintProto_default_instance_;
  unk_25408A890 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  qword_25408A898 = (uint64_t)&operations_research::sat::_NoOverlapConstraintProto_default_instance_;
  unk_25408A8A0 = &operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
  qword_25408A8A8 = (uint64_t)&operations_research::sat::_CumulativeConstraintProto_default_instance_;
}

void sub_22DA5C4FC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&qword_25408A7B8);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CpModelProto_default_instance_, v4);
  qword_25408A550 = (uint64_t)&operations_research::sat::_CpObjectiveProto_default_instance_;
  unk_25408A558 = &operations_research::sat::_PartialVariableAssignment_default_instance_;
}

void InitDefaultsscc_info_CpObjectiveProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_CpObjectiveProto_default_instance_ = (uint64_t)&off_24F982108;
  unk_25408A900 = 0;
  qword_25408A950 = 0;
  unk_25408A958 = 0;
  dword_25408A960 = 0;
  qword_25408A908 = 0;
  unk_25408A910 = 0;
  qword_25408A920 = 0;
  unk_25408A928 = 0;
  qword_25408A938 = 0;
  unk_25408A940 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CpObjectiveProto_default_instance_, v4);
}

void InitDefaultsscc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)&operations_research::sat::_CpSolverResponse_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CpSolverResponse_default_instance_, v4);
}

void InitDefaultsscc_info_CumulativeConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_CumulativeConstraintProto_default_instance_ = (uint64_t)&off_24F981AD8;
  *(_QWORD *)algn_25408AFE8 = 0;
  dword_25408B01C = 0;
  unk_25408B020 = 0;
  qword_25408AFF0 = 0;
  qword_25408AFF8 = 0;
  qword_25408B008 = 0;
  qword_25408B010 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_CumulativeConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_DecisionStrategyProto_default_instance_ = (uint64_t)&off_24F982268;
  *(_QWORD *)algn_25408AC08 = 0;
  dword_25408AC48 = 0;
  qword_25408AC10 = 0;
  unk_25408AC18 = 0;
  qword_25408AC30 = 0;
  unk_25408AC38 = 0;
  qword_25408AC28 = 0;
  if (atomic_load(scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  qword_25408AC40 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_DecisionStrategyProto_default_instance_, v4);
}

void sub_22DA5C720(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<operations_research::sat::DecisionStrategyProto_AffineTransformation>::TypeHandler>(&qword_25408AC28);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&qword_25408AC10);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_DecisionStrategyProto_AffineTransformation_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_DecisionStrategyProto_AffineTransformation_default_instance_ = (uint64_t)off_24F9821B8;
  unk_25408B120 = 0;
  qword_25408B130 = 0;
  unk_25408B138 = 0;
  qword_25408B128 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_DecisionStrategyProto_AffineTransformation_default_instance_, v4);
}

void InitDefaultsscc_info_ElementConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_ElementConstraintProto_default_instance_ = (uint64_t)off_24F981818;
  qword_25408ADD8 = 0;
  dword_25408ADFC = 0;
  *(_QWORD *)&dword_25408ADF4 = 0;
  qword_25408ADE0 = 0;
  qword_25408ADE8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_ElementConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_IntegerArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_IntegerArgumentProto_default_instance_ = (uint64_t)off_24F9814A8;
  qword_25408AAF0 = 0;
  dword_25408AB0C = 0;
  unk_25408AB10 = 0;
  qword_25408AAF8 = 0;
  qword_25408AB00 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_IntegerArgumentProto_default_instance_, v4);
}

void InitDefaultsscc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_IntegerVariableProto_default_instance_ = (uint64_t)&off_24F981348;
  unk_25408AB20 = 0;
  dword_25408AB48 = 0;
  qword_25408AB28 = 0;
  unk_25408AB30 = 0;
  if (atomic_load(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  qword_25408AB40 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_IntegerVariableProto_default_instance_, v4);
}

void sub_22DA5C8D4(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&qword_25408AB28);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_IntervalConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_IntervalConstraintProto_default_instance_ = (uint64_t)off_24F9818C8;
  qword_25408AE48 = 0;
  qword_25408AE50 = 0;
  *(_QWORD *)&dword_25408AE58 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_IntervalConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_InverseConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_InverseConstraintProto_default_instance_ = (uint64_t)&off_24F981EF8;
  *(_QWORD *)algn_25408AE08 = 0;
  dword_25408AE3C = 0;
  qword_25408AE10 = 0;
  qword_25408AE18 = 0;
  qword_25408AE28 = 0;
  qword_25408AE30 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_InverseConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_LinearArgumentProto_default_instance_ = (uint64_t)&off_24F981608;
  *(_QWORD *)algn_25408AAB8 = 0;
  dword_25408AAE0 = 0;
  qword_25408AAC8 = 0;
  qword_25408AAD0 = 0;
  qword_25408AAC0 = 0;
  if (atomic_load(scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  qword_25408AAD8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearArgumentProto_default_instance_, v4);
  qword_25408AAD8 = (uint64_t)&operations_research::sat::_LinearExpressionProto_default_instance_;
}

void sub_22DA5CA2C(_Unwind_Exception *exception_object)
{
  BOOL v2;

  if (qword_25408AAD0)
    v2 = qword_25408AAC0 == 0;
  else
    v2 = 0;
  if (v2)
    InitDefaultsscc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto((operations_research::sat::LinearExpressionProto **)qword_25408AAD0);
  qword_25408AAD0 = 0;
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_LinearConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_LinearConstraintProto_default_instance_ = (uint64_t)&off_24F981768;
  *(_QWORD *)algn_25408AC58 = 0;
  dword_25408ACA4 = 0;
  qword_25408AC60 = 0;
  qword_25408AC68 = 0;
  qword_25408AC78 = 0;
  qword_25408AC80 = 0;
  qword_25408AC90 = 0;
  qword_25408AC98 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_LinearExpressionProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_LinearExpressionProto_default_instance_ = (uint64_t)&off_24F981558;
  unk_25408ACB0 = 0;
  dword_25408ACF0 = 0;
  qword_25408ACE8 = 0;
  qword_25408ACB8 = 0;
  unk_25408ACC0 = 0;
  qword_25408ACD0 = 0;
  unk_25408ACD8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_LinearExpressionProto_default_instance_, v4);
}

void InitDefaultsscc_info_NoOverlap2DConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_NoOverlap2DConstraintProto_default_instance_ = (uint64_t)&off_24F981A28;
  unk_25408B070 = 0;
  dword_25408B0A8 = 0;
  byte_25408B0A4 = 0;
  qword_25408B078 = 0;
  unk_25408B080 = 0;
  qword_25408B090 = 0;
  unk_25408B098 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_NoOverlap2DConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_NoOverlapConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_NoOverlapConstraintProto_default_instance_ = (uint64_t)off_24F981978;
  qword_25408AF50 = 0;
  dword_25408AF6C = 0;
  qword_25408AF58 = 0;
  qword_25408AF60 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_NoOverlapConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_PartialVariableAssignment_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_PartialVariableAssignment_default_instance_ = (uint64_t)&off_24F982318;
  unk_25408B030 = 0;
  dword_25408B064 = 0;
  qword_25408B038 = 0;
  unk_25408B040 = 0;
  qword_25408B050 = 0;
  unk_25408B058 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_PartialVariableAssignment_default_instance_, v4);
}

void InitDefaultsscc_info_ReservoirConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_ReservoirConstraintProto_default_instance_ = (uint64_t)&off_24F981B88;
  *(_QWORD *)algn_25408AF78 = 0;
  qword_25408AFC8 = 0;
  unk_25408AFD0 = 0;
  dword_25408AFD8 = 0;
  qword_25408AF80 = 0;
  unk_25408AF88 = 0;
  qword_25408AF98 = 0;
  unk_25408AFA0 = 0;
  qword_25408AFB0 = 0;
  unk_25408AFB8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_ReservoirConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_RoutesConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_RoutesConstraintProto_default_instance_ = (uint64_t)&off_24F981CE8;
  unk_25408AD00 = 0;
  dword_25408AD70 = 0;
  qword_25408AD68 = 0;
  qword_25408AD08 = 0;
  qword_25408AD10 = 0;
  qword_25408AD20 = 0;
  qword_25408AD28 = 0;
  qword_25408AD38 = 0;
  unk_25408AD40 = 0;
  qword_25408AD50 = 0;
  qword_25408AD58 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_RoutesConstraintProto_default_instance_, v4);
}

void InitDefaultsscc_info_TableConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/cp_model.pb.cc", a4);
  operations_research::sat::_TableConstraintProto_default_instance_ = (uint64_t)&off_24F981E48;
  unk_25408ABC0 = 0;
  dword_25408ABF8 = 0;
  byte_25408ABF4 = 0;
  qword_25408ABC8 = 0;
  qword_25408ABD0 = 0;
  qword_25408ABE0 = 0;
  qword_25408ABE8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_TableConstraintProto_default_instance_, v4);
}

uint64_t operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy_descriptor(operations_research::sat *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return file_level_enum_descriptors_ortools_2fsat_2fcp_5fmodel_2eproto;
}

uint64_t operations_research::sat::DecisionStrategyProto_DomainReductionStrategy_descriptor(operations_research::sat *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return qword_255DB32E0;
}

uint64_t operations_research::sat::CpSolverStatus_descriptor(operations_research::sat *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return qword_255DB32E8;
}

operations_research::sat::IntegerVariableProto *operations_research::sat::IntegerVariableProto::IntegerVariableProto(operations_research::sat::IntegerVariableProto *this, google::protobuf::Arena *a2)
{
  *(_QWORD *)this = &off_24F981348;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22DA5CE24(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

operations_research::sat::IntegerVariableProto *operations_research::sat::IntegerVariableProto::IntegerVariableProto(operations_research::sat::IntegerVariableProto *this, const operations_research::sat::IntegerVariableProto *a2)
{
  uint64_t *v4;
  int v5;
  void *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  uint64_t v9;
  google::protobuf::Arena *v10;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F981348;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 4, v5);
    v6 = (void *)*((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
  }
  *((_DWORD *)this + 12) = 0;
  v7 = *((_QWORD *)a2 + 1);
  if ((v7 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v9 = *((_QWORD *)a2 + 5);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      return this;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    return this;
  }
  v10 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((*v4 & 1) != 0)
    v10 = *(google::protobuf::Arena **)v10;
  google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, v10, (__int128 *)v9);
  return this;
}

void sub_22DA5CF3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::IntegerVariableProto::~IntegerVariableProto(operations_research::sat::IntegerVariableProto *this)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v8;

  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E31DF78](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v5 && v6 == 0)
    {
      v8 = *(void **)(v5 + 8);
      if (v8 != *(void **)(v5 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 8));
        v8 = *(void **)(v5 + 8);
      }
      if (v8)
      {
        *(_QWORD *)(v5 + 16) = v8;
        operator delete(v8);
      }
      MEMORY[0x22E31DF78](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  operations_research::sat::IntegerVariableProto::~IntegerVariableProto(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::IntegerVariableProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void operations_research::sat::IntegerVariableProto::Clear(operations_research::sat::IntegerVariableProto *this)
{
  uint64_t v1;
  uint64_t v2;

  *((_DWORD *)this + 4) = 0;
  v1 = *((_QWORD *)this + 5);
  if ((uint64_t *)v1 == &google::protobuf::internal::fixed_address_empty_string)
  {
LABEL_4:
    v2 = *((_QWORD *)this + 1);
    if ((v2 & 1) == 0)
      return;
    goto LABEL_7;
  }
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v1 = 0;
    *(_BYTE *)(v1 + 23) = 0;
    goto LABEL_4;
  }
  **(_BYTE **)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) == 0)
    return;
LABEL_7:
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v2 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

std::string::value_type *operations_research::sat::IntegerVariableProto::_InternalParse(operations_research::sat::IntegerVariableProto *this, std::string::value_type *__s, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  std::string::value_type *v6;
  uint64_t *v7;
  google::protobuf::internal *v8;
  std::string **v9;
  size_t size;
  BOOL v11;
  int v12;
  std::string::value_type *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  google::protobuf::UnknownFieldSet *v18;
  google::protobuf::internal *v19;
  google::protobuf::Arena *v20;
  std::string *v21;
  const char *v22;
  std::string *v23;
  google::protobuf::internal *TagFallback;
  uint64_t Varint64;
  uint64_t v26;
  uint64_t v28;
  const std::string::value_type *v30;

  v6 = __s;
  v30 = __s;
  v7 = (uint64_t *)((char *)this + 8);
  v8 = (operations_research::sat::IntegerVariableProto *)((char *)this + 16);
  v9 = (std::string **)((char *)this + 40);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if (&v6[-*(_QWORD *)&a3[1]] == (std::string::value_type *)a3[3].i32[1])
        return v6;
      v6 = (std::string::value_type *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, v6, a3[11].i32[1]);
      v30 = v6;
      if ((__s & 1) != 0)
        return v6;
    }
    v13 = v6 + 1;
    v14 = *v6;
    if ((*v6 & 0x80000000) == 0)
      goto LABEL_12;
    v15 = v14 + (*v13 << 7);
    v14 = v15 - 128;
    if (*v13 < 0)
    {
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)v6, (const char *)(v15 - 128));
      v30 = (const std::string::value_type *)TagFallback;
      if (!TagFallback)
        return 0;
      v13 = (std::string::value_type *)TagFallback;
      v14 = __s;
      v16 = __s >> 3;
      if (__s >> 3 == 2)
        goto LABEL_31;
LABEL_13:
      if (v16 != 1 || v14 != 10)
        goto LABEL_17;
      v20 = (google::protobuf::Arena *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v7 & 1) != 0)
      {
        v20 = *(google::protobuf::Arena **)v20;
        v21 = *v9;
        if (*v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_25;
LABEL_24:
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v9, v20, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
        v21 = *v9;
        v13 = (std::string::value_type *)v30;
        goto LABEL_25;
      }
      v21 = *v9;
      if (*v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_24;
LABEL_25:
      v30 = google::protobuf::internal::InlineGreedyStringParser(v21, v13, (uint64_t)a3);
      if (SHIBYTE(v21->__r_.__value_.__r.__words[2]) < 0)
      {
        v23 = (std::string *)v21->__r_.__value_.__r.__words[0];
        size = v21->__r_.__value_.__l.__size_;
        if ((size & 0x8000000000000000) != 0)
          google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v21->__r_.__value_.__l.__size_, "size_t to int conversion", v22);
        v21 = v23;
      }
      else
      {
        size = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      }
      v11 = google::protobuf::internal::VerifyUTF8(v21, size, (google::protobuf::internal *)"operations_research.sat.IntegerVariableProto.name");
      v6 = (std::string::value_type *)v30;
      if (v30)
        v12 = 2;
      else
        v12 = 4;
      if (!v11 || v12 != 2)
        return 0;
    }
    else
    {
      v13 = v6 + 2;
LABEL_12:
      v30 = v13;
      v16 = v14 >> 3;
      if (v14 >> 3 != 2)
        goto LABEL_13;
LABEL_31:
      if (v14 == 18)
      {
        v19 = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser(v8, (unsigned __int8 *)v13, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        goto LABEL_33;
      }
      if (v14 == 16)
      {
        Varint64 = google::protobuf::internal::ReadVarint64((google::protobuf::internal **)&v30, (const char **)__s);
        v26 = *((unsigned int *)this + 4);
        if ((_DWORD)v26 == *((_DWORD *)this + 5))
        {
          v28 = Varint64;
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)v8, v26 + 1);
          Varint64 = v28;
        }
        *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v26) = Varint64;
        *((_DWORD *)this + 4) = v26 + 1;
        v6 = (std::string::value_type *)v30;
        if (!v30)
          return v6;
      }
      else
      {
LABEL_17:
        if (!v14 || (v14 & 7) == 4)
        {
          a3[10].i32[0] = v14 - 1;
          return v13;
        }
        if ((*v7 & 1) != 0)
        {
          v18 = (google::protobuf::UnknownFieldSet *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v18 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v7);
          v13 = (std::string::value_type *)v30;
        }
        v19 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, v18, (google::protobuf::UnknownFieldSet *)v13, a3, a5);
LABEL_33:
        v6 = (std::string::value_type *)v19;
        v30 = (const std::string::value_type *)v19;
        if (!v19)
          return v6;
      }
    }
  }
}

uint64_t google::protobuf::internal::ReadVarint64(google::protobuf::internal **this, const char **a2)
{
  google::protobuf::internal *v3;
  google::protobuf::internal *v4;
  google::protobuf::internal *v5;
  int v6;
  uint64_t v7;
  int v9;
  uint64_t v10;

  v3 = *this;
  v4 = *this;
  v6 = *(char *)v4;
  v5 = (google::protobuf::internal *)((char *)v4 + 1);
  v7 = v6;
  if (v6 < 0)
  {
    v9 = v7 + (*(unsigned __int8 *)v5 << 7);
    if (*(char *)v5 < 0)
    {
      *this = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v3, (const char *)(v9 - 128));
      return v10;
    }
    else
    {
      *this = (google::protobuf::internal *)((char *)v3 + 2);
      return (v9 - 128);
    }
  }
  else
  {
    *this = v5;
    return v7;
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::IntegerVariableProto::_InternalSerialize(operations_research::sat::IntegerVariableProto *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t *v7;
  const char *v8;
  uint64_t v9;
  int64_t v10;
  const void *v11;
  int v12;
  _BYTE *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v24;

  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)v7[1];
    if (!v8)
      goto LABEL_14;
    v7 = (uint64_t *)*v7;
  }
  else
  {
    v8 = (const char *)*((unsigned __int8 *)v7 + 23);
    if (!*((_BYTE *)v7 + 23))
      goto LABEL_14;
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v7, v8, 1, (google::protobuf::internal *)"operations_research.sat.IntegerVariableProto.name");
  v9 = *((_QWORD *)this + 5);
  if (*(char *)(v9 + 23) < 0)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10 > 127)
      goto LABEL_29;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v10)
  {
    *(_BYTE *)a2 = 10;
    *((_BYTE *)a2 + 1) = v10;
    if (*(char *)(v9 + 23) >= 0)
      v11 = (const void *)v9;
    else
      v11 = *(const void **)v9;
    memcpy((char *)a2 + 2, v11, v10);
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v10 + 2);
LABEL_14:
    v12 = *((_DWORD *)this + 8);
    if (v12 >= 1)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 1, v9, (char *)a2);
  v12 = *((_DWORD *)this + 8);
  if (v12 >= 1)
  {
LABEL_15:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      *(_BYTE *)a2 = 18;
      v13 = (char *)a2 + 1;
      if (v12 < 0x80)
        goto LABEL_17;
    }
    else
    {
      *(_BYTE *)a2 = 18;
      v13 = (char *)a2 + 1;
      if (v12 < 0x80)
      {
LABEL_17:
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        *v13 = v12;
        v14 = (unint64_t *)*((_QWORD *)this + 3);
        v15 = &v14[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
            v21 = *v14++;
            v16 = v21;
            if (v21 > 0x7F)
            {
LABEL_22:
              *(_BYTE *)a2 = v16 | 0x80;
              v18 = v16 >> 7;
              if (v16 >> 14)
              {
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
                do
                {
                  *((_BYTE *)a2 - 1) = v18 | 0x80;
                  v19 = v18 >> 7;
                  a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
                  v20 = v18 >> 14;
                  v18 >>= 7;
                }
                while (v20);
                *((_BYTE *)a2 - 1) = v19;
              }
              else
              {
                *((_BYTE *)a2 + 1) = v18;
                a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
              }
              goto LABEL_19;
            }
          }
          else
          {
            v17 = *v14++;
            v16 = v17;
            if (v17 > 0x7F)
              goto LABEL_22;
          }
          *(_BYTE *)a2 = v16;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
LABEL_19:
          if (v14 >= v15)
            goto LABEL_30;
        }
      }
    }
    do
    {
      *v13++ = v12 | 0x80;
      v24 = v12 >> 14;
      v12 = v12 >> 7;
    }
    while (v24);
    a2 = (google::protobuf::UnknownFieldSet *)(v13 - 1);
    goto LABEL_17;
  }
LABEL_30:
  v22 = *((_QWORD *)this + 1);
  if ((v22 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a4);
  else
    return a2;
}

char *operations_research::sat::IntegerVariableProto::ByteSizeLong(operations_research::sat::IntegerVariableProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const google::protobuf::UnknownFieldSet *v9;
  uint64_t v10;

  v2 = google::protobuf::internal::WireFormatLite::Int64Size((int *)this + 4);
  v3 = 11;
  v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v2 >= 0)
    v3 = v4;
  if (v2)
    v5 = v2;
  else
    v5 = 0;
  if (v2)
    v6 = v3;
  else
    v6 = 0;
  *((_DWORD *)this + 8) = v5;
  v7 = *((_QWORD *)this + 5);
  v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
  {
    v9 = (const google::protobuf::UnknownFieldSet *)(v6 + v2);
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_14;
  }
  else
  {
    v9 = (const google::protobuf::UnknownFieldSet *)(v6 + v2);
    if (!*(_BYTE *)(v7 + 23))
      goto LABEL_14;
  }
  v10 = *(_QWORD *)(v7 + 8);
  if ((v8 & 0x80u) == 0)
    v10 = v8;
  v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::IntegerVariableProto *)((char *)this + 8), v9, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v9;
  return (char *)v9;
}

void operations_research::sat::IntegerVariableProto::MergeFrom(operations_research::sat::IntegerVariableProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  if (*(void (***)(operations_research::sat::IntegerVariableProto *__hidden))a2 == &off_24F981348)
    operations_research::sat::IntegerVariableProto::MergeFrom(this, a2);
  else
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
}

void operations_research::sat::IntegerVariableProto::MergeFrom(operations_research::sat::IntegerVariableProto *this, const operations_research::sat::IntegerVariableProto *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string **v13;
  uint64_t v14;
  google::protobuf::Arena *v15;
  std::string *v16;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((char *)this + 8);
    v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v7 = *((_QWORD *)this + 1);
    if ((v7 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
  }
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
  {
    v10 = *((int *)this + 4);
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 4, v10 + v9);
    v11 = *((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy((void *)(v11 + 8 * v10), *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
  }
  v12 = *((_QWORD *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      return;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    return;
  }
  v13 = (std::string **)((char *)this + 40);
  v14 = *((_QWORD *)this + 1);
  v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
  if ((v14 & 1) != 0)
  {
    v15 = *(google::protobuf::Arena **)v15;
    v16 = *v13;
    if (*v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_11;
  }
  else
  {
    v16 = *v13;
    if (*v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_11:
      std::string::operator=(v16, *((const std::string **)a2 + 5));
      return;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v13, v15, (__int128 *)v12);
}

void operations_research::sat::IntegerVariableProto::CopyFrom(operations_research::sat::IntegerVariableProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    v5 = *((_QWORD *)this + 5);
    if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v5 + 23) < 0)
      {
        **(_BYTE **)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v6 = *((_QWORD *)this + 1);
        if ((v6 & 1) == 0)
          goto LABEL_11;
        goto LABEL_9;
      }
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
    v6 = *((_QWORD *)this + 1);
    if ((v6 & 1) == 0)
    {
LABEL_11:
      if (*(void (***)(operations_research::sat::IntegerVariableProto *__hidden))a2 == &off_24F981348)
        operations_research::sat::IntegerVariableProto::MergeFrom(this, a2);
      else
        google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
      return;
    }
LABEL_9:
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    goto LABEL_11;
  }
}

void operations_research::sat::IntegerVariableProto::CopyFrom(operations_research::sat::IntegerVariableProto *this, const operations_research::sat::IntegerVariableProto *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    v4 = *((_QWORD *)this + 5);
    if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        v5 = *((_QWORD *)this + 1);
        if ((v5 & 1) == 0)
          goto LABEL_6;
        goto LABEL_10;
      }
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) == 0)
    {
LABEL_6:
      operations_research::sat::IntegerVariableProto::MergeFrom(this, a2);
      return;
    }
LABEL_10:
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
    {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
      operations_research::sat::IntegerVariableProto::MergeFrom(this, a2);
      return;
    }
    goto LABEL_6;
  }
}

uint64_t operations_research::sat::IntegerVariableProto::IsInitialized(operations_research::sat::IntegerVariableProto *this)
{
  return 1;
}

__n128 operations_research::sat::IntegerVariableProto::InternalSwap(__n128 *this, __n128 *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 result;
  unint64_t v15;

  v5 = &this->n128_i64[1];
  v4 = this->n128_i64[1];
  v6 = a2->n128_u64[1];
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v7 = (uint64_t *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(&a2->n128_i64[1]);
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      v8 = (uint64_t *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = (uint64_t *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_7:
  v9 = *v8;
  *v8 = *v7;
  *v7 = v9;
  v10 = v8[1];
  v8[1] = v7[1];
  v7[1] = v10;
  v11 = v8[2];
  v8[2] = v7[2];
  v7[2] = v11;
LABEL_8:
  v12 = this[1].n128_u64[0];
  v13 = this[1].n128_u64[1];
  result = a2[1];
  this[1] = result;
  a2[1].n128_u64[0] = v12;
  a2[1].n128_u64[1] = v13;
  v15 = this[2].n128_u64[1];
  this[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v15;
  return result;
}

uint64_t operations_research::sat::IntegerVariableProto::GetMetadata(operations_research::sat::IntegerVariableProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return *off_254079798;
}

void operations_research::sat::BoolArgumentProto::~BoolArgumentProto(operations_research::sat::BoolArgumentProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::BoolArgumentProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void operations_research::sat::BoolArgumentProto::Clear(operations_research::sat::BoolArgumentProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::UnknownFieldSet *operations_research::sat::BoolArgumentProto::_InternalParse(operations_research::sat::BoolArgumentProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  google::protobuf::internal *v9;
  google::protobuf::UnknownFieldSet *v10;
  google::protobuf::UnknownFieldSet *v11;
  unsigned int v12;
  unsigned int v13;
  google::protobuf::internal *TagFallback;
  int v15;
  uint64_t v16;
  google::protobuf::internal *v18;

  v6 = a2;
  v18 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::BoolArgumentProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v18 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v11 = (google::protobuf::internal *)((char *)v6 + 1);
    v12 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_8;
    v13 = v12 + (*(unsigned __int8 *)v11 << 7);
    v12 = v13 - 128;
    if (*(char *)v11 < 0)
    {
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v13 - 128));
      v18 = TagFallback;
      if (!TagFallback)
        return 0;
      v11 = TagFallback;
      v12 = a2;
      if ((a2 & 0xFFFFFFF8) == 8)
        goto LABEL_9;
LABEL_14:
      if (!v12 || (v12 & 7) == 4)
      {
        a3[10].i32[0] = v12 - 1;
        return v11;
      }
      if ((*v8 & 1) != 0)
      {
        v10 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v10 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        v11 = v18;
      }
      v6 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v10, v11, a3, a5);
      v18 = v6;
      if (!v6)
        return v6;
    }
    else
    {
      v11 = (google::protobuf::internal *)((char *)v6 + 2);
LABEL_8:
      v18 = v11;
      if ((v12 & 0xFFFFFFF8) != 8)
        goto LABEL_14;
LABEL_9:
      if (v12 == 10)
      {
        v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, (unsigned __int8 *)v11, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        v18 = v6;
        if (!v6)
          return v6;
      }
      else
      {
        if (v12 != 8)
          goto LABEL_14;
        v15 = google::protobuf::internal::ReadVarint64(&v18, (const char **)a2);
        v16 = *((unsigned int *)this + 4);
        if ((_DWORD)v16 == *((_DWORD *)this + 5))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v16 + 1);
        *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v16) = v15;
        *((_DWORD *)this + 4) = v16 + 1;
        v6 = v18;
        if (!v18)
          return v6;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::BoolArgumentProto::_InternalSerialize(operations_research::sat::BoolArgumentProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v18;

  v6 = *((_DWORD *)this + 8);
  if ((int)v6 >= 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
        goto LABEL_4;
    }
    else
    {
      *a2 = 10;
      v7 = (unsigned __int8 *)(a2 + 1);
      if (v6 < 0x80)
      {
LABEL_4:
        a2 += 2;
        *v7 = v6;
        v8 = (int *)*((_QWORD *)this + 3);
        v9 = &v8[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v15 = *v8++;
            v10 = v15;
            if (v15 > 0x7F)
            {
LABEL_9:
              *a2 = v10 | 0x80;
              v12 = v10 >> 7;
              if (v10 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v12 | 0x80;
                  v13 = v12 >> 7;
                  ++a2;
                  v14 = v12 >> 14;
                  v12 >>= 7;
                }
                while (v14);
                *(a2 - 1) = v13;
              }
              else
              {
                a2[1] = v12;
                a2 += 2;
              }
              goto LABEL_6;
            }
          }
          else
          {
            v11 = *v8++;
            v10 = v11;
            if (v11 > 0x7F)
              goto LABEL_9;
          }
          *a2++ = v10;
LABEL_6:
          if (v8 >= v9)
            goto LABEL_16;
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      v18 = v6 >> 14;
      v6 >>= 7;
    }
    while (v18);
    a2 = (char *)(v7 - 1);
    goto LABEL_4;
  }
LABEL_16:
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::BoolArgumentProto::ByteSizeLong(operations_research::sat::BoolArgumentProto *this)
{
  uint64_t v2;
  const google::protobuf::UnknownFieldSet *v3;
  google::protobuf::UnknownFieldSet *v4;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      *((_DWORD *)this + 8) = v2;
      v3 = (const google::protobuf::UnknownFieldSet *)(((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2);
      v4 = (operations_research::sat::BoolArgumentProto *)((char *)this + 8);
      if ((*((_BYTE *)this + 8) & 1) != 0)
        return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 9);
LABEL_6:
      *((_DWORD *)this + 9) = (_DWORD)v3;
      return (char *)v3;
    }
    *((_DWORD *)this + 8) = v2;
    v3 = (const google::protobuf::UnknownFieldSet *)(v2 + 11);
    v4 = (operations_research::sat::BoolArgumentProto *)((char *)this + 8);
    if ((*((_BYTE *)this + 8) & 1) == 0)
      goto LABEL_6;
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = (operations_research::sat::BoolArgumentProto *)((char *)this + 8);
    if ((*((_BYTE *)this + 8) & 1) == 0)
      goto LABEL_6;
  }
  return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 9);
}

void operations_research::sat::BoolArgumentProto::MergeFrom(operations_research::sat::BoolArgumentProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;
  uint64_t *v6;
  const google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  const google::protobuf::UnknownFieldSet *v14;

  if (*(void (***)(operations_research::sat::BoolArgumentProto *__hidden))a2 == off_24F9813F8)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)((char *)this + 8);
      v7 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v8 = *((_QWORD *)this + 1);
      if ((v8 & 1) != 0)
      {
        v9 = (google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v14 = v7;
        v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v6);
        v7 = v14;
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v7);
    }
    v10 = *((_DWORD *)a2 + 4);
    if (v10)
    {
      v12 = *((int *)this + 4);
      v11 = (unsigned int *)((char *)this + 16);
      google::protobuf::RepeatedField<int>::Reserve(v11, v12 + v10);
      v13 = *((_QWORD *)v11 + 1);
      *v11 += *((_DWORD *)a2 + 4);
      memcpy((void *)(v13 + 4 * v12), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
    }
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void operations_research::sat::BoolArgumentProto::CopyFrom(operations_research::sat::BoolArgumentProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    operations_research::sat::BoolArgumentProto::MergeFrom(this, a2, a3);
  }
}

uint64_t operations_research::sat::BoolArgumentProto::IsInitialized(operations_research::sat::BoolArgumentProto *this)
{
  return 1;
}

uint64_t operations_research::sat::BoolArgumentProto::GetMetadata(operations_research::sat::BoolArgumentProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[2];
}

operations_research::sat::IntegerArgumentProto *operations_research::sat::IntegerArgumentProto::IntegerArgumentProto(operations_research::sat::IntegerArgumentProto *this, const operations_research::sat::IntegerArgumentProto *a2)
{
  uint64_t *v4;
  int v5;
  void *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_24F9814A8;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    v6 = (void *)*((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((_DWORD *)this + 10) = 0;
  v7 = *((_QWORD *)a2 + 1);
  if ((v7 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v8 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, (const google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  return this;
}

void sub_22DA5E210(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::IntegerArgumentProto::~IntegerArgumentProto(operations_research::sat::IntegerArgumentProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 16);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::IntegerArgumentProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void operations_research::sat::IntegerArgumentProto::Clear(operations_research::sat::IntegerArgumentProto *this)
{
  uint64_t v1;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *operations_research::sat::IntegerArgumentProto::_InternalParse(operations_research::sat::IntegerArgumentProto *this, google::protobuf::internal *a2, int32x2_t *a3, google::protobuf::internal::ParseContext *a4, google::protobuf::internal::ParseContext *a5)
{
  google::protobuf::internal *v6;
  uint64_t *v8;
  google::protobuf::internal *v9;
  google::protobuf::UnknownFieldSet *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v16;
  google::protobuf::internal *TagFallback;
  int v18;
  uint64_t v19;
  google::protobuf::internal *v21;

  v6 = a2;
  v21 = a2;
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (operations_research::sat::IntegerArgumentProto *)((char *)this + 16);
  while (1)
  {
    if ((unint64_t)v6 >= *(_QWORD *)a3)
    {
      if ((google::protobuf::internal *)((char *)v6 - *(_QWORD *)&a3[1]) == (google::protobuf::internal *)a3[3].i32[1])
        return v6;
      v6 = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a3, (const char *)v6, a3[11].i32[1]);
      v21 = v6;
      if ((a2 & 1) != 0)
        return v6;
    }
    v11 = (unsigned __int8 *)v6 + 1;
    v12 = *(unsigned __int8 *)v6;
    if ((*(char *)v6 & 0x80000000) == 0)
      goto LABEL_8;
    v13 = v12 + (*v11 << 7);
    v12 = v13 - 128;
    if ((char)*v11 < 0)
    {
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v6, (const char *)(v13 - 128));
      v21 = TagFallback;
      if (!TagFallback)
        return 0;
      v11 = (unsigned __int8 *)TagFallback;
      v12 = a2;
      v14 = a2 >> 3;
      if (a2 >> 3 != 2)
        goto LABEL_9;
LABEL_23:
      if (v12 == 18)
      {
        v6 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser(v9, v11, (google::protobuf::internal::EpsCopyInputStream *)a3, a4);
        v21 = v6;
        if (!v6)
          return v6;
      }
      else
      {
        if (v12 != 16)
          goto LABEL_13;
        v18 = google::protobuf::internal::ReadVarint64(&v21, (const char **)a2);
        v19 = *((unsigned int *)this + 4);
        if ((_DWORD)v19 == *((_DWORD *)this + 5))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v9, v19 + 1);
        *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v19) = v18;
        *((_DWORD *)this + 4) = v19 + 1;
        v6 = v21;
        if (!v21)
          return v6;
      }
    }
    else
    {
      v11 = (unsigned __int8 *)v6 + 2;
LABEL_8:
      v21 = (google::protobuf::internal *)v11;
      v14 = v12 >> 3;
      if (v12 >> 3 == 2)
        goto LABEL_23;
LABEL_9:
      if (v14 == 1 && v12 == 8)
      {
        v6 = (google::protobuf::internal *)(v11 + 1);
        a2 = (google::protobuf::internal *)*v11;
        if ((a2 & 0x80) == 0)
          goto LABEL_20;
        v16 = *(char *)v6;
        a2 = (google::protobuf::internal *)(a2 + (v16 << 7) - 128);
        if (v16 < 0)
        {
          v6 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v11, (const char *)a2);
          v21 = v6;
          *((_DWORD *)this + 9) = (_DWORD)a2;
          if (!v6)
            return v6;
        }
        else
        {
          v6 = (google::protobuf::internal *)(v11 + 2);
LABEL_20:
          v21 = v6;
          *((_DWORD *)this + 9) = (_DWORD)a2;
        }
      }
      else
      {
LABEL_13:
        if (!v12 || (v12 & 7) == 4)
        {
          a3[10].i32[0] = v12 - 1;
          return (google::protobuf::internal *)v11;
        }
        if ((*v8 & 1) != 0)
        {
          v10 = (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v10 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
          v11 = (unsigned __int8 *)v21;
        }
        v6 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v12, v10, (google::protobuf::UnknownFieldSet *)v11, a3, a5);
        v21 = v6;
        if (!v6)
          return v6;
      }
    }
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::IntegerArgumentProto::_InternalSerialize(operations_research::sat::IntegerArgumentProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int *v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v22;

  v6 = *((_DWORD *)this + 9);
  if (!v6)
    goto LABEL_9;
  if (*(_QWORD *)a3 > (unint64_t)a2)
  {
    *a2 = 8;
    if (v6 <= 0x7F)
      goto LABEL_4;
    goto LABEL_7;
  }
  a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v6 = *((_DWORD *)this + 9);
  *a2 = 8;
  if (v6 > 0x7F)
  {
LABEL_7:
    a2[1] = v6 | 0x80;
    v8 = (unint64_t)(int)v6 >> 7;
    if (v6 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v8 | 0x80;
        v18 = v8 >> 7;
        ++a2;
        v19 = v8 >> 14;
        v8 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      v7 = *((_DWORD *)this + 8);
      if (v7 < 1)
        goto LABEL_27;
      goto LABEL_10;
    }
    a2[2] = v8;
    a2 += 3;
LABEL_9:
    v7 = *((_DWORD *)this + 8);
    if (v7 < 1)
      goto LABEL_27;
LABEL_10:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      *a2 = 18;
      v9 = (unsigned __int8 *)(a2 + 1);
      if (v7 < 0x80)
        goto LABEL_12;
    }
    else
    {
      *a2 = 18;
      v9 = (unsigned __int8 *)(a2 + 1);
      if (v7 < 0x80)
      {
LABEL_12:
        a2 += 2;
        *v9 = v7;
        v10 = (int *)*((_QWORD *)this + 3);
        v11 = &v10[*((int *)this + 4)];
        while (1)
        {
          if (*(_QWORD *)a3 <= (unint64_t)a2)
          {
            a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
            v17 = *v10++;
            v12 = v17;
            if (v17 > 0x7F)
            {
LABEL_17:
              *a2 = v12 | 0x80;
              v14 = v12 >> 7;
              if (v12 >> 14)
              {
                a2 += 2;
                do
                {
                  *(a2 - 1) = v14 | 0x80;
                  v15 = v14 >> 7;
                  ++a2;
                  v16 = v14 >> 14;
                  v14 >>= 7;
                }
                while (v16);
                *(a2 - 1) = v15;
              }
              else
              {
                a2[1] = v14;
                a2 += 2;
              }
              goto LABEL_14;
            }
          }
          else
          {
            v13 = *v10++;
            v12 = v13;
            if (v13 > 0x7F)
              goto LABEL_17;
          }
          *a2++ = v12;
LABEL_14:
          if (v10 >= v11)
            goto LABEL_27;
        }
      }
    }
    do
    {
      *v9++ = v7 | 0x80;
      v22 = v7 >> 14;
      v7 = v7 >> 7;
    }
    while (v22);
    a2 = (char *)(v9 - 1);
    goto LABEL_12;
  }
LABEL_4:
  a2[1] = v6;
  a2 += 2;
  v7 = *((_DWORD *)this + 8);
  if (v7 >= 1)
    goto LABEL_10;
LABEL_27:
  v20 = *((_QWORD *)this + 1);
  if ((v20 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *operations_research::sat::IntegerArgumentProto::ByteSizeLong(operations_research::sat::IntegerArgumentProto *this)
{
  uint64_t v2;
  const google::protobuf::UnknownFieldSet *v3;
  int v4;
  uint64_t v5;

  v2 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 4);
  if (v2)
  {
    if ((v2 & 0x80000000) != 0)
    {
      *((_DWORD *)this + 8) = v2;
      v3 = (const google::protobuf::UnknownFieldSet *)(v2 + 11);
      v4 = *((_DWORD *)this + 9);
      if (!v4)
        goto LABEL_12;
    }
    else
    {
      *((_DWORD *)this + 8) = v2;
      v3 = (const google::protobuf::UnknownFieldSet *)(((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1 + v2);
      v4 = *((_DWORD *)this + 9);
      if (!v4)
        goto LABEL_12;
    }
  }
  else
  {
    *((_DWORD *)this + 8) = 0;
    v3 = 0;
    v4 = *((_DWORD *)this + 9);
    if (!v4)
      goto LABEL_12;
  }
  if (v4 < 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v3 = (const google::protobuf::UnknownFieldSet *)((char *)v3 + v5);
LABEL_12:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::IntegerArgumentProto *)((char *)this + 8), v3, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v3;
  return (char *)v3;
}

void operations_research::sat::IntegerArgumentProto::MergeFrom(operations_research::sat::IntegerArgumentProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;
  uint64_t *v6;
  const google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const google::protobuf::UnknownFieldSet *v14;

  if (*(void (***)(operations_research::sat::IntegerArgumentProto *__hidden))a2 == off_24F9814A8)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)((char *)this + 8);
      v7 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v8 = *((_QWORD *)this + 1);
      if ((v8 & 1) != 0)
      {
        v9 = (google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v14 = v7;
        v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v6);
        v7 = v14;
      }
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v7);
    }
    v10 = *((_DWORD *)a2 + 4);
    if (v10)
    {
      v11 = *((int *)this + 4);
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v11 + v10);
      v12 = *((_QWORD *)this + 3);
      *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
      memcpy((void *)(v12 + 4 * v11), *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
    }
    v13 = *((_DWORD *)a2 + 9);
    if (v13)
      *((_DWORD *)this + 9) = v13;
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
  }
}

void operations_research::sat::IntegerArgumentProto::CopyFrom(operations_research::sat::IntegerArgumentProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 9) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    operations_research::sat::IntegerArgumentProto::MergeFrom(this, a2, a3);
  }
}

uint64_t operations_research::sat::IntegerArgumentProto::IsInitialized(operations_research::sat::IntegerArgumentProto *this)
{
  return 1;
}

uint64_t operations_research::sat::IntegerArgumentProto::GetMetadata(operations_research::sat::IntegerArgumentProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto, 0);
  return off_254079798[4];
}

operations_research::sat::LinearExpressionProto *operations_research::sat::LinearExpressionProto::LinearExpressionProto(operations_research::sat::LinearExpressionProto *this, const operations_research::sat::LinearExpressionProto *a2)
{
  uint64_t *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;
  google::protobuf::UnknownFieldSet *v10;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F981558;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 4, v5);
    v6 = (void *)*((_QWORD *)this + 3);
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
    memcpy(v6, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v7 = *((_DWORD *)a2 + 10);
  if (v7)
  {
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 10, v7);
    v8 = (void *)*((_QWORD *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v8, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
  }
  *((_DWORD *)this + 18) = 0;
  v9 = *((_QWORD *)a2 + 1);
  if ((v9 & 1) != 0)
  {
    if ((*v4 & 1) != 0)
      v10 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v10 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v10, (const google::protobuf::UnknownFieldSet *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  return this;
}

