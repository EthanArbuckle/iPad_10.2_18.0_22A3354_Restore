void sub_22DAB508C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_objecta)
{
  if (__p)
    operator delete(__p);
  if (!a17)
    _Unwind_Resume(exception_object);
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::FixedWeightedSum<std::vector<long long>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  char *v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  v8 = *(const void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = v7 - *(_QWORD *)a1;
  if (v7 != *(_QWORD *)a1)
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - *(_QWORD *)a1);
    v11 = &v10[4 * (v9 >> 2)];
    v17 = v10;
    v19 = v11;
    memcpy(v10, v8, v9);
    v18 = v11;
  }
  __p = 0;
  v21 = 0;
  v22 = 0;
  v12 = *(const void **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v13)
  {
    if (v13 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v13);
    v15 = &v14[8 * (v13 >> 3)];
    __p = v14;
    v22 = v15;
    memcpy(v14, v12, v13);
    v21 = v15;
  }
  v23 = a3;
  *(_QWORD *)(a4 + 24) = 0;
  v16 = operator new(0x40uLL);
  *v16 = &off_24F983630;
  operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v16 + 1, (uint64_t)&v17);
  *(_QWORD *)(a4 + 24) = v16;
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_22DAB5298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)&a10);
  _Unwind_Resume(a1);
}

void sub_22DAB52B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::LinearExpr::~LinearExpr((operations_research::sat::LinearExpr *)va);
  _Unwind_Resume(a1);
}

void sub_22DAB52C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F983630;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F983630;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_24F983630;
  operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v2 + 1, v1);
  return v2;
}

void sub_22DAB53E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F983630;
  return operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(a2 + 1, a1 + 8);
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;

  v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16FixedWeightedSumINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIF"
                     "vPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16FixedWeightedSumINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_"
                                "8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16FixedWeightedSumINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16FixedWeightedSumINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(_QWORD *)(a2 + 48);
  return a1;
}

{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(_QWORD *)(a2 + 48);
  return a1;
}

void sub_22DAB55F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_22DAB5700(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::FixedWeightedSum<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)(a1 + 24);
  operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>((unsigned int **)a1, a1 + 24, *(_QWORD *)(a1 + 48), v12);
  v9 = a2;
  if (!v13)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v13 + 48))(v13, &v9);
  v5 = v13;
  if (v13 == v12)
  {
    v6 = 4;
    v5 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_7;
    v6 = 5;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v6))(v5);
LABEL_7:
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>((unsigned int **)a1, v4, *(_QWORD *)(a1 + 48), v10);
  v9 = a2;
  if (!v11)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v11 + 48))(v11, &v9);
  result = v11;
  if (v11 == v10)
  {
    v8 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v8))(result);
}

void sub_22DAB5860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::LinMinPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9836B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LinMinPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9836B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F9836F8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F9836F8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[1] = 0;
  *v2 = &off_24F9836F8;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_22DAB5AA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v3 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = &off_24F9836F8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = (_BYTE *)result[1];
  v4 = (_BYTE *)result[2];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a2 + 24) = v8;
    result = memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
  return result;
}

void sub_22DAB5B58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14IsEqualToMaxOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16v"
                     "ectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14IsEqualToMaxOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEE"
                                "RKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14IsEqualToMaxOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14IsEqualToMaxOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::IsEqualToMaxOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t (***v6)();
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  operations_research::sat::PrecedencesPropagator *v32;
  operations_research::sat::MinPropagator *v33;
  int v34;
  operations_research::sat::IntegerTrail *v35;
  operations_research::sat::GenericLiteralWatcher *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  void *__p;
  char *v42;
  char *v43;
  _QWORD *v44;
  uint64_t (**v45)();
  unint64_t v46;
  uint64_t (***v47)();
  uint64_t v48;

  v2 = a2;
  v3 = a1;
  v48 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v42 = 0;
  v43 = 0;
  v5 = *(_DWORD **)a1;
  v4 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v4)
  {
    do
    {
      v8 = *v5 ^ 1;
      v9 = v42;
      if (v42 < v43)
      {
        *(_DWORD *)v42 = v8;
        v10 = (uint64_t)(v9 + 4);
        goto LABEL_29;
      }
      v11 = v3;
      v12 = v4;
      v13 = (char *)__p;
      v14 = v42 - (_BYTE *)__p;
      v15 = (v42 - (_BYTE *)__p) >> 2;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v17 = v43 - (_BYTE *)__p;
      if ((v43 - (_BYTE *)__p) >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v19 = (char *)operator new(4 * v18);
        v20 = (int *)&v19[4 * v15];
        *v20 = v8;
        v10 = (uint64_t)(v20 + 1);
        if (v9 == v13)
        {
LABEL_20:
          v4 = v12;
          v3 = v11;
          goto LABEL_26;
        }
      }
      else
      {
        v19 = 0;
        v20 = (int *)(4 * v15);
        *(_DWORD *)(4 * v15) = v8;
        v10 = 4 * v15 + 4;
        if (v9 == v13)
          goto LABEL_20;
      }
      v21 = v9 - 4 - v13;
      if (v21 >= 0x2C)
      {
        v22 = v9 - &v19[v14];
        v4 = v12;
        v3 = v11;
        if (v22 >= 0x20)
        {
          v23 = (v21 >> 2) + 1;
          v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
          v25 = &v9[-v24];
          v20 = (int *)((char *)v20 - v24);
          v26 = &v19[4 * v15 - 16];
          v27 = v9 - 16;
          v28 = v23 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v29 = *(_OWORD *)v27;
            *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
            *(_OWORD *)v26 = v29;
            v26 -= 32;
            v27 -= 32;
            v28 -= 8;
          }
          while (v28);
          v9 = v25;
          if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_26;
        }
      }
      else
      {
        v4 = v12;
        v3 = v11;
      }
      do
      {
        v30 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *--v20 = v30;
      }
      while (v9 != v13);
LABEL_26:
      __p = v20;
      v42 = (char *)v10;
      v43 = &v19[4 * v18];
      if (v13)
        operator delete(v13);
      v2 = a2;
LABEL_29:
      v42 = (char *)v10;
      v31 = *v5 | ((unint64_t)*(unsigned int *)(v3 + 24) << 32);
      v45 = &off_24F983768;
      v46 = v31;
      v47 = &v45;
      v32 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(v2);
      operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v32, v46, SHIDWORD(v46), 0, -1, 0, 0);
      v6 = v47;
      if (v47 == &v45)
      {
        v6 = &v45;
        v7 = 4;
      }
      else
      {
        if (!v47)
          goto LABEL_5;
        v7 = 5;
      }
      (*v6)[v7]();
LABEL_5:
      ++v5;
    }
    while (v5 != v4);
  }
  v33 = (operations_research::sat::MinPropagator *)operator new();
  v34 = *(_DWORD *)(v3 + 24);
  v35 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v2);
  operations_research::sat::MinPropagator::MinPropagator((uint64_t)v33, (uint64_t)&__p, v34 ^ 1, (uint64_t)v35);
  v36 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v2);
  operations_research::sat::MinPropagator::RegisterWith(v33, v36);
  v37 = (_QWORD *)operator new();
  *v37 = &off_24F983578;
  v37[1] = v33;
  v44 = v37;
  v38 = *(_QWORD **)(v2 + 56);
  if ((unint64_t)v38 >= *(_QWORD *)(v2 + 64))
  {
    v39 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v2 + 48), &v44);
  }
  else
  {
    *v38 = v37;
    v39 = (char *)(v38 + 1);
  }
  *(_QWORD *)(v2 + 56) = v39;
  if (__p)
  {
    v42 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DAB5F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  MEMORY[0x22E31DF78](v17, 0x10A1C40C7DE62E2);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F983768;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24F983768;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::PrecedencesPropagator *v3;

  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), 0, -1, 0, 0);
}

uint64_t std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEE"
                                "S4_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F9837F8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F9837F8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_24F9837F8;
  operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DAB623C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F9837F8;
  return operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;

  v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat24NonOverlappingRectanglesERKNSt3__16vectorIN3gtl7IntTypeINS0_21Interval"
                     "Variable_tag_EiEENS1_9allocatorIS6_EEEESB_bEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat24NonOverlappingRectanglesERKNSt3__16vectorIN3gtl7IntTypeINS0"
                                "_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEESB_bEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat24NonOverlappingRectanglesERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEESB_bEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat24NonOverlappingRectanglesERKNSt3__16vectorIN3gtl7IntTypeINS0_21IntervalVariable_tag_EiEENS1_9allocatorIS6_EEEESB_bEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

void sub_22DAB644C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_22DAB6558(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::NonOverlappingRectangles(std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,std::vector<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>> const&,BOOL)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  operations_research::sat::SchedulingConstraintHelper *v4;
  operations_research::sat::SchedulingConstraintHelper *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  operations_research::sat::GenericLiteralWatcher *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;

  v4 = (operations_research::sat::SchedulingConstraintHelper *)operator new();
  operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper(v4, a1, a2);
  v5 = (operations_research::sat::SchedulingConstraintHelper *)operator new();
  operations_research::sat::SchedulingConstraintHelper::SchedulingConstraintHelper(v5, a1 + 24, a2);
  v6 = (_QWORD *)operator new();
  *v6 = &off_24F983868;
  v6[1] = v4;
  v22 = v6;
  v7 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v7 >= *(_QWORD *)(a2 + 64))
  {
    v8 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &v22);
  }
  else
  {
    *v7 = v6;
    v8 = (char *)(v7 + 1);
  }
  *(_QWORD *)(a2 + 56) = v8;
  v9 = (_QWORD *)operator new();
  *v9 = &off_24F983868;
  v9[1] = v5;
  v22 = v9;
  v10 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v10 >= *(_QWORD *)(a2 + 64))
  {
    v11 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &v22);
  }
  else
  {
    *v10 = v9;
    v11 = (char *)(v10 + 1);
  }
  *(_QWORD *)(a2 + 56) = v11;
  v12 = operator new();
  *(_QWORD *)v12 = &off_24F985AE0;
  *(_QWORD *)(v12 + 8) = v4;
  *(_QWORD *)(v12 + 16) = v5;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  v13 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  v14 = operations_research::sat::NonOverlappingRectanglesEnergyPropagator::RegisterWith((operations_research::sat::SchedulingConstraintHelper **)v12, v13);
  operations_research::sat::GenericLiteralWatcher::SetPropagatorPriority(v13, v14, 3);
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9838A0;
  v15[1] = v12;
  v22 = v15;
  v16 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a2 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &v22);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a2 + 56) = v17;
  v18 = (operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator *)operator new();
  operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::NonOverlappingRectanglesDisjunctivePropagator(v18, *(_BYTE *)(a1 + 48), v4, v5, (operations_research::sat::Model *)a2);
  operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator::Register(v18, 3, 4);
  v19 = (_QWORD *)operator new();
  *v19 = &off_24F9838D8;
  v19[1] = v18;
  v22 = v19;
  v20 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v20 >= *(_QWORD *)(a2 + 64))
  {
    v21 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &v22);
  }
  else
  {
    *v20 = v19;
    v21 = (char *)(v20 + 1);
  }
  *(_QWORD *)(a2 + 56) = v21;
  operations_research::sat::AddCumulativeRelaxation(a1, (uint64_t)v4, v5, a2);
  operations_research::sat::AddCumulativeRelaxation(a1 + 24, (uint64_t)v5, v4, a2);
}

void sub_22DAB6840(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10B1C4052247CDBLL);
  _Unwind_Resume(a1);
}

void sub_22DAB6864(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1030C40D93D9250);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::SchedulingConstraintHelper>::~Delete(_QWORD *a1)
{
  operations_research::sat::SchedulingConstraintHelper *v2;

  v2 = (operations_research::sat::SchedulingConstraintHelper *)a1[1];
  *a1 = &off_24F983868;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SchedulingConstraintHelper>::~Delete(_QWORD *a1)
{
  operations_research::sat::SchedulingConstraintHelper *v2;

  v2 = (operations_research::sat::SchedulingConstraintHelper *)a1[1];
  *a1 = &off_24F983868;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::SchedulingConstraintHelper::~SchedulingConstraintHelper(operations_research::sat::SchedulingConstraintHelper *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 48);
  if (v3)
  {
    *((_QWORD *)this + 49) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 45);
  if (v4)
  {
    *((_QWORD *)this + 46) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 40);
  if (v5)
  {
    *((_QWORD *)this + 41) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 37);
  if (v6)
  {
    *((_QWORD *)this + 38) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 34);
  if (v7)
  {
    *((_QWORD *)this + 35) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 31);
  if (v8)
  {
    *((_QWORD *)this + 32) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 28);
  if (v9)
  {
    *((_QWORD *)this + 29) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 25);
  if (v10)
  {
    *((_QWORD *)this + 26) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 22);
  if (v11)
  {
    *((_QWORD *)this + 23) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 19);
  if (v12)
  {
    *((_QWORD *)this + 20) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 16);
  if (v13)
  {
    *((_QWORD *)this + 17) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 13);
  if (v14)
  {
    *((_QWORD *)this + 14) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 10);
  if (v15)
  {
    *((_QWORD *)this + 11) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 7);
  if (v16)
  {
    *((_QWORD *)this + 8) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 4);
  if (v17)
  {
    *((_QWORD *)this + 5) = v17;
    operator delete(v17);
  }
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::NonOverlappingRectanglesEnergyPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9838A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::NonOverlappingRectanglesEnergyPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9838A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9838D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::NonOverlappingRectanglesDisjunctivePropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F9838D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F983920;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F983920;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat17ImpliesInIntervalENS0_7LiteralEN3gtl7IntTypeINS0_20IntegerVariable_tag"
                     "_EiEExxEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat17ImpliesInIntervalENS0_7LiteralEN3gtl7IntTypeINS0_20IntegerV"
                                "ariable_tag_EiEExxEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat17ImpliesInIntervalENS0_7LiteralEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExxEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat17ImpliesInIntervalENS0_7LiteralEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExxEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ImpliesInInterval(operations_research::sat::Literal,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t LiteralAssociatedToEquality;
  operations_research::sat::SatSolver *v8;
  uint64_t (***v9)();
  uint64_t v10;
  int v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *__p;
  void *v22;
  _DWORD *v23;
  _BYTE v24[12];
  _BYTE v25[24];
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t (**v29)();
  unint64_t v30;
  uint64_t (***v31)();
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    v11 = *(_DWORD *)(a1 + 16);
    v12 = operator new(4uLL);
    __p = v12;
    *v12 = v11;
    v22 = v12 + 1;
    v23 = v12 + 1;
    *(_DWORD *)v24 = *(_DWORD *)(a1 + 20);
    *(_QWORD *)&v24[4] = v4;
    operations_research::sat::Implication((uint64_t)&__p, *(uint64_t *)v24, SHIDWORD(v4), (uint64_t)v27);
    *(_QWORD *)v24 = a2;
    if (!v28)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v28 + 48))(v28, v24);
    v13 = v28;
    if (v28 == v27)
    {
      v14 = 4;
      v13 = v27;
    }
    else
    {
      if (!v28)
        goto LABEL_13;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_13:
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    v15 = *(_DWORD *)(a1 + 16);
    v16 = operator new(4uLL);
    __p = v16;
    *v16 = v15;
    v23 = v16 + 1;
    v22 = v16 + 1;
    v17 = *(_QWORD *)(a1 + 8);
    if (v17 >= (uint64_t)0x8000000000000002)
      v18 = -v17;
    else
      v18 = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)v24 = *(_DWORD *)(a1 + 20) ^ 1;
    *(_QWORD *)&v24[4] = v18;
    operations_research::sat::Implication((uint64_t)&__p, *(uint64_t *)v24, SHIDWORD(v18), (uint64_t)v25);
    *(_QWORD *)v24 = a2;
    if (!v26)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v26 + 48))(v26, v24);
    v19 = v26;
    if (v26 == v25)
    {
      v20 = 4;
      v19 = v25;
    }
    else
    {
      if (!v26)
        goto LABEL_24;
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_24:
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    return;
  }
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  v6 = *(unsigned int *)(a1 + 16);
  LiteralAssociatedToEquality = operations_research::sat::IntegerEncoder::GetOrCreateLiteralAssociatedToEquality(v5, *(_DWORD *)(a1 + 20), *(_QWORD *)a1);
  v29 = &off_24F982CC0;
  v30 = v6 | (LiteralAssociatedToEquality << 32);
  v31 = &v29;
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
  operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v8, v30 ^ 1, SHIDWORD(v30));
  v9 = v31;
  if (v31 == &v29)
  {
    v10 = 4;
    v9 = &v29;
    goto LABEL_10;
  }
  if (v31)
  {
    v10 = 5;
LABEL_10:
    (*v9)[v10]();
  }
}

void sub_22DAB6EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DAB6F3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 48);
  if (v4 == v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 72) + 32))(v2 - 72);
    _Unwind_Resume(a1);
  }
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22DAB6F24);
}

void operations_research::sat::Implication(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v6 = *(const void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = v5 - *(_QWORD *)a1;
  if (v5 == *(_QWORD *)a1)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)a1);
    v9 = &v8[4 * (v7 >> 2)];
    memcpy(v8, v6, v7);
  }
  *(_QWORD *)(a4 + 24) = 0;
  v10 = operator new(0x30uLL);
  *v10 = &off_24F983990;
  v10[1] = a2;
  *((_DWORD *)v10 + 4) = a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v11 = v9 - v8;
  if (v11)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v11);
    v10[3] = v12;
    v13 = &v12[4 * (v11 >> 2)];
    v10[5] = v13;
    memcpy(v12, v8, v11);
    v10[4] = v13;
  }
  *(_QWORD *)(a4 + 24) = v10;
  if (v8)
    operator delete(v8);
}

void sub_22DAB70AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F983990;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F983990;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24F983990;
  v2[1] = v3;
  v4 = *(_DWORD *)(a1 + 16);
  v2[3] = 0;
  *((_DWORD *)v2 + 4) = v4;
  v2[4] = 0;
  v2[5] = 0;
  v6 = *(_BYTE **)(a1 + 24);
  v5 = *(_BYTE **)(a1 + 32);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    v2[3] = v8;
    v9 = &v8[4 * (v7 >> 2)];
    v2[5] = v9;
    memcpy(v8, v6, v7);
    v2[4] = v9;
  }
  return v2;
}

void sub_22DAB721C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v8;
  char *v9;

  *(_QWORD *)a2 = &off_24F983990;
  v2 = result[1];
  v3 = *((_DWORD *)result + 4);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v5 = (_BYTE *)result[3];
  v4 = (_BYTE *)result[4];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = v8;
    v9 = &v8[4 * (v6 >> 2)];
    *(_QWORD *)(a2 + 40) = v9;
    result = memcpy(v8, v5, v6);
    *(_QWORD *)(a2 + 32) = v9;
  }
  return result;
}

void sub_22DAB72D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat11ImplicationERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEENS0_14"
                     "IntegerLiteralEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat11ImplicationERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3"
                                "_EEEENS0_14IntegerLiteralEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat11ImplicationERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEENS0_14IntegerLiteralEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat11ImplicationERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEENS0_14IntegerLiteralEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::Implication(std::vector<operations_research::sat::Literal> const&,operations_research::sat::IntegerLiteral)::{lambda(operations_research::sat::Model *)#1}::operator()(int *a1, uint64_t a2)
{
  operations_research::sat::IntegerTrail *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int *v9;
  int *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  int *v25;
  uint64_t v26;
  __int128 v27;
  unsigned int *v28;
  int AssociatedLiteral;
  int *v30;
  _DWORD *v31;
  _DWORD *v32;
  int *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  int *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t (***v50)();
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t (**v55)();
  int *v56[2];
  uint64_t (***v57)();
  uint64_t (**v58)();
  int *v59[2];
  uint64_t (***v60)();
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v5 = *(_QWORD *)(a1 + 1);
  v6 = *((_QWORD *)v4 + 5);
  if (v5 > *(_QWORD *)(v6 + 12 * *a1))
  {
    v52 = a2;
    if (v5 > -*(_QWORD *)(v6 + 12 * (*a1 ^ 1)))
    {
      v8 = (_DWORD *)*((_QWORD *)a1 + 2);
      v7 = (_DWORD *)*((_QWORD *)a1 + 3);
      if (v8 != v7)
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v53 = (_DWORD *)*((_QWORD *)a1 + 3);
        while (1)
        {
          while (1)
          {
            v12 = *v8 ^ 1;
            if (v9 >= v10)
              break;
            *v9++ = v12;
            if (++v8 == v7)
              goto LABEL_71;
          }
          v13 = v9 - v11;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if (((char *)v10 - (char *)v11) >> 1 > v14)
            v14 = ((char *)v10 - (char *)v11) >> 1;
          if ((unint64_t)((char *)v10 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
          {
            if (v15 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v16 = operator new(4 * v15);
            v17 = (int *)&v16[4 * v13];
            *v17 = v12;
            v18 = (uint64_t)(v17 + 1);
            if (v9 == v11)
              goto LABEL_21;
          }
          else
          {
            v16 = 0;
            v17 = (int *)(4 * v13);
            *(_DWORD *)(4 * v13) = v12;
            v18 = 4 * v13 + 4;
            if (v9 == v11)
              goto LABEL_21;
          }
          v19 = (char *)(v9 - 1) - (char *)v11;
          if (v19 >= 0xBC)
          {
            if (&v16[(char *)v9 - (char *)v11 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[(char *)v9 - (char *)v11 - 4])
            {
              v20 = v9;
            }
            else if ((int *)((char *)v9 - (v19 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v9 - 1)
            {
              v20 = v9;
            }
            else if ((unint64_t)((char *)v11 - v16) >= 0x20)
            {
              v22 = (v19 >> 2) + 1;
              v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
              v20 = &v9[v23 / 0xFFFFFFFFFFFFFFFCLL];
              v17 = (int *)((char *)v17 - v23);
              v24 = &v16[4 * v13 - 16];
              v25 = v9 - 4;
              v26 = v22 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v27 = *(_OWORD *)v25;
                *(v24 - 1) = *((_OWORD *)v25 - 1);
                *v24 = v27;
                v24 -= 2;
                v25 -= 8;
                v26 -= 8;
              }
              while (v26);
              if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_21;
            }
            else
            {
              v20 = v9;
            }
          }
          else
          {
            v20 = v9;
          }
          do
          {
            v21 = *--v20;
            *--v17 = v21;
          }
          while (v20 != v11);
LABEL_21:
          v10 = (int *)&v16[4 * v15];
          if (v11)
            operator delete(v11);
          v11 = v17;
          v9 = (int *)v18;
          v7 = v53;
          if (++v8 == v53)
            goto LABEL_71;
        }
      }
      v9 = 0;
      v11 = 0;
LABEL_71:
      v58 = &off_24F980568;
      v59[0] = v11;
      v59[1] = (int *)(v9 - v11);
      v60 = &v58;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v59, v52);
      v50 = v60;
      if (v60 == &v58)
      {
        v51 = 4;
        v50 = &v58;
        goto LABEL_75;
      }
      goto LABEL_72;
    }
    v28 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
    AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v28, *(const char **)a1, a1[2]);
    v11 = operator new(4uLL);
    *v11 = AssociatedLiteral;
    v30 = v11 + 1;
    v32 = (_DWORD *)*((_QWORD *)a1 + 2);
    v31 = (_DWORD *)*((_QWORD *)a1 + 3);
    v33 = v11 + 1;
    if (v32 == v31)
    {
LABEL_68:
      v55 = &off_24F980568;
      v56[0] = v11;
      v56[1] = (int *)(v30 - v11);
      v57 = &v55;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v56, v52);
      v50 = v57;
      if (v57 == &v55)
      {
        v51 = 4;
        v50 = &v55;
        goto LABEL_75;
      }
LABEL_72:
      if (!v50)
        goto LABEL_76;
      v51 = 5;
LABEL_75:
      (*v50)[v51]();
LABEL_76:
      if (v11)
        operator delete(v11);
      return;
    }
    v54 = (_DWORD *)*((_QWORD *)a1 + 3);
    while (1)
    {
      while (1)
      {
        v34 = *v32 ^ 1;
        if (v30 >= v33)
          break;
        *v30++ = v34;
        if (++v32 == v31)
          goto LABEL_68;
      }
      v35 = v30 - v11;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if (((char *)v33 - (char *)v11) >> 1 > v36)
        v36 = ((char *)v33 - (char *)v11) >> 1;
      if ((unint64_t)((char *)v33 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        if (v37 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = operator new(4 * v37);
        v39 = (int *)&v38[4 * v35];
        *v39 = v34;
        v40 = (uint64_t)(v39 + 1);
        if (v30 == v11)
          goto LABEL_53;
      }
      else
      {
        v38 = 0;
        v39 = (int *)(4 * v35);
        *(_DWORD *)(4 * v35) = v34;
        v40 = 4 * v35 + 4;
        if (v30 == v11)
          goto LABEL_53;
      }
      v41 = (char *)(v30 - 1) - (char *)v11;
      if (v41 >= 0xBC)
      {
        if (&v38[(char *)v30 - (char *)v11 - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v38[(char *)v30 - (char *)v11 - 4])
        {
          v42 = v30;
        }
        else if ((int *)((char *)v30 - (v41 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v30 - 1)
        {
          v42 = v30;
        }
        else if ((unint64_t)((char *)v11 - v38) >= 0x20)
        {
          v44 = (v41 >> 2) + 1;
          v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
          v42 = &v30[v45 / 0xFFFFFFFFFFFFFFFCLL];
          v39 = (int *)((char *)v39 - v45);
          v46 = &v38[4 * v35 - 16];
          v47 = v30 - 4;
          v48 = v44 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v49 = *(_OWORD *)v47;
            *(v46 - 1) = *((_OWORD *)v47 - 1);
            *v46 = v49;
            v46 -= 2;
            v47 -= 8;
            v48 -= 8;
          }
          while (v48);
          if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_53;
        }
        else
        {
          v42 = v30;
        }
      }
      else
      {
        v42 = v30;
      }
      do
      {
        v43 = *--v42;
        *--v39 = v43;
      }
      while (v42 != v11);
LABEL_53:
      v33 = (int *)&v38[4 * v37];
      if (v11)
        operator delete(v11);
      v11 = v39;
      v30 = (int *)v40;
      v31 = v54;
      if (++v32 == v54)
        goto LABEL_68;
    }
  }
}

void sub_22DAB78FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  void *v22;
  char *v24;
  uint64_t v25;

  v24 = a21;
  if (a21 == v21)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (v22)
    operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_22DAB7990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11)
    JUMPOUT(0x22DAB7988);
  JUMPOUT(0x22DAB797CLL);
}

void std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F983A20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F983A20;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::PrecedencesPropagator *v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 24);
  operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v3, v4, v5, v6, -1, &v7, 1);
}

uint64_t std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat33ConditionalLowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_"
                     "tag_EiEES4_xNS0_7LiteralEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat33ConditionalLowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20Integ"
                                "erVariable_tag_EiEES4_xNS0_7LiteralEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat33ConditionalLowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xNS0_7LiteralEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat33ConditionalLowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xNS0_7LiteralEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalLowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::~Model(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F983AA0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F983AA0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_24F983AA0;
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22DAB7C0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F983AA0;
  return operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::Model((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;

  v2 = (void *)__p[5];
  if (v2)
  {
    __p[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat17PartialIsOneOfVarEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__"
                     "16vectorIS4_NS5_9allocatorIS4_EEEERKNS6_INS0_7LiteralENS7_ISC_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat17PartialIsOneOfVarEN3gtl7IntTypeINS0_20IntegerVariable_tag_E"
                                "iEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEERKNS6_INS0_7LiteralENS7_ISC_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat17PartialIsOneOfVarEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEERKNS6_INS0_7LiteralENS7_ISC_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat17PartialIsOneOfVarEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEERKNSt3__16vectorIS4_NS5_9allocatorIS4_EEEERKNS6_INS0_7LiteralENS7_ISC_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  v9 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *(_BYTE **)(a2 + 32);
  v10 = *(_BYTE **)(a2 + 40);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  return a1;
}

{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  v9 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *(_BYTE **)(a2 + 32);
  v10 = *(_BYTE **)(a2 + 40);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  return a1;
}

void sub_22DAB7E1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_22DAB7F28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PartialIsOneOfVar(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  int8x16_t *v4;
  int8x16_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *__p;
  _BYTE *v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v5 = *(int8x16_t **)a1;
  v4 = *(int8x16_t **)(a1 + 8);
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v6 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    v10 = 0;
    v7 = 0;
    goto LABEL_8;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFDLL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v7 = (char *)operator new(2 * v6);
  v8 = v6 >> 2;
  v27 = v7;
  v28 = v7;
  v9 = 8 * (v6 >> 2);
  v10 = &v7[v9];
  v29 = &v7[v9];
  bzero(v7, v9);
  if ((unint64_t)v6 <= 8)
  {
LABEL_8:
    if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 < 9uLL)
      goto LABEL_18;
    goto LABEL_9;
  }
  v11 = *(_DWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = operator new(0x40uLL);
  *(_QWORD *)v14 = &off_24F983B10;
  v14[2] = v11;
  *((_QWORD *)v14 + 2) = v5;
  *((_QWORD *)v14 + 3) = v8;
  *((_QWORD *)v14 + 4) = v7;
  *((_QWORD *)v14 + 5) = v8;
  *((_QWORD *)v14 + 6) = v12;
  *((_QWORD *)v14 + 7) = (v13 - v12) >> 2;
  v33 = v14;
  operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v14 + 2), a2);
  v15 = v33;
  if (v33 != v32)
  {
    if (v33)
    {
      v16 = 5;
      goto LABEL_17;
    }
    goto LABEL_8;
  }
  v16 = 4;
  v15 = v32;
LABEL_17:
  (*(void (**)(void))(*v15 + 8 * v16))();
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 < 9uLL)
    goto LABEL_18;
LABEL_9:
  v17 = *(_DWORD *)(a1 + 24);
  operations_research::sat::NegationOf((int8x16_t **)a1, (int8x16_t **)&__p);
  v18 = __p;
  v19 = v26;
  v21 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  v31 = 0;
  v22 = operator new(0x40uLL);
  *(_QWORD *)v22 = &off_24F983B10;
  v22[2] = v17 ^ 1;
  *((_QWORD *)v22 + 2) = v18;
  *((_QWORD *)v22 + 3) = (v19 - v18) >> 2;
  *((_QWORD *)v22 + 4) = v7;
  *((_QWORD *)v22 + 5) = (v10 - v7) >> 3;
  *((_QWORD *)v22 + 6) = v21;
  *((_QWORD *)v22 + 7) = (v20 - v21) >> 2;
  v31 = v22;
  operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t)(v22 + 2), a2);
  v23 = v31;
  if (v31 == v30)
  {
    v24 = 4;
    v23 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_14;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_14:
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
LABEL_18:
  if (v7)
    operator delete(v7);
}

void sub_22DAB8190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  void *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == &a20)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  operator delete(v23);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24F983B10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24F983B10;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

char *std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4"
                     "absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable"
                                "_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_I"
                                "KNS0_7LiteralEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23GreaterThanAtLeastOneOfEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEEN4absl14lts_2020_02_254SpanIKS4_EENS7_IKNS2_INS0_17IntegerValue_tag_ExEEEENS7_IKNS0_7LiteralEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

char *operations_research::sat::GreaterThanAtLeastOneOf(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const>,absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  operations_research::sat::GreaterThanAtLeastOneOfPropagator *v4;
  operations_research::sat::GenericLiteralWatcher *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *result;
  _QWORD *v9;

  v4 = (operations_research::sat::GreaterThanAtLeastOneOfPropagator *)operator new();
  operations_research::sat::GreaterThanAtLeastOneOfPropagator::GreaterThanAtLeastOneOfPropagator((uint64_t)v4, *(_DWORD *)a1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), 0, 0, a2);
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  operations_research::sat::GreaterThanAtLeastOneOfPropagator::RegisterWith(v4, v5);
  v6 = (_QWORD *)operator new();
  *v6 = &off_24F983B80;
  v6[1] = v4;
  v9 = v6;
  v7 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v7 >= *(_QWORD *)(a2 + 64))
  {
    result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &v9);
  }
  else
  {
    *v7 = v6;
    result = (char *)(v7 + 1);
  }
  *(_QWORD *)(a2 + 56) = result;
  return result;
}

void sub_22DAB8470(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C40846E0A44);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::GreaterThanAtLeastOneOfPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F983B80;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::GreaterThanAtLeastOneOfPropagator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F983B80;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F983BD8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F983BD8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[1] = 0;
  *v2 = &off_24F983BD8;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_22DAB864C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v3 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = &off_24F983BD8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = (_BYTE *)result[1];
  v4 = (_BYTE *)result[2];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a2 + 24) = v8;
    result = memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
  return result;
}

void sub_22DAB8704(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()((unsigned int **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14ReifiedBoolAndERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_"
                     "EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14ReifiedBoolAndERKNSt3__16vectorINS0_7LiteralENS1_9allocator"
                                "IS3_EEEES3_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14ReifiedBoolAndERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14ReifiedBoolAndERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ReifiedBoolAnd(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(unsigned int **a1, uint64_t a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  operations_research::sat::SatSolver *v9;
  uint64_t (***v10)();
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  int *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  _OWORD *v26;
  int *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  char *v31;
  _DWORD *v32;
  int *v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  int *v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  uint64_t (***v50)();
  uint64_t v51;
  int *__p;
  int *v54;
  char *v55;
  uint64_t (**v56)();
  int *v57[2];
  uint64_t (***v58)();
  uint64_t (**v59)();
  unint64_t v60;
  uint64_t (***v61)();
  uint64_t v62;

  v3 = a1;
  v62 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v54 = 0;
  v55 = 0;
  v5 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v33 = 0;
    v6 = 0;
    v31 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 1;
    goto LABEL_34;
  }
  do
  {
    while (1)
    {
      v7 = *v5;
      v8 = *((unsigned int *)v3 + 6) | (unint64_t)(v7 << 32);
      v59 = &off_24F982CC0;
      v60 = v8;
      v61 = &v59;
      v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
      operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v9, v60 ^ 1, SHIDWORD(v60));
      v10 = v61;
      if (v61 == &v59)
      {
        v10 = &v59;
        v11 = 4;
      }
      else
      {
        if (!v61)
          goto LABEL_9;
        v11 = 5;
      }
      (*v10)[v11]();
LABEL_9:
      v12 = v7 ^ 1;
      v13 = v54;
      if (v54 >= (int *)v55)
        break;
      *v54 = v12;
      v6 = ++v54;
      if (++v5 == v4)
        goto LABEL_31;
    }
    v14 = a2;
    v15 = __p;
    v16 = v54 - __p;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = v55 - (char *)__p;
    if ((v55 - (char *)__p) >> 1 > v17)
      v17 = v18 >> 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (!v19)
    {
      v20 = 0;
      v21 = (int *)(4 * v16);
      *(_DWORD *)(4 * v16) = v12;
      v6 = (int *)(4 * v16 + 4);
      if (v54 == __p)
        goto LABEL_28;
LABEL_19:
      v22 = (char *)(v54 - 1) - (char *)__p;
      if (v22 < 0x2C)
        goto LABEL_69;
      if ((unint64_t)((char *)__p - v20) < 0x20)
        goto LABEL_69;
      v23 = (v22 >> 2) + 1;
      v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
      v25 = &v54[v24 / 0xFFFFFFFFFFFFFFFCLL];
      v21 = (int *)((char *)v21 - v24);
      v26 = &v20[4 * v16 - 16];
      v27 = v54 - 4;
      v28 = v23 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 8;
        v28 -= 8;
      }
      while (v28);
      v13 = v25;
      if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_69:
        do
        {
          v30 = *--v13;
          *--v21 = v30;
        }
        while (v13 != __p);
      }
      goto LABEL_28;
    }
    if (v19 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v20 = operator new(4 * v19);
    v21 = (int *)&v20[4 * v16];
    *v21 = v12;
    v6 = v21 + 1;
    if (v54 != __p)
      goto LABEL_19;
LABEL_28:
    __p = v21;
    v55 = &v20[4 * v19];
    if (v15)
      operator delete(v15);
    a2 = v14;
    v3 = a1;
    v54 = v6;
    ++v5;
  }
  while (v5 != v4);
LABEL_31:
  v31 = v55;
  if (v6 < (int *)v55)
  {
    *v6 = *((_DWORD *)v3 + 6);
    v32 = v6 + 1;
    goto LABEL_56;
  }
  v33 = __p;
  v34 = (char *)v6 - (char *)__p;
  v35 = v6 - __p;
  v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
LABEL_34:
  v37 = v31 - (char *)v33;
  if (v37 >> 1 > v36)
    v36 = v37 >> 1;
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
    v38 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v38 = v36;
  if (v38)
  {
    if (v38 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v39 = operator new(4 * v38);
  }
  else
  {
    v39 = 0;
  }
  v40 = (int *)&v39[4 * v35];
  *v40 = *((_DWORD *)v3 + 6);
  v32 = v40 + 1;
  if (v6 != v33)
  {
    v41 = (char *)v6 - (char *)v33 - 4;
    if (v41 < 0x2C)
    {
      v42 = v6;
      goto LABEL_53;
    }
    if ((unint64_t)((char *)v6 - v39 - v34) < 0x20)
    {
      v42 = v6;
      goto LABEL_53;
    }
    v43 = (v41 >> 2) + 1;
    v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
    v42 = &v6[v44 / 0xFFFFFFFFFFFFFFFCLL];
    v40 = (int *)((char *)v40 - v44);
    v45 = &v39[4 * v35 - 16];
    v46 = (__int128 *)(v6 - 4);
    v47 = v43 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v48 = *v46;
      *(v45 - 1) = *(v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 2;
      v47 -= 8;
    }
    while (v47);
    if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_53:
        v49 = *--v42;
        *--v40 = v49;
      }
      while (v42 != v33);
    }
  }
  __p = v40;
  if (v33)
    operator delete(v33);
LABEL_56:
  v56 = &off_24F980568;
  v57[0] = __p;
  v57[1] = (int *)(v32 - __p);
  v58 = &v56;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v57, a2);
  v50 = v58;
  if (v58 == &v56)
  {
    v51 = 4;
    v50 = &v56;
LABEL_60:
    (*v50)[v51]();
  }
  else if (v58)
  {
    v51 = 5;
    goto LABEL_60;
  }
  if (__p)
    operator delete(__p);
}

void sub_22DAB8C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F983C58;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F983C58;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[1] = 0;
  *v2 = &off_24F983C58;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_22DAB8DE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v3 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = &off_24F983C58;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = (_BYTE *)result[1];
  v4 = (_BYTE *)result[2];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a2 + 24) = v8;
    result = memcpy(v7, v5, v6);
    *(_QWORD *)(a2 + 16) = v8;
  }
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
  return result;
}

void sub_22DAB8E98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()((unsigned int **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat13ReifiedBoolOrERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_E"
                     "UlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat13ReifiedBoolOrERKNSt3__16vectorINS0_7LiteralENS1_9allocatorI"
                                "S3_EEEES3_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat13ReifiedBoolOrERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_EUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat13ReifiedBoolOrERKNSt3__16vectorINS0_7LiteralENS1_9allocatorIS3_EEEES3_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::ReifiedBoolOr(std::vector<operations_research::sat::Literal> const&,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(unsigned int **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  operations_research::sat::SatSolver *v9;
  uint64_t (***v10)();
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  _OWORD *v24;
  int *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  int *v29;
  int v30;
  uint64_t v31;
  int *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  int *v39;
  int64_t v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  int *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  uint64_t (***v50)();
  uint64_t v51;
  int *__p;
  int *v54;
  int *v55;
  uint64_t (**v56)();
  int *v57[2];
  uint64_t (***v58)();
  uint64_t (**v59)();
  unint64_t v60;
  uint64_t (***v61)();
  uint64_t v62;

  v2 = a2;
  v62 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v54 = 0;
  v55 = 0;
  v5 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v32 = 0;
    v6 = 0;
    v29 = 0;
    v30 = *((_DWORD *)a1 + 6) ^ 1;
    v33 = 0;
    v34 = 0;
    v35 = 1;
    goto LABEL_34;
  }
  do
  {
    while (1)
    {
      v7 = *v5;
      v8 = v7 | ((unint64_t)*((unsigned int *)a1 + 6) << 32);
      v59 = &off_24F982CC0;
      v60 = v8;
      v61 = &v59;
      v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v2);
      operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v9, v60 ^ 1, SHIDWORD(v60));
      v10 = v61;
      if (v61 == &v59)
      {
        v10 = &v59;
        v11 = 4;
      }
      else
      {
        if (!v61)
          goto LABEL_9;
        v11 = 5;
      }
      (*v10)[v11]();
LABEL_9:
      v12 = v54;
      if (v54 >= v55)
        break;
      *v54 = v7;
      v6 = ++v54;
      if (++v5 == v4)
        goto LABEL_31;
    }
    v13 = __p;
    v14 = v54 - __p;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v16 = (char *)v55 - (char *)__p;
    if (((char *)v55 - (char *)__p) >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (!v17)
    {
      v18 = 0;
      v19 = (int *)(4 * v14);
      *(_DWORD *)(4 * v14) = v7;
      v6 = (int *)(4 * v14 + 4);
      if (v54 == __p)
        goto LABEL_28;
LABEL_19:
      v20 = (char *)(v54 - 1) - (char *)__p;
      if (v20 < 0x2C)
        goto LABEL_69;
      if ((unint64_t)((char *)__p - v18) < 0x20)
        goto LABEL_69;
      v21 = (v20 >> 2) + 1;
      v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
      v23 = &v54[v22 / 0xFFFFFFFFFFFFFFFCLL];
      v19 = (int *)((char *)v19 - v22);
      v24 = &v18[4 * v14 - 16];
      v25 = v54 - 4;
      v26 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 8;
        v26 -= 8;
      }
      while (v26);
      v12 = v23;
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_69:
        do
        {
          v28 = *--v12;
          *--v19 = v28;
        }
        while (v12 != __p);
      }
      goto LABEL_28;
    }
    if (v17 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = operator new(4 * v17);
    v19 = (int *)&v18[4 * v14];
    *v19 = v7;
    v6 = v19 + 1;
    if (v54 != __p)
      goto LABEL_19;
LABEL_28:
    __p = v19;
    v55 = (int *)&v18[4 * v17];
    if (v13)
      operator delete(v13);
    v2 = a2;
    v54 = v6;
    ++v5;
  }
  while (v5 != v4);
LABEL_31:
  v29 = v55;
  v30 = *((_DWORD *)a1 + 6) ^ 1;
  if (v6 < v55)
  {
    *v6 = v30;
    v31 = (uint64_t)(v6 + 1);
    goto LABEL_56;
  }
  v32 = __p;
  v33 = (char *)v6 - (char *)__p;
  v34 = v6 - __p;
  v35 = v34 + 1;
  if ((unint64_t)(v34 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
LABEL_34:
  v36 = (char *)v29 - (char *)v32;
  if (v36 >> 1 > v35)
    v35 = v36 >> 1;
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
    v37 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v37 = v35;
  if (v37)
  {
    if (v37 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v38 = operator new(4 * v37);
    v39 = (int *)&v38[4 * v34];
    *v39 = v30;
    v31 = (uint64_t)(v39 + 1);
    v40 = (char *)v6 - (char *)v32;
    if (v6 == v32)
      goto LABEL_54;
LABEL_46:
    v41 = v40 - 4;
    if (v41 < 0x2C)
    {
      v42 = v6;
      goto LABEL_53;
    }
    if ((unint64_t)((char *)v6 - v38 - v33) < 0x20)
    {
      v42 = v6;
      goto LABEL_53;
    }
    v43 = (v41 >> 2) + 1;
    v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
    v42 = &v6[v44 / 0xFFFFFFFFFFFFFFFCLL];
    v39 = (int *)((char *)v39 - v44);
    v45 = &v38[4 * v34 - 16];
    v46 = v6 - 4;
    v47 = v43 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v48 = *(_OWORD *)v46;
      *(v45 - 1) = *((_OWORD *)v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 8;
      v47 -= 8;
    }
    while (v47);
    if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_53:
        v49 = *--v42;
        *--v39 = v49;
      }
      while (v42 != v32);
    }
  }
  else
  {
    v38 = 0;
    v39 = (int *)(4 * v34);
    *(_DWORD *)(4 * v34) = v30;
    v31 = 4 * v34 + 4;
    v40 = (char *)v6 - (char *)v32;
    if (v6 != v32)
      goto LABEL_46;
  }
LABEL_54:
  __p = v39;
  if (v32)
    operator delete(v32);
LABEL_56:
  v56 = &off_24F980568;
  v57[0] = __p;
  v57[1] = (int *)((v31 - (uint64_t)__p) >> 2);
  v58 = &v56;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v57, v2);
  v50 = v58;
  if (v58 == &v56)
  {
    v51 = 4;
    v50 = &v56;
LABEL_60:
    (*v50)[v51]();
  }
  else if (v58)
  {
    v51 = 5;
    goto LABEL_60;
  }
  if (__p)
    operator delete(__p);
}

void sub_22DAB93F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F983CD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24F983CD8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  operations_research::sat::SatSolver *v4;
  operations_research::sat::SatSolver *v5;

  v3 = *a2;
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*a2);
  operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v4, *(_DWORD *)(a1 + 8) ^ 1, *(_DWORD *)(a1 + 12));
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v3);
  return operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v5, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12) ^ 1u);
}

uint64_t std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat8EqualityENS0_7LiteralES1_EUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat8EqualityENS0_7LiteralES1_EUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat8EqualityENS0_7LiteralES1_EUlPNS0_5ModelEE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat8EqualityENS0_7LiteralES1_EUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Equality(operations_research::sat::Literal,operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::SatParameters>::~Delete(_QWORD *a1)
{
  operations_research::sat::SatParameters *v2;

  v2 = (operations_research::sat::SatParameters *)a1[1];
  *a1 = &off_24F983D58;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatParameters::~SatParameters(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::SatParameters>::~Delete(_QWORD *a1)
{
  operations_research::sat::SatParameters *v2;

  v2 = (operations_research::sat::SatParameters *)a1[1];
  *a1 = &off_24F983D58;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::SatParameters::~SatParameters(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F983D90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F983D90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExE"
                                "UlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(int *a1, uint64_t a2)
{
  operations_research::sat::IntegerTrail *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (***v13)();
  uint64_t v14;
  _BYTE v15[12];
  uint64_t (**v16)();
  int v17;
  uint64_t (***v18)();
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v5 = *((_QWORD *)a1 + 1);
  if (v5 >= (uint64_t)0x8000000000000002)
    v6 = -v5;
  else
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)v15 = *a1 ^ 1;
  *(_QWORD *)&v15[4] = v6;
  if ((operations_research::sat::IntegerTrail::Enqueue((uint64_t)v4, *(uint64_t *)v15, SHIDWORD(v6), 0, 0, 0, 0) & 1) == 0)
  {
    *((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2) + 496) = 1;
    google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1424, 1);
    v7 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Model trivially infeasible, variable ", 37);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" has lower bound ", 17);
    v9 = *a1;
    v16 = &off_24F982FF8;
    v17 = v9;
    v18 = &v16;
    v10 = *(_QWORD **)(a2 + 32);
    do
    {
      if (v10[4] >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v11 = v10;
      else
        v11 = v10 + 1;
      v10 = (_QWORD *)*v11;
    }
    while (*v11);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" and LowerOrEqual() was called with an upper bound of ", 54);
    std::ostream::operator<<();
    v13 = v18;
    if (v18 == &v16)
    {
      v14 = 4;
      v13 = &v16;
    }
    else
    {
      if (!v18)
      {
LABEL_15:
        google::LogMessage::~LogMessage((google::LogMessage *)v15);
        return;
      }
      v14 = 5;
    }
    (*v13)[v14]();
    goto LABEL_15;
  }
}

void sub_22DAB98E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
    {
      google::LogMessage::~LogMessage((google::LogMessage *)&a10);
      _Unwind_Resume(a1);
    }
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  google::LogMessage::~LogMessage((google::LogMessage *)&a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F983E10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F983E10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEE"
                                "xEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat14GreaterOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEExEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(int *a1, uint64_t a2)
{
  operations_research::sat::IntegerTrail *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t (***v12)();
  uint64_t v13;
  _BYTE v14[12];
  uint64_t (**v15)();
  int v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v5 = *((_QWORD *)a1 + 1);
  *(_DWORD *)v14 = *a1;
  *(_QWORD *)&v14[4] = v5;
  if ((operations_research::sat::IntegerTrail::Enqueue((uint64_t)v4, *(uint64_t *)v14, SHIDWORD(v5), 0, 0, 0, 0) & 1) == 0)
  {
    *((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2) + 496) = 1;
    if (*operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator() const(operations_research::sat::Model *)::vlocal__ >= 1
      && (operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator() const(operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator() const(operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/integer.h", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v14, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1410);
      v6 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Model trivially infeasible, variable ", 37);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" has upper bound ", 17);
      v8 = *a1;
      v15 = &off_24F9830C0;
      v16 = v8;
      v17 = &v15;
      v9 = *(_QWORD **)(a2 + 32);
      do
      {
        if (v9[4] >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
          v10 = v9;
        else
          v10 = v9 + 1;
        v9 = (_QWORD *)*v10;
      }
      while (*v10);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" and GreaterOrEqual() was called with a lower bound of ", 55);
      std::ostream::operator<<();
      v12 = v17;
      if (v17 == &v15)
      {
        v13 = 4;
        v12 = &v15;
      }
      else
      {
        if (!v17)
        {
LABEL_15:
          google::LogMessage::~LogMessage((google::LogMessage *)v14);
          return;
        }
        v13 = 5;
      }
      (*v12)[v13]();
      goto LABEL_15;
    }
  }
}

void sub_22DAB9C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
    {
      google::LogMessage::~LogMessage((google::LogMessage *)&a10);
      _Unwind_Resume(a1);
    }
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  google::LogMessage::~LogMessage((google::LogMessage *)&a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F983E90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F983E90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::PrecedencesPropagator *v3;

  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_QWORD *)(a1 + 16), -1, 0, 0);
}

uint64_t std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat22LowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_"
                     "xEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat22LowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_"
                                "tag_EiEES4_xEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat22LowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat22LowerOrEqualWithOffsetEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::LowerOrEqualWithOffset(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F983F10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F983F10;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::PrecedencesPropagator *v3;

  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12) ^ 1, -*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
}

uint64_t std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16Sum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_xEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16Sum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_Ei"
                                "EES4_S4_xEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16Sum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_xEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16Sum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_xEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::Sum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F983F90;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24F983F90;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_24F983F90;
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v2 + 1, v1);
  return v2;
}

void sub_22DAB9FA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F983F90;
  return operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(a2 + 1, a1 + 8);
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;

  v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((_QWORD *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23WeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8fun"
                     "ctionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23WeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEE"
                                "EEENS2_8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4"
                                "_ISF_EEEERKT_xEUlS9_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23WeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23WeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISF_EEEERKT_xEUlS9_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(_QWORD *)(a2 + 48);
  return a1;
}

{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(_QWORD *)(a2 + 48);
  return a1;
}

void sub_22DABA1B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_22DABA2C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::WeightedSumLowerOrEqual<std::vector<long long>>(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  char *v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  BOOL v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  unint64_t v60;
  BOOL v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  operations_research::sat::IntegerTrail *v73;
  int v74;
  uint64_t (***v75)();
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  int64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  _DWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _OWORD *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  int64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _BYTE *v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _OWORD *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  operations_research::sat::IntegerSumLE *v137;
  operations_research::sat::GenericLiteralWatcher *v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  _QWORD *v148;
  operations_research::sat::IntegerSumLE *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  _OWORD *v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  _QWORD *v157;
  _OWORD *v158;
  __int128 *v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  operations_research::sat::GenericLiteralWatcher *v163;
  _QWORD *v164;
  _QWORD *v165;
  char *v166;
  char *v167;
  int *v168;
  uint64_t v169;
  char *v170;
  int v171;
  char *v172;
  uint64_t v173;
  char *v174;
  int64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  __int128 v189;
  int v190;
  char *v191;
  int64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  _BYTE *v197;
  _QWORD *v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _OWORD *v204;
  char *v205;
  uint64_t v206;
  __int128 v207;
  operations_research::sat::IntegerSumLE *v208;
  operations_research::sat::GenericLiteralWatcher *v209;
  _QWORD *v210;
  _QWORD *v211;
  char *v212;
  char **v213;
  uint64_t v215;
  char *__p;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v224;
  _QWORD *v225;
  char *v226;
  void *v227;
  void *v228;
  uint64_t v229;
  void *v230;
  char *v231;
  char *v232;
  void *v233;
  char *v234;
  char *v235;
  void *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t (**v241)();
  uint64_t v242;
  uint64_t v243;
  uint64_t (***v244)();
  uint64_t (**v245)();
  int v246;
  uint64_t (***v247)();
  uint64_t (**v248)();
  int v249;
  uint64_t (***v250)();
  uint64_t v251;

  v3 = a2;
  v4 = a1;
  v251 = *MEMORY[0x24BDAC8D0];
  v5 = a1[1] - *a1;
  if ((int)((unint64_t)v5 >> 2) < 101)
  {
    v147 = operator new();
    v148 = v4;
    v149 = (operations_research::sat::IntegerSumLE *)v147;
    v236 = 0;
    v237 = 0;
    v238 = 0;
    v151 = (char *)v148[3];
    v150 = (char *)v148[4];
    v234 = 0;
    v235 = 0;
    v233 = 0;
    v152 = v150 - v151;
    if (v150 != v151)
    {
      if (v152 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v153 = operator new(v150 - v151);
      v233 = v153;
      v235 = (char *)v153 + 8 * (v152 >> 3);
      if ((unint64_t)(v152 - 8) < 0x18)
        goto LABEL_173;
      if ((unint64_t)((char *)v153 - v151) < 0x20)
        goto LABEL_173;
      v154 = ((unint64_t)(v152 - 8) >> 3) + 1;
      v155 = 8 * (v154 & 0x3FFFFFFFFFFFFFFCLL);
      v156 = &v151[v155];
      v157 = (_QWORD *)((char *)v153 + v155);
      v158 = v153 + 1;
      v159 = (__int128 *)(v151 + 16);
      v160 = v154 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v161 = *v159;
        *(v158 - 1) = *(v159 - 1);
        *v158 = v161;
        v158 += 2;
        v159 += 2;
        v160 -= 4;
      }
      while (v160);
      v151 = v156;
      v153 = v157;
      if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_173:
        v157 = v153;
        do
        {
          v162 = *(_QWORD *)v151;
          v151 += 8;
          *v157++ = v162;
        }
        while (v151 != v150);
      }
      v234 = (char *)v157;
    }
    operations_research::sat::IntegerSumLE::IntegerSumLE(v149, &v236, a1, &v233, a1[6], v3);
    if (v233)
    {
      v234 = (char *)v233;
      operator delete(v233);
    }
    if (v236)
    {
      v237 = (uint64_t)v236;
      operator delete(v236);
    }
    v163 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v3);
    operations_research::sat::IntegerSumLE::RegisterWith(v149, v163);
    v164 = (_QWORD *)operator new();
    *v164 = &off_24F984090;
    v164[1] = v149;
    v236 = v164;
    v165 = *(_QWORD **)(v3 + 56);
    if ((unint64_t)v165 >= *(_QWORD *)(v3 + 64))
    {
      v166 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v3 + 48), &v236);
    }
    else
    {
      *v165 = v164;
      v166 = (char *)(v165 + 1);
    }
    *(_QWORD *)(v3 + 56) = v166;
  }
  else
  {
    v236 = 0;
    v237 = 0;
    v238 = 0;
    v233 = 0;
    v234 = 0;
    v235 = 0;
    v230 = 0;
    v231 = 0;
    v232 = 0;
    LODWORD(v2) = llround(sqrt((double)(int)((unint64_t)v5 >> 2)));
    if ((int)v2 > 0)
    {
      v218 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v213 = (char **)(a2 + 48);
      v215 = (int)(v5 >> 2);
      __p = 0;
      v225 = (_QWORD *)(a2 + 32);
      v221 = v2;
      while (1)
      {
        v234 = (char *)v233;
        v10 = (char *)v230;
        v231 = (char *)v230;
        v11 = v7 + 1;
        v222 = v11 * v215;
        v217 = v11;
        if (v11 * v215 <= (int)v8 * (int)v2)
        {
          v13 = 0;
          v12 = 0;
          goto LABEL_84;
        }
        v219 = v6;
        v12 = 0;
        v13 = 0;
        v14 = (int)v8;
        v15 = *v4;
        do
        {
          v16 = v234;
          v224 = v13;
          if (v234 < v235)
          {
            *(_DWORD *)v234 = *(_DWORD *)(v15 + 4 * v14);
            v234 = v16 + 4;
            v17 = *(_QWORD *)(v4[3] + 8 * v14);
            v18 = v232;
            if (v10 >= v232)
              goto LABEL_31;
            goto LABEL_10;
          }
          v19 = (char *)v233;
          v20 = v234 - (_BYTE *)v233;
          v21 = (v234 - (_BYTE *)v233) >> 2;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v23 = v235 - (_BYTE *)v233;
          if ((v235 - (_BYTE *)v233) >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (!v24)
          {
            v25 = 0;
            v26 = (char *)(4 * v21);
            *(_DWORD *)(4 * v21) = *(_DWORD *)(v15 + 4 * v14);
            v27 = 4 * v21 + 4;
            if (v16 == v19)
              goto LABEL_28;
LABEL_22:
            v28 = v16 - 4 - v19;
            if (v28 < 0x2C)
              goto LABEL_266;
            if ((unint64_t)(v16 - &v25[v20]) < 0x20)
              goto LABEL_266;
            v29 = (v28 >> 2) + 1;
            v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
            v31 = &v16[-v30];
            v26 -= v30;
            v32 = &v25[4 * v21 - 16];
            v33 = v16 - 16;
            v34 = v29 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v35 = *(_OWORD *)v33;
              *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
              *(_OWORD *)v32 = v35;
              v32 -= 32;
              v33 -= 32;
              v34 -= 8;
            }
            while (v34);
            v16 = v31;
            if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_266:
              do
              {
                v36 = *((_DWORD *)v16 - 1);
                v16 -= 4;
                *((_DWORD *)v26 - 1) = v36;
                v26 -= 4;
              }
              while (v16 != v19);
            }
            goto LABEL_28;
          }
          if (v24 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = (char *)operator new(4 * v24);
          v26 = &v25[4 * v21];
          *(_DWORD *)v26 = *(_DWORD *)(v15 + 4 * v14);
          v27 = (uint64_t)(v26 + 4);
          if (v16 != v19)
            goto LABEL_22;
LABEL_28:
          v233 = v26;
          v234 = (char *)v27;
          v235 = &v25[4 * v24];
          if (v19)
          {
            operator delete(v19);
            v10 = v231;
          }
          v4 = a1;
          v13 = v224;
          v234 = (char *)v27;
          v17 = *(_QWORD *)(a1[3] + 8 * v14);
          v18 = v232;
          if (v10 >= v232)
          {
LABEL_31:
            v37 = (char *)v230;
            v38 = v10 - (_BYTE *)v230;
            v39 = (v10 - (_BYTE *)v230) >> 3;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v41 = v18 - (_BYTE *)v230;
            if (v41 >> 2 > v40)
              v40 = v41 >> 2;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42)
            {
              if (v42 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v43 = operator new(8 * v42);
              v44 = &v43[8 * v39];
              *v44 = v17;
              v45 = (uint64_t)(v44 + 1);
              if (v10 != v37)
              {
LABEL_40:
                v46 = v10 - 8 - v37;
                v2 = v221;
                if (v46 < 0x168)
                {
                  v47 = v10;
                  goto LABEL_42;
                }
                if (&v43[v38 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v43[v38 - 8])
                {
                  v47 = v10;
                  goto LABEL_42;
                }
                if (&v10[-(v46 & 0xFFFFFFFFFFFFFFF8) - 8] > v10 - 8)
                {
                  v47 = v10;
                  goto LABEL_42;
                }
                if ((unint64_t)(v10 - v43 - v38) < 0x20)
                {
                  v47 = v10;
                  goto LABEL_42;
                }
                v67 = (v46 >> 3) + 1;
                v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
                v47 = &v10[-v68];
                v44 = (_QWORD *)((char *)v44 - v68);
                v69 = &v43[8 * v39 - 16];
                v70 = v10 - 16;
                v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v72 = *(_OWORD *)v70;
                  *(v69 - 1) = *((_OWORD *)v70 - 1);
                  *v69 = v72;
                  v69 -= 2;
                  v70 -= 32;
                  v71 -= 4;
                }
                while (v71);
                if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_42:
                    v48 = *((_QWORD *)v47 - 1);
                    v47 -= 8;
                    *--v44 = v48;
                  }
                  while (v47 != v37);
                }
                v230 = v44;
                v231 = (char *)v45;
                v232 = &v43[8 * v42];
                if (v37)
LABEL_44:
                  operator delete(v37);
LABEL_45:
                v10 = (char *)v45;
                v4 = a1;
                v13 = v224;
                goto LABEL_46;
              }
            }
            else
            {
              v43 = 0;
              v44 = (_QWORD *)(8 * v39);
              *(_QWORD *)(8 * v39) = v17;
              v45 = 8 * v39 + 8;
              if (v10 != v37)
                goto LABEL_40;
            }
            v2 = v221;
            v230 = v44;
            v231 = (char *)v45;
            v232 = &v43[8 * v42];
            if (v37)
              goto LABEL_44;
            goto LABEL_45;
          }
LABEL_10:
          *(_QWORD *)v10 = v17;
          v10 += 8;
          v2 = v221;
LABEL_46:
          v231 = v10;
          v15 = *v4;
          v49 = *(_DWORD *)(*v4 + 4 * v14);
          v248 = &off_24F982FF8;
          v249 = v49;
          v250 = &v248;
          v50 = v225;
          v51 = (_QWORD *)*v225;
          v52 = (_QWORD *)*v225;
          do
          {
            v53 = v52[4];
            v54 = v53 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
            if (v53 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
              v55 = v52;
            else
              v55 = v52 + 1;
            if (v54)
              v50 = v52;
            v52 = (_QWORD *)*v55;
          }
          while (*v55);
          v56 = *(_QWORD *)(*(_QWORD *)(v50[5] + 40) + 12 * v49);
          v57 = *(_QWORD *)(v4[3] + 8 * v14);
          v58 = *(_DWORD *)(v15 + 4 * v14);
          v245 = &off_24F9830C0;
          v246 = v58;
          v247 = &v245;
          v59 = v225;
          do
          {
            v60 = v51[4];
            v61 = v60 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
            if (v60 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
              v62 = v51;
            else
              v62 = v51 + 1;
            if (v61)
              v59 = v51;
            v51 = (_QWORD *)*v62;
          }
          while (*v62);
          v63 = v57 * v56;
          v64 = v57 * *(_QWORD *)(*(_QWORD *)(v59[5] + 40) + 12 * (v58 ^ 1));
          if (-v64 < v63)
            v65 = -v64;
          else
            v65 = v63;
          v12 += v65;
          if (v63 <= -v64)
            v66 = -v64;
          else
            v66 = v63;
          v13 += v66;
          ++v14;
        }
        while (v14 * v2 < v222);
        v8 = v14;
        v3 = a2;
        v6 = v219;
LABEL_84:
        v241 = &off_24F984000;
        v242 = (uint64_t)v12;
        v243 = v13;
        v244 = &v241;
        v227 = v12;
        v239 = v13;
        if ((uint64_t)v12 > v13)
        {
          v240 = (uint64_t *)google::MakeCheckOpString<long long,long long>((int)&v227, (int)&v239, "lb <= ub");
          if (v240)
          {
            google::LogMessageFatal::LogMessageFatal((unint64_t *)&v227, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1338, &v240);
            google::LogMessage::stream((google::LogMessage *)&v227);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v227);
          }
        }
        v73 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v3);
        v74 = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v73, v242, v243);
        v75 = v244;
        if (v244 == &v241)
        {
          v75 = &v241;
          v76 = 4;
LABEL_89:
          (*v75)[v76]();
        }
        else if (v244)
        {
          v76 = 5;
          goto LABEL_89;
        }
        if (v6 >= v218)
        {
          v82 = v6;
          v83 = v3;
          v84 = v8;
          v85 = v82;
          v86 = v82 - __p;
          v87 = (v82 - __p) >> 2;
          v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62)
LABEL_256:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if ((v218 - __p) >> 1 > v88)
            v88 = (v218 - __p) >> 1;
          if ((unint64_t)(v218 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
            v89 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v89 = v88;
          if (v89)
          {
            if (v89 >> 62)
              goto LABEL_255;
            v90 = v89;
            v91 = (char *)operator new(4 * v89);
            v2 = v221;
            v89 = v90;
            v92 = &v91[4 * v87];
            *(_DWORD *)v92 = v74;
            v93 = (uint64_t)(v92 + 4);
            v94 = __p;
            if (v85 != __p)
            {
LABEL_103:
              v95 = v85 - 4 - v94;
              if (v95 < 0xBC)
              {
                v96 = v85;
                goto LABEL_111;
              }
              if (&v91[v86 - 4 - (v95 & 0xFFFFFFFFFFFFFFFCLL)] <= &v91[v86 - 4]
                && &v85[-(v95 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v85 - 4
                && (unint64_t)(v85 - &v91[v86]) >= 0x20)
              {
                v141 = (v95 >> 2) + 1;
                v142 = 4 * (v141 & 0x7FFFFFFFFFFFFFF8);
                v96 = &v85[-v142];
                v92 -= v142;
                v143 = &v91[4 * v87 - 16];
                v144 = v85 - 16;
                v145 = v141 & 0x7FFFFFFFFFFFFFF8;
                v8 = v84;
                do
                {
                  v146 = *(_OWORD *)v144;
                  *((_OWORD *)v143 - 1) = *((_OWORD *)v144 - 1);
                  *(_OWORD *)v143 = v146;
                  v143 -= 32;
                  v144 -= 32;
                  v145 -= 8;
                }
                while (v145);
                v94 = __p;
                v3 = v83;
                if (v141 != (v141 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_112;
              }
              else
              {
                v96 = v85;
LABEL_111:
                v94 = __p;
                v8 = v84;
                v3 = v83;
                do
                {
LABEL_112:
                  v97 = *((_DWORD *)v96 - 1);
                  v96 -= 4;
                  *((_DWORD *)v92 - 1) = v97;
                  v92 -= 4;
                }
                while (v96 != v94);
              }
LABEL_113:
              v236 = v92;
              v237 = v93;
              v218 = &v91[4 * v89];
              v238 = v218;
              if (v94)
                operator delete(v94);
              __p = v92;
              v6 = (char *)v93;
              v237 = v93;
              v78 = v234;
              v77 = v235;
              v220 = v6;
              if (v234 >= v235)
                goto LABEL_116;
LABEL_92:
              *(_DWORD *)v78 = v74;
              v234 = v78 + 4;
              v80 = v231;
              v79 = v232;
              if (v231 >= v232)
                goto LABEL_136;
LABEL_93:
              *(_QWORD *)v80 = -1;
              v81 = (uint64_t)(v80 + 8);
              v4 = a1;
              goto LABEL_156;
            }
          }
          else
          {
            v91 = 0;
            v92 = (char *)(4 * v87);
            *(_DWORD *)(4 * v87) = v74;
            v93 = 4 * v87 + 4;
            v94 = __p;
            if (v85 != __p)
              goto LABEL_103;
          }
          v8 = v84;
          v3 = v83;
          goto LABEL_113;
        }
        *(_DWORD *)v6 = v74;
        v6 += 4;
        v237 = (uint64_t)v6;
        v78 = v234;
        v77 = v235;
        v220 = v6;
        if (v234 < v235)
          goto LABEL_92;
LABEL_116:
        v98 = v3;
        v99 = v8;
        v100 = (char *)v233;
        v101 = v78 - (_BYTE *)v233;
        v102 = (v78 - (_BYTE *)v233) >> 2;
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 62)
          goto LABEL_256;
        v104 = v77 - (_BYTE *)v233;
        if (v104 >> 1 > v103)
          v103 = v104 >> 1;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
          v105 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        if (v105)
        {
          if (!(v105 >> 62))
          {
            v106 = operator new(4 * v105);
            v107 = &v106[4 * v102];
            *v107 = v74;
            v108 = (uint64_t)(v107 + 1);
            if (v78 == v100)
              goto LABEL_133;
            goto LABEL_127;
          }
LABEL_255:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v106 = 0;
        v107 = (_DWORD *)(4 * v102);
        *(_DWORD *)(4 * v102) = v74;
        v108 = 4 * v102 + 4;
        if (v78 == v100)
          goto LABEL_133;
LABEL_127:
        v109 = v78 - 4 - v100;
        if (v109 < 0x2C)
          goto LABEL_267;
        if ((unint64_t)(v78 - &v106[v101]) < 0x20)
          goto LABEL_267;
        v110 = (v109 >> 2) + 1;
        v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
        v112 = &v78[-v111];
        v107 = (_DWORD *)((char *)v107 - v111);
        v113 = &v106[4 * v102 - 16];
        v114 = v78 - 16;
        v115 = v110 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v116 = *(_OWORD *)v114;
          *(v113 - 1) = *((_OWORD *)v114 - 1);
          *v113 = v116;
          v113 -= 2;
          v114 -= 32;
          v115 -= 8;
        }
        while (v115);
        v78 = v112;
        if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_267:
          do
          {
            v117 = *((_DWORD *)v78 - 1);
            v78 -= 4;
            *--v107 = v117;
          }
          while (v78 != v100);
        }
LABEL_133:
        v233 = v107;
        v234 = (char *)v108;
        v235 = &v106[4 * v105];
        if (v100)
          operator delete(v100);
        v8 = v99;
        v3 = v98;
        v6 = v220;
        v2 = v221;
        v234 = (char *)v108;
        v80 = v231;
        v79 = v232;
        if (v231 < v232)
          goto LABEL_93;
LABEL_136:
        v118 = v3;
        v119 = v8;
        v120 = (char *)v230;
        v121 = v80 - (_BYTE *)v230;
        v122 = (v80 - (_BYTE *)v230) >> 3;
        v123 = v122 + 1;
        if ((unint64_t)(v122 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v124 = v79 - (_BYTE *)v230;
        if (v124 >> 2 > v123)
          v123 = v124 >> 2;
        if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
          v125 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v125 = v123;
        if (!v125)
        {
          v126 = 0;
          v127 = (_QWORD *)(8 * v122);
          *(_QWORD *)(8 * v122) = -1;
          v81 = 8 * v122 + 8;
          if (v80 == v120)
            goto LABEL_153;
LABEL_147:
          v128 = v80 - 8 - v120;
          if (v128 < 0x58)
            goto LABEL_268;
          if ((unint64_t)(v80 - &v126[v121]) < 0x20)
            goto LABEL_268;
          v129 = (v128 >> 3) + 1;
          v130 = 8 * (v129 & 0x3FFFFFFFFFFFFFFCLL);
          v131 = &v80[-v130];
          v127 = (_QWORD *)((char *)v127 - v130);
          v132 = &v126[8 * v122 - 16];
          v133 = v80 - 16;
          v134 = v129 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v135 = *(_OWORD *)v133;
            *(v132 - 1) = *((_OWORD *)v133 - 1);
            *v132 = v135;
            v132 -= 2;
            v133 -= 32;
            v134 -= 4;
          }
          while (v134);
          v80 = v131;
          if (v129 != (v129 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_268:
            do
            {
              v136 = *((_QWORD *)v80 - 1);
              v80 -= 8;
              *--v127 = v136;
            }
            while (v80 != v120);
          }
          goto LABEL_153;
        }
        if (v125 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v126 = operator new(8 * v125);
        v127 = &v126[8 * v122];
        *v127 = -1;
        v81 = (uint64_t)(v127 + 1);
        if (v80 != v120)
          goto LABEL_147;
LABEL_153:
        v230 = v127;
        v231 = (char *)v81;
        v232 = &v126[8 * v125];
        if (v120)
          operator delete(v120);
        v4 = a1;
        v8 = v119;
        v3 = v118;
        v6 = v220;
LABEL_156:
        v231 = (char *)v81;
        v7 = v217;
        v137 = (operations_research::sat::IntegerSumLE *)operator new();
        v227 = 0;
        v228 = 0;
        v229 = 0;
        operations_research::sat::IntegerSumLE::IntegerSumLE(v137, &v227, &v233, &v230, 0, v3);
        if (v227)
        {
          v228 = v227;
          operator delete(v227);
        }
        v138 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v3);
        operations_research::sat::IntegerSumLE::RegisterWith(v137, v138);
        v139 = (_QWORD *)operator new();
        *v139 = &off_24F984090;
        v139[1] = v137;
        v227 = v139;
        v140 = *(_QWORD **)(v3 + 56);
        if ((unint64_t)v140 < *(_QWORD *)(v3 + 64))
        {
          *v140 = v139;
          v9 = (char *)(v140 + 1);
        }
        else
        {
          v9 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>(v213, &v227);
        }
        *(_QWORD *)(v3 + 56) = v9;
        if (v217 == v2)
        {
          v167 = (char *)v230;
          v234 = (char *)v233;
          v231 = (char *)v230;
          if (v236 == v6)
            goto LABEL_239;
          v226 = (char *)v236;
          v168 = (int *)v236;
          while (1)
          {
            v170 = v6;
            v171 = *v168;
            v172 = v234;
            if (v234 < v235)
            {
              *(_DWORD *)v234 = v171;
              v173 = (uint64_t)(v172 + 4);
              goto LABEL_208;
            }
            v174 = (char *)v233;
            v175 = v234 - (_BYTE *)v233;
            v176 = (v234 - (_BYTE *)v233) >> 2;
            v177 = v176 + 1;
            if ((unint64_t)(v176 + 1) >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v178 = v235 - (_BYTE *)v233;
            if ((v235 - (_BYTE *)v233) >> 1 > v177)
              v177 = v178 >> 1;
            v179 = (unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v177;
            if (v179)
              break;
            v180 = 0;
            v181 = (char *)(4 * v176);
            *(_DWORD *)(4 * v176) = v171;
            v173 = 4 * v176 + 4;
            if (v172 != v174)
              goto LABEL_197;
LABEL_206:
            v233 = v181;
            v234 = (char *)v173;
            v235 = &v180[4 * v179];
            if (v174)
            {
              operator delete(v174);
              v167 = v231;
            }
LABEL_208:
            v234 = (char *)v173;
            if (v167 >= v232)
            {
              v191 = (char *)v230;
              v192 = v167 - (_BYTE *)v230;
              v193 = (v167 - (_BYTE *)v230) >> 3;
              v194 = v193 + 1;
              if ((unint64_t)(v193 + 1) >> 61)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v195 = v232 - (_BYTE *)v230;
              if ((v232 - (_BYTE *)v230) >> 2 > v194)
                v194 = v195 >> 2;
              if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8)
                v196 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v196 = v194;
              if (v196)
              {
                if (v196 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v197 = operator new(8 * v196);
                v198 = &v197[8 * v193];
                *v198 = 1;
                v169 = (uint64_t)(v198 + 1);
                if (v167 == v191)
                  goto LABEL_223;
LABEL_220:
                v199 = v167 - 8 - v191;
                if (v199 < 0x168)
                {
                  v200 = v167;
                  goto LABEL_222;
                }
                if (&v197[v192 - 8 - (v199 & 0xFFFFFFFFFFFFFFF8)] > &v197[v192 - 8])
                {
                  v200 = v167;
                  goto LABEL_222;
                }
                if (&v167[-(v199 & 0xFFFFFFFFFFFFFFF8) - 8] > v167 - 8)
                {
                  v200 = v167;
                  goto LABEL_222;
                }
                if ((unint64_t)(v167 - v197 - v192) < 0x20)
                {
                  v200 = v167;
                  goto LABEL_222;
                }
                v202 = (v199 >> 3) + 1;
                v203 = 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
                v200 = &v167[-v203];
                v198 = (_QWORD *)((char *)v198 - v203);
                v204 = &v197[8 * v193 - 16];
                v205 = v167 - 16;
                v206 = v202 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v207 = *(_OWORD *)v205;
                  *(v204 - 1) = *((_OWORD *)v205 - 1);
                  *v204 = v207;
                  v204 -= 2;
                  v205 -= 32;
                  v206 -= 4;
                }
                while (v206);
                if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_222:
                    v201 = *((_QWORD *)v200 - 1);
                    v200 -= 8;
                    *--v198 = v201;
                  }
                  while (v200 != v191);
                }
              }
              else
              {
                v197 = 0;
                v198 = (_QWORD *)(8 * v193);
                *(_QWORD *)(8 * v193) = 1;
                v169 = 8 * v193 + 8;
                if (v167 != v191)
                  goto LABEL_220;
              }
LABEL_223:
              v230 = v198;
              v231 = (char *)v169;
              v232 = &v197[8 * v196];
              if (v191)
                operator delete(v191);
              goto LABEL_185;
            }
            *(_QWORD *)v167 = 1;
            v169 = (uint64_t)(v167 + 8);
LABEL_185:
            v231 = (char *)v169;
            ++v168;
            v167 = (char *)v169;
            v6 = v170;
            if (v168 == (int *)v170)
            {
              v6 = v226;
              v3 = a2;
              v4 = a1;
              goto LABEL_239;
            }
          }
          if (v179 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v180 = (char *)operator new(4 * v179);
          v181 = &v180[4 * v176];
          *(_DWORD *)v181 = v171;
          v173 = (uint64_t)(v181 + 4);
          if (v172 == v174)
            goto LABEL_206;
LABEL_197:
          v182 = v172 - 4 - v174;
          if (v182 < 0x2C)
            goto LABEL_269;
          if ((unint64_t)(v172 - &v180[v175]) < 0x20)
            goto LABEL_269;
          v183 = (v182 >> 2) + 1;
          v184 = 4 * (v183 & 0x7FFFFFFFFFFFFFF8);
          v185 = &v172[-v184];
          v181 -= v184;
          v186 = &v180[4 * v176 - 16];
          v187 = v172 - 16;
          v188 = v183 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v189 = *(_OWORD *)v187;
            *((_OWORD *)v186 - 1) = *((_OWORD *)v187 - 1);
            *(_OWORD *)v186 = v189;
            v186 -= 32;
            v187 -= 32;
            v188 -= 8;
          }
          while (v188);
          v172 = v185;
          if (v183 != (v183 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_269:
            do
            {
              v190 = *((_DWORD *)v172 - 1);
              v172 -= 4;
              *((_DWORD *)v181 - 1) = v190;
              v181 -= 4;
            }
            while (v172 != v174);
          }
          goto LABEL_206;
        }
      }
    }
    v6 = 0;
    v234 = 0;
LABEL_239:
    v208 = (operations_research::sat::IntegerSumLE *)operator new();
    v227 = 0;
    v228 = 0;
    v229 = 0;
    operations_research::sat::IntegerSumLE::IntegerSumLE(v208, &v227, &v233, &v230, v4[6], v3);
    if (v227)
    {
      v228 = v227;
      operator delete(v227);
    }
    v209 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(v3);
    operations_research::sat::IntegerSumLE::RegisterWith(v208, v209);
    v210 = (_QWORD *)operator new();
    *v210 = &off_24F984090;
    v210[1] = v208;
    v227 = v210;
    v211 = *(_QWORD **)(v3 + 56);
    if ((unint64_t)v211 >= *(_QWORD *)(v3 + 64))
    {
      v212 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v3 + 48), &v227);
    }
    else
    {
      *v211 = v210;
      v212 = (char *)(v211 + 1);
    }
    *(_QWORD *)(v3 + 56) = v212;
    if (v230)
    {
      v231 = (char *)v230;
      operator delete(v230);
    }
    if (v233)
    {
      v234 = (char *)v233;
      operator delete(v233);
    }
    if (v6)
    {
      v237 = (uint64_t)v6;
      operator delete(v6);
    }
  }
}

void sub_22DABB3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DABB404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;

  v33 = *(_QWORD **)(v31 - 168);
  if (v33 == (_QWORD *)(v31 - 192))
  {
    v34 = 4;
    v33 = (_QWORD *)(v31 - 192);
  }
  else
  {
    if (!v33)
    {
      v35 = __p;
      if (__p)
        goto LABEL_10;
      goto LABEL_5;
    }
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
  v35 = __p;
  if (__p)
  {
LABEL_10:
    operator delete(v35);
    v36 = a27;
    if (a27)
    {
LABEL_11:
      operator delete(v36);
      v37 = a30;
      if (a30)
      {
LABEL_12:
        operator delete(v37);
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    v37 = a30;
    if (a30)
      goto LABEL_12;
    goto LABEL_7;
  }
LABEL_5:
  v36 = a27;
  if (a27)
    goto LABEL_11;
  goto LABEL_6;
}

void std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F984000;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F984000;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke[abi:ne180100]<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1} &,operations_research::sat::Model *>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat18NewIntegerVariableExxEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat18NewIntegerVariableExxEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat18NewIntegerVariableExxEUlPNS0_5ModelEE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat18NewIntegerVariableExxEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t std::__invoke[abi:ne180100]<operations_research::sat::NewIntegerVariable(long long,long long)::{lambda(operations_research::sat::Model *)#1} &,operations_research::sat::Model *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  operations_research::sat::IntegerTrail *v5;
  unint64_t v7[2];
  uint64_t v8;
  uint64_t *v9;

  v3 = *a2;
  v4 = a1[1];
  v7[0] = *a1;
  v8 = v4;
  if ((uint64_t)v7[0] > v4)
  {
    v9 = (uint64_t *)google::MakeCheckOpString<long long,long long>((int)v7, (int)&v8, "lb <= ub");
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal(v7, (google::glog_internal_namespace_ *)"./ortools/sat/integer.h", 1338, &v9);
      google::LogMessage::stream((google::LogMessage *)v7);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
    }
  }
  v5 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v3);
  return operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v5, *a1, a1[1]);
}

void sub_22DABB794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::IntegerSumLE>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F984090;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::IntegerSumLE>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F984090;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::ConditionalSum2LowerOrEqual(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  char *v11;
  int64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  *(_QWORD *)&v15 = __PAIR64__(a2, a1);
  *((_QWORD *)&v15 + 1) = a3;
  v7 = *(const void **)a4;
  v6 = *(_QWORD *)(a4 + 8);
  v8 = v6 - *(_QWORD *)a4;
  if (v6 == *(_QWORD *)a4)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - *(_QWORD *)a4);
    v10 = &v9[4 * (v8 >> 2)];
    memcpy(v9, v7, v8);
  }
  *(_QWORD *)(a5 + 24) = 0;
  v11 = (char *)operator new(0x30uLL);
  *(_QWORD *)v11 = &off_24F9840D8;
  *(_OWORD *)(v11 + 8) = v15;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  v12 = v10 - v9;
  if (v12)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v12);
    *((_QWORD *)v11 + 3) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *((_QWORD *)v11 + 5) = v14;
    memcpy(v13, v9, v12);
    *((_QWORD *)v11 + 4) = v14;
  }
  *(_QWORD *)(a5 + 24) = v11;
  if (v9)
    operator delete(v9);
}

void sub_22DABB94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConditionalSum3LowerOrEqual(unsigned int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  *(_QWORD *)&v16 = __PAIR64__(a3, a1);
  *((_QWORD *)&v16 + 1) = a4;
  v8 = *(const void **)a5;
  v7 = *(_QWORD *)(a5 + 8);
  v9 = v7 - *(_QWORD *)a5;
  if (v7 == *(_QWORD *)a5)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    if (v9 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - *(_QWORD *)a5);
    v11 = &v10[4 * (v9 >> 2)];
    memcpy(v10, v8, v9);
  }
  *(_QWORD *)(a6 + 24) = 0;
  v12 = (char *)operator new(0x38uLL);
  *(_QWORD *)v12 = &off_24F984158;
  *(_OWORD *)(v12 + 8) = v16;
  *((_DWORD *)v12 + 6) = a2;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  *((_QWORD *)v12 + 6) = 0;
  v13 = v11 - v10;
  if (v13)
  {
    if (v13 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v13);
    *((_QWORD *)v12 + 4) = v14;
    v15 = &v14[4 * (v13 >> 2)];
    *((_QWORD *)v12 + 6) = v15;
    memcpy(v14, v10, v13);
    *((_QWORD *)v12 + 5) = v15;
  }
  *(_QWORD *)(a6 + 24) = v12;
  if (v10)
    operator delete(v10);
}

void sub_22DABBAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::~function(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F9840D8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F9840D8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

char *std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  __int128 v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24F9840D8;
  v3 = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = 0;
  *(_OWORD *)(v2 + 8) = v3;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  v5 = *(_BYTE **)(a1 + 24);
  v4 = *(_BYTE **)(a1 + 32);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *((_QWORD *)v2 + 3) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *((_QWORD *)v2 + 5) = v8;
    memcpy(v7, v5, v6);
    *((_QWORD *)v2 + 4) = v8;
  }
  return v2;
}

void sub_22DABBC84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(char *result, uint64_t a2)
{
  __int128 v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v7;
  char *v8;

  *(_QWORD *)a2 = &off_24F9840D8;
  v2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v4 = (_BYTE *)*((_QWORD *)result + 3);
  v3 = (_BYTE *)*((_QWORD *)result + 4);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v3 - v4);
    *(_QWORD *)(a2 + 24) = v7;
    *(_QWORD *)(a2 + 32) = v7;
    v8 = &v7[4 * (v5 >> 2)];
    *(_QWORD *)(a2 + 40) = v8;
    result = (char *)memcpy(v7, v4, v5);
    *(_QWORD *)(a2 + 32) = v8;
  }
  return result;
}

void sub_22DABBD30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::PrecedencesPropagator *v3;

  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12) ^ 1, -*(_QWORD *)(a1 + 16), -1, *(int **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
}

uint64_t std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27ConditionalSum2LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_Ei"
                     "EES4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27ConditionalSum2LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVari"
                                "able_tag_EiEES4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27ConditionalSum2LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27ConditionalSum2LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum2LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F984158;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24F984158;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E31DF78);
}

char *std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  char *v2;
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24F984158;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 24);
  *((_QWORD *)v2 + 4) = 0;
  *((_DWORD *)v2 + 6) = v3;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  v5 = *(_BYTE **)(a1 + 32);
  v4 = *(_BYTE **)(a1 + 40);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *((_QWORD *)v2 + 4) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *((_QWORD *)v2 + 6) = v8;
    memcpy(v7, v5, v6);
    *((_QWORD *)v2 + 5) = v8;
  }
  return v2;
}

void sub_22DABBF78(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(char *result, uint64_t a2)
{
  __int128 v2;
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v8;
  char *v9;

  *(_QWORD *)a2 = &off_24F984158;
  v2 = *(_OWORD *)(result + 8);
  v3 = *((_DWORD *)result + 6);
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  v4 = (_BYTE *)*((_QWORD *)result + 5);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a2 + 32) = v8;
    *(_QWORD *)(a2 + 40) = v8;
    v9 = &v8[4 * (v6 >> 2)];
    *(_QWORD *)(a2 + 48) = v9;
    result = (char *)memcpy(v8, v5, v6);
    *(_QWORD *)(a2 + 40) = v9;
  }
  return result;
}

void sub_22DABC02C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::PrecedencesPropagator *v3;

  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PrecedencesPropagator>(*a2);
  operations_research::sat::PrecedencesPropagator::AddArc((uint64_t)v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12) ^ 1, -*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24), *(int **)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
}

uint64_t std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat27ConditionalSum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_Ei"
                     "EES4_S4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat27ConditionalSum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVari"
                                "able_tag_EiEES4_S4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat27ConditionalSum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat27ConditionalSum3LowerOrEqualEN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEES4_S4_xRKNSt3__16vectorINS0_7LiteralENS5_9allocatorIS7_EEEEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConditionalSum3LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long,std::vector<operations_research::sat::Literal> const&)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24F9841D8;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_24F9841D8;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x58uLL);
  *v2 = &off_24F9841D8;
  operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(v2 + 1, v1);
  return v2;
}

void sub_22DABC254(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F9841D8;
  return operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(a2 + 1, a1 + 8);
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[4];
  if (v3)
  {
    __p[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)__p[1];
  if (v4)
  {
    __p[2] = v4;
    operator delete(v4);
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((uint64_t *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat34ConditionalWeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEE"
                     "EEENS2_8functionIFvPNS0_5ModelEEEERKNS3_INS0_7LiteralENS4_ISC_EEEERKNS3_IN3gtl7IntTypeINS0_20Intege"
                     "rVariable_tag_EiEENS4_ISK_EEEERKT_xEUlS9_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat34ConditionalWeightedSumLowerOrEqualINSt3__16vectorIxNS2_9all"
                                "ocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_INS0_7LiteralENS4_ISC_EEEERKNS3_IN3gt"
                                "l7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISK_EEEERKT_xEUlS9_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat34ConditionalWeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_INS0_7LiteralENS4_ISC_EEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISK_EEEERKT_xEUlS9_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat34ConditionalWeightedSumLowerOrEqualINSt3__16vectorIxNS2_9allocatorIxEEEEEENS2_8functionIFvPNS0_5ModelEEEERKNS3_INS0_7LiteralENS4_ISC_EEEERKNS3_IN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_ISK_EEEERKT_xEUlS9_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<std::function<void ()(operations_research::sat::Model *)> operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::function(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  v14 = *(_QWORD *)(a2 + 48);
  a1[7] = 0;
  a1[6] = v14;
  a1[8] = 0;
  a1[9] = 0;
  v16 = *(_BYTE **)(a2 + 56);
  v15 = *(_BYTE **)(a2 + 64);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v15 - v16);
    a1[7] = v18;
    a1[8] = v18;
    v19 = &v18[4 * (v17 >> 2)];
    a1[9] = v19;
    memcpy(v18, v16, v17);
    a1[8] = v19;
  }
  return a1;
}

{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  v14 = *(_QWORD *)(a2 + 48);
  a1[7] = 0;
  a1[6] = v14;
  a1[8] = 0;
  a1[9] = 0;
  v16 = *(_BYTE **)(a2 + 56);
  v15 = *(_BYTE **)(a2 + 64);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = (char *)operator new(v15 - v16);
    a1[7] = v18;
    a1[8] = v18;
    v19 = &v18[4 * (v17 >> 2)];
    a1[9] = v19;
    memcpy(v18, v16, v17);
    a1[8] = v19;
  }
  return a1;
}

void sub_22DABC4D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 32) = v6;
  operator delete(v6);
  v7 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  *(_QWORD *)(v1 + 8) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_22DABC534()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22DABC4F8);
  JUMPOUT(0x22DABC4F0);
}

void sub_22DABC66C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 32) = v6;
  operator delete(v6);
  v7 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  *(_QWORD *)(v1 + 8) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_22DABC6CC()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x22DABC690);
  JUMPOUT(0x22DABC688);
}

_QWORD *operations_research::sat::ConditionalWeightedSumLowerOrEqual<std::vector<long long>>(std::vector<operations_research::sat::Literal> const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<long long> const&,long long)::{lambda(operations_research::sat::Model *)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  operations_research::sat::IntegerSumLE *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  operations_research::sat::GenericLiteralWatcher *v39;
  _QWORD *v40;
  __int128 __p;
  char *v42;
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[24];
  _BYTE *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  result = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v7 = *a1;
  v8 = a1[1];
  v9 = v8 - *a1;
  if (v8 == *a1)
  {
    if (!a1[6])
      return result;
  }
  else
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = v9 >> 2;
    if ((unint64_t)(v9 >> 2) <= 1)
      v13 = 1;
    do
    {
      while (1)
      {
        v14 = *(_QWORD *)(a1[3] + 8 * v11);
        v15 = *(_DWORD *)(v7 + 4 * v11);
        if ((v14 & 0x8000000000000000) == 0)
          break;
        v12 += -*(_QWORD *)(result[5] + 12 * (v15 ^ 1)) * v14;
        if (v13 == ++v11)
          goto LABEL_8;
      }
      v12 += *(_QWORD *)(result[5] + 12 * v15) * v14;
      ++v11;
    }
    while (v13 != v11);
LABEL_8:
    if (v12 == a1[6])
    {
      v16 = 0;
      while (1)
      {
        v18 = *(_QWORD *)(a1[3] + 8 * v16);
        if (v18 < 1)
        {
          if ((v18 & 0x8000000000000000) == 0)
            goto LABEL_13;
          v23 = *(_DWORD *)(v7 + 4 * v16);
          v24 = -*(_QWORD *)(v10[5] + 12 * (v23 ^ 1));
          LODWORD(__p) = v23;
          *(_QWORD *)((char *)&__p + 4) = v24;
          v2 = v2 & 0xFFFFFFFF00000000 | HIDWORD(v24);
          operations_research::sat::Implication((uint64_t)(a1 + 7), __p, v2, (uint64_t)v43);
          *(_QWORD *)&__p = a2;
          if (!v44)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v44 + 48))(v44, &__p);
          result = v44;
          if (v44 == v43)
          {
            result = v43;
            goto LABEL_11;
          }
        }
        else
        {
          v19 = *(_DWORD *)(v7 + 4 * v16);
          v20 = *(_QWORD *)(v10[5] + 12 * v19);
          v21 = v19 ^ 1;
          if (v20 >= (uint64_t)0x8000000000000002)
            v22 = -v20;
          else
            v22 = 0x7FFFFFFFFFFFFFFFLL;
          LODWORD(__p) = v21;
          *(_QWORD *)((char *)&__p + 4) = v22;
          v3 = v3 & 0xFFFFFFFF00000000 | HIDWORD(v22);
          operations_research::sat::Implication((uint64_t)(a1 + 7), __p, v3, (uint64_t)v45);
          *(_QWORD *)&__p = a2;
          if (!v46)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v46 + 48))(v46, &__p);
          result = v46;
          if (v46 == v45)
          {
            result = v45;
LABEL_11:
            v17 = 4;
            goto LABEL_12;
          }
        }
        if (!result)
          goto LABEL_13;
        v17 = 5;
LABEL_12:
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v17))(result);
LABEL_13:
        ++v16;
        v7 = *a1;
        if (v16 >= (a1[1] - *a1) >> 2)
          return result;
      }
    }
  }
  v25 = (operations_research::sat::IntegerSumLE *)operator new();
  v27 = (char *)a1[3];
  v26 = (char *)a1[4];
  v42 = 0;
  __p = 0uLL;
  v28 = v26 - v27;
  if (v26 != v27)
  {
    if (v28 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v29 = (char *)operator new(v26 - v27);
    *(_QWORD *)&__p = v29;
    v42 = &v29[8 * (v28 >> 3)];
    if ((unint64_t)(v28 - 8) < 0x18)
      goto LABEL_34;
    if ((unint64_t)(v29 - v27) < 0x20)
      goto LABEL_34;
    v30 = ((unint64_t)(v28 - 8) >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v27[v31];
    v33 = &v29[v31];
    v34 = v29 + 16;
    v35 = (__int128 *)(v27 + 16);
    v36 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *(v34 - 1) = *(v35 - 1);
      *v34 = v37;
      v34 += 2;
      v35 += 2;
      v36 -= 4;
    }
    while (v36);
    v27 = v32;
    v29 = v33;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      v33 = v29;
      do
      {
        v38 = *(_QWORD *)v27;
        v27 += 8;
        *(_QWORD *)v33 = v38;
        v33 += 8;
      }
      while (v27 != v26);
    }
    *((_QWORD *)&__p + 1) = v33;
  }
  operations_research::sat::IntegerSumLE::IntegerSumLE(v25, a1 + 7, a1, &__p, a1[6], a2);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v39 = operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>(a2);
  operations_research::sat::IntegerSumLE::RegisterWith(v25, v39);
  result = (_QWORD *)operator new();
  *result = &off_24F984090;
  result[1] = v25;
  *(_QWORD *)&__p = result;
  v40 = *(_QWORD **)(a2 + 56);
  if ((unint64_t)v40 >= *(_QWORD *)(a2 + 64))
  {
    result = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a2 + 48), &__p);
    *(_QWORD *)(a2 + 56) = result;
  }
  else
  {
    *v40 = result;
    *(_QWORD *)(a2 + 56) = v40 + 1;
  }
  return result;
}

void sub_22DABCA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  MEMORY[0x22E31DF78](v10, 0x10A1C40F49E05ADLL);
  _Unwind_Resume(a1);
}

void sub_22DABCACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15 == &a12)
  {
    (*(void (**)(void))(a12 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a15)
  {
    (*(void (**)(void))(*a15 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::iterator>(uint64_t a1, _QWORD *a2, int *a3, _QWORD *a4, int a5, size_t __sz)
{
  int *v8;
  _QWORD *v9;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *result;
  char *v16;
  int v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  int v25;
  unint64_t v26;
  int64_t v27;
  char *v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  char *v35;
  int v36;
  int v37;
  unint64_t v38;

  v8 = a3;
  v9 = a2;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(char **)a1;
  if (__sz <= (v11 - *(_QWORD *)a1) >> 2)
  {
    v20 = (_QWORD *)(a1 + 8);
    result = *(char **)(a1 + 8);
    v21 = (result - v12) >> 2;
    if (v21 >= __sz)
    {
      if (a2 == a4)
      {
        v28 = v12;
      }
      else
      {
        v28 = v12;
        do
        {
          v29 = *v8++;
          *(_DWORD *)v28 = v29;
          v30 = *((char *)v9 + 1);
          v9 = (_QWORD *)((char *)v9 + 1);
          if (v30 <= -2)
          {
            do
            {
              v31 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v9 = (_QWORD *)((char *)v9 + v31);
              v8 += v31;
            }
            while (*(char *)v9 < -1);
          }
          v28 += 4;
        }
        while (v9 != a4);
      }
      v27 = v28 - v12;
      result = v12;
    }
    else
    {
      if (result - v12 < 1)
      {
        v23 = a2;
        v22 = a3;
      }
      else
      {
        v22 = a3;
        v23 = a2;
        do
        {
          v25 = *((char *)v23 + 1);
          v23 = (_QWORD *)((char *)v23 + 1);
          ++v22;
          if (v25 <= -2)
          {
            do
            {
              v26 = (__clz(__rbit64(((*v23 >> 7) & ~*v23 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v23 = (_QWORD *)((char *)v23 + v26);
              v22 += v26;
            }
            while (*(char *)v23 < -1);
          }
        }
        while (v21-- > 1);
        if (v23 == a2)
        {
          v23 = a2;
        }
        else
        {
          do
          {
            v32 = *v8++;
            *(_DWORD *)v12 = v32;
            v33 = *((char *)v9 + 1);
            v9 = (_QWORD *)((char *)v9 + 1);
            if (v33 <= -2)
            {
              do
              {
                v34 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v9 = (_QWORD *)((char *)v9 + v34);
                v8 += v34;
              }
              while (*(char *)v9 < -1);
            }
            v12 += 4;
          }
          while (v9 != v23);
        }
      }
      v35 = result;
      while (v23 != a4)
      {
        v36 = *v22++;
        *(_DWORD *)v35 = v36;
        v37 = *((char *)v23 + 1);
        v23 = (_QWORD *)((char *)v23 + 1);
        if (v37 <= -2)
        {
          do
          {
            v38 = (__clz(__rbit64(((*v23 >> 7) & ~*v23 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v23 = (_QWORD *)((char *)v23 + v38);
            v22 += v38;
          }
          while (*(char *)v23 < -1);
        }
        v35 += 4;
      }
      v27 = v35 - result;
    }
  }
  else
  {
    if (v12)
    {
      *(_QWORD *)(a1 + 8) = v12;
      operator delete(v12);
      v11 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 62)
      goto LABEL_47;
    v13 = v11 >> 1;
    if (v11 >> 1 <= __sz)
      v13 = __sz;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (v13 >> 62)
LABEL_47:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = 4 * v13;
    result = (char *)operator new(4 * v13);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v14];
    v16 = result;
    if (v9 != a4)
    {
      v16 = result;
      do
      {
        v17 = *v8++;
        *(_DWORD *)v16 = v17;
        v18 = *((char *)v9 + 1);
        v9 = (_QWORD *)((char *)v9 + 1);
        if (v18 <= -2)
        {
          do
          {
            v19 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v9 = (_QWORD *)((char *)v9 + v19);
            v8 += v19;
          }
          while (*(char *)v9 < -1);
        }
        v16 += 4;
      }
      while (v9 != a4);
    }
    v27 = v16 - result;
    v20 = (_QWORD *)(a1 + 8);
  }
  *v20 = &result[v27];
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::find_or_prepare_insert<operations_research::sat::ConstraintProto const*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = 0;
  v3 = *a2;
  v4 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + *a2)))
     + *a2;
  v5 = ((v4 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v4);
  v6 = (v5 >> 7) ^ ((unint64_t)*a1 >> 12);
  v7 = a1[3];
  while (1)
  {
    v8 = v6 & v7;
    v9 = *(_QWORD *)(*a1 + (v6 & v7));
    v10 = ((v9 ^ (0x101010101010101 * (v5 & 0x7F))) - 0x101010101010101) & ~(v9 ^ (0x101010101010101 * (v5 & 0x7F))) & 0x8080808080808080;
    if (v10)
      break;
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert(a1, v5);
    v2 += 8;
    v6 = v2 + v8;
  }
  while (1)
  {
    v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v7;
    if (*(_QWORD *)(a1[1] + 8 * v11) == v3)
      return v11;
    v10 &= v10 - 1;
    if (!v10)
      goto LABEL_5;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(_QWORD *)&v5[8 * (_QWORD)v13])
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(_QWORD *)&v5[8 * (_QWORD)v13])))
          + *(_QWORD *)&v5[8 * (_QWORD)v13];
      v19 = ((v18 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v18);
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_QWORD *)&a1[1][8 * v16] = *(_QWORD *)&v5[8 * (_QWORD)v13];
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<operations_research::sat::ConstraintProto const*>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::ConstraintProto const*,void>::Eq,std::allocator<operations_research::sat::ConstraintProto const*>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v31 = *(_QWORD *)(result + 32);
    if (!v31)
      return result;
LABEL_26:
    *(_QWORD *)(v31 + 32) = v15 >> 3;
    *(_QWORD *)(v31 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v14);
      v21 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v20)))
          + v20;
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v24 = *(uint64_t *)((_BYTE *)v19->i64 + v23) & (~*(uint64_t *)((char *)v19->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        v16 = 0;
        v17 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v24 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v18 = (v17 + (__clz(__rbit64(v24)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v23) ^ (v14 - v23)) & v13) > 7)
      {
        v25 = v19->u8[v18];
        v19->i8[v18] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v22 & 0x7F;
        v26 = *(_QWORD *)(result + 8);
        if (v25 == 128)
        {
          *(_QWORD *)(v26 + 8 * v18) = *(_QWORD *)(v26 + 8 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v27 = *(_QWORD *)(v26 + 8 * v14);
          *(_QWORD *)(v26 + 8 * v14) = *(_QWORD *)(v26 + 8 * v18);
          *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v18) = v27;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v22 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v28 = v14 - (v14 >> 3);
  v29 = v14 == 7;
  v30 = 6;
  if (!v29)
    v30 = v28;
  *(_QWORD *)(result + 40) = v30 - *(_QWORD *)(result + 16);
  v31 = *(_QWORD *)(result + 32);
  if (v31)
    goto LABEL_26;
  return result;
}

uint64_t operations_research::sat::Model::MyNew<operations_research::sat::ImpliedBounds>(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a1);
  *(_QWORD *)(v2 + 8) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a1);
  *(_QWORD *)(v2 + 16) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a1);
  *(_QWORD *)(v2 + 24) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a1);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_DWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = v2 + 176;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_DWORD *)(v2 + 216) = -1;
  *(_QWORD *)(v2 + 264) = 0;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  return v2;
}

void sub_22DABD668(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1070C406E7AE6DBLL);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::ImpliedBounds>::~Delete(_QWORD *a1)
{
  operations_research::sat::ImpliedBounds *v2;

  v2 = (operations_research::sat::ImpliedBounds *)a1[1];
  *a1 = &off_24F984258;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::ImpliedBounds::~ImpliedBounds(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::ImpliedBounds>::~Delete(_QWORD *a1)
{
  operations_research::sat::ImpliedBounds *v2;

  v2 = (operations_research::sat::ImpliedBounds *)a1[1];
  *a1 = &off_24F984258;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::ImpliedBounds::~ImpliedBounds(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::try_emplace_impl<int const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t v18;

  v6 = 0;
  v7 = *a2;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  v9 = *a1;
  v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  v11 = a1[3];
  while (1)
  {
    v12 = v10 & v11;
    v13 = *(_QWORD *)(v9 + (v10 & v11));
    v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14)
      break;
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::prepare_insert(a1, v8);
      v18 = a1[1] + 56 * result;
      *(_DWORD *)v18 = *a2;
      *(_QWORD *)(v18 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_QWORD *)(v18 + 48) = 0;
      v9 = *a1;
      v15 = a1[1];
      v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    v10 = v6 + v12;
  }
  v15 = a1[1];
  while (1)
  {
    result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 56 * result) == (_DWORD)v7)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_6;
  }
  v17 = 0;
LABEL_10:
  *(_QWORD *)a3 = v9 + result;
  *(_QWORD *)(a3 + 8) = v15 + 56 * result;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  v2 = (unint64_t)a2;
  v5 = *a1;
  v4 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v32 = v4;
  if (!v4)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 56 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v31 = a1[4];
    if (!v31)
      return;
LABEL_21:
    *((_QWORD *)v31 + 4) = v14 >> 3;
    *((_QWORD *)v31 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v5] & 0x80000000) == 0)
    {
      v16 = &v32[56 * (_QWORD)v13];
      v17 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v16)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v16));
      v18 = *a1;
      v19 = a1[3];
      v20 = ((v17 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v19;
      v21 = 0;
      for (i = *(_QWORD *)&(*a1)[v20] & (~*(_QWORD *)&(*a1)[v20] << 7) & 0x8080808080808080;
            !i;
            i = *(_QWORD *)&v18[v20] & (~*(_QWORD *)&v18[v20] << 7) & 0x8080808080808080)
      {
        v21 += 8;
        v20 = (v21 + v20) & (unint64_t)v19;
      }
      v23 = (v20 + (__clz(__rbit64(i)) >> 3)) & (unint64_t)v19;
      v24 = v17 & 0x7F;
      v18[v23] = v24;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v23 - 8) & (unint64_t)a1[3])] = v24;
      v25 = (uint64_t)&a1[1][56 * v23];
      *(_DWORD *)v25 = *(_DWORD *)v16;
      v26 = *((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v25 + 8) = v26;
      v27 = *((_QWORD *)v16 + 2);
      *((_QWORD *)v16 + 2) = 0;
      v28 = *((_QWORD *)v16 + 3);
      *((_QWORD *)v16 + 3) = 0;
      *(_QWORD *)(v25 + 16) = v27;
      *(_QWORD *)(v25 + 24) = v28;
      v29 = *((_QWORD *)v16 + 4);
      v30 = *((_QWORD *)v16 + 5);
      *((_QWORD *)v16 + 4) = 0;
      *(_QWORD *)(v25 + 32) = v29;
      *(_QWORD *)(v25 + 40) = v30;
      *((_QWORD *)v16 + 5) = 0;
      *(_QWORD *)(v25 + 48) = *((_QWORD *)v16 + 6);
      *((_QWORD *)v16 + 6) = 0;
      if (*((_QWORD *)v16 + 4))
      {
        operator delete(*((void **)v16 + 1));
        *((_QWORD *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *((_QWORD *)v16 + 6) = 0;
        *((_QWORD *)v16 + 3) = 0;
        *((_QWORD *)v16 + 4) = 0;
        *((_QWORD *)v16 + 2) = 0;
      }
      v14 += v21;
      v15 = (_QWORD *)*((_QWORD *)v16 + 5);
      if (v15)
        absl::lts_2020_02_25::container_internal::UnsampleSlow(v15);
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v5);
  v31 = a1[4];
  if (v31)
    goto LABEL_21;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::drop_deletes_without_resize(uint64_t a1)
{
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[8];

  v29[7] = *MEMORY[0x24BDAC8D0];
  v2 = *(int8x16_t **)a1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)a1 + v3;
  if (v4 + 1 != *(_QWORD *)a1)
  {
    v5 = v3 - 7;
    v6 = *(unint64_t **)a1;
    if (v5 < 0x18)
      goto LABEL_29;
    v7 = (v5 >> 3) + 1;
    v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v12 = vandq_s8(v8[-1], v9);
      v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(_QWORD *)(v4 + 1) = v2->i64[0];
  *(_BYTE *)v4 = -1;
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
  {
    v16 = 0;
    *(_QWORD *)(a1 + 40) = -*(_QWORD *)(a1 + 16);
    v28 = *(_QWORD *)(a1 + 32);
    if (!v28)
      return;
LABEL_26:
    *(_QWORD *)(v28 + 32) = v16 >> 3;
    *(_QWORD *)(v28 + 16) = 0;
    return;
  }
  v15 = 0;
  v16 = 0;
  do
  {
    v20 = *(int8x16_t **)a1;
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + v15) == 254)
    {
      v21 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(a1 + 8) + 56 * v15);
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      v24 = *(uint64_t *)((_BYTE *)v20->i64 + v23) & (~*(uint64_t *)((char *)v20->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        v17 = 0;
        v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      }
      else
      {
        v17 = 0;
        v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          v18 = (v17 + v18) & v14;
          v24 = *(uint64_t *)((_BYTE *)v20->i64 + v18) & (~*(uint64_t *)((char *)v20->i64 + v18) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v19 = (v18 + (__clz(__rbit64(v24)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v23) ^ (v15 - v23)) & v14) > 7)
      {
        v25 = v20->u8[v19];
        v20->i8[v19] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v19 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = v22 & 0x7F;
        v26 = *(_QWORD *)(a1 + 8);
        if (v25 == 128)
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>(a1 + 40, v26 + 56 * v19, v26 + 56 * v15);
          *(_BYTE *)(*(_QWORD *)a1 + v15) = 0x80;
          *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v15 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>(a1 + 40, (uint64_t)v29, v26 + 56 * v15);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>(a1 + 40, *(_QWORD *)(a1 + 8) + 56 * v15, *(_QWORD *)(a1 + 8) + 56 * v19);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>(a1 + 40, *(_QWORD *)(a1 + 8) + 56 * v19, (uint64_t)v29);
          --v15;
        }
      }
      else
      {
        v20->i8[v15] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v15 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = v22 & 0x7F;
      }
    }
    ++v15;
    v14 = *(_QWORD *)(a1 + 24);
  }
  while (v15 != v14);
  v27 = v15 - (v15 >> 3);
  if (v15 == 7)
    v27 = 6;
  *(_QWORD *)(a1 + 40) = v27 - *(_QWORD *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 32);
  if (v28)
    goto LABEL_26;
}

void absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)(a2 + 8) = v4;
  v6 = (_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  v7 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v7;
  v8 = *(_QWORD *)(a3 + 32);
  v9 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  if (*(_QWORD *)(a3 + 32))
  {
    operator delete(*(void **)(a3 + 8));
    *(_QWORD *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a3 + 48) = 0;
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
  }
  v10 = *(_QWORD **)(a3 + 40);
  if (v10)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v10);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  BOOL v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  BOOL v44;
  unint64_t v45;
  __int128 v46;
  int v47;
  int v48;
  BOOL v49;
  BOOL v50;
  int v51;
  int v52;
  _BOOL4 v53;
  _BOOL4 v54;
  __int128 v55;
  BOOL v56;
  unint64_t v57;
  int v58;
  _BOOL4 v59;
  _BOOL4 v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  int v70;
  _BOOL4 v71;
  _BOOL4 v72;
  int v73;
  int v74;
  BOOL v75;
  BOOL v76;
  __int128 v77;
  int v78;
  int v79;
  _BOOL4 v80;
  __int128 v81;
  __int128 *v82;
  __int128 *v83;
  int v84;
  int v85;
  _BOOL4 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _BOOL4 v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  _BOOL4 v95;
  _QWORD *v96;
  BOOL v97;
  char v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  int64_t v115;
  int64_t v116;
  int64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  int v121;
  _BOOL4 v122;
  unint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  BOOL v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  unint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  _BOOL4 v141;
  int64_t v142;
  uint64_t v144;
  unint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  _BOOL4 v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  int v160;
  _BOOL4 v161;
  _BOOL4 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  int v167;
  BOOL v168;
  _QWORD *v169;
  int v170;
  int v171;
  int v172;
  int v173;
  _BOOL4 v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  int v178;
  int v179;
  BOOL v180;
  BOOL v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  int v11;
  int v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((__int128 *)a1, (__int128 *)a2, (int *)a3);
  v11 = *(_DWORD *)(a3 + 8);
  v12 = *(int *)(a4 + 8) >> 1;
  v13 = v12 == v11 >> 1;
  v14 = v12 < v11 >> 1;
  if (v13)
    v14 = *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12);
  if (v14)
  {
    v15 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v16 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v16;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v15;
    v17 = *(_DWORD *)(a2 + 8);
    LODWORD(v15) = *(int *)(a3 + 8) >> 1;
    v13 = (_DWORD)v15 == v17 >> 1;
    v18 = (int)v15 < v17 >> 1;
    if (v13)
      v18 = *(_DWORD *)(a3 + 12) < *(_DWORD *)(a2 + 12);
    if (v18)
    {
      v19 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v20 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v20;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v19;
      v21 = *(_DWORD *)(a1 + 8);
      LODWORD(v19) = *(int *)(a2 + 8) >> 1;
      v13 = (_DWORD)v19 == v21 >> 1;
      v22 = (int)v19 < v21 >> 1;
      if (v13)
        v22 = *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12);
      if (v22)
      {
        v23 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v24 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v24;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v23;
      }
    }
  }
  v25 = *(_DWORD *)(a4 + 8);
  v26 = *(int *)(a5 + 8) >> 1;
  v13 = v26 == v25 >> 1;
  v27 = v26 < v25 >> 1;
  if (v13)
    v27 = *(_DWORD *)(a5 + 12) < *(_DWORD *)(a4 + 12);
  if (v27)
  {
    v28 = *(_QWORD *)(a4 + 16);
    result = *(__n128 *)a4;
    v29 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v29;
    *(__n128 *)a5 = result;
    *(_QWORD *)(a5 + 16) = v28;
    v30 = *(_DWORD *)(a3 + 8);
    LODWORD(v28) = *(int *)(a4 + 8) >> 1;
    v13 = (_DWORD)v28 == v30 >> 1;
    v31 = (int)v28 < v30 >> 1;
    if (v13)
      v31 = *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12);
    if (v31)
    {
      v32 = *(_QWORD *)(a3 + 16);
      result = *(__n128 *)a3;
      v33 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v33;
      *(__n128 *)a4 = result;
      *(_QWORD *)(a4 + 16) = v32;
      v34 = *(_DWORD *)(a2 + 8);
      LODWORD(v32) = *(int *)(a3 + 8) >> 1;
      v13 = (_DWORD)v32 == v34 >> 1;
      v35 = (int)v32 < v34 >> 1;
      if (v13)
        v35 = *(_DWORD *)(a3 + 12) < *(_DWORD *)(a2 + 12);
      if (v35)
      {
        v36 = *(_QWORD *)(a2 + 16);
        result = *(__n128 *)a2;
        v37 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v37;
        *(__n128 *)a3 = result;
        *(_QWORD *)(a3 + 16) = v36;
        v38 = *(_DWORD *)(a1 + 8);
        LODWORD(v36) = *(int *)(a2 + 8) >> 1;
        v13 = (_DWORD)v36 == v38 >> 1;
        v39 = (int)v36 < v38 >> 1;
        if (v13)
          v39 = *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12);
        if (v39)
        {
          v40 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v41 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v41;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v40;
        }
      }
    }
  }
  return result;
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>(__int128 *result, __int128 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  BOOL v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;

  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)result + 2);
  v5 = *((int *)a2 + 2) >> 1;
  v6 = v5 == v4 >> 1;
  v7 = v5 < v4 >> 1;
  if (v6)
    v7 = v3 < *((_DWORD *)result + 3);
  v8 = a3[2] >> 1;
  v9 = a3[3] < v3;
  v6 = v8 == v5;
  v10 = v8 < v5;
  if (v6)
    v10 = v9;
  if (v7)
  {
    if (v10)
    {
      v11 = *((_QWORD *)result + 2);
      v12 = *result;
      v13 = *((_QWORD *)a3 + 2);
      *result = *(_OWORD *)a3;
      *((_QWORD *)result + 2) = v13;
LABEL_17:
      *(_OWORD *)a3 = v12;
      *((_QWORD *)a3 + 2) = v11;
      return result;
    }
    v22 = *((_QWORD *)result + 2);
    v23 = *result;
    v24 = *((_QWORD *)a2 + 2);
    *result = *a2;
    *((_QWORD *)result + 2) = v24;
    *a2 = v23;
    *((_QWORD *)a2 + 2) = v22;
    v25 = *((_DWORD *)a2 + 2);
    LODWORD(v22) = a3[2] >> 1;
    v6 = (_DWORD)v22 == v25 >> 1;
    v26 = (int)v22 < v25 >> 1;
    if (v6)
      v26 = a3[3] < *((_DWORD *)a2 + 3);
    if (v26)
    {
      v11 = *((_QWORD *)a2 + 2);
      v12 = *a2;
      v27 = *((_QWORD *)a3 + 2);
      *a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v27;
      goto LABEL_17;
    }
  }
  else if (v10)
  {
    v14 = *((_QWORD *)a2 + 2);
    v15 = *a2;
    v16 = *((_QWORD *)a3 + 2);
    *a2 = *(_OWORD *)a3;
    *((_QWORD *)a2 + 2) = v16;
    *(_OWORD *)a3 = v15;
    *((_QWORD *)a3 + 2) = v14;
    v17 = *((_DWORD *)result + 2);
    LODWORD(v14) = *((int *)a2 + 2) >> 1;
    v6 = (_DWORD)v14 == v17 >> 1;
    v18 = (int)v14 < v17 >> 1;
    if (v6)
      v18 = *((_DWORD *)a2 + 3) < *((_DWORD *)result + 3);
    if (v18)
    {
      v19 = *((_QWORD *)result + 2);
      v20 = *result;
      v21 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v21;
      *a2 = v20;
      *((_QWORD *)a2 + 2) = v19;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  int v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  __int128 v45;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v24 = *(_DWORD *)(a1 + 8);
      v25 = *(int *)(a2 - 16) >> 1;
      v14 = v25 == v24 >> 1;
      v26 = v25 < v24 >> 1;
      if (v14)
        v26 = *(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 12);
      if (v26)
      {
        v27 = *(_QWORD *)(a1 + 16);
        v28 = *(_OWORD *)a1;
        v29 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v29;
        *(_OWORD *)(a2 - 24) = v28;
        *(_QWORD *)(a2 - 8) = v27;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((__int128 *)a1, (__int128 *)(a1 + 24), (int *)(a2 - 24));
      result = 1;
      break;
    case 4uLL:
      v30 = (__int128 *)(a1 + 24);
      v31 = (__int128 *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((__int128 *)a1, (__int128 *)(a1 + 24), (int *)(a1 + 48));
      v32 = *(_DWORD *)(a1 + 56);
      v33 = *(int *)(a2 - 16) >> 1;
      v14 = v33 == v32 >> 1;
      v34 = v33 < v32 >> 1;
      if (v14)
        v34 = *(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 60);
      if (!v34)
        goto LABEL_17;
      v35 = *(_QWORD *)(a1 + 64);
      v36 = *v31;
      v37 = *(_QWORD *)(a2 - 8);
      *v31 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(a1 + 64) = v37;
      *(_OWORD *)(a2 - 24) = v36;
      *(_QWORD *)(a2 - 8) = v35;
      v38 = *(_DWORD *)(a1 + 32);
      LODWORD(v35) = *(int *)(a1 + 56) >> 1;
      v14 = (_DWORD)v35 == v38 >> 1;
      v39 = (int)v35 < v38 >> 1;
      if (v14)
        v39 = *(_DWORD *)(a1 + 60) < *(_DWORD *)(a1 + 36);
      if (!v39)
        goto LABEL_17;
      v40 = *(_QWORD *)(a1 + 40);
      v41 = *v30;
      *v30 = *v31;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
      *v31 = v41;
      *(_QWORD *)(a1 + 64) = v40;
      v42 = *(_DWORD *)(a1 + 8);
      LODWORD(v40) = *(int *)(a1 + 32) >> 1;
      v14 = (_DWORD)v40 == v42 >> 1;
      v43 = (int)v40 < v42 >> 1;
      if (v14)
        v43 = *(_DWORD *)(a1 + 36) < *(_DWORD *)(a1 + 12);
      if (!v43)
        goto LABEL_17;
      v44 = *(_QWORD *)(a1 + 16);
      v45 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v30;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
      *v30 = v45;
      *(_QWORD *)(a1 + 40) = v44;
      result = 1;
      break;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      result = 1;
      break;
    default:
      v6 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::InequalityDetectionHelper *>((__int128 *)a1, (__int128 *)(a1 + 24), (int *)(a1 + 48));
      v7 = a1 + 72;
      if (a1 + 72 == a2)
      {
LABEL_17:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *(_DWORD *)(v7 + 8);
          v11 = *(_DWORD *)(v7 + 12);
          v12 = *(_DWORD *)(v6 + 8);
          v13 = v10 >> 1;
          v14 = v10 >> 1 == v12 >> 1;
          v15 = v10 >> 1 < v12 >> 1;
          if (v14)
            v15 = v11 < *(_DWORD *)(v6 + 12);
          if (v15)
            break;
LABEL_16:
          v6 = v7;
          v8 += 24;
          v7 += 24;
          if (v7 == a2)
            goto LABEL_17;
        }
        v16 = *(_QWORD *)v7;
        v17 = *(_QWORD *)(v7 + 16);
        v18 = v8;
        do
        {
          v19 = a1 + v18;
          *(_OWORD *)(v19 + 72) = *(_OWORD *)(a1 + v18 + 48);
          *(_QWORD *)(v19 + 88) = *(_QWORD *)(a1 + v18 + 64);
          if (v18 == -48)
          {
            *(_QWORD *)a1 = v16;
            *(_DWORD *)(a1 + 8) = v10;
            *(_DWORD *)(a1 + 12) = v11;
            *(_QWORD *)(a1 + 16) = v17;
            if (++v9 != 8)
              goto LABEL_16;
            goto LABEL_34;
          }
          v20 = *(_DWORD *)(v19 + 32);
          v21 = v11 < *(_DWORD *)(v19 + 36);
          v14 = v13 == v20 >> 1;
          v22 = v13 < v20 >> 1;
          if (!v14)
            v21 = v22;
          v18 -= 24;
        }
        while (v21);
        *(_QWORD *)(a1 + v18 + 72) = v16;
        v23 = a1 + v18 + 72;
        *(_DWORD *)(v23 + 8) = v10;
        *(_DWORD *)(v23 + 12) = v11;
        *(_QWORD *)(v23 + 16) = v17;
        if (++v9 != 8)
          goto LABEL_16;
LABEL_34:
        result = v7 + 24 == a2;
      }
      break;
  }
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,false>(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int *k;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  int v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v42;
  __int128 v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  __int128 v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  char v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  int v66;
  int v67;
  _OWORD *v68;
  _OWORD *j;
  int v70;
  BOOL v71;
  int v72;
  int v73;
  BOOL v74;
  uint64_t v75;
  int v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  BOOL v88;
  uint64_t v89;
  _OWORD *v90;
  unint64_t v91;
  _OWORD *v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  int v100;
  char v101;
  uint64_t v102;
  _OWORD *v103;
  int v104;
  uint64_t v105;
  _OWORD *v106;
  int v107;
  int64_t v108;
  int64_t v109;
  _OWORD *v110;
  int64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  BOOL v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  BOOL v126;
  uint64_t v127;
  int v128;
  int v129;
  __int128 v130;
  __int128 v131;
  _OWORD *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  BOOL v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  int v142;
  BOOL v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  __int128 v149;
  _OWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  BOOL v156;
  _OWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  BOOL v170;
  uint64_t v171;
  int v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  unint64_t v177;
  int v178;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  BOOL v187;
  uint64_t v188;
  int v189;
  char v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  uint64_t v194;
  int v195;
  _BYTE v197[32];
  _BYTE v198[32];
  _BYTE v199[32];
  _BYTE v200[32];
  _BYTE v201[32];

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[32];
  _BYTE v40[32];
  _BYTE v41[32];
  _BYTE v42[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(a1, a2, a3, a4).n128_u64[0];
  v11 = *(int *)(a5 + 8) >> 1;
  v12 = *(int *)(a4 + 8) >> 1;
  v13 = v11 < v12;
  if (v11 != v12 || (v14 = *(_QWORD *)(a5 + 16), v15 = *(_QWORD *)(a4 + 16), v13 = v14 < v15, v14 != v15))
  {
    if (!v13)
      return result;
LABEL_8:
    *(_OWORD *)v39 = *(_OWORD *)a4;
    v16 = *(_OWORD *)a4;
    *(_OWORD *)&v39[16] = *(_OWORD *)(a4 + 16);
    v17 = *(_OWORD *)(a5 + 9);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 9) = v17;
    *(_OWORD *)a5 = v16;
    result = *(__n128 *)&v39[9];
    *(_OWORD *)(a5 + 9) = *(_OWORD *)&v39[9];
    v18 = *(int *)(a4 + 8) >> 1;
    v19 = *(int *)(a3 + 8) >> 1;
    v20 = v18 < v19;
    if (v18 == v19 && (v21 = *(_QWORD *)(a4 + 16), v22 = *(_QWORD *)(a3 + 16), v20 = v21 < v22, v21 == v22))
    {
      if (!*(_BYTE *)(a4 + 24) || *(_BYTE *)(a3 + 24))
        return result;
    }
    else if (!v20)
    {
      return result;
    }
    *(_OWORD *)v40 = *(_OWORD *)a3;
    v23 = *(_OWORD *)a3;
    *(_OWORD *)&v40[16] = *(_OWORD *)(a3 + 16);
    v24 = *(_OWORD *)(a4 + 9);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 9) = v24;
    *(_OWORD *)a4 = v23;
    result = *(__n128 *)&v40[9];
    *(_OWORD *)(a4 + 9) = *(_OWORD *)&v40[9];
    v25 = *(int *)(a3 + 8) >> 1;
    v26 = *(int *)(a2 + 8) >> 1;
    v27 = v25 < v26;
    if (v25 == v26 && (v28 = *(_QWORD *)(a3 + 16), v29 = *(_QWORD *)(a2 + 16), v27 = v28 < v29, v28 == v29))
    {
      if (!*(_BYTE *)(a3 + 24) || *(_BYTE *)(a2 + 24))
        return result;
    }
    else if (!v27)
    {
      return result;
    }
    *(_OWORD *)v41 = *(_OWORD *)a2;
    v30 = *(_OWORD *)a2;
    *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 16);
    v31 = *(_OWORD *)(a3 + 9);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 9) = v31;
    *(_OWORD *)a3 = v30;
    result = *(__n128 *)&v41[9];
    *(_OWORD *)(a3 + 9) = *(_OWORD *)&v41[9];
    v32 = *(int *)(a2 + 8) >> 1;
    v33 = *(int *)(a1 + 8) >> 1;
    v34 = v32 < v33;
    if (v32 == v33 && (v35 = *(_QWORD *)(a2 + 16), v36 = *(_QWORD *)(a1 + 16), v34 = v35 < v36, v35 == v36))
    {
      if (!*(_BYTE *)(a2 + 24) || *(_BYTE *)(a1 + 24))
        return result;
    }
    else if (!v34)
    {
      return result;
    }
    *(_OWORD *)v42 = *(_OWORD *)a1;
    v37 = *(_OWORD *)a1;
    *(_OWORD *)&v42[16] = *(_OWORD *)(a1 + 16);
    v38 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = v38;
    *(_OWORD *)a2 = v37;
    result = *(__n128 *)&v42[9];
    *(_OWORD *)(a2 + 9) = *(_OWORD *)&v42[9];
    return result;
  }
  if (*(_BYTE *)(a5 + 24) && !*(_BYTE *)(a4 + 24))
    goto LABEL_8;
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[32];
  _BYTE v40[32];
  _BYTE v41[32];
  _BYTE v42[32];

  v3 = *((int *)a2 + 2) >> 1;
  v4 = *((int *)a1 + 2) >> 1;
  v5 = v3 < v4;
  if (v3 == v4 && (v6 = *((_QWORD *)a2 + 2), v7 = *((_QWORD *)a1 + 2), v5 = v6 < v7, v6 == v7))
  {
    if (*((_BYTE *)a2 + 24))
      v8 = *((_BYTE *)a1 + 24) == 0;
    else
      v8 = 0;
    if (!v8)
    {
LABEL_14:
      v16 = *((int *)a3 + 2) >> 1;
      v17 = v16 < v3;
      if (v16 == v3 && (v18 = *((_QWORD *)a3 + 2), v19 = *((_QWORD *)a2 + 2), v17 = v18 < v19, v18 == v19))
      {
        if (!*((_BYTE *)a3 + 24) || *((_BYTE *)a2 + 24))
          return result;
      }
      else if (!v17)
      {
        return result;
      }
      *(_OWORD *)v40 = *a2;
      v27 = *a2;
      *(_OWORD *)&v40[16] = a2[1];
      v28 = *(__int128 *)((char *)a3 + 9);
      *a2 = *a3;
      *(__int128 *)((char *)a2 + 9) = v28;
      *a3 = v27;
      result = *(__n128 *)&v40[9];
      *(__int128 *)((char *)a3 + 9) = *(_OWORD *)&v40[9];
      v29 = *((int *)a2 + 2) >> 1;
      v30 = *((int *)a1 + 2) >> 1;
      v31 = v29 < v30;
      if (v29 == v30 && (v32 = *((_QWORD *)a2 + 2), v33 = *((_QWORD *)a1 + 2), v31 = v32 < v33, v32 == v33))
      {
        if (!*((_BYTE *)a2 + 24) || *((_BYTE *)a1 + 24))
          return result;
      }
      else if (!v31)
      {
        return result;
      }
      *(_OWORD *)v42 = *a1;
      v36 = *a1;
      *(_OWORD *)&v42[16] = a1[1];
      v37 = *(__int128 *)((char *)a2 + 9);
      *a1 = *a2;
      *(__int128 *)((char *)a1 + 9) = v37;
      *a2 = v36;
      result = *(__n128 *)&v42[9];
      *(__int128 *)((char *)a2 + 9) = *(_OWORD *)&v42[9];
      return result;
    }
  }
  else if (!v5)
  {
    goto LABEL_14;
  }
  v9 = *((int *)a3 + 2) >> 1;
  v10 = v9 < v3;
  if (v9 == v3 && (v11 = *((_QWORD *)a3 + 2), v12 = *((_QWORD *)a2 + 2), v10 = v11 < v12, v11 == v12))
  {
    if (*((_BYTE *)a3 + 24) && !*((_BYTE *)a2 + 24))
      goto LABEL_12;
  }
  else if (v10)
  {
LABEL_12:
    *(_OWORD *)v38 = *a1;
    v13 = *a1;
    *(_OWORD *)&v38[16] = a1[1];
    v14 = *(__int128 *)((char *)a3 + 9);
    *a1 = *a3;
    *(__int128 *)((char *)a1 + 9) = v14;
    *a3 = v13;
    result = *(__n128 *)&v38[9];
    *(__int128 *)((char *)a3 + 9) = *(_OWORD *)&v38[9];
    return result;
  }
  *(_OWORD *)v39 = *a1;
  v20 = *a1;
  *(_OWORD *)&v39[16] = a1[1];
  v21 = *(__int128 *)((char *)a2 + 9);
  *a1 = *a2;
  *(__int128 *)((char *)a1 + 9) = v21;
  *a2 = v20;
  result = *(__n128 *)&v39[9];
  *(__int128 *)((char *)a2 + 9) = *(_OWORD *)&v39[9];
  v22 = *((int *)a3 + 2) >> 1;
  v23 = *((int *)a2 + 2) >> 1;
  v24 = v22 < v23;
  if (v22 != v23 || (v25 = *((_QWORD *)a3 + 2), v26 = *((_QWORD *)a2 + 2), v24 = v25 < v26, v25 != v26))
  {
    if (!v24)
      return result;
LABEL_34:
    *(_OWORD *)v41 = *a2;
    v34 = *a2;
    *(_OWORD *)&v41[16] = a2[1];
    v35 = *(__int128 *)((char *)a3 + 9);
    *a2 = *a3;
    *(__int128 *)((char *)a2 + 9) = v35;
    *a3 = v34;
    result = *(__n128 *)&v41[9];
    *(__int128 *)((char *)a3 + 9) = *(_OWORD *)&v41[9];
    return result;
  }
  if (*((_BYTE *)a3 + 24) && !*((_BYTE *)a2 + 24))
    goto LABEL_34;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[32];

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v26 = *(int *)(a2 - 24) >> 1;
      v27 = *(int *)(a1 + 8) >> 1;
      v28 = v26 < v27;
      if (v26 == v27 && (v29 = *(_QWORD *)(a2 - 16), v30 = *(_QWORD *)(a1 + 16), v28 = v29 < v30, v29 == v30))
      {
        if (!*(_BYTE *)(a2 - 8) || *(_BYTE *)(a1 + 24))
          return result;
      }
      else if (!v28)
      {
        return result;
      }
      v31 = (_OWORD *)(a2 - 32);
      *(_OWORD *)v34 = *(_OWORD *)a1;
      v32 = *(_OWORD *)a1;
      *(_OWORD *)&v34[16] = *(_OWORD *)(a1 + 16);
      v33 = *(_OWORD *)(a2 - 23);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 9) = v33;
      *v31 = v32;
      *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)&v34[9];
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *,0>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v6 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64));
      v7 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *(_DWORD *)(v7 + 8);
        v12 = v11 >> 1;
        v13 = *(int *)(v6 + 8) >> 1;
        if (v11 >> 1 == v13)
        {
          v14 = *(_QWORD *)(v7 + 16);
          v15 = *(_QWORD *)(v6 + 16);
          if (v14 == v15)
          {
            if (*(_BYTE *)(v7 + 24))
              v16 = *(_BYTE *)(v6 + 24) == 0;
            else
              v16 = 0;
            if (!v16)
              goto LABEL_7;
          }
          else if (v14 >= v15)
          {
            goto LABEL_7;
          }
        }
        else
        {
          if (v12 >= v13)
            goto LABEL_7;
          v14 = *(_QWORD *)(v7 + 16);
        }
        v17 = *(_QWORD *)v7;
        v18 = *(_DWORD *)(v7 + 12);
        v19 = *(_BYTE *)(v7 + 24);
        *(_OWORD *)v7 = *(_OWORD *)v6;
        *(_OWORD *)(v7 + 9) = *(_OWORD *)(v6 + 9);
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v20 = v8;
        if (!v19)
        {
          while (1)
          {
            v24 = a1 + v20;
            v25 = *(int *)(a1 + v20 + 40) >> 1;
            if (v12 == v25)
            {
              if (v14 >= *(_QWORD *)(v24 + 48))
                goto LABEL_34;
            }
            else if (v12 >= v25)
            {
              goto LABEL_35;
            }
            v6 -= 32;
            *(_OWORD *)(v24 + 64) = *(_OWORD *)(v24 + 32);
            *(_OWORD *)(v24 + 73) = *(_OWORD *)(v24 + 41);
            v20 -= 32;
            if (v20 == -64)
              goto LABEL_5;
          }
        }
        while (2)
        {
          v21 = a1 + v20;
          v22 = *(int *)(a1 + v20 + 40) >> 1;
          if (v12 == v22)
          {
            v23 = *(_QWORD *)(v21 + 48);
            if (v14 == v23)
            {
              if (*(_BYTE *)(a1 + v20 + 56))
                goto LABEL_34;
            }
            else if (v14 >= v23)
            {
LABEL_34:
              v10 = v6;
              goto LABEL_6;
            }
            goto LABEL_23;
          }
          if (v12 < v22)
          {
LABEL_23:
            v6 -= 32;
            *(_OWORD *)(v21 + 64) = *(_OWORD *)(v21 + 32);
            *(_OWORD *)(v21 + 73) = *(_OWORD *)(v21 + 41);
            v20 -= 32;
            if (v20 == -64)
            {
LABEL_5:
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
LABEL_35:
        v10 = a1 + v20 + 64;
LABEL_6:
        *(_QWORD *)v10 = v17;
        *(_DWORD *)(v10 + 8) = v11;
        *(_DWORD *)(v10 + 12) = v18;
        *(_QWORD *)(v10 + 16) = v14;
        ++v9;
        *(_BYTE *)(v10 + 24) = v19;
        if (v9 == 8)
          return v7 + 32 == a2;
LABEL_7:
        v6 = v7;
        v8 += 32;
        v7 += 32;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[32];
  _BYTE v31[32];
  _BYTE v32[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::CpModelMapping::ExtractEncoding(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::EqualityDetectionHelper *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3).n128_u64[0];
  v9 = *(int *)(a4 + 8) >> 1;
  v10 = *(int *)(a3 + 8) >> 1;
  v11 = v9 < v10;
  if (v9 != v10 || (v12 = *(_QWORD *)(a4 + 16), v13 = *(_QWORD *)(a3 + 16), v11 = v12 < v13, v12 != v13))
  {
    if (!v11)
      return result;
LABEL_8:
    *(_OWORD *)v30 = *(_OWORD *)a3;
    v14 = *(_OWORD *)a3;
    *(_OWORD *)&v30[16] = *(_OWORD *)(a3 + 16);
    v15 = *(_OWORD *)(a4 + 9);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 9) = v15;
    *(_OWORD *)a4 = v14;
    result = *(__n128 *)&v30[9];
    *(_OWORD *)(a4 + 9) = *(_OWORD *)&v30[9];
    v16 = *(int *)(a3 + 8) >> 1;
    v17 = *(int *)(a2 + 8) >> 1;
    v18 = v16 < v17;
    if (v16 == v17 && (v19 = *(_QWORD *)(a3 + 16), v20 = *(_QWORD *)(a2 + 16), v18 = v19 < v20, v19 == v20))
    {
      if (!*(_BYTE *)(a3 + 24) || *(_BYTE *)(a2 + 24))
        return result;
    }
    else if (!v18)
    {
      return result;
    }
    *(_OWORD *)v31 = *(_OWORD *)a2;
    v21 = *(_OWORD *)a2;
    *(_OWORD *)&v31[16] = *(_OWORD *)(a2 + 16);
    v22 = *(_OWORD *)(a3 + 9);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 9) = v22;
    *(_OWORD *)a3 = v21;
    result = *(__n128 *)&v31[9];
    *(_OWORD *)(a3 + 9) = *(_OWORD *)&v31[9];
    v23 = *(int *)(a2 + 8) >> 1;
    v24 = *(int *)(a1 + 8) >> 1;
    v25 = v23 < v24;
    if (v23 == v24 && (v26 = *(_QWORD *)(a2 + 16), v27 = *(_QWORD *)(a1 + 16), v25 = v26 < v27, v26 == v27))
    {
      if (!*(_BYTE *)(a2 + 24) || *(_BYTE *)(a1 + 24))
        return result;
    }
    else if (!v25)
    {
      return result;
    }
    *(_OWORD *)v32 = *(_OWORD *)a1;
    v28 = *(_OWORD *)a1;
    *(_OWORD *)&v32[16] = *(_OWORD *)(a1 + 16);
    v29 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = v29;
    *(_OWORD *)a2 = v28;
    result = *(__n128 *)&v32[9];
    *(_OWORD *)(a2 + 9) = *(_OWORD *)&v32[9];
    return result;
  }
  if (*(_BYTE *)(a4 + 24) && !*(_BYTE *)(a3 + 24))
    goto LABEL_8;
  return result;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::~raw_hash_set(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = 0;
    v4 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v3) & 0x80000000) == 0)
      {
        v6 = *v4 + v2;
        if (*(_QWORD *)(v6 + 32))
        {
          operator delete(*(void **)(v6 + 8));
          *(_QWORD *)(v6 + 48) = 0;
          *(_QWORD *)(v6 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
          *(_QWORD *)(v6 + 32) = 0;
        }
        v5 = *(_QWORD **)(v6 + 40);
        if (v5)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
      }
      ++v3;
      v2 += 56;
    }
    while (v3 != *(_QWORD *)(a1 + 24));
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v4 = 0;
  }
  v7 = *(_QWORD **)(a1 + 32);
  if (v7)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
  return a1;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::CpModelMapping>::~Delete(_QWORD *a1)
{
  void **v2;

  v2 = (void **)a1[1];
  *a1 = &off_24F984290;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::CpModelMapping::~CpModelMapping(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::CpModelMapping>::~Delete(_QWORD *a1)
{
  void **v2;

  v2 = (void **)a1[1];
  *a1 = &off_24F984290;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::CpModelMapping::~CpModelMapping(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::CpModelMapping::~CpModelMapping(void **this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (this[36])
  {
    operator delete(this[33]);
    this[38] = 0;
    this[33] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[34] = 0;
    this[35] = 0;
    this[36] = 0;
  }
  v2 = this[37];
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>>>::~raw_hash_set((uint64_t)(this + 27));
  if (this[24])
  {
    operator delete(this[21]);
    this[26] = 0;
    this[21] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[22] = 0;
    this[23] = 0;
    this[24] = 0;
  }
  v3 = this[25];
  if (v3)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v3);
  if (this[18])
  {
    operator delete(this[15]);
    this[20] = 0;
    this[15] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    this[16] = 0;
    this[17] = 0;
    this[18] = 0;
  }
  v4 = this[19];
  if (v4)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v4);
  v5 = this[12];
  if (v5)
  {
    this[13] = v5;
    operator delete(v5);
  }
  v6 = this[9];
  if (v6)
  {
    this[10] = v6;
    operator delete(v6);
  }
  v7 = this[6];
  if (v7)
  {
    this[7] = v7;
    operator delete(v7);
  }
  v8 = this[3];
  if (v8)
  {
    this[4] = v8;
    operator delete(v8);
  }
  v9 = *this;
  if (*this)
  {
    this[1] = v9;
    operator delete(v9);
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<int const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t v18;

  v6 = 0;
  v7 = *a2;
  v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  v9 = *a1;
  v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  v11 = a1[3];
  while (1)
  {
    v12 = v10 & v11;
    v13 = *(_QWORD *)(v9 + (v10 & v11));
    v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14)
      break;
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::prepare_insert(a1, v8);
      v18 = a1[1] + 56 * result;
      *(_DWORD *)v18 = *a2;
      *(_QWORD *)(v18 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_QWORD *)(v18 + 48) = 0;
      v9 = *a1;
      v15 = a1[1];
      v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    v10 = v6 + v12;
  }
  v15 = a1[1];
  while (1)
  {
    result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 56 * result) == (_DWORD)v7)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_6;
  }
  v17 = 0;
LABEL_10:
  *(_QWORD *)a3 = v9 + result;
  *(_QWORD *)(a3 + 8) = v15 + 56 * result;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  v2 = (unint64_t)a2;
  v5 = *a1;
  v4 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v32 = v4;
  if (!v4)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 56 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v31 = a1[4];
    if (!v31)
      return;
LABEL_21:
    *((_QWORD *)v31 + 4) = v14 >> 3;
    *((_QWORD *)v31 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v5] & 0x80000000) == 0)
    {
      v16 = &v32[56 * (_QWORD)v13];
      v17 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v16)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v16));
      v18 = *a1;
      v19 = a1[3];
      v20 = ((v17 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v19;
      v21 = 0;
      for (i = *(_QWORD *)&(*a1)[v20] & (~*(_QWORD *)&(*a1)[v20] << 7) & 0x8080808080808080;
            !i;
            i = *(_QWORD *)&v18[v20] & (~*(_QWORD *)&v18[v20] << 7) & 0x8080808080808080)
      {
        v21 += 8;
        v20 = (v21 + v20) & (unint64_t)v19;
      }
      v23 = (v20 + (__clz(__rbit64(i)) >> 3)) & (unint64_t)v19;
      v24 = v17 & 0x7F;
      v18[v23] = v24;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v23 - 8) & (unint64_t)a1[3])] = v24;
      v25 = (uint64_t)&a1[1][56 * v23];
      *(_DWORD *)v25 = *(_DWORD *)v16;
      v26 = *((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v25 + 8) = v26;
      v27 = *((_QWORD *)v16 + 2);
      *((_QWORD *)v16 + 2) = 0;
      v28 = *((_QWORD *)v16 + 3);
      *((_QWORD *)v16 + 3) = 0;
      *(_QWORD *)(v25 + 16) = v27;
      *(_QWORD *)(v25 + 24) = v28;
      v29 = *((_QWORD *)v16 + 4);
      v30 = *((_QWORD *)v16 + 5);
      *((_QWORD *)v16 + 4) = 0;
      *(_QWORD *)(v25 + 32) = v29;
      *(_QWORD *)(v25 + 40) = v30;
      *((_QWORD *)v16 + 5) = 0;
      *(_QWORD *)(v25 + 48) = *((_QWORD *)v16 + 6);
      *((_QWORD *)v16 + 6) = 0;
      if (*((_QWORD *)v16 + 4))
      {
        operator delete(*((void **)v16 + 1));
        *((_QWORD *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *((_QWORD *)v16 + 6) = 0;
        *((_QWORD *)v16 + 3) = 0;
        *((_QWORD *)v16 + 4) = 0;
        *((_QWORD *)v16 + 2) = 0;
      }
      v14 += v21;
      v15 = (_QWORD *)*((_QWORD *)v16 + 5);
      if (v15)
        absl::lts_2020_02_25::container_internal::UnsampleSlow(v15);
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v5);
  v31 = a1[4];
  if (v31)
    goto LABEL_21;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::drop_deletes_without_resize(uint64_t a1)
{
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[8];

  v29[7] = *MEMORY[0x24BDAC8D0];
  v2 = *(int8x16_t **)a1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)a1 + v3;
  if (v4 + 1 != *(_QWORD *)a1)
  {
    v5 = v3 - 7;
    v6 = *(unint64_t **)a1;
    if (v5 < 0x18)
      goto LABEL_29;
    v7 = (v5 >> 3) + 1;
    v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v12 = vandq_s8(v8[-1], v9);
      v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(_QWORD *)(v4 + 1) = v2->i64[0];
  *(_BYTE *)v4 = -1;
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
  {
    v16 = 0;
    *(_QWORD *)(a1 + 40) = -*(_QWORD *)(a1 + 16);
    v28 = *(_QWORD *)(a1 + 32);
    if (!v28)
      return;
LABEL_26:
    *(_QWORD *)(v28 + 32) = v16 >> 3;
    *(_QWORD *)(v28 + 16) = 0;
    return;
  }
  v15 = 0;
  v16 = 0;
  do
  {
    v20 = *(int8x16_t **)a1;
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + v15) == 254)
    {
      v21 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(a1 + 8) + 56 * v15);
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      v24 = *(uint64_t *)((_BYTE *)v20->i64 + v23) & (~*(uint64_t *)((char *)v20->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        v17 = 0;
        v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      }
      else
      {
        v17 = 0;
        v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          v18 = (v17 + v18) & v14;
          v24 = *(uint64_t *)((_BYTE *)v20->i64 + v18) & (~*(uint64_t *)((char *)v20->i64 + v18) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v19 = (v18 + (__clz(__rbit64(v24)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v23) ^ (v15 - v23)) & v14) > 7)
      {
        v25 = v20->u8[v19];
        v20->i8[v19] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v19 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = v22 & 0x7F;
        v26 = *(_QWORD *)(a1 + 8);
        if (v25 == 128)
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, v26 + 56 * v19, v26 + 56 * v15);
          *(_BYTE *)(*(_QWORD *)a1 + v15) = 0x80;
          *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v15 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, (uint64_t)v29, v26 + 56 * v15);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, *(_QWORD *)(a1 + 8) + 56 * v15, *(_QWORD *)(a1 + 8) + 56 * v19);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, *(_QWORD *)(a1 + 8) + 56 * v19, (uint64_t)v29);
          --v15;
        }
      }
      else
      {
        v20->i8[v15] = v22 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v15 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = v22 & 0x7F;
      }
    }
    ++v15;
    v14 = *(_QWORD *)(a1 + 24);
  }
  while (v15 != v14);
  v27 = v15 - (v15 >> 3);
  if (v15 == 7)
    v27 = 6;
  *(_QWORD *)(a1 + 40) = v27 - *(_QWORD *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 32);
  if (v28)
    goto LABEL_26;
}

void absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)(a2 + 8) = v4;
  v6 = (_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  v7 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v7;
  v8 = *(_QWORD *)(a3 + 32);
  v9 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  if (*(_QWORD *)(a3 + 32))
  {
    operator delete(*(void **)(a3 + 8));
    *(_QWORD *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a3 + 48) = 0;
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
  }
  v10 = *(_QWORD **)(a3 + 40);
  if (v10)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v10);
}

char *std::vector<operations_research::sat::LinearExpression>::__push_back_slow_path<operations_research::sat::LinearExpression>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  else
    v5 = v4;
  if (v5 > 0x492492492492492)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 56 * v5;
  v8 = (char *)operator new(56 * v5);
  v9 = &v8[56 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v9 + 5) = v11;
  *((_QWORD *)v9 + 6) = v12;
  v13 = v9 + 56;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    if (!v15)
      return v13;
    goto LABEL_20;
  }
  v16 = 0;
  do
  {
    v17 = &v9[v16];
    v18 = &v15[v16];
    *(_OWORD *)(v17 - 56) = *(_OWORD *)&v15[v16 - 56];
    *((_QWORD *)v17 - 5) = *(_QWORD *)&v15[v16 - 40];
    *((_QWORD *)v18 - 7) = 0;
    *((_QWORD *)v18 - 6) = 0;
    *((_QWORD *)v18 - 5) = 0;
    *((_OWORD *)v17 - 2) = *(_OWORD *)&v15[v16 - 32];
    v19 = *(_QWORD *)&v15[v16 - 8];
    *((_QWORD *)v17 - 2) = *(_QWORD *)&v15[v16 - 16];
    *((_QWORD *)v18 - 4) = 0;
    *((_QWORD *)v18 - 3) = 0;
    *((_QWORD *)v18 - 2) = 0;
    *((_QWORD *)v17 - 1) = v19;
    v16 -= 56;
  }
  while (&v15[v16] != v14);
  v20 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = &v9[v16];
  a1[1] = v13;
  a1[2] = v10;
  if (v15 != v20)
  {
    do
    {
      v21 = (void *)*((_QWORD *)v15 - 4);
      if (v21)
      {
        *((_QWORD *)v15 - 3) = v21;
        operator delete(v21);
      }
      v22 = (void *)*((_QWORD *)v15 - 7);
      if (v22)
      {
        *((_QWORD *)v15 - 6) = v22;
        operator delete(v22);
      }
      v15 -= 56;
    }
    while (v15 != v20);
    v15 = v20;
  }
  if (v15)
LABEL_20:
    operator delete(v15);
  return v13;
}

uint64_t operations_research::sat::CpModelMapping::Interval(operations_research::sat::CpModelMapping *this, int a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v7;
  unint64_t v8[2];
  uint64_t *v9;

  LODWORD(v8[0]) = a2;
  LODWORD(v9) = 0;
  if (a2 < 0)
  {
    v9 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v8, (int)&v9, "i >= 0");
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal(v8, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.h", 122, &v9);
      google::LogMessage::stream((google::LogMessage *)v8);
      goto LABEL_13;
    }
  }
  v7 = a2;
  v4 = *((_QWORD *)this + 3);
  v8[0] = (*((_QWORD *)this + 4) - v4) >> 2;
  if (v8[0] <= a2)
  {
    v9 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v7, (int)v8, "i < intervals_.size()");
    if (v9)
    {
      google::LogMessageFatal::LogMessageFatal(v8, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.h", 123, &v9);
      google::LogMessage::stream((google::LogMessage *)v8);
      goto LABEL_13;
    }
    v4 = *((_QWORD *)this + 3);
    v5 = (_DWORD *)(v4 + 4 * a2);
    if (*v5 != -1)
      return *(unsigned int *)(v4 + 4 * a2);
  }
  else
  {
    v5 = (_DWORD *)(v4 + 4 * a2);
    if (*v5 != -1)
      return *(unsigned int *)(v4 + 4 * a2);
  }
  v9 = (uint64_t *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>>((int)v5, (int)&operations_research::sat::kNoIntervalVariable, "intervals_[i] != kNoIntervalVariable");
  if (v9)
  {
    google::LogMessageFatal::LogMessageFatal(v8, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_loader.h", 124, &v9);
    google::LogMessage::stream((google::LogMessage *)v8);
LABEL_13:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v8);
  }
  return *(unsigned int *)(*((_QWORD *)this + 3) + 4 * a2);
}

void sub_22DAC18EC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAC18F4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAC18FC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>,gtl::IntType<operations_research::sat::IntervalVariable_tag_,int>>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DAC196C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<int>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,std::vector<operations_research::sat::Literal>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 32 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v25 = a1[4];
    if (!v25)
      return;
LABEL_21:
    *((_QWORD *)v25 + 4) = v14 >> 3;
    *((_QWORD *)v25 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v19 = &v5[32 * (_QWORD)v13];
      v20 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v19)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v19));
      v21 = *a1;
      v22 = a1[3];
      v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      v24 = *(_QWORD *)&(*a1)[v23] & (~*(_QWORD *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v23 = (v15 + v23) & (unint64_t)v22;
          v24 = *(_QWORD *)&v21[v23] & (~*(_QWORD *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = &a1[1][32 * v16];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *((_QWORD *)v18 + 3) = 0;
      *(_OWORD *)(v18 + 8) = *(_OWORD *)(v19 + 8);
      *((_QWORD *)v18 + 3) = *((_QWORD *)v19 + 3);
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *((_QWORD *)v19 + 3) = 0;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v25 = a1[4];
  if (v25)
    goto LABEL_21;
}

_QWORD *std::vector<std::vector<operations_research::sat::Literal>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = operator new(24 * a2);
    v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    v8 = &v6[3 * a2];
    a1[2] = v8;
    v9 = *(const void **)a3;
    v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v10)
    {
      if (v10 < 0)
      {
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      v11 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v12 = (char *)operator new(v10);
        *v7 = v12;
        v7[1] = v12;
        v13 = &v12[4 * (v10 >> 2)];
        v7[2] = v13;
        memcpy(v12, v9, v10);
        v7[1] = v13;
        v7 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    else
    {
      bzero(v6, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_22DAC1E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_22DAC1E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_22DAC1E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::vector<operations_research::sat::Literal>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = (char *)v2[1];
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *((_QWORD *)v4 - 2) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void operations_research::sat::PostsolveClause(uint64_t a1, const char *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  int v12;
  const char *v13;
  unint64_t *v14;
  void **v15;
  uint64_t *v16;
  int v17;
  int v18;
  unint64_t *v19;
  void **v20;
  unint64_t v21;
  void *__p[2];
  uint64_t *v23;
  int v24;

  if (*(_DWORD *)(a1 + 60) == 3)
    v4 = *(uint64_t **)(a1 + 48);
  else
    v4 = &operations_research::sat::_BoolArgumentProto_default_instance_;
  v5 = *((unsigned int *)v4 + 4);
  LODWORD(v21) = v5;
  v24 = 0;
  if (!(_DWORD)v5)
  {
    v23 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v21, (int)&v24, "size != 0");
    if (v23)
    {
      google::LogMessageFatal::LogMessageFatal(&v21, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 29, &v23);
      google::LogMessage::stream((google::LogMessage *)&v21);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v21);
    }
    goto LABEL_22;
  }
  if ((int)v5 < 1)
    goto LABEL_22;
  v6 = 0;
  v7 = 0;
  v8 = 4 * v5;
  do
  {
    if (*(_DWORD *)(a1 + 60) == 3)
      v9 = *(uint64_t **)(a1 + 48);
    else
      v9 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    v10 = *(_DWORD *)(v9[3] + v6);
    v11 = ~v10;
    if (~v10 > v10)
      v10 = ~v10;
    v12 = v10;
    if (operations_research::Domain::IsFixed((operations_research::Domain *)(*(_QWORD *)a2 + 24 * v10), a2))
    {
      v7 |= operations_research::Domain::Min((operations_research::Domain *)(*(_QWORD *)a2 + 24 * v12), v13) == v11 >> 31;
    }
    else
    {
      operations_research::Domain::Domain(&v21, 0);
      v14 = (unint64_t *)(*(_QWORD *)a2 + 24 * v12);
      if (v14 == &v21)
      {
        if ((v21 & 1) != 0)
          operator delete(__p[0]);
      }
      else
      {
        v15 = (void **)(v14 + 1);
        if ((*(_BYTE *)v14 & 1) != 0)
          operator delete(*v15);
        *v14 = v21;
        *(_OWORD *)v15 = *(_OWORD *)__p;
      }
    }
    v6 += 4;
  }
  while (v8 != v6);
  if ((v7 & 1) == 0)
  {
LABEL_22:
    if (*(_DWORD *)(a1 + 60) == 3)
      v16 = *(uint64_t **)(a1 + 48);
    else
      v16 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    v17 = *(_DWORD *)v16[3];
    operations_research::Domain::Domain(&v21, v17 >= 0);
    if (~v17 <= v17)
      v18 = v17;
    else
      v18 = ~v17;
    v19 = (unint64_t *)(*(_QWORD *)a2 + 24 * v18);
    if (v19 == &v21)
    {
      if ((v21 & 1) != 0)
        operator delete(__p[0]);
    }
    else
    {
      v20 = (void **)(v19 + 1);
      if ((*(_BYTE *)v19 & 1) != 0)
        operator delete(*v20);
      *v19 = v21;
      *(_OWORD *)v20 = *(_OWORD *)__p;
    }
  }
}

void sub_22DAC2144(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PostsolveLinear(uint64_t a1, const char *a2, _QWORD *a3, __n128 a4)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 *v43;
  __n128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  __n128 *v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  int8x16_t v53;
  uint64_t v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  char *v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t *v61;
  int8x16_t v62;
  char *v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  int *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  std::string *v76;
  void **p_size;
  int8x16_t v78;
  uint64_t *v79;
  void **v80;
  uint64_t *v81;
  uint64_t *v82;
  char v83;
  unint64_t *v84;
  void **v85;
  _QWORD *v86;
  _QWORD *v87;
  std::string *v88;
  std::string::size_type size;
  _QWORD *v90;
  uint64_t v92;
  char *v94;
  uint64_t v95;
  uint64_t v97;
  void *v98;
  std::string v99;
  unint64_t v100;
  void *__p[2];
  uint64_t *v102;
  void *v103;
  unint64_t v104;
  std::string v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;

  if (*(_DWORD *)(a1 + 60) == 12)
    v4 = *(uint64_t **)(a1 + 48);
  else
    v4 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  v5 = *((unsigned int *)v4 + 4);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v95 = v5;
  if ((int)v5 <= 0)
  {
    v51 = 0;
    goto LABEL_147;
  }
  v6 = a3;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v94 = 0;
  v11 = 0;
  v92 = 0;
  do
  {
    v13 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (*(_DWORD *)(a1 + 60) == 12)
      v13 = *(uint64_t **)(a1 + 48);
    v14 = *(_DWORD *)(v13[3] + 4 * v11);
    v15 = *(_QWORD *)(v13[6] + 8 * v11);
    LODWORD(v100) = v14;
    v105.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3);
    if (v105.__r_.__value_.__r.__words[0] <= v14)
    {
      v102 = (uint64_t *)google::MakeCheckOpString<int,unsigned long>((int)&v100, (int)&v105, "var < domains->size()");
      if (v102)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)&v105, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 62, &v102);
        google::LogMessage::stream((google::LogMessage *)&v105);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v105);
      }
    }
    if (v15)
    {
      if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*v6 + 24 * v14), a2))
      {
        v16 = v94;
        if (v94 < v10)
        {
          *(_DWORD *)v94 = v14;
          v94 += 4;
          v110 = v16 + 4;
          if (v8 >= v7)
            goto LABEL_36;
LABEL_6:
          *(_QWORD *)v8 = v15;
          v12 = (uint64_t)(v8 + 8);
LABEL_7:
          v107 = (char *)v12;
          v8 = (char *)v12;
          v6 = a3;
          goto LABEL_8;
        }
        v17 = v10;
        v18 = v94 - v9;
        v19 = (v94 - v9) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v21 = v17 - v9;
        v22 = (v17 - v9) >> 1;
        if (v22 > v20)
          v20 = v22;
        if (v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v20;
        if (v23)
        {
          if (v23 >> 62)
            goto LABEL_160;
          v24 = (char *)operator new(4 * v23);
          v25 = (unint64_t)v7;
          v26 = &v24[4 * v19];
          *(_DWORD *)v26 = v14;
          v27 = (uint64_t)(v26 + 4);
          v28 = v94;
          if (v94 == v9)
          {
LABEL_32:
            v10 = &v24[4 * v23];
            v109 = v26;
            v110 = (char *)v27;
            v111 = v10;
            if (!v9)
            {
              v9 = v26;
              v7 = (char *)v25;
              v94 = (char *)v27;
              v110 = (char *)v27;
              if ((unint64_t)v8 >= v25)
                goto LABEL_36;
              goto LABEL_6;
            }
            operator delete(v9);
            v8 = v107;
            v9 = v26;
            v7 = v108;
            v94 = (char *)v27;
            v110 = (char *)v27;
            if (v107 < v108)
              goto LABEL_6;
LABEL_36:
            v32 = v106;
            v33 = (v8 - (char *)v106) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if ((v7 - (char *)v106) >> 2 > v34)
              v34 = (v7 - (char *)v106) >> 2;
            if ((unint64_t)(v7 - (char *)v106) >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v34;
            if (v35)
            {
              if (v35 >> 61)
LABEL_160:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v36 = operator new(8 * v35);
              v37 = (uint64_t *)&v36[8 * v33];
              *v37 = v15;
              v12 = (uint64_t)(v37 + 1);
              if (v8 == (char *)v32)
                goto LABEL_50;
LABEL_47:
              v38 = v8 - 8 - (char *)v32;
              if (v38 < 0x168)
              {
                v39 = v8;
                goto LABEL_49;
              }
              if (&v36[v8 - (char *)v32 - 8 - (v38 & 0xFFFFFFFFFFFFFFF8)] > &v36[v8 - (char *)v32 - 8])
              {
                v39 = v8;
                goto LABEL_49;
              }
              if (&v8[-(v38 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
              {
                v39 = v8;
                goto LABEL_49;
              }
              if ((unint64_t)((char *)v32 - v36) < 0x20)
              {
                v39 = v8;
                goto LABEL_49;
              }
              v46 = (v38 >> 3) + 1;
              v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
              v39 = &v8[-v47];
              v37 = (uint64_t *)((char *)v37 - v47);
              v48 = (__n128 *)&v36[8 * v33 - 16];
              v49 = (__n128 *)(v8 - 16);
              v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                a4 = *v49;
                v48[-1] = v49[-1];
                *v48 = a4;
                v48 -= 2;
                v49 -= 2;
                v50 -= 4;
              }
              while (v50);
              if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_49:
                  v40 = *((_QWORD *)v39 - 1);
                  v39 -= 8;
                  *--v37 = v40;
                }
                while (v39 != (char *)v32);
              }
            }
            else
            {
              v36 = 0;
              v37 = (uint64_t *)(8 * v33);
              *(_QWORD *)(8 * v33) = v15;
              v12 = 8 * v33 + 8;
              if (v8 != (char *)v32)
                goto LABEL_47;
            }
LABEL_50:
            v7 = &v36[8 * v35];
            v106 = v37;
            v108 = v7;
            if (v32)
              operator delete(v32);
            goto LABEL_7;
          }
        }
        else
        {
          v25 = (unint64_t)v7;
          v24 = 0;
          v26 = (char *)(4 * v19);
          *(_DWORD *)(4 * v19) = v14;
          v27 = 4 * v19 + 4;
          v28 = v94;
          if (v94 == v9)
            goto LABEL_32;
        }
        v29 = v28 - 4 - v9;
        if (v29 >= 0xBC)
        {
          if (&v24[v18 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[v18 - 4])
          {
            v30 = v94;
          }
          else if (&v28[-(v29 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v28 - 4)
          {
            v30 = v94;
          }
          else if ((unint64_t)(v28 - &v24[v18]) >= 0x20)
          {
            v41 = (v29 >> 2) + 1;
            v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            v30 = &v94[-v42];
            v26 -= v42;
            v43 = (__n128 *)&v24[4 * v19 - 16];
            v44 = (__n128 *)(v94 - 16);
            v45 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              a4 = *v44;
              v43[-1] = v44[-1];
              *v43 = a4;
              v43 -= 2;
              v44 -= 2;
              v45 -= 8;
            }
            while (v45);
            if (v41 == (v41 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_32;
          }
          else
          {
            v30 = v94;
          }
        }
        else
        {
          v30 = v28;
        }
        do
        {
          v31 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *((_DWORD *)v26 - 1) = v31;
          v26 -= 4;
        }
        while (v30 != v9);
        goto LABEL_32;
      }
      v92 += operations_research::Domain::Min((operations_research::Domain *)(*v6 + 24 * v14), a2) * v15;
    }
LABEL_8:
    ++v11;
  }
  while (v11 != v95);
  v51 = v109;
  if (v109 != v94)
  {
    v52 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (*(_DWORD *)(a1 + 60) == 12)
      v52 = *(uint64_t **)(a1 + 48);
    operations_research::Domain::FromFlatSpanOfIntervals(v52[9], *((int *)v52 + 16), (unint64_t *)&v102, a4);
    operations_research::Domain::Domain(&v100, -v92);
    operations_research::Domain::AdditionWith((operations_research::Domain *)&v102, (const operations_research::Domain *)&v100, &v105, v53);
    if ((v100 & 1) == 0)
    {
      if ((v102 & 1) == 0)
        goto LABEL_79;
LABEL_86:
      operator delete(v103);
      v54 = v94 - v51;
      if (v94 - v51 != 4)
        goto LABEL_87;
LABEL_80:
      v55 = *(int *)v51;
      operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v105, *v106, &v100);
      operations_research::Domain::IntersectionWith(&v100, (const operations_research::Domain *)(*a3 + 24 * (int)v55), (unint64_t *)&v102);
      if ((v100 & 1) != 0)
        operator delete(__p[0]);
      if (((*(_QWORD *)(*(_QWORD *)a2 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v55) & 1) != 0)
        v57 = operations_research::Domain::Min((operations_research::Domain *)&v102, v56);
      else
        v57 = operations_research::Domain::Max((operations_research::Domain *)&v102, v56);
      operations_research::Domain::Domain(&v100, v57);
      v84 = (unint64_t *)(*a3 + 24 * (int)v55);
      if (v84 == &v100)
      {
        if ((v100 & 1) != 0)
          operator delete(__p[0]);
      }
      else
      {
        v85 = (void **)(v84 + 1);
        if ((*(_BYTE *)v84 & 1) != 0)
          operator delete(*v85);
        *v84 = v100;
        *(_OWORD *)v85 = *(_OWORD *)__p;
      }
      if ((v102 & 1) != 0)
      {
        v81 = (uint64_t *)v103;
        goto LABEL_142;
      }
      goto LABEL_143;
    }
    operator delete(__p[0]);
    if ((v102 & 1) != 0)
      goto LABEL_86;
LABEL_79:
    v54 = v94 - v51;
    if (v94 - v51 == 4)
      goto LABEL_80;
LABEL_87:
    v102 = 0;
    v103 = 0;
    v104 = 0;
    operations_research::Domain::Domain(&v100, 0);
    v58 = (char *)v103;
    if ((unint64_t)v103 >= v104)
    {
      v103 = (void *)std::vector<operations_research::Domain>::__push_back_slow_path<operations_research::Domain>((uint64_t *)&v102, (uint64_t)&v100);
      if ((v100 & 1) != 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_QWORD *)v103 = 0;
      *(_QWORD *)v58 = v100;
      v59 = *(int8x16_t *)__p;
      *(_OWORD *)(v58 + 8) = *(_OWORD *)__p;
      v103 = v58 + 24;
    }
    if ((unint64_t)v54 >= 5)
    {
      v60 = 0;
      v61 = v106;
      do
      {
        LOBYTE(v97) = 0;
        operations_research::Domain::MultiplicationBy((operations_research::Domain *)(*a3 + 24 * *(int *)&v51[4 * v60]), (BOOL *)&v97, -v61[v60], &v100);
        if (!(_BYTE)v97)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v99, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 94);
          v90 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v99);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Check failed: exact ", 20);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v99);
        }
        operations_research::Domain::AdditionWith((operations_research::Domain *)&v100, (const operations_research::Domain *)((char *)v103 - 24), &v99, v62);
        v63 = (char *)v103;
        if ((unint64_t)v103 >= v104)
        {
          v103 = (void *)std::vector<operations_research::Domain>::__push_back_slow_path<operations_research::Domain>((uint64_t *)&v102, (uint64_t)&v99);
          if ((v99.__r_.__value_.__s.__data_[0] & 1) != 0)
          {
            operator delete((void *)v99.__r_.__value_.__l.__size_);
            if ((v100 & 1) == 0)
              goto LABEL_93;
LABEL_100:
            operator delete(__p[0]);
            goto LABEL_93;
          }
          if ((v100 & 1) != 0)
            goto LABEL_100;
        }
        else
        {
          *(_QWORD *)v103 = 0;
          *(_QWORD *)v63 = v99.__r_.__value_.__r.__words[0];
          v59 = *(int8x16_t *)&v99.__r_.__value_.__r.__words[1];
          *(_OWORD *)(v63 + 8) = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
          v103 = v63 + 24;
          if ((v100 & 1) != 0)
            goto LABEL_100;
        }
LABEL_93:
        ++v60;
      }
      while (v54 >> 2 > (unint64_t)(v60 + 1));
    }
    v64 = (unint64_t)v54 >> 2;
    v65 = v64 - 1;
    if ((int)v64 - 1 >= 0)
    {
      v66 = 3 * (v64 - 1);
      v67 = &v106[v65];
      v68 = (int *)&v51[4 * v65];
      do
      {
        v70 = *v68--;
        v69 = v70;
        v72 = *v67--;
        v71 = v72;
        operations_research::Domain::AdditionWith((operations_research::Domain *)&v105, (const operations_research::Domain *)&v102[v66], &v97, v59);
        operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v97, v72, (unint64_t *)&v99);
        operations_research::Domain::IntersectionWith(&v99, (const operations_research::Domain *)(*a3 + 24 * (int)v69), &v100);
        if ((v99.__r_.__value_.__s.__data_[0] & 1) != 0)
          operator delete((void *)v99.__r_.__value_.__l.__size_);
        if ((v97 & 1) != 0)
          operator delete(v98);
        if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v100))
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v97, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 105);
          v86 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v97);
          v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Check failed: !domain.IsEmpty() ", 32);
          google::protobuf::Message::ShortDebugString((google::protobuf::Message *)a1, (uint64_t)&v99);
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v88 = &v99;
          else
            v88 = (std::string *)v99.__r_.__value_.__r.__words[0];
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
          else
            size = v99.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v88, size);
          std::string::~string(&v99);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v97);
        }
        if (((*(_QWORD *)(*(_QWORD *)a2 + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v69) & 1) != 0)
          v74 = operations_research::Domain::Min((operations_research::Domain *)&v100, v73);
        else
          v74 = operations_research::Domain::Max((operations_research::Domain *)&v100, v73);
        v75 = v74;
        operations_research::Domain::Domain(&v99, v74);
        v76 = (std::string *)(*a3 + 24 * (int)v69);
        if (v76 == &v99)
        {
          if ((v99.__r_.__value_.__s.__data_[0] & 1) != 0)
            operator delete((void *)v99.__r_.__value_.__l.__size_);
        }
        else
        {
          p_size = (void **)&v76->__r_.__value_.__l.__size_;
          if ((v76->__r_.__value_.__s.__data_[0] & 1) != 0)
            operator delete(*p_size);
          v76->__r_.__value_.__r.__words[0] = v99.__r_.__value_.__r.__words[0];
          *(_OWORD *)p_size = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
        }
        operations_research::Domain::Domain(&v97, -(v71 * v75));
        operations_research::Domain::AdditionWith((operations_research::Domain *)&v105, (const operations_research::Domain *)&v97, &v99, v78);
        if ((v105.__r_.__value_.__s.__data_[0] & 1) != 0)
          operator delete((void *)v105.__r_.__value_.__l.__size_);
        v105 = v99;
        v59 = *(int8x16_t *)&v99.__r_.__value_.__r.__words[1];
        v99.__r_.__value_.__r.__words[0] = 0;
        if ((v97 & 1) != 0)
        {
          operator delete(v98);
          if ((v100 & 1) != 0)
LABEL_124:
            operator delete(__p[0]);
        }
        else if ((v100 & 1) != 0)
        {
          goto LABEL_124;
        }
        v66 -= 3;
        LODWORD(v64) = v64 - 1;
      }
      while ((_DWORD)v64);
    }
    v79 = v102;
    if (v102)
    {
      v80 = (void **)v103;
      v81 = v102;
      if (v103 != v102)
      {
        v82 = (uint64_t *)v103;
        do
        {
          v83 = *((_BYTE *)v82 - 24);
          v82 -= 3;
          if ((v83 & 1) != 0)
            operator delete(*(v80 - 2));
          v80 = (void **)v82;
        }
        while (v82 != v79);
        v81 = v102;
      }
      v103 = v79;
LABEL_142:
      operator delete(v81);
    }
LABEL_143:
    if ((v105.__r_.__value_.__s.__data_[0] & 1) != 0)
      operator delete((void *)v105.__r_.__value_.__l.__size_);
  }
  if (v106)
    operator delete(v106);
LABEL_147:
  if (v51)
  {
    v110 = v51;
    operator delete(v51);
  }
}

void sub_22DAC2BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a27);
}

void sub_22DAC2BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, void *a19, int a20,__int16 a21,char a22,char a23,char a24,void *__p,uint64_t a26,char a27,void *a28,uint64_t a29,char a30,void *a31)
{
  uint64_t v31;
  void *v33;
  void *v34;

  v33 = *(void **)(v31 - 136);
  if (v33)
  {
    *(_QWORD *)(v31 - 128) = v33;
    operator delete(v33);
    v34 = *(void **)(v31 - 112);
    if (!v34)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v34 = *(void **)(v31 - 112);
    if (!v34)
      goto LABEL_3;
  }
  *(_QWORD *)(v31 - 104) = v34;
  operator delete(v34);
  _Unwind_Resume(exception_object);
}

void **std::vector<operations_research::Domain>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  char v6;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (void **)a1[1];
      do
      {
        v6 = *((_BYTE *)v5 - 24);
        v5 -= 3;
        if ((v6 & 1) != 0)
          operator delete(*(v3 - 2));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL operations_research::sat::PostsolveIntMax(uint64_t a1, const char *a2)
{
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  operations_research::Domain *v16;
  uint64_t v17;
  unint64_t *v18;
  void **v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v24;
  unint64_t *v25;
  void **v26;
  _BOOL8 result;
  _QWORD *v28;
  void *v30[3];
  unint64_t v31;
  void *__p[2];

  v3 = *(_DWORD *)(a1 + 60);
  v4 = *(uint64_t **)(a1 + 48);
  if (v3 == 9)
    v5 = *(uint64_t **)(a1 + 48);
  else
    v5 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  v6 = *((int *)v5 + 4);
  if ((_DWORD)v6)
  {
    v7 = (int *)v5[3];
    v8 = 4 * v6;
    v9 = 0x8000000000000000;
    do
    {
      v12 = *v7;
      if (~*v7 <= *v7)
        v13 = *v7;
      else
        v13 = ~v12;
      v14 = v13;
      if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*(_QWORD *)a2 + 24 * v13), a2))
      {
        v16 = (operations_research::Domain *)(*(_QWORD *)a2 + 24 * v14);
        if (v12 < 0)
          v17 = operations_research::Domain::Max(v16, v15);
        else
          v17 = operations_research::Domain::Min(v16, v15);
        operations_research::Domain::Domain(&v31, v17);
        v18 = (unint64_t *)(*(_QWORD *)a2 + 24 * v14);
        if (v18 == &v31)
        {
          if ((v31 & 1) != 0)
            operator delete(__p[0]);
        }
        else
        {
          v19 = (void **)(v18 + 1);
          if ((*(_BYTE *)v18 & 1) != 0)
            operator delete(*v19);
          *v18 = v31;
          *(_OWORD *)v19 = *(_OWORD *)__p;
        }
      }
      v10 = operations_research::Domain::Min((operations_research::Domain *)(*(_QWORD *)a2 + 24 * v14), v15);
      if (v12 >= 0)
        v11 = v10;
      else
        v11 = -v10;
      if (v9 <= v11)
        v9 = v11;
      ++v7;
      v8 -= 4;
    }
    while (v8);
    v3 = *(_DWORD *)(a1 + 60);
    v4 = *(uint64_t **)(a1 + 48);
  }
  else
  {
    v9 = 0x8000000000000000;
  }
  if (v3 == 9)
    v20 = v4;
  else
    v20 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  v21 = *((_DWORD *)v20 + 9);
  if (~v21 <= v21)
    v22 = v21;
  else
    v22 = ~v21;
  v23 = v22;
  v24 = (_QWORD *)(*(_QWORD *)a2 + 24 * v22);
  if (v21 < 0)
    operations_research::Domain::Domain(v30, -v9);
  else
    operations_research::Domain::Domain(v30, v9);
  operations_research::Domain::IntersectionWith(v24, (const operations_research::Domain *)v30, &v31);
  v25 = (unint64_t *)(*(_QWORD *)a2 + 24 * v23);
  if (v25 == &v31)
  {
    if ((v31 & 1) != 0)
      operator delete(__p[0]);
  }
  else
  {
    v26 = (void **)(v25 + 1);
    if ((*(_BYTE *)v25 & 1) != 0)
      operator delete(*v26);
    *v25 = v31;
    *(_OWORD *)v26 = *(_OWORD *)__p;
    v31 = 0;
  }
  if (((uint64_t)v30[0] & 1) == 0)
  {
    result = operations_research::Domain::IsEmpty((operations_research::Domain *)(*(_QWORD *)a2 + 24 * v23));
    if (!result)
      return result;
LABEL_44:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v31, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 140);
    v28 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Check failed: !(*domains)[target_var].IsEmpty() ", 48);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v31);
  }
  operator delete(v30[1]);
  result = operations_research::Domain::IsEmpty((operations_research::Domain *)(*(_QWORD *)a2 + 24 * v23));
  if (result)
    goto LABEL_44;
  return result;
}

void sub_22DAC30B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p)
{
  if ((a11 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DAC30D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PostsolveElement(uint64_t a1, const char *a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL IsFixed;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  const char *v16;
  unint64_t *v17;
  void **v18;
  uint64_t *v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  void **v27;
  _BOOL4 v28;
  const char *v29;
  uint64_t v30;
  int v31;
  const char *v32;
  uint64_t *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  void **v50;
  uint64_t *v51[3];
  unint64_t v52;
  void *v53[2];
  int v54;

  if (*(_DWORD *)(a1 + 60) == 14)
    v4 = *(uint64_t **)(a1 + 48);
  else
    v4 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  v6 = *((_DWORD *)v4 + 9);
  v5 = *((_DWORD *)v4 + 10);
  if (~v6 <= v6)
    v7 = *((_DWORD *)v4 + 9);
  else
    v7 = ~v6;
  if (~v5 <= v5)
    v8 = *((_DWORD *)v4 + 10);
  else
    v8 = ~v5;
  v9 = v8;
  IsFixed = operations_research::Domain::IsFixed((operations_research::Domain *)(*(_QWORD *)a2 + 24 * v8), a2);
  v12 = *(_QWORD *)a2;
  v13 = v7;
  if (!IsFixed)
  {
    v14 = operations_research::Domain::IsFixed((operations_research::Domain *)(v12 + 24 * v7), v11);
    v12 = *(_QWORD *)a2;
    if (!v14)
    {
      v15 = operations_research::Domain::Min((operations_research::Domain *)(v12 + 24 * v7), v11);
      operations_research::Domain::Domain(&v52, v15);
      v17 = (unint64_t *)(*(_QWORD *)a2 + 24 * v13);
      if (v17 == &v52)
      {
        if ((v52 & 1) != 0)
          operator delete(v53[0]);
      }
      else
      {
        v18 = (void **)(v17 + 1);
        if ((*(_BYTE *)v17 & 1) != 0)
          operator delete(*v18);
        *v17 = v52;
        *(_OWORD *)v18 = *(_OWORD *)v53;
      }
      if (*(_DWORD *)(a1 + 60) == 14)
        v19 = *(uint64_t **)(a1 + 48);
      else
        v19 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      v20 = -(int)v15;
      if (v6 >= 0)
        v20 = v15;
      v21 = *(_DWORD *)(v19[3] + 4 * v20);
      if (~v21 <= v21)
        v22 = v21;
      else
        v22 = ~v21;
      v23 = operations_research::Domain::IsFixed((operations_research::Domain *)(*(_QWORD *)a2 + 24 * v22), v16);
      v12 = *(_QWORD *)a2;
      if (!v23)
      {
        v24 = 24 * v22;
        v25 = operations_research::Domain::Min((operations_research::Domain *)(v12 + v24), v11);
        operations_research::Domain::Domain(&v52, v25);
        v26 = (unint64_t *)(*(_QWORD *)a2 + v24);
        if (v26 == &v52)
        {
          if ((v52 & 1) != 0)
            operator delete(v53[0]);
        }
        else
        {
          v27 = (void **)(v26 + 1);
          if ((*(_BYTE *)v26 & 1) != 0)
            operator delete(*v27);
          *v26 = v52;
          *(_OWORD *)v27 = *(_OWORD *)v53;
        }
        v12 = *(_QWORD *)a2;
      }
    }
  }
  v28 = operations_research::Domain::IsFixed((operations_research::Domain *)(v12 + 24 * (int)v13), v11);
  v30 = *(_QWORD *)a2;
  if (v28)
  {
    v31 = operations_research::Domain::Min((operations_research::Domain *)(v30 + 24 * (int)v13), v29);
    if (*(_DWORD *)(a1 + 60) == 14)
      v33 = *(uint64_t **)(a1 + 48);
    else
      v33 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    v34 = -v31;
    if (v6 >= 0)
      v34 = v31;
    v35 = *(_DWORD *)(v33[3] + 4 * v34);
    if (~v35 <= v35)
      v36 = *(_DWORD *)(v33[3] + 4 * v34);
    else
      v36 = ~v35;
    v37 = operations_research::Domain::Min((operations_research::Domain *)(*(_QWORD *)a2 + 24 * v36), v32);
    v38 = (_QWORD *)(*(_QWORD *)a2 + 24 * v9);
    if ((v35 ^ v5) >= 0)
      v39 = v37;
    else
      v39 = -v37;
    operations_research::Domain::Domain(v51, v39);
    operations_research::Domain::IntersectionWith(v38, (const operations_research::Domain *)v51, &v52);
    v40 = (unint64_t *)(*(_QWORD *)a2 + 24 * v9);
    goto LABEL_61;
  }
  v42 = operations_research::Domain::Min((operations_research::Domain *)(v30 + 24 * v9), v29);
  v43 = 0;
  while (*(_DWORD *)(a1 + 60) == 14)
  {
    v44 = *(uint64_t **)(a1 + 48);
    if (v43 >= *((int *)v44 + 4))
      goto LABEL_56;
LABEL_50:
    v45 = *(_DWORD *)(v44[3] + 4 * v43);
    if (~v45 <= v45)
      v46 = *(_DWORD *)(v44[3] + 4 * v43);
    else
      v46 = ~v45;
    v47 = operations_research::Domain::Min((operations_research::Domain *)(*(_QWORD *)a2 + 24 * v46), v41);
    if ((v45 ^ v5) < 0)
    {
      if (v47 == -v42)
        goto LABEL_57;
    }
    else if (v47 == v42)
    {
      goto LABEL_57;
    }
    ++v43;
  }
  v44 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  if (v43 < (int)qword_25408ADE0)
    goto LABEL_50;
LABEL_56:
  LODWORD(v43) = -1;
  LODWORD(v52) = -1;
  v54 = -1;
  v51[0] = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v52, (int)&v54, "selected_index_value != -1");
  if (v51[0])
  {
    google::LogMessageFatal::LogMessageFatal(&v52, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 201, v51);
    google::LogMessage::stream((google::LogMessage *)&v52);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v52);
  }
LABEL_57:
  v48 = (_QWORD *)(*(_QWORD *)a2 + 24 * (int)v13);
  if ((int)v13 >= 0)
    v49 = v43;
  else
    v49 = -(int)v43;
  operations_research::Domain::Domain(v51, v49);
  operations_research::Domain::IntersectionWith(v48, (const operations_research::Domain *)v51, &v52);
  v40 = (unint64_t *)(*(_QWORD *)a2 + 24 * (int)v13);
LABEL_61:
  if (v40 == &v52)
  {
    if ((v52 & 1) != 0)
      operator delete(v53[0]);
  }
  else
  {
    v50 = (void **)(v40 + 1);
    if ((*(_BYTE *)v40 & 1) != 0)
      operator delete(*v50);
    *v40 = v52;
    *(_OWORD *)v50 = *(_OWORD *)v53;
    v52 = 0;
  }
  if (((uint64_t)v51[0] & 1) != 0)
    operator delete(v51[1]);
}

void sub_22DAC34C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAC34C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p)
{
  if ((a10 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PostsolveResponse(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v4;
  BOOL v5;
  const char *v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  _BYTE *v21;
  void **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  operations_research::Domain *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  char *v49;
  void **v50;
  void *v51;
  void **v52;
  char v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int *v58;
  unint64_t v60;
  std::string v61;
  uint64_t *v62[2];
  void *v63;
  __n128 __p;
  void *v65;
  char *v66;

  v4 = *(_DWORD *)(a4 + 152);
  v5 = v4 == 4 || v4 == 2;
  if (v5 && *(_DWORD *)(a4 + 16) == (a3[1] - *a3) >> 2)
  {
    v58 = (unsigned int *)(a4 + 16);
    std::vector<operations_research::Domain>::vector(&v65, *(int *)(a2 + 24));
    v11 = *a3;
    if (a3[1] != *a3)
    {
      v12 = 0;
      while (1)
      {
        v13 = *(int *)(v11 + 4 * v12);
        LODWORD(v62[0]) = v13;
        v63 = (void *)(0xAAAAAAAAAAAAAAABLL * ((v66 - (_BYTE *)v65) >> 3));
        if ((unint64_t)v63 < v13)
        {
          v61.__r_.__value_.__r.__words[0] = google::MakeCheckOpString<int,unsigned long>((int)v62, (int)&v63, "postsolve_mapping[i] <= domains.size()");
          if (v61.__r_.__value_.__r.__words[0])
            break;
        }
        operations_research::Domain::Domain(&v63, *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * v12));
        v14 = (void **)((char *)v65 + 24 * *(int *)(*a3 + 4 * v12));
        if (v14 == &v63)
        {
          if ((v63 & 1) != 0)
            operator delete((void *)__p.n128_u64[0]);
        }
        else
        {
          v15 = v14 + 1;
          if ((*(_BYTE *)v14 & 1) != 0)
            operator delete(*v15);
          *v14 = v63;
          v10 = __p;
          *(__n128 *)v15 = __p;
        }
        ++v12;
        v11 = *a3;
        if (v12 >= (a3[1] - *a3) >> 2)
          goto LABEL_20;
      }
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&v63, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 222, (uint64_t **)&v61);
      google::LogMessage::stream((google::LogMessage *)&v63);
LABEL_84:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v63);
    }
LABEL_20:
    v16 = v66;
    if (v66 != v65)
    {
      v17 = 0;
      v18 = 0;
      v16 = (char *)v65;
      while (1)
      {
        if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v16[v17]))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v18 + 8);
          operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v20 + 24), *(int *)(v20 + 16), (unint64_t *)&v63, v19);
          v21 = (char *)v65 + v17;
          if ((char *)v65 + v17 == (char *)&v63)
          {
            if ((v63 & 1) != 0)
              operator delete((void *)__p.n128_u64[0]);
          }
          else
          {
            v22 = (void **)(v21 + 8);
            if ((*v21 & 1) != 0)
              operator delete(*v22);
            *(_QWORD *)v21 = v63;
            *(__n128 *)v22 = __p;
          }
        }
        if (operations_research::Domain::IsEmpty((operations_research::Domain *)((char *)v65 + v17)))
          break;
        ++v18;
        v16 = (char *)v65;
        v23 = v66;
        v17 += 24;
        if (0xAAAAAAAAAAAAAAABLL * ((v66 - (_BYTE *)v65) >> 3) <= v18)
          goto LABEL_33;
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v63, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 229);
      v54 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Check failed: !domains[i].IsEmpty() ", 36);
      goto LABEL_84;
    }
    v23 = v66;
LABEL_33:
    v24 = *(_QWORD *)(a2 + 120);
    if ((_UNKNOWN *)a2 != &operations_research::sat::_CpModelProto_default_instance_ && v24)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v63, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 236);
      v55 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: !mapping_proto.has_objective() ", 45);
      goto LABEL_84;
    }
    v63 = 0;
    __p = 0uLL;
    v25 = v23 - v16;
    if (v25)
    {
      if (v25 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v26 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 3);
      v63 = operator new(8 * (((v26 - 1) >> 6) + 1));
      __p.n128_u64[0] = 0;
      __p.n128_u64[1] = ((v26 - 1) >> 6) + 1;
      std::vector<BOOL>::__construct_at_end[abi:ne180100](&v63, v26, 1);
      v24 = *(_QWORD *)(a2 + 120);
    }
    if ((_UNKNOWN *)a2 != &operations_research::sat::_CpModelProto_default_instance_)
    {
      if (v24)
      {
        v27 = *(unsigned int *)(v24 + 16);
        if ((int)v27 >= 1)
        {
          v28 = 0;
          v29 = *(_QWORD *)(v24 + 24);
          v30 = *(_QWORD *)(v24 + 48);
          v31 = v63;
          do
          {
            while (1)
            {
              v32 = *(int *)(v29 + 4 * v28) >= 0 ? *(_QWORD *)(v30 + 8 * v28) : -*(_QWORD *)(v30 + 8 * v28);
              v33 = v28 >> 6;
              v34 = 1 << v28;
              if (v32 < 0)
                break;
              v31[v33] |= v34;
              if (v27 == ++v28)
                goto LABEL_48;
            }
            v31[v33] &= ~v34;
            ++v28;
          }
          while (v27 != v28);
        }
      }
    }
LABEL_48:
    v35 = *(unsigned int *)(a2 + 48);
    if ((int)v35 >= 1)
    {
      do
      {
        v37 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v35 - 1) + 8);
        v38 = *(int *)(v37 + 16);
        if ((_DWORD)v38)
        {
          v39 = *(int **)(v37 + 24);
          v40 = 4 * v38;
          while (1)
          {
            v41 = *v39;
            v42 = ~(_DWORD)v41 <= (int)v41 ? *v39 : ~(_DWORD)v41;
            if (operations_research::Domain::Min((operations_research::Domain *)((char *)v65 + 24 * v42), v9) == v41 >> 31)
              break;
            ++v39;
            v40 -= 4;
            if (!v40)
              goto LABEL_59;
          }
        }
        else
        {
LABEL_59:
          switch(*(_DWORD *)(v37 + 60))
          {
            case 3:
              operations_research::sat::PostsolveClause(v37, (const char *)&v65);
              break;
            case 9:
              operations_research::sat::PostsolveIntMax(v37, (const char *)&v65);
              break;
            case 0xC:
              operations_research::sat::PostsolveLinear(v37, (const char *)&v63, &v65, v10);
              break;
            case 0xE:
              operations_research::sat::PostsolveElement(v37, (const char *)&v65);
              break;
            default:
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v62, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 283);
              v56 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v62);
              v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Unsupported constraint: ", 24);
              google::protobuf::Message::ShortDebugString((google::protobuf::Message *)v37, (uint64_t)&v61);
              std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v57, (uint64_t)&v61);
              std::string::~string(&v61);
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v62);
          }
        }
      }
      while (v35-- > 1);
    }
    *v58 = 0;
    v60 = 0xAAAAAAAAAAAAAAABLL * ((v66 - (_BYTE *)v65) >> 3);
    v61.__r_.__value_.__r.__words[0] = a1;
    if (v60 < a1)
    {
      v62[0] = (uint64_t *)google::MakeCheckOpString<long long,unsigned long>((int)&v61, (int)&v60, "num_variables_in_original_model <= domains.size()");
      if (v62[0])
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)&v61, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_postsolve.cc", 289, v62);
        google::LogMessage::stream((google::LogMessage *)&v61);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v61);
      }
    }
    if (a1 >= 1)
    {
      v43 = 0;
      v44 = 0;
      while (1)
      {
        v45 = (operations_research::Domain *)((char *)v65 + v43);
        if (((*(_QWORD *)((char *)v63 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
          break;
        v46 = operations_research::Domain::Min(v45, v9);
        v47 = *(_DWORD *)(a4 + 16);
        v48 = v47 + 1;
        if (v47 == *(_DWORD *)(a4 + 20))
          goto LABEL_69;
LABEL_66:
        *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * v47) = v46;
        *(_DWORD *)(a4 + 16) = v48;
        ++v44;
        v43 += 24;
        if (a1 == v44)
          goto LABEL_72;
      }
      v46 = operations_research::Domain::Max(v45, v9);
      v47 = *(_DWORD *)(a4 + 16);
      v48 = v47 + 1;
      if (v47 != *(_DWORD *)(a4 + 20))
        goto LABEL_66;
LABEL_69:
      google::protobuf::RepeatedField<long long>::Reserve(v58, v47 + 1);
      goto LABEL_66;
    }
LABEL_72:
    if (v63)
      operator delete(v63);
    v49 = (char *)v65;
    if (v65)
    {
      v50 = (void **)v66;
      v51 = v65;
      if (v66 != v65)
      {
        v52 = (void **)v66;
        do
        {
          v53 = *((_BYTE *)v52 - 24);
          v52 -= 3;
          if ((v53 & 1) != 0)
            operator delete(*(v50 - 2));
          v50 = v52;
        }
        while (v52 != (void **)v49);
        v51 = v65;
      }
      v66 = v49;
      operator delete(v51);
    }
  }
}

void sub_22DAC3B30(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAC3B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23)
{
  if (__p)
  {
    operator delete(__p);
    std::vector<operations_research::Domain>::~vector[abi:ne180100](&a23);
    _Unwind_Resume(a1);
  }
  std::vector<operations_research::Domain>::~vector[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<operations_research::Domain>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = 24 * a2;
    v5 = operator new(24 * a2);
    *a1 = v5;
    a1[1] = v5;
    v6 = &v5[3 * a2];
    a1[2] = v6;
    if ((unint64_t)(v4 - 24) >= 0x18)
    {
      v8 = (v4 - 24) / 0x18uLL + 1;
      v7 = &v5[3 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
      v9 = v8 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *v5 = 0;
        v5[3] = 0;
        v5 += 6;
        v9 -= 2;
      }
      while (v9);
      if (v8 == (v8 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_9;
    }
    else
    {
      v7 = v5;
    }
    do
    {
      *v7 = 0;
      v7 += 3;
    }
    while (v7 != v6);
LABEL_9:
    a1[1] = v6;
  }
  return a1;
}

void sub_22DAC3D28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    std::vector<operations_research::Domain>::vector((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<operations_research::Domain>::__push_back_slow_path<operations_research::Domain>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  uint64_t v13;
  void **v14;
  char v15;
  uint64_t v17;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v17 = (uint64_t)&v9[24 * v5];
  v10 = &v9[24 * v8];
  *(_QWORD *)v17 = *(_QWORD *)a2;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>>((uint64_t)(a1 + 2), v4, v4, v3, v3, v17, v17);
  v12 = (void **)*a1;
  v11 = (void **)a1[1];
  *a1 = v13;
  a1[1] = v17 + 24;
  a1[2] = (uint64_t)v10;
  if (v11 != v12)
  {
    v14 = v11;
    do
    {
      v15 = *((_BYTE *)v14 - 24);
      v14 -= 3;
      if ((v15 & 1) != 0)
        operator delete(*(v11 - 2));
      v11 = v14;
    }
    while (v14 != v12);
  }
  if (v12)
    operator delete(v12);
  return v17 + 24;
}

void sub_22DAC3EA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<operations_research::Domain>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<operations_research::Domain>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 24;
      *(_QWORD *)(a1 + 16) = v2 - 24;
      if ((*(_BYTE *)(v2 - 24) & 1) != 0)
      {
        operator delete(*(void **)(v2 - 16));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v18;
  uint64_t v19;

  v7 = a7;
  v18 = a6;
  v19 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    while (1)
    {
      while (1)
      {
        *(_QWORD *)(v7 - 24) = 0;
        v11 = *(_QWORD *)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if ((v11 & 1) != 0)
          break;
        *(_QWORD *)(v7 - 24) = v10;
        *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
        v7 = v19 - 24;
        v19 -= 24;
        a3 = v9;
        if (v9 == a5)
          return v18;
      }
      v12 = *(__int128 **)(a3 - 16);
      v13 = v10 >> 1;
      if (v10 >= 4)
        break;
      if (v10 >= 2)
      {
        v14 = (_OWORD *)(v7 - 16);
        do
        {
LABEL_11:
          v16 = *v12++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        v15 = *(_QWORD *)(v7 - 24);
        goto LABEL_13;
      }
      v15 = 0;
LABEL_13:
      *(_QWORD *)(v7 - 24) = v15 + (v10 & 0xFFFFFFFFFFFFFFFELL);
      v7 = v19 - 24;
      v19 -= 24;
      a3 = v9;
      if (v9 == a5)
        return v18;
    }
    if (v10 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = operator new(16 * v13);
    *(_QWORD *)(v7 - 16) = v14;
    *(_QWORD *)(v7 - 8) = v13;
    *(_QWORD *)(v7 - 24) = 1;
    goto LABEL_11;
  }
  return a6;
}

void sub_22DAC4050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if ((*(_BYTE *)(v9 - 24) & 1) != 0)
    operator delete(*(void **)(v9 - 16));
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if ((*(_BYTE *)v3 & 1) != 0)
        operator delete(*(void **)(v3 + 8));
      v3 += 24;
    }
  }
  return a1;
}

uint64_t google::MakeCheckOpString<long long,unsigned long>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DAC4140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  google::protobuf::Message *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  google::protobuf::internal *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  operations_research::sat::ConstraintProto *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  void *v33;
  char *v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
  v3 = *(int *)(v2 + 48);
  v33 = 0;
  v34 = 0;
  __p = 0;
  if (!(_DWORD)v3)
    goto LABEL_19;
  if ((v3 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v4 = (char *)operator new(4 * v3);
  v5 = &v4[4 * v3];
  __p = v4;
  v34 = v5;
  memset(v4, 255, 4 * v3);
  v7 = 0;
  v8 = 0;
  v33 = v5;
  do
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 56);
    v10 = *(_QWORD *)(v9 + 8 * v7 + 8);
    v11 = *(_DWORD *)(v10 + 60);
    if (!v11)
      goto LABEL_5;
    if (v11 == 19)
      *((_DWORD *)__p + v7) = v8;
    v12 = *(google::protobuf::internal **)(v9 + 8 * v8 + 8);
    if ((google::protobuf::internal *)v10 != v12)
    {
      v13 = *((_QWORD *)v12 + 1);
      v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      if ((v13 & 1) != 0)
      {
        v14 = (_QWORD *)*v14;
        v17 = *(_QWORD *)(v10 + 8);
        v16 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) == 0)
        {
LABEL_12:
          if (v14 == v16)
            goto LABEL_4;
LABEL_13:
          google::protobuf::internal::GenericSwap(v12, (google::protobuf::Message *)v10, v6);
          ++v8;
          goto LABEL_5;
        }
      }
      else
      {
        v15 = *(_QWORD *)(v10 + 8);
        v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        if ((v15 & 1) == 0)
          goto LABEL_12;
      }
      if (v14 == (_QWORD *)*v16)
      {
LABEL_4:
        operations_research::sat::ConstraintProto::InternalSwap((__n128 *)v12, (__n128 *)v10);
        ++v8;
        goto LABEL_5;
      }
      goto LABEL_13;
    }
    ++v8;
LABEL_5:
    ++v7;
  }
  while (v3 != v7);
  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
  v18 = (v3 - v8);
  if ((int)v18 < 1)
  {
LABEL_19:
    v19 = *(_QWORD *)(v2 + 56);
    if (v19)
      v20 = (uint64_t *)(v19 + 8);
    else
      v20 = 0;
    v21 = *(int *)(v2 + 48);
    if (!(_DWORD)v21)
      goto LABEL_44;
LABEL_37:
    v28 = 8 * v21;
    while (2)
    {
      v31 = *v20;
      v35[0] = &off_24F9842C8;
      v35[1] = &__p;
      v36 = v35;
      operations_research::sat::ApplyToAllIntervalIndices((uint64_t)v35, v31);
      v29 = v36;
      if (v36 != v35)
      {
        if (v36)
        {
          v30 = 5;
LABEL_39:
          (*(void (**)(void))(*v29 + 8 * v30))();
        }
        ++v20;
        v28 -= 8;
        if (!v28)
          goto LABEL_44;
        continue;
      }
      break;
    }
    v29 = v35;
    v30 = 4;
    goto LABEL_39;
  }
  v22 = 8 * v8 + 8;
  v23 = v18;
  do
  {
    v24 = *(operations_research::sat::ConstraintProto **)(*(_QWORD *)(v2 + 56) + v22);
    if (v24)
      v25 = *(_QWORD *)(v2 + 40) == 0;
    else
      v25 = 0;
    if (v25)
    {
      operations_research::sat::ConstraintProto::~ConstraintProto(v24);
      MEMORY[0x22E31DF78]();
    }
    v22 += 8;
    --v23;
  }
  while (v23);
  google::protobuf::internal::RepeatedPtrFieldBase::CloseGap(v2 + 40, v8, v18);
  v26 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
  v27 = *(_QWORD *)(v26 + 56);
  if (v27)
    v20 = (uint64_t *)(v27 + 8);
  else
    v20 = 0;
  v21 = *(int *)(v26 + 48);
  if ((_DWORD)v21)
    goto LABEL_37;
LABEL_44:
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
}

void sub_22DAC4400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::CpModelPresolver::PresolveEnforcementLiteral(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v4;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  const char *v9;
  _BOOL4 IsTrue;
  uint64_t v11;
  _BOOL4 IsFalse;
  uint64_t v13;
  _BOOL4 IsUniqueAndRemovable;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *__p;
  __int128 v22;

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504))
    return 0;
  v4 = *((int *)a2 + 4);
  if (!(_DWORD)v4)
    return 0;
  v6 = 0;
  v7 = (unsigned int *)*((_QWORD *)a2 + 3);
  v8 = 4 * v4;
  do
  {
    v9 = (const char *)*v7;
    IsTrue = operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)this + 2), v9);
    v11 = *((_QWORD *)this + 2);
    if (IsTrue)
    {
      __p = operator new(0x20uLL);
      v22 = xmmword_22DCE6650;
      strcpy((char *)__p, "true enforcement literal");
      operations_research::sat::PresolveContext::UpdateRuleStats(v11, (uint64_t)&__p);
      if (SHIBYTE(v22) < 0)
        operator delete(__p);
    }
    else
    {
      IsFalse = operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)this + 2), v9);
      v13 = *((_QWORD *)this + 2);
      if (IsFalse)
      {
        __p = operator new(0x20uLL);
        v22 = xmmword_22DCE6540;
        strcpy((char *)__p, "false enforcement literal");
        operations_research::sat::PresolveContext::UpdateRuleStats(v13, (uint64_t)&__p);
        if (SHIBYTE(v22) < 0)
          operator delete(__p);
LABEL_30:
        operations_research::sat::ConstraintProto::Clear(a2);
        return 1;
      }
      IsUniqueAndRemovable = operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), (int)v9);
      v15 = *((_QWORD *)this + 2);
      if (IsUniqueAndRemovable)
      {
        __p = operator new(0x20uLL);
        v22 = xmmword_22DCE65A0;
        strcpy((char *)__p, "enforcement literal not used");
        operations_research::sat::PresolveContext::UpdateRuleStats(v15, (uint64_t)&__p);
        if (SHIBYTE(v22) < 0)
          operator delete(__p);
        if ((operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)this + 2), v9) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 111);
          v20 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: context_->SetLiteralToFalse(literal) ", 51);
LABEL_32:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
        }
        goto LABEL_30;
      }
      if (operations_research::sat::PresolveContext::VariableWithCostIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), (int)v9))
      {
        v16 = (uint64_t *)(*((_QWORD *)this + 2) + 536);
        v17 = ~(_DWORD)v9 <= (int)v9 ? (int)v9 : ~(_DWORD)v9;
        LODWORD(__p) = v17;
        if ((int)v9 >= 0 != *(_QWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>(v16, (int *)&__p) < 1)
        {
          v18 = *((_QWORD *)this + 2);
          __p = operator new(0x30uLL);
          v22 = xmmword_22DCE6560;
          strcpy((char *)__p, "enforcement literal with unique direction");
          operations_research::sat::PresolveContext::UpdateRuleStats(v18, (uint64_t)&__p);
          if (SHIBYTE(v22) < 0)
            operator delete(__p);
          if ((operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)this + 2), v9) & 1) == 0)
          {
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 124);
            v19 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: context_->SetLiteralToFalse(literal) ", 51);
            goto LABEL_32;
          }
          goto LABEL_30;
        }
      }
      *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v6++) = (_DWORD)v9;
    }
    ++v7;
    v8 -= 4;
  }
  while (v8);
  if (*((int *)a2 + 4) >= 1)
    *((_DWORD *)a2 + 4) = v6;
  return v6 != (_DWORD)v4;
}

void sub_22DAC4774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DAC479C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAC47A4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  _BYTE v17[16];

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  v5 = *a1;
  v6 = a1[1];
  v7 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v10 = v7 & v8;
    v11 = *(_QWORD *)(v5 + v10);
    v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12)
      break;
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      goto LABEL_9;
    v2 += 8;
    v7 = v2 + v10;
  }
  while (1)
  {
    v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    if (*(_DWORD *)(v6 + 16 * v13) == (_DWORD)v3)
      break;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_5;
  }
  if (v13 == v8)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
  }
  return v6 + 16 * v13 + 8;
}

void sub_22DAC48E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveBoolXor(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  char v3;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  _BOOL4 v13;
  operations_research::sat::PresolveContext *v14;
  _BOOL4 IsFalse;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::Arena *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::Arena *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  google::protobuf::Arena **v28;
  unsigned int v29;
  int v30;
  uint64_t *v31;
  void *__p;
  __int128 v33;

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504) || *((_DWORD *)a2 + 4))
  {
    v3 = 0;
    return v3 & 1;
  }
  if (*((_DWORD *)a2 + 15) != 5)
  {
    v6 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    v7 = (int)qword_25408AA70;
    if ((_DWORD)qword_25408AA70)
      goto LABEL_7;
LABEL_35:
    v8 = 0;
    v3 = 0;
    goto LABEL_46;
  }
  v6 = (uint64_t *)*((_QWORD *)a2 + 6);
  v7 = *((int *)v6 + 4);
  if (!(_DWORD)v7)
    goto LABEL_35;
LABEL_7:
  v8 = 0;
  v30 = 0;
  v3 = 0;
  v9 = (int *)v6[3];
  v10 = 4 * v7;
  v29 = 0x80000000;
  do
  {
    v11 = (const char *)*v9;
    if (operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), *v9)&& (v12 = *((_QWORD *)this + 2), __p = operator new(0x28uLL), v33 = xmmword_22DCE5C10, strcpy((char *)__p, "TODO BOOL_xor: remove constraint"), operations_research::sat::PresolveContext::UpdateRuleStats(v12, (uint64_t)&__p), SHIBYTE(v33) < 0))
    {
      operator delete(__p);
      IsFalse = operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)this + 2), v11);
      v14 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
      if (IsFalse)
      {
LABEL_13:
        __p = operator new(0x20uLL);
        v33 = xmmword_22DCE5C00;
        strcpy((char *)__p, "BOOL_xor: remove false literal");
        operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v14, (uint64_t)&__p);
        if (SHIBYTE(v33) < 0)
          operator delete(__p);
        v3 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      v13 = operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)this + 2), v11);
      v14 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
      if (v13)
        goto LABEL_13;
    }
    if (operations_research::sat::PresolveContext::LiteralIsTrue(v14, v11))
    {
      ++v30;
      v29 = v11;
    }
    else
    {
      if (*((_DWORD *)a2 + 15) == 5)
      {
        v16 = *((_QWORD *)a2 + 6);
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 5;
        v17 = *((_QWORD *)a2 + 1);
        v18 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) != 0)
          v18 = *(google::protobuf::Arena **)v18;
        v16 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v18);
        *((_QWORD *)a2 + 6) = v16;
      }
      *(_DWORD *)(*(_QWORD *)(v16 + 24) + 4 * v8++) = (_DWORD)v11;
    }
LABEL_9:
    ++v9;
    v10 -= 4;
  }
  while (v10);
  if (v8 == 1)
  {
    v21 = *((_QWORD *)this + 2);
    __p = operator new(0x28uLL);
    v33 = xmmword_22DCED9C0;
    strcpy((char *)__p, "TODO BOOL_xor: one active literal");
    operations_research::sat::PresolveContext::UpdateRuleStats(v21, (uint64_t)&__p);
    v19 = v30;
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
    v8 = 1;
    if ((v30 & 0x80000001) != 1)
      goto LABEL_39;
LABEL_30:
    LODWORD(__p) = v29;
    LODWORD(v31) = 0x80000000;
    if (v29 == 0x80000000)
    {
      v31 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&__p, (int)&v31, "true_literal != kint32min");
      if (v31)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 172, &v31);
        google::LogMessage::stream((google::LogMessage *)&__p);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
      }
    }
    if (*((_DWORD *)a2 + 15) == 5)
    {
      *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 24) + 4 * v8++) = v29;
      if (v19 >= 2)
        goto LABEL_40;
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 5;
      v23 = *((_QWORD *)a2 + 1);
      v24 = (google::protobuf::Arena *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if ((v23 & 1) != 0)
        v24 = *(google::protobuf::Arena **)v24;
      v25 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v24);
      *((_QWORD *)a2 + 6) = v25;
      *(_DWORD *)(*(_QWORD *)(v25 + 24) + 4 * v8++) = v29;
      if (v19 >= 2)
        goto LABEL_40;
    }
  }
  else
  {
    v19 = v30;
    if (v8 == 2)
    {
      v20 = *((_QWORD *)this + 2);
      __p = operator new(0x28uLL);
      v33 = xmmword_22DCEB050;
      strcpy((char *)__p, "TODO BOOL_xor: two active literals");
      operations_research::sat::PresolveContext::UpdateRuleStats(v20, (uint64_t)&__p);
      if (SHIBYTE(v33) < 0)
        operator delete(__p);
      v8 = 2;
    }
    if ((v30 & 0x80000001) == 1)
      goto LABEL_30;
LABEL_39:
    if (v19 >= 2)
    {
LABEL_40:
      v22 = *((_QWORD *)this + 2);
      __p = operator new(0x30uLL);
      v33 = xmmword_22DCED9D0;
      strcpy((char *)__p, "BOOL_xor: remove even number of true literals");
      operations_research::sat::PresolveContext::UpdateRuleStats(v22, (uint64_t)&__p);
      if (SHIBYTE(v33) < 0)
        operator delete(__p);
      v3 = 1;
    }
  }
LABEL_46:
  if (*((_DWORD *)a2 + 15) == 5)
  {
    v26 = *((_QWORD *)a2 + 6);
    if (*(int *)(v26 + 16) < 1)
      return v3 & 1;
LABEL_51:
    *(_DWORD *)(v26 + 16) = v8;
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 5;
    v27 = *((_QWORD *)a2 + 1);
    v28 = (google::protobuf::Arena **)(v27 & 0xFFFFFFFFFFFFFFFELL);
    if ((v27 & 1) != 0)
    {
      v26 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v28);
      *((_QWORD *)a2 + 6) = v26;
      if (*(int *)(v26 + 16) < 1)
        return v3 & 1;
      goto LABEL_51;
    }
    v26 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v28);
    *((_QWORD *)a2 + 6) = v26;
    if (*(int *)(v26 + 16) >= 1)
      goto LABEL_51;
  }
  return v3 & 1;
}

void sub_22DAC4D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAC4DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveBoolOr(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v2;
  char IsUnsat;
  operations_research::sat::CpModelPresolver *v6;
  uint64_t v7;
  int *v8;
  uint64_t i;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  google::protobuf::Arena *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  unsigned int *v23;
  unsigned int *v24;
  const char *v25;
  _BOOL4 IsTrue;
  operations_research::sat::PresolveContext *v27;
  _BOOL4 IsUniqueAndRemovable;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t j;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t k;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _DWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int *v87;
  int v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  google::protobuf::Arena *v94;
  uint64_t v95;
  google::protobuf::Arena *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  operations_research::sat::ConstraintProto *v101;
  operations_research::sat::CpModelPresolver *v102;
  unint64_t v103;
  void *__p[4];

  v2 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v2 + 504))
    goto LABEL_2;
  v6 = this;
  v100 = (unsigned int *)((char *)a2 + 16);
  if (*((_DWORD *)a2 + 4))
  {
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_22DCE7540;
    strcpy((char *)__p[0], "BOOL_or: removed enforcement literal");
    operations_research::sat::PresolveContext::UpdateRuleStats(v2, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v7 = *((int *)a2 + 4);
    if ((_DWORD)v7)
    {
      v8 = (int *)*((_QWORD *)a2 + 3);
      for (i = 4 * v7; i; i -= 4)
      {
        v10 = *v8;
        if (*((_DWORD *)a2 + 15) == 3)
        {
          v11 = *((_QWORD *)a2 + 6);
          v13 = *(unsigned int *)(v11 + 16);
          v12 = (unsigned int *)(v11 + 16);
          v14 = v13 + 1;
          if ((_DWORD)v13 != *(_DWORD *)(v11 + 20))
            goto LABEL_10;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 3;
          v15 = *((_QWORD *)a2 + 1);
          v16 = (google::protobuf::Arena *)(v15 & 0xFFFFFFFFFFFFFFFELL);
          if ((v15 & 1) != 0)
            v16 = *(google::protobuf::Arena **)v16;
          v11 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v16);
          *((_QWORD *)a2 + 6) = v11;
          v13 = *(unsigned int *)(v11 + 16);
          v12 = (unsigned int *)(v11 + 16);
          v14 = v13 + 1;
          if ((_DWORD)v13 != *(_DWORD *)(v11 + 20))
            goto LABEL_10;
        }
        google::protobuf::RepeatedField<int>::Reserve(v12, v14);
LABEL_10:
        *(_DWORD *)(*(_QWORD *)(v11 + 24) + 4 * v13) = ~v10;
        *(_DWORD *)(v11 + 16) = v14;
        ++v8;
      }
    }
    *v100 = 0;
    v2 = *((_QWORD *)v6 + 2);
  }
  *(_QWORD *)(v2 + 136) = *(_QWORD *)(v2 + 128);
  v17 = *(_QWORD *)(v2 + 224);
  if (v17 < 0x80)
  {
    if (v17)
    {
      *(_QWORD *)(v2 + 216) = 0;
      memset(*(void **)(v2 + 200), 128, v17 + 8);
      *(_BYTE *)(*(_QWORD *)(v2 + 200) + *(_QWORD *)(v2 + 224)) = -1;
      v17 = *(_QWORD *)(v2 + 224);
      v18 = v17 - (v17 >> 3);
      if (v17 == 7)
        v18 = 6;
      *(_QWORD *)(v2 + 240) = v18 - *(_QWORD *)(v2 + 216);
    }
  }
  else
  {
    operator delete(*(void **)(v2 + 200));
    v17 = 0;
    *(_QWORD *)(v2 + 240) = 0;
    *(_QWORD *)(v2 + 200) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(v2 + 208) = 0;
    *(_QWORD *)(v2 + 216) = 0;
    *(_QWORD *)(v2 + 224) = 0;
  }
  v19 = *(unint64_t **)(v2 + 232);
  if (!v19)
  {
    if (*((_DWORD *)a2 + 15) == 3)
      goto LABEL_27;
LABEL_88:
    v20 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    v101 = a2;
    v21 = (int)qword_25408AA70;
    if ((_DWORD)qword_25408AA70)
      goto LABEL_28;
LABEL_89:
    v22 = 0;
    v72 = *((_QWORD *)v6 + 2);
    v73 = *(_QWORD *)(v72 + 224);
    if (v73 < 0x80)
      goto LABEL_90;
LABEL_78:
    operator delete(*(void **)(v72 + 200));
    v73 = 0;
    *(_QWORD *)(v72 + 240) = 0;
    *(_QWORD *)(v72 + 200) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(v72 + 208) = 0;
    *(_QWORD *)(v72 + 216) = 0;
    *(_QWORD *)(v72 + 224) = 0;
    v74 = (uint64_t)v101;
LABEL_94:
    v76 = *(unint64_t **)(v72 + 232);
    if (v76)
    {
      v76[1] = 0;
      *v76 = v73;
      v76[4] = 0;
      v76[2] = 0;
      v77 = *((_QWORD *)v6 + 2);
      v78 = *(_QWORD *)(v77 + 128);
      v79 = *(_QWORD *)(v77 + 136);
      if (v78 != v79)
        goto LABEL_96;
    }
    else
    {
      v77 = *((_QWORD *)v6 + 2);
      v78 = *(_QWORD *)(v77 + 128);
      v79 = *(_QWORD *)(v77 + 136);
      if (v78 != v79)
      {
LABEL_96:
        v80 = (v79 - v78) >> 2;
        if (v80 == 2)
        {
          HIBYTE(__p[2]) = 21;
          strcpy((char *)__p, "BOOL_or: implications");
          operations_research::sat::PresolveContext::UpdateRuleStats(v77, (uint64_t)__p);
          v81 = v22;
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v82 = ~**(_DWORD **)(*((_QWORD *)v6 + 2) + 128);
          v83 = *(unsigned int *)(v74 + 16);
          if ((_DWORD)v83 == *(_DWORD *)(v74 + 20))
            google::protobuf::RepeatedField<int>::Reserve(v100, v83 + 1);
          *(_DWORD *)(*(_QWORD *)(v74 + 24) + 4 * v83) = v82;
          *(_DWORD *)(v74 + 16) = v83 + 1;
          if (*(_DWORD *)(v74 + 60) == 4)
          {
            v84 = *(_QWORD *)(v74 + 48);
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v74);
            *(_DWORD *)(v74 + 60) = 4;
            v95 = *(_QWORD *)(v74 + 8);
            v96 = (google::protobuf::Arena *)(v95 & 0xFFFFFFFFFFFFFFFELL);
            if ((v95 & 1) != 0)
              v96 = *(google::protobuf::Arena **)v96;
            v84 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v96);
            *(_QWORD *)(v74 + 48) = v84;
          }
          v97 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 2) + 128) + 4);
          v98 = *(unsigned int *)(v84 + 16);
          if ((_DWORD)v98 == *(_DWORD *)(v84 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v84 + 16), v98 + 1);
          *(_DWORD *)(*(_QWORD *)(v84 + 24) + 4 * v98) = v97;
          *(_DWORD *)(v84 + 16) = v98 + 1;
          IsUnsat = v81;
          return IsUnsat & 1;
        }
        if (v80 == 1)
        {
          __p[0] = operator new(0x20uLL);
          *(_OWORD *)&__p[1] = xmmword_22DCE6540;
          strcpy((char *)__p[0], "BOOL_or: only one literal");
          operations_research::sat::PresolveContext::UpdateRuleStats(v77, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          if ((operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)v6 + 2), **(_DWORD **)(*((_QWORD *)v6 + 2) + 128)) & 1) == 0)goto LABEL_122;
LABEL_101:
          operations_research::sat::ConstraintProto::Clear((operations_research::sat::ConstraintProto *)v74);
          IsUnsat = 1;
          return IsUnsat & 1;
        }
        if ((v22 & 1) == 0)
        {
LABEL_2:
          IsUnsat = 0;
          return IsUnsat & 1;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "BOOL_or: fixed literals");
        operations_research::sat::PresolveContext::UpdateRuleStats(v77, (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_BOOL_or((operations_research::sat::ConstraintProto *)v74)
                  + 16) = 0;
        v85 = *((_QWORD *)v6 + 2);
        v86 = *(int **)(v85 + 128);
        v87 = *(int **)(v85 + 136);
        if (v86 == v87)
          goto LABEL_122;
        while (1)
        {
          v88 = *v86;
          if (*(_DWORD *)(v74 + 60) == 3)
          {
            v89 = *(_QWORD *)(v74 + 48);
            v91 = *(unsigned int *)(v89 + 16);
            v90 = (unsigned int *)(v89 + 16);
            v92 = v91 + 1;
            if ((_DWORD)v91 != *(_DWORD *)(v89 + 20))
              goto LABEL_114;
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v74);
            *(_DWORD *)(v74 + 60) = 3;
            v93 = *(_QWORD *)(v74 + 8);
            v94 = (google::protobuf::Arena *)(v93 & 0xFFFFFFFFFFFFFFFELL);
            if ((v93 & 1) != 0)
              v94 = *(google::protobuf::Arena **)v94;
            v89 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v94);
            *(_QWORD *)(v74 + 48) = v89;
            v91 = *(unsigned int *)(v89 + 16);
            v90 = (unsigned int *)(v89 + 16);
            v92 = v91 + 1;
            if ((_DWORD)v91 != *(_DWORD *)(v89 + 20))
              goto LABEL_114;
          }
          google::protobuf::RepeatedField<int>::Reserve(v90, v92);
LABEL_114:
          *(_DWORD *)(*(_QWORD *)(v89 + 24) + 4 * v91) = v88;
          *(_DWORD *)(v89 + 16) = v92;
          ++v86;
          IsUnsat = 1;
          if (v86 == v87)
            return IsUnsat & 1;
        }
      }
    }
    HIBYTE(__p[2]) = 14;
    strcpy((char *)__p, "BOOL_or: empty");
    operations_research::sat::PresolveContext::UpdateRuleStats(v77, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v99 = *((_QWORD *)v6 + 2);
    HIBYTE(__p[2]) = 0;
    LOBYTE(__p[0]) = 0;
    IsUnsat = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v99, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return IsUnsat & 1;
  }
  v19[1] = 0;
  *v19 = v17;
  v19[4] = 0;
  v19[2] = 0;
  if (*((_DWORD *)a2 + 15) != 3)
    goto LABEL_88;
LABEL_27:
  v20 = (uint64_t *)*((_QWORD *)a2 + 6);
  v101 = a2;
  v21 = *((int *)v20 + 4);
  if (!(_DWORD)v21)
    goto LABEL_89;
LABEL_28:
  v22 = 0;
  v23 = (unsigned int *)v20[3];
  v24 = &v23[v21];
  v102 = v6;
  while (1)
  {
    v25 = (const char *)*v23;
    if (operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)v6 + 2), v25))
    {
      goto LABEL_29;
    }
    IsTrue = operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v6 + 2), v25);
    v27 = (operations_research::sat::PresolveContext *)*((_QWORD *)v6 + 2);
    if (IsTrue)
    {
      HIBYTE(__p[2]) = 20;
      strcpy((char *)__p, "BOOL_or: always true");
      operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v27, (uint64_t)__p);
LABEL_85:
      v74 = (uint64_t)v101;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      goto LABEL_101;
    }
    IsUniqueAndRemovable = operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(v27, (int)v25);
    v29 = (_QWORD *)*((_QWORD *)v6 + 2);
    if (IsUniqueAndRemovable)
      break;
    v30 = 0;
    v31 = v29[25];
    v32 = ~(_DWORD)v25;
    v33 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v32)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v32));
    v34 = (v31 >> 12) ^ (v33 >> 7);
    v35 = v29[28];
    v36 = 0x101010101010101 * (v33 & 0x7F);
    while (1)
    {
      v37 = v34 & v35;
      v38 = *(_QWORD *)(v31 + v37);
      v39 = ((v38 ^ v36) - 0x101010101010101) & ~(v38 ^ v36) & 0x8080808080808080;
      if (v39)
        break;
LABEL_37:
      if ((v38 & (~v38 << 6) & 0x8080808080808080) != 0)
        goto LABEL_40;
      v30 += 8;
      v34 = v30 + v37;
    }
    while (1)
    {
      v40 = (v37 + (__clz(__rbit64(v39)) >> 3)) & v35;
      if (*(_DWORD *)(v29[26] + 4 * v40) == v32)
        break;
      v39 &= v39 - 1;
      if (!v39)
        goto LABEL_37;
    }
    if (v40 != v35)
    {
      HIBYTE(__p[2]) = 20;
      strcpy((char *)__p, "BOOL_or: always true");
      operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v29, (uint64_t)__p);
      goto LABEL_85;
    }
LABEL_40:
    v41 = 0;
    v42 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v25)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + (int)v25));
    v43 = (v31 >> 12) ^ (v42 >> 7);
    v44 = 0x101010101010101 * (v42 & 0x7F);
    for (j = v43; ; j = v41 + v46)
    {
      v46 = j & v35;
      v47 = *(_QWORD *)(v31 + v46);
      v48 = ((v47 ^ v44) - 0x101010101010101) & ~(v47 ^ v44) & 0x8080808080808080;
      if (v48)
        break;
LABEL_44:
      if ((v47 & (~v47 << 6) & 0x8080808080808080) != 0)
        goto LABEL_47;
      v41 += 8;
    }
    while (1)
    {
      v49 = (v46 + (__clz(__rbit64(v48)) >> 3)) & v35;
      if (*(_DWORD *)(v29[26] + 4 * v49) == (_DWORD)v25)
        break;
      v48 &= v48 - 1;
      if (!v48)
        goto LABEL_44;
    }
    if (v49 == v35)
    {
LABEL_47:
      for (k = 0; ; v43 = k + v51)
      {
        v51 = v43 & v35;
        v52 = *(_QWORD *)(v31 + v51);
        v53 = ((v52 ^ v44) - 0x101010101010101) & ~(v52 ^ v44) & 0x8080808080808080;
        if (v53)
          break;
LABEL_51:
        if ((v52 & (~v52 << 6) & 0x8080808080808080) != 0)
        {
          *(_DWORD *)(v29[26]
                    + 4
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(v29 + 25, v42)) = (_DWORD)v25;
          v29 = (_QWORD *)*((_QWORD *)v6 + 2);
          goto LABEL_54;
        }
        k += 8;
      }
      while (*(_DWORD *)(v29[26] + 4 * ((v51 + (__clz(__rbit64(v53)) >> 3)) & v35)) != (_DWORD)v25)
      {
        v53 &= v53 - 1;
        if (!v53)
          goto LABEL_51;
      }
LABEL_54:
      v55 = (char *)v29[17];
      v54 = v29[18];
      if ((unint64_t)v55 >= v54)
      {
        v57 = (char *)v29[16];
        v58 = (v55 - v57) >> 2;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v60 = v54 - (_QWORD)v57;
        if (v60 >> 1 > v59)
          v59 = v60 >> 1;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        v103 = v59;
        if (v59)
        {
          if (v59 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v61 = operator new(4 * v59);
          v62 = &v61[4 * v58];
          *v62 = (_DWORD)v25;
          v56 = (uint64_t)(v62 + 1);
          if (v55 == v57)
            goto LABEL_73;
        }
        else
        {
          v61 = 0;
          v62 = (_DWORD *)(4 * v58);
          *(_DWORD *)(4 * v58) = (_DWORD)v25;
          v56 = 4 * v58 + 4;
          if (v55 == v57)
          {
LABEL_73:
            v29[16] = v62;
            v29[17] = v56;
            v29[18] = &v61[4 * v103];
            if (v57)
              operator delete(v57);
            v6 = v102;
            goto LABEL_76;
          }
        }
        v63 = v55 - 4 - v57;
        if (v63 < 0x2C)
          goto LABEL_138;
        if ((unint64_t)(v57 - v61) < 0x20)
          goto LABEL_138;
        v64 = (v63 >> 2) + 1;
        v65 = 4 * (v64 & 0x7FFFFFFFFFFFFFF8);
        v66 = &v55[-v65];
        v62 = (_DWORD *)((char *)v62 - v65);
        v67 = &v61[4 * v58 - 16];
        v68 = v55 - 16;
        v69 = v64 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v70 = *(_OWORD *)v68;
          *(v67 - 1) = *((_OWORD *)v68 - 1);
          *v67 = v70;
          v67 -= 2;
          v68 -= 32;
          v69 -= 8;
        }
        while (v69);
        v55 = v66;
        if (v64 != (v64 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_138:
          do
          {
            v71 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *--v62 = v71;
          }
          while (v55 != v57);
        }
        goto LABEL_73;
      }
      *(_DWORD *)v55 = (_DWORD)v25;
      v56 = (uint64_t)(v55 + 4);
LABEL_76:
      v29[17] = v56;
      if (++v23 == v24)
      {
LABEL_77:
        v72 = *((_QWORD *)v6 + 2);
        v73 = *(_QWORD *)(v72 + 224);
        if (v73 >= 0x80)
          goto LABEL_78;
LABEL_90:
        v74 = (uint64_t)v101;
        if (v73)
        {
          *(_QWORD *)(v72 + 216) = 0;
          memset(*(void **)(v72 + 200), 128, v73 + 8);
          *(_BYTE *)(*(_QWORD *)(v72 + 200) + *(_QWORD *)(v72 + 224)) = -1;
          v73 = *(_QWORD *)(v72 + 224);
          v75 = v73 - (v73 >> 3);
          if (v73 == 7)
            v75 = 6;
          *(_QWORD *)(v72 + 240) = v75 - *(_QWORD *)(v72 + 216);
        }
        goto LABEL_94;
      }
    }
    else
    {
LABEL_29:
      v22 = 1;
      if (++v23 == v24)
        goto LABEL_77;
    }
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "BOOL_or: singleton");
  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v29, (uint64_t)__p);
  v74 = (uint64_t)v101;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if ((operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)v6 + 2), (int)v25) & 1) != 0)goto LABEL_101;
LABEL_122:
  IsUnsat = 1;
  return IsUnsat & 1;
}

void sub_22DAC5884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::ConstraintProto::mutable_BOOL_or(operations_research::sat::ConstraintProto *this)
{
  uint64_t result;
  uint64_t v3;
  google::protobuf::Arena **v4;

  if (*((_DWORD *)this + 15) == 3)
    return *((_QWORD *)this + 6);
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 3;
  v3 = *((_QWORD *)this + 1);
  v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) != 0)
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v4);
  else
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v4);
  *((_QWORD *)this + 6) = result;
  return result;
}

BOOL absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::contains<int>(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  v5 = (v4 >> 7) ^ (*a1 >> 12);
  v6 = a1[3];
  v7 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v8 = v5 & v6;
    v9 = *(_QWORD *)(*a1 + v8);
    v10 = ((v9 ^ v7) - 0x101010101010101) & ~(v9 ^ v7) & 0x8080808080808080;
    if (v10)
      break;
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0)
    {
      v11 = a1[3];
      return v11 != v6;
    }
    v2 += 8;
    v5 = v2 + v8;
  }
  while (1)
  {
    v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v6;
    if (*(_DWORD *)(a1[1] + 4 * v11) == (_DWORD)v3)
      return v11 != v6;
    v10 &= v10 - 1;
    if (!v10)
      goto LABEL_5;
  }
}

uint64_t operations_research::sat::ConstraintProto::mutable_BOOL_and(operations_research::sat::ConstraintProto *this)
{
  uint64_t result;
  uint64_t v3;
  google::protobuf::Arena **v4;

  if (*((_DWORD *)this + 15) == 4)
    return *((_QWORD *)this + 6);
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 4;
  v3 = *((_QWORD *)this + 1);
  v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) != 0)
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v4);
  else
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v4);
  *((_QWORD *)this + 6) = result;
  return result;
}

uint64_t operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t IsUnsat;
  uint64_t v7;
  google::protobuf::Arena **v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  google::protobuf::Arena *v18;
  uint64_t v19;
  void *__p;
  char v22;

  if (*((_DWORD *)a2 + 4))
  {
    if (*((_DWORD *)a2 + 15) == 3)
    {
      *(_DWORD *)(*((_QWORD *)a2 + 6) + 16) = 0;
      v4 = *((int *)a2 + 4);
      if (!(_DWORD)v4)
        goto LABEL_19;
      goto LABEL_9;
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 3;
    v7 = *((_QWORD *)a2 + 1);
    v8 = (google::protobuf::Arena **)(v7 & 0xFFFFFFFFFFFFFFFELL);
    if ((v7 & 1) != 0)
    {
      v19 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v8);
      *((_QWORD *)a2 + 6) = v19;
      *(_DWORD *)(v19 + 16) = 0;
      v4 = *((int *)a2 + 4);
      if ((_DWORD)v4)
        goto LABEL_9;
    }
    else
    {
      v9 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v8);
      *((_QWORD *)a2 + 6) = v9;
      *(_DWORD *)(v9 + 16) = 0;
      v4 = *((int *)a2 + 4);
      if ((_DWORD)v4)
      {
LABEL_9:
        v10 = (int *)*((_QWORD *)a2 + 3);
        v11 = 4 * v4;
        while (1)
        {
          v12 = *v10;
          if (*((_DWORD *)a2 + 15) != 3)
            break;
          v13 = *((_QWORD *)a2 + 6);
          v15 = *(unsigned int *)(v13 + 16);
          v14 = (unsigned int *)(v13 + 16);
          v16 = v15 + 1;
          if ((_DWORD)v15 == *(_DWORD *)(v13 + 20))
            goto LABEL_17;
LABEL_10:
          *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v15) = ~v12;
          *(_DWORD *)(v13 + 16) = v16;
          ++v10;
          v11 -= 4;
          if (!v11)
            goto LABEL_19;
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 3;
        v17 = *((_QWORD *)a2 + 1);
        v18 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) != 0)
          v18 = *(google::protobuf::Arena **)v18;
        v13 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v18);
        *((_QWORD *)a2 + 6) = v13;
        v15 = *(unsigned int *)(v13 + 16);
        v14 = (unsigned int *)(v13 + 16);
        v16 = v15 + 1;
        if ((_DWORD)v15 != *(_DWORD *)(v13 + 20))
          goto LABEL_10;
LABEL_17:
        google::protobuf::RepeatedField<int>::Reserve(v14, v16);
        goto LABEL_10;
      }
    }
LABEL_19:
    *((_DWORD *)a2 + 4) = 0;
    operations_research::sat::CpModelPresolver::PresolveBoolOr(this, a2);
    return 1;
  }
  v5 = *((_QWORD *)this + 2);
  v22 = 0;
  LOBYTE(__p) = 0;
  IsUnsat = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v5, (uint64_t)&__p);
  if (v22 < 0)
    operator delete(__p);
  return IsUnsat;
}

void sub_22DAC5C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveBoolAnd(operations_research::sat::CpModelPresolver *this, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  operations_research::sat::ConstraintProto *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  const char *v12;
  _BOOL4 IsFalse;
  operations_research::sat::PresolveContext *v14;
  _BOOL4 IsUniqueAndRemovable;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v42;
  google::protobuf::Arena *v43;
  int v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  google::protobuf::Arena *v50;
  unsigned int *v51;
  unint64_t v53;
  void *__p[4];

  v3 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v3 + 504))
    return 0;
  v5 = (operations_research::sat::ConstraintProto *)a2;
  if (!*((_DWORD *)a2 + 4))
  {
    strcpy((char *)__p, "BOOL_and: non-reified.");
    HIBYTE(__p[2]) = 22;
    operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      if (*((_DWORD *)v5 + 15) == 4)
      {
LABEL_9:
        v8 = (uint64_t *)*((_QWORD *)v5 + 6);
        v9 = *((int *)v8 + 4);
        if (!(_DWORD)v9)
          goto LABEL_55;
        goto LABEL_52;
      }
    }
    else if (*((_DWORD *)v5 + 15) == 4)
    {
      goto LABEL_9;
    }
    v8 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    v9 = (int)qword_25408AA70;
    if (!(_DWORD)qword_25408AA70)
      goto LABEL_55;
LABEL_52:
    v39 = (int *)v8[3];
    v40 = 4 * v9;
    while ((operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)this + 2), *v39) & 1) != 0)
    {
      ++v39;
      v40 -= 4;
      if (!v40)
        goto LABEL_55;
    }
    return 1;
  }
  *(_QWORD *)(v3 + 136) = *(_QWORD *)(v3 + 128);
  if (*((_DWORD *)a2 + 15) == 4)
  {
    v6 = a2[6];
    v7 = *((int *)v6 + 4);
    if (!(_DWORD)v7)
      goto LABEL_55;
  }
  else
  {
    v6 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    v7 = (int)qword_25408AA70;
    if (!(_DWORD)qword_25408AA70)
      goto LABEL_55;
  }
  LOBYTE(v4) = 0;
  v10 = (unsigned int *)v6[3];
  v11 = &v10[v7];
  v51 = v11;
  while (1)
  {
    v12 = (const char *)*v10;
    IsFalse = operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)this + 2), v12);
    v14 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
    if (IsFalse)
      break;
    if (!operations_research::sat::PresolveContext::LiteralIsTrue(v14, v12))
    {
      IsUniqueAndRemovable = operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), (int)v12);
      v16 = (_QWORD *)*((_QWORD *)this + 2);
      if (IsUniqueAndRemovable)
      {
        v4 = 1;
        if ((operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)this + 2), (int)v12) & 1) == 0)return v4;
        goto LABEL_14;
      }
      v18 = (char *)v16[17];
      v17 = v16[18];
      if ((unint64_t)v18 < v17)
      {
        *(_DWORD *)v18 = (_DWORD)v12;
        v19 = (uint64_t)(v18 + 4);
LABEL_42:
        v16[17] = v19;
        goto LABEL_14;
      }
      v20 = (char *)v16[16];
      v21 = (v18 - v20) >> 2;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v23 = v17 - (_QWORD)v20;
      if (v23 >> 1 > v22)
        v22 = v23 >> 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      v53 = v22;
      if (v22)
      {
        if (v22 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v24 = operator new(4 * v22);
        v25 = &v24[4 * v21];
        *v25 = (_DWORD)v12;
        v19 = (uint64_t)(v25 + 1);
        if (v18 != v20)
        {
LABEL_30:
          v26 = v18 - 4 - v20;
          if (v26 < 0x2C)
          {
            v11 = v51;
            goto LABEL_38;
          }
          v11 = v51;
          if ((unint64_t)(v20 - v24) < 0x20)
            goto LABEL_79;
          v27 = (v26 >> 2) + 1;
          v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
          v29 = &v18[-v28];
          v25 = (_DWORD *)((char *)v25 - v28);
          v30 = &v24[4 * v21 - 16];
          v31 = v18 - 16;
          v32 = v27 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v33 = *(_OWORD *)v31;
            *(v30 - 1) = *((_OWORD *)v31 - 1);
            *v30 = v33;
            v30 -= 2;
            v31 -= 32;
            v32 -= 8;
          }
          while (v32);
          v18 = v29;
          if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_79:
            do
            {
LABEL_38:
              v34 = *((_DWORD *)v18 - 1);
              v18 -= 4;
              *--v25 = v34;
            }
            while (v18 != v20);
          }
LABEL_39:
          v16[16] = v25;
          v16[17] = v19;
          v16[18] = &v24[4 * v53];
          if (v20)
            operator delete(v20);
          v5 = (operations_research::sat::ConstraintProto *)a2;
          goto LABEL_42;
        }
      }
      else
      {
        v24 = 0;
        v25 = (_DWORD *)(4 * v21);
        *(_DWORD *)(4 * v21) = (_DWORD)v12;
        v19 = 4 * v21 + 4;
        if (v18 != v20)
          goto LABEL_30;
      }
      v11 = v51;
      goto LABEL_39;
    }
    LOBYTE(v4) = 1;
LABEL_14:
    if (++v10 == v11)
    {
      v35 = *((_QWORD *)this + 2);
      v36 = *(int **)(v35 + 128);
      v37 = *(int **)(v35 + 136);
      if (v36 != v37)
      {
        if ((v4 & 1) == 0)
          return 0;
        if (*((_DWORD *)v5 + 15) == 4)
        {
          v38 = *((_QWORD *)v5 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v5);
          *((_DWORD *)v5 + 15) = 4;
          v42 = *((_QWORD *)v5 + 1);
          v43 = (google::protobuf::Arena *)(v42 & 0xFFFFFFFFFFFFFFFELL);
          if ((v42 & 1) != 0)
            v43 = *(google::protobuf::Arena **)v43;
          v38 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v43);
          *((_QWORD *)v5 + 6) = v38;
          v35 = *((_QWORD *)this + 2);
          v36 = *(int **)(v35 + 128);
          v37 = *(int **)(v35 + 136);
        }
        *(_DWORD *)(v38 + 16) = 0;
        if (v36 != v37)
        {
          while (2)
          {
            v44 = *v36;
            if (*((_DWORD *)v5 + 15) == 4)
            {
              v45 = *((_QWORD *)v5 + 6);
              v47 = *(unsigned int *)(v45 + 16);
              v46 = (unsigned int *)(v45 + 16);
              v48 = v47 + 1;
              if ((_DWORD)v47 == *(_DWORD *)(v45 + 20))
                goto LABEL_63;
            }
            else
            {
              operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v5);
              *((_DWORD *)v5 + 15) = 4;
              v49 = *((_QWORD *)v5 + 1);
              v50 = (google::protobuf::Arena *)(v49 & 0xFFFFFFFFFFFFFFFELL);
              if ((v49 & 1) != 0)
                v50 = *(google::protobuf::Arena **)v50;
              v45 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v50);
              *((_QWORD *)v5 + 6) = v45;
              v47 = *(unsigned int *)(v45 + 16);
              v46 = (unsigned int *)(v45 + 16);
              v48 = v47 + 1;
              if ((_DWORD)v47 == *(_DWORD *)(v45 + 20))
LABEL_63:
                google::protobuf::RepeatedField<int>::Reserve(v46, v48);
            }
            *(_DWORD *)(*(_QWORD *)(v45 + 24) + 4 * v47) = v44;
            *(_DWORD *)(v45 + 16) = v48;
            if (++v36 == v37)
            {
              v35 = *((_QWORD *)this + 2);
              break;
            }
            continue;
          }
        }
        __p[0] = operator new(0x20uLL);
        *(_OWORD *)&__p[1] = xmmword_22DCE6650;
        strcpy((char *)__p[0], "BOOL_and: fixed literals");
        operations_research::sat::PresolveContext::UpdateRuleStats(v35, (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        return 1;
      }
LABEL_55:
      operations_research::sat::ConstraintProto::Clear(v5);
      return 1;
    }
  }
  strcpy((char *)__p, "BOOL_and: always false");
  HIBYTE(__p[2]) = 22;
  operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v14, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, v5);
}

void sub_22DAC60DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveAtMostOne(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  operations_research::sat::ConstraintProto *v3;
  uint64_t v5;
  google::protobuf::Arena **v6;
  uint64_t v7;
  google::protobuf::Arena *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  const char *v22;
  _BOOL4 IsTrue;
  operations_research::sat::PresolveContext *v24;
  _QWORD *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  int *v46;
  int *v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  google::protobuf::Arena *v55;
  int v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  google::protobuf::Arena *v62;
  _QWORD *v63;
  unsigned int *v64;
  int v65;
  operations_research::sat::ConstraintProto *v66;
  void *__p[4];

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504))
    return 0;
  v3 = a2;
  if (*((_DWORD *)a2 + 4))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 322);
    v63 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Check failed: !HasEnforcementLiteral(*ct) ", 42);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
  }
  if (*((_DWORD *)a2 + 15) != 26)
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)v3 + 15) = 26;
    v5 = *((_QWORD *)v3 + 1);
    v6 = (google::protobuf::Arena **)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 1) != 0)
    {
      *((_QWORD *)v3 + 6) = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(*v6);
      if (*((_DWORD *)v3 + 15) == 26)
        goto LABEL_10;
    }
    else
    {
      *((_QWORD *)v3 + 6) = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>((google::protobuf::Arena *)v6);
      if (*((_DWORD *)v3 + 15) == 26)
        goto LABEL_10;
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v3);
    *((_DWORD *)v3 + 15) = 26;
    v7 = *((_QWORD *)v3 + 1);
    v8 = (google::protobuf::Arena *)(v7 & 0xFFFFFFFFFFFFFFFELL);
    if ((v7 & 1) != 0)
      v8 = *(google::protobuf::Arena **)v8;
    *((_QWORD *)v3 + 6) = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v8);
  }
LABEL_10:
  std::__sort<std::__less<int,int> &,int *>();
  v9 = *((_DWORD *)v3 + 15);
  if (v9 != 26)
  {
    v10 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    v11 = (int)qword_25408AA70;
    if ((_DWORD)qword_25408AA70)
      goto LABEL_12;
LABEL_19:
    *(_QWORD *)(*((_QWORD *)this + 2) + 136) = *(_QWORD *)(*((_QWORD *)this + 2) + 128);
    if (v9 != 26)
      goto LABEL_53;
    goto LABEL_20;
  }
  v10 = (uint64_t *)*((_QWORD *)v3 + 6);
  v11 = *((int *)v10 + 4);
  if (!(_DWORD)v11)
    goto LABEL_19;
LABEL_12:
  v12 = (unsigned int *)v10[3];
  v13 = 4 * v11;
  v14 = 0x7FFFFFFF;
  do
  {
    v15 = *v12;
    if (*v12 == v14)
    {
      if (!operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)this + 2), v14))return 1;
      v16 = *((_QWORD *)this + 2);
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_22DCE6550;
      strcpy((char *)__p[0], "at_most_one: duplicate literals");
      operations_research::sat::PresolveContext::UpdateRuleStats(v16, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    ++v12;
    v14 = v15;
    v13 -= 4;
  }
  while (v13);
  v49 = *((_DWORD *)v3 + 15);
  *(_QWORD *)(*((_QWORD *)this + 2) + 136) = *(_QWORD *)(*((_QWORD *)this + 2) + 128);
  if (v49 != 26)
  {
LABEL_53:
    v17 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    v18 = (int)qword_25408AA70;
    if (!(_DWORD)qword_25408AA70)
    {
LABEL_54:
      v45 = *((_QWORD *)this + 2);
      if (*(_QWORD *)(v45 + 128) != *(_QWORD *)(v45 + 136))
        return 0;
      goto LABEL_55;
    }
    goto LABEL_21;
  }
LABEL_20:
  v17 = (uint64_t *)*((_QWORD *)v3 + 6);
  v18 = *((int *)v17 + 4);
  if (!(_DWORD)v18)
    goto LABEL_54;
LABEL_21:
  v19 = 0;
  v20 = (unsigned int *)v17[3];
  v21 = &v20[v18];
  v66 = v3;
  v64 = v21;
  do
  {
    while (1)
    {
      while (1)
      {
        v22 = (const char *)*v20;
        IsTrue = operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)this + 2), v22);
        v24 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
        if (IsTrue)
        {
          strcpy((char *)__p, "at_most_one: satisfied");
          HIBYTE(__p[2]) = 22;
          operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v24, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
          {
            operator delete(__p[0]);
            if (*((_DWORD *)v3 + 15) == 26)
            {
LABEL_59:
              v50 = (uint64_t *)*((_QWORD *)v3 + 6);
              v51 = *((int *)v50 + 4);
              if (!(_DWORD)v51)
                goto LABEL_68;
              goto LABEL_63;
            }
          }
          else if (*((_DWORD *)v3 + 15) == 26)
          {
            goto LABEL_59;
          }
          v50 = &operations_research::sat::_BoolArgumentProto_default_instance_;
          v51 = (int)qword_25408AA70;
          if (!(_DWORD)qword_25408AA70)
            goto LABEL_68;
LABEL_63:
          v52 = (unsigned int *)v50[3];
          v53 = 4 * v51;
          while (*v52 == (_DWORD)v22
               || operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)this + 2), *v52))
          {
            ++v52;
            v53 -= 4;
            if (!v53)
              goto LABEL_68;
          }
          return 1;
        }
        if (!operations_research::sat::PresolveContext::LiteralIsFalse(v24, v22))
          break;
        v19 = 1;
        if (++v20 == v21)
          goto LABEL_48;
      }
      v25 = (_QWORD *)*((_QWORD *)this + 2);
      v27 = (char *)v25[17];
      v26 = v25[18];
      if ((unint64_t)v27 >= v26)
        break;
      *(_DWORD *)v27 = (_DWORD)v22;
      v25[17] = v27 + 4;
      if (++v20 == v21)
        goto LABEL_48;
    }
    v65 = v19;
    v28 = (char *)v25[16];
    v29 = (v27 - v28) >> 2;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v31 = v26 - (_QWORD)v28;
    if (v31 >> 1 > v30)
      v30 = v31 >> 1;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (!v32)
    {
      v33 = 0;
      v34 = (_DWORD *)(4 * v29);
      *(_DWORD *)(4 * v29) = (_DWORD)v22;
      v35 = 4 * v29 + 4;
      if (v27 == v28)
        goto LABEL_45;
LABEL_39:
      v36 = v27 - 4 - v28;
      if (v36 < 0x2C)
        goto LABEL_94;
      if ((unint64_t)(v28 - v33) < 0x20)
        goto LABEL_94;
      v37 = (v36 >> 2) + 1;
      v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      v39 = &v27[-v38];
      v34 = (_DWORD *)((char *)v34 - v38);
      v40 = &v33[4 * v29 - 16];
      v41 = v27 - 16;
      v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v43 = *(_OWORD *)v41;
        *(v40 - 1) = *((_OWORD *)v41 - 1);
        *v40 = v43;
        v40 -= 2;
        v41 -= 32;
        v42 -= 8;
      }
      while (v42);
      v27 = v39;
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_94:
        do
        {
          v44 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *--v34 = v44;
        }
        while (v27 != v28);
      }
      goto LABEL_45;
    }
    if (v32 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v33 = operator new(4 * v32);
    v34 = &v33[4 * v29];
    *v34 = (_DWORD)v22;
    v35 = (uint64_t)(v34 + 1);
    if (v27 != v28)
      goto LABEL_39;
LABEL_45:
    v25[16] = v34;
    v25[17] = v35;
    v25[18] = &v33[4 * v32];
    if (v28)
      operator delete(v28);
    v3 = v66;
    v19 = v65;
    v21 = v64;
    v25[17] = v35;
    ++v20;
  }
  while (v20 != v64);
LABEL_48:
  v45 = *((_QWORD *)this + 2);
  v47 = *(int **)(v45 + 128);
  v46 = *(int **)(v45 + 136);
  if (v47 != v46)
  {
    if ((v19 & 1) != 0)
    {
      if (*((_DWORD *)v3 + 15) == 26)
      {
        v48 = *((_QWORD *)v3 + 6);
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v3);
        *((_DWORD *)v3 + 15) = 26;
        v54 = *((_QWORD *)v3 + 1);
        v55 = (google::protobuf::Arena *)(v54 & 0xFFFFFFFFFFFFFFFELL);
        if ((v54 & 1) != 0)
          v55 = *(google::protobuf::Arena **)v55;
        v48 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v55);
        *((_QWORD *)v3 + 6) = v48;
        v45 = *((_QWORD *)this + 2);
        v47 = *(int **)(v45 + 128);
        v46 = *(int **)(v45 + 136);
      }
      *(_DWORD *)(v48 + 16) = 0;
      if (v47 == v46)
      {
LABEL_85:
        __p[0] = operator new(0x20uLL);
        *(_OWORD *)&__p[1] = xmmword_22DCE7550;
        strcpy((char *)__p[0], "at_most_one: removed literals");
        operations_research::sat::PresolveContext::UpdateRuleStats(v45, (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        return 1;
      }
      while (2)
      {
        v56 = *v47;
        if (*((_DWORD *)v3 + 15) == 26)
        {
          v57 = *((_QWORD *)v3 + 6);
          v59 = *(unsigned int *)(v57 + 16);
          v58 = (unsigned int *)(v57 + 16);
          v60 = v59 + 1;
          if ((_DWORD)v59 == *(_DWORD *)(v57 + 20))
            goto LABEL_75;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v3);
          *((_DWORD *)v3 + 15) = 26;
          v61 = *((_QWORD *)v3 + 1);
          v62 = (google::protobuf::Arena *)(v61 & 0xFFFFFFFFFFFFFFFELL);
          if ((v61 & 1) != 0)
            v62 = *(google::protobuf::Arena **)v62;
          v57 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v62);
          *((_QWORD *)v3 + 6) = v57;
          v59 = *(unsigned int *)(v57 + 16);
          v58 = (unsigned int *)(v57 + 16);
          v60 = v59 + 1;
          if ((_DWORD)v59 == *(_DWORD *)(v57 + 20))
LABEL_75:
            google::protobuf::RepeatedField<int>::Reserve(v58, v60);
        }
        *(_DWORD *)(*(_QWORD *)(v57 + 24) + 4 * v59) = v56;
        *(_DWORD *)(v57 + 16) = v60;
        ++v47;
        v3 = v66;
        if (v47 == v46)
        {
          v45 = *((_QWORD *)this + 2);
          goto LABEL_85;
        }
        continue;
      }
    }
    return 0;
  }
LABEL_55:
  strcpy((char *)__p, "at_most_one: all false");
  HIBYTE(__p[2]) = 22;
  operations_research::sat::PresolveContext::UpdateRuleStats(v45, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
LABEL_68:
  operations_research::sat::ConstraintProto::Clear(v3);
  return 1;
}

void sub_22DAC6764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DAC678C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveIntMax(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  const char *v2;
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  int v21;
  int v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  int v27;
  uint64_t v29;
  void **v30;
  void **v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  google::protobuf::Arena *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  operations_research::sat::ConstraintProto *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  google::protobuf::Arena *v49;
  unsigned int *v50;
  uint64_t v51;
  operations_research::sat::PresolveContext *v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  google::protobuf::Arena *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  const char *v79;
  int IsIncludedIn;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  operations_research::sat::ConstraintProto *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  google::protobuf::Arena *v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  google::protobuf::Arena *v112;
  uint64_t v113;
  unsigned int *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  google::protobuf::Arena *v118;
  uint64_t v119;
  uint64_t v120;
  google::protobuf::Arena *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  const char *v129;
  operations_research::sat::PresolveContext *v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  int *v134;
  uint64_t v135;
  int v136;
  operations_research::sat::ConstraintProto *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  int v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  int v145;
  unsigned int *v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  operations_research::sat::PresolveContext *v150;
  char v151;
  uint64_t v152;
  google::protobuf::Arena *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  operations_research::sat::ConstraintProto *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  int v164;
  uint64_t v165;
  uint64_t *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  char v175;
  int v176;
  unsigned int *v177;
  uint64_t v178;
  int v179;
  int v180;
  operations_research::sat::CpModelPresolver *v181;
  void *v183[3];
  unint64_t v184;
  void *v185;
  void *v186;
  void *__p[2];
  void *v188;
  __int128 v189;
  char *v190[4];
  void *v191[4];

  v4 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v4 + 504))
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  v181 = this;
  if (*((_DWORD *)a2 + 15) == 9)
  {
    v6 = *((_QWORD *)a2 + 6);
    if (*(_DWORD *)(v6 + 16))
    {
      LODWORD(v7) = *(_DWORD *)(v6 + 36);
      v191[1] = 0;
      v191[2] = 0;
      v191[0] = &v191[1];
      v8 = *(int *)(v6 + 16);
      if (!(_DWORD)v8)
      {
        v12 = 0;
        v13 = 0;
        v14 = 0x8000000000000000;
        v15 = 0x8000000000000000;
        v39 = 9;
        if (*(int *)(*((_QWORD *)a2 + 6) + 16) > 0)
          goto LABEL_74;
LABEL_59:
        if (v39 != 9)
          goto LABEL_77;
LABEL_60:
        v40 = *((_QWORD *)a2 + 6);
        if (*(int *)(v40 + 16) < 1)
          goto LABEL_62;
        goto LABEL_61;
      }
      v9 = (int)v7;
      v10 = *(unsigned int **)(v6 + 24);
      v11 = (uint64_t)&v10[v8];
      goto LABEL_9;
    }
LABEL_67:
    strcpy((char *)v191, "int_max: no variables!");
    HIBYTE(v191[2]) = 22;
    operations_research::sat::PresolveContext::UpdateRuleStats(v4, (uint64_t)v191);
    if (SHIBYTE(v191[2]) < 0)
      operator delete(v191[0]);
    LOBYTE(v2) = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
    return v2 & 1;
  }
  if (!(_DWORD)qword_25408AAF8)
    goto LABEL_67;
  v9 = dword_25408AB0C;
  v191[1] = 0;
  v191[2] = 0;
  v191[0] = &v191[1];
  v10 = (unsigned int *)qword_25408AB00;
  v11 = qword_25408AB00 + 4 * (int)qword_25408AAF8;
LABEL_9:
  v177 = (unsigned int *)v11;
  v12 = 0;
  v13 = 0;
  v179 = v9;
  v176 = ~v9;
  v14 = 0x8000000000000000;
  v15 = 0x8000000000000000;
  do
  {
    v2 = (const char *)*v10;
    v16 = v191[1];
    if (!v191[1])
      goto LABEL_35;
    v17 = &v191[1];
    v18 = (void **)v191[1];
    do
    {
      v19 = v18;
      v20 = v17;
      v21 = *((_DWORD *)v18 + 7);
      if (v21 >= (int)v2)
        v17 = v18;
      else
        ++v18;
      v18 = (void **)*v18;
    }
    while (v18);
    if (v17 == &v191[1])
      goto LABEL_21;
    if (v21 < (int)v2)
      v19 = v20;
    if ((int)v2 < *((_DWORD *)v19 + 7))
    {
LABEL_21:
      v22 = ~(_DWORD)v2;
      v23 = &v191[1];
      v24 = (void **)v191[1];
      do
      {
        v25 = v24;
        v26 = v23;
        v27 = *((_DWORD *)v24 + 7);
        if (v27 >= v22)
          v23 = v24;
        else
          ++v24;
        v24 = (void **)*v24;
      }
      while (v24);
      if (v23 == &v191[1])
      {
LABEL_35:
        if ((_DWORD)v2 != v176)
          goto LABEL_33;
      }
      else
      {
        if (v27 < v22)
          v25 = v26;
        if (*((_DWORD *)v25 + 7) > v22 && (_DWORD)v2 != v176)
        {
LABEL_33:
          v29 = v14;
          v30 = &v191[1];
          v31 = &v191[1];
          if (v191[1])
            goto LABEL_39;
          goto LABEL_43;
        }
      }
      v29 = v14 & ~(v14 >> 63);
      v30 = &v191[1];
      v31 = &v191[1];
      if (v191[1])
      {
        while (1)
        {
LABEL_39:
          while (1)
          {
            v31 = (void **)v16;
            v32 = *((_DWORD *)v16 + 7);
            if ((int)v2 >= v32)
              break;
            v16 = *v31;
            v30 = v31;
            if (!*v31)
              goto LABEL_43;
          }
          if (v32 >= (int)v2)
            goto LABEL_46;
          v16 = v31[1];
          if (!v16)
          {
            v30 = v31 + 1;
            break;
          }
        }
      }
LABEL_43:
      v33 = operator new(0x20uLL);
      v33[7] = (_DWORD)v2;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v31;
      *v30 = v33;
      if (*(_QWORD *)v191[0])
      {
        v191[0] = *(void **)v191[0];
        v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191[1], (uint64_t *)v33);
      ++v191[2];
LABEL_46:
      if (*((_DWORD *)a2 + 15) == 9)
      {
        v34 = *((_QWORD *)a2 + 6);
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 9;
        v35 = *((_QWORD *)a2 + 1);
        v36 = (google::protobuf::Arena *)(v35 & 0xFFFFFFFFFFFFFFFELL);
        if ((v35 & 1) != 0)
          v36 = *(google::protobuf::Arena **)v36;
        v34 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v36);
        *((_QWORD *)a2 + 6) = v34;
      }
      *(_DWORD *)(*(_QWORD *)(v34 + 24) + 4 * v13) = (_DWORD)v2;
      v37 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)v181 + 2), v2);
      v38 = operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)v181 + 2), v2);
      ++v13;
      if (v29 <= v37)
        v14 = v37;
      else
        v14 = v29;
      if (v15 <= v38)
        v15 = v38;
    }
    v12 |= (_DWORD)v2 == v179;
    ++v10;
  }
  while (v10 != v177);
  v39 = *((_DWORD *)a2 + 15);
  if (v39 != 9)
  {
    LODWORD(v7) = v179;
    if (v13 < (int)qword_25408AAF8)
      goto LABEL_74;
    goto LABEL_59;
  }
  LODWORD(v7) = v179;
  v39 = 9;
  if (v13 >= *(_DWORD *)(*((_QWORD *)a2 + 6) + 16))
    goto LABEL_59;
LABEL_74:
  v47 = *((_QWORD *)v181 + 2);
  HIBYTE(v190[2]) = 20;
  strcpy((char *)v190, "int_max: removed dup");
  operations_research::sat::PresolveContext::UpdateRuleStats(v47, (uint64_t)v190);
  if (SHIBYTE(v190[2]) < 0)
    operator delete(v190[0]);
  if (*((_DWORD *)a2 + 15) == 9)
    goto LABEL_60;
LABEL_77:
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 9;
  v48 = *((_QWORD *)a2 + 1);
  v49 = (google::protobuf::Arena *)(v48 & 0xFFFFFFFFFFFFFFFELL);
  if ((v48 & 1) != 0)
    v49 = *(google::protobuf::Arena **)v49;
  v40 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v49);
  *((_QWORD *)a2 + 6) = v40;
  if (*(int *)(v40 + 16) >= 1)
LABEL_61:
    *(_DWORD *)(v40 + 16) = v13;
LABEL_62:
  if ((v12 & 1) == 0)
  {
    v190[0] = 0;
    v44 = a2;
    v180 = (int)v7;
    if (*((_DWORD *)a2 + 15) == 9)
    {
      v45 = (uint64_t *)*((_QWORD *)a2 + 6);
      v46 = *((int *)v45 + 4);
      if (!(_DWORD)v46)
      {
LABEL_93:
        LOBYTE(v183[0]) = 0;
        v52 = (operations_research::sat::PresolveContext *)*((_QWORD *)v181 + 2);
        if (*((_DWORD *)a2 + 4))
        {
          v7 = (const char *)v7;
        }
        else
        {
          v7 = (const char *)v7;
          if (!operations_research::sat::PresolveContext::IntersectDomainWith(v52, (const char *)v7, (const operations_research::Domain *)v190, (BOOL *)v183))goto LABEL_264;
          v52 = (operations_research::sat::PresolveContext *)*((_QWORD *)v181 + 2);
        }
        if (!operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(v52, (int)v7))
        {
LABEL_213:
          if (*((_DWORD *)v44 + 15) == 9)
            v140 = (uint64_t *)*((_QWORD *)v44 + 6);
          else
            v140 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
          v141 = *((_DWORD *)v140 + 4);
          v142 = operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)v181 + 2), v7);
          if (*((_DWORD *)v44 + 15) == 9)
          {
            v143 = (uint64_t *)*((_QWORD *)v44 + 6);
            v144 = *((int *)v143 + 4);
            if ((_DWORD)v144)
              goto LABEL_218;
          }
          else
          {
            v143 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
            v144 = (int)qword_25408AAF8;
            if ((_DWORD)qword_25408AAF8)
            {
LABEL_218:
              v145 = 0;
              v146 = (unsigned int *)v143[3];
              v147 = 4 * v144;
              while (1)
              {
                v149 = (const char *)*v146;
                if (!*((_DWORD *)v44 + 4))
                {
                  v150 = (operations_research::sat::PresolveContext *)*((_QWORD *)v181 + 2);
                  operations_research::Domain::Domain(&v188, 0x8000000000000000, v142);
                  v151 = operations_research::sat::PresolveContext::IntersectDomainWith(v150, v149, (const operations_research::Domain *)&v188, (BOOL *)v183);
                  if ((v188 & 1) != 0)
                    operator delete((void *)v189);
                  if ((v151 & 1) == 0)
                    goto LABEL_264;
                }
                if (operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)v181 + 2), v149) >= v14)
                {
                  if (*((_DWORD *)v44 + 15) == 9)
                  {
                    v148 = *((_QWORD *)v44 + 6);
                  }
                  else
                  {
                    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v44);
                    *((_DWORD *)v44 + 15) = 9;
                    v152 = *((_QWORD *)v44 + 1);
                    v153 = (google::protobuf::Arena *)(v152 & 0xFFFFFFFFFFFFFFFELL);
                    if ((v152 & 1) != 0)
                      v153 = *(google::protobuf::Arena **)v153;
                    v148 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v153);
                    *((_QWORD *)v44 + 6) = v148;
                  }
                  *(_DWORD *)(*(_QWORD *)(v148 + 24) + 4 * v145++) = (_DWORD)v149;
                }
                ++v146;
                v147 -= 4;
                if (!v147)
                  goto LABEL_233;
              }
            }
          }
          v145 = 0;
LABEL_233:
          if (LOBYTE(v183[0]))
          {
            v154 = *((_QWORD *)v181 + 2);
            std::string::basic_string[abi:ne180100]<0>(&v188, "int_max: reduced domains");
            operations_research::sat::PresolveContext::UpdateRuleStats(v154, (uint64_t)&v188);
            if (SHIBYTE(v189) < 0)
              operator delete(v188);
          }
          LOBYTE(v2) = v145 < v141;
          if (v145 < v141)
          {
            v155 = *((_QWORD *)v181 + 2);
            std::string::basic_string[abi:ne180100]<0>(&v188, "int_max: removed variables");
            operations_research::sat::PresolveContext::UpdateRuleStats(v155, (uint64_t)&v188);
            if (SHIBYTE(v189) < 0)
              operator delete(v188);
            v156 = operations_research::sat::ConstraintProto::mutable_int_max(v44);
            if (*(int *)(v156 + 16) >= 1)
              *(_DWORD *)(v156 + 16) = v145;
          }
          if (v145 != 1)
          {
            if (!v145)
            {
              v157 = *((_QWORD *)v181 + 2);
              std::string::basic_string[abi:ne180100]<0>(&v188, "int_max: no variables!");
              operations_research::sat::PresolveContext::UpdateRuleStats(v157, (uint64_t)&v188);
              if (SHIBYTE(v189) < 0)
                operator delete(v188);
              LOBYTE(v2) = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(v181, v44);
            }
            goto LABEL_265;
          }
          v158 = *((_QWORD *)v181 + 2);
          std::string::basic_string[abi:ne180100]<0>(&v188, "int_max: converted to equality");
          operations_research::sat::PresolveContext::UpdateRuleStats(v158, (uint64_t)&v188);
          if (SHIBYTE(v189) < 0)
            operator delete(v188);
          v159 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)v181 + 2) + 48));
          operations_research::sat::ConstraintProto::CopyFrom(v159, v44);
          v160 = operations_research::sat::ConstraintProto::mutable_linear(v159);
          v161 = v160;
          v162 = *(unsigned int *)(v160 + 16);
          v163 = (unsigned int *)(v160 + 16);
          v164 = v162 + 1;
          if ((_DWORD)v162 == *(_DWORD *)(v160 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v160 + 16), v162 + 1);
          *(_DWORD *)(*(_QWORD *)(v161 + 24) + 4 * v162) = v180;
          v165 = *(unsigned int *)(v161 + 40);
          *(_DWORD *)(v161 + 16) = v164;
          if ((_DWORD)v165 == *(_DWORD *)(v161 + 44))
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v161 + 40), v165 + 1);
          *(_QWORD *)(*(_QWORD *)(v161 + 48) + 8 * v165) = 1;
          *(_DWORD *)(v161 + 40) = v165 + 1;
          if (*((_DWORD *)v44 + 15) == 9)
            v166 = (uint64_t *)*((_QWORD *)v44 + 6);
          else
            v166 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
          v167 = *(_DWORD *)v166[3];
          v168 = *(unsigned int *)(v161 + 16);
          if ((_DWORD)v168 == *(_DWORD *)(v161 + 20))
            google::protobuf::RepeatedField<int>::Reserve(v163, v168 + 1);
          *(_DWORD *)(*(_QWORD *)(v161 + 24) + 4 * v168) = v167;
          *(_DWORD *)(v161 + 16) = v168 + 1;
          v169 = *(unsigned int *)(v161 + 40);
          if ((_DWORD)v169 == *(_DWORD *)(v161 + 44))
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v161 + 40), v169 + 1);
          v170 = *(unsigned int *)(v161 + 64);
          *(_QWORD *)(*(_QWORD *)(v161 + 48) + 8 * v169) = -1;
          *(_DWORD *)(v161 + 40) = v169 + 1;
          v171 = *(_DWORD *)(v161 + 68);
          v172 = v170 + 1;
          if ((_DWORD)v170 == v171)
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v161 + 64), v170 + 1);
            v171 = *(_DWORD *)(v161 + 68);
          }
          v173 = *(_QWORD *)(v161 + 72);
          *(_QWORD *)(v173 + 8 * v170) = 0;
          *(_DWORD *)(v161 + 64) = v172;
          if (v172 == v171)
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v161 + 64), v170 + 2);
            v173 = *(_QWORD *)(v161 + 72);
          }
          *(_QWORD *)(v173 + 8 * v172) = 0;
          *(_DWORD *)(v161 + 64) = v170 + 2;
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)v181
                                                                                       + 2));
          operations_research::sat::ConstraintProto::Clear(v44);
LABEL_264:
          LOBYTE(v2) = 1;
LABEL_265:
          if (((uint64_t)v190[0] & 1) != 0)
            operator delete(v190[1]);
          goto LABEL_267;
        }
        operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)v181 + 2), v7, (unint64_t *)&v188);
        v78 = operations_research::Domain::Max((operations_research::Domain *)&v188, v77);
        operations_research::Domain::Domain(&v184, 0x8000000000000000, v78);
        operations_research::Domain::IntersectionWith(v190, (const operations_research::Domain *)&v184, (unint64_t *)&v186);
        IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&v186, (const operations_research::Domain *)&v188);
        if ((v186 & 1) != 0)
        {
          operator delete(__p[0]);
          if ((v184 & 1) == 0)
          {
LABEL_136:
            if (!IsIncludedIn)
            {
LABEL_210:
              if ((v188 & 1) != 0)
                operator delete((void *)v189);
              if ((IsIncludedIn & 1) != 0)
                goto LABEL_265;
              goto LABEL_213;
            }
LABEL_140:
            v175 = IsIncludedIn;
            v81 = operations_research::Domain::Max((operations_research::Domain *)v190, v79);
            v178 = v14;
            if (v81 <= operations_research::Domain::Max((operations_research::Domain *)&v188, v82))
            {
              v86 = *((_QWORD *)v181 + 2);
              std::string::basic_string[abi:ne180100]<0>(&v186, "int_max: always true");
              operations_research::sat::PresolveContext::UpdateRuleStats(v86, (uint64_t)&v186);
              if (SHIBYTE(__p[1]) < 0)
                operator delete(v186);
            }
            else if (*((_DWORD *)a2 + 4))
            {
              v83 = *((_QWORD *)v181 + 2);
              std::string::basic_string[abi:ne180100]<0>(&v186, "int_max: reified lower than constant");
              operations_research::sat::PresolveContext::UpdateRuleStats(v83, (uint64_t)&v186);
              if (SHIBYTE(__p[1]) < 0)
                operator delete(v186);
              if (*((_DWORD *)a2 + 15) == 9)
                v85 = (uint64_t *)*((_QWORD *)a2 + 6);
              else
                v85 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
              v88 = *((int *)v85 + 4);
              if ((_DWORD)v88)
              {
                v89 = (int *)v85[3];
                v90 = 4 * v88;
                while (1)
                {
                  v91 = *v89;
                  v92 = *(_QWORD *)(*((_QWORD *)v181 + 2) + 48);
                  v93 = *(int **)(v92 + 56);
                  if (!v93)
                    break;
                  v94 = *(int *)(v92 + 48);
                  v95 = *v93;
                  if ((int)v94 < *v93)
                  {
                    *(_DWORD *)(v92 + 48) = v94 + 1;
                    v96 = *(_QWORD *)&v93[2 * v94 + 2];
                    v97 = a2;
                    if ((operations_research::sat::ConstraintProto *)v96 == a2)
                      goto LABEL_164;
                    goto LABEL_162;
                  }
                  if (v95 == *(_DWORD *)(v92 + 52))
                    goto LABEL_160;
LABEL_161:
                  *v93 = v95 + 1;
                  v96 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v92 + 40));
                  v98 = *(_QWORD *)(v92 + 56);
                  v99 = *(int *)(v92 + 48);
                  *(_DWORD *)(v92 + 48) = v99 + 1;
                  *(_QWORD *)(v98 + 8 * v99 + 8) = v96;
                  v97 = a2;
                  if ((operations_research::sat::ConstraintProto *)v96 == a2)
                    goto LABEL_164;
LABEL_162:
                  *(_DWORD *)(v96 + 16) = 0;
                  v84 = (const char *)*((unsigned int *)v97 + 4);
                  if ((_DWORD)v84)
                  {
                    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v96 + 16), (int)v84);
                    v97 = a2;
                    v100 = *(void **)(v96 + 24);
                    *(_DWORD *)(v96 + 16) += *((_DWORD *)a2 + 4);
                    memcpy(v100, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
                  }
LABEL_164:
                  if (*((_DWORD *)v97 + 15) == 12)
                  {
                    v101 = *((_QWORD *)v97 + 6);
                    v103 = *(unsigned int *)(v101 + 16);
                    v102 = (unsigned int *)(v101 + 16);
                    v104 = v103 + 1;
                    if ((_DWORD)v103 == *(_DWORD *)(v101 + 20))
                      goto LABEL_170;
                  }
                  else
                  {
                    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)v97);
                    *((_DWORD *)a2 + 15) = 12;
                    v105 = *((_QWORD *)a2 + 1);
                    v106 = (google::protobuf::Arena *)(v105 & 0xFFFFFFFFFFFFFFFELL);
                    if ((v105 & 1) != 0)
                      v106 = *(google::protobuf::Arena **)v106;
                    v101 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v106);
                    *((_QWORD *)a2 + 6) = v101;
                    v103 = *(unsigned int *)(v101 + 16);
                    v102 = (unsigned int *)(v101 + 16);
                    v104 = v103 + 1;
                    if ((_DWORD)v103 == *(_DWORD *)(v101 + 20))
LABEL_170:
                      google::protobuf::RepeatedField<int>::Reserve(v102, v104);
                  }
                  *(_DWORD *)(*(_QWORD *)(v101 + 24) + 4 * v103) = v91;
                  *(_DWORD *)(v101 + 16) = v104;
                  if (*((_DWORD *)a2 + 15) == 12)
                  {
                    v107 = *((_QWORD *)a2 + 6);
                    v109 = *(unsigned int *)(v107 + 40);
                    v108 = (unsigned int *)(v107 + 40);
                    v110 = v109 + 1;
                    if ((_DWORD)v109 == *(_DWORD *)(v107 + 44))
                      goto LABEL_177;
                  }
                  else
                  {
                    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
                    *((_DWORD *)a2 + 15) = 12;
                    v111 = *((_QWORD *)a2 + 1);
                    v112 = (google::protobuf::Arena *)(v111 & 0xFFFFFFFFFFFFFFFELL);
                    if ((v111 & 1) != 0)
                      v112 = *(google::protobuf::Arena **)v112;
                    v107 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v112);
                    *((_QWORD *)a2 + 6) = v107;
                    v109 = *(unsigned int *)(v107 + 40);
                    v108 = (unsigned int *)(v107 + 40);
                    v110 = v109 + 1;
                    if ((_DWORD)v109 == *(_DWORD *)(v107 + 44))
LABEL_177:
                      google::protobuf::RepeatedField<long long>::Reserve(v108, v110);
                  }
                  *(_QWORD *)(*(_QWORD *)(v107 + 48) + 8 * v109) = 1;
                  *(_DWORD *)(v107 + 40) = v110;
                  if (*((_DWORD *)a2 + 15) == 12)
                  {
                    v113 = *((_QWORD *)a2 + 6);
                    v115 = *(unsigned int *)(v113 + 64);
                    v114 = (unsigned int *)(v113 + 64);
                    v116 = v115 + 1;
                    if ((_DWORD)v115 != *(_DWORD *)(v113 + 68))
                      goto LABEL_185;
                  }
                  else
                  {
                    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
                    *((_DWORD *)a2 + 15) = 12;
                    v117 = *((_QWORD *)a2 + 1);
                    v118 = (google::protobuf::Arena *)(v117 & 0xFFFFFFFFFFFFFFFELL);
                    if ((v117 & 1) != 0)
                      v118 = *(google::protobuf::Arena **)v118;
                    v113 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v118);
                    *((_QWORD *)a2 + 6) = v113;
                    v115 = *(unsigned int *)(v113 + 64);
                    v114 = (unsigned int *)(v113 + 64);
                    v116 = v115 + 1;
                    if ((_DWORD)v115 != *(_DWORD *)(v113 + 68))
                      goto LABEL_185;
                  }
                  google::protobuf::RepeatedField<long long>::Reserve(v114, v116);
LABEL_185:
                  *(_QWORD *)(*(_QWORD *)(v113 + 72) + 8 * v115) = 0x8000000000000000;
                  *(_DWORD *)(v113 + 64) = v116;
                  if (*((_DWORD *)a2 + 15) == 12)
                  {
                    v119 = *((_QWORD *)a2 + 6);
                  }
                  else
                  {
                    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
                    *((_DWORD *)a2 + 15) = 12;
                    v120 = *((_QWORD *)a2 + 1);
                    v121 = (google::protobuf::Arena *)(v120 & 0xFFFFFFFFFFFFFFFELL);
                    if ((v120 & 1) != 0)
                      v121 = *(google::protobuf::Arena **)v121;
                    v119 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v121);
                    *((_QWORD *)a2 + 6) = v119;
                  }
                  v122 = operations_research::Domain::Max((operations_research::Domain *)&v188, v84);
                  v123 = *(unsigned int *)(v119 + 64);
                  if ((_DWORD)v123 == *(_DWORD *)(v119 + 68))
                    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v119 + 64), v123 + 1);
                  *(_QWORD *)(*(_QWORD *)(v119 + 72) + 8 * v123) = v122;
                  *(_DWORD *)(v119 + 64) = v123 + 1;
                  ++v89;
                  v90 -= 4;
                  if (!v90)
                    goto LABEL_201;
                }
                v95 = *(_DWORD *)(v92 + 52);
LABEL_160:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v92 + 40), v95 + 1);
                v93 = *(int **)(v92 + 56);
                v95 = *v93;
                goto LABEL_161;
              }
            }
            else
            {
              if (*((_DWORD *)a2 + 15) == 9)
                v87 = (uint64_t *)*((_QWORD *)a2 + 6);
              else
                v87 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
              v124 = *((int *)v87 + 4);
              if ((_DWORD)v124)
              {
                v125 = (unsigned int *)v87[3];
                v126 = 4 * v124;
                while (1)
                {
                  v127 = (const char *)*v125;
                  v128 = *((_QWORD *)v181 + 2);
                  v186 = operator new(0x20uLL);
                  *(_OWORD *)__p = xmmword_22DCE65A0;
                  strcpy((char *)v186, "int_max: lower than constant");
                  operations_research::sat::PresolveContext::UpdateRuleStats(v128, (uint64_t)&v186);
                  if (SHIBYTE(__p[1]) < 0)
                    operator delete(v186);
                  v130 = (operations_research::sat::PresolveContext *)*((_QWORD *)v181 + 2);
                  v131 = operations_research::Domain::Max((operations_research::Domain *)&v188, v129);
                  operations_research::Domain::Domain(&v186, 0x8000000000000000, v131);
                  v132 = operations_research::sat::PresolveContext::IntersectDomainWith(v130, v127, (const operations_research::Domain *)&v186, 0);
                  if ((v186 & 1) != 0)
                    operator delete(__p[0]);
                  if ((v132 & 1) == 0)
                    break;
                  ++v125;
                  v126 -= 4;
                  if (!v126)
                    goto LABEL_201;
                }
                LOBYTE(v2) = 0;
                v44 = a2;
                v7 = (const char *)v7;
                goto LABEL_209;
              }
            }
LABEL_201:
            v7 = (const char *)v7;
            operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)v181 + 2), (int)v7);
            v44 = a2;
            v14 = v178;
            v133 = *(_QWORD *)(*((_QWORD *)v181 + 2) + 56);
            v134 = *(int **)(v133 + 56);
            if (v134)
            {
              v135 = *(int *)(v133 + 48);
              v136 = *v134;
              if ((int)v135 < *v134)
              {
                *(_DWORD *)(v133 + 48) = v135 + 1;
                v137 = *(operations_research::sat::ConstraintProto **)&v134[2 * v135 + 2];
LABEL_208:
                operations_research::sat::ConstraintProto::CopyFrom(v137, a2);
                operations_research::sat::ConstraintProto::Clear(a2);
                LOBYTE(v2) = 1;
LABEL_209:
                LOBYTE(IsIncludedIn) = v175;
                goto LABEL_210;
              }
              if (v136 != *(_DWORD *)(v133 + 52))
              {
LABEL_207:
                *v134 = v136 + 1;
                v137 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v133 + 40));
                v138 = *(_QWORD *)(v133 + 56);
                v139 = *(int *)(v133 + 48);
                *(_DWORD *)(v133 + 48) = v139 + 1;
                *(_QWORD *)(v138 + 8 * v139 + 8) = v137;
                goto LABEL_208;
              }
            }
            else
            {
              v136 = *(_DWORD *)(v133 + 52);
            }
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v133 + 40), v136 + 1);
            v134 = *(int **)(v133 + 56);
            v136 = *v134;
            goto LABEL_207;
          }
        }
        else if ((v184 & 1) == 0)
        {
          goto LABEL_136;
        }
        operator delete(v185);
        if (!IsIncludedIn)
          goto LABEL_210;
        goto LABEL_140;
      }
    }
    else
    {
      v45 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v46 = (int)qword_25408AAF8;
      if (!(_DWORD)qword_25408AAF8)
        goto LABEL_93;
    }
    v50 = (unsigned int *)v45[3];
    v51 = 4 * v46;
    while (1)
    {
      operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)v181 + 2), (const char *)*v50, &v184);
      operations_research::Domain::Domain(v183, v14, v15);
      operations_research::Domain::IntersectionWith(&v184, (const operations_research::Domain *)v183, (unint64_t *)&v186);
      operations_research::Domain::UnionWith((operations_research::Domain *)v190, (const operations_research::Domain *)&v186, (unint64_t *)&v188);
      if (((uint64_t)v190[0] & 1) != 0)
        operator delete(v190[1]);
      v190[0] = (char *)v188;
      *(_OWORD *)&v190[1] = v189;
      v188 = 0;
      if ((v186 & 1) != 0)
      {
        operator delete(__p[0]);
        if (((uint64_t)v183[0] & 1) == 0)
        {
LABEL_88:
          if ((v184 & 1) != 0)
            goto LABEL_92;
          goto LABEL_83;
        }
      }
      else if (((uint64_t)v183[0] & 1) == 0)
      {
        goto LABEL_88;
      }
      operator delete(v183[1]);
      if ((v184 & 1) != 0)
LABEL_92:
        operator delete(v185);
LABEL_83:
      ++v50;
      v51 -= 4;
      if (!v51)
        goto LABEL_93;
    }
  }
  v41 = *((_QWORD *)v181 + 2);
  v190[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v190[1] = xmmword_22DCE6650;
  strcpy(v190[0], "int_max: x = max(x, ...)");
  operations_research::sat::PresolveContext::UpdateRuleStats(v41, (uint64_t)v190);
  if (SHIBYTE(v190[2]) < 0)
  {
    operator delete(v190[0]);
    if (*((_DWORD *)a2 + 15) != 9)
      goto LABEL_98;
LABEL_65:
    v42 = (uint64_t *)*((_QWORD *)a2 + 6);
    v43 = *((int *)v42 + 4);
    if (!(_DWORD)v43)
      goto LABEL_130;
LABEL_99:
    v53 = 4 * v43;
    v54 = (int *)v42[3];
    while (1)
    {
      v55 = *v54;
      if (*v54 != (_DWORD)v7)
        break;
LABEL_101:
      ++v54;
      v53 -= 4;
      if (!v53)
        goto LABEL_130;
    }
    v56 = *(_QWORD *)(*((_QWORD *)v181 + 2) + 48);
    v57 = *(int **)(v56 + 56);
    if (v57)
    {
      v58 = *(int *)(v56 + 48);
      v59 = *v57;
      if ((int)v58 < *v57)
      {
        *(_DWORD *)(v56 + 48) = v58 + 1;
        v60 = *(_QWORD *)&v57[2 * v58 + 2];
        if ((operations_research::sat::ConstraintProto *)v60 == a2)
          goto LABEL_113;
        goto LABEL_111;
      }
      if (v59 != *(_DWORD *)(v56 + 52))
      {
LABEL_110:
        *v57 = v59 + 1;
        v60 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v56 + 40));
        v61 = *(_QWORD *)(v56 + 56);
        v62 = *(int *)(v56 + 48);
        *(_DWORD *)(v56 + 48) = v62 + 1;
        *(_QWORD *)(v61 + 8 * v62 + 8) = v60;
        if ((operations_research::sat::ConstraintProto *)v60 == a2)
          goto LABEL_113;
LABEL_111:
        *(_DWORD *)(v60 + 16) = 0;
        v63 = *((_DWORD *)a2 + 4);
        if (v63)
        {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v60 + 16), v63);
          v64 = *(void **)(v60 + 24);
          *(_DWORD *)(v60 + 16) += *((_DWORD *)a2 + 4);
          memcpy(v64, *((const void **)a2 + 3), 4 * *((int *)a2 + 4));
        }
LABEL_113:
        if (*(_DWORD *)(v60 + 60) == 12)
        {
          v65 = *(_QWORD *)(v60 + 48);
          v66 = *(unsigned int *)(v65 + 16);
          v67 = (unsigned int *)(v65 + 16);
          v68 = v66 + 1;
          if ((_DWORD)v66 != *(_DWORD *)(v65 + 20))
            goto LABEL_120;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint(v60);
          *(_DWORD *)(v60 + 60) = 12;
          v69 = *(_QWORD *)(v60 + 8);
          v70 = (google::protobuf::Arena *)(v69 & 0xFFFFFFFFFFFFFFFELL);
          if ((v69 & 1) != 0)
            v70 = *(google::protobuf::Arena **)v70;
          v65 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v70);
          *(_QWORD *)(v60 + 48) = v65;
          v66 = *(unsigned int *)(v65 + 16);
          v67 = (unsigned int *)(v65 + 16);
          v68 = v66 + 1;
          if ((_DWORD)v66 != *(_DWORD *)(v65 + 20))
            goto LABEL_120;
        }
        google::protobuf::RepeatedField<int>::Reserve(v67, v68);
LABEL_120:
        *(_DWORD *)(*(_QWORD *)(v65 + 24) + 4 * v66) = (_DWORD)v7;
        v71 = *(unsigned int *)(v65 + 40);
        *(_DWORD *)(v65 + 16) = v68;
        if ((_DWORD)v71 == *(_DWORD *)(v65 + 44))
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 40), v71 + 1);
          v68 = *v67;
        }
        *(_QWORD *)(*(_QWORD *)(v65 + 48) + 8 * v71) = 1;
        *(_DWORD *)(v65 + 40) = v71 + 1;
        if (v68 == *(_DWORD *)(v65 + 20))
          google::protobuf::RepeatedField<int>::Reserve(v67, v68 + 1);
        *(_DWORD *)(*(_QWORD *)(v65 + 24) + 4 * v68) = v55;
        *(_DWORD *)(v65 + 16) = v68 + 1;
        v72 = *(unsigned int *)(v65 + 40);
        if ((_DWORD)v72 == *(_DWORD *)(v65 + 44))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 40), v72 + 1);
        v73 = *(unsigned int *)(v65 + 64);
        *(_QWORD *)(*(_QWORD *)(v65 + 48) + 8 * v72) = -1;
        *(_DWORD *)(v65 + 40) = v72 + 1;
        v74 = *(_DWORD *)(v65 + 68);
        v75 = v73 + 1;
        if ((_DWORD)v73 == v74)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 64), v73 + 1);
          v74 = *(_DWORD *)(v65 + 68);
        }
        v76 = *(_QWORD *)(v65 + 72);
        *(_QWORD *)(v76 + 8 * v73) = 0;
        *(_DWORD *)(v65 + 64) = v75;
        if (v75 == v74)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v65 + 64), v73 + 2);
          v76 = *(_QWORD *)(v65 + 72);
        }
        *(_QWORD *)(v76 + 8 * v75) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v65 + 64) = v73 + 2;
        goto LABEL_101;
      }
    }
    else
    {
      v59 = *(_DWORD *)(v56 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v56 + 40), v59 + 1);
    v57 = *(int **)(v56 + 56);
    v59 = *v57;
    goto LABEL_110;
  }
  if (*((_DWORD *)a2 + 15) == 9)
    goto LABEL_65;
LABEL_98:
  v42 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  v43 = (int)qword_25408AAF8;
  if ((_DWORD)qword_25408AAF8)
    goto LABEL_99;
LABEL_130:
  operations_research::sat::ConstraintProto::Clear(a2);
  LOBYTE(v2) = 1;
LABEL_267:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v191, (_QWORD *)v191[1]);
  return v2 & 1;
}

void sub_22DAC7A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, char a20,void *a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,void *a29,void *a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a28 < 0)
    operator delete(__p);
  if ((a29 & 1) != 0)
    operator delete(a30);
  if ((*(_BYTE *)(v34 - 144) & 1) != 0)
    operator delete(*(void **)(v34 - 136));
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v34 - 112, *(_QWORD **)(v34 - 104));
  _Unwind_Resume(a1);
}

uint64_t **std::set<int>::insert[abi:ne180100](uint64_t **a1, int *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  int v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = *((_DWORD *)v3 + 7);
        if (v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= v5)
        return v6;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = v6;
    v9 = operator new(0x20uLL);
    v9[7] = v5;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v8;
    *v4 = (uint64_t *)v9;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v9;
    if (v10)
    {
      *a1 = v10;
      v11 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v9;
  }
}

uint64_t operations_research::sat::ConstraintProto::mutable_int_max(operations_research::sat::ConstraintProto *this)
{
  uint64_t result;
  uint64_t v3;
  google::protobuf::Arena **v4;

  if (*((_DWORD *)this + 15) == 9)
    return *((_QWORD *)this + 6);
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 9;
  v3 = *((_QWORD *)this + 1);
  v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) != 0)
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(*v4);
  else
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>((google::protobuf::Arena *)v4);
  *((_QWORD *)this + 6) = result;
  return result;
}

uint64_t operations_research::sat::ConstraintProto::mutable_linear(operations_research::sat::ConstraintProto *this)
{
  uint64_t result;
  uint64_t v3;
  google::protobuf::Arena **v4;

  if (*((_DWORD *)this + 15) == 12)
    return *((_QWORD *)this + 6);
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 12;
  v3 = *((_QWORD *)this + 1);
  v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) != 0)
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(*v4);
  else
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>((google::protobuf::Arena *)v4);
  *((_QWORD *)this + 6) = result;
  return result;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveLinMin(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v2;
  const operations_research::sat::LinearArgumentProto *v5;
  operations_research::sat::LinearExpressionProto *v6;
  operations_research::sat *v7;
  unint64_t v8;
  const operations_research::sat::LinearExpressionProto *v9;
  uint64_t v10;
  google::protobuf::Arena *v11;
  uint64_t v12;
  google::protobuf::Arena *v13;
  operations_research::sat::LinearExpressionProto *v14;
  operations_research::sat **v15;
  uint64_t v16;
  operations_research::sat *v17;
  unint64_t v18;
  unsigned int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  const operations_research::sat::LinearExpressionProto *v23;
  uint64_t v24;
  google::protobuf::Arena *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[24];
  int v30;
  uint64_t v31;
  operations_research::sat *v32;

  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 504))
  {
    if (*((_DWORD *)a2 + 15) == 28)
      v5 = (const operations_research::sat::LinearArgumentProto *)*((_QWORD *)a2 + 6);
    else
      v5 = (const operations_research::sat::LinearArgumentProto *)&operations_research::sat::_LinearArgumentProto_default_instance_;
    operations_research::sat::LinearArgumentProto::LinearArgumentProto((operations_research::sat::LinearArgumentProto *)v29, v5);
    if (v32)
      v7 = v32;
    else
      v7 = (operations_research::sat *)&operations_research::sat::_LinearExpressionProto_default_instance_;
    if (*((_DWORD *)a2 + 15) == 27)
    {
      v8 = *((_QWORD *)a2 + 6);
      v9 = *(const operations_research::sat::LinearExpressionProto **)(v8 + 40);
      if (v9)
      {
LABEL_18:
        operations_research::sat::SetToNegatedLinearExpression(v7, v9, v6);
        if (v31)
          v15 = (operations_research::sat **)(v31 + 8);
        else
          v15 = 0;
        if (!v30)
        {
LABEL_35:
          v2 = operations_research::sat::CpModelPresolver::PresolveLinMax(this, (uint64_t **)a2);
          operations_research::sat::LinearArgumentProto::~LinearArgumentProto((operations_research::sat::LinearArgumentProto *)v29);
          return v2;
        }
        v16 = 8 * v30;
        while (1)
        {
          v17 = *v15;
          if (*((_DWORD *)a2 + 15) == 27)
          {
            v18 = *((_QWORD *)a2 + 6);
            v19 = (unsigned int *)(v18 + 16);
            v20 = *(int **)(v18 + 32);
            if (!v20)
              goto LABEL_30;
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
            *((_DWORD *)a2 + 15) = 27;
            v24 = *((_QWORD *)a2 + 1);
            v25 = (google::protobuf::Arena *)(v24 & 0xFFFFFFFFFFFFFFFELL);
            if ((v24 & 1) != 0)
              v25 = *(google::protobuf::Arena **)v25;
            v18 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v25);
            *((_QWORD *)a2 + 6) = v18;
            v19 = (unsigned int *)(v18 + 16);
            v20 = *(int **)(v18 + 32);
            if (!v20)
            {
LABEL_30:
              v22 = *(_DWORD *)(v18 + 28);
              goto LABEL_32;
            }
          }
          v21 = *(int *)(v18 + 24);
          v22 = *v20;
          if ((int)v21 >= *v20)
          {
            if (v22 == *(_DWORD *)(v18 + 28))
            {
LABEL_32:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v19, v22 + 1);
              v20 = *(int **)(v18 + 32);
              v22 = *v20;
            }
            *v20 = v22 + 1;
            v23 = (const operations_research::sat::LinearExpressionProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(*(google::protobuf::Arena **)v19);
            v26 = *(_QWORD *)(v18 + 32);
            v27 = *(int *)(v18 + 24);
            *(_DWORD *)(v18 + 24) = v27 + 1;
            *(_QWORD *)(v26 + 8 * v27 + 8) = v23;
            goto LABEL_34;
          }
          *(_DWORD *)(v18 + 24) = v21 + 1;
          v23 = *(const operations_research::sat::LinearExpressionProto **)&v20[2 * v21 + 2];
LABEL_34:
          operations_research::sat::SetToNegatedLinearExpression(v17, v23, v14);
          ++v15;
          v16 -= 8;
          if (!v16)
            goto LABEL_35;
        }
      }
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 27;
      v10 = *((_QWORD *)a2 + 1);
      v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      if ((v10 & 1) != 0)
        v11 = *(google::protobuf::Arena **)v11;
      v8 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v11);
      *((_QWORD *)a2 + 6) = v8;
      v9 = *(const operations_research::sat::LinearExpressionProto **)(v8 + 40);
      if (v9)
        goto LABEL_18;
    }
    v12 = *(_QWORD *)(v8 + 8);
    v13 = (google::protobuf::Arena *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if ((v12 & 1) != 0)
      v13 = *(google::protobuf::Arena **)v13;
    v9 = (const operations_research::sat::LinearExpressionProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearExpressionProto>(v13);
    *(_QWORD *)(v8 + 40) = v9;
    goto LABEL_18;
  }
  return 0;
}

void sub_22DAC8040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::LinearArgumentProto::~LinearArgumentProto((operations_research::sat::LinearArgumentProto *)va);
  _Unwind_Resume(a1);
}

void sub_22DAC8054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::LinearArgumentProto::~LinearArgumentProto((operations_research::sat::LinearArgumentProto *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveLinMax(operations_research::sat::CpModelPresolver *this, uint64_t **a2)
{
  operations_research::sat::PresolveContext *v3;
  uint64_t *v6;
  const operations_research::sat::LinearExpressionProto *v7;
  const operations_research::sat::LinearExpressionProto *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const operations_research::sat::LinearExpressionProto **v12;
  uint64_t v13;
  uint64_t v14;
  const operations_research::sat::LinearExpressionProto *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  const operations_research::sat::LinearExpressionProto *v22;
  uint64_t *v23;
  google::protobuf::Arena *v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  google::protobuf::Arena **v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  operations_research::sat::LinearExpressionProto *v36;
  BOOL v37;
  char __p[23];
  char v39;

  v3 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (*((_BYTE *)v3 + 504))
    return 0;
  if (*((_DWORD *)a2 + 15) != 27)
  {
    v6 = &operations_research::sat::_LinearArgumentProto_default_instance_;
    if ((_DWORD)qword_25408AAC8)
      goto LABEL_5;
LABEL_32:
    v39 = 17;
    strcpy(__p, "lin_max: no exprs");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v3, (uint64_t)__p);
    if (v39 < 0)
      operator delete(*(void **)__p);
    return operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, (operations_research::sat::ConstraintProto *)a2);
  }
  v6 = a2[6];
  if (!*((_DWORD *)v6 + 6))
    goto LABEL_32;
LABEL_5:
  v7 = (const operations_research::sat::LinearExpressionProto *)v6[5];
  if (v7)
    v8 = v7;
  else
    v8 = (const operations_research::sat::LinearExpressionProto *)&operations_research::sat::_LinearExpressionProto_default_instance_;
  v9 = operations_research::sat::PresolveContext::MinOf(v3, v8);
  v10 = &operations_research::sat::_LinearArgumentProto_default_instance_;
  if (*((_DWORD *)a2 + 15) == 27)
    v10 = a2[6];
  v11 = v10[4];
  if (v11)
    v12 = (const operations_research::sat::LinearExpressionProto **)(v11 + 8);
  else
    v12 = 0;
  v13 = *((int *)v10 + 6);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    do
    {
      v15 = *v12++;
      v16 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v15);
      if (v9 <= v16)
        v9 = v16;
      v14 -= 8;
    }
    while (v14);
  }
  v17 = 0;
  v18 = 0;
  while (*((_DWORD *)a2 + 15) == 27)
  {
    v20 = a2[6];
    v21 = *((int *)v20 + 6);
    if (v17 >= v21)
      goto LABEL_35;
LABEL_26:
    v22 = *(const operations_research::sat::LinearExpressionProto **)(v20[4] + 8 * v17 + 8);
    if (operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v22) >= v9)
    {
      if (*((_DWORD *)a2 + 15) == 27)
      {
        v19 = (unint64_t)a2[6];
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 27;
        v23 = a2[1];
        v24 = (google::protobuf::Arena *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL);
        if ((v23 & 1) != 0)
          v24 = *(google::protobuf::Arena **)v24;
        v19 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(v24);
        a2[6] = (uint64_t *)v19;
      }
      operations_research::sat::LinearExpressionProto::CopyFrom(*(operations_research::sat::LinearExpressionProto **)(*(_QWORD *)(v19 + 32) + 8 * v18++ + 8), v22);
    }
    ++v17;
  }
  LODWORD(v21) = qword_25408AAC8;
  v20 = &operations_research::sat::_LinearArgumentProto_default_instance_;
  if (v17 < (int)qword_25408AAC8)
    goto LABEL_26;
LABEL_35:
  if (v18 >= (int)v21)
    return 0;
  v25 = *((_QWORD *)this + 2);
  strcpy(__p, "lin_max: Removed exprs");
  v39 = 22;
  operations_research::sat::PresolveContext::UpdateRuleStats(v25, (uint64_t)__p);
  if (v39 < 0)
  {
    operator delete(*(void **)__p);
    if (*((_DWORD *)a2 + 15) != 27)
      goto LABEL_41;
LABEL_38:
    v26 = a2[6];
    v27 = v26 + 2;
    v28 = (*((_DWORD *)v26 + 6) - v18);
    if ((int)v28 >= 1)
      goto LABEL_47;
  }
  else
  {
    if (*((_DWORD *)a2 + 15) == 27)
      goto LABEL_38;
LABEL_41:
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 27;
    v29 = a2[1];
    v30 = (google::protobuf::Arena **)((unint64_t)v29 & 0xFFFFFFFFFFFFFFFELL);
    if ((v29 & 1) != 0)
    {
      v31 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>(*v30);
      a2[6] = (uint64_t *)v31;
      v33 = *((_DWORD *)a2 + 15);
      v27 = (_QWORD *)(v31 + 16);
      if (v33 != 27)
        goto LABEL_46;
LABEL_43:
      v28 = (*(_DWORD *)(v31 + 24) - v18);
      if ((int)v28 >= 1)
      {
LABEL_47:
        v34 = 8 * v18 + 8;
        v35 = v28;
        do
        {
          v36 = *(operations_research::sat::LinearExpressionProto **)(v27[2] + v34);
          if (v36)
            v37 = *v27 == 0;
          else
            v37 = 0;
          if (v37)
          {
            operations_research::sat::LinearExpressionProto::~LinearExpressionProto(v36);
            MEMORY[0x22E31DF78]();
          }
          v34 += 8;
          --v35;
        }
        while (v35);
        google::protobuf::internal::RepeatedPtrFieldBase::CloseGap((uint64_t)v27, v18, v28);
      }
    }
    else
    {
      v31 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearArgumentProto>((google::protobuf::Arena *)v30);
      a2[6] = (uint64_t *)v31;
      v32 = *((_DWORD *)a2 + 15);
      v27 = (_QWORD *)(v31 + 16);
      if (v32 == 27)
        goto LABEL_43;
LABEL_46:
      v28 = (qword_25408AAC8 - v18);
      if ((int)v28 >= 1)
        goto LABEL_47;
    }
  }
  return 1;
}

void sub_22DAC83AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveIntAbs(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  operations_research::sat::PresolveContext *v4;
  uint64_t v5;
  uint64_t *v6;
  const char *v7;
  int v8;
  unint64_t v9;
  const char *v10;
  char IsIncludedIn;
  uint64_t v12;
  const char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  operations_research::sat::ConstraintProto *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string **v36;
  uint64_t v37;
  google::protobuf::Arena *v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::string **v45;
  uint64_t v46;
  google::protobuf::Arena *v47;
  std::string *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  google::protobuf::Arena *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  google::protobuf::Arena *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void *v73;
  void *v74[2];
  unint64_t v75;
  void *__p;
  void *v77;
  void *v78[2];
  uint64_t *v79[3];
  unint64_t v80[3];

  LODWORD(v80[0]) = *((_DWORD *)a2 + 4);
  LODWORD(v79[0]) = 0;
  if (LODWORD(v80[0]))
  {
    v79[0] = (uint64_t *)google::MakeCheckOpString<int,int>((int)v80, (int)v79, "ct->enforcement_literal_size() == 0");
    if (v79[0])
    {
      google::LogMessageFatal::LogMessageFatal(v80, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 577, v79);
      google::LogMessage::stream((google::LogMessage *)v80);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v80);
    }
  }
  v4 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (*((_BYTE *)v4 + 504))
    return 0;
  if (*((_DWORD *)a2 + 15) == 9)
    v6 = (uint64_t *)*((_QWORD *)a2 + 6);
  else
    v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  v7 = (const char *)*((unsigned int *)v6 + 9);
  v8 = *(_DWORD *)v6[3];
  if (~v8 <= v8)
    v9 = v8;
  else
    v9 = ~v8;
  operations_research::sat::PresolveContext::DomainOf(v4, (const char *)v9, v80);
  operations_research::Domain::Negation((operations_research::Domain *)v80, v10, &v75);
  operations_research::Domain::UnionWith((operations_research::Domain *)v80, (const operations_research::Domain *)&v75, (unint64_t *)&v77);
  operations_research::Domain::Domain(&v73, 0, 0x7FFFFFFFFFFFFFFFLL);
  operations_research::Domain::IntersectionWith(&v77, (const operations_research::Domain *)&v73, (unint64_t *)v79);
  if ((v73 & 1) != 0)
  {
    operator delete(v74[0]);
    if ((v77 & 1) == 0)
    {
LABEL_12:
      if ((v75 & 1) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if ((v77 & 1) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v78[0]);
  if ((v75 & 1) != 0)
LABEL_13:
    operator delete(__p);
LABEL_14:
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v7, (unint64_t *)&v77);
  IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&v77, (const operations_research::Domain *)v79);
  if ((v77 & 1) != 0)
    operator delete(v78[0]);
  if ((IsIncludedIn & 1) == 0)
  {
    if ((operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), v7, (const operations_research::Domain *)v79, 0) & 1) == 0)
    {
      v5 = 1;
      if (((uint64_t)v79[0] & 1) == 0)
        goto LABEL_127;
LABEL_126:
      operator delete(v79[1]);
      goto LABEL_127;
    }
    v12 = *((_QWORD *)this + 2);
    v77 = operator new(0x28uLL);
    *(_OWORD *)v78 = xmmword_22DCE6530;
    strcpy((char *)v77, "int_abs: propagate domain x to abs(x)");
    operations_research::sat::PresolveContext::UpdateRuleStats(v12, (uint64_t)&v77);
    if (SHIBYTE(v78[1]) < 0)
      operator delete(v77);
  }
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v7, (unint64_t *)&v77);
  operations_research::Domain::Negation((operations_research::Domain *)&v77, v13, (unint64_t *)&v73);
  operations_research::Domain::UnionWith((operations_research::Domain *)&v77, (const operations_research::Domain *)&v73, &v75);
  if ((v73 & 1) != 0)
    operator delete(v74[0]);
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9, (unint64_t *)&v73);
  v14 = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&v73, (const operations_research::Domain *)&v75);
  if ((v73 & 1) != 0)
    operator delete(v74[0]);
  if ((v14 & 1) == 0)
  {
    if ((operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9, (const operations_research::Domain *)&v75, 0) & 1) == 0)goto LABEL_122;
    v15 = *((_QWORD *)this + 2);
    v73 = operator new(0x28uLL);
    *(_OWORD *)v74 = xmmword_22DCE6530;
    strcpy((char *)v73, "int_abs: propagate domain abs(x) to x");
    operations_research::sat::PresolveContext::UpdateRuleStats(v15, (uint64_t)&v73);
    if (SHIBYTE(v74[1]) < 0)
      operator delete(v73);
  }
  if ((operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9) & 0x8000000000000000) == 0&& !operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9))
  {
    v21 = *((_QWORD *)this + 2);
    v73 = operator new(0x20uLL);
    *(_OWORD *)v74 = xmmword_22DCE5C00;
    strcpy((char *)v73, "int_abs: converted to equality");
    operations_research::sat::PresolveContext::UpdateRuleStats(v21, (uint64_t)&v73);
    if (SHIBYTE(v74[1]) < 0)
      operator delete(v73);
    v22 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
    v23 = *(int **)(v22 + 56);
    if (v23)
    {
      v24 = *(int *)(v22 + 48);
      v25 = *v23;
      if ((int)v24 < *v23)
      {
        *(_DWORD *)(v22 + 48) = v24 + 1;
        v26 = *(_QWORD *)&v23[2 * v24 + 2];
        goto LABEL_62;
      }
      if (v25 != *(_DWORD *)(v22 + 52))
      {
LABEL_61:
        *v23 = v25 + 1;
        v26 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v22 + 40));
        v34 = *(_QWORD *)(v22 + 56);
        v35 = *(int *)(v22 + 48);
        *(_DWORD *)(v22 + 48) = v35 + 1;
        *(_QWORD *)(v34 + 8 * v35 + 8) = v26;
LABEL_62:
        v36 = (std::string **)(v26 + 40);
        v37 = *(_QWORD *)(v26 + 8);
        v38 = (google::protobuf::Arena *)(v37 & 0xFFFFFFFFFFFFFFFELL);
        if ((v37 & 1) != 0)
        {
          v38 = *(google::protobuf::Arena **)v38;
          v39 = *v36;
          if (*v36 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_64;
        }
        else
        {
          v39 = *v36;
          if (*v36 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_64:
            std::string::operator=(v39, *((const std::string **)a2 + 5));
            goto LABEL_84;
          }
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v36, v38, *((__int128 **)a2 + 5));
LABEL_84:
        if (*(_DWORD *)(v26 + 60) == 12)
        {
          v49 = *(_QWORD *)(v26 + 48);
          v51 = *(unsigned int *)(v49 + 16);
          v50 = (unsigned int *)(v49 + 16);
          v52 = v51 + 1;
          if ((_DWORD)v51 != *(_DWORD *)(v49 + 20))
            goto LABEL_91;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint(v26);
          *(_DWORD *)(v26 + 60) = 12;
          v53 = *(_QWORD *)(v26 + 8);
          v54 = (google::protobuf::Arena *)(v53 & 0xFFFFFFFFFFFFFFFELL);
          if ((v53 & 1) != 0)
            v54 = *(google::protobuf::Arena **)v54;
          v49 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v54);
          *(_QWORD *)(v26 + 48) = v49;
          v51 = *(unsigned int *)(v49 + 16);
          v50 = (unsigned int *)(v49 + 16);
          v52 = v51 + 1;
          if ((_DWORD)v51 != *(_DWORD *)(v49 + 20))
            goto LABEL_91;
        }
        google::protobuf::RepeatedField<int>::Reserve(v50, v52);
LABEL_91:
        *(_DWORD *)(*(_QWORD *)(v49 + 24) + 4 * v51) = (_DWORD)v7;
        v55 = *(unsigned int *)(v49 + 40);
        *(_DWORD *)(v49 + 16) = v52;
        if ((_DWORD)v55 == *(_DWORD *)(v49 + 44))
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v49 + 40), v55 + 1);
          v52 = *v50;
        }
        *(_QWORD *)(*(_QWORD *)(v49 + 48) + 8 * v55) = 1;
        *(_DWORD *)(v49 + 40) = v55 + 1;
        if (v52 == *(_DWORD *)(v49 + 20))
          google::protobuf::RepeatedField<int>::Reserve(v50, v52 + 1);
        *(_DWORD *)(*(_QWORD *)(v49 + 24) + 4 * v52) = v9;
        *(_DWORD *)(v49 + 16) = v52 + 1;
        v56 = *(unsigned int *)(v49 + 40);
        if ((_DWORD)v56 == *(_DWORD *)(v49 + 44))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v49 + 40), v56 + 1);
        v57 = (_DWORD *)(v49 + 64);
        v58 = *(unsigned int *)(v49 + 64);
        *(_QWORD *)(*(_QWORD *)(v49 + 48) + 8 * v56) = -1;
        *(_DWORD *)(v49 + 40) = v56 + 1;
        v59 = *(_DWORD *)(v49 + 68);
        v60 = v58 + 1;
        if ((_DWORD)v58 == v59)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v49 + 64), v58 + 1);
          v59 = *(_DWORD *)(v49 + 68);
        }
        v61 = *(_QWORD *)(v49 + 72);
        *(_QWORD *)(v61 + 8 * v58) = 0;
        *(_DWORD *)(v49 + 64) = v60;
        v62 = v58 + 2;
        if (v60 == v59)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v49 + 64), v58 + 2);
          v61 = *(_QWORD *)(v49 + 72);
        }
        goto LABEL_121;
      }
    }
    else
    {
      v25 = *(_DWORD *)(v22 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v22 + 40), v25 + 1);
    v23 = *(int **)(v22 + 56);
    v25 = *v23;
    goto LABEL_61;
  }
  if (operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9) <= 0&& !operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9))
  {
    v28 = *((_QWORD *)this + 2);
    v73 = operator new(0x20uLL);
    *(_OWORD *)v74 = xmmword_22DCE5C00;
    strcpy((char *)v73, "int_abs: converted to equality");
    operations_research::sat::PresolveContext::UpdateRuleStats(v28, (uint64_t)&v73);
    if (SHIBYTE(v74[1]) < 0)
      operator delete(v73);
    v29 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
    v30 = *(int **)(v29 + 56);
    if (v30)
    {
      v31 = *(int *)(v29 + 48);
      v32 = *v30;
      if ((int)v31 < *v30)
      {
        *(_DWORD *)(v29 + 48) = v31 + 1;
        v33 = *(_QWORD *)&v30[2 * v31 + 2];
        goto LABEL_77;
      }
      if (v32 != *(_DWORD *)(v29 + 52))
      {
LABEL_76:
        *v30 = v32 + 1;
        v33 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v29 + 40));
        v43 = *(_QWORD *)(v29 + 56);
        v44 = *(int *)(v29 + 48);
        *(_DWORD *)(v29 + 48) = v44 + 1;
        *(_QWORD *)(v43 + 8 * v44 + 8) = v33;
LABEL_77:
        v45 = (std::string **)(v33 + 40);
        v46 = *(_QWORD *)(v33 + 8);
        v47 = (google::protobuf::Arena *)(v46 & 0xFFFFFFFFFFFFFFFELL);
        if ((v46 & 1) != 0)
        {
          v47 = *(google::protobuf::Arena **)v47;
          v48 = *v45;
          if (*v45 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_79;
        }
        else
        {
          v48 = *v45;
          if (*v45 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_79:
            std::string::operator=(v48, *((const std::string **)a2 + 5));
LABEL_104:
            if (*(_DWORD *)(v33 + 60) == 12)
            {
              v63 = *(_QWORD *)(v33 + 48);
            }
            else
            {
              operations_research::sat::ConstraintProto::clear_constraint(v33);
              *(_DWORD *)(v33 + 60) = 12;
              v64 = *(_QWORD *)(v33 + 8);
              v65 = (google::protobuf::Arena *)(v64 & 0xFFFFFFFFFFFFFFFELL);
              if ((v64 & 1) != 0)
                v65 = *(google::protobuf::Arena **)v65;
              v63 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v65);
              *(_QWORD *)(v33 + 48) = v63;
            }
            v66 = *(unsigned int *)(v63 + 16);
            v67 = v66 + 1;
            if ((_DWORD)v66 == *(_DWORD *)(v63 + 20))
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v63 + 16), v66 + 1);
            *(_DWORD *)(*(_QWORD *)(v63 + 24) + 4 * v66) = (_DWORD)v7;
            v68 = *(unsigned int *)(v63 + 40);
            *(_DWORD *)(v63 + 16) = v67;
            if ((_DWORD)v68 == *(_DWORD *)(v63 + 44))
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 40), v68 + 1);
              v67 = *(_DWORD *)(v63 + 16);
            }
            *(_QWORD *)(*(_QWORD *)(v63 + 48) + 8 * v68) = 1;
            *(_DWORD *)(v63 + 40) = v68 + 1;
            if (v67 == *(_DWORD *)(v63 + 20))
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v63 + 16), v67 + 1);
            *(_DWORD *)(*(_QWORD *)(v63 + 24) + 4 * v67) = v9;
            *(_DWORD *)(v63 + 16) = v67 + 1;
            v69 = *(unsigned int *)(v63 + 40);
            if ((_DWORD)v69 == *(_DWORD *)(v63 + 44))
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 40), v69 + 1);
            v57 = (_DWORD *)(v63 + 64);
            v70 = *(unsigned int *)(v63 + 64);
            *(_QWORD *)(*(_QWORD *)(v63 + 48) + 8 * v69) = 1;
            *(_DWORD *)(v63 + 40) = v69 + 1;
            v71 = *(_DWORD *)(v63 + 68);
            v60 = v70 + 1;
            if ((_DWORD)v70 == v71)
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v70 + 1);
              v71 = *(_DWORD *)(v63 + 68);
            }
            v61 = *(_QWORD *)(v63 + 72);
            *(_QWORD *)(v61 + 8 * v70) = 0;
            *(_DWORD *)(v63 + 64) = v60;
            v62 = v70 + 2;
            if (v60 == v71)
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v70 + 2);
              v61 = *(_QWORD *)(v63 + 72);
            }
LABEL_121:
            *(_QWORD *)(v61 + 8 * v60) = 0;
            *v57 = v62;
            operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                         + 2));
            operations_research::sat::ConstraintProto::Clear(a2);
            goto LABEL_122;
          }
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v45, v47, *((__int128 **)a2 + 5));
        goto LABEL_104;
      }
    }
    else
    {
      v32 = *(_DWORD *)(v29 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v29 + 40), v32 + 1);
    v30 = *(int **)(v29 + 56);
    v32 = *v30;
    goto LABEL_76;
  }
  if (operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), (int)v7)|| operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), v7))
  {
    if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), v7))
    {
LABEL_70:
      v42 = *((_QWORD *)this + 2);
      v73 = operator new(0x20uLL);
      *(_OWORD *)v74 = xmmword_22DCE6010;
      strcpy((char *)v73, "int_abs: remove constraint");
      operations_research::sat::PresolveContext::UpdateRuleStats(v42, (uint64_t)&v73);
      if (SHIBYTE(v74[1]) < 0)
        operator delete(v73);
      operations_research::sat::ConstraintProto::Clear(a2);
LABEL_122:
      v5 = 1;
      if ((v75 & 1) == 0)
        goto LABEL_124;
      goto LABEL_123;
    }
    operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)this + 2), (int)v7);
    v16 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
    v17 = *(int **)(v16 + 56);
    if (v17)
    {
      v18 = *(int *)(v16 + 48);
      v19 = *v17;
      if ((int)v18 < *v17)
      {
        *(_DWORD *)(v16 + 48) = v18 + 1;
        v20 = *(operations_research::sat::ConstraintProto **)&v17[2 * v18 + 2];
LABEL_69:
        operations_research::sat::ConstraintProto::CopyFrom(v20, a2);
        goto LABEL_70;
      }
      if (v19 != *(_DWORD *)(v16 + 52))
      {
LABEL_68:
        *v17 = v19 + 1;
        v20 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v16 + 40));
        v40 = *(_QWORD *)(v16 + 56);
        v41 = *(int *)(v16 + 48);
        *(_DWORD *)(v16 + 48) = v41 + 1;
        *(_QWORD *)(v40 + 8 * v41 + 8) = v20;
        goto LABEL_69;
      }
    }
    else
    {
      v19 = *(_DWORD *)(v16 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v16 + 40), v19 + 1);
    v17 = *(int **)(v16 + 56);
    v19 = *v17;
    goto LABEL_68;
  }
  if (operations_research::sat::PresolveContext::StoreAbsRelation(*((operations_research::sat::PresolveContext **)this + 2), (int)v7, v9))
  {
    v27 = *((_QWORD *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(&v73, "int_abs: store abs(x) == y");
    operations_research::sat::PresolveContext::UpdateRuleStats(v27, (uint64_t)&v73);
    if (SHIBYTE(v74[1]) < 0)
      operator delete(v73);
  }
  v5 = 0;
  if ((v75 & 1) != 0)
LABEL_123:
    operator delete(__p);
LABEL_124:
  if ((v77 & 1) == 0)
  {
    if (((uint64_t)v79[0] & 1) == 0)
      goto LABEL_127;
    goto LABEL_126;
  }
  operator delete(v78[0]);
  if (((uint64_t)v79[0] & 1) != 0)
    goto LABEL_126;
LABEL_127:
  if ((v80[0] & 1) != 0)
    operator delete((void *)v80[1]);
  return v5;
}

void sub_22DAC8E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAC8E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,char a28,void *a29)
{
  if (a15 < 0)
    operator delete(__p);
  if ((a16 & 1) != 0)
    operator delete(a17);
  if ((a19 & 1) != 0)
    operator delete(a20);
  if ((a25 & 1) != 0)
    operator delete(a26);
  if ((a28 & 1) != 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::ConstraintProto::set_name(uint64_t a1, std::string *__str)
{
  std::string **v4;
  uint64_t v5;
  google::protobuf::Arena *v6;
  std::string *v7;

  v4 = (std::string **)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (google::protobuf::Arena *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
  {
    v6 = *(google::protobuf::Arena **)v6;
    v7 = *v4;
    if (*v4 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
  }
  else
  {
    v7 = *v4;
    if (*v4 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      std::string::operator=(v7, __str);
      return;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v4, v6, (__int128 *)__str);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveIntMin(operations_research::sat::CpModelPresolver *this, const operations_research::sat::IntegerArgumentProto **a2)
{
  uint64_t v2;
  unint64_t v5;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  google::protobuf::Arena *v17;
  _BYTE v19[16];
  int v20;
  int *v21;
  int v22;

  if (!*(_BYTE *)(*((_QWORD *)this + 2) + 504))
  {
    if (*((_DWORD *)a2 + 15) == 10)
    {
      operations_research::sat::IntegerArgumentProto::IntegerArgumentProto((operations_research::sat::IntegerArgumentProto *)v19, a2[6]);
      if (*((_DWORD *)a2 + 15) != 9)
        goto LABEL_5;
    }
    else
    {
      operations_research::sat::IntegerArgumentProto::IntegerArgumentProto((operations_research::sat::IntegerArgumentProto *)v19, (const operations_research::sat::IntegerArgumentProto *)&operations_research::sat::_IntegerArgumentProto_default_instance_);
      if (*((_DWORD *)a2 + 15) != 9)
      {
LABEL_5:
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 9;
        v5 = (unint64_t)a2[1];
        v6 = (google::protobuf::Arena *)(v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((v5 & 1) != 0)
          v6 = *(google::protobuf::Arena **)v6;
        v7 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v6);
        a2[6] = (const operations_research::sat::IntegerArgumentProto *)v7;
        v8 = v20;
        *(_DWORD *)(v7 + 36) = ~v22;
        if (!(_DWORD)v8)
          goto LABEL_20;
LABEL_11:
        v9 = v21;
        v10 = 4 * v8;
        while (1)
        {
          v11 = *v9;
          if (*((_DWORD *)a2 + 15) != 9)
            break;
          v12 = (uint64_t)a2[6];
          v14 = *(unsigned int *)(v12 + 16);
          v13 = (unsigned int *)(v12 + 16);
          v15 = v14 + 1;
          if ((_DWORD)v14 == *(_DWORD *)(v12 + 20))
            goto LABEL_19;
LABEL_12:
          *(_DWORD *)(*(_QWORD *)(v12 + 24) + 4 * v14) = ~v11;
          *(_DWORD *)(v12 + 16) = v15;
          ++v9;
          v10 -= 4;
          if (!v10)
            goto LABEL_20;
        }
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 9;
        v16 = (unint64_t)a2[1];
        v17 = (google::protobuf::Arena *)(v16 & 0xFFFFFFFFFFFFFFFELL);
        if ((v16 & 1) != 0)
          v17 = *(google::protobuf::Arena **)v17;
        v12 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v17);
        a2[6] = (const operations_research::sat::IntegerArgumentProto *)v12;
        v14 = *(unsigned int *)(v12 + 16);
        v13 = (unsigned int *)(v12 + 16);
        v15 = v14 + 1;
        if ((_DWORD)v14 != *(_DWORD *)(v12 + 20))
          goto LABEL_12;
LABEL_19:
        google::protobuf::RepeatedField<int>::Reserve(v13, v15);
        goto LABEL_12;
      }
    }
    v8 = v20;
    *((_DWORD *)a2[6] + 9) = ~v22;
    if (!(_DWORD)v8)
    {
LABEL_20:
      v2 = operations_research::sat::CpModelPresolver::PresolveIntMax(this, (operations_research::sat::ConstraintProto *)a2);
      operations_research::sat::IntegerArgumentProto::~IntegerArgumentProto((operations_research::sat::IntegerArgumentProto *)v19);
      return v2;
    }
    goto LABEL_11;
  }
  return 0;
}

void sub_22DAC91A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operations_research::sat::IntegerArgumentProto::~IntegerArgumentProto((operations_research::sat::IntegerArgumentProto *)&a9);
  _Unwind_Resume(a1);
}

void sub_22DAC91B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  operations_research::sat::IntegerArgumentProto::~IntegerArgumentProto((operations_research::sat::IntegerArgumentProto *)&a9);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveIntProd(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  char v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t v13;
  google::protobuf::Arena *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  operations_research::sat::PresolveContext *v20;
  uint64_t v21;
  const char *v22;
  int *v23;
  int v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  const char *v36;
  _BOOL4 v37;
  unint64_t v38;
  unsigned int v39;
  operations_research::sat::CpModelProto **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  void **v46;
  void **v47;
  unsigned int v48;
  void *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  operations_research::sat::PresolveContext *v54;
  uint64_t v55;
  uint64_t v56;
  google::protobuf::Arena *v57;
  _BOOL4 IsFixed;
  operations_research::sat::PresolveContext *v59;
  char v60;
  operations_research::sat::ConstraintProto *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  const char *v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  const char *v79;
  operations_research::sat::PresolveContext *v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  operations_research::sat::ConstraintProto *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  operations_research::sat::PresolveContext *v103;
  char v104;
  uint64_t v105;
  operations_research::sat::PresolveContext *v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  operations_research::sat::ConstraintProto *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  const char *v126;
  int v127;
  char v128;
  char v129;
  BOOL v130;
  unint64_t v131[3];
  void *v132;
  void *v133[2];
  void *__p;
  void *v135[2];

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504) || *((_DWORD *)a2 + 4))
    goto LABEL_3;
  v6 = 0;
  v3 = 0;
  v7 = 1;
  while (*((_DWORD *)a2 + 15) == 11)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v6 >= *((int *)v9 + 4))
      goto LABEL_22;
LABEL_13:
    v10 = *(_DWORD *)(v9[3] + 4 * v6);
    operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)this + 2), v10, (uint64_t)&__p);
    v11 = (int)__p;
    if ((_DWORD)__p != v10 && v135[1] == 0)
    {
      if (*((_DWORD *)a2 + 15) == 11)
      {
        v8 = *((_QWORD *)a2 + 6);
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 11;
        v13 = *((_QWORD *)a2 + 1);
        v14 = (google::protobuf::Arena *)(v13 & 0xFFFFFFFFFFFFFFFELL);
        if ((v13 & 1) != 0)
          v14 = *(google::protobuf::Arena **)v14;
        v8 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v14);
        *((_QWORD *)a2 + 6) = v8;
        v11 = (int)__p;
      }
      *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v6) = v11;
      v7 *= (uint64_t)v135[0];
      v3 = 1;
    }
    ++v6;
  }
  v9 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
  if (v6 < (int)qword_25408AAF8)
    goto LABEL_13;
LABEL_22:
  if (v7 == 1)
    goto LABEL_23;
  v18 = *((_QWORD *)this + 2);
  __p = operator new(0x30uLL);
  *(_OWORD *)v135 = xmmword_22DCED9E0;
  strcpy((char *)__p, "int_prod: extracted product by constant.");
  operations_research::sat::PresolveContext::UpdateRuleStats(v18, (uint64_t)&__p);
  if (SHIBYTE(v135[1]) < 0)
    operator delete(__p);
  if (*((_DWORD *)a2 + 15) == 11)
  {
    v19 = *(unsigned int *)(*((_QWORD *)a2 + 6) + 36);
    v20 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
    v21 = *((_QWORD *)v20 + 6);
    v22 = (const char *)*(unsigned int *)(v21 + 24);
    v23 = *(int **)(v21 + 32);
    if (v23)
      goto LABEL_30;
LABEL_50:
    v24 = *(_DWORD *)(v21 + 28);
LABEL_63:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v21 + 16), v24 + 1);
    v23 = *(int **)(v21 + 32);
    v24 = *v23;
LABEL_64:
    *v23 = v24 + 1;
    v25 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*(google::protobuf::Arena **)(v21 + 16));
    v42 = *(_QWORD *)(v21 + 32);
    v43 = *(int *)(v21 + 24);
    *(_DWORD *)(v21 + 24) = v43 + 1;
    *(_QWORD *)(v42 + 8 * v43 + 8) = v25;
    v20 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  }
  else
  {
    v19 = dword_25408AB0C;
    v20 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
    v21 = *((_QWORD *)v20 + 6);
    v22 = (const char *)*(unsigned int *)(v21 + 24);
    v23 = *(int **)(v21 + 32);
    if (!v23)
      goto LABEL_50;
LABEL_30:
    v24 = *v23;
    if ((int)v22 >= *v23)
    {
      if (v24 == *(_DWORD *)(v21 + 28))
        goto LABEL_63;
      goto LABEL_64;
    }
    *(_DWORD *)(v21 + 24) = (_DWORD)v22 + 1;
    v25 = *(_QWORD *)&v23[2 * (int)v22 + 2];
  }
  operations_research::sat::PresolveContext::DomainOf(v20, (const char *)v19, (unint64_t *)&v132);
  operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v132, v7, (unint64_t *)&__p);
  *(_DWORD *)(v25 + 16) = 0;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 16), (unint64_t)__p >> 1);
  v45 = __p & 1;
  if ((__p & 1) != 0)
    v46 = (void **)v135[0];
  else
    v46 = v135;
  if ((unint64_t)__p >= 2)
  {
    v125 = v19;
    v126 = v22;
    v128 = v3;
    v47 = &v46[2 * ((unint64_t)__p >> 1)];
    v48 = *(_DWORD *)(v25 + 16);
    do
    {
      v49 = *v46;
      v50 = *(_DWORD *)(v25 + 20);
      v51 = v48 + 1;
      if (v48 == v50)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 16), v48 + 1);
        v50 = *(_DWORD *)(v25 + 20);
      }
      v52 = *(_QWORD *)(v25 + 24);
      *(_QWORD *)(v52 + 8 * v48) = v49;
      *(_DWORD *)(v25 + 16) = v51;
      v53 = v46[1];
      v48 += 2;
      if (v51 == v50)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 16), v48);
        v52 = *(_QWORD *)(v25 + 24);
      }
      *(_QWORD *)(v52 + 8 * v51) = v53;
      *(_DWORD *)(v25 + 16) = v48;
      v46 += 2;
    }
    while (v46 != v47);
    v45 = __p & 1;
    v3 = v128;
    v22 = v126;
    v19 = v125;
  }
  if (v45)
    operator delete(v135[0]);
  if ((v132 & 1) != 0)
    operator delete(v133[0]);
  operations_research::sat::PresolveContext::InitializeNewDomains(*((operations_research::sat::PresolveContext **)this + 2), v44);
  v54 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (*((_BYTE *)v54 + 504))
    goto LABEL_3;
  if (*((_DWORD *)a2 + 15) == 11)
  {
    v55 = *((_QWORD *)a2 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 11;
    v56 = *((_QWORD *)a2 + 1);
    v57 = (google::protobuf::Arena *)(v56 & 0xFFFFFFFFFFFFFFFELL);
    if ((v56 & 1) != 0)
      v57 = *(google::protobuf::Arena **)v57;
    v55 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerArgumentProto>(v57);
    *((_QWORD *)a2 + 6) = v55;
    v54 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  }
  *(_DWORD *)(v55 + 36) = (_DWORD)v22;
  IsFixed = operations_research::sat::PresolveContext::IsFixed(v54, v22);
  v59 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (!IsFixed)
  {
    if (!operations_research::sat::PresolveContext::StoreAffineRelation(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v19, v22, v7, 0))
    {
      v127 = (int)v22;
      v129 = v3;
      v61 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
      v62 = operations_research::sat::ConstraintProto::mutable_linear(v61);
      v63 = v62;
      v65 = (unsigned int *)(v62 + 16);
      v64 = *(unsigned int *)(v62 + 16);
      v66 = v64 + 1;
      if ((_DWORD)v64 == *(_DWORD *)(v62 + 20))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v62 + 16), v64 + 1);
      *(_DWORD *)(*(_QWORD *)(v63 + 24) + 4 * v64) = v19;
      v67 = *(unsigned int *)(v63 + 40);
      *(_DWORD *)(v63 + 16) = v66;
      if ((_DWORD)v67 == *(_DWORD *)(v63 + 44))
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 40), v67 + 1);
        v66 = *v65;
      }
      *(_QWORD *)(*(_QWORD *)(v63 + 48) + 8 * v67) = 1;
      *(_DWORD *)(v63 + 40) = v67 + 1;
      if (v66 == *(_DWORD *)(v63 + 20))
        google::protobuf::RepeatedField<int>::Reserve(v65, v66 + 1);
      *(_DWORD *)(*(_QWORD *)(v63 + 24) + 4 * v66) = v127;
      *(_DWORD *)(v63 + 16) = v66 + 1;
      v68 = *(unsigned int *)(v63 + 40);
      if ((_DWORD)v68 == *(_DWORD *)(v63 + 44))
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 40), v68 + 1);
      v69 = *(unsigned int *)(v63 + 64);
      *(_QWORD *)(*(_QWORD *)(v63 + 48) + 8 * v68) = -v7;
      *(_DWORD *)(v63 + 40) = v68 + 1;
      v70 = *(_DWORD *)(v63 + 68);
      v71 = v69 + 1;
      v3 = v129;
      if ((_DWORD)v69 == v70)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v69 + 1);
        v70 = *(_DWORD *)(v63 + 68);
      }
      v72 = *(_QWORD *)(v63 + 72);
      *(_QWORD *)(v72 + 8 * v69) = 0;
      *(_DWORD *)(v63 + 64) = v71;
      v73 = v69 + 2;
      if (v71 == v70)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v73);
        v72 = *(_QWORD *)(v63 + 72);
      }
      *(_QWORD *)(v72 + 8 * v71) = 0;
      *(_DWORD *)(v63 + 64) = v73;
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
    }
    goto LABEL_23;
  }
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v22, (unint64_t *)&v132);
  operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v132, 0, v7, (unint64_t *)&__p);
  v60 = operations_research::sat::PresolveContext::IntersectDomainWith(v59, (const char *)v19, (const operations_research::Domain *)&__p, 0);
  if ((__p & 1) != 0)
  {
    operator delete(v135[0]);
    if ((v132 & 1) != 0)
      goto LABEL_127;
LABEL_89:
    if ((v60 & 1) == 0)
      goto LABEL_3;
LABEL_23:
    operations_research::Domain::Domain(&__p, 1);
    v15 = *((_DWORD *)a2 + 15);
    if (v15 == 11)
    {
      v16 = (uint64_t *)*((_QWORD *)a2 + 6);
      v17 = *((int *)v16 + 4);
      if (!(_DWORD)v17)
        goto LABEL_40;
    }
    else
    {
      v16 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v17 = (int)qword_25408AAF8;
      if (!(_DWORD)qword_25408AAF8)
        goto LABEL_40;
    }
    v26 = (unsigned int *)v16[3];
    v27 = 4 * v17;
    do
    {
      operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*v26, v131);
      operations_research::Domain::ContinuousMultiplicationBy((operations_research::Domain *)&__p, (const operations_research::Domain *)v131, (unint64_t *)&v132, v28);
      if ((__p & 1) != 0)
        operator delete(v135[0]);
      __p = v132;
      *(_OWORD *)v135 = *(_OWORD *)v133;
      v132 = 0;
      if ((v131[0] & 1) != 0)
        operator delete((void *)v131[1]);
      ++v26;
      v27 -= 4;
    }
    while (v27);
    v15 = *((_DWORD *)a2 + 15);
LABEL_40:
    LOBYTE(v131[0]) = 0;
    v29 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
    v30 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
    if (v15 == 11)
      v30 = (uint64_t *)*((_QWORD *)a2 + 6);
    if ((operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*((unsigned int *)v30 + 9), (const operations_research::Domain *)&__p, (BOOL *)v131) & 1) == 0)goto LABEL_151;
    if (LOBYTE(v131[0]))
    {
      v31 = *((_QWORD *)this + 2);
      v132 = operator new(0x28uLL);
      *(_OWORD *)v133 = xmmword_22DCE5C10;
      strcpy((char *)v132, "int_prod: reduced target domain.");
      operations_research::sat::PresolveContext::UpdateRuleStats(v31, (uint64_t)&v132);
      if (SHIBYTE(v133[1]) < 0)
        operator delete(v132);
    }
    if (*((_DWORD *)a2 + 15) == 11)
    {
      v32 = (uint64_t *)*((_QWORD *)a2 + 6);
      if (*((_DWORD *)v32 + 4) != 2)
      {
LABEL_48:
        v29 = (uint64_t *)*((_QWORD *)a2 + 6);
        goto LABEL_110;
      }
    }
    else
    {
      v32 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      if ((_DWORD)qword_25408AAF8 != 2)
        goto LABEL_110;
    }
    v33 = (unsigned int *)v32[3];
    v34 = *v33;
    v35 = v33[1];
    v36 = (const char *)*((unsigned int *)v32 + 9);
    v37 = operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v35);
    if (v37)
      v38 = v35;
    else
      v38 = v34;
    if (v37)
      v39 = v34;
    else
      v39 = v35;
    if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v38))
    {
      v40 = (operations_research::sat::CpModelProto **)*((_QWORD *)this + 2);
      if (v39 != (_DWORD)v36)
      {
        v88 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(v40[6]);
        v89 = operations_research::sat::ConstraintProto::mutable_linear(v88);
        v90 = *(unsigned int *)(v89 + 16);
        if ((_DWORD)v90 == *(_DWORD *)(v89 + 20))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v89 + 16), v90 + 1);
        *(_DWORD *)(*(_QWORD *)(v89 + 24) + 4 * v90) = v39;
        *(_DWORD *)(v89 + 16) = v90 + 1;
        v91 = operations_research::sat::ConstraintProto::mutable_linear(v88);
        v92 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v38);
        v93 = *(unsigned int *)(v91 + 40);
        if ((_DWORD)v93 == *(_DWORD *)(v91 + 44))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v91 + 40), v93 + 1);
        *(_QWORD *)(*(_QWORD *)(v91 + 48) + 8 * v93) = v92;
        *(_DWORD *)(v91 + 40) = v93 + 1;
        v94 = operations_research::sat::ConstraintProto::mutable_linear(v88);
        v95 = *(unsigned int *)(v94 + 16);
        if ((_DWORD)v95 == *(_DWORD *)(v94 + 20))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v94 + 16), v95 + 1);
        *(_DWORD *)(*(_QWORD *)(v94 + 24) + 4 * v95) = (_DWORD)v36;
        *(_DWORD *)(v94 + 16) = v95 + 1;
        v96 = operations_research::sat::ConstraintProto::mutable_linear(v88);
        v97 = *(unsigned int *)(v96 + 40);
        if ((_DWORD)v97 == *(_DWORD *)(v96 + 44))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v96 + 40), v97 + 1);
        *(_QWORD *)(*(_QWORD *)(v96 + 48) + 8 * v97) = -1;
        *(_DWORD *)(v96 + 40) = v97 + 1;
        v98 = operations_research::sat::ConstraintProto::mutable_linear(v88);
        v99 = *(unsigned int *)(v98 + 64);
        if ((_DWORD)v99 == *(_DWORD *)(v98 + 68))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v98 + 64), v99 + 1);
        *(_QWORD *)(*(_QWORD *)(v98 + 72) + 8 * v99) = 0;
        *(_DWORD *)(v98 + 64) = v99 + 1;
        v100 = operations_research::sat::ConstraintProto::mutable_linear(v88);
        v101 = *(unsigned int *)(v100 + 64);
        if ((_DWORD)v101 == *(_DWORD *)(v100 + 68))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v100 + 64), v101 + 1);
        *(_QWORD *)(*(_QWORD *)(v100 + 72) + 8 * v101) = 0;
        *(_DWORD *)(v100 + 64) = v101 + 1;
        operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                     + 2));
        v102 = *((_QWORD *)this + 2);
        std::string::basic_string[abi:ne180100]<0>(&v132, "int_prod: linearize product by constant.");
        operations_research::sat::PresolveContext::UpdateRuleStats(v102, (uint64_t)&v132);
        if (SHIBYTE(v133[1]) < 0)
          operator delete(v132);
        goto LABEL_143;
      }
      if (operations_research::sat::PresolveContext::MinOf((operations_research::sat::PresolveContext *)v40, (const char *)v38) != 1)
      {
        v130 = 0;
        v106 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
        operations_research::Domain::Domain(&v132, 0, 0);
        v3 = operations_research::sat::PresolveContext::IntersectDomainWith(v106, v36, (const operations_research::Domain *)&v132, &v130);
        if ((v132 & 1) != 0)
          operator delete(v133[0]);
        if ((v3 & 1) != 0)
        {
          v107 = *((_QWORD *)this + 2);
          std::string::basic_string[abi:ne180100]<0>(&v132, "int_prod: fix variable to zero.");
          operations_research::sat::PresolveContext::UpdateRuleStats(v107, (uint64_t)&v132);
          if (SHIBYTE(v133[1]) < 0)
            operator delete(v132);
          operations_research::sat::ConstraintProto::Clear(a2);
        }
        goto LABEL_176;
      }
      v41 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v132, "int_prod: remove identity.");
      operations_research::sat::PresolveContext::UpdateRuleStats(v41, (uint64_t)&v132);
LABEL_148:
      if (SHIBYTE(v133[1]) < 0)
        operator delete(v132);
LABEL_143:
      operations_research::sat::ConstraintProto::Clear(a2);
LABEL_175:
      v3 = 1;
LABEL_176:
      if ((__p & 1) != 0)
        operator delete(v135[0]);
      return v3 & 1;
    }
    if ((_DWORD)v38 == v39 && (_DWORD)v38 == (_DWORD)v36)
    {
      v103 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
      operations_research::Domain::Domain(&v132, 0, 1);
      v104 = operations_research::sat::PresolveContext::IntersectDomainWith(v103, v36, (const operations_research::Domain *)&v132, 0);
      if ((v132 & 1) != 0)
        operator delete(v133[0]);
      if ((v104 & 1) == 0)
        goto LABEL_151;
      v105 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v132, "int_prod: fix variable to zero or one.");
      operations_research::sat::PresolveContext::UpdateRuleStats(v105, (uint64_t)&v132);
      goto LABEL_148;
    }
    if (*((_DWORD *)a2 + 15) == 11)
      goto LABEL_48;
LABEL_110:
    v75 = (const char *)*((unsigned int *)v29 + 9);
    if ((v75 & 0x80000000) != 0)
      goto LABEL_176;
    v76 = *((int *)v29 + 4);
    if ((_DWORD)v76)
    {
      v77 = (unsigned int *)v29[3];
      v78 = 4 * v76;
      do
      {
        v79 = (const char *)*v77;
        if ((v79 & 0x80000000) != 0
          || operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*v77) < 0|| operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v79) >= 2)
        {
          goto LABEL_176;
        }
        ++v77;
        v78 -= 4;
      }
      while (v78);
    }
    v80 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
    operations_research::Domain::Domain(&v132, 0, 1);
    v81 = operations_research::sat::PresolveContext::IntersectDomainWith(v80, v75, (const operations_research::Domain *)&v132, 0);
    if ((v132 & 1) != 0)
      operator delete(v133[0]);
    if ((v81 & 1) != 0)
    {
      v82 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v132, "int_prod: all Boolean.");
      operations_research::sat::PresolveContext::UpdateRuleStats(v82, (uint64_t)&v132);
      if (SHIBYTE(v133[1]) < 0)
        operator delete(v132);
      v83 = operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
      v84 = *(unsigned int *)(v83 + 16);
      if ((_DWORD)v84 == *(_DWORD *)(v83 + 20))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v83 + 16), v84 + 1);
      *(_DWORD *)(*(_QWORD *)(v83 + 24) + 4 * v84) = (_DWORD)v75;
      *(_DWORD *)(v83 + 16) = v84 + 1;
      v85 = operations_research::sat::ConstraintProto::mutable_BOOL_and((operations_research::sat::ConstraintProto *)v83);
      v86 = v85;
      if (*((_DWORD *)a2 + 15) == 11)
        v87 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v87 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v108 = *((int *)v87 + 4);
      if ((_DWORD)v108)
      {
        v109 = (int *)v87[3];
        v110 = *(_DWORD *)(v85 + 16);
        v111 = 4 * v108;
        do
        {
          v112 = *v109;
          if (v110 == *(_DWORD *)(v86 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v86 + 16), v110 + 1);
          *(_DWORD *)(*(_QWORD *)(v86 + 24) + 4 * v110) = v112;
          *(_DWORD *)(v86 + 16) = v110 + 1;
          ++v109;
          ++v110;
          v111 -= 4;
        }
        while (v111);
      }
      v113 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
      v114 = operations_research::sat::ConstraintProto::mutable_BOOL_or(v113);
      v115 = v114;
      v117 = *(unsigned int *)(v114 + 16);
      v116 = (unsigned int *)(v114 + 16);
      v118 = v117 + 1;
      if ((_DWORD)v117 == *(_DWORD *)(v114 + 20))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v114 + 16), v117 + 1);
      v119 = *(_QWORD *)(v115 + 24);
      *(_DWORD *)(v119 + 4 * v117) = (_DWORD)v75;
      *(_DWORD *)(v115 + 16) = v118;
      if (*((_DWORD *)a2 + 15) == 11)
        v120 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v120 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
      v121 = *((int *)v120 + 4);
      if ((_DWORD)v121)
      {
        v122 = (int *)v120[3];
        v123 = 4 * v121;
        do
        {
          v124 = *v122;
          if (v118 == *(_DWORD *)(v115 + 20))
          {
            google::protobuf::RepeatedField<int>::Reserve(v116, v118 + 1);
            v119 = *(_QWORD *)(v115 + 24);
          }
          *(_DWORD *)(v119 + 4 * v118) = ~v124;
          *v116 = v118 + 1;
          ++v122;
          ++v118;
          v123 -= 4;
        }
        while (v123);
      }
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
      operations_research::sat::ConstraintProto::Clear(a2);
      goto LABEL_175;
    }
LABEL_151:
    v3 = 0;
    goto LABEL_176;
  }
  if ((v132 & 1) == 0)
    goto LABEL_89;
LABEL_127:
  operator delete(v133[0]);
  if ((v60 & 1) != 0)
    goto LABEL_23;
LABEL_3:
  v3 = 0;
  return v3 & 1;
}

void sub_22DAC9E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, void *a15, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,int a23,__int16 a24,char a25,char a26)
{
  if ((a21 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::CpModelPresolver::PresolveIntDiv(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  operations_research::sat::PresolveContext *v2;
  _BOOL8 result;
  uint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  operations_research::sat::ConstraintProto *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  operations_research::sat::PresolveContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  operations_research::sat::ConstraintProto *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45[3];
  BOOL v46;
  void *__p[2];
  char v48;

  v2 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (*((_BYTE *)v2 + 504))
    return 0;
  if (*((_DWORD *)a2 + 15) == 7)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 6);
    result = 0;
    v7 = *((unsigned int *)v6 + 9);
    if ((v7 & 0x80000000) != 0)
      return result;
  }
  else
  {
    v6 = &operations_research::sat::_IntegerArgumentProto_default_instance_;
    result = 0;
    v7 = dword_25408AB0C;
    if (dword_25408AB0C < 0)
      return result;
  }
  v8 = (unsigned int *)v6[3];
  v9 = (const char *)*v8;
  if ((v9 & 0x80000000) != 0)
    return result;
  v10 = (const char *)v8[1];
  if ((v10 & 0x80000000) != 0)
    return result;
  if (operations_research::sat::PresolveContext::DomainIsEmpty(v2, v8[1]))
    return 0;
  result = operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), v10);
  if (!result)
    return result;
  v11 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v10);
  v12 = v11 - 1;
  if (v11 == 1)
  {
    v13 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
    v14 = operations_research::sat::ConstraintProto::mutable_linear(v13);
    v15 = v14;
    v16 = (unsigned int *)(v14 + 16);
    v17 = *(unsigned int *)(v14 + 16);
    v18 = v17 + 1;
    if ((_DWORD)v17 == *(_DWORD *)(v14 + 20))
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v14 + 16), v17 + 1);
    *(_DWORD *)(*(_QWORD *)(v15 + 24) + 4 * v17) = (_DWORD)v9;
    v19 = *(unsigned int *)(v15 + 40);
    *(_DWORD *)(v15 + 16) = v18;
    if ((_DWORD)v19 == *(_DWORD *)(v15 + 44))
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v15 + 40), v19 + 1);
      v18 = *v16;
    }
    *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v19) = 1;
    *(_DWORD *)(v15 + 40) = v19 + 1;
    if (v18 == *(_DWORD *)(v15 + 20))
      google::protobuf::RepeatedField<int>::Reserve(v16, v18 + 1);
    *(_DWORD *)(*(_QWORD *)(v15 + 24) + 4 * v18) = v7;
    *(_DWORD *)(v15 + 16) = v18 + 1;
    v20 = *(unsigned int *)(v15 + 40);
    if ((_DWORD)v20 == *(_DWORD *)(v15 + 44))
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v15 + 40), v20 + 1);
    v21 = *(unsigned int *)(v15 + 64);
    *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v20) = -1;
    *(_DWORD *)(v15 + 40) = v20 + 1;
    v22 = *(_DWORD *)(v15 + 68);
    v23 = v21 + 1;
    if ((_DWORD)v21 == v22)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v15 + 64), v21 + 1);
      v22 = *(_DWORD *)(v15 + 68);
    }
    v24 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v24 + 8 * v21) = 0;
    *(_DWORD *)(v15 + 64) = v23;
    if (v23 == v22)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v15 + 64), v21 + 2);
      v24 = *(_QWORD *)(v15 + 72);
    }
    *(_QWORD *)(v24 + 8 * v23) = 0;
    *(_DWORD *)(v15 + 64) = v21 + 2;
    operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                 + 2));
    v25 = *((_QWORD *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "int_div: rewrite to equality");
    operations_research::sat::PresolveContext::UpdateRuleStats(v25, (uint64_t)__p);
LABEL_26:
    if (v48 < 0)
      operator delete(__p[0]);
    operations_research::sat::ConstraintProto::Clear(a2);
    return 1;
  }
  v26 = v11;
  v46 = 0;
  v27 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  operations_research::sat::PresolveContext::DomainOf(v27, v9, v45);
  operations_research::Domain::DivisionBy((operations_research::Domain *)v45, v26, (unint64_t *)__p);
  v28 = operations_research::sat::PresolveContext::IntersectDomainWith(v27, (const char *)v7, (const operations_research::Domain *)__p, &v46);
  if (((uint64_t)__p[0] & 1) != 0)
  {
    operator delete(__p[1]);
    if ((v45[0] & 1) == 0)
    {
LABEL_31:
      if (v28)
        goto LABEL_35;
      return 0;
    }
  }
  else if ((v45[0] & 1) == 0)
  {
    goto LABEL_31;
  }
  operator delete((void *)v45[1]);
  if (!v28)
    return 0;
LABEL_35:
  if (v46)
  {
    v29 = *((_QWORD *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "int_div: updated domain of target in target = X / cte");
    operations_research::sat::PresolveContext::UpdateRuleStats(v29, (uint64_t)__p);
    if (v48 < 0)
      operator delete(__p[0]);
  }
  if (operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v7) < 0)return 0;
  v30 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v9);
  result = 0;
  if (v26 >= 2 && (v30 & 0x8000000000000000) == 0)
  {
    v44 = v12;
    v31 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
    v32 = operations_research::sat::ConstraintProto::mutable_linear(v31);
    v33 = v32;
    v34 = (unsigned int *)(v32 + 16);
    v35 = *(unsigned int *)(v32 + 16);
    v36 = v35 + 1;
    if ((_DWORD)v35 == *(_DWORD *)(v32 + 20))
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v32 + 16), v35 + 1);
    *(_DWORD *)(*(_QWORD *)(v33 + 24) + 4 * v35) = (_DWORD)v9;
    v37 = *(unsigned int *)(v33 + 40);
    *(_DWORD *)(v33 + 16) = v36;
    if ((_DWORD)v37 == *(_DWORD *)(v33 + 44))
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v33 + 40), v37 + 1);
      v36 = *v34;
    }
    *(_QWORD *)(*(_QWORD *)(v33 + 48) + 8 * v37) = 1;
    *(_DWORD *)(v33 + 40) = v37 + 1;
    if (v36 == *(_DWORD *)(v33 + 20))
      google::protobuf::RepeatedField<int>::Reserve(v34, v36 + 1);
    *(_DWORD *)(*(_QWORD *)(v33 + 24) + 4 * v36) = v7;
    *(_DWORD *)(v33 + 16) = v36 + 1;
    v38 = *(unsigned int *)(v33 + 40);
    if ((_DWORD)v38 == *(_DWORD *)(v33 + 44))
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v33 + 40), v38 + 1);
    v39 = *(unsigned int *)(v33 + 64);
    *(_QWORD *)(*(_QWORD *)(v33 + 48) + 8 * v38) = -v26;
    *(_DWORD *)(v33 + 40) = v38 + 1;
    v40 = *(_DWORD *)(v33 + 68);
    v41 = v39 + 1;
    if ((_DWORD)v39 == v40)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v33 + 64), v39 + 1);
      v40 = *(_DWORD *)(v33 + 68);
    }
    v42 = *(_QWORD *)(v33 + 72);
    *(_QWORD *)(v42 + 8 * v39) = 0;
    *(_DWORD *)(v33 + 64) = v41;
    if (v41 == v40)
    {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v33 + 64), v39 + 2);
      v42 = *(_QWORD *)(v33 + 72);
    }
    *(_QWORD *)(v42 + 8 * v41) = v44;
    *(_DWORD *)(v33 + 64) = v39 + 2;
    operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                 + 2));
    v43 = *((_QWORD *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "int_div: linearize positive division with a constant divisor");
    operations_research::sat::PresolveContext::UpdateRuleStats(v43, (uint64_t)__p);
    goto LABEL_26;
  }
  return result;
}

void sub_22DACA3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, void *a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(operations_research::sat::PresolveContext **this, int a2, operations_research::sat::ConstraintProto *a3)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int LiteralRepresentative;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;
  BOOL v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  char v20;
  uint64_t (**v21)();
  char *v22;
  operations_research::sat::PresolveContext **v23;
  uint64_t (***v24)();
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  if (*((_DWORD *)a3 + 15) == 12)
  {
    v5 = *((int *)a3 + 4);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = (unsigned int *)*((_QWORD *)a3 + 3);
      v8 = 4 * v5;
      do
      {
        LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this[2], (const char *)*v7);
        if (LiteralRepresentative != *v7)
        {
          *v7 = LiteralRepresentative;
          v6 = 1;
        }
        ++v7;
        v8 -= 4;
      }
      while (v8);
    }
    else
    {
      v6 = 0;
    }
    v15 = v6 == 0;
    return !v15;
  }
  v10 = *((_QWORD *)this[2] + 82) + 24 * a2;
  v11 = *(int **)v10;
  v12 = *(int **)(v10 + 8);
  if (*(int **)v10 == v12)
    return 0;
  while (1)
  {
    v13 = *v11;
    operations_research::sat::PresolveContext::GetAffineRelation(this[2], *v11, (uint64_t)&v21);
    if ((_DWORD)v21 != v13)
      break;
    if (++v11 == v12)
      return 0;
  }
  v21 = &off_24F984358;
  v22 = &v20;
  v23 = this;
  v24 = &v21;
  operations_research::sat::ApplyToAllVariableIndices((uint64_t)&v21, a3);
  v16 = v24;
  if (v24 == &v21)
  {
    v17 = 4;
    v16 = &v21;
  }
  else
  {
    if (!v24)
      goto LABEL_18;
    v17 = 5;
  }
  (*v16)[v17]();
LABEL_18:
  v21 = &off_24F9843D8;
  v22 = &v20;
  v23 = this;
  v24 = &v21;
  operations_research::sat::ApplyToAllLiteralIndices((uint64_t)&v21, (uint64_t)a3);
  v18 = v24;
  if (v24 == &v21)
  {
    v19 = 4;
    v18 = &v21;
    goto LABEL_22;
  }
  if (v24)
  {
    v19 = 5;
LABEL_22:
    (*v18)[v19]();
  }
  v15 = v20 == 0;
  return !v15;
}

void sub_22DACA600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 != v13)
  {
    if (a13)
    {
      (*(void (**)(void))(*(_QWORD *)a13 + 40))();
      _Unwind_Resume(exception_object);
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(void))(a10 + 32))();
  _Unwind_Resume(exception_object);
}

void operations_research::sat::CpModelPresolver::DivideLinearByGcd(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::Arena **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  google::protobuf::Arena *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  char __p[22];
  char v40;

  v3 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v3 + 504))
    return;
  if (*((_DWORD *)a2 + 15) == 12)
  {
    v5 = *((_QWORD *)a2 + 6);
    v6 = *(unsigned int *)(v5 + 16);
    if ((int)v6 <= 0)
      return;
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(v5 + 48);
    do
    {
      v10 = *(_QWORD *)(v9 + 8 * v7);
      if (v10)
      {
        if (v10 < 0)
          v10 = -v10;
        v11 = v8;
        do
        {
          v8 = v10;
          v10 = v11 % v10;
          v11 = v8;
        }
        while (v10);
        if (v8 == 1)
          return;
      }
      ++v7;
    }
    while (v7 != v6);
  }
  else
  {
    LODWORD(v6) = qword_25408AC60;
    if ((int)qword_25408AC60 <= 0)
      return;
    v12 = 0;
    v8 = 0;
    do
    {
      v13 = *(_QWORD *)(qword_25408AC80 + 8 * v12);
      if (v13)
      {
        if (v13 < 0)
          v13 = -v13;
        v14 = v8;
        do
        {
          v8 = v13;
          v13 = v14 % v13;
          v14 = v8;
        }
        while (v13);
        if (v8 == 1)
          return;
      }
      ++v12;
    }
    while (v12 != qword_25408AC60);
  }
  if (v8 < 2)
    return;
  v40 = 21;
  strcpy(__p, "linear: divide by GCD");
  operations_research::sat::PresolveContext::UpdateRuleStats(v3, (uint64_t)__p);
  if (v40 < 0)
    operator delete(*(void **)__p);
  v16 = *((_DWORD *)a2 + 15);
  if (v16 == 12)
  {
    v17 = 0;
    do
      *(uint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 48) + 8 * v17++) /= v8;
    while (v6 != v17);
LABEL_42:
    v24 = (uint64_t *)*((_QWORD *)a2 + 6);
    goto LABEL_44;
  }
  v18 = 0;
  v19 = *((_DWORD *)a2 + 15);
  do
  {
    if (v19 == 12)
    {
      v21 = *((_QWORD *)a2 + 6);
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 12;
      v22 = *((_QWORD *)a2 + 1);
      v23 = (google::protobuf::Arena **)(v22 & 0xFFFFFFFFFFFFFFFELL);
      if ((v22 & 1) != 0)
      {
        v21 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(*v23);
        *((_QWORD *)a2 + 6) = v21;
        v16 = *((_DWORD *)a2 + 15);
        if (v16 != 12)
        {
LABEL_32:
          v19 = v16;
          v20 = &operations_research::sat::_LinearConstraintProto_default_instance_;
          goto LABEL_33;
        }
      }
      else
      {
        v21 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>((google::protobuf::Arena *)v23);
        *((_QWORD *)a2 + 6) = v21;
        v16 = *((_DWORD *)a2 + 15);
        if (v16 != 12)
          goto LABEL_32;
      }
    }
    v19 = 12;
    v20 = (uint64_t *)v21;
LABEL_33:
    *(_QWORD *)(*(_QWORD *)(v21 + 48) + 8 * v18) = *(_QWORD *)(v20[6] + 8 * v18) / v8;
    ++v18;
  }
  while (v6 != v18);
  if (v16 == 12)
    goto LABEL_42;
  v24 = &operations_research::sat::_LinearConstraintProto_default_instance_;
LABEL_44:
  operations_research::Domain::FromFlatSpanOfIntervals(v24[9], *((int *)v24 + 16), (unint64_t *)__p, v15);
  operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)__p, v8, &v37);
  if (*((_DWORD *)a2 + 15) == 12)
  {
    v25 = *((_QWORD *)a2 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 12;
    v26 = *((_QWORD *)a2 + 1);
    v27 = (google::protobuf::Arena *)(v26 & 0xFFFFFFFFFFFFFFFELL);
    if ((v26 & 1) != 0)
      v27 = *(google::protobuf::Arena **)v27;
    v25 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v27);
    *((_QWORD *)a2 + 6) = v25;
  }
  *(_DWORD *)(v25 + 64) = 0;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 64), v37 >> 1);
  v28 = v37 & 1;
  if ((v37 & 1) != 0)
    v29 = (uint64_t *)v38;
  else
    v29 = (uint64_t *)&v38;
  if (v37 >= 2)
  {
    v30 = &v29[2 * (v37 >> 1)];
    v31 = *(_DWORD *)(v25 + 64);
    do
    {
      v32 = *v29;
      v33 = *(_DWORD *)(v25 + 68);
      v34 = v31 + 1;
      if (v31 == v33)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 64), v31 + 1);
        v33 = *(_DWORD *)(v25 + 68);
      }
      v35 = *(_QWORD *)(v25 + 72);
      *(_QWORD *)(v35 + 8 * v31) = v32;
      *(_DWORD *)(v25 + 64) = v34;
      v36 = v29[1];
      v31 += 2;
      if (v34 == v33)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v25 + 64), v31);
        v35 = *(_QWORD *)(v25 + 72);
      }
      *(_QWORD *)(v35 + 8 * v34) = v36;
      *(_DWORD *)(v25 + 64) = v31;
      v29 += 2;
    }
    while (v29 != v30);
    v28 = v37 & 1;
  }
  if (v28)
    operator delete(v38);
  if (*((_DWORD *)a2 + 15) == 12)
  {
    if (!*(_DWORD *)(*((_QWORD *)a2 + 6) + 64))
LABEL_66:
      operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
  }
  else if (!(_DWORD)qword_25408AC90)
  {
    goto LABEL_66;
  }
  if ((__p[0] & 1) != 0)
    operator delete(*(void **)&__p[8]);
}

void sub_22DACAA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, void *__p, int a15, __int16 a16, char a17, char a18)
{
  if ((a13 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>(unint64_t *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  *(_DWORD *)(a2 + 64) = 0;
  v4 = (unsigned int *)(a2 + 64);
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(a2 + 64), *a1 >> 1);
  v5 = *a1;
  v8 = (uint64_t *)a1[1];
  v7 = (uint64_t *)(a1 + 1);
  v6 = v8;
  if ((v5 & 1) != 0)
    v9 = v6;
  else
    v9 = v7;
  if (v5 >= 2)
  {
    v10 = &v9[2 * (v5 >> 1)];
    v11 = *(_DWORD *)(a2 + 64);
    do
    {
      v12 = *v9;
      v13 = *(_DWORD *)(a2 + 68);
      v14 = v11 + 1;
      if (v11 == v13)
      {
        google::protobuf::RepeatedField<long long>::Reserve(v4, v11 + 1);
        v13 = *(_DWORD *)(a2 + 68);
      }
      v15 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(v15 + 8 * v11) = v12;
      *(_DWORD *)(a2 + 64) = v14;
      v16 = v9[1];
      v11 += 2;
      if (v14 == v13)
      {
        google::protobuf::RepeatedField<long long>::Reserve(v4, v11);
        v15 = *(_QWORD *)(a2 + 72);
      }
      *(_QWORD *)(v15 + 8 * v14) = v16;
      *v4 = v11;
      v9 += 2;
    }
    while (v9 != v10);
  }
}

uint64_t operations_research::sat::CpModelPresolver::CanonicalizeLinear(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  operations_research::sat::CpModelPresolver *v2;
  char v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  __n128 v11;
  uint64_t *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 *v29;
  __n128 *v30;
  int v31;
  __n128 *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  google::protobuf::Arena *v48;
  uint64_t v49;
  __int128 *v50;
  __int128 *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  google::protobuf::Arena *v60;
  uint64_t v61;
  uint64_t v62;
  google::protobuf::Arena *v63;
  int *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int *v68;
  int *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  google::protobuf::Arena *v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  google::protobuf::Arena *v85;
  uint64_t v86;
  uint64_t v87;
  google::protobuf::Arena *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  google::protobuf::Arena *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  google::LogMessage *v96;
  _QWORD *v97;
  uint64_t v98;
  _BOOL4 v99;
  uint64_t v100;
  void **v101;
  char v102;
  uint64_t v104;
  void *v105[3];
  char *v106;
  __int128 v107;
  char *v108;
  __int128 v109;

  if (*((_DWORD *)a2 + 15) != 12 || (v2 = this, *(_BYTE *)(*((_QWORD *)this + 2) + 504)))
  {
    v3 = 0;
    return v3 & 1;
  }
  v101 = (void **)((char *)this + 24);
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  v6 = *(unsigned int *)(*((_QWORD *)a2 + 6) + 16);
  v104 = v6;
  if ((int)v6 < 1)
  {
    LOBYTE(v9) = 0;
    goto LABEL_87;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  v11 = (__n128)xmmword_22DCE6560;
  do
  {
    if (*((_DWORD *)a2 + 15) == 12)
    {
      v12 = (uint64_t *)*((_QWORD *)a2 + 6);
      v13 = *(_DWORD *)(v12[3] + 4 * v7);
      if (~v13 <= v13)
        v14 = v13;
      else
        v14 = ~v13;
      if (v13 < 0)
        goto LABEL_14;
    }
    else
    {
      v17 = *(_DWORD *)(v10[3] + 4 * v7);
      if (~v17 <= v17)
        v14 = v17;
      else
        v14 = ~v17;
      v12 = v10;
      if (v17 < 0)
      {
LABEL_14:
        v15 = *(_QWORD *)(v12[6] + 8 * v7);
        v16 = -v15;
        if (!v15)
          goto LABEL_8;
        goto LABEL_21;
      }
    }
    v16 = *(_QWORD *)(v12[6] + 8 * v7);
    if (!v16)
      goto LABEL_8;
LABEL_21:
    if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)v2 + 2), (const char *)v14))
    {
      v8 += operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)v2 + 2), (const char *)v14)* v16;
      goto LABEL_8;
    }
    v18 = *((int *)a2 + 4);
    if (!(_DWORD)v18)
    {
LABEL_29:
      v23 = v9;
      operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)v2 + 2), v14, (uint64_t)&v108);
      v24 = (int)v108;
      v25 = (_DWORD)v108 != v14;
      if ((_DWORD)v108 == (_DWORD)v14)
        v26 = 0;
      else
        v26 = *((_QWORD *)&v109 + 1) * v16;
      v27 = v109 * v16;
      v29 = (__n128 *)*((_QWORD *)v2 + 4);
      v28 = *((_QWORD *)v2 + 5);
      if ((unint64_t)v29 < v28)
      {
        v29->n128_u32[0] = v108;
        v29->n128_u64[1] = v27;
        v30 = v29 + 1;
        v31 = v23;
        v6 = v104;
LABEL_48:
        v9 = v25 | v31;
        v8 += v26;
        *((_QWORD *)v2 + 4) = v30;
        goto LABEL_8;
      }
      v100 = v8;
      v32 = (__n128 *)*v101;
      v33 = ((char *)v29 - (_BYTE *)*v101) >> 4;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v35 = v10;
      v36 = v28 - (_QWORD)v32;
      if (v36 >> 3 > v34)
        v34 = v36 >> 3;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
        v37 = 0xFFFFFFFFFFFFFFFLL;
      else
        v37 = v34;
      v99 = v25;
      v98 = v26;
      if (v37)
      {
        if (v37 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = (char *)operator new(16 * v37);
        v39 = (uint64_t)&v38[16 * v33];
        *(_DWORD *)v39 = v24;
        *(_QWORD *)(v39 + 8) = v27;
        v40 = v39;
        if (v29 != v32)
        {
LABEL_43:
          v2 = this;
          v31 = v23;
          do
          {
            v11 = v29[-1];
            *(__n128 *)(v40 - 16) = v11;
            v40 -= 16;
            --v29;
          }
          while (v29 != v32);
          v29 = (__n128 *)*v101;
          v6 = v104;
          v30 = (__n128 *)(v39 + 16);
          *((_QWORD *)this + 3) = v40;
          *((_QWORD *)this + 4) = v39 + 16;
          *((_QWORD *)this + 5) = &v38[16 * v37];
          if (v29)
LABEL_46:
            operator delete(v29);
LABEL_47:
          v10 = v35;
          v8 = v100;
          v25 = v99;
          v26 = v98;
          goto LABEL_48;
        }
      }
      else
      {
        v38 = 0;
        v39 = 16 * v33;
        *(_DWORD *)v39 = (_DWORD)v108;
        *(_QWORD *)(v39 + 8) = v27;
        v40 = 16 * v33;
        if (v29 != v32)
          goto LABEL_43;
      }
      v31 = v23;
      v2 = this;
      v6 = v104;
      v30 = (__n128 *)(v39 + 16);
      *((_QWORD *)this + 3) = v40;
      *((_QWORD *)this + 4) = v39 + 16;
      *((_QWORD *)this + 5) = &v38[16 * v37];
      if (v29)
        goto LABEL_46;
      goto LABEL_47;
    }
    v19 = (int *)*((_QWORD *)a2 + 3);
    v20 = 4 * v18;
    while (1)
    {
      v21 = *v19;
      v22 = ~*v19 <= *v19 ? *v19 : ~v21;
      if ((_DWORD)v14 == v22)
        break;
      ++v19;
      v20 -= 4;
      if (!v20)
        goto LABEL_29;
    }
    if (v21 >= 0)
      v41 = v16;
    else
      v41 = 0;
    v42 = *((_QWORD *)v2 + 2);
    v108 = (char *)operator new(0x30uLL);
    v109 = xmmword_22DCE6560;
    strcpy(v108, "linear: enforcement literal in constraint");
    operations_research::sat::PresolveContext::UpdateRuleStats(v42, (uint64_t)&v108);
    if (SHIBYTE(v109) < 0)
      operator delete(v108);
    v8 += v41;
LABEL_8:
    ++v7;
  }
  while (v7 != v6);
  v43 = *((_DWORD *)a2 + 15);
  if (v8)
  {
    if (v43 == 12)
      v44 = (uint64_t *)*((_QWORD *)a2 + 6);
    else
      v44 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    operations_research::Domain::FromFlatSpanOfIntervals(v44[9], *((int *)v44 + 16), (unint64_t *)&v108, v11);
    operations_research::Domain::Domain(v105, -v8, -v8);
    operations_research::Domain::AdditionWith((operations_research::Domain *)&v108, (const operations_research::Domain *)v105, &v106, v45);
    if ((v108 & 1) != 0)
      operator delete((void *)v109);
    v108 = v106;
    v109 = v107;
    v106 = 0;
    if (((uint64_t)v105[0] & 1) != 0)
      operator delete(v105[1]);
    if (*((_DWORD *)a2 + 15) == 12)
    {
      v46 = *((_QWORD *)a2 + 6);
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 12;
      v47 = *((_QWORD *)a2 + 1);
      v48 = (google::protobuf::Arena *)(v47 & 0xFFFFFFFFFFFFFFFELL);
      if ((v47 & 1) != 0)
        v48 = *(google::protobuf::Arena **)v48;
      v46 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v48);
      *((_QWORD *)a2 + 6) = v46;
    }
    *(_DWORD *)(v46 + 64) = 0;
    google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v46 + 64), (unint64_t)v108 >> 1);
    v49 = v108 & 1;
    if ((v108 & 1) != 0)
      v50 = (__int128 *)v109;
    else
      v50 = &v109;
    if ((unint64_t)v108 >= 2)
    {
      v51 = &v50[(unint64_t)v108 >> 1];
      v52 = *(_DWORD *)(v46 + 64);
      do
      {
        v53 = *(_QWORD *)v50;
        v54 = *(_DWORD *)(v46 + 68);
        v55 = v52 + 1;
        if (v52 == v54)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v46 + 64), v52 + 1);
          v54 = *(_DWORD *)(v46 + 68);
        }
        v56 = *(_QWORD *)(v46 + 72);
        *(_QWORD *)(v56 + 8 * v52) = v53;
        *(_DWORD *)(v46 + 64) = v55;
        v57 = *((_QWORD *)v50 + 1);
        v52 += 2;
        if (v55 == v54)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v46 + 64), v52);
          v56 = *(_QWORD *)(v46 + 72);
        }
        *(_QWORD *)(v56 + 8 * v55) = v57;
        *(_DWORD *)(v46 + 64) = v52;
        ++v50;
      }
      while (v50 != v51);
      v49 = v108 & 1;
    }
    v2 = this;
    if (v49)
      operator delete((void *)v109);
    v43 = *((_DWORD *)a2 + 15);
  }
  if (v43 == 12)
  {
LABEL_87:
    *(_DWORD *)(*((_QWORD *)a2 + 6) + 16) = 0;
    v102 = v9;
    if (*((_DWORD *)a2 + 15) == 12)
      goto LABEL_88;
LABEL_92:
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 12;
    v62 = *((_QWORD *)a2 + 1);
    v63 = (google::protobuf::Arena *)(v62 & 0xFFFFFFFFFFFFFFFELL);
    if ((v62 & 1) != 0)
      v63 = *(google::protobuf::Arena **)v63;
    v58 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v63);
    *((_QWORD *)a2 + 6) = v58;
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 12;
    v59 = *((_QWORD *)a2 + 1);
    v60 = (google::protobuf::Arena *)(v59 & 0xFFFFFFFFFFFFFFFELL);
    if ((v59 & 1) != 0)
      v60 = *(google::protobuf::Arena **)v60;
    v61 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v60);
    *((_QWORD *)a2 + 6) = v61;
    *(_DWORD *)(v61 + 16) = 0;
    v102 = v9;
    if (*((_DWORD *)a2 + 15) != 12)
      goto LABEL_92;
LABEL_88:
    v58 = *((_QWORD *)a2 + 6);
  }
  v65 = *((_QWORD *)v2 + 3);
  v64 = (int *)*((_QWORD *)v2 + 4);
  v66 = 126 - 2 * __clz(((uint64_t)v64 - v65) >> 4);
  *(_DWORD *)(v58 + 40) = 0;
  if (v64 == (int *)v65)
    v67 = 0;
  else
    v67 = v66;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>(v65, v64, (uint64_t)&v108, v67, 1);
  v68 = (int *)*((_QWORD *)v2 + 3);
  v69 = (int *)*((_QWORD *)v2 + 4);
  if (v68 == v69)
    goto LABEL_136;
  v70 = 0;
  v71 = 0;
  while (1)
  {
LABEL_101:
    v72 = *v68;
    if (*v68 < 0)
    {
      v96 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v108, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1027);
      v97 = (_QWORD *)google::LogMessage::stream(v96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Check failed: RefIsPositive(entry.first) ", 41);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v108);
    }
    v73 = *((_QWORD *)v68 + 1);
    if (v72 != v71)
      break;
    v70 += v73;
    v68 += 4;
    if (v68 == v69)
      goto LABEL_120;
  }
  if (v70)
  {
    if (*((_DWORD *)a2 + 15) == 12)
    {
      v74 = *((_QWORD *)a2 + 6);
      v76 = *(unsigned int *)(v74 + 16);
      v75 = (unsigned int *)(v74 + 16);
      v77 = v76 + 1;
      if ((_DWORD)v76 != *(_DWORD *)(v74 + 20))
        goto LABEL_111;
LABEL_110:
      google::protobuf::RepeatedField<int>::Reserve(v75, v77);
      goto LABEL_111;
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 12;
    v78 = *((_QWORD *)a2 + 1);
    v79 = (google::protobuf::Arena *)(v78 & 0xFFFFFFFFFFFFFFFELL);
    if ((v78 & 1) != 0)
      v79 = *(google::protobuf::Arena **)v79;
    v74 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v79);
    *((_QWORD *)a2 + 6) = v74;
    v76 = *(unsigned int *)(v74 + 16);
    v75 = (unsigned int *)(v74 + 16);
    v77 = v76 + 1;
    if ((_DWORD)v76 == *(_DWORD *)(v74 + 20))
      goto LABEL_110;
LABEL_111:
    *(_DWORD *)(*(_QWORD *)(v74 + 24) + 4 * v76) = v71;
    *(_DWORD *)(v74 + 16) = v77;
    if (*((_DWORD *)a2 + 15) == 12)
    {
      v80 = *((_QWORD *)a2 + 6);
      v82 = *(unsigned int *)(v80 + 40);
      v81 = (unsigned int *)(v80 + 40);
      v83 = v82 + 1;
      if ((_DWORD)v82 != *(_DWORD *)(v80 + 44))
        goto LABEL_118;
LABEL_117:
      google::protobuf::RepeatedField<long long>::Reserve(v81, v83);
      goto LABEL_118;
    }
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 12;
    v84 = *((_QWORD *)a2 + 1);
    v85 = (google::protobuf::Arena *)(v84 & 0xFFFFFFFFFFFFFFFELL);
    if ((v84 & 1) != 0)
      v85 = *(google::protobuf::Arena **)v85;
    v80 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v85);
    *((_QWORD *)a2 + 6) = v80;
    v82 = *(unsigned int *)(v80 + 40);
    v81 = (unsigned int *)(v80 + 40);
    v83 = v82 + 1;
    if ((_DWORD)v82 == *(_DWORD *)(v80 + 44))
      goto LABEL_117;
LABEL_118:
    *(_QWORD *)(*(_QWORD *)(v80 + 48) + 8 * v82) = v70;
    *(_DWORD *)(v80 + 40) = v83;
  }
  v71 = v72;
  v70 = v73;
  v68 += 4;
  if (v68 != v69)
    goto LABEL_101;
LABEL_120:
  if (v70)
  {
    if (*((_DWORD *)a2 + 15) == 12)
    {
      v86 = *((_QWORD *)a2 + 6);
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 12;
      v87 = *((_QWORD *)a2 + 1);
      v88 = (google::protobuf::Arena *)(v87 & 0xFFFFFFFFFFFFFFFELL);
      if ((v87 & 1) != 0)
        v88 = *(google::protobuf::Arena **)v88;
      v86 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v88);
      *((_QWORD *)a2 + 6) = v86;
    }
    v89 = *(unsigned int *)(v86 + 16);
    if ((_DWORD)v89 == *(_DWORD *)(v86 + 20))
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v86 + 16), v89 + 1);
    *(_DWORD *)(*(_QWORD *)(v86 + 24) + 4 * v89) = v71;
    *(_DWORD *)(v86 + 16) = v89 + 1;
    if (*((_DWORD *)a2 + 15) == 12)
    {
      v90 = *((_QWORD *)a2 + 6);
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 12;
      v91 = *((_QWORD *)a2 + 1);
      v92 = (google::protobuf::Arena *)(v91 & 0xFFFFFFFFFFFFFFFELL);
      if ((v91 & 1) != 0)
        v92 = *(google::protobuf::Arena **)v92;
      v90 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v92);
      *((_QWORD *)a2 + 6) = v90;
    }
    v93 = *(unsigned int *)(v90 + 40);
    if ((_DWORD)v93 == *(_DWORD *)(v90 + 44))
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v90 + 40), v93 + 1);
    *(_QWORD *)(*(_QWORD *)(v90 + 48) + 8 * v93) = v70;
    *(_DWORD *)(v90 + 40) = v93 + 1;
  }
LABEL_136:
  operations_research::sat::CpModelPresolver::DivideLinearByGcd(this, a2);
  v3 = v102;
  if ((v102 & 1) != 0
    && (v94 = *((_QWORD *)this + 2),
        v108 = (char *)operator new(0x28uLL),
        v109 = xmmword_22DCEAFB0,
        strcpy(v108, "linear: remapped using affine relations"),
        operations_research::sat::PresolveContext::UpdateRuleStats(v94, (uint64_t)&v108),
        SHIBYTE(v109) < 0))
  {
    operator delete(v108);
    if (*((_DWORD *)a2 + 15) != 12)
      goto LABEL_142;
LABEL_139:
    if (*(_DWORD *)(*((_QWORD *)a2 + 6) + 16) < (int)v104)
    {
LABEL_143:
      v95 = *((_QWORD *)this + 2);
      v108 = (char *)operator new(0x20uLL);
      v109 = xmmword_22DCE5C00;
      strcpy(v108, "linear: fixed or dup variables");
      operations_research::sat::PresolveContext::UpdateRuleStats(v95, (uint64_t)&v108);
      if (SHIBYTE(v109) < 0)
        operator delete(v108);
      v3 = 1;
    }
  }
  else
  {
    if (*((_DWORD *)a2 + 15) == 12)
      goto LABEL_139;
LABEL_142:
    if ((int)qword_25408AC60 < (int)v104)
      goto LABEL_143;
  }
  return v3 & 1;
}

void sub_22DACB484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p)
{
  uint64_t v19;

  if ((a18 & 1) != 0)
    operator delete(__p);
  if ((*(_BYTE *)(v19 - 104) & 1) != 0)
    operator delete(*(void **)(v19 - 96));
  _Unwind_Resume(exception_object);
}

void sub_22DACB4DC()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 104));
}

uint64_t operations_research::sat::CpModelPresolver::RemoveSingletonInLinear(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2, __n128 a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int8x16_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  __int128 *p_p;
  unint64_t v25;
  _OWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int v41;
  operations_research::sat::ConstraintProto *v42;
  uint64_t v43;
  const char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  google::protobuf::Arena *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  google::protobuf::Arena *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  google::protobuf::Arena *v65;
  uint64_t v66;
  google::protobuf::Arena *v67;
  uint64_t v68;
  google::protobuf::Arena *v69;
  uint64_t *v70;
  uint64_t *v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int8x16_t v84;
  int v85;
  _QWORD *v86;
  const char *v87;
  char v88;
  unint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  operations_research::sat::ConstraintProto *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  BOOL v97;
  int v98;
  BOOL v99[4];
  void *v100;
  void *v101[2];
  uint64_t v102;
  void *__p;
  uint64_t v104;
  void *v105;
  unint64_t v106;
  void *v107;
  unint64_t v108;
  uint64_t **v109;
  uint64_t *v110;
  uint64_t v111;

  if (*((_DWORD *)a2 + 15) != 12 || *(_BYTE *)(*((_QWORD *)this + 2) + 504))
  {
    LOBYTE(v3) = 0;
    return v3 & 1;
  }
  v110 = 0;
  v111 = 0;
  v109 = &v110;
  v7 = *((_QWORD *)a2 + 6);
  v8 = *(unsigned int *)(v7 + 16);
  operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v7 + 72), *(int *)(v7 + 64), &v106, a3);
  if ((int)v8 >= 1)
  {
    v10 = 0;
    v3 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    while (1)
    {
      v11 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (*((_DWORD *)a2 + 15) == 12)
        v11 = (uint64_t *)*((_QWORD *)a2 + 6);
      v12 = v11[3];
      v13 = (const char *)*(unsigned int *)(v12 + 4 * v10);
      if ((v13 & 0x80000000) != 0)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v104, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1071);
        v95 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
        goto LABEL_167;
      }
      v14 = *(_QWORD *)(v11[6] + 8 * v10);
      if (operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), *(_DWORD *)(v12 + 4 * v10)))
      {
        break;
      }
LABEL_7:
      if (++v10 == v8)
        goto LABEL_60;
    }
    v99[0] = 0;
    operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v13, (unint64_t *)&v102);
    operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v102, v99, -v14, (unint64_t *)&v104);
    if ((v102 & 1) != 0)
      operator delete(__p);
    if (!v99[0])
    {
LABEL_58:
      if ((v104 & 1) != 0)
        operator delete(v105);
      goto LABEL_7;
    }
    operations_research::Domain::AdditionWith((operations_research::Domain *)&v106, (const operations_research::Domain *)&v104, &v102, v15);
    v16 = v102;
    if ((int)((unint64_t)v102 >> 1) > 100)
    {
LABEL_56:
      if ((v16 & 1) != 0)
        operator delete(__p);
      goto LABEL_58;
    }
    v17 = *((_QWORD *)this + 2);
    v100 = operator new(0x20uLL);
    *(_OWORD *)v101 = xmmword_22DCE6650;
    strcpy((char *)v100, "linear: singleton column");
    operations_research::sat::PresolveContext::UpdateRuleStats(v17, (uint64_t)&v100);
    if (SHIBYTE(v101[1]) < 0)
      operator delete(v100);
    v18 = v110;
    v19 = &v110;
LABEL_20:
    v20 = v19;
    if (v18)
    {
      do
      {
        v19 = (uint64_t **)v18;
        v21 = *((int *)v18 + 7);
        if (v10 < v21)
        {
          v18 = *v19;
          goto LABEL_20;
        }
        if (v10 <= v21)
          goto LABEL_28;
        v18 = v19[1];
      }
      while (v18);
      v20 = v19 + 1;
    }
    v22 = operator new(0x20uLL);
    v22[7] = v10;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v19;
    *v20 = (uint64_t *)v22;
    if (*v109)
    {
      v109 = (uint64_t **)*v109;
      v22 = *v20;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v110, (uint64_t *)v22);
    ++v111;
LABEL_28:
    v23 = v102;
    if ((v102 & 1) != 0)
      p_p = (__int128 *)__p;
    else
      p_p = (__int128 *)&__p;
    v25 = v102 >> 1;
    v26 = v107;
    v27 = v108;
    if ((v106 & 1) == 0)
    {
      v26 = &v107;
      v27 = 1;
    }
    if (v27 >= v25)
    {
      v31 = v106 >> 1;
      v32 = v25 - (v106 >> 1);
      if (v25 < v106 >> 1)
        v32 = 0;
      if (v31 >= v25)
        v33 = v102 >> 1;
      else
        v33 = v106 >> 1;
      if (v33)
      {
        v34 = v26;
        do
        {
          v35 = *p_p++;
          *v34++ = v35;
          --v33;
        }
        while (v33);
      }
      if (v31 >= v25)
      {
        v37 = v106;
LABEL_55:
        v106 = v23 & 0xFFFFFFFFFFFFFFFELL | v37 & 1;
        v16 = v102;
        goto LABEL_56;
      }
      v28 = 0;
      v30 = 0;
      v25 = v32;
      v29 = &v26[v31];
    }
    else
    {
      if (2 * v27 <= v25)
        v28 = v102 >> 1;
      else
        v28 = 2 * v27;
      if (v28 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v29 = operator new(16 * v28);
      v30 = v29;
    }
    do
    {
      v36 = *p_p++;
      *v29++ = v36;
      --v25;
    }
    while (v25);
    v37 = v106;
    if (v30)
    {
      if ((v106 & 1) != 0)
        operator delete(v107);
      v107 = v30;
      v108 = v28;
      v37 = 1;
    }
    goto LABEL_55;
  }
LABEL_60:
  if (v111)
    goto LABEL_61;
  if (*(int *)(*(_QWORD *)this + 544) < 1
    || *((_DWORD *)a2 + 4)
    || (v43 = operations_research::Domain::Min((operations_research::Domain *)&v106, v9),
        v43 != operations_research::Domain::Max((operations_research::Domain *)&v106, v44)))
  {
LABEL_170:
    LOBYTE(v3) = 0;
    goto LABEL_171;
  }
  *(_DWORD *)v99 = 0;
  if ((int)v8 < 1)
    goto LABEL_169;
  v45 = 0;
  while (1)
  {
    v98 = 0;
    if (*((_DWORD *)a2 + 15) == 12)
    {
      v78 = (uint64_t *)*((_QWORD *)a2 + 6);
      v79 = v45;
      v80 = (int *)(v78[3] + 4 * v45);
    }
    else
    {
      v79 = v45;
      v80 = (int *)(qword_25408AC68 + 4 * v45);
      v78 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    }
    v81 = *v80;
    v98 = v81;
    if (v81 < 0)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v104, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1106);
      v96 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
LABEL_167:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v104);
    }
    v82 = *(_QWORD *)(v78[6] + 8 * v79);
    if (operations_research::sat::PresolveContext::VariableWithCostIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), v81))
    {
      v83 = *(_QWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>((uint64_t *)(*((_QWORD *)this + 2) + 536), &v98);
      v104 = v82;
      LODWORD(v100) = 0;
      if (!v82)
      {
        v102 = google::MakeCheckOpString<long long,int>((int)&v104, (int)&v100, "coeff != 0");
        if (v102)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)&v104, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1125, (uint64_t **)&v102);
          google::LogMessage::stream((google::LogMessage *)&v104);
          goto LABEL_167;
        }
      }
      if (!(v83 % v82))
        break;
    }
LABEL_128:
    v45 = *(_DWORD *)v99 + 1;
    *(_DWORD *)v99 = v45;
    if (v45 >= (int)v8)
      goto LABEL_169;
  }
  v97 = 0;
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v98, (unint64_t *)&v102);
  operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v102, &v97, -v82, (unint64_t *)&v104);
  if ((v102 & 1) != 0)
    operator delete(__p);
  if (!v97)
  {
    v85 = 7;
    goto LABEL_158;
  }
  operations_research::Domain::AdditionWith((operations_research::Domain *)&v106, (const operations_research::Domain *)&v104, &v102, v84);
  if ((int)((unint64_t)v102 >> 1) > 100)
    goto LABEL_140;
  v86 = (_QWORD *)*((_QWORD *)this + 2);
  if (v86[69] != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v100, "linear: singleton column in equality and in objective.");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v86, (uint64_t)&v100);
    if (SHIBYTE(v101[1]) < 0)
      operator delete(v100);
    operations_research::sat::PresolveContext::SubstituteVariableInObjective(*((_QWORD *)this + 2), v98, v82, (uint64_t)a2, 0);
    operations_research::Domain::operator=(&v106, (unint64_t *)&v102);
    std::set<int>::insert[abi:ne180100]((uint64_t **)&v109, (int *)v99);
    v85 = 5;
    goto LABEL_156;
  }
  v87 = (const char *)v98;
  operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)(v86 + 77), v83, (unint64_t *)&v100);
  v88 = operations_research::sat::PresolveContext::IntersectDomainWith((operations_research::sat::PresolveContext *)v86, v87, (const operations_research::Domain *)&v100, 0);
  if ((v100 & 1) != 0)
    operator delete(v101[0]);
  if ((v88 & 1) == 0)
    goto LABEL_152;
  if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v98))
  {
LABEL_140:
    v85 = 7;
    goto LABEL_156;
  }
  v90 = operations_research::sat::PresolveContext::CanonicalizeObjective(*((operations_research::sat::PresolveContext **)this + 2), v89);
  v91 = *((_QWORD *)this + 2);
  if (!v90)
  {
    std::string::basic_string[abi:ne180100]<0>(&v100, "");
    LOBYTE(v3) = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v91, (uint64_t)&v100);
    if (SHIBYTE(v101[1]) < 0)
      operator delete(v100);
    v85 = 1;
    goto LABEL_156;
  }
  if (absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::contains<int>((_QWORD *)(v91 + 536), &v98))
  {
    v92 = *((_QWORD *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(&v100, "linear: singleton column define objective.");
    operations_research::sat::PresolveContext::UpdateRuleStats(v92, (uint64_t)&v100);
    if (SHIBYTE(v101[1]) < 0)
      operator delete(v100);
    operations_research::sat::PresolveContext::SubstituteVariableInObjective(*((_QWORD *)this + 2), v98, v82, (uint64_t)a2, 0);
    operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)this + 2), v98);
    v93 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 56));
    operations_research::sat::ConstraintProto::CopyFrom(v93, a2);
    operations_research::sat::ConstraintProto::Clear(a2);
LABEL_152:
    v85 = 1;
    LOBYTE(v3) = 1;
    goto LABEL_156;
  }
  google::LogMessage::LogMessage((google::LogMessage *)&v100, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1159, 1);
  v94 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"This was not supposed to happen and the presolve could be improved.", 67);
  google::LogMessage::~LogMessage((google::LogMessage *)&v100);
  v85 = 7;
LABEL_156:
  if ((v102 & 1) != 0)
    operator delete(__p);
LABEL_158:
  if ((v104 & 1) != 0)
    operator delete(v105);
  if (v85 == 7)
    goto LABEL_128;
  if (v85 == 5)
  {
LABEL_169:
    if (!v111)
      goto LABEL_170;
LABEL_61:
    v38 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
    v39 = *(int **)(v38 + 56);
    if (!v39)
    {
      v41 = *(_DWORD *)(v38 + 52);
      goto LABEL_71;
    }
    v40 = *(int *)(v38 + 48);
    v41 = *v39;
    if ((int)v40 < *v39)
    {
      *(_DWORD *)(v38 + 48) = v40 + 1;
      v42 = *(operations_research::sat::ConstraintProto **)&v39[2 * v40 + 2];
      goto LABEL_73;
    }
    if (v41 == *(_DWORD *)(v38 + 52))
    {
LABEL_71:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v38 + 40), v41 + 1);
      v39 = *(int **)(v38 + 56);
      v41 = *v39;
    }
    *v39 = v41 + 1;
    v42 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v38 + 40));
    v46 = *(_QWORD *)(v38 + 56);
    v47 = *(int *)(v38 + 48);
    *(_DWORD *)(v38 + 48) = v47 + 1;
    *(_QWORD *)(v46 + 8 * v47 + 8) = v42;
LABEL_73:
    operations_research::sat::ConstraintProto::CopyFrom(v42, a2);
    if ((int)v8 >= 1)
    {
      v48 = 0;
      v49 = 0;
LABEL_76:
      while (1)
      {
        v50 = v110;
        if (v110)
          break;
LABEL_77:
        if (*((_DWORD *)a2 + 15) == 12)
        {
          v51 = *((_QWORD *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 12;
          v54 = *((_QWORD *)a2 + 1);
          v55 = (google::protobuf::Arena *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if ((v54 & 1) != 0)
            v55 = *(google::protobuf::Arena **)v55;
          v51 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v55);
          *((_QWORD *)a2 + 6) = v51;
          if (*((_DWORD *)a2 + 15) != 12)
          {
            *(_QWORD *)(*(_QWORD *)(v51 + 48) + 8 * v49) = *(_QWORD *)(qword_25408AC80 + 8 * v48);
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
            *((_DWORD *)a2 + 15) = 12;
            v59 = *((_QWORD *)a2 + 1);
            v60 = (google::protobuf::Arena *)(v59 & 0xFFFFFFFFFFFFFFFELL);
            if ((v59 & 1) != 0)
              v60 = *(google::protobuf::Arena **)v60;
            v57 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v60);
            v56 = v49;
            *((_QWORD *)a2 + 6) = v57;
            v58 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (*((_DWORD *)a2 + 15) != 12)
              goto LABEL_90;
            goto LABEL_89;
          }
        }
        v56 = v49;
        *(_QWORD *)(*(_QWORD *)(v51 + 48) + 8 * v49) = *(_QWORD *)(*(_QWORD *)(v51 + 48) + 8 * v48);
        v57 = *((_QWORD *)a2 + 6);
LABEL_89:
        v58 = (uint64_t *)v57;
LABEL_90:
        *(_DWORD *)(*(_QWORD *)(v57 + 24) + 4 * v56) = *(_DWORD *)(v58[3] + 4 * v48);
        ++v49;
        if (++v48 == v8)
          goto LABEL_97;
      }
      while (1)
      {
        v52 = *((int *)v50 + 7);
        if (v48 >= v52)
        {
          if (v48 <= v52)
          {
            v53 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (*((_DWORD *)a2 + 15) == 12)
              v53 = (uint64_t *)*((_QWORD *)a2 + 6);
            operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)this + 2), *(_DWORD *)(v53[3] + 4 * v48++));
            if (v48 == v8)
              goto LABEL_97;
            goto LABEL_76;
          }
          ++v50;
        }
        v50 = (uint64_t *)*v50;
        if (!v50)
          goto LABEL_77;
      }
    }
    v49 = 0;
LABEL_97:
    if (*((_DWORD *)a2 + 15) == 12)
    {
      v61 = *((_QWORD *)a2 + 6);
      if (*(int *)(v61 + 16) < 1)
        goto LABEL_100;
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
      *((_DWORD *)a2 + 15) = 12;
      v64 = *((_QWORD *)a2 + 1);
      v65 = (google::protobuf::Arena *)(v64 & 0xFFFFFFFFFFFFFFFELL);
      if ((v64 & 1) != 0)
        v65 = *(google::protobuf::Arena **)v65;
      v61 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v65);
      *((_QWORD *)a2 + 6) = v61;
      if (*(int *)(v61 + 16) < 1)
      {
LABEL_100:
        if (*((_DWORD *)a2 + 15) == 12)
        {
          v62 = *((_QWORD *)a2 + 6);
          if (*(int *)(v62 + 40) < 1)
          {
LABEL_103:
            if (*((_DWORD *)a2 + 15) == 12)
            {
              v63 = *((_QWORD *)a2 + 6);
            }
            else
            {
              operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
              *((_DWORD *)a2 + 15) = 12;
              v68 = *((_QWORD *)a2 + 1);
              v69 = (google::protobuf::Arena *)(v68 & 0xFFFFFFFFFFFFFFFELL);
              if ((v68 & 1) != 0)
                v69 = *(google::protobuf::Arena **)v69;
              v63 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v69);
              *((_QWORD *)a2 + 6) = v63;
            }
            *(_DWORD *)(v63 + 64) = 0;
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v106 >> 1);
            if ((v106 & 1) != 0)
              v70 = (uint64_t *)v107;
            else
              v70 = (uint64_t *)&v107;
            if (v106 >= 2)
            {
              v71 = &v70[2 * (v106 >> 1)];
              v72 = *(_DWORD *)(v63 + 64);
              do
              {
                v73 = *v70;
                v74 = *(_DWORD *)(v63 + 68);
                v75 = v72 + 1;
                if (v72 == v74)
                {
                  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v72 + 1);
                  v74 = *(_DWORD *)(v63 + 68);
                }
                v76 = *(_QWORD *)(v63 + 72);
                *(_QWORD *)(v76 + 8 * v72) = v73;
                *(_DWORD *)(v63 + 64) = v75;
                v77 = v70[1];
                v72 += 2;
                if (v75 == v74)
                {
                  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v72);
                  v76 = *(_QWORD *)(v63 + 72);
                }
                *(_QWORD *)(v76 + 8 * v75) = v77;
                *(_DWORD *)(v63 + 64) = v72;
                v70 += 2;
              }
              while (v70 != v71);
            }
            operations_research::sat::CpModelPresolver::DivideLinearByGcd(this, a2);
            LOBYTE(v3) = 1;
            goto LABEL_171;
          }
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 12;
          v66 = *((_QWORD *)a2 + 1);
          v67 = (google::protobuf::Arena *)(v66 & 0xFFFFFFFFFFFFFFFELL);
          if ((v66 & 1) != 0)
            v67 = *(google::protobuf::Arena **)v67;
          v62 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v67);
          *((_QWORD *)a2 + 6) = v62;
          if (*(int *)(v62 + 40) < 1)
            goto LABEL_103;
        }
        *(_DWORD *)(v62 + 40) = v49;
        goto LABEL_103;
      }
    }
    *(_DWORD *)(v61 + 16) = v49;
    goto LABEL_100;
  }
LABEL_171:
  if ((v106 & 1) != 0)
    operator delete(v107);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v109, v110);
  return v3 & 1;
}

void sub_22DACBFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DACC004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25,char a26,void *a27,uint64_t a28,char a29,void *__p)
{
  uint64_t v30;

  if ((a29 & 1) != 0)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v30 - 112, *(_QWORD **)(v30 - 104));
  _Unwind_Resume(a1);
}

unint64_t *operations_research::Domain::operator=(unint64_t *a1, unint64_t *a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;

  if (a1 != a2)
  {
    v3 = *a2;
    v6 = (__int128 *)a2[1];
    v4 = (__int128 *)(a2 + 1);
    v5 = v6;
    if ((v3 & 1) != 0)
      v4 = v5;
    absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Assign<absl::lts_2020_02_25::inlined_vector_internal::IteratorValueAdapter<std::allocator<operations_research::ClosedInterval>,operations_research::ClosedInterval const*>>(a1, v4, v3 >> 1);
  }
  return a1;
}

BOOL absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::contains<int>(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  v5 = (v4 >> 7) ^ (*a1 >> 12);
  v6 = a1[3];
  v7 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v8 = v5 & v6;
    v9 = *(_QWORD *)(*a1 + v8);
    v10 = ((v9 ^ v7) - 0x101010101010101) & ~(v9 ^ v7) & 0x8080808080808080;
    if (v10)
      break;
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0)
    {
      v11 = a1[3];
      return v11 != v6;
    }
    v2 += 8;
    v5 = v2 + v8;
  }
  while (1)
  {
    v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v6;
    if (*(_DWORD *)(a1[1] + 16 * v11) == (_DWORD)v3)
      return v11 != v6;
    v10 &= v10 - 1;
    if (!v10)
      goto LABEL_5;
  }
}

uint64_t operations_research::sat::CpModelPresolver::PresolveSmallLinear(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2, __n128 a3)
{
  operations_research::sat::PresolveContext *v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __n128 v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  __n128 v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  unsigned int *v29;
  const char *v30;
  const char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t *v36;
  const char *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t *v40;
  int v41;
  unint64_t v42;
  operations_research::sat::PresolveContext *v43;
  char v44;
  _QWORD *v45;
  operations_research::sat::PresolveContext *v46;
  uint64_t v47;
  __n128 v48;
  const char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  unint64_t v64;
  void *v65;
  unint64_t v66;
  void *v67;
  unint64_t v68;
  void *v69;
  int v70;
  char __p[17];
  char v72;

  if (*((_DWORD *)a2 + 15) != 12)
    return 0;
  v4 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (*((_BYTE *)v4 + 504))
    return 0;
  v8 = *((_QWORD *)a2 + 6);
  v9 = *(_DWORD *)(v8 + 16);
  if (!v9)
  {
    v72 = 13;
    strcpy(__p, "linear: empty");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v4, (uint64_t)__p);
    if (v72 < 0)
      operator delete(*(void **)__p);
    if (*((_DWORD *)a2 + 15) == 12)
      v16 = (uint64_t *)*((_QWORD *)a2 + 6);
    else
      v16 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    operations_research::Domain::FromFlatSpanOfIntervals(v16[9], *((int *)v16 + 16), (unint64_t *)__p, v15);
    if (operations_research::Domain::Contains((operations_research::Domain *)__p, 0))
    {
      operations_research::sat::ConstraintProto::Clear(a2);
      v5 = 1;
      goto LABEL_31;
    }
    v19 = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
LABEL_30:
    v5 = v19;
LABEL_31:
    if ((__p[0] & 1) != 0)
      operator delete(*(void **)&__p[8]);
    return v5;
  }
  v70 = 0;
  if (v9 == 1
    && *((int *)a2 + 4) >= 1
    && **(_QWORD **)(v8 + 48) == 1
    && operations_research::sat::PresolveContext::GetAbsRelation(v4, **(_DWORD **)(v8 + 24), &v70))
  {
    v10 = *((_QWORD *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "linear: remove abs from abs(x) in domain");
    operations_research::sat::PresolveContext::UpdateRuleStats(v10, (uint64_t)__p);
    if (v72 < 0)
      operator delete(*(void **)__p);
    if (*((_DWORD *)a2 + 15) == 12)
      v12 = (uint64_t *)*((_QWORD *)a2 + 6);
    else
      v12 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    operations_research::Domain::FromFlatSpanOfIntervals(v12[9], *((int *)v12 + 16), &v66, v11);
    operations_research::Domain::Domain(&v64, 0, 0x7FFFFFFFFFFFFFFFLL);
    operations_research::Domain::IntersectionWith(&v66, (const operations_research::Domain *)&v64, &v68);
    if (*((_DWORD *)a2 + 15) == 12)
      v36 = (uint64_t *)*((_QWORD *)a2 + 6);
    else
      v36 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)v36[3], &v62);
    operations_research::Domain::IntersectionWith(&v68, (const operations_research::Domain *)&v62, (unint64_t *)__p);
    if ((v62 & 1) != 0)
    {
      operator delete(v63);
      if ((v68 & 1) == 0)
      {
LABEL_55:
        if ((v64 & 1) == 0)
          goto LABEL_56;
        goto LABEL_62;
      }
    }
    else if ((v68 & 1) == 0)
    {
      goto LABEL_55;
    }
    operator delete(v69);
    if ((v64 & 1) == 0)
    {
LABEL_56:
      if ((v66 & 1) == 0)
        goto LABEL_58;
      goto LABEL_57;
    }
LABEL_62:
    operator delete(v65);
    if ((v66 & 1) == 0)
    {
LABEL_58:
      if (operations_research::Domain::IsEmpty((operations_research::Domain *)__p))
      {
        v19 = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
        goto LABEL_30;
      }
      operations_research::Domain::Negation((operations_research::Domain *)__p, v37, &v64);
      operations_research::Domain::UnionWith((operations_research::Domain *)__p, (const operations_research::Domain *)&v64, &v66);
      operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v70, &v62);
      operations_research::Domain::IntersectionWith(&v66, (const operations_research::Domain *)&v62, &v68);
      if ((v62 & 1) != 0)
      {
        operator delete(v63);
        if ((v66 & 1) == 0)
        {
LABEL_66:
          if ((v64 & 1) == 0)
          {
LABEL_68:
            if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v68))
            {
              v5 = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
            }
            else
            {
              v51 = operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
              operations_research::sat::ConstraintProto::set_name(v51, *((std::string **)a2 + 5));
              v52 = *((int *)a2 + 4);
              if ((_DWORD)v52)
              {
                v53 = (int *)*((_QWORD *)a2 + 3);
                v54 = *(_DWORD *)(v51 + 16);
                v55 = 4 * v52;
                do
                {
                  v56 = *v53;
                  if (v54 == *(_DWORD *)(v51 + 20))
                    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v51 + 16), v54 + 1);
                  *(_DWORD *)(*(_QWORD *)(v51 + 24) + 4 * v54) = v56;
                  *(_DWORD *)(v51 + 16) = v54 + 1;
                  ++v53;
                  ++v54;
                  v55 -= 4;
                }
                while (v55);
              }
              v57 = operations_research::sat::ConstraintProto::mutable_linear((operations_research::sat::ConstraintProto *)v51);
              v58 = v70;
              v59 = *(unsigned int *)(v57 + 16);
              if ((_DWORD)v59 == *(_DWORD *)(v57 + 20))
                google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v57 + 16), v59 + 1);
              *(_DWORD *)(*(_QWORD *)(v57 + 24) + 4 * v59) = v58;
              v60 = *(unsigned int *)(v57 + 40);
              *(_DWORD *)(v57 + 16) = v59 + 1;
              if ((_DWORD)v60 == *(_DWORD *)(v57 + 44))
                google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 40), v60 + 1);
              *(_QWORD *)(*(_QWORD *)(v57 + 48) + 8 * v60) = 1;
              *(_DWORD *)(v57 + 40) = v60 + 1;
              v61 = operations_research::sat::ConstraintProto::mutable_linear((operations_research::sat::ConstraintProto *)v51);
              operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>(&v68, v61);
              operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                           + 2));
              operations_research::sat::ConstraintProto::Clear(a2);
              v5 = 1;
            }
            if ((v68 & 1) != 0)
              operator delete(v69);
            goto LABEL_31;
          }
LABEL_67:
          operator delete(v65);
          goto LABEL_68;
        }
      }
      else if ((v66 & 1) == 0)
      {
        goto LABEL_66;
      }
      operator delete(v67);
      if ((v64 & 1) == 0)
        goto LABEL_68;
      goto LABEL_67;
    }
LABEL_57:
    operator delete(v67);
    goto LABEL_58;
  }
  v13 = *((_DWORD *)a2 + 4);
  if (v13)
  {
    if (v13 != 1)
      return 0;
    v14 = *((_DWORD *)a2 + 15) == 12
        ? (uint64_t *)*((_QWORD *)a2 + 6)
        : &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (*((_DWORD *)v14 + 4) != 1 || *(_QWORD *)v14[6] == -1)
      return 0;
    v20 = (const char *)**((unsigned int **)a2 + 3);
    v21 = (const char *)*(unsigned int *)v14[3];
    if (~(_DWORD)v21 <= (int)v21)
      v22 = *(_DWORD *)v14[3];
    else
      v22 = ~(_DWORD)v21;
    if ((v21 & 0x80000000) != 0)
    {
      v24 = 0;
      v23 = -*(_QWORD *)v14[6];
    }
    else
    {
      v23 = *(_QWORD *)v14[6];
      v24 = 1;
    }
    if (*((_DWORD *)v14 + 16) == 2)
    {
      v45 = (_QWORD *)v14[9];
      v46 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
      if (*v45 == v45[1])
      {
        if (v24)
          v47 = *v45 * v23;
        else
          v47 = -(*v45 * v23);
        if (operations_research::sat::PresolveContext::StoreLiteralImpliesVarEqValue(v46, v20, v22, v47))
          operations_research::SparseBitset<long long>::Set((_QWORD *)(*((_QWORD *)this + 2) + 248), v22);
LABEL_129:
        operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                     + 2));
        return 0;
      }
    }
    else
    {
      v46 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
    }
    operations_research::sat::PresolveContext::DomainOf(v46, v21, &v68);
    operations_research::Domain::FromFlatSpanOfIntervals(v14[9], *((int *)v14 + 16), &v64, v48);
    operations_research::Domain::Complement((operations_research::Domain *)&v64, &v66);
    operations_research::Domain::IntersectionWith(&v68, (const operations_research::Domain *)&v66, (unint64_t *)__p);
    if ((v66 & 1) != 0)
    {
      operator delete(v67);
      if ((v64 & 1) == 0)
      {
LABEL_94:
        if ((v68 & 1) == 0)
          goto LABEL_96;
        goto LABEL_95;
      }
    }
    else if ((v64 & 1) == 0)
    {
      goto LABEL_94;
    }
    operator delete(v65);
    if ((v68 & 1) == 0)
    {
LABEL_96:
      if (operations_research::Domain::Size((operations_research::Domain *)__p) == 1)
      {
        if (v24)
          v50 = operations_research::Domain::Min((operations_research::Domain *)__p, v49) * v23;
        else
          v50 = -(v23 * operations_research::Domain::Min((operations_research::Domain *)__p, v49));
        if (operations_research::sat::PresolveContext::StoreLiteralImpliesVarNEqValue(*((operations_research::sat::PresolveContext **)this + 2), v20, v22, v50))operations_research::SparseBitset<long long>::Set((_QWORD *)(*((_QWORD *)this + 2) + 248), v22);
        if ((__p[0] & 1) != 0)
          operator delete(*(void **)&__p[8]);
        goto LABEL_129;
      }
LABEL_132:
      if ((__p[0] & 1) != 0)
        operator delete(*(void **)&__p[8]);
      return 0;
    }
LABEL_95:
    operator delete(v69);
    goto LABEL_96;
  }
  if (*((_DWORD *)a2 + 15) != 12)
  {
    v17 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if ((_DWORD)qword_25408AC60 == 2)
      goto LABEL_45;
    if ((_DWORD)qword_25408AC60 != 1)
      return 0;
LABEL_43:
    if ((*(_DWORD *)v17[3] & 0x80000000) != 0)
      v25 = -*(_QWORD *)v17[6];
    else
      v25 = *(_QWORD *)v17[6];
    v38 = *((_QWORD *)this + 2);
    v72 = 16;
    strcpy(__p, "linear: size one");
    operations_research::sat::PresolveContext::UpdateRuleStats(v38, (uint64_t)__p);
    if (v72 < 0)
      operator delete(*(void **)__p);
    if (*((_DWORD *)a2 + 15) == 12)
      v40 = (uint64_t *)*((_QWORD *)a2 + 6);
    else
      v40 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    v41 = *(_DWORD *)v40[3];
    if (~v41 <= v41)
      v42 = v41;
    else
      v42 = ~v41;
    operations_research::Domain::FromFlatSpanOfIntervals(v40[9], *((int *)v40 + 16), (unint64_t *)__p, v39);
    v43 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
    operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)__p, v25, &v68);
    v44 = operations_research::sat::PresolveContext::IntersectDomainWith(v43, (const char *)v42, (const operations_research::Domain *)&v68, 0);
    if ((v68 & 1) != 0)
      operator delete(v69);
    if ((v44 & 1) != 0)
      operations_research::sat::ConstraintProto::Clear(a2);
    goto LABEL_106;
  }
  v17 = (uint64_t *)*((_QWORD *)a2 + 6);
  v18 = *((_DWORD *)v17 + 4);
  if (v18 == 1)
    goto LABEL_43;
  if (v18 != 2)
    return 0;
LABEL_45:
  operations_research::Domain::FromFlatSpanOfIntervals(v17[9], *((int *)v17 + 16), (unint64_t *)__p, a3);
  v27 = operations_research::Domain::Min((operations_research::Domain *)__p, v26);
  if (v27 != operations_research::Domain::Max((operations_research::Domain *)__p, v28))
    goto LABEL_132;
  v29 = (unsigned int *)v17[3];
  v31 = (const char *)*v29;
  v30 = (const char *)v29[1];
  v32 = (uint64_t *)v17[6];
  v34 = *v32;
  v33 = v32[1];
  if (*v32 == 1)
  {
    v33 = -v33;
  }
  else
  {
    if (v33 == 1)
    {
      v33 = -v34;
      v35 = v30;
      v30 = v31;
      goto LABEL_104;
    }
    if (v34 != -1)
    {
      if (v33 != -1)
        goto LABEL_132;
      v27 = -v27;
      v35 = v30;
      v30 = v31;
      v33 = *v32;
      goto LABEL_104;
    }
    v27 = -v27;
  }
  v35 = v31;
LABEL_104:
  if (!operations_research::sat::PresolveContext::StoreAffineRelation(*((operations_research::sat::PresolveContext **)this + 2), v35, v30, v33, v27))goto LABEL_132;
  operations_research::sat::ConstraintProto::Clear(a2);
LABEL_106:
  if ((__p[0] & 1) != 0)
    operator delete(*(void **)&__p[8]);
  return 1;
}

void sub_22DACCA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14, uint64_t a15, char a16, void *a17, uint64_t a18, char a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,int a25,__int16 a26,char a27,char a28)
{
  if ((a19 & 1) != 0)
    operator delete(__p);
  if ((a23 & 1) != 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void operations_research::SparseBitset<long long>::Set(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;

  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 8 * (a2 >> 6));
  if ((v3 & (1 << a2)) == 0)
  {
    *(_QWORD *)(v2 + 8 * (a2 >> 6)) = v3 | (1 << a2);
    v7 = (char *)a1[8];
    v6 = a1[9];
    if ((unint64_t)v7 < v6)
    {
      *(_QWORD *)v7 = a2;
      v8 = (uint64_t)(v7 + 8);
LABEL_23:
      a1[8] = v8;
      return;
    }
    v9 = (char *)a1[7];
    v10 = (v7 - v9) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(8 * v13);
      v15 = (unint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = a2;
      v8 = (uint64_t)(v15 + 1);
      v17 = v7 - v9;
      if (v7 == v9)
        goto LABEL_21;
    }
    else
    {
      v14 = 0;
      v15 = (unint64_t *)(8 * v10);
      v16 = 0;
      *(_QWORD *)(8 * v10) = a2;
      v8 = 8 * v10 + 8;
      v17 = v7 - v9;
      if (v7 == v9)
      {
LABEL_21:
        a1[7] = v15;
        a1[8] = v8;
        a1[9] = v16;
        if (v9)
          operator delete(v9);
        goto LABEL_23;
      }
    }
    v18 = v17 - 8;
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v7[-v20];
    v15 = (unint64_t *)((char *)v15 - v20);
    v22 = &v14[8 * v10 - 16];
    v23 = v7 - 16;
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    v7 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v26 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v15 = v26;
      }
      while (v7 != v9);
    }
    goto LABEL_21;
  }
}

uint64_t operations_research::sat::CpModelPresolver::PropagateDomainsInLinear(operations_research::sat::CpModelPresolver *this, int a2, operations_research::sat::ConstraintProto *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __n128 v22;
  unint64_t *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  const char *v28;
  uint64_t v29;
  int8x16_t v30;
  unint64_t *v31;
  void **v32;
  const char *v33;
  unint64_t *v34;
  _BYTE *v35;
  void **v36;
  unint64_t *v37;
  uint64_t *v38;
  operations_research::Domain *v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  unint64_t v43;
  void **v44;
  void **v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  google::protobuf::Arena *v50;
  const char *v51;
  uint64_t *v52;
  uint64_t v53;
  const char *v54;
  char IsIncludedIn;
  operations_research::sat::PresolveContext **v56;
  uint64_t v57;
  const char *v58;
  char v59;
  uint64_t *v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  unint64_t *v68;
  void **v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  int *v74;
  uint64_t v75;
  const char *v76;
  int8x16_t v77;
  int v78;
  operations_research::sat::PresolveContext *v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  __int128 *v83;
  unint64_t v84;
  int v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  unint64_t v89;
  operations_research::sat::PresolveContext *v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  operations_research::sat::PresolveContext *v105;
  uint64_t v106;
  const char *v107;
  const char *v108;
  const operations_research::Domain *v109;
  int CanBeFixedToMax;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  const operations_research::Domain *v124;
  int CanBeFixedToMin;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t *v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  int v134;
  uint64_t *v135;
  uint64_t v136;
  const char *v137;
  char v138;
  uint64_t v139;
  char v140;
  operations_research::sat::PresolveContext *v141;
  _QWORD *v142;
  _BOOL4 v143;
  uint64_t *v144;
  uint64_t v145;
  int *v146;
  char *v147;
  operations_research::sat::ConstraintProto *v148;
  _QWORD *v149;
  _QWORD *v150;
  int *v151;
  char v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int *v156;
  uint64_t v157;
  int v158;
  int v159;
  unint64_t v160;
  operations_research::sat::PresolveContext *v161;
  const char *v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  int *v168;
  int *v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  operations_research::sat::PresolveContext *v173;
  int v174;
  operations_research::sat::ConstraintProto *v175;
  uint64_t v176;
  google::LogMessage *v177;
  _QWORD *v178;
  google::LogMessage *v179;
  _QWORD *v180;
  unint64_t *v181;
  unint64_t *v182;
  BOOL v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  operations_research::sat::PresolveContext **v188;
  unint64_t **v189;
  std::string v190;
  void *v191;
  int *v192;
  uint64_t v193;
  unint64_t v194;
  __int128 v195;
  int v196[3];
  __int128 v197;
  unint64_t v198;
  __int128 v199;
  unint64_t v200;
  __int128 __p;
  unint64_t v202;
  __int128 v203;
  BOOL v204;
  __int16 v205;
  unint64_t v206;
  __int128 v207;
  unint64_t v208;
  void **v209;
  int v210;
  uint64_t *v211;
  void *v212;
  _BYTE v213[32];
  unint64_t v214[10];

  v214[7] = *MEMORY[0x24BDAC8D0];
  v210 = a2;
  if (*((_DWORD *)a3 + 15) != 12)
    return 0;
  v4 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v4 + 504))
    return 0;
  v187 = *(unsigned int *)(*((_QWORD *)a3 + 6) + 16);
  v8 = (int)v187 + 1;
  v10 = *(_QWORD *)(v4 + 152);
  v9 = *(_QWORD *)(v4 + 160);
  v11 = (_QWORD *)(v4 + 152);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
  if (v8 <= v12)
  {
    if (v8 < v12)
    {
      v13 = v10 + 24 * v8;
      if (v9 != v13)
      {
        v14 = *(_QWORD *)(v4 + 160);
        do
        {
          v15 = *(_BYTE *)(v14 - 24);
          v14 -= 24;
          if ((v15 & 1) != 0)
            operator delete(*(void **)(v9 - 16));
          v9 = v14;
        }
        while (v14 != v13);
      }
      *(_QWORD *)(v4 + 160) = v13;
    }
  }
  else
  {
    std::vector<operations_research::Domain>::__append((uint64_t *)(v4 + 152), v8 - v12);
  }
  v17 = *(_QWORD *)(v4 + 176);
  v16 = *(_QWORD *)(v4 + 184);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 3);
  v189 = (unint64_t **)(v4 + 176);
  if (v8 <= v18)
  {
    if (v8 < v18)
    {
      v19 = v17 + 24 * v8;
      if (v16 != v19)
      {
        v20 = *(_QWORD *)(v4 + 184);
        do
        {
          v21 = *(_BYTE *)(v20 - 24);
          v20 -= 24;
          if ((v21 & 1) != 0)
            operator delete(*(void **)(v16 - 16));
          v16 = v20;
        }
        while (v20 != v19);
      }
      *(_QWORD *)(v4 + 184) = v19;
    }
  }
  else
  {
    std::vector<operations_research::Domain>::__append((uint64_t *)(v4 + 176), v8 - v18);
  }
  v188 = (operations_research::sat::PresolveContext **)this;
  operations_research::Domain::Domain(v214, 0);
  v23 = *v189;
  if (*v189 == v214)
  {
    if ((v214[0] & 1) != 0)
      operator delete((void *)v214[1]);
  }
  else
  {
    v24 = (void **)(v23 + 1);
    if ((*(_BYTE *)v23 & 1) != 0)
      operator delete(*v24);
    *v23 = v214[0];
    v22 = *(__n128 *)&v214[1];
    *(_OWORD *)v24 = *(_OWORD *)&v214[1];
  }
  if ((int)v187 >= 1)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (*((_DWORD *)a3 + 15) == 12)
        v27 = (uint64_t *)*((_QWORD *)a3 + 6);
      v28 = (const char *)*(unsigned int *)(v27[3] + 4 * v26);
      if ((v28 & 0x80000000) != 0)
      {
        v177 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v214, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1427);
        v178 = (_QWORD *)google::LogMessage::stream(v177);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
        goto LABEL_293;
      }
      v29 = *(_QWORD *)(v27[6] + 8 * v26);
      operations_research::sat::PresolveContext::DomainOf(v188[2], v28, (unint64_t *)&v211);
      operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v211, 0, v29, v214);
      v31 = (unint64_t *)(*v11 + v25 * 8);
      if (v31 == v214)
      {
        if ((v214[0] & 1) != 0)
          operator delete((void *)v214[1]);
      }
      else
      {
        v32 = (void **)(v31 + 1);
        if ((*(_BYTE *)v31 & 1) != 0)
          operator delete(*v32);
        *v31 = v214[0];
        v30 = *(int8x16_t *)&v214[1];
        *(_OWORD *)v32 = *(_OWORD *)&v214[1];
        v214[0] = 0;
      }
      if ((v211 & 1) != 0)
        operator delete(v212);
      operations_research::Domain::AdditionWith((operations_research::Domain *)&(*v189)[v25], (const operations_research::Domain *)(*v11 + v25 * 8), &v211, v30);
      operations_research::Domain::RelaxIfTooComplex((unint64_t *)&v211, v33, v214);
      v34 = &(*v189)[v25];
      v35 = v34 + 3;
      if (v34 + 3 == v214)
      {
        if ((v214[0] & 1) != 0)
          operator delete((void *)v214[1]);
      }
      else
      {
        v36 = (void **)(v34 + 4);
        if ((*v35 & 1) != 0)
          operator delete(*v36);
        *(_QWORD *)v35 = v214[0];
        v22 = *(__n128 *)&v214[1];
        *(_OWORD *)v36 = *(_OWORD *)&v214[1];
        v214[0] = 0;
      }
      if ((v211 & 1) != 0)
        operator delete(v212);
      v25 += 3;
      ++v26;
    }
    while (3 * v187 != v25);
  }
  v37 = *v189;
  v38 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  if (*((_DWORD *)a3 + 15) == 12)
    v38 = (uint64_t *)*((_QWORD *)a3 + 6);
  operations_research::Domain::FromFlatSpanOfIntervals(v38[9], *((int *)v38 + 16), &v208, v22);
  v39 = (operations_research::Domain *)&v37[3 * (int)v187];
  if (operations_research::Domain::IsIncludedIn(v39, (const operations_research::Domain *)&v208))
  {
    v40 = (uint64_t)v188[2];
    HIBYTE(v214[2]) = 19;
    strcpy((char *)v214, "linear: always true");
    operations_research::sat::PresolveContext::UpdateRuleStats(v40, (uint64_t)v214);
    if (SHIBYTE(v214[2]) < 0)
      operator delete((void *)v214[0]);
    operations_research::sat::ConstraintProto::Clear(a3);
    v5 = 1;
    goto LABEL_285;
  }
  operations_research::Domain::SimplifyUsingImpliedDomain((operations_research::Domain *)&v208, v39, &v206);
  if (operations_research::Domain::IsEmpty((operations_research::Domain *)&v206))
  {
    v41 = (uint64_t)v188[2];
    HIBYTE(v214[2]) = 18;
    strcpy((char *)v214, "linear: infeasible");
    operations_research::sat::PresolveContext::UpdateRuleStats(v41, (uint64_t)v214);
    if (SHIBYTE(v214[2]) < 0)
      operator delete((void *)v214[0]);
    v5 = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse((operations_research::sat::CpModelPresolver *)v188, a3);
    if ((v206 & 1) == 0)
      goto LABEL_285;
    goto LABEL_284;
  }
  v42 = (void **)v207;
  if ((v206 & 1) == 0)
    v42 = (void **)&v207;
  v43 = (8 * v206) & 0xFFFFFFFFFFFFFFF0;
  if (v43 == 16 * (v208 >> 1))
  {
    if (v206 < 2)
      goto LABEL_76;
    v44 = (void **)((char *)v42 + v43);
    if ((v208 & 1) != 0)
      v45 = v209;
    else
      v45 = (void **)&v209;
    while (*v42 == *v45 && v42[1] == v45[1])
    {
      v42 += 2;
      v45 += 2;
      if (v42 == v44)
        goto LABEL_76;
    }
  }
  v47 = (uint64_t)v188[2];
  strcpy((char *)v214, "linear: simplified rhs");
  HIBYTE(v214[2]) = 22;
  operations_research::sat::PresolveContext::UpdateRuleStats(v47, (uint64_t)v214);
  if (SHIBYTE(v214[2]) < 0)
    operator delete((void *)v214[0]);
LABEL_76:
  if (*((_DWORD *)a3 + 15) == 12)
  {
    v48 = *((_QWORD *)a3 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a3);
    *((_DWORD *)a3 + 15) = 12;
    v49 = *((_QWORD *)a3 + 1);
    v50 = (google::protobuf::Arena *)(v49 & 0xFFFFFFFFFFFFFFFELL);
    if ((v49 & 1) != 0)
      v50 = *(google::protobuf::Arena **)v50;
    v48 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v50);
    *((_QWORD *)a3 + 6) = v48;
  }
  *(_DWORD *)(v48 + 64) = 0;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v48 + 64), v206 >> 1);
  if ((v206 & 1) != 0)
    v52 = (uint64_t *)v207;
  else
    v52 = (uint64_t *)&v207;
  if (v206 >= 2)
  {
    v60 = &v52[2 * (v206 >> 1)];
    v61 = *(_DWORD *)(v48 + 64);
    do
    {
      v62 = *v52;
      v63 = *(_DWORD *)(v48 + 68);
      v64 = v61 + 1;
      if (v61 == v63)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v48 + 64), v61 + 1);
        v63 = *(_DWORD *)(v48 + 68);
      }
      v65 = *(_QWORD *)(v48 + 72);
      *(_QWORD *)(v65 + 8 * v61) = v62;
      *(_DWORD *)(v48 + 64) = v64;
      v66 = v52[1];
      v61 += 2;
      if (v64 == v63)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v48 + 64), v61);
        v65 = *(_QWORD *)(v48 + 72);
      }
      *(_QWORD *)(v65 + 8 * v64) = v66;
      *(_DWORD *)(v48 + 64) = v61;
      v52 += 2;
    }
    while (v52 != v60);
  }
  HIBYTE(v205) = 0;
  v53 = operations_research::Domain::Max((operations_research::Domain *)&v206, v51);
  operations_research::Domain::Domain(&v211, 0x8000000000000000, v53);
  operations_research::Domain::IntersectionWith(v39, (const operations_research::Domain *)&v211, v214);
  IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)v214, (const operations_research::Domain *)&v206);
  v56 = v188;
  if ((v214[0] & 1) != 0)
    operator delete((void *)v214[1]);
  if ((v211 & 1) != 0)
    operator delete(v212);
  HIBYTE(v205) = IsIncludedIn;
  LOBYTE(v205) = 0;
  v57 = operations_research::Domain::Min((operations_research::Domain *)&v206, v54);
  operations_research::Domain::Domain(&v211, v57, 0x7FFFFFFFFFFFFFFFLL);
  operations_research::Domain::IntersectionWith(v39, (const operations_research::Domain *)&v211, v214);
  v59 = operations_research::Domain::IsIncludedIn((operations_research::Domain *)v214, (const operations_research::Domain *)&v206);
  if ((v214[0] & 1) != 0)
  {
    operator delete((void *)v214[1]);
    if ((v211 & 1) == 0)
    {
LABEL_91:
      LOBYTE(v205) = v59;
      if (*((int *)a3 + 4) > 1)
        goto LABEL_92;
      goto LABEL_102;
    }
  }
  else if ((v211 & 1) == 0)
  {
    goto LABEL_91;
  }
  operator delete(v212);
  LOBYTE(v205) = v59;
  if (*((int *)a3 + 4) > 1)
  {
LABEL_92:
    v5 = 0;
    if ((v206 & 1) == 0)
      goto LABEL_285;
LABEL_284:
    operator delete((void *)v207);
    goto LABEL_285;
  }
LABEL_102:
  v204 = 0;
  operations_research::Domain::Negation((operations_research::Domain *)&v206, v58, &v202);
  operations_research::Domain::Domain(&v200, 0);
  v198 = 0;
  *(_QWORD *)&v196[1] = 0;
  operations_research::Domain::Domain(v214, 0);
  v68 = (unint64_t *)(*v11 + 24 * (int)v187);
  if (v68 == v214)
  {
    if ((v214[0] & 1) != 0)
      operator delete((void *)v214[1]);
  }
  else
  {
    v69 = (void **)(v68 + 1);
    if ((*(_BYTE *)v68 & 1) != 0)
      operator delete(*v69);
    *v68 = v214[0];
    v67 = *(__n128 *)&v214[1];
    *(_OWORD *)v69 = *(_OWORD *)&v214[1];
  }
  v186 = 0;
  v70 = ((((unint64_t)&off_24F97F560 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 7));
  v184 = v70 >> 7;
  v185 = 0x101010101010101 * (v70 & 0x7F);
  v71 = v187;
  while (2)
  {
    v72 = (v71 - 1);
    if (v71 >= 1)
    {
      v196[0] = 0;
      if (*((_DWORD *)a3 + 15) == 12)
      {
        v73 = (uint64_t *)*((_QWORD *)a3 + 6);
        v74 = (int *)(v73[3] + 4 * v72);
      }
      else
      {
        v74 = (int *)(qword_25408AC68 + 4 * v72);
        v73 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      }
      v196[0] = *v74;
      v75 = *(_QWORD *)(v73[6] + 8 * v72);
      operations_research::Domain::AdditionWith((operations_research::Domain *)&v200, (const operations_research::Domain *)(*v11 + 24 * v71), &v211, (int8x16_t)v67);
      operations_research::Domain::RelaxIfTooComplex((unint64_t *)&v211, v76, v214);
      if ((v200 & 1) != 0)
        operator delete((void *)__p);
      v200 = v214[0];
      v77 = *(int8x16_t *)&v214[1];
      __p = *(_OWORD *)&v214[1];
      v214[0] = 0;
      if ((v211 & 1) != 0)
        operator delete(v212);
      operations_research::Domain::AdditionWith((operations_research::Domain *)&(*v189)[3 * v72], (const operations_research::Domain *)&v200, v214, v77);
      if ((v196[1] & 1) != 0)
        operator delete((void *)v197);
      *(_QWORD *)&v196[1] = v214[0];
      v197 = *(_OWORD *)&v214[1];
      operations_research::Domain::AdditionWith((operations_research::Domain *)&v196[1], (const operations_research::Domain *)&v202, &v211, *(int8x16_t *)&v214[1]);
      operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&v211, -v75, v214);
      if ((v198 & 1) != 0)
        operator delete((void *)v199);
      v198 = v214[0];
      v199 = *(_OWORD *)&v214[1];
      v214[0] = 0;
      if ((v211 & 1) != 0)
        operator delete(v212);
      v78 = *((_DWORD *)a3 + 4);
      if (v78 != 1)
      {
        if (!v78
          && (operations_research::sat::PresolveContext::IntersectDomainWith(v56[2], (const char *)v196[0], (const operations_research::Domain *)&v198, &v204) & 1) == 0)
        {
          goto LABEL_272;
        }
        goto LABEL_139;
      }
      if (v196[0] < 0)
      {
        v179 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v214, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1484);
        v180 = (_QWORD *)google::LogMessage::stream(v179);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
        goto LABEL_293;
      }
      if ((operations_research::Domain::IsIncludedIn((operations_research::Domain *)(*((_QWORD *)v56[2] + 64) + 24 * v196[0]), (const operations_research::Domain *)&v198) & 1) != 0)
      {
LABEL_139:
        if (operations_research::sat::PresolveContext::IsFixed(v56[2], (const char *)v196[0]))
          goto LABEL_140;
        if (!(HIBYTE(v205) | v205))
          goto LABEL_161;
        if (HIBYTE(v205) == v205)
        {
          v211 = (uint64_t *)google::MakeCheckOpString<BOOL,BOOL>((int)&v205 + 1, (int)&v205, "is_le_constraint != is_ge_constraint");
          if (v211)
          {
            v181 = google::LogMessageFatal::LogMessageFatal(v214, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1498, &v211);
            google::LogMessage::stream((google::LogMessage *)v181);
            goto LABEL_293;
          }
          v56 = v188;
          v90 = v188[2];
          if (v205 == v75 > 0)
            goto LABEL_144;
        }
        else
        {
          v90 = v56[2];
          if (v205 == v75 > 0)
          {
LABEL_144:
            v91 = 0;
            v92 = (uint64_t *)(*((_QWORD *)v90 + 3) + 48 * v196[0]);
            v89 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v210)
                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                     * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                      + v210));
            v93 = (v89 >> 7) ^ ((unint64_t)*v92 >> 12);
            v94 = v92[3];
            while (1)
            {
              v95 = v93 & v94;
              v96 = *(_QWORD *)(*v92 + v95);
              v97 = ((v96 ^ (0x101010101010101 * (v89 & 0x7F))) - 0x101010101010101) & ~(v96 ^ (0x101010101010101
                                                                                                  * (v89 & 0x7F))) & 0x8080808080808080;
              if (v97)
                break;
LABEL_148:
              if ((v96 & (~v96 << 6) & 0x8080808080808080) != 0)
                goto LABEL_159;
              v91 += 8;
              v93 = v91 + v95;
            }
            while (*(_DWORD *)(v92[1] + 4 * ((v95 + (__clz(__rbit64(v97)) >> 3)) & v94)) != v210)
            {
              v97 &= v97 - 1;
              if (!v97)
                goto LABEL_148;
            }
            goto LABEL_160;
          }
        }
        v98 = 0;
        v92 = (uint64_t *)(*(_QWORD *)v90 + 48 * v196[0]);
        v89 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v210)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v210));
        v99 = (v89 >> 7) ^ ((unint64_t)*v92 >> 12);
        v100 = v92[3];
        while (1)
        {
          v101 = v99 & v100;
          v102 = *(_QWORD *)(*v92 + v101);
          v103 = ((v102 ^ (0x101010101010101 * (v89 & 0x7F))) - 0x101010101010101) & ~(v102 ^ (0x101010101010101
                                                                                                 * (v89 & 0x7F))) & 0x8080808080808080;
          if (v103)
            break;
LABEL_157:
          if ((v102 & (~v102 << 6) & 0x8080808080808080) != 0)
          {
LABEL_159:
            v104 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert(v92, v89);
            *(_DWORD *)(v92[1] + 4 * v104) = v210;
            goto LABEL_160;
          }
          v98 += 8;
          v99 = v98 + v101;
        }
        while (*(_DWORD *)(v92[1] + 4 * ((v101 + (__clz(__rbit64(v103)) >> 3)) & v100)) != v210)
        {
          v103 &= v103 - 1;
          if (!v103)
            goto LABEL_157;
        }
LABEL_160:
        v105 = v56[2];
        if (*((_BYTE *)v105 + 64))
          goto LABEL_161;
        v112 = 0;
        LODWORD(v113) = v196[0];
        v114 = (_QWORD *)(*((_QWORD *)v105 + 85) + 48 * v196[0]);
        v115 = v184 ^ (*v114 >> 12);
        v116 = v114[3];
        while (1)
        {
          v117 = v115 & v116;
          v118 = *(_QWORD *)(*v114 + v117);
          v119 = ((v118 ^ v185) - 0x101010101010101) & ~(v118 ^ v185) & 0x8080808080808080;
          if (v119)
          {
            while (1)
            {
              v120 = (v117 + (__clz(__rbit64(v119)) >> 3)) & v116;
              if (*(_DWORD *)(v114[1] + 4 * v120) == -1)
                break;
              v119 &= v119 - 1;
              if (!v119)
                goto LABEL_173;
            }
            v121 = v114[2] - (v120 != v116);
            if (v120 == v116)
            {
              v122 = 0;
              goto LABEL_240;
            }
            v122 = *(_QWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>((uint64_t *)v105 + 67, v196);
            v105 = v56[2];
            if (!v122)
            {
              LODWORD(v113) = v196[0];
              goto LABEL_240;
            }
            if (*((_BYTE *)v105 + 608))
            {
              v123 = 7;
              goto LABEL_220;
            }
            LODWORD(v113) = v196[0];
            if (v122 < 1)
              goto LABEL_240;
            v121 = (int)v121;
            v89 = *(_QWORD *)v105 + 48 * v196[0];
            if (*(_QWORD *)(v89 + 16) < (unint64_t)(int)v121)
              goto LABEL_161;
LABEL_244:
            v161 = v56[2];
            v162 = (const char *)v196[0];
            if (*(_QWORD *)(*(_QWORD *)v161 + 48 * v196[0] + 16) < v121)
              goto LABEL_161;
            v163 = operations_research::sat::PresolveContext::MinOf(v56[2], (const char *)v196[0]);
            operations_research::Domain::Domain(v214, v163);
            v164 = operations_research::sat::PresolveContext::IntersectDomainWith(v161, v162, (const operations_research::Domain *)v214, 0);
            if ((v214[0] & 1) != 0)
              operator delete((void *)v214[1]);
            if ((v164 & 1) != 0)
            {
LABEL_252:
              v167 = (uint64_t)v56[2];
              std::string::basic_string[abi:ne180100]<0>(v214, "linear: dual fixing");
              operations_research::sat::PresolveContext::UpdateRuleStats(v167, (uint64_t)v214);
              if (SHIBYTE(v214[2]) < 0)
                operator delete((void *)v214[0]);
LABEL_140:
              v186 = 1;
LABEL_219:
              v123 = 7;
              goto LABEL_220;
            }
            goto LABEL_278;
          }
LABEL_173:
          if ((v118 & (~v118 << 6) & 0x8080808080808080) != 0)
            break;
          v112 += 8;
          v115 = v112 + v117;
        }
        v122 = 0;
        v121 = v114[2];
LABEL_240:
        v89 = *((_QWORD *)v105 + 3) + 48 * (int)v113;
        v121 = (int)v121;
        if (*(_QWORD *)(v89 + 16) < (unint64_t)(int)v121
        {
          if ((v122 & 0x8000000000000000) == 0)
          {
            v89 = *(_QWORD *)v105 + 48 * (int)v113;
            if (*(_QWORD *)(v89 + 16) >= (unint64_t)(int)v121)
              goto LABEL_244;
          }
LABEL_161:
          if (*((_DWORD *)a3 + 4))
            goto LABEL_219;
          v106 = operations_research::Domain::Min((operations_research::Domain *)&v206, (const char *)v89);
          if (v106 == operations_research::Domain::Max((operations_research::Domain *)&v206, v107)
            || !operations_research::sat::PresolveContext::VariableWithCostIsUniqueAndRemovable(v56[2], v196[0]))
          {
            goto LABEL_199;
          }
          if (v75 > 0 == *(_QWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>((uint64_t *)v56[2] + 67, v196) > 0)
          {
            operations_research::sat::PresolveContext::DomainOf(v56[2], (const char *)v196[0], v214);
            if ((v214[0] & 1) != 0)
              operator delete((void *)v214[1]);
            if (!CanBeFixedToMin)
              goto LABEL_199;
            v126 = operations_research::Domain::Min((operations_research::Domain *)&v206, v108);
            operations_research::Domain::Domain(v214, v126);
LABEL_185:
            if ((v206 & 1) != 0)
              operator delete((void *)v207);
            v206 = v214[0];
            v207 = *(_OWORD *)&v214[1];
            v127 = (uint64_t)v56[2];
            std::string::basic_string[abi:ne180100]<0>(v214, "linear: tightened into equality");
            operations_research::sat::PresolveContext::UpdateRuleStats(v127, (uint64_t)v214);
            if (SHIBYTE(v214[2]) < 0)
              operator delete((void *)v214[0]);
            v128 = operations_research::sat::ConstraintProto::mutable_linear(a3);
            operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>(&v206, v128);
            operations_research::Domain::Negation((operations_research::Domain *)&v206, v129, v214);
            if ((v202 & 1) != 0)
              operator delete((void *)v203);
            v202 = v214[0];
            v203 = *(_OWORD *)&v214[1];
            operations_research::Domain::Domain(v214, 0);
            if ((v200 & 1) != 0)
              operator delete((void *)__p);
            v200 = v214[0];
            v67 = *(__n128 *)&v214[1];
            __p = *(_OWORD *)&v214[1];
            v205 = 0;
            v130 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (*((_DWORD *)a3 + 15) == 12)
              v130 = (uint64_t *)*((_QWORD *)a3 + 6);
            v131 = *((int *)v130 + 4);
            if ((_DWORD)v131)
            {
              v132 = (int *)v130[3];
              v133 = 4 * v131;
              do
              {
                v134 = *v132;
                absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((_QWORD *)v56[2] + 3) + 48 * *v132), &v210);
                absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*(_QWORD *)v56[2] + 48 * v134), &v210);
                ++v132;
                v123 = 7;
                v133 -= 4;
              }
              while (v133);
              LODWORD(v72) = v187;
            }
            else
            {
              v123 = 7;
              LODWORD(v72) = v187;
            }
            goto LABEL_220;
          }
          operations_research::sat::PresolveContext::DomainOf(v56[2], (const char *)v196[0], v214);
          if ((v214[0] & 1) != 0)
            operator delete((void *)v214[1]);
          if (CanBeFixedToMax)
          {
            v111 = operations_research::Domain::Max((operations_research::Domain *)&v206, v108);
            operations_research::Domain::Domain(v214, v111);
            goto LABEL_185;
          }
LABEL_199:
          v135 = &operations_research::sat::_LinearConstraintProto_default_instance_;
          if (*((_DWORD *)a3 + 15) == 12)
            v135 = (uint64_t *)*((_QWORD *)a3 + 6);
          if (*((int *)v135 + 4) < 3)
            goto LABEL_219;
          v136 = operations_research::Domain::Min((operations_research::Domain *)&v206, v108);
          if (v136 != operations_research::Domain::Max((operations_research::Domain *)&v206, v137))
            goto LABEL_219;
          operations_research::sat::PresolveContext::DomainOf(v56[2], (const char *)v196[0], v214);
          v138 = operations_research::Domain::operator!=(v214, (uint64_t *)&v198);
          if ((v214[0] & 1) != 0)
            operator delete((void *)v214[1]);
          v139 = v75 >= 0 ? v75 : -v75;
          v140 = v139 == 1 ? v138 : 1;
          if ((v140 & 1) != 0)
            goto LABEL_219;
          if (*((int *)*v56 + 136) < 1)
            goto LABEL_219;
          v141 = v56[2];
          if (*((_BYTE *)v141 + 64))
            goto LABEL_219;
          v142 = (_QWORD *)(*((_QWORD *)v141 + 85) + 48 * v196[0]);
          LODWORD(v214[0]) = -1;
          v143 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::contains<int>(v142, (int *)v214);
          v144 = &operations_research::sat::_LinearConstraintProto_default_instance_;
          if (*((_DWORD *)a3 + 15) == 12)
            v144 = (uint64_t *)*((_QWORD *)a3 + 6);
          v145 = *((_QWORD *)v56[2] + 85) + 48 * v196[0];
          if ((*((_DWORD *)v144 + 4) - 1) * (*(_DWORD *)(v145 + 16) - v143 - 1) >= *((_DWORD *)v144 + 4)
                                                                                  + *(_DWORD *)(v145 + 16)
                                                                                  - v143)
            goto LABEL_219;
          v183 = v143;
          v191 = 0;
          v192 = 0;
          v193 = 0;
          v149 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::begin(v145);
          v150 = (_QWORD *)(*(_QWORD *)v145 + *(_QWORD *)(v145 + 24));
          if (v150 == v149)
            goto LABEL_260;
          v151 = v146;
          v152 = 0;
          do
          {
            LODWORD(v214[0]) = 0;
            v153 = *v151;
            LODWORD(v214[0]) = v153;
            if (v153 != -1)
            {
              if (v153 == -2)
                goto LABEL_259;
              v154 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v56[2] + 6) + 56) + 8 * v153 + 8);
              if ((operations_research::sat::ConstraintProto *)v154 != a3)
              {
                if (*(_DWORD *)(v154 + 60) != 12)
                  goto LABEL_259;
                v155 = *(int *)(v154 + 16);
                if ((_DWORD)v155)
                {
                  v156 = *(int **)(v154 + 24);
                  v157 = 4 * v155;
                  while (1)
                  {
                    v158 = *v156;
                    if (~*v156 > *v156)
                      v158 = ~v158;
                    if (v158 == v196[0])
                      break;
                    ++v156;
                    v157 -= 4;
                    if (!v157)
                      goto LABEL_235;
                  }
                  v152 = 1;
                }
LABEL_235:
                gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)&v191, v214);
              }
            }
            v159 = *((char *)v149 + 1);
            v149 = (_QWORD *)((char *)v149 + 1);
            ++v151;
            if (v159 <= -2)
            {
              do
              {
                v160 = (__clz(__rbit64(((*v149 >> 7) & ~*v149 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v149 = (_QWORD *)((char *)v149 + v160);
                v151 += v160;
              }
              while (*(char *)v149 < -1);
            }
          }
          while (v149 != v150);
          if ((v152 & 1) == 0)
          {
LABEL_260:
            v168 = (int *)v191;
            v169 = v192;
            if (v191 != v192)
            {
              do
              {
                v170 = *v168;
                operations_research::sat::SubstituteVariable((operations_research::sat *)v196[0], v75, (uint64_t)a3, *(const operations_research::sat::ConstraintProto **)(*(_QWORD *)(*((_QWORD *)v56[2] + 6) + 56)+ 8 * v170+ 8), v148, v67);
                operations_research::sat::PresolveContext::UpdateConstraintVariableUsage((char **)v56[2], v170);
                ++v168;
              }
              while (v168 != v169);
            }
            v171 = (uint64_t)v56[2];
            if (v183)
            {
              operations_research::sat::PresolveContext::SubstituteVariableInObjective((uint64_t)v56[2], v196[0], v75, (uint64_t)a3, 0);
              v171 = (uint64_t)v56[2];
            }
            v214[0] = (unint64_t)"linear: variable substitution ";
            v214[1] = 30;
            v172 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(((char *)v192 - (_BYTE *)v191) >> 2, v213, v147);
            v211 = (uint64_t *)v213;
            v212 = (void *)(v172 - v213);
            absl::lts_2020_02_25::StrCat((uint64_t)v214, (uint64_t)&v211, &v190);
            operations_research::sat::PresolveContext::UpdateRuleStats(v171, (uint64_t)&v190);
            if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v190.__r_.__value_.__l.__data_);
            v173 = v56[2];
            v174 = v196[0];
            v214[0] = *(_QWORD *)(*((_QWORD *)v173 + 85) + 48 * v196[0] + 16);
            LODWORD(v190.__r_.__value_.__l.__data_) = 1;
            if (v214[0] == 1)
              goto LABEL_267;
            v211 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v214, (int)&v190, "context_->VarToConstraints(var).size() == 1");
            if (!v211)
            {
              v56 = v188;
              v173 = v188[2];
              v174 = v196[0];
LABEL_267:
              operations_research::sat::PresolveContext::MarkVariableAsRemoved(v173, v174);
              v175 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*((operations_research::sat::CpModelProto **)v56[2] + 7));
              operations_research::sat::ConstraintProto::CopyFrom(v175, a3);
              operations_research::sat::ConstraintProto::Clear(a3);
              v123 = 1;
              goto LABEL_268;
            }
            v182 = google::LogMessageFatal::LogMessageFatal(v214, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1706, &v211);
            google::LogMessage::stream((google::LogMessage *)v182);
LABEL_293:
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v214);
          }
LABEL_259:
          v123 = 7;
LABEL_268:
          if (v191)
          {
            v192 = (int *)v191;
            operator delete(v191);
          }
LABEL_220:
          v71 = v72;
          if (v123 != 7)
          {
LABEL_272:
            v5 = 1;
            goto LABEL_279;
          }
          continue;
        }
        v165 = operations_research::sat::PresolveContext::MaxOf(v56[2], (const char *)v196[0]);
        operations_research::Domain::Domain(v214, v165);
        v166 = operations_research::sat::PresolveContext::IntersectDomainWith(v105, v113, (const operations_research::Domain *)v214, 0);
        if ((v214[0] & 1) != 0)
          operator delete((void *)v214[1]);
        if ((v166 & 1) != 0)
          goto LABEL_252;
        goto LABEL_278;
      }
      v79 = v56[2];
      v80 = **((_DWORD **)a3 + 3);
      v81 = v196[0];
      v194 = 0;
      v82 = v198;
      if ((v198 & 1) == 0)
      {
        v194 = v198;
        v195 = v199;
        goto LABEL_137;
      }
      v83 = (__int128 *)v199;
      v84 = v198 >> 1;
      if (v198 < 4)
      {
        v86 = &v195;
        if (v198 < 2)
        {
          v87 = 0;
LABEL_136:
          v194 = v87 + (v82 & 0xFFFFFFFFFFFFFFFELL);
          v56 = v188;
LABEL_137:
          operations_research::sat::DomainDeductions::AddDeduction((uint64_t *)v79 + 41, v80, v81, (uint64_t)&v194);
          if ((v194 & 1) != 0)
            operator delete((void *)v195);
          goto LABEL_139;
        }
      }
      else
      {
        if (v198 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v85 = v80;
        v86 = (__int128 *)operator new(16 * v84);
        *(_QWORD *)&v195 = v86;
        *((_QWORD *)&v195 + 1) = v82 >> 1;
        v194 = 1;
        v80 = v85;
      }
      do
      {
        v88 = *v83++;
        *v86++ = v88;
        --v84;
      }
      while (v84);
      v87 = v194;
      goto LABEL_136;
    }
    break;
  }
  if (v204)
  {
    v176 = (uint64_t)v56[2];
    std::string::basic_string[abi:ne180100]<0>(v214, "linear: reduced variable domains");
    operations_research::sat::PresolveContext::UpdateRuleStats(v176, (uint64_t)v214);
    if (SHIBYTE(v214[2]) < 0)
      operator delete((void *)v214[0]);
  }
  if ((v186 & 1) != 0)
  {
    v5 = operations_research::sat::CpModelPresolver::CanonicalizeLinear((operations_research::sat::CpModelPresolver *)v56, a3);
    goto LABEL_279;
  }
LABEL_278:
  v5 = 0;
LABEL_279:
  if ((v196[1] & 1) != 0)
  {
    operator delete((void *)v197);
    if ((v198 & 1) == 0)
    {
LABEL_281:
      if ((v200 & 1) == 0)
        goto LABEL_282;
      goto LABEL_289;
    }
  }
  else if ((v198 & 1) == 0)
  {
    goto LABEL_281;
  }
  operator delete((void *)v199);
  if ((v200 & 1) == 0)
  {
LABEL_282:
    if ((v202 & 1) == 0)
      goto LABEL_283;
    goto LABEL_290;
  }
LABEL_289:
  operator delete((void *)__p);
  if ((v202 & 1) == 0)
  {
LABEL_283:
    if ((v206 & 1) == 0)
      goto LABEL_285;
    goto LABEL_284;
  }
LABEL_290:
  operator delete((void *)v203);
  if ((v206 & 1) != 0)
    goto LABEL_284;
LABEL_285:
  if ((v208 & 1) != 0)
    operator delete(v209);
  return v5;
}

void sub_22DACE534()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 160));
}

void sub_22DACE53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,uint64_t a33,char a34,void *a35,uint64_t a36,uint64_t a37,char a38,void *a39,uint64_t a40,char a41,void *a42,uint64_t a43,char a44,void *a45,uint64_t a46,char a47,void *a48,uint64_t a49,uint64_t a50,char a51,void *a52)
{
  uint64_t v52;

  if (__p)
    operator delete(__p);
  if ((a38 & 1) != 0)
  {
    operator delete(a39);
    if ((a41 & 1) == 0)
    {
LABEL_5:
      if ((a44 & 1) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((a41 & 1) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a42);
  if ((a44 & 1) == 0)
  {
LABEL_6:
    if ((a47 & 1) == 0)
      goto LABEL_12;
LABEL_11:
    operator delete(a48);
LABEL_12:
    if ((a51 & 1) != 0)
      operator delete(a52);
    if ((*(_BYTE *)(v52 - 240) & 1) != 0)
    {
      operator delete(*(void **)(v52 - 232));
      _Unwind_Resume(exception_object);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_10:
  operator delete(a45);
  if ((a47 & 1) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

uint64_t operations_research::Domain::operator!=(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  v2 = *a1;
  v5 = (_QWORD *)a1[1];
  v3 = a1 + 1;
  v4 = v5;
  if ((v2 & 1) == 0)
    v4 = v3;
  v6 = *a2;
  v7 = (8 * v2) & 0xFFFFFFFFFFFFFFF0;
  if (v7 != 16 * ((unint64_t)*a2 >> 1))
    return 1;
  if (v2 < 2)
    return 0;
  v9 = (_QWORD *)((char *)v4 + v7);
  v12 = (_QWORD *)a2[1];
  v10 = a2 + 1;
  v11 = v12;
  if ((v6 & 1) != 0)
    v13 = v11;
  else
    v13 = v10;
  do
  {
    v14 = *v4 == *v13 && v4[1] == v13[1];
    result = !v14;
    if (!v14)
      break;
    v4 += 2;
    v13 += 2;
  }
  while (v4 != v9);
  return result;
}

void operations_research::sat::`anonymous namespace'::TakeIntersectionWith(_QWORD *a1, char **a2)
{
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  int v32;
  char *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  char **v42;
  char **v43;
  int *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int *v48;
  int *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char **v58;
  _QWORD *v60;
  char *v61;
  int *__p;

  __p = 0;
  v3 = *a2;
  v4 = a2[1];
  v58 = a2 + 1;
  v5 = *a2;
  if (**a2 <= -2)
  {
    do
    {
      v6 = (__clz(__rbit64(((*v5 >> 7) & ~*v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v5 = (_QWORD *)((char *)v5 + v6);
      v4 += 4 * v6;
    }
    while (*(char *)v5 < -1);
  }
  v7 = (unint64_t)a2[3];
  v8 = (_QWORD *)((char *)v3 + v7);
  if (v5 != (_QWORD *)((char *)v3 + v7))
  {
    v60 = (_QWORD *)((char *)v3 + v7);
    v61 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = 0;
      v12 = *(int *)v4;
      v13 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v12)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v12));
      v14 = (v13 >> 7) ^ (*a1 >> 12);
      v15 = a1[3];
      v16 = 0x101010101010101 * (v13 & 0x7F);
      while (1)
      {
        v17 = v14 & v15;
        v18 = *(_QWORD *)(*a1 + v17);
        v19 = ((v18 ^ v16) - 0x101010101010101) & ~(v18 ^ v16) & 0x8080808080808080;
        if (v19)
          break;
LABEL_10:
        if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0)
          goto LABEL_33;
        v11 += 8;
        v14 = v11 + v17;
      }
      while (1)
      {
        v20 = (v17 + (__clz(__rbit64(v19)) >> 3)) & v15;
        if (*(_DWORD *)(a1[1] + 4 * v20) == (_DWORD)v12)
          break;
        v19 &= v19 - 1;
        if (!v19)
          goto LABEL_10;
      }
      if (v20 == v15)
        goto LABEL_33;
      if (v61 >= v9)
        break;
      *(_DWORD *)v61 = v12;
      v21 = (uint64_t)(v61 + 4);
LABEL_32:
      v61 = (char *)v21;
LABEL_33:
      v34 = *((char *)v5 + 1);
      v5 = (_QWORD *)((char *)v5 + 1);
      v4 += 4;
      if (v34 <= -2)
      {
        do
        {
          v35 = (__clz(__rbit64(((*v5 >> 7) & ~*v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v5 = (_QWORD *)((char *)v5 + v35);
          v4 += 4 * v35;
        }
        while (*(char *)v5 < -1);
      }
      if (v5 == v8)
      {
        v43 = v58;
        v42 = a2;
        v7 = (unint64_t)a2[3];
        v44 = (int *)v61;
        if (v7 >= 0x80)
          goto LABEL_47;
LABEL_50:
        if (v7)
        {
          v42[2] = 0;
          memset(*v42, 128, v7 + 8);
          v42[3][(_QWORD)*v42] = -1;
          v45 = v42[3];
          v47 = (uint64_t)&v45[-((unint64_t)v45 >> 3)];
          if (v45 == (char *)7)
            v47 = 6;
          v42[5] = (char *)(v47 - (_QWORD)v42[2]);
          v46 = v42[4];
          if (!v46)
            goto LABEL_54;
        }
        else
        {
          v45 = 0;
          v46 = v42[4];
          if (!v46)
            goto LABEL_54;
        }
LABEL_65:
        *((_QWORD *)v46 + 1) = 0;
        *(_QWORD *)v46 = v45;
        *((_QWORD *)v46 + 4) = 0;
        *((_QWORD *)v46 + 2) = 0;
        v48 = __p;
        if (__p == v44)
          goto LABEL_66;
LABEL_55:
        v49 = v48;
        do
        {
          v53 = 0;
          v55 = *v49;
          v56 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v55)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v55));
          v54 = (v56 >> 7) ^ ((unint64_t)*v42 >> 12);
          v57 = v42[3];
          while (1)
          {
            v50 = v54 & (unint64_t)v57;
            v51 = *(_QWORD *)&(*v42)[v50];
            v52 = ((v51 ^ (0x101010101010101 * (v56 & 0x7F))) - 0x101010101010101) & ~(v51 ^ (0x101010101010101
                                                                                                * (v56 & 0x7F))) & 0x8080808080808080;
            if (v52)
              break;
LABEL_59:
            if ((v51 & (~v51 << 6) & 0x8080808080808080) != 0)
            {
              *(_DWORD *)&(*v43)[4
                               * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)v42, v56)] = v55;
              goto LABEL_62;
            }
            v53 += 8;
            v54 = v53 + v50;
          }
          while (*(_DWORD *)&(*v43)[4 * ((v50 + (__clz(__rbit64(v52)) >> 3)) & (unint64_t)v57)] != (_DWORD)v55)
          {
            v52 &= v52 - 1;
            if (!v52)
              goto LABEL_59;
          }
LABEL_62:
          ++v49;
        }
        while (v49 != v44);
        goto LABEL_66;
      }
    }
    v22 = v61 - v10;
    v23 = (v61 - v10) >> 2;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if ((v9 - v10) >> 1 > v24)
      v24 = (v9 - v10) >> 1;
    if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
    {
      if (v25 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = v25;
      v27 = (char *)operator new(4 * v25);
      v25 = v26;
      v28 = &v27[4 * v23];
      *(_DWORD *)v28 = v12;
      v21 = (uint64_t)(v28 + 4);
      v29 = v61;
      if (v61 == v10)
        goto LABEL_29;
    }
    else
    {
      v27 = 0;
      v28 = (char *)(4 * v23);
      *(_DWORD *)(4 * v23) = v12;
      v21 = 4 * v23 + 4;
      v29 = v61;
      if (v61 == v10)
        goto LABEL_29;
    }
    v30 = v29 - 4 - v10;
    if (v30 >= 0xBC)
    {
      if (&v27[v22 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v27[v22 - 4])
      {
        v31 = v61;
      }
      else if (&v29[-(v30 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v29 - 4)
      {
        v31 = v61;
      }
      else if ((unint64_t)(v29 - &v27[v22]) >= 0x20)
      {
        v36 = (v30 >> 2) + 1;
        v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
        v31 = &v61[-v37];
        v28 -= v37;
        v38 = &v27[4 * v23 - 16];
        v39 = v61 - 16;
        v40 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v41 = *(_OWORD *)v39;
          *((_OWORD *)v38 - 1) = *((_OWORD *)v39 - 1);
          *(_OWORD *)v38 = v41;
          v38 -= 32;
          v39 -= 32;
          v40 -= 8;
        }
        while (v40);
        if (v36 == (v36 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_29;
      }
      else
      {
        v31 = v61;
      }
    }
    else
    {
      v31 = v29;
    }
    do
    {
      v32 = *((_DWORD *)v31 - 1);
      v31 -= 4;
      *((_DWORD *)v28 - 1) = v32;
      v28 -= 4;
    }
    while (v31 != v10);
LABEL_29:
    v9 = &v27[4 * v25];
    __p = (int *)v28;
    if (v10)
    {
      v33 = &v27[4 * v25];
      operator delete(v10);
      v9 = v33;
    }
    v10 = v28;
    v8 = v60;
    goto LABEL_32;
  }
  v44 = 0;
  v43 = a2 + 1;
  v42 = a2;
  if (v7 < 0x80)
    goto LABEL_50;
LABEL_47:
  operator delete(*v42);
  v45 = 0;
  *v42 = (char *)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v42[5] = 0;
  v43[1] = 0;
  v43[2] = 0;
  *v43 = 0;
  v46 = v42[4];
  if (v46)
    goto LABEL_65;
LABEL_54:
  v48 = __p;
  if (__p != v44)
    goto LABEL_55;
LABEL_66:
  if (v48)
    operator delete(v48);
}

void sub_22DACEDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::`anonymous namespace'::RhsCanBeFixedToMin(uint64_t this, char *a2, const operations_research::Domain *a3, const operations_research::Domain *a4, const operations_research::Domain *a5)
{
  uint64_t v5;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;

  if (this >= 0)
    v5 = this;
  else
    v5 = -this;
  if ((*(_QWORD *)a2 & 0x1FFFFFFFELL) != 2 || v5 != 1)
    return 0;
  if (this == -1)
  {
    v14 = operations_research::Domain::Max(a3, a2);
    v16 = v14 - operations_research::Domain::Max((operations_research::Domain *)a2, v15);
    if (v16 > operations_research::Domain::Min(a4, v17))
      return 0;
  }
  else
  {
    if (this != 1)
      return 0;
    v9 = operations_research::Domain::Max(a3, a2);
    v11 = operations_research::Domain::Min((operations_research::Domain *)a2, v10) + v9;
    if (v11 > operations_research::Domain::Min(a4, v12))
      return 0;
  }
  return 1;
}

uint64_t operations_research::sat::`anonymous namespace'::RhsCanBeFixedToMax(uint64_t this, char *a2, const operations_research::Domain *a3, const operations_research::Domain *a4, const operations_research::Domain *a5)
{
  uint64_t v5;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;

  if (this >= 0)
    v5 = this;
  else
    v5 = -this;
  if ((*(_QWORD *)a2 & 0x1FFFFFFFELL) != 2 || v5 != 1)
    return 0;
  if (this == -1)
  {
    v14 = operations_research::Domain::Min(a3, a2);
    v16 = v14 - operations_research::Domain::Min((operations_research::Domain *)a2, v15);
    if (v16 < operations_research::Domain::Max(a4, v17))
      return 0;
  }
  else
  {
    if (this != 1)
      return 0;
    v9 = operations_research::Domain::Min(a3, a2);
    v11 = operations_research::Domain::Max((operations_research::Domain *)a2, v10) + v9;
    if (v11 < operations_research::Domain::Max(a4, v12))
      return 0;
  }
  return 1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  v5 = *a1;
  v6 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  v7 = a1[3];
  v8 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v9 = v6 & v7;
    v10 = *(_QWORD *)(v5 + (v6 & v7));
    v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11)
      break;
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return 0;
    v2 += 8;
    v6 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_DWORD *)(a1[1] + 4 * v12) == (_DWORD)v3)
      break;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_5;
  }
  if (v12 == v7)
    return 0;
  --a1[2];
  v14 = *(_QWORD *)(v5 + ((v12 - 8) & v7));
  v15 = *(_QWORD *)(v5 + v12) & (~*(_QWORD *)(v5 + v12) << 6) & 0x8080808080808080;
  v16 = v14 & (~v14 << 6) & 0x8080808080808080;
  if (v16)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
  {
    v21 = 0;
    v18 = -2;
  }
  else
  {
    v19 = (__clz(v16) >> 3) + (__clz(__rbit64(v15)) >> 3);
    v20 = v19 >= 8;
    v21 = v19 < 8;
    if (v20)
      v18 = -2;
    else
      v18 = 0x80;
  }
  *(_BYTE *)(v5 + v12) = v18;
  *(_BYTE *)((a1[3] & (v12 - 8)) + (a1[3] & 7) + *a1 + 1) = v18;
  v22 = a1[4];
  a1[5] += v21;
  if (!v22)
    return 1;
  v23 = (unint64_t *)(v22 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 - 1, v23));
  v25 = (unint64_t *)(v22 + 16);
  result = 1;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  return result;
}

_QWORD *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::begin(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  unint64_t v4;

  result = *(_QWORD **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(char *)result <= -2)
  {
    do
    {
      v4 = (__clz(__rbit64(((*result >> 7) & ~*result | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      result = (_QWORD *)((char *)result + v4);
      v3 += 4 * v4;
    }
    while (*(char *)result < -1);
  }
  return result;
}

void operations_research::sat::CpModelPresolver::ExtractEnforcementLiteralFromLinearConstraint(operations_research::sat::PresolveContext **this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  _BOOL4 v24;
  const char *v25;
  _BOOL4 v26;
  uint64_t v27;
  operations_research::sat::ConstraintProto *v28;
  const char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *p_p;
  uint64_t v42;
  int8x16_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  operations_research::sat::ConstraintProto *v50;
  const char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  int8x16_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  std::string __str;
  unint64_t v72;
  __int128 __p;
  const char *v74;
  void *v75;
  void *v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a2 + 15) == 12 && !*((_BYTE *)this[2] + 504))
  {
    v3 = *((_QWORD *)a2 + 6);
    v4 = *(unsigned int *)(v3 + 16);
    if ((int)v4 >= 2)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = (const char *)*(unsigned int *)(*(_QWORD *)(v3 + 24) + 4 * v5);
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v5);
        v11 = operations_research::sat::PresolveContext::MinOf(this[2], v9) * v10;
        v12 = operations_research::sat::PresolveContext::MaxOf(this[2], v9);
        v14 = v12 * v10;
        if (v10 >= 0)
          v15 = v10;
        else
          v15 = -v10;
        if (v8 <= v15)
          v8 = v15;
        if (v14 >= v11)
          v16 = v11;
        else
          v16 = v12 * v10;
        v6 += v16;
        if (v11 > v14)
          v14 = v11;
        v7 += v14;
        ++v5;
      }
      while (v4 != v5);
      if (*((_DWORD *)a2 + 15) == 12)
        v17 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v17 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      operations_research::Domain::FromFlatSpanOfIntervals(v17[9], *((int *)v17 + 16), &v72, v13);
      v19 = operations_research::Domain::Max((operations_research::Domain *)&v72, v18);
      v21 = operations_research::Domain::Min((operations_research::Domain *)&v72, v20);
      v23 = v7 - v19;
      if (v7 - v19 <= v21 - v6)
        v23 = v21 - v6;
      if (v8 >= v23)
      {
        v24 = v6 < operations_research::Domain::Min((operations_research::Domain *)&v72, v22);
        v26 = v7 > operations_research::Domain::Max((operations_research::Domain *)&v72, v25);
        if (v24 || v26)
        {
          if (v24 && v26)
          {
            v27 = (uint64_t)this[2];
            std::string::basic_string[abi:ne180100]<0>(&v76, "linear: split boxed constraint");
            operations_research::sat::PresolveContext::UpdateRuleStats(v27, (uint64_t)&v76);
            if (SHIBYTE(v77) < 0)
              operator delete(v76);
            v28 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*((operations_research::sat::CpModelProto **)this[2] + 6));
            operations_research::sat::ConstraintProto::CopyFrom(v28, a2);
            v30 = (_QWORD *)*((_QWORD *)a2 + 5);
            v31 = *((unsigned __int8 *)v30 + 23);
            if (*((char *)v30 + 23) < 0)
              v32 = v30[1];
            else
              v32 = *((unsigned __int8 *)v30 + 23);
            if (v32)
            {
              v47 = v30[1];
              if ((v31 & 0x80u) != 0)
              {
                v30 = (_QWORD *)*v30;
                v31 = v47;
              }
              v76 = v30;
              *(_QWORD *)&v77 = v31;
              v74 = " (part 1)";
              v75 = (void *)9;
              absl::lts_2020_02_25::StrCat((uint64_t)&v76, (uint64_t)&v74, &__str);
              operations_research::sat::ConstraintProto::set_name((uint64_t)v28, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            v48 = operations_research::Domain::Max((operations_research::Domain *)&v72, v29);
            operations_research::Domain::Domain(&v76, v6, v48);
            v49 = operations_research::sat::ConstraintProto::mutable_linear(v28);
            operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>((unint64_t *)&v76, v49);
            if ((v76 & 1) != 0)
              operator delete((void *)v77);
            v50 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*((operations_research::sat::CpModelProto **)this[2] + 6));
            operations_research::sat::ConstraintProto::CopyFrom(v50, a2);
            v52 = (_QWORD *)*((_QWORD *)a2 + 5);
            v53 = *((unsigned __int8 *)v52 + 23);
            if (*((char *)v52 + 23) < 0)
              v54 = v52[1];
            else
              v54 = *((unsigned __int8 *)v52 + 23);
            if (v54)
            {
              v55 = v52[1];
              if ((v53 & 0x80u) != 0)
              {
                v52 = (_QWORD *)*v52;
                v53 = v55;
              }
              v76 = v52;
              *(_QWORD *)&v77 = v53;
              v74 = " (part 2)";
              v75 = (void *)9;
              absl::lts_2020_02_25::StrCat((uint64_t)&v76, (uint64_t)&v74, &__str);
              operations_research::sat::ConstraintProto::set_name((uint64_t)v50, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            v56 = operations_research::Domain::Max((operations_research::Domain *)&v72, v51);
            operations_research::Domain::Domain(&v74, v56, v7);
            operations_research::Domain::UnionWith((operations_research::Domain *)&v72, (const operations_research::Domain *)&v74, (unint64_t *)&v76);
            v57 = operations_research::sat::ConstraintProto::mutable_linear(v50);
            operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>((unint64_t *)&v76, v57);
            if ((v76 & 1) != 0)
              operator delete((void *)v77);
            if ((v74 & 1) != 0)
              operator delete(v75);
            operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(this[2]);
            operations_research::sat::ConstraintProto::Clear(a2);
          }
          else
          {
            v33 = operations_research::sat::ConstraintProto::mutable_linear(a2);
            if (*(int *)(v3 + 16) < 1)
            {
              v35 = 0;
            }
            else
            {
              v69 = (unsigned int *)((char *)a2 + 16);
              v34 = 0;
              v35 = 0;
              if (v24)
              {
                do
                {
                  v36 = (const char *)*(unsigned int *)(*(_QWORD *)(v3 + 24) + 4 * v34);
                  if (operations_research::sat::PresolveContext::MinOf(this[2], v36)
                    || operations_research::sat::PresolveContext::MaxOf(this[2], v36) != 1)
                  {
                    goto LABEL_39;
                  }
                  if (v72 < 2)
                  v38 = *(_QWORD *)(v3 + 48);
                  v39 = *(_QWORD *)(v38 + 8 * v34);
                  if (v39 >= 0)
                    v40 = *(_QWORD *)(v38 + 8 * v34);
                  else
                    v40 = -v39;
                  p_p = (__int128 *)__p;
                  if ((v72 & 1) == 0)
                    p_p = &__p;
                  if (v40 + v6 >= *(_QWORD *)&p_p[(v72 >> 1) - 1])
                  {
                    if (v39 <= 0)
                    {
                      operations_research::Domain::Domain(&v74, -v39);
                      operations_research::Domain::AdditionWith((operations_research::Domain *)&v72, (const operations_research::Domain *)&v74, &v76, v43);
                      if ((v72 & 1) != 0)
                        operator delete((void *)__p);
                      v72 = (unint64_t)v76;
                      __p = v77;
                      v76 = 0;
                      if ((v74 & 1) != 0)
                        operator delete(v75);
                      v44 = *((unsigned int *)a2 + 4);
                      v45 = v44 + 1;
                      if ((_DWORD)v44 == *((_DWORD *)a2 + 5))
                      {
                        google::protobuf::RepeatedField<int>::Reserve(v69, v45);
                        v45 = v44 + 1;
                      }
                      *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v44) = (_DWORD)v36;
                      *((_DWORD *)a2 + 4) = v45;
                      v6 -= v39;
                    }
                    else
                    {
                      v42 = *((unsigned int *)a2 + 4);
                      if ((_DWORD)v42 == *((_DWORD *)a2 + 5))
                        google::protobuf::RepeatedField<int>::Reserve(v69, v42 + 1);
                      *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v42) = ~(_DWORD)v36;
                      *((_DWORD *)a2 + 4) = v42 + 1;
                    }
                    v46 = (uint64_t)this[2];
                    v76 = operator new(0x38uLL);
                    v77 = xmmword_22DCE5C50;
                    strcpy((char *)v76, "linear: extracted enforcement literal from constraint");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v46, (uint64_t)&v76);
                    if (SHIBYTE(v77) < 0)
                      operator delete(v76);
                  }
                  else
                  {
LABEL_39:
                    *(_DWORD *)(*(_QWORD *)(v33 + 24) + 4 * v35) = *(_DWORD *)(*(_QWORD *)(v33 + 24) + 4 * v34);
                    *(_QWORD *)(*(_QWORD *)(v33 + 48) + 8 * v35++) = *(_QWORD *)(*(_QWORD *)(v33 + 48) + 8 * v34);
                  }
                  ++v34;
                }
                while (v34 < *(int *)(v3 + 16));
              }
              else
              {
                do
                {
                  v58 = (const char *)*(unsigned int *)(*(_QWORD *)(v3 + 24) + 4 * v34);
                  if (operations_research::sat::PresolveContext::MinOf(this[2], v58)
                    || operations_research::sat::PresolveContext::MaxOf(this[2], v58) != 1)
                  {
                    goto LABEL_95;
                  }
                  if (v72 <= 1)
                  v60 = *(_QWORD *)(v3 + 48);
                  v61 = *(_QWORD *)(v60 + 8 * v34);
                  v62 = v61 >= 0 ? *(_QWORD *)(v60 + 8 * v34) : -v61;
                  v63 = (v72 & 1) != 0 ? (__int128 *)(__p + 8) : (__int128 *)((char *)&__p + 8);
                  if (v7 - v62 <= *(_QWORD *)v63)
                  {
                    if (v61 < 1)
                    {
                      v67 = *((unsigned int *)a2 + 4);
                      if ((_DWORD)v67 == *((_DWORD *)a2 + 5))
                        google::protobuf::RepeatedField<int>::Reserve(v69, v67 + 1);
                      *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v67) = ~(_DWORD)v58;
                      *((_DWORD *)a2 + 4) = v67 + 1;
                    }
                    else
                    {
                      operations_research::Domain::Domain(&v74, -v61);
                      operations_research::Domain::AdditionWith((operations_research::Domain *)&v72, (const operations_research::Domain *)&v74, &v76, v64);
                      if ((v72 & 1) != 0)
                        operator delete((void *)__p);
                      v72 = (unint64_t)v76;
                      __p = v77;
                      v76 = 0;
                      if ((v74 & 1) != 0)
                        operator delete(v75);
                      v65 = *((unsigned int *)a2 + 4);
                      v66 = v65 + 1;
                      if ((_DWORD)v65 == *((_DWORD *)a2 + 5))
                      {
                        google::protobuf::RepeatedField<int>::Reserve(v69, v66);
                        v66 = v65 + 1;
                      }
                      *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v65) = (_DWORD)v58;
                      *((_DWORD *)a2 + 4) = v66;
                      v7 -= v61;
                    }
                    v68 = (uint64_t)this[2];
                    v76 = operator new(0x38uLL);
                    v77 = xmmword_22DCE5C50;
                    strcpy((char *)v76, "linear: extracted enforcement literal from constraint");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v68, (uint64_t)&v76);
                    if (SHIBYTE(v77) < 0)
                      operator delete(v76);
                  }
                  else
                  {
LABEL_95:
                    *(_DWORD *)(*(_QWORD *)(v33 + 24) + 4 * v35) = *(_DWORD *)(*(_QWORD *)(v33 + 24) + 4 * v34);
                    *(_QWORD *)(*(_QWORD *)(v33 + 48) + 8 * v35++) = *(_QWORD *)(*(_QWORD *)(v33 + 48) + 8 * v34);
                  }
                  ++v34;
                }
                while (v34 < *(int *)(v3 + 16));
              }
            }
            if (*(int *)(v33 + 16) >= 1)
              *(_DWORD *)(v33 + 16) = v35;
            if (*(int *)(v33 + 40) >= 1)
              *(_DWORD *)(v33 + 40) = v35;
            operations_research::sat::FillDomainInProto<operations_research::sat::LinearConstraintProto>(&v72, v33);
          }
        }
      }
      if ((v72 & 1) != 0)
        operator delete((void *)__p);
    }
  }
}

void sub_22DACF934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,char a28,void *__p)
{
  if ((a28 & 1) != 0)
    operator delete(__p);
  if ((a25 & 1) == 0)
    _Unwind_Resume(exception_object);
  operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::Domain::front(operations_research::Domain *this, const char *a2)
{
  char *v2;

  if (*(_QWORD *)this <= 1uLL)
  v2 = (char *)this + 8;
  if ((*(_QWORD *)this & 1) != 0)
    v2 = *(char **)v2;
  return *(_QWORD *)v2;
}

uint64_t operations_research::Domain::back(operations_research::Domain *this, const char *a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this <= 1uLL)
  v3 = (_QWORD *)((char *)this + 8);
  if ((v2 & 1) != 0)
    v3 = (_QWORD *)*v3;
  return v3[2 * (v2 >> 1) - 2];
}

void operations_research::sat::CpModelPresolver::ExtractAtMostOneFromLinear(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2, __n128 a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  char *v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  int *v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  google::protobuf::Arena *v82;
  std::string **v83;
  std::string *v84;
  char *v85;
  char *v86;
  int v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  google::protobuf::Arena *v93;
  operations_research::sat::ConstraintProto *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  void *__p;
  __int128 v100;
  void *v101;
  char *v102;
  char *v103;
  unint64_t v104[3];
  _QWORD v105[2];

  v105[1] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504) || *((_DWORD *)a2 + 4))
    return;
  if (*((_DWORD *)a2 + 15) == 12)
    v5 = (uint64_t *)*((_QWORD *)a2 + 6);
  else
    v5 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  operations_research::Domain::FromFlatSpanOfIntervals(v5[9], *((int *)v5 + 16), v104, a3);
  if (*((_DWORD *)a2 + 15) != 12)
  {
    v6 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    v94 = a2;
    v7 = qword_25408AC60;
    if ((int)qword_25408AC60 < 1)
      goto LABEL_8;
LABEL_10:
    v9 = 0;
    v8 = 0;
    v98 = 0;
    do
    {
      v10 = (const char *)*(unsigned int *)(v6[3] + 4 * v9);
      v11 = *(_QWORD *)(v6[6] + 8 * v9);
      v12 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v10);
      v13 = operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v10);
      v14 = v12 * v11;
      if (v13 * v11 >= v12 * v11)
        v15 = v12 * v11;
      else
        v15 = v13 * v11;
      v98 += v15;
      if (v14 <= v13 * v11)
        v14 = v13 * v11;
      v8 += v14;
      ++v9;
    }
    while (v7 != v9);
    goto LABEL_17;
  }
  v6 = (uint64_t *)*((_QWORD *)a2 + 6);
  v94 = a2;
  v7 = *((unsigned int *)v6 + 4);
  if ((int)v7 >= 1)
    goto LABEL_10;
LABEL_8:
  v98 = 0;
  v8 = 0;
LABEL_17:
  v16 = 0;
  v105[0] = 0x100000000;
  v95 = v8;
  do
  {
    v96 = v16;
    v97 = *((_DWORD *)v105 + v16);
    v101 = 0;
    v102 = 0;
    v103 = 0;
    if ((int)v7 >= 1)
    {
      if (v97)
      {
        v17 = 0;
        while (1)
        {
          v19 = (const char *)*(unsigned int *)(v6[3] + 4 * v17);
          v20 = *(_QWORD *)(v6[6] + 8 * v17);
          if (operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v19)|| operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v19) != 1)
          {
            goto LABEL_24;
          }
          v22 = operations_research::Domain::Min((operations_research::Domain *)v104, v21);
          v23 = v20 >= 0 ? v20 : -v20;
          if (v8 - 2 * v23 >= v22)
            goto LABEL_24;
          v24 = v20 <= 0 ? (int)v19 : ~(_DWORD)v19;
          v25 = v102;
          if (v102 >= v103)
            break;
          *(_DWORD *)v102 = v24;
          v18 = (uint64_t)(v25 + 4);
LABEL_23:
          v102 = (char *)v18;
LABEL_24:
          if (++v17 == v7)
            goto LABEL_89;
        }
        v26 = (char *)v101;
        v27 = v102 - (_BYTE *)v101;
        v28 = (v102 - (_BYTE *)v101) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v30 = v103 - (_BYTE *)v101;
        if ((v103 - (_BYTE *)v101) >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v32 = v31;
          v33 = (char *)operator new(4 * v31);
          v31 = v32;
          v34 = &v33[4 * v28];
          *(_DWORD *)v34 = v24;
          v18 = (uint64_t)(v34 + 4);
          if (v25 == v26)
            goto LABEL_52;
        }
        else
        {
          v33 = 0;
          v34 = (char *)(4 * v28);
          *(_DWORD *)(4 * v28) = v24;
          v18 = 4 * v28 + 4;
          if (v25 == v26)
          {
LABEL_52:
            v101 = v34;
            v102 = (char *)v18;
            v103 = &v33[4 * v31];
            if (v26)
              operator delete(v26);
            v8 = v95;
            goto LABEL_23;
          }
        }
        v35 = v25 - 4 - v26;
        if (v35 < 0x2C)
          goto LABEL_130;
        if ((unint64_t)(v25 - &v33[v27]) < 0x20)
          goto LABEL_130;
        v36 = (v35 >> 2) + 1;
        v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
        v38 = &v25[-v37];
        v34 -= v37;
        v39 = &v33[4 * v28 - 16];
        v40 = v25 - 16;
        v41 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v42 = *(_OWORD *)v40;
          *((_OWORD *)v39 - 1) = *((_OWORD *)v40 - 1);
          *(_OWORD *)v39 = v42;
          v39 -= 32;
          v40 -= 32;
          v41 -= 8;
        }
        while (v41);
        v25 = v38;
        if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_130:
          do
          {
            v43 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v34 - 1) = v43;
            v34 -= 4;
          }
          while (v25 != v26);
        }
        goto LABEL_52;
      }
      v44 = 0;
      while (1)
      {
        v46 = (const char *)*(unsigned int *)(v6[3] + 4 * v44);
        v47 = *(_QWORD *)(v6[6] + 8 * v44);
        if (operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v46)|| operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v46) != 1)
        {
          goto LABEL_58;
        }
        v49 = operations_research::Domain::Max((operations_research::Domain *)v104, v48);
        v50 = v47 >= 0 ? v47 : -v47;
        if (v98 + 2 * v50 <= v49)
          goto LABEL_58;
        v51 = v47 >= 1 ? (int)v46 : ~(_DWORD)v46;
        v52 = v102;
        if (v102 >= v103)
          break;
        *(_DWORD *)v102 = v51;
        v45 = (uint64_t)(v52 + 4);
LABEL_57:
        v102 = (char *)v45;
LABEL_58:
        if (++v44 == v7)
          goto LABEL_89;
      }
      v53 = (char *)v101;
      v54 = v102 - (_BYTE *)v101;
      v55 = (v102 - (_BYTE *)v101) >> 2;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v57 = v103 - (_BYTE *)v101;
      if ((v103 - (_BYTE *)v101) >> 1 > v56)
        v56 = v57 >> 1;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
        v58 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (v58)
      {
        if (v58 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v59 = v58;
        v60 = (char *)operator new(4 * v58);
        v58 = v59;
        v61 = &v60[4 * v55];
        *(_DWORD *)v61 = v51;
        v45 = (uint64_t)(v61 + 4);
        if (v52 == v53)
          goto LABEL_86;
      }
      else
      {
        v60 = 0;
        v61 = (char *)(4 * v55);
        *(_DWORD *)(4 * v55) = v51;
        v45 = 4 * v55 + 4;
        if (v52 == v53)
        {
LABEL_86:
          v101 = v61;
          v102 = (char *)v45;
          v103 = &v60[4 * v58];
          if (v53)
            operator delete(v53);
          v8 = v95;
          goto LABEL_57;
        }
      }
      v62 = v52 - 4 - v53;
      if (v62 < 0x2C)
        goto LABEL_131;
      if ((unint64_t)(v52 - &v60[v54]) < 0x20)
        goto LABEL_131;
      v63 = (v62 >> 2) + 1;
      v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
      v65 = &v52[-v64];
      v61 -= v64;
      v66 = &v60[4 * v55 - 16];
      v67 = v52 - 16;
      v68 = v63 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v69 = *(_OWORD *)v67;
        *((_OWORD *)v66 - 1) = *((_OWORD *)v67 - 1);
        *(_OWORD *)v66 = v69;
        v66 -= 32;
        v67 -= 32;
        v68 -= 8;
      }
      while (v68);
      v52 = v65;
      if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_131:
        do
        {
          v70 = *((_DWORD *)v52 - 1);
          v52 -= 4;
          *((_DWORD *)v61 - 1) = v70;
          v61 -= 4;
        }
        while (v52 != v53);
      }
      goto LABEL_86;
    }
LABEL_89:
    v71 = (char *)v101;
    if ((unint64_t)(v102 - (_BYTE *)v101) <= 4)
      goto LABEL_119;
    v72 = *((_QWORD *)this + 2);
    __p = operator new(0x28uLL);
    v100 = xmmword_22DCE7540;
    if (v97)
      strcpy((char *)__p, "linear: extracted at most one (min).");
    else
      strcpy((char *)__p, "linear: extracted at most one (max).");
    operations_research::sat::PresolveContext::UpdateRuleStats(v72, (uint64_t)&__p);
    if (SHIBYTE(v100) < 0)
    {
      operator delete(__p);
      v73 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
      v74 = (unsigned int *)(v73 + 40);
      v75 = *(int **)(v73 + 56);
      if (!v75)
      {
LABEL_98:
        v77 = *(_DWORD *)(v73 + 52);
LABEL_100:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v74, v77 + 1);
        v75 = *(int **)(v73 + 56);
        v77 = *v75;
        goto LABEL_101;
      }
    }
    else
    {
      v73 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
      v74 = (unsigned int *)(v73 + 40);
      v75 = *(int **)(v73 + 56);
      if (!v75)
        goto LABEL_98;
    }
    v76 = *(int *)(v73 + 48);
    v77 = *v75;
    if ((int)v76 < *v75)
    {
      *(_DWORD *)(v73 + 48) = v76 + 1;
      v78 = *(_QWORD *)&v75[2 * v76 + 2];
      goto LABEL_102;
    }
    if (v77 == *(_DWORD *)(v73 + 52))
      goto LABEL_100;
LABEL_101:
    *v75 = v77 + 1;
    v78 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)v74);
    v79 = *(_QWORD *)(v73 + 56);
    v80 = *(int *)(v73 + 48);
    *(_DWORD *)(v73 + 48) = v80 + 1;
    *(_QWORD *)(v79 + 8 * v80 + 8) = v78;
LABEL_102:
    v81 = *(_QWORD *)(v78 + 8);
    v82 = (google::protobuf::Arena *)(v81 & 0xFFFFFFFFFFFFFFFELL);
    if ((v81 & 1) != 0)
    {
      v82 = *(google::protobuf::Arena **)v82;
      v83 = (std::string **)(v78 + 40);
      v84 = *(std::string **)(v78 + 40);
      if (v84 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_106:
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v83, v82, *((__int128 **)v94 + 5));
        goto LABEL_107;
      }
    }
    else
    {
      v83 = (std::string **)(v78 + 40);
      v84 = *(std::string **)(v78 + 40);
      if (v84 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_106;
    }
    std::string::operator=(v84, *((const std::string **)v94 + 5));
LABEL_107:
    v85 = (char *)v101;
    v86 = v102;
    while (v85 != v86)
    {
      v87 = *(_DWORD *)v85;
      if (*(_DWORD *)(v78 + 60) == 26)
      {
        v88 = *(_QWORD *)(v78 + 48);
        v90 = *(unsigned int *)(v88 + 16);
        v89 = (unsigned int *)(v88 + 16);
        v91 = v90 + 1;
        if ((_DWORD)v90 == *(_DWORD *)(v88 + 20))
          goto LABEL_108;
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint(v78);
        *(_DWORD *)(v78 + 60) = 26;
        v92 = *(_QWORD *)(v78 + 8);
        v93 = (google::protobuf::Arena *)(v92 & 0xFFFFFFFFFFFFFFFELL);
        if ((v92 & 1) != 0)
          v93 = *(google::protobuf::Arena **)v93;
        v88 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v93);
        *(_QWORD *)(v78 + 48) = v88;
        v90 = *(unsigned int *)(v88 + 16);
        v89 = (unsigned int *)(v88 + 16);
        v91 = v90 + 1;
        if ((_DWORD)v90 == *(_DWORD *)(v88 + 20))
LABEL_108:
          google::protobuf::RepeatedField<int>::Reserve(v89, v91);
      }
      *(_DWORD *)(*(_QWORD *)(v88 + 24) + 4 * v90) = v87;
      *(_DWORD *)(v88 + 16) = v91;
      v85 += 4;
    }
    operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                 + 2));
    v8 = v95;
    v71 = (char *)v101;
LABEL_119:
    if (v71)
    {
      v102 = v71;
      operator delete(v71);
    }
    v16 = v96 + 1;
  }
  while (v96 != 1);
  if ((v104[0] & 1) != 0)
    operator delete((void *)v104[1]);
}

void sub_22DAD0270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,char a25,void *a26)
{
  void *v27;

  if (a21 < 0)
  {
    operator delete(__p);
    v27 = a22;
    if (a22)
    {
LABEL_7:
      operator delete(v27);
      if ((a25 & 1) != 0)
      {
LABEL_8:
        operator delete(a26);
        _Unwind_Resume(a1);
      }
LABEL_6:
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v27 = a22;
    if (a22)
      goto LABEL_7;
  }
  if ((a25 & 1) != 0)
    goto LABEL_8;
  goto LABEL_6;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveLinearOnBooleans(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  int IsIncludedIn;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  google::protobuf::Arena *v30;
  int v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  uint64_t v37;
  uint64_t v38;
  google::protobuf::Arena *v39;
  int v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t k;
  uint64_t v56;
  uint64_t v57;
  google::protobuf::Arena *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t mm;
  uint64_t v63;
  uint64_t v64;
  google::protobuf::Arena *v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  google::protobuf::Arena *v81;
  uint64_t jj;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t m;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned int *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t kk;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  operations_research::sat::ConstraintProto *v103;
  operations_research::sat::ConstraintProto *v104;
  uint64_t n;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned int *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unsigned int *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  operations_research::sat::ConstraintProto *v119;
  operations_research::sat::ConstraintProto *v120;
  uint64_t ii;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unsigned int *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned int *v131;
  int v132;
  uint64_t v133;
  int *v134;
  int v135;
  uint64_t v136;
  void *__p;
  void *v138[2];
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141[3];
  uint64_t v142;

  if (*((_DWORD *)a2 + 15) != 12 || *(_BYTE *)(*((_QWORD *)this + 2) + 504))
    return 0;
  v6 = *((_QWORD *)a2 + 6);
  v136 = *(unsigned int *)(v6 + 16);
  if ((int)v136 <= 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    __p = (void *)0x7FFFFFFFFFFFFFFFLL;
    v142 = 0;
    goto LABEL_33;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v12 = (const char *)*(unsigned int *)(*(_QWORD *)(v6 + 24) + 4 * v7);
    if ((v12 & 0x80000000) != 0)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1939);
      v85 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
      goto LABEL_185;
    }
    __p = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v7);
    v13 = (uint64_t)__p;
    LODWORD(v142) = 0;
    if (!__p)
    {
      v141[0] = (uint64_t *)google::MakeCheckOpString<long long,int>((int)&__p, (int)&v142, "coeff != 0");
      if (v141[0])
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1940, v141);
        google::LogMessage::stream((google::LogMessage *)&__p);
        goto LABEL_185;
      }
    }
    if (operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v12)|| operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v12) != 1)
    {
      return 0;
    }
    if (v11 >= -v13)
      v15 = -v13;
    else
      v15 = v11;
    if (v13 >= v11)
      v16 = v11;
    else
      v16 = v13;
    if (v13 >= 1)
      v17 = v13;
    else
      v17 = -v13;
    if (v13 >= 1)
      v11 = v16;
    else
      v11 = v15;
    if (v13 < 1)
      v8 += v13;
    else
      v9 += v13;
    if (v10 <= v17)
      v10 = v17;
    ++v7;
  }
  while (v136 != v7);
  __p = (void *)v11;
  v142 = v10;
  if (v11 > v10)
  {
LABEL_33:
    v141[0] = (uint64_t *)google::MakeCheckOpString<long long,long long>((int)&__p, (int)&v142, "min_coeff <= max_coeff");
    if (!v141[0])
      goto LABEL_36;
    google::LogMessageFatal::LogMessageFatal((unint64_t *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 1955, v141);
    google::LogMessage::stream((google::LogMessage *)&__p);
LABEL_185:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
  }
LABEL_36:
  operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(v6 + 72), *(int *)(v6 + 64), (unint64_t *)v141, v14);
  if ((operations_research::Domain::Contains((operations_research::Domain *)v141, v8)
     || v8 + v11 <= operations_research::Domain::Max((operations_research::Domain *)v141, v18))
    && (operations_research::Domain::Contains((operations_research::Domain *)v141, v9)
     || v9 - v11 >= operations_research::Domain::Min((operations_research::Domain *)v141, v19)))
  {
    operations_research::Domain::Domain(&__p, v8, v9);
    IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&__p, (const operations_research::Domain *)v141);
    if ((__p & 1) != 0)
      operator delete(v138[0]);
    if (IsIncludedIn)
    {
      v23 = *((_QWORD *)this + 2);
      __p = operator new(0x28uLL);
      *(_OWORD *)v138 = xmmword_22DCEAFB0;
      strcpy((char *)__p, "linear: all BOOLeans and trivially true");
      operations_research::sat::PresolveContext::UpdateRuleStats(v23, (uint64_t)&__p);
      if (SHIBYTE(v138[1]) < 0)
        operator delete(__p);
      operations_research::sat::ConstraintProto::Clear(a2);
LABEL_50:
      v3 = 1;
      if (((uint64_t)v141[0] & 1) != 0)
        goto LABEL_114;
      return v3;
    }
    v25 = v8 + v11;
    if (v8 + v11 > operations_research::Domain::Max((operations_research::Domain *)v141, v21))
    {
      v26 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, "linear: negative reified and");
      operations_research::sat::PresolveContext::UpdateRuleStats(v26, (uint64_t)&__p);
      if (SHIBYTE(v138[1]) < 0)
        operator delete(__p);
      operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
      *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_BOOL_and(a2) + 16) = 0;
      if ((int)v136 >= 1)
      {
        for (i = 0; i != v136; ++i)
        {
          if (*((_DWORD *)a2 + 15) == 4)
          {
            v28 = *((_QWORD *)a2 + 6);
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
            *((_DWORD *)a2 + 15) = 4;
            v29 = *((_QWORD *)a2 + 1);
            v30 = (google::protobuf::Arena *)(v29 & 0xFFFFFFFFFFFFFFFELL);
            if ((v29 & 1) != 0)
              v30 = *(google::protobuf::Arena **)v30;
            v28 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v30);
            *((_QWORD *)a2 + 6) = v28;
          }
          if (*(uint64_t *)(v140 + 8 * i) <= 0)
            v31 = *(_DWORD *)(v139 + 4 * i);
          else
            v31 = ~*(_DWORD *)(v139 + 4 * i);
          v32 = *(unsigned int *)(v28 + 16);
          if ((_DWORD)v32 == *(_DWORD *)(v28 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v28 + 16), v32 + 1);
          *(_DWORD *)(*(_QWORD *)(v28 + 24) + 4 * v32) = v31;
          *(_DWORD *)(v28 + 16) = v32 + 1;
        }
      }
LABEL_112:
      v51 = operations_research::sat::CpModelPresolver::PresolveBoolAnd(this, (uint64_t **)a2);
      goto LABEL_113;
    }
    v34 = v9 - v11;
    if (v9 - v11 < operations_research::Domain::Min((operations_research::Domain *)v141, v24))
    {
      v35 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, "linear: positive reified and");
      operations_research::sat::PresolveContext::UpdateRuleStats(v35, (uint64_t)&__p);
      if (SHIBYTE(v138[1]) < 0)
        operator delete(__p);
      operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
      *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_BOOL_and(a2) + 16) = 0;
      if ((int)v136 >= 1)
      {
        for (j = 0; j != v136; ++j)
        {
          if (*((_DWORD *)a2 + 15) == 4)
          {
            v37 = *((_QWORD *)a2 + 6);
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
            *((_DWORD *)a2 + 15) = 4;
            v38 = *((_QWORD *)a2 + 1);
            v39 = (google::protobuf::Arena *)(v38 & 0xFFFFFFFFFFFFFFFELL);
            if ((v38 & 1) != 0)
              v39 = *(google::protobuf::Arena **)v39;
            v37 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v39);
            *((_QWORD *)a2 + 6) = v37;
          }
          if (*(uint64_t *)(v140 + 8 * j) >= 1)
            v40 = *(_DWORD *)(v139 + 4 * j);
          else
            v40 = ~*(_DWORD *)(v139 + 4 * j);
          v41 = *(unsigned int *)(v37 + 16);
          if ((_DWORD)v41 == *(_DWORD *)(v37 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v37 + 16), v41 + 1);
          *(_DWORD *)(*(_QWORD *)(v37 + 24) + 4 * v41) = v40;
          *(_DWORD *)(v37 + 16) = v41 + 1;
        }
      }
      goto LABEL_112;
    }
    if (v25 >= operations_research::Domain::Min((operations_research::Domain *)v141, v33)
      && (operations_research::Domain::front((operations_research::Domain *)v141, v42), (uint64_t)v42 >= v9))
    {
      v54 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, "linear: positive clause");
      operations_research::sat::PresolveContext::UpdateRuleStats(v54, (uint64_t)&__p);
      if (SHIBYTE(v138[1]) < 0)
        operator delete(__p);
      operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
      *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_BOOL_or(a2) + 16) = 0;
      if ((int)v136 >= 1)
      {
        for (k = 0; k != v136; ++k)
        {
          if (*((_DWORD *)a2 + 15) == 3)
          {
            v56 = *((_QWORD *)a2 + 6);
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
            *((_DWORD *)a2 + 15) = 3;
            v57 = *((_QWORD *)a2 + 1);
            v58 = (google::protobuf::Arena *)(v57 & 0xFFFFFFFFFFFFFFFELL);
            if ((v57 & 1) != 0)
              v58 = *(google::protobuf::Arena **)v58;
            v56 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v58);
            *((_QWORD *)a2 + 6) = v56;
          }
          if (*(uint64_t *)(v140 + 8 * k) >= 1)
            v59 = *(_DWORD *)(v139 + 4 * k);
          else
            v59 = ~*(_DWORD *)(v139 + 4 * k);
          v60 = *(unsigned int *)(v56 + 16);
          if ((_DWORD)v60 == *(_DWORD *)(v56 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v56 + 16), v60 + 1);
          *(_DWORD *)(*(_QWORD *)(v56 + 24) + 4 * v60) = v59;
          *(_DWORD *)(v56 + 16) = v60 + 1;
        }
      }
    }
    else
    {
      if (v34 > operations_research::Domain::Max((operations_research::Domain *)v141, v42)
        || operations_research::Domain::back((operations_research::Domain *)v141, v43) > v8)
      {
        v134 = (int *)((char *)a2 + 16);
        if (*((_DWORD *)a2 + 4))
          goto LABEL_109;
        v45 = v8 + v10;
        if (v8 + v10 <= operations_research::Domain::Max((operations_research::Domain *)v141, v43)
          && v8 + 2 * v11 > operations_research::Domain::Max((operations_research::Domain *)v141, v44)
          && operations_research::Domain::back((operations_research::Domain *)v141, v44) <= v8)
        {
          v86 = *((_QWORD *)this + 2);
          std::string::basic_string[abi:ne180100]<0>(&__p, "linear: positive at most one");
          operations_research::sat::PresolveContext::UpdateRuleStats(v86, (uint64_t)&__p);
          if (SHIBYTE(v138[1]) < 0)
            operator delete(__p);
          operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
          *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_at_most_one(a2) + 16) = 0;
          if ((int)v136 >= 1)
          {
            for (m = 0; m != v136; ++m)
            {
              v88 = operations_research::sat::ConstraintProto::mutable_at_most_one(a2);
              v89 = v88;
              if (*(uint64_t *)(v140 + 8 * m) >= 1)
                v90 = *(_DWORD *)(v139 + 4 * m);
              else
                v90 = ~*(_DWORD *)(v139 + 4 * m);
              v93 = *(unsigned int *)(v88 + 16);
              v92 = *(_DWORD *)(v88 + 20);
              v91 = (unsigned int *)(v88 + 16);
              if ((_DWORD)v93 == v92)
                google::protobuf::RepeatedField<int>::Reserve(v91, v93 + 1);
              *(_DWORD *)(*(_QWORD *)(v89 + 24) + 4 * v93) = v90;
              *(_DWORD *)(v89 + 16) = v93 + 1;
            }
          }
        }
        else
        {
          if (*v134)
            goto LABEL_109;
          v47 = v9 - v10;
          if (v47 < operations_research::Domain::Min((operations_research::Domain *)v141, v44)
            || v9 - 2 * v11 >= operations_research::Domain::Min((operations_research::Domain *)v141, v46)
            || (operations_research::Domain::front((operations_research::Domain *)v141, v46), (uint64_t)v46 < v9))
          {
            if (!*v134)
            {
              if (((unint64_t)v141[0] & 0x1FFFFFFFELL) == 2
                && v8 < operations_research::Domain::Min((operations_research::Domain *)v141, v46)
                && v25 >= operations_research::Domain::Min((operations_research::Domain *)v141, v46)
                && v8 + 2 * v11 > operations_research::Domain::Max((operations_research::Domain *)v141, v46)
                && v45 <= operations_research::Domain::Max((operations_research::Domain *)v141, v46))
              {
                v102 = *((_QWORD *)this + 2);
                std::string::basic_string[abi:ne180100]<0>(&__p, "linear: positive equal one");
                operations_research::sat::PresolveContext::UpdateRuleStats(v102, (uint64_t)&__p);
                if (SHIBYTE(v138[1]) < 0)
                  operator delete(__p);
                v103 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
                v104 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
                operations_research::sat::ConstraintProto::set_name((uint64_t)v103, *((std::string **)a2 + 5));
                operations_research::sat::ConstraintProto::set_name((uint64_t)v104, *((std::string **)a2 + 5));
                if ((int)v136 >= 1)
                {
                  for (n = 0; n != v136; ++n)
                  {
                    v106 = operations_research::sat::ConstraintProto::mutable_BOOL_or(v103);
                    v107 = v106;
                    if (*(uint64_t *)(*(_QWORD *)(v6 + 48) + 8 * n) >= 1)
                      v108 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * n);
                    else
                      v108 = ~*(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * n);
                    v111 = *(unsigned int *)(v106 + 16);
                    v110 = *(_DWORD *)(v106 + 20);
                    v109 = (unsigned int *)(v106 + 16);
                    if ((_DWORD)v111 == v110)
                      google::protobuf::RepeatedField<int>::Reserve(v109, v111 + 1);
                    *(_DWORD *)(*(_QWORD *)(v107 + 24) + 4 * v111) = v108;
                    *(_DWORD *)(v107 + 16) = v111 + 1;
                    v112 = operations_research::sat::ConstraintProto::mutable_at_most_one(v104);
                    v113 = v112;
                    if (*(uint64_t *)(*(_QWORD *)(v6 + 48) + 8 * n) >= 1)
                      v114 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * n);
                    else
                      v114 = ~*(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * n);
                    v117 = *(unsigned int *)(v112 + 16);
                    v116 = *(_DWORD *)(v112 + 20);
                    v115 = (unsigned int *)(v112 + 16);
                    if ((_DWORD)v117 == v116)
                      google::protobuf::RepeatedField<int>::Reserve(v115, v117 + 1);
                    *(_DWORD *)(*(_QWORD *)(v113 + 24) + 4 * v117) = v114;
                    *(_DWORD *)(v113 + 16) = v117 + 1;
                  }
                }
              }
              else
              {
                if (*v134
                  || ((unint64_t)v141[0] & 0x1FFFFFFFELL) != 2
                  || v9 <= operations_research::Domain::Max((operations_research::Domain *)v141, v46)
                  || v34 > operations_research::Domain::Max((operations_research::Domain *)v141, v48)
                  || v9 - 2 * v11 >= operations_research::Domain::Min((operations_research::Domain *)v141, v49)
                  || v47 < operations_research::Domain::Min((operations_research::Domain *)v141, v50))
                {
                  goto LABEL_109;
                }
                v118 = *((_QWORD *)this + 2);
                std::string::basic_string[abi:ne180100]<0>(&__p, "linear: negative equal one");
                operations_research::sat::PresolveContext::UpdateRuleStats(v118, (uint64_t)&__p);
                if (SHIBYTE(v138[1]) < 0)
                  operator delete(__p);
                v119 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
                v120 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
                operations_research::sat::ConstraintProto::set_name((uint64_t)v119, *((std::string **)a2 + 5));
                operations_research::sat::ConstraintProto::set_name((uint64_t)v120, *((std::string **)a2 + 5));
                if ((int)v136 >= 1)
                {
                  for (ii = 0; ii != v136; ++ii)
                  {
                    v122 = operations_research::sat::ConstraintProto::mutable_BOOL_or(v119);
                    v123 = v122;
                    if (*(uint64_t *)(*(_QWORD *)(v6 + 48) + 8 * ii) <= 0)
                      v124 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * ii);
                    else
                      v124 = ~*(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * ii);
                    v127 = *(unsigned int *)(v122 + 16);
                    v126 = *(_DWORD *)(v122 + 20);
                    v125 = (unsigned int *)(v122 + 16);
                    if ((_DWORD)v127 == v126)
                      google::protobuf::RepeatedField<int>::Reserve(v125, v127 + 1);
                    *(_DWORD *)(*(_QWORD *)(v123 + 24) + 4 * v127) = v124;
                    *(_DWORD *)(v123 + 16) = v127 + 1;
                    v128 = operations_research::sat::ConstraintProto::mutable_at_most_one(v120);
                    v129 = v128;
                    if (*(uint64_t *)(*(_QWORD *)(v6 + 48) + 8 * ii) <= 0)
                      v130 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * ii);
                    else
                      v130 = ~*(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * ii);
                    v133 = *(unsigned int *)(v128 + 16);
                    v132 = *(_DWORD *)(v128 + 20);
                    v131 = (unsigned int *)(v128 + 16);
                    if ((_DWORD)v133 == v132)
                      google::protobuf::RepeatedField<int>::Reserve(v131, v133 + 1);
                    *(_DWORD *)(*(_QWORD *)(v129 + 24) + 4 * v133) = v130;
                    *(_DWORD *)(v129 + 16) = v133 + 1;
                  }
                }
              }
LABEL_118:
              operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                           + 2));
              operations_research::sat::ConstraintProto::Clear(a2);
              goto LABEL_50;
            }
LABEL_109:
            if ((int)v136 > 3)
            {
              v3 = 0;
              if (((uint64_t)v141[0] & 1) != 0)
                goto LABEL_114;
              return v3;
            }
            v52 = *((_QWORD *)this + 2);
            std::string::basic_string[abi:ne180100]<0>(&__p, "linear: small Boolean expression");
            operations_research::sat::PresolveContext::UpdateRuleStats(v52, (uint64_t)&__p);
            if (SHIBYTE(v138[1]) < 0)
              operator delete(__p);
            v53 = *(_DWORD *)(v6 + 16);
            if (v53 == 31)
              goto LABEL_118;
            v68 = 0;
            v69 = 1 << v53;
            if (v69 <= 1)
              v69 = 1;
            v135 = v69;
            while (1)
            {
              if ((int)v136 < 1)
              {
                v71 = 0;
              }
              else
              {
                v70 = 0;
                v71 = 0;
                do
                {
                  if (((v68 >> v70) & 1) != 0)
                    v71 += *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v70);
                  ++v70;
                }
                while (v136 != v70);
              }
              if (operations_research::Domain::Contains((operations_research::Domain *)v141, v71))
                goto LABEL_154;
              v72 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
              v73 = *(int **)(v72 + 56);
              if (!v73)
                break;
              v74 = *(int *)(v72 + 48);
              v75 = *v73;
              if ((int)v74 >= *v73)
              {
                if (v75 == *(_DWORD *)(v72 + 52))
                {
LABEL_167:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v72 + 40), v75 + 1);
                  v73 = *(int **)(v72 + 56);
                  v75 = *v73;
                }
                *v73 = v75 + 1;
                v76 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v72 + 40));
                v77 = *(_QWORD *)(v72 + 56);
                v78 = *(int *)(v72 + 48);
                *(_DWORD *)(v72 + 48) = v78 + 1;
                *(_QWORD *)(v77 + 8 * v78 + 8) = v76;
                goto LABEL_169;
              }
              *(_DWORD *)(v72 + 48) = v74 + 1;
              v76 = *(_QWORD *)&v73[2 * v74 + 2];
LABEL_169:
              if (*(_DWORD *)(v76 + 60) == 3)
              {
                v79 = *(_QWORD *)(v76 + 48);
              }
              else
              {
                operations_research::sat::ConstraintProto::clear_constraint(v76);
                *(_DWORD *)(v76 + 60) = 3;
                v80 = *(_QWORD *)(v76 + 8);
                v81 = (google::protobuf::Arena *)(v80 & 0xFFFFFFFFFFFFFFFELL);
                if ((v80 & 1) != 0)
                  v81 = *(google::protobuf::Arena **)v81;
                v79 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v81);
                *(_QWORD *)(v76 + 48) = v79;
              }
              if (*v134)
                google::protobuf::RepeatedField<int>::operator=((unsigned int *)(v76 + 16), v134);
              if ((int)v136 >= 1)
              {
                for (jj = 0; jj != v136; ++jj)
                {
                  if (((v68 >> jj) & 1) != 0)
                    v83 = ~*(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * jj);
                  else
                    v83 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * jj);
                  v84 = *(unsigned int *)(v79 + 16);
                  if ((_DWORD)v84 == *(_DWORD *)(v79 + 20))
                    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v79 + 16), v84 + 1);
                  *(_DWORD *)(*(_QWORD *)(v79 + 24) + 4 * v84) = v83;
                  *(_DWORD *)(v79 + 16) = v84 + 1;
                }
              }
LABEL_154:
              if (++v68 == v135)
                goto LABEL_118;
            }
            v75 = *(_DWORD *)(v72 + 52);
            goto LABEL_167;
          }
          v94 = *((_QWORD *)this + 2);
          std::string::basic_string[abi:ne180100]<0>(&__p, "linear: negative at most one");
          operations_research::sat::PresolveContext::UpdateRuleStats(v94, (uint64_t)&__p);
          if (SHIBYTE(v138[1]) < 0)
            operator delete(__p);
          operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
          *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_at_most_one(a2) + 16) = 0;
          if ((int)v136 >= 1)
          {
            for (kk = 0; kk != v136; ++kk)
            {
              v96 = operations_research::sat::ConstraintProto::mutable_at_most_one(a2);
              v97 = v96;
              if (*(uint64_t *)(v140 + 8 * kk) <= 0)
                v98 = *(_DWORD *)(v139 + 4 * kk);
              else
                v98 = ~*(_DWORD *)(v139 + 4 * kk);
              v101 = *(unsigned int *)(v96 + 16);
              v100 = *(_DWORD *)(v96 + 20);
              v99 = (unsigned int *)(v96 + 16);
              if ((_DWORD)v101 == v100)
                google::protobuf::RepeatedField<int>::Reserve(v99, v101 + 1);
              *(_DWORD *)(*(_QWORD *)(v97 + 24) + 4 * v101) = v98;
              *(_DWORD *)(v97 + 16) = v101 + 1;
            }
          }
        }
        operations_research::sat::LinearConstraintProto::~LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p);
        v3 = 1;
        if (((uint64_t)v141[0] & 1) != 0)
          goto LABEL_114;
        return v3;
      }
      v61 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&__p, "linear: negative clause");
      operations_research::sat::PresolveContext::UpdateRuleStats(v61, (uint64_t)&__p);
      if (SHIBYTE(v138[1]) < 0)
        operator delete(__p);
      operations_research::sat::LinearConstraintProto::LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p, (const operations_research::sat::LinearConstraintProto *)v6);
      *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_BOOL_or(a2) + 16) = 0;
      if ((int)v136 >= 1)
      {
        for (mm = 0; mm != v136; ++mm)
        {
          if (*((_DWORD *)a2 + 15) == 3)
          {
            v63 = *((_QWORD *)a2 + 6);
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
            *((_DWORD *)a2 + 15) = 3;
            v64 = *((_QWORD *)a2 + 1);
            v65 = (google::protobuf::Arena *)(v64 & 0xFFFFFFFFFFFFFFFELL);
            if ((v64 & 1) != 0)
              v65 = *(google::protobuf::Arena **)v65;
            v63 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v65);
            *((_QWORD *)a2 + 6) = v63;
          }
          if (*(uint64_t *)(v140 + 8 * mm) <= 0)
            v66 = *(_DWORD *)(v139 + 4 * mm);
          else
            v66 = ~*(_DWORD *)(v139 + 4 * mm);
          v67 = *(unsigned int *)(v63 + 16);
          if ((_DWORD)v67 == *(_DWORD *)(v63 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v63 + 16), v67 + 1);
          *(_DWORD *)(*(_QWORD *)(v63 + 24) + 4 * v67) = v66;
          *(_DWORD *)(v63 + 16) = v67 + 1;
        }
      }
    }
    v51 = operations_research::sat::CpModelPresolver::PresolveBoolOr(this, a2);
LABEL_113:
    v3 = v51;
    operations_research::sat::LinearConstraintProto::~LinearConstraintProto((operations_research::sat::LinearConstraintProto *)&__p);
    if (((uint64_t)v141[0] & 1) != 0)
      goto LABEL_114;
    return v3;
  }
  v20 = *((_QWORD *)this + 2);
  __p = operator new(0x30uLL);
  *(_OWORD *)v138 = xmmword_22DCED9E0;
  strcpy((char *)__p, "linear: all BOOLeans and trivially false");
  operations_research::sat::PresolveContext::UpdateRuleStats(v20, (uint64_t)&__p);
  if (SHIBYTE(v138[1]) < 0)
    operator delete(__p);
  v3 = operations_research::sat::CpModelPresolver::MarkConstraintAsFalse(this, a2);
  if (((uint64_t)v141[0] & 1) != 0)
LABEL_114:
    operator delete(v141[1]);
  return v3;
}

void sub_22DAD127C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *__p)
{
  if ((a26 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DAD13C0(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveInterval(operations_research::sat::CpModelPresolver *this, int a2, operations_research::sat::ConstraintProto *a3)
{
  uint64_t v4;
  unsigned int *v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  operations_research::sat::PresolveContext *v17;
  uint64_t v18;
  char v19;
  int8x16_t v20;
  operations_research::sat::PresolveContext *v21;
  const char *v22;
  char v23;
  operations_research::sat::PresolveContext *v24;
  int8x16_t v25;
  const char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  google::protobuf::Arena *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  google::protobuf::Arena *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  google::protobuf::Arena *v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  google::protobuf::Arena *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  google::protobuf::Arena *v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  google::protobuf::Arena *v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  google::protobuf::Arena *v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  google::protobuf::Arena *v79;
  uint64_t v80;
  operations_research::sat::PresolveContext *v81;
  int8x16_t v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  void *v87;
  void *__p;
  char v89;
  unint64_t v90;
  void *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  void *v95[2];
  BOOL v96;

  v4 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v4 + 504))
    return 0;
  if (*((_DWORD *)a3 + 15) == 19)
  {
    v8 = (unsigned int *)*((_QWORD *)a3 + 6);
    v10 = v8[4];
    v9 = (const char *)v8[5];
    v11 = v8[6];
    if (*((_DWORD *)a3 + 4))
      goto LABEL_6;
  }
  else
  {
    v10 = qword_25408AE50;
    v9 = (const char *)HIDWORD(qword_25408AE50);
    v11 = dword_25408AE58;
    if (*((_DWORD *)a3 + 4))
    {
LABEL_6:
      if (!*(_DWORD *)(*(_QWORD *)(v4 + 776) + 4 * a2))
        goto LABEL_7;
      return 0;
    }
  }
  v96 = 0;
  operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v4, (const char *)v10, (unint64_t *)&v94);
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v9, &v92);
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v11, &v90);
  v17 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  v18 = operations_research::sat::PresolveContext::MaxOf(v17, (const char *)v11);
  operations_research::Domain::Domain(&v87, 0, v18);
  v19 = operations_research::sat::PresolveContext::IntersectDomainWith(v17, (const char *)v11, (const operations_research::Domain *)&v87, &v96);
  if ((v87 & 1) != 0)
    operator delete(__p);
  if ((v19 & 1) == 0)
    goto LABEL_103;
  v21 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  operations_research::Domain::AdditionWith((operations_research::Domain *)&v94, (const operations_research::Domain *)&v90, &v87, v20);
  v23 = operations_research::sat::PresolveContext::IntersectDomainWith(v21, v9, (const operations_research::Domain *)&v87, &v96);
  if ((v87 & 1) != 0)
    operator delete(__p);
  if ((v23 & 1) == 0)
  {
LABEL_103:
    if ((v90 & 1) != 0)
    {
      operator delete(v91);
      if ((v92 & 1) == 0)
      {
LABEL_105:
        if ((v94 & 1) == 0)
          return 0;
LABEL_109:
        operator delete(v95[0]);
        return 0;
      }
    }
    else if ((v92 & 1) == 0)
    {
      goto LABEL_105;
    }
    operator delete(v93);
    if ((v94 & 1) == 0)
      return 0;
    goto LABEL_109;
  }
  v24 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  operations_research::Domain::Negation((operations_research::Domain *)&v90, v22, &v85);
  operations_research::Domain::AdditionWith((operations_research::Domain *)&v92, (const operations_research::Domain *)&v85, &v87, v25);
  v27 = operations_research::sat::PresolveContext::IntersectDomainWith(v24, (const char *)v10, (const operations_research::Domain *)&v87, &v96);
  if ((v87 & 1) == 0)
  {
    if ((v85 & 1) == 0)
      goto LABEL_19;
LABEL_88:
    operator delete(v86);
    if ((v27 & 1) == 0)
      goto LABEL_103;
    goto LABEL_89;
  }
  operator delete(__p);
  if ((v85 & 1) != 0)
    goto LABEL_88;
LABEL_19:
  if ((v27 & 1) == 0)
    goto LABEL_103;
LABEL_89:
  v81 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  operations_research::Domain::Negation((operations_research::Domain *)&v94, v26, &v85);
  operations_research::Domain::AdditionWith((operations_research::Domain *)&v92, (const operations_research::Domain *)&v85, &v87, v82);
  v83 = operations_research::sat::PresolveContext::IntersectDomainWith(v81, (const char *)v11, (const operations_research::Domain *)&v87, &v96);
  if ((v87 & 1) != 0)
  {
    operator delete(__p);
    if ((v85 & 1) == 0)
    {
LABEL_91:
      if ((v83 & 1) == 0)
        goto LABEL_103;
      goto LABEL_92;
    }
  }
  else if ((v85 & 1) == 0)
  {
    goto LABEL_91;
  }
  operator delete(v86);
  if ((v83 & 1) == 0)
    goto LABEL_103;
LABEL_92:
  if (v96)
  {
    v84 = *((_QWORD *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(&v87, "interval: reduced domains");
    operations_research::sat::PresolveContext::UpdateRuleStats(v84, (uint64_t)&v87);
    if (v89 < 0)
      operator delete(v87);
  }
  if ((v90 & 1) != 0)
  {
    operator delete(v91);
    if ((v92 & 1) == 0)
    {
LABEL_97:
      if ((v94 & 1) == 0)
        goto LABEL_99;
      goto LABEL_98;
    }
  }
  else if ((v92 & 1) == 0)
  {
    goto LABEL_97;
  }
  operator delete(v93);
  if ((v94 & 1) != 0)
LABEL_98:
    operator delete(v95[0]);
LABEL_99:
  v4 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(*(_QWORD *)(v4 + 776) + 4 * a2))
    return 0;
LABEL_7:
  v12 = *(_QWORD *)(v4 + 48);
  v13 = *(int **)(v12 + 56);
  if (!v13)
  {
    v15 = *(_DWORD *)(v12 + 52);
    goto LABEL_23;
  }
  v14 = *(int *)(v12 + 48);
  v15 = *v13;
  if ((int)v14 >= *v13)
  {
    if (v15 != *(_DWORD *)(v12 + 52))
    {
LABEL_24:
      *v13 = v15 + 1;
      v16 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v12 + 40));
      v28 = *(_QWORD *)(v12 + 56);
      v29 = *(int *)(v12 + 48);
      *(_DWORD *)(v12 + 48) = v29 + 1;
      *(_QWORD *)(v28 + 8 * v29 + 8) = v16;
      goto LABEL_25;
    }
LABEL_23:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v12 + 40), v15 + 1);
    v13 = *(int **)(v12 + 56);
    v15 = *v13;
    goto LABEL_24;
  }
  *(_DWORD *)(v12 + 48) = v14 + 1;
  v16 = *(_QWORD *)&v13[2 * v14 + 2];
LABEL_25:
  if ((operations_research::sat::ConstraintProto *)v16 != a3)
  {
    *(_DWORD *)(v16 + 16) = 0;
    v30 = *((_DWORD *)a3 + 4);
    if (v30)
    {
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v16 + 16), v30);
      v31 = *(void **)(v16 + 24);
      *(_DWORD *)(v16 + 16) += *((_DWORD *)a3 + 4);
      memcpy(v31, *((const void **)a3 + 3), 4 * *((int *)a3 + 4));
    }
  }
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v32 = *(_QWORD *)(v16 + 48);
    v34 = *(unsigned int *)(v32 + 64);
    v33 = (unsigned int *)(v32 + 64);
    v35 = v34 + 1;
    if ((_DWORD)v34 != *(_DWORD *)(v32 + 68))
      goto LABEL_35;
LABEL_34:
    google::protobuf::RepeatedField<long long>::Reserve(v33, v35);
    goto LABEL_35;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v36 = *(_QWORD *)(v16 + 8);
  v37 = (google::protobuf::Arena *)(v36 & 0xFFFFFFFFFFFFFFFELL);
  if ((v36 & 1) != 0)
    v37 = *(google::protobuf::Arena **)v37;
  v32 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v37);
  *(_QWORD *)(v16 + 48) = v32;
  v34 = *(unsigned int *)(v32 + 64);
  v33 = (unsigned int *)(v32 + 64);
  v35 = v34 + 1;
  if ((_DWORD)v34 == *(_DWORD *)(v32 + 68))
    goto LABEL_34;
LABEL_35:
  *(_QWORD *)(*(_QWORD *)(v32 + 72) + 8 * v34) = 0;
  *(_DWORD *)(v32 + 64) = v35;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v38 = *(_QWORD *)(v16 + 48);
    v40 = *(unsigned int *)(v38 + 64);
    v39 = (unsigned int *)(v38 + 64);
    v41 = v40 + 1;
    if ((_DWORD)v40 != *(_DWORD *)(v38 + 68))
      goto LABEL_42;
LABEL_41:
    google::protobuf::RepeatedField<long long>::Reserve(v39, v41);
    goto LABEL_42;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v42 = *(_QWORD *)(v16 + 8);
  v43 = (google::protobuf::Arena *)(v42 & 0xFFFFFFFFFFFFFFFELL);
  if ((v42 & 1) != 0)
    v43 = *(google::protobuf::Arena **)v43;
  v38 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v43);
  *(_QWORD *)(v16 + 48) = v38;
  v40 = *(unsigned int *)(v38 + 64);
  v39 = (unsigned int *)(v38 + 64);
  v41 = v40 + 1;
  if ((_DWORD)v40 == *(_DWORD *)(v38 + 68))
    goto LABEL_41;
LABEL_42:
  *(_QWORD *)(*(_QWORD *)(v38 + 72) + 8 * v40) = 0;
  *(_DWORD *)(v38 + 64) = v41;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v44 = *(_QWORD *)(v16 + 48);
    v46 = *(unsigned int *)(v44 + 16);
    v45 = (unsigned int *)(v44 + 16);
    v47 = v46 + 1;
    if ((_DWORD)v46 != *(_DWORD *)(v44 + 20))
      goto LABEL_49;
LABEL_48:
    google::protobuf::RepeatedField<int>::Reserve(v45, v47);
    goto LABEL_49;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v48 = *(_QWORD *)(v16 + 8);
  v49 = (google::protobuf::Arena *)(v48 & 0xFFFFFFFFFFFFFFFELL);
  if ((v48 & 1) != 0)
    v49 = *(google::protobuf::Arena **)v49;
  v44 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v49);
  *(_QWORD *)(v16 + 48) = v44;
  v46 = *(unsigned int *)(v44 + 16);
  v45 = (unsigned int *)(v44 + 16);
  v47 = v46 + 1;
  if ((_DWORD)v46 == *(_DWORD *)(v44 + 20))
    goto LABEL_48;
LABEL_49:
  *(_DWORD *)(*(_QWORD *)(v44 + 24) + 4 * v46) = v10;
  *(_DWORD *)(v44 + 16) = v47;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v50 = *(_QWORD *)(v16 + 48);
    v52 = *(unsigned int *)(v50 + 40);
    v51 = (unsigned int *)(v50 + 40);
    v53 = v52 + 1;
    if ((_DWORD)v52 != *(_DWORD *)(v50 + 44))
      goto LABEL_56;
LABEL_55:
    google::protobuf::RepeatedField<long long>::Reserve(v51, v53);
    goto LABEL_56;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v54 = *(_QWORD *)(v16 + 8);
  v55 = (google::protobuf::Arena *)(v54 & 0xFFFFFFFFFFFFFFFELL);
  if ((v54 & 1) != 0)
    v55 = *(google::protobuf::Arena **)v55;
  v50 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v55);
  *(_QWORD *)(v16 + 48) = v50;
  v52 = *(unsigned int *)(v50 + 40);
  v51 = (unsigned int *)(v50 + 40);
  v53 = v52 + 1;
  if ((_DWORD)v52 == *(_DWORD *)(v50 + 44))
    goto LABEL_55;
LABEL_56:
  *(_QWORD *)(*(_QWORD *)(v50 + 48) + 8 * v52) = 1;
  *(_DWORD *)(v50 + 40) = v53;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v56 = *(_QWORD *)(v16 + 48);
    v58 = *(unsigned int *)(v56 + 16);
    v57 = (unsigned int *)(v56 + 16);
    v59 = v58 + 1;
    if ((_DWORD)v58 != *(_DWORD *)(v56 + 20))
      goto LABEL_63;
LABEL_62:
    google::protobuf::RepeatedField<int>::Reserve(v57, v59);
    goto LABEL_63;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v60 = *(_QWORD *)(v16 + 8);
  v61 = (google::protobuf::Arena *)(v60 & 0xFFFFFFFFFFFFFFFELL);
  if ((v60 & 1) != 0)
    v61 = *(google::protobuf::Arena **)v61;
  v56 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v61);
  *(_QWORD *)(v16 + 48) = v56;
  v58 = *(unsigned int *)(v56 + 16);
  v57 = (unsigned int *)(v56 + 16);
  v59 = v58 + 1;
  if ((_DWORD)v58 == *(_DWORD *)(v56 + 20))
    goto LABEL_62;
LABEL_63:
  *(_DWORD *)(*(_QWORD *)(v56 + 24) + 4 * v58) = v11;
  *(_DWORD *)(v56 + 16) = v59;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v62 = *(_QWORD *)(v16 + 48);
    v64 = *(unsigned int *)(v62 + 40);
    v63 = (unsigned int *)(v62 + 40);
    v65 = v64 + 1;
    if ((_DWORD)v64 != *(_DWORD *)(v62 + 44))
      goto LABEL_70;
LABEL_69:
    google::protobuf::RepeatedField<long long>::Reserve(v63, v65);
    goto LABEL_70;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v66 = *(_QWORD *)(v16 + 8);
  v67 = (google::protobuf::Arena *)(v66 & 0xFFFFFFFFFFFFFFFELL);
  if ((v66 & 1) != 0)
    v67 = *(google::protobuf::Arena **)v67;
  v62 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v67);
  *(_QWORD *)(v16 + 48) = v62;
  v64 = *(unsigned int *)(v62 + 40);
  v63 = (unsigned int *)(v62 + 40);
  v65 = v64 + 1;
  if ((_DWORD)v64 == *(_DWORD *)(v62 + 44))
    goto LABEL_69;
LABEL_70:
  *(_QWORD *)(*(_QWORD *)(v62 + 48) + 8 * v64) = 1;
  *(_DWORD *)(v62 + 40) = v65;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v68 = *(_QWORD *)(v16 + 48);
    v70 = *(unsigned int *)(v68 + 16);
    v69 = (unsigned int *)(v68 + 16);
    v71 = v70 + 1;
    if ((_DWORD)v70 != *(_DWORD *)(v68 + 20))
      goto LABEL_77;
LABEL_76:
    google::protobuf::RepeatedField<int>::Reserve(v69, v71);
    goto LABEL_77;
  }
  operations_research::sat::ConstraintProto::clear_constraint(v16);
  *(_DWORD *)(v16 + 60) = 12;
  v72 = *(_QWORD *)(v16 + 8);
  v73 = (google::protobuf::Arena *)(v72 & 0xFFFFFFFFFFFFFFFELL);
  if ((v72 & 1) != 0)
    v73 = *(google::protobuf::Arena **)v73;
  v68 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v73);
  *(_QWORD *)(v16 + 48) = v68;
  v70 = *(unsigned int *)(v68 + 16);
  v69 = (unsigned int *)(v68 + 16);
  v71 = v70 + 1;
  if ((_DWORD)v70 == *(_DWORD *)(v68 + 20))
    goto LABEL_76;
LABEL_77:
  *(_DWORD *)(*(_QWORD *)(v68 + 24) + 4 * v70) = (_DWORD)v9;
  *(_DWORD *)(v68 + 16) = v71;
  if (*(_DWORD *)(v16 + 60) == 12)
  {
    v74 = *(_QWORD *)(v16 + 48);
    v76 = *(unsigned int *)(v74 + 40);
    v75 = (unsigned int *)(v74 + 40);
    v77 = v76 + 1;
    if ((_DWORD)v76 != *(_DWORD *)(v74 + 44))
      goto LABEL_84;
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint(v16);
    *(_DWORD *)(v16 + 60) = 12;
    v78 = *(_QWORD *)(v16 + 8);
    v79 = (google::protobuf::Arena *)(v78 & 0xFFFFFFFFFFFFFFFELL);
    if ((v78 & 1) != 0)
      v79 = *(google::protobuf::Arena **)v79;
    v74 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v79);
    *(_QWORD *)(v16 + 48) = v74;
    v76 = *(unsigned int *)(v74 + 40);
    v75 = (unsigned int *)(v74 + 40);
    v77 = v76 + 1;
    if ((_DWORD)v76 != *(_DWORD *)(v74 + 44))
      goto LABEL_84;
  }
  google::protobuf::RepeatedField<long long>::Reserve(v75, v77);
LABEL_84:
  *(_QWORD *)(*(_QWORD *)(v74 + 48) + 8 * v76) = -1;
  *(_DWORD *)(v74 + 40) = v77;
  operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                               + 2));
  v80 = *((_QWORD *)this + 2);
  v94 = operator new(0x28uLL);
  *(_OWORD *)v95 = xmmword_22DCE6530;
  strcpy((char *)v94, "interval: unused, converted to linear");
  operations_research::sat::PresolveContext::UpdateRuleStats(v80, (uint64_t)&v94);
  if (SHIBYTE(v95[1]) < 0)
    operator delete(v94);
  operations_research::sat::ConstraintProto::Clear(a3);
  return 1;
}

void sub_22DAD1BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, void *__p, void *a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,char a21,void *a22,uint64_t a23,uint64_t a24,void *a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if ((a18 & 1) != 0)
  {
    operator delete(a19);
    if ((a21 & 1) == 0)
    {
LABEL_5:
      if ((a24 & 1) == 0)
LABEL_10:
        _Unwind_Resume(exception_object);
LABEL_9:
      operator delete(a25);
      goto LABEL_10;
    }
  }
  else if ((a21 & 1) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a22);
  if ((a24 & 1) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveElement(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  operations_research::sat::PresolveContext *v2;
  uint64_t v3;
  int v7;
  uint64_t *v8;
  const char *v9;
  unint64_t v10;
  uint64_t *v11;
  char v12;
  int *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  const char *v26;
  _BOOL4 IsEmpty;
  operations_research::sat::PresolveContext *v28;
  char v29;
  char v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t i;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int IsIncludedIn;
  uint64_t *v42;
  operations_research::sat::PresolveContext *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  google::protobuf::Arena *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  operations_research::sat::ConstraintProto *v71;
  _BOOL4 v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  operations_research::sat::ConstraintProto *v79;
  uint64_t *v80;
  _BYTE *v81;
  _BYTE *v82;
  operations_research::sat::PresolveContext *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  operations_research::sat::ConstraintProto *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  operations_research::sat::ConstraintProto *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t *v120;
  char *v121;
  char *v122;
  int64_t v123;
  int64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  uint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  _OWORD *v135;
  char *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  google::LogMessage *v141;
  _QWORD *v142;
  int *v143;
  unsigned int v144;
  int v145;
  unsigned int *v146;
  uint64_t *v147;
  unsigned int v148;
  int v149[2];
  void *v150[3];
  void *v151[3];
  BOOL v152;
  BOOL v153[8];
  __int128 v154;
  void *__p;
  void *v156[2];
  unint64_t v157;
  void *v158;
  void *v159;
  void *v160;
  unint64_t v161;
  void *v162[3];
  BOOL v163;
  unint64_t v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;

  v2 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (*((_BYTE *)v2 + 504))
    return 0;
  v7 = *((_DWORD *)a2 + 15);
  if (v7 == 14)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (!*((_DWORD *)a2 + 4))
      goto LABEL_8;
    return 0;
  }
  v8 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  if (*((_DWORD *)a2 + 4))
    return 0;
LABEL_8:
  v10 = *((unsigned int *)v8 + 9);
  v9 = (const char *)*((unsigned int *)v8 + 10);
  v165 = 0u;
  v166 = 0u;
  v164 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v167 = 0;
  v163 = 0;
  if (v7 == 14)
    v11 = (uint64_t *)*((_QWORD *)a2 + 6);
  else
    v11 = &operations_research::sat::_ElementConstraintProto_default_instance_;
  operations_research::Domain::Domain(v162, 0, *((int *)v11 + 4) - 1);
  v12 = operations_research::sat::PresolveContext::IntersectDomainWith(v2, (const char *)v10, (const operations_research::Domain *)v162, &v163);
  if (((uint64_t)v162[0] & 1) != 0)
    operator delete(v162[1]);
  if ((v12 & 1) == 0)
    goto LABEL_209;
  v162[0] = 0;
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10, (unint64_t *)&v159);
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v9, &v157);
  v148 = v10;
  v144 = v9;
  if ((v159 & 1) != 0)
    v13 = (int *)v160;
  else
    v13 = (int *)&v160;
  if ((unint64_t)v159 < 2)
  {
    v14 = 1;
    v145 = 1;
    goto LABEL_19;
  }
  v143 = &v13[4 * ((unint64_t)v159 >> 1)];
  v145 = 1;
  v14 = 1;
  v20 = *v13;
  v21 = *((_QWORD *)v13 + 1);
  if (v21 < v20)
  {
LABEL_28:
    while (1)
    {
      v13 += 4;
      if (v13 == v143)
        break;
      v20 = *v13;
      v21 = *((_QWORD *)v13 + 1);
      if (v21 >= v20)
        goto LABEL_30;
    }
LABEL_19:
    v15 = v9;
    if (v163)
    {
      v16 = *((_QWORD *)this + 2);
      __p = operator new(0x20uLL);
      *(_OWORD *)v156 = xmmword_22DCE7550;
      strcpy((char *)__p, "element: reduced index domain");
      operations_research::sat::PresolveContext::UpdateRuleStats(v16, (uint64_t)&__p);
      if (SHIBYTE(v156[1]) < 0)
        operator delete(__p);
    }
    v153[0] = 0;
    v17 = operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v9, (const operations_research::Domain *)v162, v153);
    v10 = v10;
    if ((v17 & 1) != 0)
    {
      if (v153[0])
      {
        v18 = *((_QWORD *)this + 2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "element: reduced target domain");
        operations_research::sat::PresolveContext::UpdateRuleStats(v18, (uint64_t)&__p);
        if (SHIBYTE(v156[1]) < 0)
          operator delete(__p);
      }
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    v3 = v17 ^ 1u;
    if ((v157 & 1) == 0)
      goto LABEL_75;
LABEL_69:
    operator delete(v158);
    if ((v159 & 1) == 0)
      goto LABEL_76;
LABEL_70:
    operator delete(v160);
    if (((uint64_t)v162[0] & 1) == 0)
      goto LABEL_77;
LABEL_71:
    operator delete(v162[1]);
    if (v19)
      goto LABEL_210;
LABEL_78:
    if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10))
    {
      if (*((_DWORD *)a2 + 15) == 14)
        v42 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v42 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      v45 = *(_DWORD *)(v42[3]
                      + 4
                      * (int)operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10));
      if (v45 == (_DWORD)v15)
      {
LABEL_124:
        v69 = *((_QWORD *)this + 2);
        HIBYTE(v162[2]) = 20;
        strcpy((char *)v162, "element: fixed index");
        operations_research::sat::PresolveContext::UpdateRuleStats(v69, (uint64_t)v162);
        if (SHIBYTE(v162[2]) < 0)
          operator delete(v162[0]);
LABEL_126:
        operations_research::sat::ConstraintProto::Clear(a2);
        goto LABEL_127;
      }
      v46 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
      v47 = *(int **)(v46 + 56);
      if (v47)
      {
        v48 = *(int *)(v46 + 48);
        v49 = *v47;
        if ((int)v48 < *v47)
        {
          *(_DWORD *)(v46 + 48) = v48 + 1;
          v50 = *(_QWORD *)&v47[2 * v48 + 2];
LABEL_106:
          if (*(_DWORD *)(v50 + 60) == 12)
          {
            v57 = *(_QWORD *)(v50 + 48);
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v50);
            *(_DWORD *)(v50 + 60) = 12;
            v58 = *(_QWORD *)(v50 + 8);
            v59 = (google::protobuf::Arena *)(v58 & 0xFFFFFFFFFFFFFFFELL);
            if ((v58 & 1) != 0)
              v59 = *(google::protobuf::Arena **)v59;
            v57 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v59);
            *(_QWORD *)(v50 + 48) = v57;
          }
          v60 = *(unsigned int *)(v57 + 16);
          v61 = v60 + 1;
          if ((_DWORD)v60 == *(_DWORD *)(v57 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v57 + 16), v60 + 1);
          *(_DWORD *)(*(_QWORD *)(v57 + 24) + 4 * v60) = v45;
          v62 = *(unsigned int *)(v57 + 40);
          *(_DWORD *)(v57 + 16) = v61;
          if ((_DWORD)v62 == *(_DWORD *)(v57 + 44))
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 40), v62 + 1);
            v61 = *(_DWORD *)(v57 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(v57 + 48) + 8 * v62) = -1;
          *(_DWORD *)(v57 + 40) = v62 + 1;
          if (v61 == *(_DWORD *)(v57 + 20))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v57 + 16), v61 + 1);
          *(_DWORD *)(*(_QWORD *)(v57 + 24) + 4 * v61) = v15;
          *(_DWORD *)(v57 + 16) = v61 + 1;
          v63 = *(unsigned int *)(v57 + 40);
          if ((_DWORD)v63 == *(_DWORD *)(v57 + 44))
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 40), v63 + 1);
          v64 = *(unsigned int *)(v57 + 64);
          *(_QWORD *)(*(_QWORD *)(v57 + 48) + 8 * v63) = 1;
          *(_DWORD *)(v57 + 40) = v63 + 1;
          v65 = *(_DWORD *)(v57 + 68);
          v66 = v64 + 1;
          if ((_DWORD)v64 == v65)
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 64), v64 + 1);
            v65 = *(_DWORD *)(v57 + 68);
          }
          v67 = *(_QWORD *)(v57 + 72);
          *(_QWORD *)(v67 + 8 * v64) = 0;
          *(_DWORD *)(v57 + 64) = v66;
          v68 = v64 + 2;
          if (v66 == v65)
          {
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v57 + 64), v68);
            v67 = *(_QWORD *)(v57 + 72);
          }
          *(_QWORD *)(v67 + 8 * v66) = 0;
          *(_DWORD *)(v57 + 64) = v68;
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                       + 2));
          goto LABEL_124;
        }
        if (v49 != *(_DWORD *)(v46 + 52))
        {
LABEL_105:
          *v47 = v49 + 1;
          v50 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v46 + 40));
          v55 = *(_QWORD *)(v46 + 56);
          v56 = *(int *)(v46 + 48);
          *(_DWORD *)(v46 + 48) = v56 + 1;
          *(_QWORD *)(v55 + 8 * v56 + 8) = v50;
          goto LABEL_106;
        }
      }
      else
      {
        v49 = *(_DWORD *)(v46 + 52);
      }
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v46 + 40), v49 + 1);
      v47 = *(int **)(v46 + 56);
      v49 = *v47;
      goto LABEL_105;
    }
    v43 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
    if ((v145 & (*((_QWORD *)&v165 + 1) == 1)) == 1)
    {
      if (!operations_research::sat::PresolveContext::IsFixed(v43, (const char *)v15))
      {
        v141 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v162, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 2276);
        v142 = (_QWORD *)google::LogMessage::stream(v141);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"Check failed: context_->IsFixed(target_ref) ", 44);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v162);
      }
      v44 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(v162, "element: one value array");
      operations_research::sat::PresolveContext::UpdateRuleStats(v44, (uint64_t)v162);
      if (SHIBYTE(v162[2]) < 0)
        operator delete(v162[0]);
      goto LABEL_126;
    }
    if (!operations_research::sat::PresolveContext::MinOf(v43, (const char *)v10)
      && ((operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10) == 1) & v145) == 1)
    {
      if (*((_DWORD *)a2 + 15) == 14)
        v51 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v51 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      v87 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)v51[3]);
      if (*((_DWORD *)a2 + 15) == 14)
        v88 = (uint64_t *)*((_QWORD *)a2 + 6);
      else
        v88 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      v89 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)(v88[3] + 4));
      v90 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
      v91 = operations_research::sat::ConstraintProto::mutable_linear(v90);
      v92 = v91;
      v93 = *(unsigned int *)(v91 + 16);
      v94 = (unsigned int *)(v91 + 16);
      v95 = v93 + 1;
      if ((_DWORD)v93 == *(_DWORD *)(v91 + 20))
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v91 + 16), v93 + 1);
      *(_DWORD *)(*(_QWORD *)(v92 + 24) + 4 * v93) = v144;
      v96 = *(unsigned int *)(v92 + 40);
      *(_DWORD *)(v92 + 16) = v95;
      if ((_DWORD)v96 == *(_DWORD *)(v92 + 44))
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v92 + 40), v96 + 1);
        v95 = *v94;
      }
      *(_QWORD *)(*(_QWORD *)(v92 + 48) + 8 * v96) = 1;
      *(_DWORD *)(v92 + 40) = v96 + 1;
      if (v95 == *(_DWORD *)(v92 + 20))
        google::protobuf::RepeatedField<int>::Reserve(v94, v95 + 1);
      *(_DWORD *)(*(_QWORD *)(v92 + 24) + 4 * v95) = v148;
      *(_DWORD *)(v92 + 16) = v95 + 1;
      v97 = *(unsigned int *)(v92 + 40);
      if ((_DWORD)v97 == *(_DWORD *)(v92 + 44))
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v92 + 40), v97 + 1);
      v98 = v87 - v89;
      v99 = *(unsigned int *)(v92 + 64);
      *(_QWORD *)(*(_QWORD *)(v92 + 48) + 8 * v97) = v98;
      *(_DWORD *)(v92 + 40) = v97 + 1;
      v100 = *(_DWORD *)(v92 + 68);
      v101 = v99 + 1;
      if ((_DWORD)v99 == v100)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v92 + 64), v99 + 1);
        v100 = *(_DWORD *)(v92 + 68);
      }
      v102 = *(_QWORD *)(v92 + 72);
      *(_QWORD *)(v102 + 8 * v99) = v87;
      *(_DWORD *)(v92 + 64) = v101;
      v103 = v99 + 2;
      if (v101 == v100)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v92 + 64), v103);
        v102 = *(_QWORD *)(v92 + 72);
      }
      *(_QWORD *)(v102 + 8 * v101) = v87;
      *(_DWORD *)(v92 + 64) = v103;
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
      v104 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(v162, "element: linearize constant element of size 2");
      operations_research::sat::PresolveContext::UpdateRuleStats(v104, (uint64_t)v162);
      if (SHIBYTE(v162[2]) < 0)
        operator delete(v162[0]);
      goto LABEL_126;
    }
    operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)this + 2), v10, (uint64_t)v162);
    if (LODWORD(v162[0]) == (_DWORD)v10)
    {
LABEL_96:
      v52 = v10;
      v3 = operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), v10)|| operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10);
      v70 = *((_QWORD *)this + 2);
      if ((v145 & v3) == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v159, "element: trivial target domain reduction");
        operations_research::sat::PresolveContext::UpdateRuleStats(v70, (uint64_t)&v159);
        if (SHIBYTE(v161) < 0)
          operator delete(v159);
        operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)this + 2), v10);
        v71 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 56));
        operations_research::sat::ConstraintProto::CopyFrom(v71, a2);
        operations_research::sat::ConstraintProto::Clear(a2);
        goto LABEL_127;
      }
      v72 = operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(*((operations_research::sat::PresolveContext **)this + 2), v15)|| operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v15);
      if ((v14 & v72) == 1)
      {
        v78 = *((_QWORD *)this + 2);
        std::string::basic_string[abi:ne180100]<0>(&v159, "element: trivial index domain reduction");
        operations_research::sat::PresolveContext::UpdateRuleStats(v78, (uint64_t)&v159);
        if (SHIBYTE(v161) < 0)
          operator delete(v159);
        operations_research::sat::PresolveContext::MarkVariableAsRemoved(*((operations_research::sat::PresolveContext **)this + 2), v15);
        v79 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 56));
        operations_research::sat::ConstraintProto::CopyFrom(v79, a2);
        operations_research::sat::ConstraintProto::Clear(a2);
        goto LABEL_127;
      }
      if ((_DWORD)v15 == (_DWORD)v10)
      {
        v159 = 0;
        v160 = 0;
        v161 = 0;
        operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10, &v157);
        if ((v157 & 1) != 0)
          v80 = (uint64_t *)v158;
        else
          v80 = (uint64_t *)&v158;
        if (v157 < 2)
        {
LABEL_150:
          v82 = v159;
          v81 = v160;
          if (operations_research::Domain::Size((operations_research::Domain *)&v157) <= (v81 - v82) >> 3)
            goto LABEL_156;
          v83 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
          std::vector<long long>::vector(v150, (uint64_t)&v159);
          operations_research::Domain::FromValues((int64_t **)v150, (unint64_t *)&__p);
          v84 = operations_research::sat::PresolveContext::IntersectDomainWith(v83, (const char *)v52, (const operations_research::Domain *)&__p, 0);
          if ((__p & 1) != 0)
            operator delete(v156[0]);
          if (v150[0])
          {
            v150[1] = v150[0];
            operator delete(v150[0]);
          }
          if ((v84 & 1) != 0)
          {
LABEL_156:
            v85 = *((_QWORD *)this + 2);
            std::string::basic_string[abi:ne180100]<0>(&__p, "element: reduce index domain when target equals index");
            operations_research::sat::PresolveContext::UpdateRuleStats(v85, (uint64_t)&__p);
            if (SHIBYTE(v156[1]) < 0)
              operator delete(__p);
          }
          if ((v157 & 1) != 0)
            operator delete(v158);
          if (v159)
          {
            v160 = v159;
            operator delete(v159);
          }
          goto LABEL_127;
        }
        v147 = &v80[2 * (v157 >> 1)];
        while (1)
        {
          v117 = *v80;
          if (*v80 <= v80[1])
            break;
LABEL_215:
          v80 += 2;
          if (v80 == v147)
            goto LABEL_150;
        }
        while (1)
        {
          v120 = &operations_research::sat::_ElementConstraintProto_default_instance_;
          if (*((_DWORD *)a2 + 15) == 14)
            v120 = (uint64_t *)*((_QWORD *)a2 + 6);
          v52 = v148;
          if (!operations_research::sat::PresolveContext::DomainContains(*((operations_research::sat::PresolveContext **)this + 2), *(_DWORD *)(v120[3] + 4 * (int)v117), v117))goto LABEL_220;
          v121 = (char *)v160;
          if ((unint64_t)v160 >= v161)
            break;
          *(_QWORD *)v160 = v117;
          v118 = v121 + 8;
LABEL_219:
          v160 = v118;
LABEL_220:
          if (v117++ >= v80[1])
            goto LABEL_215;
        }
        v122 = (char *)v159;
        v123 = (_BYTE *)v160 - (_BYTE *)v159;
        v124 = ((_BYTE *)v160 - (_BYTE *)v159) >> 3;
        v125 = v124 + 1;
        if ((unint64_t)(v124 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v126 = v161 - (_QWORD)v159;
        if ((uint64_t)(v161 - (_QWORD)v159) >> 2 > v125)
          v125 = v126 >> 2;
        if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v127 = v125;
        if (v127)
        {
          if (v127 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v128 = operator new(8 * v127);
        }
        else
        {
          v128 = 0;
        }
        v129 = (uint64_t *)&v128[8 * v124];
        *v129 = v117;
        v118 = v129 + 1;
        if (v121 == v122)
        {
          v52 = v148;
          goto LABEL_245;
        }
        v130 = v121 - 8 - v122;
        if (v130 >= 0x58)
        {
          v131 = v121 - &v128[v123];
          v52 = v148;
          if (v131 >= 0x20)
          {
            v132 = (v130 >> 3) + 1;
            v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
            v134 = &v121[-v133];
            v129 = (uint64_t *)((char *)v129 - v133);
            v135 = &v128[8 * v124 - 16];
            v136 = v121 - 16;
            v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v138 = *(_OWORD *)v136;
              *(v135 - 1) = *((_OWORD *)v136 - 1);
              *v135 = v138;
              v135 -= 2;
              v136 -= 32;
              v137 -= 4;
            }
            while (v137);
            v121 = v134;
            if (v132 == (v132 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_245:
              v159 = v129;
              v160 = v118;
              v161 = (unint64_t)&v128[8 * v127];
              if (v122)
                operator delete(v122);
              goto LABEL_219;
            }
          }
        }
        else
        {
          v52 = v148;
        }
        do
        {
          v139 = *((_QWORD *)v121 - 1);
          v121 -= 8;
          *--v129 = v139;
        }
        while (v121 != v122);
        goto LABEL_245;
      }
      if (v72
        && !operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v15))
      {
        v115 = *((_QWORD *)this + 2);
        std::string::basic_string[abi:ne180100]<0>(&v159, "TODO element: target not used elsewhere");
        operations_research::sat::PresolveContext::UpdateRuleStats(v115, (uint64_t)&v159);
        if (SHIBYTE(v161) < 0)
          operator delete(v159);
      }
      if (!(_DWORD)v3)
        goto LABEL_210;
      v116 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v159, "TODO element: index not used elsewhere");
      operations_research::sat::PresolveContext::UpdateRuleStats(v116, (uint64_t)&v159);
      if (SHIBYTE(v161) < 0)
        operator delete(v159);
LABEL_209:
      v3 = 0;
      goto LABEL_210;
    }
    operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)LODWORD(v162[0]), (unint64_t *)&v159);
    v53 = operations_research::Domain::Size((operations_research::Domain *)&v159);
    operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v10, &v157);
    v54 = operations_research::Domain::Size((operations_research::Domain *)&v157);
    if ((v157 & 1) != 0)
    {
      operator delete(v158);
      if ((v159 & 1) == 0)
      {
LABEL_100:
        if (v53 > v54)
          goto LABEL_127;
        goto LABEL_138;
      }
    }
    else if ((v159 & 1) == 0)
    {
      goto LABEL_100;
    }
    operator delete(v160);
    if (v53 > v54)
      goto LABEL_127;
LABEL_138:
    v73 = (const char *)LODWORD(v162[0]);
    v74 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)LODWORD(v162[0]));
    v75 = operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v73);
    v76 = v75;
    if (*((_DWORD *)a2 + 15) == 14)
      v77 = (uint64_t *)*((_QWORD *)a2 + 6);
    else
      v77 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    if (v74)
    {
      v86 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v159, "TODO element: representative has bad domain");
      operations_research::sat::PresolveContext::UpdateRuleStats(v86, (uint64_t)&v159);
      if (SHIBYTE(v161) < 0)
        operator delete(v159);
    }
    else if (((unint64_t)v162[2] & 0x8000000000000000) == 0)
    {
      v105 = *((_DWORD *)v77 + 4);
      if ((uint64_t)v162[2] < v105)
      {
        v106 = (uint64_t)v162[2] + (uint64_t)v162[1] * v75;
        if ((v106 & 0x8000000000000000) == 0 && v106 < v105)
        {
          v107 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
          v108 = operations_research::sat::ConstraintProto::mutable_element(v107);
          v109 = v108;
          if ((v76 & 0x8000000000000000) == 0)
          {
            v110 = 0;
            v146 = (unsigned int *)(v108 + 16);
            *(_QWORD *)v149 = v76 + 1;
            while (1)
            {
              v111 = (uint64_t)v162[2] + (uint64_t)v162[1] * v110;
              v159 = (void *)v111;
              LODWORD(__p) = 0;
              if (v111 < 0)
              {
                v157 = google::MakeCheckOpString<long long,int>((int)&v159, (int)&__p, "scaled_index >= 0");
                if (v157)
                  break;
              }
              v159 = (void *)v111;
              LODWORD(__p) = v105;
              if (v111 >= v105)
              {
                v157 = google::MakeCheckOpString<long long,int>((int)&v159, (int)&__p, "scaled_index < array_size");
                if (v157)
                {
                  google::LogMessageFatal::LogMessageFatal((unint64_t *)&v159, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 2326, (uint64_t **)&v157);
                  google::LogMessage::stream((google::LogMessage *)&v159);
LABEL_258:
                  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v159);
                }
              }
              v112 = &operations_research::sat::_ElementConstraintProto_default_instance_;
              if (*((_DWORD *)a2 + 15) == 14)
                v112 = (uint64_t *)*((_QWORD *)a2 + 6);
              v113 = *(_DWORD *)(v112[3] + 4 * (int)v111);
              v114 = *(unsigned int *)(v109 + 16);
              if ((_DWORD)v114 == *(_DWORD *)(v109 + 20))
                google::protobuf::RepeatedField<int>::Reserve(v146, v114 + 1);
              *(_DWORD *)(*(_QWORD *)(v109 + 24) + 4 * v114) = v113;
              *(_DWORD *)(v109 + 16) = v114 + 1;
              if (*(_QWORD *)v149 == ++v110)
                goto LABEL_247;
            }
            google::LogMessageFatal::LogMessageFatal((unint64_t *)&v159, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 2325, (uint64_t **)&v157);
            google::LogMessage::stream((google::LogMessage *)&v159);
            goto LABEL_258;
          }
LABEL_247:
          *(_DWORD *)(v109 + 36) = (_DWORD)v73;
          *(_DWORD *)(v109 + 40) = v144;
          v140 = *((_QWORD *)this + 2);
          if (v162[1] == (void *)1)
            std::string::basic_string[abi:ne180100]<0>(&v159, "element: shifed index ");
          else
            std::string::basic_string[abi:ne180100]<0>(&v159, "element: scaled index");
          operations_research::sat::PresolveContext::UpdateRuleStats(v140, (uint64_t)&v159);
          if (SHIBYTE(v161) < 0)
            operator delete(v159);
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                       + 2));
          operations_research::sat::ConstraintProto::Clear(a2);
LABEL_127:
          v3 = 1;
          if ((_QWORD)v166)
            goto LABEL_211;
          goto LABEL_212;
        }
      }
    }
    goto LABEL_96;
  }
  while (1)
  {
LABEL_30:
    LODWORD(__p) = v20;
    LODWORD(v151[0]) = 0;
    if (v20 < 0)
    {
      *(_QWORD *)v153 = google::MakeCheckOpString<int,int>((int)&__p, (int)v151, "value >= 0");
      if (*(_QWORD *)v153)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 2216, (uint64_t **)v153);
        google::LogMessage::stream((google::LogMessage *)&__p);
        goto LABEL_257;
      }
    }
    v22 = *((_DWORD *)a2 + 15);
    v23 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    if (v22 == 14)
      v23 = (uint64_t *)*((_QWORD *)a2 + 6);
    v24 = *((int *)v23 + 4);
    LODWORD(__p) = v20;
    LODWORD(v151[0]) = v24;
    if (v20 < v24)
    {
      v25 = &operations_research::sat::_ElementConstraintProto_default_instance_;
      if (v22 != 14)
        goto LABEL_36;
LABEL_35:
      v25 = (uint64_t *)*((_QWORD *)a2 + 6);
      goto LABEL_36;
    }
    *(_QWORD *)v153 = google::MakeCheckOpString<int,int>((int)&__p, (int)v151, "value < ct->element().vars_size()");
    if (*(_QWORD *)v153)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 2217, (uint64_t **)v153);
      google::LogMessage::stream((google::LogMessage *)&__p);
LABEL_257:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
    }
    v25 = &operations_research::sat::_ElementConstraintProto_default_instance_;
    if (*((_DWORD *)a2 + 15) == 14)
      goto LABEL_35;
LABEL_36:
    operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)(v25[3] + 4 * v20), (unint64_t *)&__p);
    operations_research::Domain::IntersectionWith(&__p, (const operations_research::Domain *)&v157, (unint64_t *)v153);
    IsEmpty = operations_research::Domain::IsEmpty((operations_research::Domain *)v153);
    if (v153[0])
      operator delete((void *)v154);
    if (IsEmpty)
    {
      v152 = 0;
      v28 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
      operations_research::Domain::Domain(v151, v20);
      operations_research::Domain::Complement((operations_research::Domain *)v151, (unint64_t *)v153);
      v29 = operations_research::sat::PresolveContext::IntersectDomainWith(v28, (const char *)v10, (const operations_research::Domain *)v153, &v152);
      if (v153[0])
      {
        operator delete((void *)v154);
        if (((uint64_t)v151[0] & 1) == 0)
        {
LABEL_41:
          if ((v29 & 1) != 0)
            goto LABEL_42;
LABEL_53:
          v30 = 0;
          goto LABEL_58;
        }
      }
      else if (((uint64_t)v151[0] & 1) == 0)
      {
        goto LABEL_41;
      }
      operator delete(v151[1]);
      if ((v29 & 1) != 0)
      {
LABEL_42:
        v30 = 1;
        v163 = 1;
        goto LABEL_58;
      }
      goto LABEL_53;
    }
    if (operations_research::Domain::IsFixed((operations_research::Domain *)&__p, v26))
    {
      v32 = operations_research::Domain::Min((operations_research::Domain *)&__p, v31);
      v33 = v32;
      v34 = 0;
      v35 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v32)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v32));
      for (i = (v35 >> 7) ^ (v164 >> 12); ; i = v34 + v37)
      {
        v37 = i & v166;
        v38 = *(_QWORD *)(v164 + v37);
        v39 = ((v38 ^ (0x101010101010101 * (v35 & 0x7F))) - 0x101010101010101) & ~(v38 ^ (0x101010101010101
                                                                                            * (v35 & 0x7F))) & 0x8080808080808080;
        if (v39)
          break;
LABEL_48:
        if ((v38 & (~v38 << 6) & 0x8080808080808080) != 0)
        {
          v40 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)&v164, v35);
          *(_QWORD *)(v165 + 8 * v40) = v33;
          goto LABEL_55;
        }
        v34 += 8;
      }
      while (*(_QWORD *)(v165 + 8 * ((v37 + (__clz(__rbit64(v39)) >> 3)) & v166)) != v32)
      {
        v39 &= v39 - 1;
        if (!v39)
          goto LABEL_48;
      }
    }
    else
    {
      v145 = 0;
    }
LABEL_55:
    IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&__p, (const operations_research::Domain *)&v157);
    operations_research::Domain::UnionWith((operations_research::Domain *)v162, (const operations_research::Domain *)&__p, (unint64_t *)v153);
    if (((uint64_t)v162[0] & 1) != 0)
      operator delete(v162[1]);
    v14 &= IsIncludedIn;
    v162[0] = *(void **)v153;
    *(_OWORD *)&v162[1] = v154;
    v30 = 1;
LABEL_58:
    if ((__p & 1) != 0)
      operator delete(v156[0]);
    if ((v30 & 1) == 0)
      break;
    if (v21 < ++v20)
      goto LABEL_28;
  }
  v3 = 0;
  v19 = 1;
  v15 = v144;
  v10 = v10;
  if ((v157 & 1) != 0)
    goto LABEL_69;
LABEL_75:
  if ((v159 & 1) != 0)
    goto LABEL_70;
LABEL_76:
  if (((uint64_t)v162[0] & 1) != 0)
    goto LABEL_71;
LABEL_77:
  if (!v19)
    goto LABEL_78;
LABEL_210:
  if ((_QWORD)v166)
  {
LABEL_211:
    operator delete((void *)v164);
    v164 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v167 = 0;
    *(_QWORD *)&v166 = 0;
    v165 = 0uLL;
  }
LABEL_212:
  if (*((_QWORD *)&v166 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v166 + 1));
  return v3;
}

void sub_22DAD2F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a30);
}

void sub_22DAD2F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a30);
}

void sub_22DAD2F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,void *a24,void *a25,int a26,__int16 a27,char a28,char a29,char a30,void *a31,uint64_t a32,void *__p,void *a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~flat_hash_set(v38 - 144);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::ConstraintProto::mutable_element(operations_research::sat::ConstraintProto *this)
{
  uint64_t result;
  uint64_t v3;
  google::protobuf::Arena **v4;

  if (*((_DWORD *)this + 15) == 14)
    return *((_QWORD *)this + 6);
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 14;
  v3 = *((_QWORD *)this + 1);
  v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) != 0)
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>(*v4);
  else
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ElementConstraintProto>((google::protobuf::Arena *)v4);
  *((_QWORD *)this + 6) = result;
  return result;
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_22DAD3378(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveTable(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v2;
  char v4;
  operations_research::sat::CpModelPresolver *v6;
  uint64_t *v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int *v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t j;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  void **v36;
  uint64_t *v37;
  int v38;
  void **v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t k;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  char *v56;
  BOOL v57;
  char **v58;
  char *v59;
  int64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  operations_research::sat::PresolveContext **v74;
  unint64_t v75;
  char **v76;
  char **v77;
  uint64_t v78;
  uint64_t v79;
  google::protobuf::Arena *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  google::protobuf::Arena *v89;
  char **v90;
  uint64_t v91;
  uint64_t v92;
  void **v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  google::protobuf::Arena *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  int v103;
  unint64_t v104;
  char **v105;
  uint64_t *v106;
  _QWORD *v107;
  unint64_t v108;
  operations_research::sat::PresolveContext *v109;
  char v110;
  uint64_t v111;
  double v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  char **v120;
  uint64_t *v121;
  char *v122;
  unint64_t v123;
  char *v124;
  size_t v125;
  char *v126;
  int v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  char **v140;
  char **v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  google::protobuf::Arena *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t *v153;
  unint64_t *v154;
  _QWORD *v155;
  char **v156;
  char **v157;
  char *v158;
  char **v159;
  char *v160;
  char *v161;
  char v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  operations_research::sat::PresolveContext **v167;
  void *v168[2];
  char v169;
  char **v170;
  char **v171;
  void *v172[3];
  void *v173[3];
  BOOL v174;
  void *__p[4];
  void *v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  void **v180;
  char *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t *v184;
  char **v185;
  char **v186;
  unint64_t v187;
  char *v188;
  char *v189;
  char *v190;

  v2 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v2 + 504) || *((_DWORD *)a2 + 4))
  {
    v4 = 0;
    return v4 & 1;
  }
  v6 = this;
  if (*((_DWORD *)a2 + 15) == 16)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    v8 = *((_DWORD *)v7 + 4);
    if (v8)
      goto LABEL_7;
LABEL_58:
    v176 = operator new(0x19uLL);
    v177 = xmmword_22DCE63A0;
    strcpy((char *)v176, "table: empty constraint");
    operations_research::sat::PresolveContext::UpdateRuleStats(v2, (uint64_t)&v176);
    if (SHIBYTE(v177) < 0)
      operator delete(v176);
    operations_research::sat::ConstraintProto::Clear(a2);
    v4 = 1;
    return v4 & 1;
  }
  v7 = &operations_research::sat::_TableConstraintProto_default_instance_;
  v8 = qword_25408ABC8;
  if (!(_DWORD)qword_25408ABC8)
    goto LABEL_58;
LABEL_7:
  v9 = *((_DWORD *)v7 + 10);
  v188 = 0;
  v189 = 0;
  v190 = 0;
  if (v8 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v10 = v8;
  v188 = (char *)operator new(8 * v8);
  v190 = &v188[8 * v8];
  bzero(v188, 8 * v8);
  v189 = v190;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v165 = (v9 / v8);
  std::vector<std::vector<long long>>::reserve((uint64_t)&v185, (int)v165);
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(&v183, v8);
  v164 = 8 * v8;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v177 = 0u;
  v178 = 0u;
  v176 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v179 = 0;
  v11 = &operations_research::sat::_TableConstraintProto_default_instance_;
  if (*((_DWORD *)a2 + 15) == 16)
    v11 = (uint64_t *)*((_QWORD *)a2 + 6);
  v12 = *((int *)v11 + 4);
  v167 = (operations_research::sat::PresolveContext **)v6;
  v163 = v8;
  if (!(_DWORD)v12)
    goto LABEL_34;
  v13 = (int *)v11[3];
  v14 = &v13[v12];
  do
  {
LABEL_18:
    while (1)
    {
      v21 = 0;
      v22 = ~*v13 <= *v13 ? *v13 : ~*v13;
      v23 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v22)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v22));
      v19 = (v23 >> 7) ^ ((unint64_t)v176 >> 12);
      v24 = 0x101010101010101 * (v23 & 0x7F);
      for (i = v19; ; i = v21 + v26)
      {
        v26 = i & v178;
        v27 = *(_QWORD *)((char *)v176 + v26);
        v28 = ((v27 ^ v24) - 0x101010101010101) & ~(v27 ^ v24) & 0x8080808080808080;
        if (v28)
          break;
LABEL_25:
        if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0)
        {
LABEL_28:
          for (j = 0; ; v19 = j + v15)
          {
            v15 = v19 & v178;
            v16 = *(_QWORD *)((char *)v176 + v15);
            v17 = ((v16 ^ v24) - 0x101010101010101) & ~(v16 ^ v24) & 0x8080808080808080;
            if (v17)
            {
              while (*(_DWORD *)(v177 + 4 * ((v15 + (__clz(__rbit64(v17)) >> 3)) & v178)) != v22)
              {
                v17 &= v17 - 1;
                if (!v17)
                  goto LABEL_15;
              }
              goto LABEL_30;
            }
LABEL_15:
            if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
              break;
            j += 8;
          }
          v20 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v176, v23);
          *(_DWORD *)(v177 + 4 * v20) = v22;
          if (++v13 == v14)
            goto LABEL_33;
          goto LABEL_18;
        }
        v21 += 8;
      }
      while (1)
      {
        v29 = (v26 + (__clz(__rbit64(v28)) >> 3)) & v178;
        if (*(_DWORD *)(v177 + 4 * v29) == v22)
          break;
        v28 &= v28 - 1;
        if (!v28)
          goto LABEL_25;
      }
      if (v29 == (_QWORD)v178)
        goto LABEL_28;
      v30 = *((_QWORD *)v6 + 2);
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_22DCE6550;
      strcpy((char *)__p[0], "TODO table: duplicate variables");
      operations_research::sat::PresolveContext::UpdateRuleStats(v30, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        break;
LABEL_30:
      if (++v13 == v14)
        goto LABEL_33;
    }
    operator delete(__p[0]);
    ++v13;
  }
  while (v13 != v14);
LABEL_33:
  v10 = v8;
  if (v8 >= 1)
  {
LABEL_34:
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = v10;
    while (1)
    {
      v37 = &operations_research::sat::_TableConstraintProto_default_instance_;
      if (*((_DWORD *)a2 + 15) == 16)
        v37 = (uint64_t *)*((_QWORD *)a2 + 6);
      v38 = *(_DWORD *)(v37[3] + 4 * v32);
      operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)v6 + 2), v38, (uint64_t)__p);
      if ((unint64_t)v31 < v182)
      {
        v35 = *(_OWORD *)__p;
        v31[2] = __p[2];
        *(_OWORD *)v31 = v35;
        v36 = v31 + 3;
        v6 = (operations_research::sat::CpModelPresolver *)v167;
      }
      else
      {
        v39 = v180;
        v40 = 0xAAAAAAAAAAAAAAABLL * (v31 - v180) + 1;
        if (v40 > 0xAAAAAAAAAAAAAAALL)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v182 - (_QWORD)v180) >> 3) > v40)
          v40 = 0x5555555555555556 * ((uint64_t)(v182 - (_QWORD)v180) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v182 - (_QWORD)v180) >> 3) >= 0x555555555555555)
          v41 = 0xAAAAAAAAAAAAAAALL;
        else
          v41 = v40;
        if (v41)
        {
          if (v41 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v42 = (char *)operator new(24 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[8 * (v31 - v39)];
        *(_OWORD *)v43 = *(_OWORD *)__p;
        *((void **)v43 + 2) = __p[2];
        v44 = v43;
        if (v31 != v39)
        {
          v6 = (operations_research::sat::CpModelPresolver *)v167;
          do
          {
            v45 = *(_OWORD *)(v31 - 3);
            *((_QWORD *)v44 - 1) = *(v31 - 1);
            *(_OWORD *)(v44 - 24) = v45;
            v44 -= 24;
            v31 -= 3;
          }
          while (v31 != v39);
          v31 = v180;
          v46 = &v42[24 * v41];
          v36 = (void **)(v43 + 24);
          v180 = (void **)v44;
          v181 = v43 + 24;
          v182 = (unint64_t)v46;
          if (!v31)
            goto LABEL_36;
LABEL_56:
          operator delete(v31);
          goto LABEL_36;
        }
        v6 = (operations_research::sat::CpModelPresolver *)v167;
        v47 = &v42[24 * v41];
        v36 = (void **)(v43 + 24);
        v180 = (void **)&v42[8 * (v31 - v39)];
        v181 = v43 + 24;
        v182 = (unint64_t)v47;
        if (v31)
          goto LABEL_56;
      }
LABEL_36:
      v181 = (char *)v36;
      v33 |= LODWORD(__p[0]) != v38;
      ++v32;
      v31 = v36;
      if (v32 == v34)
      {
        v162 = v33;
        v166 = 1;
        if ((int)v165 < 1)
          goto LABEL_91;
        goto LABEL_64;
      }
    }
  }
  v166 = 0;
  v162 = 0;
  if ((int)v165 < 1)
    goto LABEL_91;
LABEL_64:
  v48 = 0;
  for (k = 0; k != v165; ++k)
  {
    if (v166)
    {
      v50 = 0;
      v51 = 0;
      while (1)
      {
        v52 = &operations_research::sat::_TableConstraintProto_default_instance_;
        if (*((_DWORD *)a2 + 15) == 16)
          v52 = (uint64_t *)*((_QWORD *)a2 + 6);
        v53 = *(_QWORD *)(v52[6] + v48 + 8 * v51);
        v54 = v180[v50];
        if (v54 != *(_DWORD *)(v52[3] + 4 * v51))
        {
          v55 = (uint64_t)v180[v50 + 1];
          v56 = (char *)v180[v50 + 2];
          v57 = &v56[(v53 - (uint64_t)v56) / v55 * v55] == (char *)v53;
          v53 = (v53 - (uint64_t)v56) / v55;
          if (!v57)
            break;
        }
        *(_QWORD *)&v188[8 * v51] = v53;
        if (!operations_research::sat::PresolveContext::DomainContains(v167[2], v54, v53))
          break;
        ++v51;
        v50 += 3;
        if (v163 == v51)
          goto LABEL_75;
      }
    }
    else
    {
LABEL_75:
      v58 = v186;
      if ((unint64_t)v186 >= v187)
      {
        v63 = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>((char **)&v185, (uint64_t)&v188);
      }
      else
      {
        *v186 = 0;
        v58[1] = 0;
        v58[2] = 0;
        v59 = v188;
        v60 = v189 - v188;
        if (v189 != v188)
        {
          if (v60 < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v61 = (char *)operator new(v189 - v188);
          *v58 = v61;
          v58[1] = v61;
          v62 = &v61[8 * (v60 >> 3)];
          v58[2] = v62;
          memcpy(v61, v59, v60);
          v58[1] = v62;
        }
        v63 = (char *)(v58 + 3);
      }
      v186 = (char **)v63;
      if (v166)
      {
        v64 = 0;
        do
        {
          v68 = 0;
          v70 = *(_QWORD *)&v188[8 * v64];
          v71 = &v183[6 * v64];
          v72 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v70)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v70));
          v69 = (v72 >> 7) ^ (*v71 >> 12);
          v73 = v71[3];
          while (1)
          {
            v65 = v69 & v73;
            v66 = *(_QWORD *)(*v71 + v65);
            v67 = ((v66 ^ (0x101010101010101 * (v72 & 0x7F))) - 0x101010101010101) & ~(v66 ^ (0x101010101010101
                                                                                                * (v72 & 0x7F))) & 0x8080808080808080;
            if (v67)
              break;
LABEL_86:
            if ((v66 & (~v66 << 6) & 0x8080808080808080) != 0)
            {
              *(_QWORD *)(v71[1]
                        + 8
                        * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)&v183[6 * v64], v72)) = v70;
              goto LABEL_89;
            }
            v68 += 8;
            v69 = v68 + v65;
          }
          while (*(_QWORD *)(v71[1] + 8 * ((v65 + (__clz(__rbit64(v67)) >> 3)) & v73)) != v70)
          {
            v67 &= v67 - 1;
            if (!v67)
              goto LABEL_86;
          }
LABEL_89:
          ++v64;
        }
        while (v64 != v163);
      }
    }
    v48 += v164;
  }
LABEL_91:
  gtl::STLSortAndRemoveDuplicates<std::vector<std::vector<long long>>>((const void ***)&v185);
  v74 = v167;
  v4 = v162;
  v75 = v163;
  v77 = v185;
  v76 = v186;
  if (!((0xAAAAAAAAAAAAAAABLL * (v186 - v185) < (int)v165) | v162 & 1))
    goto LABEL_116;
  if (*((_DWORD *)a2 + 15) == 16)
  {
    v78 = *((_QWORD *)a2 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 16;
    v79 = *((_QWORD *)a2 + 1);
    v80 = (google::protobuf::Arena *)(v79 & 0xFFFFFFFFFFFFFFFELL);
    if ((v79 & 1) != 0)
      v80 = *(google::protobuf::Arena **)v80;
    v78 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v80);
    *((_QWORD *)a2 + 6) = v78;
    v77 = v185;
    v76 = v186;
  }
  *(_DWORD *)(v78 + 40) = 0;
  if (v77 == v76)
  {
    v90 = v76;
    goto LABEL_113;
  }
  while (2)
  {
    v81 = *v77;
    v82 = v77[1];
    while (v81 != v82)
    {
      v83 = *(_QWORD *)v81;
      if (*((_DWORD *)a2 + 15) == 16)
      {
        v84 = *((_QWORD *)a2 + 6);
        v86 = *(unsigned int *)(v84 + 40);
        v85 = (unsigned int *)(v84 + 40);
        v87 = v86 + 1;
        if ((_DWORD)v86 == *(_DWORD *)(v84 + 44))
          goto LABEL_101;
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 16;
        v88 = *((_QWORD *)a2 + 1);
        v89 = (google::protobuf::Arena *)(v88 & 0xFFFFFFFFFFFFFFFELL);
        if ((v88 & 1) != 0)
          v89 = *(google::protobuf::Arena **)v89;
        v84 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v89);
        *((_QWORD *)a2 + 6) = v84;
        v86 = *(unsigned int *)(v84 + 40);
        v85 = (unsigned int *)(v84 + 40);
        v87 = v86 + 1;
        if ((_DWORD)v86 == *(_DWORD *)(v84 + 44))
LABEL_101:
          google::protobuf::RepeatedField<long long>::Reserve(v85, v87);
      }
      *(_QWORD *)(*(_QWORD *)(v84 + 48) + 8 * v86) = v83;
      *(_DWORD *)(v84 + 40) = v87;
      v81 += 8;
    }
    v77 += 3;
    if (v77 != v76)
      continue;
    break;
  }
  v76 = v185;
  v90 = v186;
  v74 = v167;
  v4 = v162;
  v75 = v163;
LABEL_113:
  if (0xAAAAAAAAAAAAAAABLL * (v90 - v76) < (int)v165)
  {
    v91 = (uint64_t)v74[2];
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "table: removed rows");
    operations_research::sat::PresolveContext::UpdateRuleStats(v91, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
LABEL_116:
  if ((v4 & 1) != 0)
  {
    if (v166)
    {
      v92 = 0;
      v93 = v180;
      do
      {
        v94 = *(_DWORD *)v93;
        if (*((_DWORD *)a2 + 15) == 16)
        {
          v95 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 24);
          if (v94 == *(_DWORD *)(v95 + 4 * v92))
            goto LABEL_120;
        }
        else
        {
          if (v94 == *(_DWORD *)(qword_25408ABD0 + 4 * v92))
            goto LABEL_120;
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 16;
          v96 = *((_QWORD *)a2 + 1);
          v97 = (google::protobuf::Arena *)(v96 & 0xFFFFFFFFFFFFFFFELL);
          if ((v96 & 1) != 0)
            v97 = *(google::protobuf::Arena **)v97;
          v98 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v97);
          *((_QWORD *)a2 + 6) = v98;
          v94 = *(_DWORD *)v93;
          v95 = *(_QWORD *)(v98 + 24);
        }
        *(_DWORD *)(v95 + 4 * v92) = v94;
LABEL_120:
        ++v92;
        v93 += 3;
      }
      while (v75 != v92);
    }
    v99 = (uint64_t)v74[2];
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_22DCE5C70;
    strcpy((char *)__p[0], "table: replace variable by canonical affine one");
    operations_research::sat::PresolveContext::UpdateRuleStats(v99, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  if (*((_DWORD *)a2 + 15) == 16)
  {
    if (*(_BYTE *)(*((_QWORD *)a2 + 6) + 60))
      goto LABEL_209;
  }
  else if (byte_25408ABF4)
  {
    goto LABEL_209;
  }
  v174 = 0;
  if (v166)
  {
    v100 = 0;
    v101 = v75;
    do
    {
      v102 = &operations_research::sat::_TableConstraintProto_default_instance_;
      if (*((_DWORD *)a2 + 15) == 16)
        v102 = (uint64_t *)*((_QWORD *)a2 + 6);
      v103 = *(_DWORD *)(v102[3] + 4 * v100);
      if (~v103 <= v103)
        v104 = v103;
      else
        v104 = ~v103;
      v105 = (char **)&v183[6 * v100];
      v106 = (uint64_t *)v105[1];
      v107 = *v105;
      if (**v105 <= -2)
      {
        do
        {
          v108 = (__clz(__rbit64(((*v107 >> 7) & ~*v107 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v107 = (_QWORD *)((char *)v107 + v108);
          v106 += v108;
        }
        while (*(char *)v107 < -1);
      }
      v109 = v74[2];
      std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,0>(v173, v107, v106, &v105[3][(_QWORD)*v105]);
      operations_research::Domain::FromValues((int64_t **)v173, (unint64_t *)__p);
      v110 = operations_research::sat::PresolveContext::IntersectDomainWith(v109, (const char *)v104, (const operations_research::Domain *)__p, &v174);
      if (((uint64_t)__p[0] & 1) != 0)
        operator delete(__p[1]);
      if (v173[0])
      {
        v173[1] = v173[0];
        operator delete(v173[0]);
      }
      if ((v110 & 1) == 0)
      {
        v4 = 1;
        goto LABEL_209;
      }
      ++v100;
    }
    while (v100 != v75);
    v75 = v163;
    if (v174)
    {
      v111 = (uint64_t)v74[2];
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_22DCE6550;
      strcpy((char *)__p[0], "table: reduced variable domains");
      operations_research::sat::PresolveContext::UpdateRuleStats(v111, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    if ((_DWORD)v163 != 1)
    {
      v112 = 1.0;
      v113 = v183 + 2;
      do
      {
        v114 = *v113;
        v113 += 6;
        v112 = v112 * (double)v114;
        --v101;
      }
      while (v101);
      goto LABEL_160;
    }
LABEL_157:
    v115 = (uint64_t)v74[2];
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_22DCE63A0;
    strcpy((char *)__p[0], "table: only one column!");
    operations_research::sat::PresolveContext::UpdateRuleStats(v115, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    goto LABEL_163;
  }
  v112 = 1.0;
  if ((_DWORD)v75 == 1)
    goto LABEL_157;
LABEL_160:
  v116 = (double)(0xAAAAAAAAAAAAAAABLL * (v186 - v185));
  if (v112 == v116)
  {
    v117 = (uint64_t)v74[2];
    std::string::basic_string[abi:ne180100]<0>(__p, "table: all tuples!");
    operations_research::sat::PresolveContext::UpdateRuleStats(v117, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
LABEL_163:
    operations_research::sat::ConstraintProto::Clear(a2);
    v4 = 1;
    goto LABEL_209;
  }
  if (v112 * 0.7 >= v116)
    goto LABEL_209;
  std::vector<std::vector<long long>>::vector(__p, v75);
  if (v166)
  {
    v119 = 0;
    do
    {
      v120 = (char **)&v183[6 * v119];
      v121 = (uint64_t *)v120[1];
      v122 = *v120;
      if (**v120 <= -2)
      {
        do
        {
          v123 = (__clz(__rbit64(((*(_QWORD *)v122 >> 7) & ~*(_QWORD *)v122 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v122 += v123;
          v121 += v123;
        }
        while (*v122 < -1);
      }
      v124 = &v120[3][(_QWORD)*v120];
      if (v122 == v124)
      {
        v125 = 0;
      }
      else
      {
        v125 = 0;
        v126 = v122;
        do
        {
          v127 = *++v126;
          if (v127 <= -2)
          {
            do
              v126 += (__clz(__rbit64(((*(_QWORD *)v126 >> 7) & ~*(_QWORD *)v126 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            while (*v126 < -1);
          }
          ++v125;
        }
        while (v126 != v124);
      }
      std::vector<long long>::__assign_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator>((uint64_t)__p[0] + 24 * v119++, v122, v121, v124, v118, v125);
    }
    while (v119 != v75);
  }
  std::vector<std::vector<long long>>::vector(v172, (unint64_t)v112);
  if (v112 > 0.0)
  {
    v128 = 0;
    do
    {
      v129 = (char *)v172[0] + 24 * v128;
      v130 = (uint64_t)(v129[1] - *v129) >> 3;
      if (v75 <= v130)
      {
        if (v75 < v130)
          v129[1] = *v129 + 8 * v75;
      }
      else
      {
        std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)v129, v75 - v130);
      }
      if (v166)
      {
        v131 = (_QWORD *)*((_QWORD *)v172[0] + 3 * v128);
        v132 = (char *)__p[0] + 8;
        v133 = v75;
        LODWORD(v134) = v128;
        do
        {
          v135 = (int)v134;
          v136 = *(v132 - 1);
          v137 = (*v132 - v136) >> 3;
          v134 = (int)v134 / v137;
          *v131++ = *(_QWORD *)(v136 + 8 * (v135 - v134 * v137));
          v132 += 3;
          --v133;
        }
        while (v133);
      }
      ++v128;
    }
    while (v112 > (double)(int)v128);
  }
  gtl::STLSortAndRemoveDuplicates<std::vector<std::vector<long long>>>((const void ***)v172);
  std::vector<std::vector<long long>>::vector(&v170, (unint64_t)(v112 - (double)(0xAAAAAAAAAAAAAAABLL * (v186 - v185))));
  std::set_difference[abi:ne180100]<std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>>((char **)v172[0], (char **)v172[1], v185, v186, v170);
  v138 = operations_research::sat::ConstraintProto::mutable_table(a2);
  if (*((_DWORD *)a2 + 15) == 16)
    v139 = (uint64_t *)*((_QWORD *)a2 + 6);
  else
    v139 = &operations_research::sat::_TableConstraintProto_default_instance_;
  *(_BYTE *)(v138 + 60) = *((_BYTE *)v139 + 60) ^ 1;
  *(_DWORD *)(operations_research::sat::ConstraintProto::mutable_table(a2) + 40) = 0;
  v140 = v170;
  v141 = v171;
  if (v170 == v171)
    goto LABEL_206;
  while (2)
  {
    v142 = *v140;
    v143 = v140[1];
    while (v142 != v143)
    {
      v144 = *(_QWORD *)v142;
      if (*((_DWORD *)a2 + 15) == 16)
      {
        v145 = *((_QWORD *)a2 + 6);
        v147 = *(unsigned int *)(v145 + 40);
        v146 = (unsigned int *)(v145 + 40);
        v148 = v147 + 1;
        if ((_DWORD)v147 == *(_DWORD *)(v145 + 44))
          goto LABEL_196;
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 16;
        v149 = *((_QWORD *)a2 + 1);
        v150 = (google::protobuf::Arena *)(v149 & 0xFFFFFFFFFFFFFFFELL);
        if ((v149 & 1) != 0)
          v150 = *(google::protobuf::Arena **)v150;
        v145 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(v150);
        *((_QWORD *)a2 + 6) = v145;
        v147 = *(unsigned int *)(v145 + 40);
        v146 = (unsigned int *)(v145 + 40);
        v148 = v147 + 1;
        if ((_DWORD)v147 == *(_DWORD *)(v145 + 44))
LABEL_196:
          google::protobuf::RepeatedField<long long>::Reserve(v146, v148);
      }
      *(_QWORD *)(*(_QWORD *)(v145 + 48) + 8 * v147) = v144;
      *(_DWORD *)(v145 + 40) = v148;
      v142 += 8;
    }
    v140 += 3;
    if (v140 != v141)
      continue;
    break;
  }
LABEL_206:
  v151 = (uint64_t)v167[2];
  std::string::basic_string[abi:ne180100]<0>(v168, "table: negated");
  operations_research::sat::PresolveContext::UpdateRuleStats(v151, (uint64_t)v168);
  v4 = v162;
  if (v169 < 0)
    operator delete(v168[0]);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)&v170);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v172);
  std::vector<std::vector<int>>::~vector[abi:ne180100](__p);
LABEL_209:
  if ((_QWORD)v178)
  {
    operator delete(v176);
    v176 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v179 = 0;
    *(_QWORD *)&v178 = 0;
    v177 = 0uLL;
  }
  if (*((_QWORD *)&v178 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v178 + 1));
  if (v180)
    operator delete(v180);
  v152 = v183;
  if (v183)
  {
    v153 = v184;
    v154 = v183;
    if (v184 != v183)
    {
      do
      {
        if (*(v153 - 3))
        {
          operator delete((void *)*(v153 - 6));
          *(v153 - 1) = 0;
          *(v153 - 6) = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v153 - 5) = 0;
          *(v153 - 4) = 0;
          *(v153 - 3) = 0;
        }
        v155 = (_QWORD *)*(v153 - 2);
        if (v155)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v155);
        v153 -= 6;
      }
      while (v153 != v152);
      v154 = v183;
    }
    v184 = v152;
    operator delete(v154);
  }
  v156 = v185;
  if (v185)
  {
    v157 = v186;
    v158 = (char *)v185;
    if (v186 != v185)
    {
      v159 = v186;
      do
      {
        v161 = *(v159 - 3);
        v159 -= 3;
        v160 = v161;
        if (v161)
        {
          *(v157 - 2) = v160;
          operator delete(v160);
        }
        v157 = v159;
      }
      while (v159 != v156);
      v158 = (char *)v185;
    }
    v186 = v156;
    operator delete(v158);
  }
  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
  return v4 & 1;
}

void sub_22DAD4530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  void *v48;
  void *v49;

  if (a23 < 0)
    operator delete(__p);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a24);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a27);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a34);
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set((uint64_t)&a41);
  v48 = *(void **)(v46 - 208);
  if (v48)
  {
    *(_QWORD *)(v46 - 200) = v48;
    operator delete(v48);
  }
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100]((void **)(v46 - 184));
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v46 - 160));
  v49 = *(void **)(v46 - 136);
  if (v49)
  {
    *(_QWORD *)(v46 - 128) = v49;
    operator delete(v49);
  }
  _Unwind_Resume(a1);
}

void gtl::STLSortAndRemoveDuplicates<std::vector<std::vector<long long>>>(const void ***a1)
{
  const void **v2;
  char **v3;
  unint64_t v4;
  uint64_t v5;
  const void **v6;
  const void **v7;
  const void **v8;
  const void **v9;
  void *v10;
  void *v11;
  char v12;

  v2 = *a1;
  v3 = (char **)a1[1];
  v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v2) >> 3));
  if (v3 == (char **)v2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *,false>((uint64_t)v2, v3, (uint64_t)&v12, v5, 1);
  v6 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>,std::__equal_to &>(*a1, a1[1]);
  v7 = a1[1];
  if (v7 != v6)
  {
    v8 = v6;
    v9 = a1[1];
    do
    {
      v11 = (void *)*(v9 - 3);
      v9 -= 3;
      v10 = v11;
      if (v11)
      {
        *(v7 - 2) = v10;
        operator delete(v10);
      }
      v7 = v9;
    }
    while (v9 != v8);
    a1[1] = v8;
  }
}

uint64_t operations_research::sat::ConstraintProto::mutable_table(operations_research::sat::ConstraintProto *this)
{
  uint64_t result;
  uint64_t v3;
  google::protobuf::Arena **v4;

  if (*((_DWORD *)this + 15) == 16)
    return *((_QWORD *)this + 6);
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 16;
  v3 = *((_QWORD *)this + 1);
  v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) != 0)
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>(*v4);
  else
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::TableConstraintProto>((google::protobuf::Arena *)v4);
  *((_QWORD *)this + 6) = result;
  return result;
}

uint64_t std::set_difference[abi:ne180100]<std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>>(char **a1, char **a2, char **a3, char **a4, char **a5)
{
  uint64_t v5;
  char **v7;
  char **v8;
  char **v9;
  char **v10;
  char **v11;

  v10 = a2;
  v11 = a1;
  v8 = a4;
  v9 = a3;
  v7 = a5;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &>(&v11, &v10, &v9, &v8, &v7);
  return v5;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveAllDiff(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t IsUnsat;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::Arena *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  operations_research::sat::PresolveContext *v19;
  const char *v20;
  char v21;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int *v41;
  int *v42;
  unint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  char *v55;
  void *v56[3];
  void *v57;
  void *v58[2];
  void *__p;
  __int128 v60;

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504) || *((_DWORD *)a2 + 4))
    return 0;
  if (*((_DWORD *)a2 + 15) == 13)
  {
    v6 = *((_QWORD *)a2 + 6);
    v7 = (unsigned int *)(v6 + 16);
    v8 = *(unsigned int *)(v6 + 16);
    if (*(_DWORD *)(v6 + 16) != 1)
      goto LABEL_7;
LABEL_12:
    v12 = *((_QWORD *)this + 2);
    __p = operator new(0x20uLL);
    v60 = xmmword_22DCE6520;
    strcpy((char *)__p, "all_diff: only one variable");
    operations_research::sat::PresolveContext::UpdateRuleStats(v12, (uint64_t)&__p);
    goto LABEL_13;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 13;
  v10 = *((_QWORD *)a2 + 1);
  v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if ((v10 & 1) != 0)
    v11 = *(google::protobuf::Arena **)v11;
  v6 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(v11);
  *((_QWORD *)a2 + 6) = v6;
  v7 = (unsigned int *)(v6 + 16);
  v8 = *(unsigned int *)(v6 + 16);
  if ((_DWORD)v8 == 1)
    goto LABEL_12;
LABEL_7:
  if (!(_DWORD)v8)
  {
    v9 = *((_QWORD *)this + 2);
    __p = operator new(0x20uLL);
    v60 = xmmword_22DCE6010;
    strcpy((char *)__p, "all_diff: empty constraint");
    operations_research::sat::PresolveContext::UpdateRuleStats(v9, (uint64_t)&__p);
LABEL_13:
    if (SHIBYTE(v60) < 0)
      operator delete(__p);
    operations_research::sat::ConstraintProto::Clear(a2);
    return 1;
  }
  __p = 0;
  v60 = 0uLL;
  if ((int)v8 < 1)
    goto LABEL_65;
  v55 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v54 = v7;
  while (2)
  {
    if (!operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)(*(_QWORD *)(v6 + 24) + 4 * v15)))
    {
      v23 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * v15);
      if (v14 < v55)
      {
        *(_DWORD *)v14 = v23;
        v14 += 4;
LABEL_19:
        *(_QWORD *)&v60 = v14;
        goto LABEL_20;
      }
      v24 = (v14 - v13) >> 2;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v55 - v13) >> 1 > v25)
        v25 = (v55 - v13) >> 1;
      if ((unint64_t)(v55 - v13) >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        if (v26 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v27 = v26;
        v28 = operator new(4 * v26);
        v26 = v27;
        v29 = &v28[4 * v24];
        *v29 = v23;
        v30 = (uint64_t)(v29 + 1);
        if (v14 != v13)
        {
LABEL_45:
          v31 = v14 - 4 - v13;
          if (v31 < 0xBC
            || &v28[v14 - v13 - 4 - (v31 & 0xFFFFFFFFFFFFFFFCLL)] > &v28[v14 - v13 - 4]
            || &v14[-(v31 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4
            || (unint64_t)(v13 - v28) < 0x20)
          {
            v32 = v14;
            v14 = (char *)v30;
          }
          else
          {
            v35 = (v31 >> 2) + 1;
            v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
            v32 = &v14[-v36];
            v29 = (_DWORD *)((char *)v29 - v36);
            v37 = &v28[4 * v24 - 16];
            v38 = v14 - 16;
            v39 = v35 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v40 = *(_OWORD *)v38;
              *(v37 - 1) = *((_OWORD *)v38 - 1);
              *v37 = v40;
              v37 -= 2;
              v38 -= 32;
              v39 -= 8;
            }
            while (v39);
            v14 = (char *)v30;
            if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_48:
              __p = v29;
              *(_QWORD *)&v60 = v14;
              v55 = &v28[4 * v26];
              *((_QWORD *)&v60 + 1) = v55;
              if (!v13)
              {
LABEL_50:
                v13 = (char *)v29;
                goto LABEL_19;
              }
LABEL_49:
              operator delete(v13);
              goto LABEL_50;
            }
          }
          do
          {
            v33 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *--v29 = v33;
          }
          while (v32 != v13);
          goto LABEL_48;
        }
      }
      else
      {
        v28 = 0;
        v29 = (_DWORD *)(4 * v24);
        *(_DWORD *)(4 * v24) = v23;
        v30 = 4 * v24 + 4;
        if (v14 != v13)
          goto LABEL_45;
      }
      v14 = (char *)v30;
      __p = v29;
      *(_QWORD *)&v60 = v30;
      v55 = &v28[4 * v26];
      *((_QWORD *)&v60 + 1) = v55;
      if (!v13)
        goto LABEL_50;
      goto LABEL_49;
    }
    v16 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*(unsigned int *)(*(_QWORD *)(v6 + 24) + 4 * v15));
    v17 = 0;
    v18 = 0;
    do
    {
      while (v15 != v17
           && operations_research::sat::PresolveContext::DomainContains(*((operations_research::sat::PresolveContext **)this + 2), *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * v17), v16))
      {
        v19 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
        v20 = (const char *)*(unsigned int *)(*(_QWORD *)(v6 + 24) + 4 * v17);
        operations_research::Domain::Domain(v56, v16);
        operations_research::Domain::Complement((operations_research::Domain *)v56, (unint64_t *)&v57);
        v21 = operations_research::sat::PresolveContext::IntersectDomainWith(v19, v20, (const operations_research::Domain *)&v57, 0);
        if ((v57 & 1) != 0)
        {
          operator delete(v58[0]);
          if (((uint64_t)v56[0] & 1) != 0)
          {
LABEL_31:
            operator delete(v56[1]);
            if ((v21 & 1) == 0)
              goto LABEL_81;
            goto LABEL_32;
          }
        }
        else if (((uint64_t)v56[0] & 1) != 0)
        {
          goto LABEL_31;
        }
        if ((v21 & 1) == 0)
          goto LABEL_81;
LABEL_32:
        v18 = 1;
        if (v8 - 1 == v17++)
          goto LABEL_52;
      }
      ++v17;
    }
    while (v8 != v17);
    if ((v18 & 1) == 0)
      goto LABEL_20;
LABEL_52:
    v34 = *((_QWORD *)this + 2);
    v57 = operator new(0x28uLL);
    *(_OWORD *)v58 = xmmword_22DCE7540;
    strcpy((char *)v57, "all_diff: propagated fixed variables");
    operations_research::sat::PresolveContext::UpdateRuleStats(v34, (uint64_t)&v57);
    if (SHIBYTE(v58[1]) < 0)
      operator delete(v57);
LABEL_20:
    if (++v15 != v8)
      continue;
    break;
  }
  v7 = v54;
LABEL_65:
  std::__sort<std::__less<int,int> &,int *>();
  v42 = (int *)__p;
  v41 = (int *)v60;
  v43 = (uint64_t)(v60 - (_QWORD)__p) >> 2;
  if ((_QWORD)v60 - (_QWORD)__p < 5uLL)
  {
LABEL_72:
    if (v43 >= (int)*v7)
    {
      IsUnsat = 0;
    }
    else
    {
      *v7 = 0;
      if (v42 != v41)
      {
        v50 = 0;
        do
        {
          v51 = *v42;
          if (v50 == *(_DWORD *)(v6 + 20))
            google::protobuf::RepeatedField<int>::Reserve(v7, v50 + 1);
          *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * v50) = v51;
          *(_DWORD *)(v6 + 16) = v50 + 1;
          ++v42;
          ++v50;
        }
        while (v42 != v41);
      }
      v52 = *((_QWORD *)this + 2);
      std::string::basic_string[abi:ne180100]<0>(&v57, "all_diff: removed fixed variables");
      operations_research::sat::PresolveContext::UpdateRuleStats(v52, (uint64_t)&v57);
      if (SHIBYTE(v58[1]) < 0)
        operator delete(v57);
LABEL_81:
      IsUnsat = 1;
    }
  }
  else
  {
    if (v43 <= 2)
      v44 = 2;
    else
      v44 = (uint64_t)(v60 - (_QWORD)__p) >> 2;
    v45 = (int *)((char *)__p + 4);
    v46 = *(_DWORD *)__p;
    v47 = v44 - 1;
    while (1)
    {
      v49 = *v45++;
      v48 = v49;
      if (v49 == v46)
        break;
      v46 = v48;
      if (!--v47)
        goto LABEL_72;
    }
    v53 = *((_QWORD *)this + 2);
    v57 = operator new(0x20uLL);
    *(_OWORD *)v58 = xmmword_22DCE5C00;
    strcpy((char *)v57, "Duplicate variable in all_diff");
    IsUnsat = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v53, (uint64_t)&v57);
    if (SHIBYTE(v58[1]) < 0)
      operator delete(v57);
  }
  if (__p)
    operator delete(__p);
  return IsUnsat;
}

void sub_22DAD4EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, void *__p, void *a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::ConstraintProto::mutable_all_diff(operations_research::sat::ConstraintProto *this)
{
  uint64_t result;
  uint64_t v3;
  google::protobuf::Arena **v4;

  if (*((_DWORD *)this + 15) == 13)
    return *((_QWORD *)this + 6);
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 13;
  v3 = *((_QWORD *)this + 1);
  v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) != 0)
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>(*v4);
  else
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AllDifferentConstraintProto>((google::protobuf::Arena *)v4);
  *((_QWORD *)this + 6) = result;
  return result;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  int v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  google::protobuf::Arena *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::Arena *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  google::protobuf::Arena **v20;
  uint64_t v21;
  google::protobuf::Arena *v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  operations_research::sat::PresolveContext *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  operations_research::sat::PresolveContext *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  google::protobuf::Arena *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  google::protobuf::Arena *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *__p;
  __int128 v50;

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504))
    return 0;
  v5 = *((_DWORD *)a2 + 15);
  if (v5 == 20)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 6);
    v7 = *((_DWORD *)v6 + 4);
    if (v7 < 1)
      goto LABEL_5;
  }
  else
  {
    v6 = &operations_research::sat::_NoOverlapConstraintProto_default_instance_;
    v7 = qword_25408AF58;
    if ((int)qword_25408AF58 < 1)
    {
LABEL_5:
      v8 = 0;
      if (v5 != 20)
        goto LABEL_6;
LABEL_20:
      v11 = *((_QWORD *)a2 + 6);
      if (*(int *)(v11 + 16) < 1)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  v12 = 0;
  v8 = 0;
  do
  {
    v14 = *(int *)(v6[3] + 4 * v12);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 56) + 8 * v14 + 8) + 60))
    {
      if (*((_DWORD *)a2 + 15) == 20)
      {
        v13 = *((_QWORD *)a2 + 6);
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
        *((_DWORD *)a2 + 15) = 20;
        v15 = *((_QWORD *)a2 + 1);
        v16 = (google::protobuf::Arena *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        if ((v15 & 1) != 0)
          v16 = *(google::protobuf::Arena **)v16;
        v13 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v16);
        *((_QWORD *)a2 + 6) = v13;
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v8++) = v14;
      v7 = *((_DWORD *)v6 + 4);
    }
    ++v12;
  }
  while (v12 < v7);
  if (*((_DWORD *)a2 + 15) == 20)
    goto LABEL_20;
LABEL_6:
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 20;
  v9 = *((_QWORD *)a2 + 1);
  v10 = (google::protobuf::Arena *)(v9 & 0xFFFFFFFFFFFFFFFELL);
  if ((v9 & 1) == 0)
  {
    v11 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v10);
    *((_QWORD *)a2 + 6) = v11;
    if (*(int *)(v11 + 16) < 1)
      goto LABEL_22;
LABEL_21:
    *(_DWORD *)(v11 + 16) = v8;
    goto LABEL_22;
  }
  v11 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(*(google::protobuf::Arena **)v10);
  *((_QWORD *)a2 + 6) = v11;
  if (*(int *)(v11 + 16) >= 1)
    goto LABEL_21;
LABEL_22:
  if (*((_DWORD *)a2 + 15) == 20)
  {
    v17 = *((_QWORD *)a2 + 6);
    v18 = *(_QWORD *)(v17 + 24);
    goto LABEL_29;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 20;
  v19 = *((_QWORD *)a2 + 1);
  v20 = (google::protobuf::Arena **)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if ((v19 & 1) != 0)
  {
    v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(*v20);
    *((_QWORD *)a2 + 6) = v17;
    v18 = *(_QWORD *)(v17 + 24);
    if (*((_DWORD *)a2 + 15) == 20)
      goto LABEL_29;
  }
  else
  {
    v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>((google::protobuf::Arena *)v20);
    *((_QWORD *)a2 + 6) = v17;
    v18 = *(_QWORD *)(v17 + 24);
    if (*((_DWORD *)a2 + 15) == 20)
      goto LABEL_29;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 20;
  v21 = *((_QWORD *)a2 + 1);
  v22 = (google::protobuf::Arena *)(v21 & 0xFFFFFFFFFFFFFFFELL);
  if ((v21 & 1) != 0)
    v22 = *(google::protobuf::Arena **)v22;
  v17 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v22);
  *((_QWORD *)a2 + 6) = v17;
LABEL_29:
  v23 = (int *)(*(_QWORD *)(v17 + 24) + 4 * *(int *)(v17 + 16));
  v24 = 126 - 2 * __clz(((uint64_t)v23 - v18) >> 2);
  __p = this;
  if (v23 == (int *)v18)
    v25 = 0;
  else
    v25 = v24;
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,false>(v18, v23, (uint64_t *)&__p, v25, 1);
  if (*((int *)v6 + 4) < 1)
  {
    v27 = 0;
  }
  else
  {
    v26 = 0;
    v27 = 0;
    v28 = 0x8000000000000000;
    do
    {
      v31 = *(int *)(v6[3] + 4 * v26);
      v32 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
      v33 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v32 + 6) + 56) + 8 * v31 + 8);
      v34 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      if (*(_DWORD *)(v33 + 60) == 19)
        v34 = *(uint64_t **)(v33 + 48);
      v35 = operations_research::sat::PresolveContext::MaxOf(v32, (const char *)*((unsigned int *)v34 + 5));
      if (v28 <= v35)
        v36 = v35;
      else
        v36 = v28;
      if (operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*((unsigned int *)v34 + 4)) < v28)goto LABEL_47;
      v30 = v26 + 1;
      if (v26 + 1 == *((_DWORD *)v6 + 4))
        goto LABEL_51;
      v37 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
      v38 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v37 + 6) + 56) + 8 * *(int *)(v6[3] + 4 * v30) + 8);
      v39 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      if (*(_DWORD *)(v38 + 60) == 19)
        v39 = *(uint64_t **)(v38 + 48);
      if (v36 <= operations_research::sat::PresolveContext::MinOf(v37, (const char *)*((unsigned int *)v39 + 4)))
      {
LABEL_51:
        v42 = *((_QWORD *)this + 2);
        __p = operator new(0x28uLL);
        v50 = xmmword_22DCEAFB0;
        strcpy((char *)__p, "no_overlap: removed redundant intervals");
        operations_research::sat::PresolveContext::UpdateRuleStats(v42, (uint64_t)&__p);
        if (SHIBYTE(v50) < 0)
          operator delete(__p);
      }
      else
      {
LABEL_47:
        if (*((_DWORD *)a2 + 15) == 20)
        {
          v29 = *((_QWORD *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 20;
          v40 = *((_QWORD *)a2 + 1);
          v41 = (google::protobuf::Arena *)(v40 & 0xFFFFFFFFFFFFFFFELL);
          if ((v40 & 1) != 0)
            v41 = *(google::protobuf::Arena **)v41;
          v29 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v41);
          *((_QWORD *)a2 + 6) = v29;
        }
        *(_DWORD *)(*(_QWORD *)(v29 + 24) + 4 * v27++) = v31;
        v30 = v26 + 1;
      }
      v26 = v30;
      v28 = v36;
    }
    while (v30 < *((int *)v6 + 4));
  }
  if (*((_DWORD *)a2 + 15) == 20)
  {
    v43 = *((_QWORD *)a2 + 6);
    if (*(int *)(v43 + 16) < 1)
      goto LABEL_60;
    goto LABEL_59;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 20;
  v44 = *((_QWORD *)a2 + 1);
  v45 = (google::protobuf::Arena *)(v44 & 0xFFFFFFFFFFFFFFFELL);
  if ((v44 & 1) == 0)
  {
    v43 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v45);
    *((_QWORD *)a2 + 6) = v43;
    if (*(int *)(v43 + 16) < 1)
      goto LABEL_60;
    goto LABEL_59;
  }
  v43 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(*(google::protobuf::Arena **)v45);
  *((_QWORD *)a2 + 6) = v43;
  if (*(int *)(v43 + 16) >= 1)
LABEL_59:
    *(_DWORD *)(v43 + 16) = v27;
LABEL_60:
  v46 = *((_DWORD *)v6 + 4);
  if (v46)
  {
    if (v46 != 1)
      return 0;
    v47 = *((_QWORD *)this + 2);
    __p = operator new(0x20uLL);
    v50 = xmmword_22DCE7550;
    strcpy((char *)__p, "no_overlap: only one interval");
    operations_research::sat::PresolveContext::UpdateRuleStats(v47, (uint64_t)&__p);
  }
  else
  {
    v48 = *((_QWORD *)this + 2);
    __p = operator new(0x20uLL);
    v50 = xmmword_22DCE6650;
    strcpy((char *)__p, "no_overlap: no intervals");
    operations_research::sat::PresolveContext::UpdateRuleStats(v48, (uint64_t)&__p);
  }
  if (SHIBYTE(v50) < 0)
    operator delete(__p);
  operations_research::sat::ConstraintProto::Clear(a2);
  return 1;
}

void sub_22DAD54FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::ConstraintProto::mutable_no_overlap(operations_research::sat::ConstraintProto *this)
{
  uint64_t result;
  uint64_t v3;
  google::protobuf::Arena **v4;

  if (*((_DWORD *)this + 15) == 20)
    return *((_QWORD *)this + 6);
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)this);
  *((_DWORD *)this + 15) = 20;
  v3 = *((_QWORD *)this + 1);
  v4 = (google::protobuf::Arena **)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) != 0)
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(*v4);
  else
    result = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>((google::protobuf::Arena *)v4);
  *((_QWORD *)this + 6) = result;
  return result;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveCumulative(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t IsUnsat;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  operations_research::sat::PresolveContext *v12;
  uint64_t v13;
  uint64_t v14;
  google::protobuf::Arena *v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::Arena *v18;
  uint64_t v19;
  google::protobuf::Arena **v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::Arena **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  operations_research::sat::PresolveContext *v32;
  uint64_t v33;
  uint64_t *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  operations_research::sat::PresolveContext *v42;
  char v43;
  uint64_t v44;
  char *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  operations_research::sat::ConstraintProto *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  operations_research::sat::ConstraintProto *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  char *v67;
  int v68;
  uint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t *v78;
  void *__p;
  void *v80[2];
  char *v81;
  __int128 v82;
  int v83;

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504))
    return 0;
  if (*((_DWORD *)a2 + 15) == 22)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 6);
    LODWORD(v7) = *((_DWORD *)v6 + 4);
    if ((int)v7 < 1)
    {
LABEL_6:
      v8 = 0;
      v9 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
    LODWORD(v7) = qword_25408AFF0;
    if ((int)qword_25408AFF0 < 1)
      goto LABEL_6;
  }
  v11 = 0;
  v9 = 0;
  v8 = 0;
  do
  {
    v12 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 6) + 56) + 8 * *(int *)(v6[3] + 4 * v11) + 8) + 60))
    {
      if (operations_research::sat::PresolveContext::MaxOf(v12, (const char *)*(unsigned int *)(v6[6] + 4 * v11)))
      {
        if (*((_DWORD *)a2 + 15) == 22)
        {
          v13 = *((_QWORD *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 22;
          v14 = *((_QWORD *)a2 + 1);
          v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if ((v14 & 1) != 0)
            v15 = *(google::protobuf::Arena **)v15;
          v13 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v15);
          *((_QWORD *)a2 + 6) = v13;
        }
        *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v9) = *(_DWORD *)(v6[3] + 4 * v11);
        if (*((_DWORD *)a2 + 15) == 22)
        {
          v16 = *((_QWORD *)a2 + 6);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
          *((_DWORD *)a2 + 15) = 22;
          v17 = *((_QWORD *)a2 + 1);
          v18 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) != 0)
            v18 = *(google::protobuf::Arena **)v18;
          v16 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(v18);
          *((_QWORD *)a2 + 6) = v16;
        }
        *(_DWORD *)(*(_QWORD *)(v16 + 48) + 4 * v9++) = *(_DWORD *)(v6[6] + 4 * v11);
      }
      else
      {
        ++v8;
      }
    }
    ++v11;
    v7 = *((int *)v6 + 4);
  }
  while (v11 < v7);
LABEL_7:
  IsUnsat = v9 < (int)v7;
  if (v9 >= (int)v7)
    goto LABEL_37;
  if (*((_DWORD *)a2 + 15) == 22)
  {
    v10 = *((_QWORD *)a2 + 6);
    if (*(int *)(v10 + 16) < 1)
      goto LABEL_31;
    goto LABEL_30;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 22;
  v19 = *((_QWORD *)a2 + 1);
  v20 = (google::protobuf::Arena **)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if ((v19 & 1) != 0)
  {
    v10 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(*v20);
    *((_QWORD *)a2 + 6) = v10;
    if (*(int *)(v10 + 16) < 1)
      goto LABEL_31;
    goto LABEL_30;
  }
  v10 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>((google::protobuf::Arena *)v20);
  *((_QWORD *)a2 + 6) = v10;
  if (*(int *)(v10 + 16) >= 1)
LABEL_30:
    *(_DWORD *)(v10 + 16) = v9;
LABEL_31:
  if (*((_DWORD *)a2 + 15) == 22)
  {
    v21 = *((_QWORD *)a2 + 6);
    if (*(int *)(v21 + 40) < 1)
      goto LABEL_37;
    goto LABEL_36;
  }
  operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
  *((_DWORD *)a2 + 15) = 22;
  v22 = *((_QWORD *)a2 + 1);
  v23 = (google::protobuf::Arena **)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if ((v22 & 1) != 0)
  {
    v21 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>(*v23);
    *((_QWORD *)a2 + 6) = v21;
    if (*(int *)(v21 + 40) < 1)
      goto LABEL_37;
    goto LABEL_36;
  }
  v21 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CumulativeConstraintProto>((google::protobuf::Arena *)v23);
  *((_QWORD *)a2 + 6) = v21;
  if (*(int *)(v21 + 40) >= 1)
LABEL_36:
    *(_DWORD *)(v21 + 40) = v9;
LABEL_37:
  if (v8 >= 1)
  {
    v24 = *((_QWORD *)this + 2);
    v81 = (char *)operator new(0x30uLL);
    v82 = xmmword_22DCED9D0;
    strcpy(v81, "cumulative: removed intervals with no demands");
    operations_research::sat::PresolveContext::UpdateRuleStats(v24, (uint64_t)&v81);
    if (SHIBYTE(v82) < 0)
    {
      operator delete(v81);
      if (v9)
        goto LABEL_40;
LABEL_64:
      v44 = *((_QWORD *)this + 2);
      v81 = (char *)operator new(0x20uLL);
      v82 = xmmword_22DCE6650;
      strcpy(v81, "cumulative: no intervals");
      operations_research::sat::PresolveContext::UpdateRuleStats(v44, (uint64_t)&v81);
      if (SHIBYTE(v82) < 0)
        operator delete(v81);
      operations_research::sat::ConstraintProto::Clear(a2);
      return 1;
    }
  }
  if (!v9)
    goto LABEL_64;
LABEL_40:
  if (!*((_DWORD *)a2 + 4)
    && operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*((unsigned int *)v6 + 15)))
  {
    v25 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), (const char *)*((unsigned int *)v6 + 15));
    v26 = *((int *)v6 + 4);
    v81 = 0;
    v82 = 0uLL;
    v71 = v26;
    if ((_DWORD)v26)
    {
      v76 = v25;
      if ((v26 & 0x80000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v27 = (char *)operator new(4 * v26);
      v28 = &v27[4 * v26];
      v81 = v27;
      *((_QWORD *)&v82 + 1) = v28;
      v74 = v27;
      memset(v27, 255, 4 * v26);
      v29 = 0;
      v30 = 0;
      v31 = v26;
      LODWORD(v26) = 0;
      v73 = 0;
      v70 = v28;
      *(_QWORD *)&v82 = v28;
      v72 = 4 * v31;
      while (1)
      {
        v32 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
        v33 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v32 + 6) + 56) + 8 * *(int *)(v6[3] + v29) + 8);
        v77 = *(_DWORD *)(v33 + 16) != 0;
        v34 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v33 + 60) == 19)
          v34 = *(uint64_t **)(v33 + 48);
        v75 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v32 + 6) + 56) + 8 * *(int *)(v6[3] + v29) + 8);
        *(_DWORD *)&v74[v29] = *((_DWORD *)v34 + 4);
        v35 = (const char *)*((unsigned int *)v34 + 6);
        v36 = (const char *)*(unsigned int *)(v6[6] + v29);
        if (operations_research::sat::PresolveContext::IsFixed(v32, v35))
        {
          v37 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v35);
          v38 = v73;
          if (v37 == 1)
            v38 = v73 + 1;
          v73 = v38;
        }
        if (!operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v35))
        {
          v47 = v74;
          IsUnsat = v9 < (int)v7;
          goto LABEL_101;
        }
        v39 = operations_research::sat::PresolveContext::MinOf(*((operations_research::sat::PresolveContext **)this + 2), v36);
        v40 = operations_research::sat::PresolveContext::MaxOf(*((operations_research::sat::PresolveContext **)this + 2), v36);
        if (v39 > v76 / 2)
          LODWORD(v26) = v26 + 1;
        if (v39 > v76)
          break;
        if (v40 > v76)
        {
          v41 = *((_QWORD *)this + 2);
          if (*(_DWORD *)(v75 + 16))
          {
            IsUnsat = v9 < (int)v7;
            __p = operator new(0x40uLL);
            *(_OWORD *)v80 = xmmword_22DCED9F0;
            strcpy((char *)__p, "cumulative: demand_max of optional interval exceeds capacity.");
            v47 = v74;
            operations_research::sat::PresolveContext::UpdateRuleStats(v41, (uint64_t)&__p);
            goto LABEL_99;
          }
          __p = operator new(0x30uLL);
          *(_OWORD *)v80 = xmmword_22DCED9E0;
          strcpy((char *)__p, "cumulative: demand_max exceeds capacity.");
          operations_research::sat::PresolveContext::UpdateRuleStats(v41, (uint64_t)&__p);
          if (SHIBYTE(v80[1]) < 0)
            operator delete(__p);
          v42 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
          operations_research::Domain::Domain(&__p, 0x8000000000000000, v76);
          v43 = operations_research::sat::PresolveContext::IntersectDomainWith(v42, v36, (const operations_research::Domain *)&__p, 0);
          if ((__p & 1) != 0)
            operator delete(v80[0]);
          if ((v43 & 1) == 0)
          {
            IsUnsat = 1;
            v47 = v74;
            goto LABEL_101;
          }
        }
        v30 |= v77;
        v29 += 4;
        if (v72 == v29)
        {
          IsUnsat = v9 < (int)v7;
          v45 = v70;
          v46 = v73;
          goto LABEL_77;
        }
      }
      v48 = *((_QWORD *)this + 2);
      __p = operator new(0x28uLL);
      *(_OWORD *)v80 = xmmword_22DCEAFB0;
      strcpy((char *)__p, "cumulative: demand_min exceeds capacity");
      v47 = v74;
      operations_research::sat::PresolveContext::UpdateRuleStats(v48, (uint64_t)&__p);
      v49 = v75;
      if (SHIBYTE(v80[1]) < 0)
        operator delete(__p);
      v50 = *(_DWORD *)(v75 + 16);
      if (!v50)
      {
        v69 = *((_QWORD *)this + 2);
        HIBYTE(v80[1]) = 0;
        LOBYTE(__p) = 0;
        IsUnsat = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v69, (uint64_t)&__p);
LABEL_99:
        if (SHIBYTE(v80[1]) < 0)
          operator delete(__p);
        goto LABEL_101;
      }
      LODWORD(__p) = *(_DWORD *)(v75 + 16);
      v83 = 1;
      if (v50 != 1)
      {
        v78 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&__p, (int)&v83, "ct.enforcement_literal().size() == 1");
        v47 = v74;
        v49 = v75;
        if (v78)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 2844, &v78);
          google::LogMessage::stream((google::LogMessage *)&__p);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
        }
      }
      v51 = operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)this + 2), **(_DWORD **)(v49 + 24)) ^ 1;
      if (v9 < (int)v7)
        IsUnsat = 1;
      else
        IsUnsat = v51;
      goto LABEL_101;
    }
    v74 = 0;
    v45 = 0;
    v46 = 0;
    v30 = 0;
LABEL_77:
    if ((_DWORD)v26 == v71)
    {
      v52 = *((_QWORD *)this + 2);
      if ((v46 != v71) | v30 & 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "cumulative: convert to no_overlap");
        operations_research::sat::PresolveContext::UpdateRuleStats(v52, (uint64_t)&__p);
        if (SHIBYTE(v80[1]) < 0)
          operator delete(__p);
        v53 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
        v54 = operations_research::sat::ConstraintProto::mutable_no_overlap(v53);
        v55 = *((int *)v6 + 4);
        if ((_DWORD)v55)
        {
          v56 = v54;
          v57 = (int *)v6[3];
          v58 = (unsigned int *)(v54 + 16);
          v59 = *(_DWORD *)(v54 + 16);
          v60 = 4 * v55;
          do
          {
            v61 = *v57;
            if (v59 == *(_DWORD *)(v56 + 20))
              google::protobuf::RepeatedField<int>::Reserve(v58, v59 + 1);
            *(_DWORD *)(*(_QWORD *)(v56 + 24) + 4 * v59) = v61;
            *(_DWORD *)(v56 + 16) = v59 + 1;
            ++v57;
            ++v59;
            v60 -= 4;
          }
          while (v60);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "cumulative: convert to all_different");
        operations_research::sat::PresolveContext::UpdateRuleStats(v52, (uint64_t)&__p);
        if (SHIBYTE(v80[1]) < 0)
          operator delete(__p);
        v62 = (operations_research::sat::ConstraintProto *)operations_research::sat::CpModelProto::add_constraints(*(operations_research::sat::CpModelProto **)(*((_QWORD *)this + 2) + 48));
        v63 = operations_research::sat::ConstraintProto::mutable_all_diff(v62);
        if (v74 != v45)
        {
          v64 = v63;
          v65 = (unsigned int *)(v63 + 16);
          v66 = *(_DWORD *)(v63 + 16);
          v67 = v74;
          do
          {
            v68 = *(_DWORD *)v67;
            if (v66 == *(_DWORD *)(v64 + 20))
              google::protobuf::RepeatedField<int>::Reserve(v65, v66 + 1);
            *(_DWORD *)(*(_QWORD *)(v64 + 24) + 4 * v66) = v68;
            *(_DWORD *)(v64 + 16) = v66 + 1;
            v67 += 4;
            ++v66;
          }
          while (v67 != v45);
        }
      }
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
      operations_research::sat::ConstraintProto::Clear(a2);
      IsUnsat = 1;
    }
    v47 = v74;
    if (v74)
    {
LABEL_101:
      *(_QWORD *)&v82 = v47;
      operator delete(v47);
    }
  }
  return IsUnsat;
}

void sub_22DAD5E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAD5E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  *(_QWORD *)(v28 - 112) = __p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveRoutes(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  google::protobuf::Arena **v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  void *__p;
  __int128 v17;

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504) || *((_DWORD *)a2 + 4))
    return 0;
  if (*((_DWORD *)a2 + 15) == 23)
  {
    v4 = *((_QWORD *)a2 + 6);
    v5 = *(unsigned int *)(v4 + 64);
    if ((int)v5 < 1)
    {
LABEL_5:
      v6 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 23;
    v8 = *((_QWORD *)a2 + 1);
    v9 = (google::protobuf::Arena **)(v8 & 0xFFFFFFFFFFFFFFFELL);
    if ((v8 & 1) != 0)
    {
      v4 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>(*v9);
      *((_QWORD *)a2 + 6) = v4;
      v5 = *(unsigned int *)(v4 + 64);
      if ((int)v5 < 1)
        goto LABEL_5;
    }
    else
    {
      v4 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::RoutesConstraintProto>((google::protobuf::Arena *)v9);
      *((_QWORD *)a2 + 6) = v4;
      v5 = *(unsigned int *)(v4 + 64);
      if ((int)v5 < 1)
        goto LABEL_5;
    }
  }
  v10 = 0;
  v6 = 0;
  do
  {
    v12 = *(_DWORD *)(*(_QWORD *)(v4 + 72) + v10);
    v13 = *(_DWORD *)(*(_QWORD *)(v4 + 24) + v10);
    v14 = *(_DWORD *)(*(_QWORD *)(v4 + 48) + v10);
    if (operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v12))
    {
      v15 = *((_QWORD *)this + 2);
      __p = operator new(0x20uLL);
      v17 = xmmword_22DCE6010;
      strcpy((char *)__p, "routes: removed false arcs");
      operations_research::sat::PresolveContext::UpdateRuleStats(v15, (uint64_t)&__p);
      if (SHIBYTE(v17) < 0)
        operator delete(__p);
    }
    else
    {
      v11 = 4 * v6;
      *(_DWORD *)(*(_QWORD *)(v4 + 72) + v11) = v12;
      *(_DWORD *)(*(_QWORD *)(v4 + 24) + v11) = v13;
      *(_DWORD *)(*(_QWORD *)(v4 + 48) + v11) = v14;
      ++v6;
    }
    v10 += 4;
  }
  while (4 * v5 != v10);
LABEL_6:
  if (v6 >= (int)v5)
    return 0;
  if (*(int *)(v4 + 64) >= 1)
    *(_DWORD *)(v4 + 64) = v6;
  if (*(int *)(v4 + 16) >= 1)
    *(_DWORD *)(v4 + 16) = v6;
  if (*(int *)(v4 + 40) >= 1)
    *(_DWORD *)(v4 + 40) = v6;
  return 1;
}

void sub_22DAD6120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveCircuit(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t IsUnsat;
  operations_research::sat::CpModelPresolver *v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::Arena *v8;
  uint64_t v9;
  signed int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  uint64_t *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  _QWORD *v50;
  uint64_t *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  int v71;
  int v72;
  int **v73;
  int **v74;
  char v75;
  int *v76;
  int *v77;
  int v78;
  int *v79;
  int *v80;
  unsigned int v81;
  uint64_t v82;
  int **v83;
  int **v84;
  int *v85;
  int *v86;
  int v87;
  int *v88;
  int *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  _QWORD *v99;
  void *v100;
  void *v101;
  _QWORD *v102;
  _QWORD *v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  void *v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  BOOL IsTrue;
  uint64_t v116;
  int v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD *v122;
  _QWORD *v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t i;
  unint64_t v128;
  operations_research::sat::PresolveContext *v129;
  unsigned int v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t j;
  uint64_t v137;
  unsigned int **v138;
  operations_research::sat::ConstraintProto *v139;
  unsigned int *v140;
  unsigned int *v141;
  char *v142;
  char *v143;
  char *v144;
  const char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _BYTE *v149;
  _DWORD *v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  _OWORD *v157;
  char *v158;
  uint64_t v159;
  __int128 v160;
  unsigned int *v161;
  uint64_t v162;
  unsigned int *v163;
  unsigned int *v164;
  char *v165;
  char *v166;
  const char *v167;
  uint64_t v168;
  char *v169;
  int64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _BYTE *v174;
  _DWORD *v175;
  unint64_t v176;
  char *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  _OWORD *v181;
  char *v182;
  uint64_t v183;
  __int128 v184;
  unsigned int *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _DWORD *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  _DWORD *v193;
  operations_research::sat::ConstraintProto *v194;
  operations_research::sat::ConstraintProto *v195;
  uint64_t v196;
  uint64_t v197;
  operations_research::sat::PresolveContext **v198;
  int v199;
  _DWORD *v200;
  signed int v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  unsigned int *v205;
  void *v206[4];
  void *__p;
  __int128 v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504) || *((_DWORD *)a2 + 4))
    return 0;
  v5 = this;
  if (*((_DWORD *)a2 + 15) == 15)
  {
    v6 = *((_QWORD *)a2 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 15;
    v7 = *((_QWORD *)a2 + 1);
    v8 = (google::protobuf::Arena *)(v7 & 0xFFFFFFFFFFFFFFFELL);
    if ((v7 & 1) != 0)
      v8 = *(google::protobuf::Arena **)v8;
    v6 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CircuitConstraintProto>(v8);
    *((_QWORD *)a2 + 6) = v6;
  }
  v194 = a2;
  v196 = v6;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v197 = *(unsigned int *)(v6 + 64);
  v198 = (operations_research::sat::PresolveContext **)v5;
  if ((int)v197 >= 1)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v204 = *(_DWORD *)(*(_QWORD *)(v6 + 72) + 4 * v9);
      v12 = *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v9);
      v199 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * v9);
      if (v199 <= v12)
        v13 = *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v9);
      else
        v13 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * v9);
      v14 = v13 + 1;
      if (v10 <= v13 + 1)
        v10 = v13 + 1;
      v201 = v10;
      v15 = v213;
      v16 = 0xAAAAAAAAAAAAAAABLL * (v213 - v212);
      if (v16 <= v13)
      {
        v17 = v14;
        if (v14 <= v16)
        {
          if (v14 < v16)
          {
            v18 = &v212[3 * v14];
            if (v213 != v18)
            {
              v19 = v213;
              do
              {
                v21 = (void *)*(v19 - 3);
                v19 -= 3;
                v20 = v21;
                if (v21)
                {
                  *(v15 - 2) = v20;
                  operator delete(v20);
                }
                v15 = v19;
              }
              while (v19 != v18);
            }
            v213 = v18;
          }
        }
        else
        {
          std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)&v212, v14 - v16);
        }
        v22 = v210;
        v23 = 0xAAAAAAAAAAAAAAABLL * (v210 - v209);
        if (v17 <= v23)
        {
          if (v17 < v23)
          {
            v24 = &v209[3 * (int)v17];
            if (v210 != v24)
            {
              v25 = v210;
              do
              {
                v27 = (void *)*(v25 - 3);
                v25 -= 3;
                v26 = v27;
                if (v27)
                {
                  *(v22 - 2) = v26;
                  operator delete(v26);
                }
                v22 = v25;
              }
              while (v25 != v24);
            }
            v210 = v24;
          }
        }
        else
        {
          std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)&v209, v17 - v23);
        }
      }
      v28 = &v212[3 * v12];
      v29 = v28 + 1;
      v30 = (char *)v28[1];
      v31 = v28[2];
      if ((unint64_t)v30 < v31)
      {
        *(_DWORD *)v30 = v204;
        v32 = (uint64_t)(v30 + 4);
        goto LABEL_59;
      }
      v33 = (char *)*v28;
      v34 = (uint64_t)&v30[-*v28];
      v35 = v34 >> 2;
      v36 = (v34 >> 2) + 1;
      if (v36 >> 62)
        goto LABEL_302;
      v37 = v31 - (_QWORD)v33;
      if (v37 >> 1 > v36)
        v36 = v37 >> 1;
      v38 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v36;
      if (v38)
        break;
      v39 = 0;
      v40 = (_DWORD *)(4 * v35);
      *(_DWORD *)(4 * v35) = v204;
      v32 = 4 * v35 + 4;
      if (v30 != v33)
        goto LABEL_51;
LABEL_57:
      *v28 = v40;
      *v29 = v32;
      v28[2] = &v39[4 * v38];
      if (v33)
        operator delete(v33);
LABEL_59:
      *v29 = v32;
      v50 = &v209[3 * v199];
      v51 = v50 + 1;
      v52 = (char *)v50[1];
      v53 = v50[2];
      if ((unint64_t)v52 >= v53)
      {
        v54 = (char *)*v50;
        v55 = (uint64_t)&v52[-*v50];
        v56 = v55 >> 2;
        v57 = (v55 >> 2) + 1;
        if (v57 >> 62)
LABEL_302:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v58 = v53 - (_QWORD)v54;
        if (v58 >> 1 > v57)
          v57 = v58 >> 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          if (v59 >> 62)
LABEL_303:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = operator new(4 * v59);
          v61 = &v60[4 * v56];
          *v61 = v204;
          v11 = (uint64_t)(v61 + 1);
          if (v52 != v54)
          {
LABEL_69:
            v62 = v52 - 4 - v54;
            if (v62 < 0x2C)
            {
              v5 = (operations_research::sat::CpModelPresolver *)v198;
              goto LABEL_77;
            }
            v63 = v52 - &v60[v55];
            v5 = (operations_research::sat::CpModelPresolver *)v198;
            if (v63 < 0x20)
              goto LABEL_308;
            v64 = (v62 >> 2) + 1;
            v65 = 4 * (v64 & 0x7FFFFFFFFFFFFFF8);
            v66 = &v52[-v65];
            v61 = (_DWORD *)((char *)v61 - v65);
            v67 = &v60[4 * v56 - 16];
            v68 = v52 - 16;
            v69 = v64 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v70 = *(_OWORD *)v68;
              *(v67 - 1) = *((_OWORD *)v68 - 1);
              *v67 = v70;
              v67 -= 2;
              v68 -= 32;
              v69 -= 8;
            }
            while (v69);
            v52 = v66;
            if (v64 != (v64 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_308:
              do
              {
LABEL_77:
                v71 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *--v61 = v71;
              }
              while (v52 != v54);
            }
LABEL_78:
            *v50 = v61;
            *v51 = v11;
            v50[2] = &v60[4 * v59];
            if (v54)
              operator delete(v54);
            goto LABEL_13;
          }
        }
        else
        {
          v60 = 0;
          v61 = (_DWORD *)(4 * v56);
          *(_DWORD *)(4 * v56) = v204;
          v11 = 4 * v56 + 4;
          if (v52 != v54)
            goto LABEL_69;
        }
        v5 = (operations_research::sat::CpModelPresolver *)v198;
        goto LABEL_78;
      }
      *(_DWORD *)v52 = v204;
      v11 = (uint64_t)(v52 + 4);
      v5 = (operations_research::sat::CpModelPresolver *)v198;
LABEL_13:
      v6 = v196;
      v10 = v201;
      *v51 = v11;
      if (++v9 == v197)
        goto LABEL_81;
    }
    if (v38 >> 62)
      goto LABEL_303;
    v39 = operator new(4 * v38);
    v40 = &v39[4 * v35];
    *v40 = v204;
    v32 = (uint64_t)(v40 + 1);
    if (v30 == v33)
      goto LABEL_57;
LABEL_51:
    v41 = v30 - 4 - v33;
    if (v41 < 0x2C)
      goto LABEL_309;
    if ((unint64_t)(v30 - &v39[v34]) < 0x20)
      goto LABEL_309;
    v42 = (v41 >> 2) + 1;
    v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
    v44 = &v30[-v43];
    v40 = (_DWORD *)((char *)v40 - v43);
    v45 = &v39[4 * v35 - 16];
    v46 = v30 - 16;
    v47 = v42 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v48 = *(_OWORD *)v46;
      *(v45 - 1) = *((_OWORD *)v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 32;
      v47 -= 8;
    }
    while (v47);
    v30 = v44;
    if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_309:
      do
      {
        v49 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *--v40 = v49;
      }
      while (v30 != v33);
    }
    goto LABEL_57;
  }
  v10 = 0;
LABEL_81:
  v202 = v10;
  v72 = 0;
  do
  {
    v73 = (int **)v212;
    v74 = (int **)v213;
    if (v212 != v213)
    {
      v75 = 0;
      while (1)
      {
        v76 = *v73;
        v77 = v73[1];
        if ((char *)v77 - (char *)*v73 == 4)
        {
          if (!operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v76))
          {
            if ((operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)v5 + 2), **v73) & 1) == 0)
            {
LABEL_130:
              IsUnsat = 1;
              goto LABEL_131;
            }
            ++v72;
          }
        }
        else
        {
          while (v76 != v77)
          {
            v78 = *v76;
            if (operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v76))
            {
              v79 = *v73;
              v80 = v73[1];
              while (v79 != v80)
              {
                v81 = *v79;
                if (*v79 != v78)
                {
                  if (!operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v79))
                  {
                    v82 = *((_QWORD *)v5 + 2);
                    __p = operator new(0x20uLL);
                    v208 = xmmword_22DCE5C00;
                    strcpy((char *)__p, "circuit: set literal to false.");
                    operations_research::sat::PresolveContext::UpdateRuleStats(v82, (uint64_t)&__p);
                    if (SHIBYTE(v208) < 0)
                      operator delete(__p);
                    v75 = 1;
                  }
                  if (!operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)v5 + 2), v81))goto LABEL_130;
                }
                ++v79;
              }
              break;
            }
            ++v76;
          }
        }
        v73 += 3;
        if (v73 == v74)
          goto LABEL_103;
      }
    }
    v75 = 0;
LABEL_103:
    v83 = (int **)v209;
    v84 = (int **)v210;
    while (v83 != v84)
    {
      v85 = *v83;
      v86 = v83[1];
      if ((char *)v86 - (char *)*v83 == 4)
      {
        if (!operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v85))
        {
          if (!operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)v5 + 2), **v83))goto LABEL_130;
          ++v72;
        }
      }
      else
      {
        while (v85 != v86)
        {
          v87 = *v85;
          if (operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v85))
          {
            v88 = *v83;
            v89 = v83[1];
            while (v88 != v89)
            {
              v90 = *v88;
              if (*v88 != v87)
              {
                if (!operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*v88))
                {
                  v91 = *((_QWORD *)v5 + 2);
                  __p = operator new(0x20uLL);
                  v208 = xmmword_22DCE5C00;
                  strcpy((char *)__p, "circuit: set literal to false.");
                  operations_research::sat::PresolveContext::UpdateRuleStats(v91, (uint64_t)&__p);
                  if (SHIBYTE(v208) < 0)
                    operator delete(__p);
                  v75 = 1;
                }
                if (!operations_research::sat::PresolveContext::SetLiteralToFalse(*((operations_research::sat::PresolveContext **)v5 + 2), v90))goto LABEL_130;
              }
              ++v88;
            }
            break;
          }
          ++v85;
        }
      }
      v83 += 3;
    }
  }
  while ((v75 & 1) != 0);
  if (v72 >= 1)
  {
    v92 = *((_QWORD *)v5 + 2);
    __p = operator new(0x20uLL);
    v208 = xmmword_22DCE5C00;
    strcpy((char *)__p, "circuit: fixed singleton arcs.");
    operations_research::sat::PresolveContext::UpdateRuleStats(v92, (uint64_t)&__p);
    if (SHIBYTE(v208) < 0)
      operator delete(__p);
  }
  v191 = v202;
  if (v202)
  {
    v93 = operator new(4 * v202);
    memset(v93, 255, 4 * v202);
    v94 = operator new(4 * v202);
    bzero(v94, 4 * v202);
    v95 = operator new(4 * v202);
    bzero(v95, 4 * v202);
  }
  else
  {
    v93 = 0;
    v95 = 0;
    v94 = 0;
  }
  v193 = v95;
  v200 = v94;
  v189 = v93;
  if ((int)v197 >= 1)
  {
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v111 = -1;
    while (1)
    {
      v114 = (const char *)*(unsigned int *)(*(_QWORD *)(v196 + 72) + v108);
      if (!operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)v5 + 2), v114))
      {
        IsTrue = operations_research::sat::PresolveContext::LiteralIsTrue(*((operations_research::sat::PresolveContext **)v5 + 2), v114);
        v116 = *(_QWORD *)(v196 + 24);
        v117 = *(_DWORD *)(v116 + v108);
        if (IsTrue)
        {
          if (v189[v117] != -1)
            goto LABEL_294;
          v112 = *(_QWORD *)(v196 + 48);
          v189[v117] = *(_DWORD *)(v112 + v108);
          v117 = *(_DWORD *)(v116 + v108);
          if (v117 != *(_DWORD *)(v112 + v108))
            v111 = *(_DWORD *)(v116 + v108);
          ++v109;
        }
        else
        {
          v112 = *(_QWORD *)(v196 + 48);
        }
        ++v193[v117];
        ++v200[*(int *)(v112 + v108)];
        v113 = 4 * v110;
        *(_DWORD *)(v116 + v113) = *(_DWORD *)(v116 + v108);
        *(_DWORD *)(v112 + v113) = *(_DWORD *)(v112 + v108);
        *(_DWORD *)(*(_QWORD *)(v196 + 72) + v113) = *(_DWORD *)(*(_QWORD *)(v196 + 72) + v108);
        ++v110;
      }
      v108 += 4;
      if (4 * v197 == v108)
        goto LABEL_160;
    }
  }
  v110 = 0;
  v109 = 0;
  v111 = -1;
LABEL_160:
  if ((int)v202 < 1)
  {
LABEL_167:
    v192 = v110;
    if (v111 == -1)
    {
      if (v109 == v110)
      {
        v131 = *((_QWORD *)v5 + 2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "circuit: empty circuit.");
        v132 = v189;
        v133 = v193;
        operations_research::sat::PresolveContext::UpdateRuleStats(v131, (uint64_t)&__p);
        v134 = v200;
        if (SHIBYTE(v208) < 0)
          operator delete(__p);
        operations_research::sat::ConstraintProto::Clear(v194);
        goto LABEL_292;
      }
    }
    else
    {
      LOBYTE(v206[0]) = 0;
      std::vector<BOOL>::vector(&__p, v202, (unsigned __int8 *)v206);
      v123 = __p;
      v124 = v111;
      while (1)
      {
        v125 = (unint64_t)v124 >> 6;
        v126 = v123[v125];
        if ((v126 & (1 << v124)) != 0)
          break;
        v123[v125] = v126 | (1 << v124);
        v124 = v189[v124];
        if (v124 == -1)
        {
          v124 = -1;
          break;
        }
      }
      if (v124 == v111)
      {
        if ((int)v197 >= 1)
        {
          for (i = 0; 4 * v197 != i; i += 4)
          {
            v128 = *(int *)(*(_QWORD *)(v196 + 24) + i);
            if (((*(_QWORD *)((char *)__p + ((v128 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v128) & 1) == 0)
            {
              v129 = (operations_research::sat::PresolveContext *)*((_QWORD *)v5 + 2);
              v130 = *(_DWORD *)(*(_QWORD *)(v196 + 72) + i);
              if ((_DWORD)v128 == *(_DWORD *)(*(_QWORD *)(v196 + 48) + i))
              {
                if ((operations_research::sat::PresolveContext::SetLiteralToTrue(v129, v130) & 1) == 0)
                  goto LABEL_190;
              }
              else if (!operations_research::sat::PresolveContext::SetLiteralToFalse(v129, v130))
              {
                goto LABEL_190;
              }
            }
          }
        }
        v135 = *((_QWORD *)v5 + 2);
        std::string::basic_string[abi:ne180100]<0>(v206, "circuit: fully specified.");
        operations_research::sat::PresolveContext::UpdateRuleStats(v135, (uint64_t)v206);
        if (SHIBYTE(v206[2]) < 0)
          operator delete(v206[0]);
        operations_research::sat::ConstraintProto::Clear(v194);
      }
LABEL_190:
      if (__p)
        operator delete(__p);
      v110 = v192;
      if (v124 == v111)
      {
        IsUnsat = 1;
        v132 = v189;
        v134 = v200;
        v133 = v193;
        goto LABEL_296;
      }
    }
    if ((int)v202 >= 1)
    {
      for (j = 0; j != v191; ++j)
      {
        v137 = 24 * j;
        v138 = (unsigned int **)&v212[3 * j];
        v139 = (operations_research::sat::ConstraintProto *)v209;
        __p = 0;
        v208 = 0uLL;
        v141 = *v138;
        v140 = v138[1];
        v203 = j;
        if (*v138 == v140)
          goto LABEL_242;
        v190 = 24 * j;
        v195 = (operations_research::sat::ConstraintProto *)v209;
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v205 = v138[1];
        while (1)
        {
          while (1)
          {
            v145 = (const char *)*v141;
            if (!operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)v5 + 2), v145))break;
            v5 = (operations_research::sat::CpModelPresolver *)v198;
            if (++v141 == v140)
              goto LABEL_233;
          }
          if (operations_research::sat::PresolveContext::LiteralIsTrue(v198[2], v145))
            break;
          if (v144 >= v143)
          {
            v146 = (v144 - v142) >> 2;
            v147 = v146 + 1;
            if ((unint64_t)(v146 + 1) >> 62)
LABEL_304:
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if ((v143 - v142) >> 1 > v147)
              v147 = (v143 - v142) >> 1;
            if ((unint64_t)(v143 - v142) >= 0x7FFFFFFFFFFFFFFCLL)
              v148 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v148 = v147;
            if (v148)
            {
              if (v148 >> 62)
LABEL_305:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v149 = operator new(4 * v148);
              v150 = &v149[4 * v146];
              *v150 = (_DWORD)v145;
              v151 = (uint64_t)(v150 + 1);
              if (v144 == v142)
              {
LABEL_224:
                v5 = (operations_research::sat::CpModelPresolver *)v198;
                v143 = &v149[4 * v148];
                __p = v150;
                *(_QWORD *)&v208 = v151;
                *((_QWORD *)&v208 + 1) = v143;
                if (!v142)
                  goto LABEL_221;
LABEL_220:
                operator delete(v142);
                goto LABEL_221;
              }
            }
            else
            {
              v149 = 0;
              v150 = (_DWORD *)(4 * v146);
              *(_DWORD *)(4 * v146) = (_DWORD)v145;
              v151 = 4 * v146 + 4;
              if (v144 == v142)
                goto LABEL_224;
            }
            v152 = v144 - 4 - v142;
            if (v152 < 0xBC
              || &v149[v144 - v142 - 4 - (v152 & 0xFFFFFFFFFFFFFFFCLL)] > &v149[v144 - v142 - 4]
              || &v144[-(v152 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v144 - 4
              || (unint64_t)(v142 - v149) < 0x20)
            {
              v153 = v144;
              v5 = (operations_research::sat::CpModelPresolver *)v198;
              do
              {
LABEL_218:
                v154 = *((_DWORD *)v153 - 1);
                v153 -= 4;
                *--v150 = v154;
              }
              while (v153 != v142);
              goto LABEL_219;
            }
            v155 = (v152 >> 2) + 1;
            v156 = 4 * (v155 & 0x7FFFFFFFFFFFFFF8);
            v153 = &v144[-v156];
            v150 = (_DWORD *)((char *)v150 - v156);
            v157 = &v149[4 * v146 - 16];
            v158 = v144 - 16;
            v159 = v155 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v160 = *(_OWORD *)v158;
              *(v157 - 1) = *((_OWORD *)v158 - 1);
              *v157 = v160;
              v157 -= 2;
              v158 -= 32;
              v159 -= 8;
            }
            while (v159);
            v5 = (operations_research::sat::CpModelPresolver *)v198;
            if (v155 != (v155 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_218;
LABEL_219:
            v143 = &v149[4 * v148];
            __p = v150;
            *(_QWORD *)&v208 = v151;
            *((_QWORD *)&v208 + 1) = v143;
            if (v142)
              goto LABEL_220;
LABEL_221:
            v142 = (char *)v150;
            v140 = v205;
            *(_QWORD *)&v208 = v151;
            v144 = (char *)v151;
            if (++v141 == v205)
            {
LABEL_233:
              v161 = (unsigned int *)__p;
              goto LABEL_235;
            }
          }
          else
          {
            *(_DWORD *)v144 = (_DWORD)v145;
            v144 += 4;
            v5 = (operations_research::sat::CpModelPresolver *)v198;
            *(_QWORD *)&v208 = v144;
            if (++v141 == v140)
              goto LABEL_233;
          }
        }
        v161 = (unsigned int *)__p;
        v144 = (char *)__p;
        v5 = (operations_research::sat::CpModelPresolver *)v198;
LABEL_235:
        v110 = v192;
        v139 = v195;
        v137 = v190;
        if (v144 - (char *)v161 == 8)
        {
          j = v203;
          if (*v161 != ~v161[1])
          {
            v162 = *((_QWORD *)v5 + 2);
            HIBYTE(v206[2]) = 17;
            strcpy((char *)v206, "circuit: degree 2");
            operations_research::sat::PresolveContext::UpdateRuleStats(v162, (uint64_t)v206);
            if (SHIBYTE(v206[2]) < 0)
              operator delete(v206[0]);
            operations_research::sat::PresolveContext::StoreBooleanEqualityRelation(*((_QWORD *)v5 + 2), (const char *)*v161, (const char *)~v161[1]);
          }
LABEL_241:
          operator delete(v161);
        }
        else
        {
          j = v203;
          if (v161)
            goto LABEL_241;
        }
LABEL_242:
        __p = 0;
        v208 = 0uLL;
        v163 = *(unsigned int **)((char *)v139 + v137);
        v164 = (unsigned int *)*((_QWORD *)v139 + 3 * j + 1);
        if (v163 == v164)
          continue;
        v165 = 0;
        v166 = 0;
        while (2)
        {
          while (1)
          {
            v167 = (const char *)*v163;
            if (!operations_research::sat::PresolveContext::LiteralIsFalse(*((operations_research::sat::PresolveContext **)v5 + 2), v167))break;
            v5 = (operations_research::sat::CpModelPresolver *)v198;
            if (++v163 == v164)
              goto LABEL_275;
          }
          if (!operations_research::sat::PresolveContext::LiteralIsTrue(v198[2], v167))
          {
            if (v166 < v165)
            {
              *(_DWORD *)v166 = (_DWORD)v167;
              v168 = (uint64_t)(v166 + 4);
              v5 = (operations_research::sat::CpModelPresolver *)v198;
              goto LABEL_263;
            }
            v169 = (char *)__p;
            v170 = v166 - (_BYTE *)__p;
            v171 = (v166 - (_BYTE *)__p) >> 2;
            v172 = v171 + 1;
            if ((unint64_t)(v171 + 1) >> 62)
              goto LABEL_304;
            if ((v165 - (_BYTE *)__p) >> 1 > v172)
              v172 = (v165 - (_BYTE *)__p) >> 1;
            if ((unint64_t)(v165 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
              v173 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v173 = v172;
            if (v173)
            {
              if (v173 >> 62)
                goto LABEL_305;
              v174 = operator new(4 * v173);
              v175 = &v174[4 * v171];
              *v175 = (_DWORD)v167;
              v168 = (uint64_t)(v175 + 1);
              if (v166 != v169)
              {
LABEL_258:
                v176 = v166 - 4 - v169;
                if (v176 < 0xBC
                  || &v174[v170 - 4 - (v176 & 0xFFFFFFFFFFFFFFFCLL)] > &v174[v170 - 4]
                  || &v166[-(v176 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v166 - 4
                  || (unint64_t)(v166 - v174 - v170) < 0x20)
                {
                  v177 = v166;
                  v5 = (operations_research::sat::CpModelPresolver *)v198;
                }
                else
                {
                  v179 = (v176 >> 2) + 1;
                  v180 = 4 * (v179 & 0x7FFFFFFFFFFFFFF8);
                  v177 = &v166[-v180];
                  v175 = (_DWORD *)((char *)v175 - v180);
                  v181 = &v174[4 * v171 - 16];
                  v182 = v166 - 16;
                  v183 = v179 & 0x7FFFFFFFFFFFFFF8;
                  v5 = (operations_research::sat::CpModelPresolver *)v198;
                  do
                  {
                    v184 = *(_OWORD *)v182;
                    *(v181 - 1) = *((_OWORD *)v182 - 1);
                    *v181 = v184;
                    v181 -= 2;
                    v182 -= 32;
                    v183 -= 8;
                  }
                  while (v183);
                  if (v179 == (v179 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_261:
                    v165 = &v174[4 * v173];
                    __p = v175;
                    *((_QWORD *)&v208 + 1) = v165;
                    if (v169)
                      goto LABEL_262;
                    goto LABEL_263;
                  }
                }
                do
                {
                  v178 = *((_DWORD *)v177 - 1);
                  v177 -= 4;
                  *--v175 = v178;
                }
                while (v177 != v169);
                goto LABEL_261;
              }
            }
            else
            {
              v174 = 0;
              v175 = (_DWORD *)(4 * v171);
              *(_DWORD *)(4 * v171) = (_DWORD)v167;
              v168 = 4 * v171 + 4;
              if (v166 != v169)
                goto LABEL_258;
            }
            v5 = (operations_research::sat::CpModelPresolver *)v198;
            v165 = &v174[4 * v173];
            __p = v175;
            *((_QWORD *)&v208 + 1) = v165;
            if (v169)
LABEL_262:
              operator delete(v169);
LABEL_263:
            *(_QWORD *)&v208 = v168;
            v166 = (char *)v168;
            if (++v163 == v164)
            {
LABEL_275:
              v185 = (unsigned int *)__p;
              goto LABEL_277;
            }
            continue;
          }
          break;
        }
        v185 = (unsigned int *)__p;
        v166 = (char *)__p;
        v5 = (operations_research::sat::CpModelPresolver *)v198;
LABEL_277:
        v110 = v192;
        if (v166 - (char *)v185 == 8)
        {
          j = v203;
          if (*v185 != ~v185[1])
          {
            v186 = *((_QWORD *)v5 + 2);
            HIBYTE(v206[2]) = 17;
            strcpy((char *)v206, "circuit: degree 2");
            operations_research::sat::PresolveContext::UpdateRuleStats(v186, (uint64_t)v206);
            if (SHIBYTE(v206[2]) < 0)
              operator delete(v206[0]);
            operations_research::sat::PresolveContext::StoreBooleanEqualityRelation(*((_QWORD *)v5 + 2), (const char *)*v185, (const char *)~v185[1]);
          }
LABEL_197:
          operator delete(v185);
        }
        else
        {
          j = v203;
          if (v185)
            goto LABEL_197;
        }
      }
    }
    v134 = v200;
    if (v110 >= (int)v197)
    {
      IsUnsat = 0;
      v132 = v189;
      v133 = v193;
      goto LABEL_296;
    }
    v132 = v189;
    v133 = v193;
    if (*(int *)(v196 + 16) >= 1)
      *(_DWORD *)(v196 + 16) = v110;
    if (*(int *)(v196 + 40) >= 1)
      *(_DWORD *)(v196 + 40) = v110;
    if (*(int *)(v196 + 64) >= 1)
      *(_DWORD *)(v196 + 64) = v110;
    v187 = *((_QWORD *)v5 + 2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "circuit: removed false arcs.");
    operations_research::sat::PresolveContext::UpdateRuleStats(v187, (uint64_t)&__p);
    if (SHIBYTE(v208) < 0)
      operator delete(__p);
LABEL_292:
    IsUnsat = 1;
    goto LABEL_296;
  }
  v118 = v212 + 1;
  v119 = v209 + 1;
  v120 = v202;
  v121 = v193;
  v122 = v200;
  while (*(v118 - 1) == *v118 && *(v119 - 1) == *v119 || *v122 && *v121)
  {
    v118 += 3;
    v119 += 3;
    ++v122;
    ++v121;
    if (!--v120)
      goto LABEL_167;
  }
LABEL_294:
  v188 = *((_QWORD *)v5 + 2);
  HIBYTE(v208) = 0;
  LOBYTE(__p) = 0;
  IsUnsat = operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v188, (uint64_t)&__p);
  v132 = v189;
  v134 = v200;
  v133 = v193;
  if (SHIBYTE(v208) < 0)
    operator delete(__p);
LABEL_296:
  if (v133)
    operator delete(v133);
  if (v134)
    operator delete(v134);
  if (v132)
    operator delete(v132);
LABEL_131:
  v96 = v209;
  if (v209)
  {
    v97 = v210;
    v98 = v209;
    if (v210 != v209)
    {
      v99 = v210;
      do
      {
        v101 = (void *)*(v99 - 3);
        v99 -= 3;
        v100 = v101;
        if (v101)
        {
          *(v97 - 2) = v100;
          operator delete(v100);
        }
        v97 = v99;
      }
      while (v99 != v96);
      v98 = v209;
    }
    v210 = v96;
    operator delete(v98);
  }
  v102 = v212;
  if (v212)
  {
    v103 = v213;
    v104 = v212;
    if (v213 != v212)
    {
      v105 = v213;
      do
      {
        v107 = (void *)*(v105 - 3);
        v105 -= 3;
        v106 = v107;
        if (v107)
        {
          *(v103 - 2) = v106;
          operator delete(v106);
        }
        v103 = v105;
      }
      while (v105 != v102);
      v104 = v212;
    }
    v213 = v102;
    operator delete(v104);
  }
  return IsUnsat;
}

void sub_22DAD7334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (__p)
  {
    operator delete(__p);
    if (!a19)
    {
LABEL_3:
      if (!a10)
      {
LABEL_8:
        std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v35 - 136));
        std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v35 - 112));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a10);
      std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v35 - 136));
      std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v35 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!a19)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if (!a10)
    goto LABEL_8;
  goto LABEL_7;
}

void **std::vector<BOOL>::vector(void **a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = ((a2 - 1) >> 6) + 1;
    *a1 = operator new(8 * v6);
    a1[1] = 0;
    a1[2] = (void *)v6;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](a1, a2, *a3);
  }
  return a1;
}

uint64_t operations_research::sat::CpModelPresolver::PresolveAutomaton(operations_research::sat::CpModelPresolver *this, operations_research::sat::ConstraintProto *a2)
{
  uint64_t v3;
  operations_research::sat::CpModelPresolver *v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::Arena **v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  __int128 v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  char *v51;
  char *v52;
  size_t v53;
  uint64_t **v54;
  uint64_t **v55;
  unint64_t v56;
  uint64_t **v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t **v60;
  uint64_t **v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  BOOL v84;
  _QWORD *v85;
  char *v86;
  uint64_t *v87;
  uint64_t **v88;
  uint64_t **v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  _QWORD *v97;
  void **v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  char *v104;
  char *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  BOOL v113;
  _QWORD *v114;
  char *v115;
  char *v116;
  _QWORD *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  BOOL v121;
  _QWORD *v122;
  void **v123;
  void **v124;
  void **v125;
  void *v126;
  uint64_t *v127;
  char *v128;
  uint64_t *v129;
  uint64_t **v130;
  uint64_t **v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  _QWORD *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  operations_research::sat::PresolveContext *v142;
  unsigned int v143;
  char v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  void *v148;
  _QWORD *v149;
  char *v150;
  char *v151;
  char *v152;
  int v153;
  uint64_t v154;
  operations_research::sat::PresolveContext **v155;
  void *v156[3];
  BOOL v157;
  void *v158;
  void *v159;
  uint64_t v160;
  void *v161;
  _QWORD *v162;
  char *v163;
  void *v164;
  void *__p;
  uint64_t **v166;
  void *v167;
  __int128 v168;
  _BYTE v169[24];
  char *v170;
  char *v171;
  char *v172;

  if (*(_BYTE *)(*((_QWORD *)this + 2) + 504) || *((_DWORD *)a2 + 4))
    return 0;
  v5 = this;
  if (*((_DWORD *)a2 + 15) == 17)
  {
    v6 = *((_QWORD *)a2 + 6);
    if (!*(_DWORD *)(v6 + 112))
      return 0;
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a2);
    *((_DWORD *)a2 + 15) = 17;
    v7 = *((_QWORD *)a2 + 1);
    v8 = (google::protobuf::Arena **)(v7 & 0xFFFFFFFFFFFFFFFELL);
    if ((v7 & 1) != 0)
    {
      v6 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>(*v8);
      *((_QWORD *)a2 + 6) = v6;
      if (!*(_DWORD *)(v6 + 112))
        return 0;
    }
    else
    {
      v6 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::AutomatonConstraintProto>((google::protobuf::Arena *)v8);
      *((_QWORD *)a2 + 6) = v6;
      if (!*(_DWORD *)(v6 + 112))
        return 0;
    }
  }
  if (!*(_DWORD *)(v6 + 88))
    return 0;
  v9 = 0;
  v10 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v155 = (operations_research::sat::PresolveContext **)v5;
  while (1)
  {
    v12 = &operations_research::sat::_AutomatonConstraintProto_default_instance_;
    if (*((_DWORD *)a2 + 15) == 17)
      v12 = (uint64_t *)*((_QWORD *)a2 + 6);
    v13 = *(_DWORD *)(v12[15] + 4 * v10);
    v14 = ~v13 <= v13 ? *(_DWORD *)(v12[15] + 4 * v10) : ~v13;
    operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)v5 + 2), v14, (uint64_t)v169);
    if (v9 >= v172)
    {
      v16 = v170;
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v170) >> 3);
      v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v172 - v170) >> 3) > v18)
        v18 = 0x5555555555555556 * ((v172 - v170) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v172 - v170) >> 3) >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      if (v19)
      {
        if (v19 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v20 = (char *)operator new(24 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * ((v9 - v16) >> 3)];
      *(_OWORD *)v21 = *(_OWORD *)v169;
      *((_QWORD *)v21 + 2) = *(_QWORD *)&v169[16];
      if (v9 == v16)
      {
        v24 = v9;
        v9 = v21 + 24;
        v170 = &v20[24 * v17];
        v171 = v21 + 24;
        v172 = &v20[24 * v19];
        v5 = (operations_research::sat::CpModelPresolver *)v155;
        if (!v24)
          goto LABEL_35;
LABEL_34:
        operator delete(v24);
        goto LABEL_35;
      }
      v22 = &v20[24 * v17];
      do
      {
        v23 = *(_OWORD *)(v9 - 24);
        *((_QWORD *)v22 - 1) = *((_QWORD *)v9 - 1);
        *(_OWORD *)(v22 - 24) = v23;
        v22 -= 24;
        v9 -= 24;
      }
      while (v9 != v16);
      v24 = v170;
      v9 = v21 + 24;
      v170 = v22;
      v171 = v21 + 24;
      v172 = &v20[24 * v19];
      v5 = (operations_research::sat::CpModelPresolver *)v155;
      if (v24)
        goto LABEL_34;
    }
    else
    {
      v15 = *(_OWORD *)v169;
      *((_QWORD *)v9 + 2) = *(_QWORD *)&v169[16];
      *(_OWORD *)v9 = v15;
      v9 += 24;
      v5 = (operations_research::sat::CpModelPresolver *)v155;
    }
LABEL_35:
    v171 = v9;
    if (*(_DWORD *)v169 == v13 || v10 && *(_OWORD *)&v169[8] != *(_OWORD *)&v170[24 * (v10 - 1) + 8])
      break;
    ++v10;
    v11 = *(int *)(v6 + 112);
    if (v10 >= v11)
    {
      v31 = v170;
      if ((int)v11 >= 1)
      {
        v32 = 0;
        v33 = *(_QWORD *)(v6 + 120);
        v34 = v170;
        do
        {
          v35 = *(_DWORD *)v34;
          v34 += 24;
          *(_DWORD *)(v33 + 4 * v32++) = v35;
        }
        while (v32 < *(int *)(v6 + 112));
      }
      v36 = *(unsigned int *)(v6 + 40);
      if ((int)v36 >= 1)
      {
        v37 = 0;
        v38 = 0;
        v39 = *((_QWORD *)v31 + 1);
        v40 = *((_QWORD *)v31 + 2);
        v41 = *(_QWORD *)(v6 + 96);
        do
        {
          v44 = *(_QWORD *)(v41 + 8 * v37);
          v45 = (v44 - v40) / v39;
          if (v40 + v45 * v39 == v44)
          {
            if (v37 == v38)
            {
              v43 = v38;
            }
            else
            {
              v42 = 8 * v38;
              *(_QWORD *)(*(_QWORD *)(v6 + 48) + v42) = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v37);
              v43 = v38;
              *(_QWORD *)(*(_QWORD *)(v6 + 72) + v42) = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8 * v37);
            }
            *(_QWORD *)(v41 + 8 * v43) = v45;
            ++v38;
          }
          ++v37;
        }
        while (v36 != v37);
        if (v38 < (int)v36)
        {
          *(_DWORD *)(v6 + 40) = v38;
          if (*(int *)(v6 + 88) >= 1)
            *(_DWORD *)(v6 + 88) = v38;
          if (*(int *)(v6 + 64) >= 1)
            *(_DWORD *)(v6 + 64) = v38;
          v70 = *((_QWORD *)v5 + 2);
          *(_QWORD *)v169 = operator new(0x28uLL);
          *(_OWORD *)&v169[8] = xmmword_22DCE6530;
          strcpy(*(char **)v169, "automaton: remove invalid transitions");
          operations_research::sat::PresolveContext::UpdateRuleStats(v70, (uint64_t)v169);
          if ((v169[23] & 0x80000000) != 0)
            operator delete(*(void **)v169);
        }
      }
      v71 = *((_QWORD *)v5 + 2);
      *(_QWORD *)v169 = operator new(0x28uLL);
      *(_OWORD *)&v169[8] = xmmword_22DCE7540;
      strcpy(*(char **)v169, "automaton: unscale all affine labels");
      operations_research::sat::PresolveContext::UpdateRuleStats(v71, (uint64_t)v169);
      if ((v169[23] & 0x80000000) != 0)
        operator delete(*(void **)v169);
      v3 = 1;
      goto LABEL_219;
    }
  }
  operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)**(unsigned int **)(v6 + 120), (unint64_t *)v169);
  if (*(int *)(v6 + 112) > 1)
  {
    v25 = 1;
    do
    {
      operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)v5 + 2), (const char *)*(unsigned int *)(*(_QWORD *)(v6 + 120) + 4 * v25), (unint64_t *)&v164);
      operations_research::Domain::UnionWith((operations_research::Domain *)v169, (const operations_research::Domain *)&v164, (unint64_t *)&v167);
      if ((v169[0] & 1) != 0)
        operator delete(*(void **)&v169[8]);
      *(_QWORD *)v169 = v167;
      *(_OWORD *)&v169[8] = v168;
      v167 = 0;
      if ((v164 & 1) != 0)
        operator delete(__p);
      ++v25;
    }
    while (v25 < *(int *)(v6 + 112));
  }
  LODWORD(v26) = *(_DWORD *)(v6 + 40);
  if ((int)v26 < 1)
  {
    v28 = 0;
  }
  else
  {
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * v27);
      if (operations_research::Domain::Contains((operations_research::Domain *)v169, v29))
      {
        if (v27 != v28)
        {
          v30 = 8 * v28;
          *(_QWORD *)(*(_QWORD *)(v6 + 48) + v30) = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v27);
          *(_QWORD *)(*(_QWORD *)(v6 + 96) + v30) = v29;
          *(_QWORD *)(*(_QWORD *)(v6 + 72) + v30) = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8 * v27);
        }
        ++v28;
      }
      ++v27;
      v26 = *(int *)(v6 + 40);
    }
    while (v27 < v26);
  }
  if (v28 < (int)v26)
  {
    if ((int)v26 >= 1)
      *(_DWORD *)(v6 + 40) = v28;
    if (*(int *)(v6 + 88) >= 1)
      *(_DWORD *)(v6 + 88) = v28;
    if (*(int *)(v6 + 64) >= 1)
      *(_DWORD *)(v6 + 64) = v28;
    v46 = *((_QWORD *)v5 + 2);
    v167 = operator new(0x28uLL);
    v168 = xmmword_22DCE6530;
    strcpy((char *)v167, "automaton: remove invalid transitions");
    operations_research::sat::PresolveContext::UpdateRuleStats(v46, (uint64_t)&v167);
    if (SHIBYTE(v168) < 0)
    {
      v47 = v167;
      goto LABEL_215;
    }
    goto LABEL_216;
  }
  v48 = *(int *)(v6 + 112);
  v49 = *(unsigned int *)(v6 + 112);
  v50 = *(const void **)(v6 + 120);
  v168 = 0uLL;
  v167 = 0;
  if ((_DWORD)v48)
  {
    if ((v49 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v51 = (char *)operator new(4 * v48);
    v52 = &v51[4 * v48];
    v167 = v51;
    *((_QWORD *)&v168 + 1) = v52;
    memcpy(v51, v50, 4 * v48);
    *(_QWORD *)&v168 = v52;
  }
  v164 = 0;
  __p = 0;
  v166 = 0;
  v53 = 24 * (v49 + 1);
  v54 = (uint64_t **)operator new(v53);
  v55 = v54;
  v56 = 0;
  v164 = v54;
  v166 = &v54[v53 / 8];
  do
  {
    v57 = &v54[v56 / 8];
    v57[2] = 0;
    v54[v56 / 8 + 1] = 0;
    *v57 = (uint64_t *)&v54[v56 / 8 + 1];
    v56 += 24;
  }
  while (v53 != v56);
  __p = &v54[v53 / 8];
  v58 = *(_QWORD *)(v6 + 136);
  v60 = v54 + 1;
  v59 = v54[1];
  if (v59)
  {
    while (1)
    {
      while (1)
      {
        v61 = (uint64_t **)v59;
        v62 = v59[4];
        if (v58 >= v62)
          break;
        v59 = *v61;
        v60 = v61;
        if (!*v61)
          goto LABEL_88;
      }
      if (v62 >= v58)
        break;
      v59 = v61[1];
      if (!v59)
      {
        v60 = v61 + 1;
        goto LABEL_88;
      }
    }
  }
  else
  {
    v61 = v54 + 1;
LABEL_88:
    v63 = (uint64_t *)operator new(0x28uLL);
    v63[4] = v58;
    *v63 = 0;
    v63[1] = 0;
    v63[2] = (uint64_t)v61;
    *v60 = v63;
    v64 = (uint64_t *)**v55;
    if (v64)
    {
      *v55 = v64;
      v63 = *v60;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v55[1], v63);
    v55[2] = (uint64_t *)((char *)v55[2] + 1);
  }
  std::set<long long>::set[abi:ne180100]<long long const*>((_QWORD **)&v161, *(uint64_t **)(v6 + 24), (uint64_t *)(*(_QWORD *)(v6 + 24) + 8 * *(int *)(v6 + 16)));
  v65 = (char *)v164 + 24 * (int)v48;
  v66 = v65 + 8;
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v65, *((_QWORD **)v65 + 1));
  *(_QWORD *)v65 = v161;
  v67 = v162;
  *((_QWORD *)v65 + 1) = v162;
  v68 = v163;
  *((_QWORD *)v65 + 2) = v163;
  v154 = v48;
  if (v68)
  {
    v69 = 0;
    v67[2] = v66;
    v161 = &v162;
    v162 = 0;
    v163 = 0;
  }
  else
  {
    *(_QWORD *)v65 = v66;
    v69 = v162;
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v161, v69);
  v153 = v49;
  if ((int)v49 < 2)
  {
LABEL_133:
    v161 = 0;
    v162 = 0;
    v163 = 0;
    v93 = v154;
    if (!v153)
      goto LABEL_204;
    if ((v154 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  else
  {
    LODWORD(v72) = *(_DWORD *)(v6 + 40);
    if ((int)v72 > 0)
    {
      v73 = 0;
      v74 = 1;
      do
      {
        if ((int)v72 >= 1 && *((_QWORD *)v164 + 3 * v73 + 1))
        {
          v75 = 0;
          do
          {
            v76 = (char *)v164 + 24 * v73;
            v79 = (_QWORD *)*((_QWORD *)v76 + 1);
            v77 = v76 + 8;
            v78 = v79;
            if (v79)
            {
              v80 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v75);
              v81 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8 * v75);
              v82 = v77;
              do
              {
                v83 = v78[4];
                v84 = v83 < v80;
                if (v83 >= v80)
                  v85 = v78;
                else
                  v85 = v78 + 1;
                if (!v84)
                  v82 = (char *)v78;
                v78 = (_QWORD *)*v85;
              }
              while (*v85);
              if (v82 != v77
                && v80 >= *((_QWORD *)v82 + 4)
                && operations_research::sat::PresolveContext::DomainContains(v155[2], *((_DWORD *)v167 + v73), *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * v75)))
              {
                v86 = (char *)v164 + 24 * v74;
                v88 = (uint64_t **)(v86 + 8);
                v87 = (uint64_t *)*((_QWORD *)v86 + 1);
                if (v87)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v89 = (uint64_t **)v87;
                      v90 = v87[4];
                      if (v81 >= v90)
                        break;
                      v87 = *v89;
                      v88 = v89;
                      if (!*v89)
                        goto LABEL_131;
                    }
                    if (v90 >= v81)
                      break;
                    v87 = v89[1];
                    if (!v87)
                    {
                      v88 = v89 + 1;
                      goto LABEL_131;
                    }
                  }
                }
                else
                {
                  v89 = (uint64_t **)(v86 + 8);
LABEL_131:
                  v91 = (uint64_t *)operator new(0x28uLL);
                  v91[4] = v81;
                  *v91 = 0;
                  v91[1] = 0;
                  v91[2] = (uint64_t)v89;
                  *v88 = v91;
                  v92 = **(_QWORD **)v86;
                  if (v92)
                  {
                    *(_QWORD *)v86 = v92;
                    v91 = *v88;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v86 + 1), v91);
                  ++*((_QWORD *)v86 + 2);
                }
              }
            }
            ++v75;
            v72 = *(int *)(v6 + 40);
          }
          while (v75 < v72);
        }
        ++v73;
        ++v74;
      }
      while (v73 != (_DWORD)v49 - 1);
      goto LABEL_133;
    }
    v161 = 0;
    v162 = 0;
    v163 = 0;
    v93 = v48;
  }
  v94 = 24 * v93;
  v161 = operator new(24 * v93);
  v162 = v161;
  v95 = (char *)v161 + 24 * v93;
  v163 = v95;
  v96 = (char *)v161 + 8;
  do
  {
    *v96 = 0;
    v96[1] = 0;
    *(v96 - 1) = v96;
    v96 += 3;
    v94 -= 24;
  }
  while (v94);
  v162 = v95;
  if ((int)v93 < 1)
    goto LABEL_204;
  while (2)
  {
    v99 = v93 - 1;
    v159 = 0;
    v160 = 0;
    v158 = &v159;
    v100 = v164;
    if (*(int *)(v6 + 40) < 1)
    {
      v101 = 0;
      goto LABEL_148;
    }
    v101 = *((_QWORD *)v164 + 3 * v99 + 1);
    if (!v101)
    {
LABEL_148:
      v103 = &v159;
      goto LABEL_192;
    }
    v102 = 0;
    do
    {
      v104 = (char *)v164 + 24 * v99;
      v107 = (_QWORD *)*((_QWORD *)v104 + 1);
      v105 = v104 + 8;
      v106 = v107;
      if (v107)
      {
        v108 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v102);
        v109 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * v102);
        v110 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8 * v102);
        v111 = v105;
        do
        {
          v112 = v106[4];
          v113 = v112 < v108;
          if (v112 >= v108)
            v114 = v106;
          else
            v114 = v106 + 1;
          if (!v113)
            v111 = (char *)v106;
          v106 = (_QWORD *)*v114;
        }
        while (*v114);
        if (v111 != v105
          && v108 >= *((_QWORD *)v111 + 4)
          && operations_research::sat::PresolveContext::DomainContains(v155[2], *((_DWORD *)v167 + v99), *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * v102)))
        {
          v115 = (char *)v164 + 24 * v93;
          v118 = (_QWORD *)*((_QWORD *)v115 + 1);
          v116 = v115 + 8;
          v117 = v118;
          if (v118)
          {
            v119 = v116;
            do
            {
              v120 = v117[4];
              v121 = v120 < v110;
              if (v120 >= v110)
                v122 = v117;
              else
                v122 = v117 + 1;
              if (!v121)
                v119 = (char *)v117;
              v117 = (_QWORD *)*v122;
            }
            while (*v122);
            if (v119 != v116 && v110 >= *((_QWORD *)v119 + 4))
            {
              v123 = (void **)v159;
              v124 = &v159;
              v125 = &v159;
              if (v159)
              {
                while (1)
                {
                  while (1)
                  {
                    v125 = v123;
                    v126 = v123[4];
                    if (v108 >= (uint64_t)v126)
                      break;
                    v123 = (void **)*v125;
                    v124 = v125;
                    if (!*v125)
                      goto LABEL_179;
                  }
                  if ((uint64_t)v126 >= v108)
                    break;
                  v123 = (void **)v125[1];
                  if (!v123)
                  {
                    v124 = v125 + 1;
                    goto LABEL_179;
                  }
                }
              }
              else
              {
LABEL_179:
                v127 = (uint64_t *)operator new(0x28uLL);
                v127[4] = v108;
                *v127 = 0;
                v127[1] = 0;
                v127[2] = (uint64_t)v125;
                *v124 = v127;
                if (*(_QWORD *)v158)
                {
                  v158 = *(void **)v158;
                  v127 = (uint64_t *)*v124;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v159, v127);
                ++v160;
              }
              v128 = (char *)v161 + 24 * v99;
              v130 = (uint64_t **)(v128 + 8);
              v129 = (uint64_t *)*((_QWORD *)v128 + 1);
              if (v129)
              {
                while (1)
                {
                  while (1)
                  {
                    v131 = (uint64_t **)v129;
                    v132 = v129[4];
                    if (v109 >= v132)
                      break;
                    v129 = *v131;
                    v130 = v131;
                    if (!*v131)
                      goto LABEL_189;
                  }
                  if (v132 >= v109)
                    break;
                  v129 = v131[1];
                  if (!v129)
                  {
                    v130 = v131 + 1;
                    goto LABEL_189;
                  }
                }
              }
              else
              {
                v131 = (uint64_t **)(v128 + 8);
LABEL_189:
                v133 = (uint64_t *)operator new(0x28uLL);
                v133[4] = v109;
                *v133 = 0;
                v133[1] = 0;
                v133[2] = (uint64_t)v131;
                *v130 = v133;
                v134 = **(_QWORD **)v128;
                if (v134)
                {
                  *(_QWORD *)v128 = v134;
                  v133 = *v130;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v128 + 1), v133);
                ++*((_QWORD *)v128 + 2);
              }
            }
          }
        }
      }
      ++v102;
    }
    while (v102 < *(int *)(v6 + 40));
    v100 = v164;
    v103 = v158;
    v101 = v160;
LABEL_192:
    v135 = (uint64_t)v100 + 24 * v99;
    v136 = *(void **)v135;
    *(_QWORD *)v135 = v103;
    v158 = v136;
    v137 = (_QWORD *)(v135 + 8);
    v138 = *(void **)(v135 + 8);
    *(_QWORD *)(v135 + 8) = v159;
    v159 = v138;
    v139 = *(_QWORD *)(v135 + 16);
    *(_QWORD *)(v135 + 16) = v101;
    v160 = v139;
    if (*(_QWORD *)(v135 + 16))
      v135 = *v137 + 16;
    *(_QWORD *)v135 = v137;
    v97 = v159;
    v98 = (void **)((char *)v159 + 16);
    if (!v139)
      v98 = &v158;
    *v98 = &v159;
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v158, v97);
    v84 = v93-- <= 1;
    if (!v84)
      continue;
    break;
  }
  v140 = 0;
  v157 = 0;
  v141 = (unsigned int *)v167;
  while (1)
  {
    v142 = v155[2];
    v143 = *v141++;
    std::vector<long long>::vector<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,0>(v156, *(_QWORD **)((char *)v161 + v140), (char *)v161 + v140 + 8);
    operations_research::Domain::FromValues((int64_t **)v156, (unint64_t *)&v158);
    v144 = operations_research::sat::PresolveContext::IntersectDomainWith(v142, (const char *)v143, (const operations_research::Domain *)&v158, &v157);
    if ((v158 & 1) != 0)
      operator delete(v159);
    if (v156[0])
    {
      v156[1] = v156[0];
      operator delete(v156[0]);
    }
    if ((v144 & 1) == 0)
      break;
    v140 += 24;
    if (24 * v154 == v140)
    {
      if (v157)
      {
        v145 = (uint64_t)v155[2];
        std::string::basic_string[abi:ne180100]<0>(&v158, "automaton: reduced variable domains");
        operations_research::sat::PresolveContext::UpdateRuleStats(v145, (uint64_t)&v158);
        if (SHIBYTE(v160) < 0)
          operator delete(v158);
      }
      break;
    }
  }
LABEL_204:
  v146 = v161;
  if (v161)
  {
    v147 = v162;
    v148 = v161;
    if (v162 != v161)
    {
      do
      {
        v149 = v147 - 3;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(v147 - 3), (_QWORD *)*(v147 - 2));
        v147 = v149;
      }
      while (v149 != v146);
      v148 = v161;
    }
    v162 = v146;
    operator delete(v148);
  }
  v150 = (char *)v164;
  if (v164)
  {
    v151 = (char *)__p;
    if (__p != v164)
    {
      do
      {
        v152 = v151 - 24;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(v151 - 24), *((_QWORD **)v151 - 2));
        v151 = v152;
      }
      while (v152 != v150);
      v150 = (char *)v164;
    }
    operator delete(v150);
  }
  v47 = v167;
  if (v167)
LABEL_215:
    operator delete(v47);
LABEL_216:
  if ((v169[0] & 1) != 0)
    operator delete(*(void **)&v169[8]);
  v3 = 0;
  v31 = v170;
LABEL_219:
  if (v31)
  {
    v171 = v31;
    operator delete(v31);
  }
  return v3;
}

void sub_22DAD82EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;

  if (a21 < 0)
    operator delete(__p);
  std::vector<std::set<long long>>::~vector[abi:ne180100]((void **)&a22);
  std::vector<std::set<long long>>::~vector[abi:ne180100](&a25);
  if (a28)
    operator delete(a28);
  if ((*(_BYTE *)(v33 - 136) & 1) != 0)
    operator delete(*(void **)(v33 - 128));
  v35 = *(void **)(v33 - 112);
  if (v35)
  {
    *(_QWORD *)(v33 - 104) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::set<long long>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::CpModelPresolver::ExtractBoolAnd(operations_research::sat::CpModelPresolver *this)
{
  operations_research::sat::PresolveContext *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  int *v40;
  uint64_t v41;
  int *v42;
  int *v43;
  char *v44;
  void *__p;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v44 = 0;
  __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v46 = 0u;
  v47 = 0u;
  v48 = 0;
  v2 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  v3 = *(unsigned int *)(*((_QWORD *)v2 + 6) + 48);
  v42 = 0;
  v43 = 0;
  if ((int)v3 >= 1)
  {
    v4 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v4 + 8);
      if (*(_DWORD *)(v7 + 16))
        goto LABEL_5;
      v8 = *(_DWORD *)(v7 + 60);
      if (v8 == 26)
      {
        v18 = *(_QWORD *)(v7 + 48);
        if (*(_DWORD *)(v18 + 16) != 2)
          goto LABEL_5;
        v10 = v43;
        if (v43 >= (int *)v44)
        {
          v11 = v42;
          v19 = v43 - v42;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62)
LABEL_61:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v21 = v44 - (char *)v42;
          if ((v44 - (char *)v42) >> 1 > v20)
            v20 = v21 >> 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v20;
          if (v15)
          {
            if (v15 >> 62)
LABEL_62:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v16 = (char *)operator new(4 * v15);
            v17 = &v16[4 * v19];
            *(_DWORD *)v17 = v4;
            v5 = (uint64_t)(v17 + 4);
            if (v43 == v42)
              goto LABEL_48;
LABEL_42:
            v31 = (char *)(v43 - 1) - (char *)v42;
            if (v31 < 0x2C)
              goto LABEL_65;
            if ((unint64_t)((char *)v42 - v16) < 0x20)
              goto LABEL_65;
            v32 = (v31 >> 2) + 1;
            v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
            v34 = &v43[v33 / 0xFFFFFFFFFFFFFFFCLL];
            v17 -= v33;
            v35 = &v16[4 * v19 - 16];
            v36 = v43 - 4;
            v37 = v32 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v38 = *(_OWORD *)v36;
              *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
              *(_OWORD *)v35 = v38;
              v35 -= 32;
              v36 -= 8;
              v37 -= 8;
            }
            while (v37);
            v10 = v34;
            if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_65:
              do
              {
                v39 = *--v10;
                *((_DWORD *)v17 - 1) = v39;
                v17 -= 4;
              }
              while (v10 != v42);
            }
          }
          else
          {
            v16 = 0;
            v17 = (char *)(4 * v19);
            *(_DWORD *)(4 * v19) = v4;
            v5 = 4 * v19 + 4;
            if (v43 != v42)
              goto LABEL_42;
          }
LABEL_48:
          v42 = (int *)v17;
          v44 = &v16[4 * v15];
          if (v11)
            operator delete(v11);
          goto LABEL_4;
        }
      }
      else
      {
        if (v8 != 3)
          goto LABEL_5;
        v9 = *(_QWORD *)(v7 + 48);
        if (*(_DWORD *)(v9 + 16) != 2)
          goto LABEL_5;
        v10 = v43;
        if (v43 >= (int *)v44)
        {
          v11 = v42;
          v12 = v43 - v42;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
            goto LABEL_61;
          v14 = v44 - (char *)v42;
          if ((v44 - (char *)v42) >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            if (v15 >> 62)
              goto LABEL_62;
            v16 = (char *)operator new(4 * v15);
            v17 = &v16[4 * v12];
            *(_DWORD *)v17 = v4;
            v5 = (uint64_t)(v17 + 4);
            if (v43 == v42)
              goto LABEL_48;
          }
          else
          {
            v16 = 0;
            v17 = (char *)(4 * v12);
            *(_DWORD *)(4 * v12) = v4;
            v5 = 4 * v12 + 4;
            if (v43 == v42)
              goto LABEL_48;
          }
          v22 = (char *)(v43 - 1) - (char *)v42;
          if (v22 < 0x2C)
            goto LABEL_66;
          if ((unint64_t)((char *)v42 - v16) < 0x20)
            goto LABEL_66;
          v23 = (v22 >> 2) + 1;
          v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
          v25 = &v43[v24 / 0xFFFFFFFFFFFFFFFCLL];
          v17 -= v24;
          v26 = &v16[4 * v12 - 16];
          v27 = v43 - 4;
          v28 = v23 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v29 = *(_OWORD *)v27;
            *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
            *(_OWORD *)v26 = v29;
            v26 -= 32;
            v27 -= 8;
            v28 -= 8;
          }
          while (v28);
          v10 = v25;
          if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_66:
            do
            {
              v30 = *--v10;
              *((_DWORD *)v17 - 1) = v30;
              v17 -= 4;
            }
            while (v10 != v42);
          }
          goto LABEL_48;
        }
      }
      *v10 = v4;
      v5 = (uint64_t)(v10 + 1);
LABEL_4:
      v43 = (int *)v5;
LABEL_5:
      if (++v4 == v3)
      {
        v2 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
        break;
      }
    }
  }
  operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(v2);
  v40 = v42;
  if (v42 != v43)
  {
    do
    {
      v41 = *v40;
      operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 56) + 8 * v41 + 8));
      operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), v41);
      ++v40;
    }
    while (v40 != v43);
    v40 = v42;
  }
  if (v40)
    operator delete(v40);
  if ((_QWORD)v47)
  {
    operator delete(__p);
    __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v48 = 0;
    *(_QWORD *)&v47 = 0;
    v46 = 0uLL;
  }
  if (*((_QWORD *)&v47 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v47 + 1));
}

void sub_22DAD88C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  absl::lts_2020_02_25::flat_hash_map<int,int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::~flat_hash_map((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void operations_research::sat::`anonymous namespace'::AddImplication(int a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t k;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t j;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t m;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  int *v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  google::protobuf::Arena *v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  google::protobuf::Arena *v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned int *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  google::protobuf::Arena *v81;

  v8 = 0;
  v9 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + a1)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + a1));
  v10 = *a4;
  v11 = (unint64_t)*a4 >> 12;
  v12 = v11 ^ (v9 >> 7);
  v13 = a4[3];
  v14 = 0x101010101010101 * (v9 & 0x7F);
  for (i = v12; ; i = v8 + v16)
  {
    v16 = i & v13;
    v17 = *(_QWORD *)(v10 + (i & v13));
    v18 = ((v17 ^ v14) - 0x101010101010101) & ~(v17 ^ v14) & 0x8080808080808080;
    if (v18)
      break;
LABEL_6:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0)
      goto LABEL_9;
    v8 += 8;
  }
  v19 = a4[1];
  while (1)
  {
    v20 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v13;
    if (*(_DWORD *)(v19 + 8 * v20) == a1)
      break;
    v18 &= v18 - 1;
    if (!v18)
      goto LABEL_6;
  }
  if (v20 != v13)
  {
    for (j = 0; ; v12 = j + v40)
    {
      v40 = v12 & v13;
      v41 = *(_QWORD *)(v10 + v40);
      v42 = ((v41 ^ v14) - 0x101010101010101) & ~(v41 ^ v14) & 0x8080808080808080;
      if (v42)
        break;
LABEL_28:
      if ((v41 & (~v41 << 6) & 0x8080808080808080) != 0)
      {
        v43 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(a4, v9);
        v19 = a4[1];
        v65 = (_DWORD *)(v19 + 8 * v43);
        *v65 = a1;
        v65[1] = 0;
        goto LABEL_55;
      }
      j += 8;
    }
    while (1)
    {
      v43 = (v40 + (__clz(__rbit64(v42)) >> 3)) & v13;
      if (*(_DWORD *)(v19 + 8 * v43) == a1)
        break;
      v42 &= v42 - 1;
      if (!v42)
        goto LABEL_28;
    }
LABEL_55:
    v66 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * *(int *)(v19 + 8 * v43 + 4) + 8);
    if (*(_DWORD *)(v66 + 60) == 4)
    {
      v67 = *(_QWORD *)(v66 + 48);
      v69 = *(unsigned int *)(v67 + 16);
      v68 = (unsigned int *)(v67 + 16);
      v70 = v69 + 1;
      if ((_DWORD)v69 != *(_DWORD *)(v67 + 20))
        goto LABEL_62;
    }
    else
    {
      operations_research::sat::ConstraintProto::clear_constraint(v66);
      *(_DWORD *)(v66 + 60) = 4;
      v71 = *(_QWORD *)(v66 + 8);
      v72 = (google::protobuf::Arena *)(v71 & 0xFFFFFFFFFFFFFFFELL);
      if ((v71 & 1) != 0)
        v72 = *(google::protobuf::Arena **)v72;
      v67 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v72);
      *(_QWORD *)(v66 + 48) = v67;
      v69 = *(unsigned int *)(v67 + 16);
      v68 = (unsigned int *)(v67 + 16);
      v70 = v69 + 1;
      if ((_DWORD)v69 != *(_DWORD *)(v67 + 20))
        goto LABEL_62;
    }
    google::protobuf::RepeatedField<int>::Reserve(v68, v70);
LABEL_62:
    *(_DWORD *)(*(_QWORD *)(v67 + 24) + 4 * v69) = a2;
    *(_DWORD *)(v67 + 16) = v70;
    return;
  }
LABEL_9:
  v21 = 0;
  v22 = ~a2;
  v23 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v22)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v22));
  v24 = v11 ^ (v23 >> 7);
  v25 = 0x101010101010101 * (v23 & 0x7F);
  for (k = v24; ; k = v21 + v27)
  {
    v27 = k & v13;
    v28 = *(_QWORD *)(v10 + (k & v13));
    v29 = ((v28 ^ v25) - 0x101010101010101) & ~(v28 ^ v25) & 0x8080808080808080;
    if (v29)
      break;
LABEL_14:
    if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0)
      goto LABEL_17;
    v21 += 8;
  }
  v30 = a4[1];
  while (1)
  {
    v31 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v13;
    if (*(_DWORD *)(v30 + 8 * v31) == v22)
      break;
    v29 &= v29 - 1;
    if (!v29)
      goto LABEL_14;
  }
  if (v31 == v13)
  {
LABEL_17:
    v32 = 0;
    v33 = *(_DWORD *)(a3 + 48);
    while (1)
    {
      v34 = v12 & v13;
      v35 = *(_QWORD *)(v10 + v34);
      v36 = ((v35 ^ v14) - 0x101010101010101) & ~(v35 ^ v14) & 0x8080808080808080;
      if (v36)
        break;
LABEL_22:
      if ((v35 & (~v35 << 6) & 0x8080808080808080) != 0)
      {
        v38 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(a4, v9);
        v37 = a4[1];
        v49 = (_DWORD *)(v37 + 8 * v38);
        *v49 = a1;
        v49[1] = 0;
        goto LABEL_37;
      }
      v32 += 8;
      v12 = v32 + v34;
    }
    v37 = a4[1];
    while (1)
    {
      v38 = (v34 + (__clz(__rbit64(v36)) >> 3)) & v13;
      if (*(_DWORD *)(v37 + 8 * v38) == a1)
        break;
      v36 &= v36 - 1;
      if (!v36)
        goto LABEL_22;
    }
LABEL_37:
    *(_DWORD *)(v37 + 8 * v38 + 4) = v33;
    v50 = *(int **)(a3 + 56);
    if (v50)
    {
      v51 = *(int *)(a3 + 48);
      v52 = *v50;
      if ((int)v51 < *v50)
      {
        *(_DWORD *)(a3 + 48) = v51 + 1;
        v53 = *(_QWORD *)&v50[2 * v51 + 2];
        v55 = *(unsigned int *)(v53 + 16);
        v54 = (unsigned int *)(v53 + 16);
        v56 = v55 + 1;
        if ((_DWORD)v55 != *(_DWORD *)(v53 + 20))
        {
LABEL_46:
          *(_DWORD *)(*(_QWORD *)(v53 + 24) + 4 * v55) = a1;
          *(_DWORD *)(v53 + 16) = v56;
          if (*(_DWORD *)(v53 + 60) == 4)
          {
            v59 = *(_QWORD *)(v53 + 48);
            v61 = *(unsigned int *)(v59 + 16);
            v60 = (unsigned int *)(v59 + 16);
            v62 = v61 + 1;
            if ((_DWORD)v61 != *(_DWORD *)(v59 + 20))
              goto LABEL_53;
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v53);
            *(_DWORD *)(v53 + 60) = 4;
            v63 = *(_QWORD *)(v53 + 8);
            v64 = (google::protobuf::Arena *)(v63 & 0xFFFFFFFFFFFFFFFELL);
            if ((v63 & 1) != 0)
              v64 = *(google::protobuf::Arena **)v64;
            v59 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v64);
            *(_QWORD *)(v53 + 48) = v59;
            v61 = *(unsigned int *)(v59 + 16);
            v60 = (unsigned int *)(v59 + 16);
            v62 = v61 + 1;
            if ((_DWORD)v61 != *(_DWORD *)(v59 + 20))
              goto LABEL_53;
          }
          google::protobuf::RepeatedField<int>::Reserve(v60, v62);
LABEL_53:
          *(_DWORD *)(*(_QWORD *)(v59 + 24) + 4 * v61) = a2;
          *(_DWORD *)(v59 + 16) = v62;
          return;
        }
LABEL_45:
        google::protobuf::RepeatedField<int>::Reserve(v54, v56);
        goto LABEL_46;
      }
      if (v52 != *(_DWORD *)(a3 + 52))
      {
LABEL_44:
        *v50 = v52 + 1;
        v53 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(a3 + 40));
        v57 = *(_QWORD *)(a3 + 56);
        v58 = *(int *)(a3 + 48);
        *(_DWORD *)(a3 + 48) = v58 + 1;
        *(_QWORD *)(v57 + 8 * v58 + 8) = v53;
        v55 = *(unsigned int *)(v53 + 16);
        v54 = (unsigned int *)(v53 + 16);
        v56 = v55 + 1;
        if ((_DWORD)v55 != *(_DWORD *)(v53 + 20))
          goto LABEL_46;
        goto LABEL_45;
      }
    }
    else
    {
      v52 = *(_DWORD *)(a3 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a3 + 40), v52 + 1);
    v50 = *(int **)(a3 + 56);
    v52 = *v50;
    goto LABEL_44;
  }
  for (m = 0; ; v24 = m + v45)
  {
    v45 = v24 & v13;
    v46 = *(_QWORD *)(v10 + (v24 & v13));
    v47 = ((v46 ^ v25) - 0x101010101010101) & ~(v46 ^ v25) & 0x8080808080808080;
    if (v47)
      break;
LABEL_34:
    if ((v46 & (~v46 << 6) & 0x8080808080808080) != 0)
    {
      v48 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::prepare_insert(a4, v23);
      v30 = a4[1];
      v73 = (int *)(v30 + 8 * v48);
      *v73 = v22;
      v73[1] = 0;
      goto LABEL_64;
    }
    m += 8;
  }
  while (1)
  {
    v48 = (v45 + (__clz(__rbit64(v47)) >> 3)) & v13;
    if (*(_DWORD *)(v30 + 8 * v48) == v22)
      break;
    v47 &= v47 - 1;
    if (!v47)
      goto LABEL_34;
  }
LABEL_64:
  v74 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * *(int *)(v30 + 8 * v48 + 4) + 8);
  if (*(_DWORD *)(v74 + 60) == 4)
  {
    v75 = *(_QWORD *)(v74 + 48);
    v76 = ~a1;
    v78 = *(unsigned int *)(v75 + 16);
    v77 = (unsigned int *)(v75 + 16);
    v79 = v78 + 1;
    if ((_DWORD)v78 != *(_DWORD *)(v75 + 20))
      goto LABEL_71;
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint(*(_QWORD *)(*(_QWORD *)(a3 + 56)
                                                                          + 8 * *(int *)(v30 + 8 * v48 + 4)
                                                                          + 8));
    *(_DWORD *)(v74 + 60) = 4;
    v80 = *(_QWORD *)(v74 + 8);
    v81 = (google::protobuf::Arena *)(v80 & 0xFFFFFFFFFFFFFFFELL);
    if ((v80 & 1) != 0)
      v81 = *(google::protobuf::Arena **)v81;
    v75 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v81);
    *(_QWORD *)(v74 + 48) = v75;
    v76 = ~a1;
    v78 = *(unsigned int *)(v75 + 16);
    v77 = (unsigned int *)(v75 + 16);
    v79 = v78 + 1;
    if ((_DWORD)v78 != *(_DWORD *)(v75 + 20))
      goto LABEL_71;
  }
  google::protobuf::RepeatedField<int>::Reserve(v77, v79);
LABEL_71:
  *(_DWORD *)(*(_QWORD *)(v75 + 24) + 4 * v78) = v76;
  *(_DWORD *)(v75 + 16) = v79;
}

void operations_research::sat::CpModelPresolver::Probe(operations_research::sat::CpModelPresolver *this)
{
  unint64_t *v2;
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t *p_p;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  operations_research::sat::SatParameters *v16;
  _QWORD *v17;
  uint64_t v18;
  std::vector<int> *v19;
  operations_research::sat::Model *v20;
  operations_research::sat::SatSolver *v21;
  uint64_t v22;
  operations_research::sat **v23;
  uint64_t v24;
  operations_research::sat **v25;
  uint64_t v26;
  operations_research::sat *v27;
  unint64_t v28;
  unint64_t v29;
  std::vector<int>::pointer begin;
  unint64_t v31;
  std::vector<int>::pointer v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  operations_research::sat::BinaryImplicationGraph *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  unint64_t v42;
  std::vector<int>::pointer v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  operations_research::sat::IntegerTrail *v52;
  uint64_t v53;
  const char *v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  unint64_t v62;
  std::vector<int>::pointer v63;
  uint64_t v64;
  unint64_t v65;
  __int128 *v66;
  unint64_t v67;
  __int128 *v68;
  char *v69;
  __int128 v70;
  char v71;
  char v72;
  _QWORD *v73;
  uint64_t *v74;
  void *v75;
  __int128 v76;
  void *v77;
  void *__p;
  uint64_t v79;
  _QWORD **v80;
  _QWORD *v81[2];
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;

  v2 = (unint64_t *)*((_QWORD *)this + 2);
  if (!*((_BYTE *)v2 + 504))
  {
    v3 = v2[6];
    if (*(int *)(v3 + 24) >= 1)
    {
      v4 = 0;
      do
      {
        operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v2, v4, (unint64_t *)&v77);
        v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 32) + 8 * (_QWORD)v4 + 8);
        *(_DWORD *)(v5 + 16) = 0;
        v6 = (unsigned int *)(v5 + 16);
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v5 + 16), (unint64_t)v77 >> 1);
        v7 = v77 & 1;
        if ((v77 & 1) != 0)
          p_p = (uint64_t *)__p;
        else
          p_p = (uint64_t *)&__p;
        if ((unint64_t)v77 >= 2)
        {
          v9 = &p_p[2 * ((unint64_t)v77 >> 1)];
          v10 = *(_DWORD *)(v5 + 16);
          do
          {
            v11 = *p_p;
            v12 = *(_DWORD *)(v5 + 20);
            v13 = v10 + 1;
            if (v10 == v12)
            {
              google::protobuf::RepeatedField<long long>::Reserve(v6, v10 + 1);
              v12 = *(_DWORD *)(v5 + 20);
            }
            v14 = *(_QWORD *)(v5 + 24);
            *(_QWORD *)(v14 + 8 * v10) = v11;
            *(_DWORD *)(v5 + 16) = v13;
            v15 = p_p[1];
            v10 += 2;
            if (v13 == v12)
            {
              google::protobuf::RepeatedField<long long>::Reserve(v6, v10);
              v14 = *(_QWORD *)(v5 + 24);
            }
            *(_QWORD *)(v14 + 8 * v13) = v15;
            *v6 = v10;
            p_p += 2;
          }
          while (p_p != v9);
          v7 = v77 & 1;
        }
        if (v7)
          operator delete(__p);
        ++v4;
        v2 = (unint64_t *)*((_QWORD *)this + 2);
        v3 = v2[6];
      }
      while ((uint64_t)v4 < *(int *)(v3 + 24));
    }
    v77 = 0;
    __p = 0;
    v81[0] = 0;
    v81[1] = 0;
    v79 = 0;
    v80 = v81;
    v83 = 0;
    v84 = 0;
    v82 = 0;
    v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)&v77);
    operations_research::sat::SatParameters::CopyFrom(v16, (const operations_research::sat::SatParameters *)(*(_QWORD *)this + 8));
    *((_DWORD *)v16 + 8) |= 0x80u;
    *((_BYTE *)v16 + 545) = 0;
    v17 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)&v77);
    operations_research::TimeLimit::MergeWithGlobalTimeLimit((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v17, *(_QWORD *)(*(_QWORD *)this + 584));
    v18 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)&v77);
    *(_BYTE *)(v18 + 16) = 0;
    v19 = (std::vector<int> *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)&v77);
    operations_research::sat::CpModelMapping::CreateVariables(v19, (const operations_research::sat::CpModelProto *)v3, 0, (operations_research::sat::Model *)&v77);
    operations_research::sat::CpModelMapping::DetectOptionalVariables((operations_research::sat::CpModelMapping *)v19, (const operations_research::sat::CpModelProto *)v3, (operations_research::sat::Model *)&v77);
    operations_research::sat::CpModelMapping::ExtractEncoding((operations_research::sat::CpModelMapping *)v19, v3, (operations_research::sat::Model *)&v77);
    v21 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)&v77);
    v22 = *(_QWORD *)(v3 + 56);
    if (v22)
      v23 = (operations_research::sat **)(v22 + 8);
    else
      v23 = 0;
    v24 = *(int *)(v3 + 48);
    if ((_DWORD)v24)
    {
      v25 = &v23[v24];
      do
      {
        v26 = 0;
        v27 = *v23;
        v28 = (unint64_t)*v23
            + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)*v23)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + (_QWORD)*v23)));
        v29 = ((v28 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v28);
        begin = v19[5].__begin_;
        v31 = (v29 >> 7) ^ ((unint64_t)begin >> 12);
        v32 = v19[6].__begin_;
        v33 = 0x101010101010101 * (v29 & 0x7F);
        while (1)
        {
          v34 = v31 & (unint64_t)v32;
          v35 = *(_QWORD *)((char *)begin + v34);
          v36 = ((v35 ^ v33) - 0x101010101010101) & ~(v35 ^ v33) & 0x8080808080808080;
          if (v36)
            break;
LABEL_28:
          if ((v35 & (~v35 << 6) & 0x8080808080808080) != 0)
            goto LABEL_31;
          v26 += 8;
          v31 = v26 + v34;
        }
        while (1)
        {
          v37 = (v34 + (__clz(__rbit64(v36)) >> 3)) & (unint64_t)v32;
          if (*(operations_research::sat **)&v19[5].__end_[2 * v37] == v27)
            break;
          v36 &= v36 - 1;
          if (!v36)
            goto LABEL_28;
        }
        if ((std::vector<int>::pointer)v37 == v32)
        {
LABEL_31:
          if ((operations_research::sat::LoadConstraint(v27, (const operations_research::sat::ConstraintProto *)&v77, v20) & 1) == 0)
          {
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v75, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3310);
            v73 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v75);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Check failed: LoadConstraint(ct, &model) ", 41);
            goto LABEL_98;
          }
          if (*((_BYTE *)v21 + 496))
            goto LABEL_49;
        }
        ++v23;
      }
      while (v23 != v25);
    }
    operations_research::sat::IntegerEncoder::AddAllImplicationsBetweenAssociatedLiterals((uint64_t *)v18);
    if ((operations_research::sat::SatSolver::Propagate(v21) & 1) == 0)
      goto LABEL_49;
    v38 = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)&v77);
    operations_research::sat::ProbeBooleanVariables((operations_research::sat *)&v77, 1.0, 0);
    v39 = *(_QWORD *)(*(_QWORD *)this + 584);
    if (v39)
      *(double *)(v39 + 112) = *((double *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)&v77)
                               + 14)
                             + *(double *)(v39 + 112);
    if (!*((_BYTE *)v21 + 496)
      && (operations_research::sat::BinaryImplicationGraph::DetectEquivalences(v38, 0) & 1) != 0)
    {
      LODWORD(v75) = *((_DWORD *)v21 + 76);
      v85 = 0;
      if ((_DWORD)v75)
      {
        v74 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v75, (int)&v85, "sat_solver->CurrentDecisionLevel() == 0");
        if (v74)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)&v75, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3335, &v74);
          google::LogMessage::stream((google::LogMessage *)&v75);
LABEL_98:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v75);
        }
      }
      v40 = *((_QWORD *)v21 + 26);
      if (*(int *)(v40 + 12) >= 1)
      {
        for (i = 0; i < *(int *)(v40 + 12); ++i)
        {
          v42 = (uint64_t)*(int *)(*(_QWORD *)(v40 + 72) + 4 * i) >> 1;
          v43 = v19[3].__begin_;
          if (v42 < v19[3].__end_ - v43)
          {
            v44 = v43[v42];
            if ((v44 & 0x80000000) == 0)
            {
              if (!operations_research::sat::PresolveContext::SetLiteralToTrue(*((operations_research::sat::PresolveContext **)this + 2), v44 ^ -(*(_DWORD *)(*(_QWORD *)(v40 + 72) + 4 * i) & 1)))goto LABEL_51;
              v40 = *((_QWORD *)v21 + 26);
            }
          }
        }
      }
      v51 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 24);
      v52 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)&v77);
      if (v51 >= 1)
      {
        v53 = (uint64_t)v52;
        v54 = 0;
        while (1)
        {
          while (1)
          {
            v56 = ~(_DWORD)v54 <= (int)v54 ? v54 : ~(_DWORD)v54;
            v57 = v19[2].__begin_[v56];
            if (v57 == -1)
              break;
            v58 = 2 * v57;
            v59 = *((_QWORD *)v38 + 71);
            if (v58 >= (int)((unint64_t)(*((_QWORD *)v38 + 72) - v59) >> 2))
              goto LABEL_66;
            v60 = *(_DWORD *)(v59 + 4 * v58);
            if (v60 == -1 || v60 == v58)
              goto LABEL_66;
            v62 = (uint64_t)v60 >> 1;
            v63 = v19[3].__begin_;
            if (v62 >= v19[3].__end_ - v63)
            {
              v55 = -1;
              LODWORD(v75) = -1;
              v85 = 0;
LABEL_78:
              v74 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v75, (int)&v85, "r_var >= 0");
              if (v74)
              {
                google::LogMessageFatal::LogMessageFatal((unint64_t *)&v75, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3365, &v74);
                google::LogMessage::stream((google::LogMessage *)&v75);
                goto LABEL_98;
              }
              goto LABEL_65;
            }
            LODWORD(v75) = v63[v62];
            v55 = (int)v75;
            v85 = 0;
            if ((v75 & 0x80000000) != 0)
              goto LABEL_78;
LABEL_65:
            operations_research::sat::PresolveContext::StoreBooleanEqualityRelation(*((_QWORD *)this + 2), v54, (const char *)(v55 ^ -(v60 & 1)));
LABEL_66:
            v54 = (const char *)((_DWORD)v54 + 1);
            if ((int)v54 >= v51)
              goto LABEL_51;
          }
          v64 = operations_research::sat::IntegerTrail::InitialVariableDomain(v53, v19->__begin_[v56]);
          v75 = 0;
          v65 = *(_QWORD *)v64;
          if ((*(_QWORD *)v64 & 1) != 0)
            break;
          v75 = *(void **)v64;
          v76 = *(_OWORD *)(v64 + 8);
LABEL_90:
          v71 = operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), v54, (const operations_research::Domain *)&v75, 0);
          if ((v75 & 1) != 0)
            operator delete((void *)v76);
          v54 = (const char *)((_DWORD)v54 + 1);
          if ((int)v54 < v51)
            v72 = v71;
          else
            v72 = 0;
          if ((v72 & 1) == 0)
            goto LABEL_51;
        }
        v66 = *(__int128 **)(v64 + 8);
        v67 = v65 >> 1;
        if (v65 < 4)
        {
          v68 = &v76;
          if (v65 < 2)
          {
            v69 = 0;
LABEL_89:
            v75 = &v69[v65 & 0xFFFFFFFFFFFFFFFELL];
            goto LABEL_90;
          }
        }
        else
        {
          if (v65 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v68 = (__int128 *)operator new(16 * v67);
          *(_QWORD *)&v76 = v68;
          *((_QWORD *)&v76 + 1) = v65 >> 1;
          v75 = (void *)1;
        }
        do
        {
          v70 = *v66++;
          *v68++ = v70;
          --v67;
        }
        while (v67);
        v69 = (char *)v75;
        goto LABEL_89;
      }
    }
    else
    {
LABEL_49:
      v45 = *((_QWORD *)this + 2);
      HIBYTE(v76) = 0;
      LOBYTE(v75) = 0;
      operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v45, (uint64_t)&v75);
      if (SHIBYTE(v76) < 0)
        operator delete(v75);
    }
LABEL_51:
    v46 = v82;
    if (v82)
    {
      v47 = v83;
      v48 = v82;
      if (v83 != v82)
      {
        do
        {
          v50 = *--v47;
          v49 = v50;
          *v47 = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        }
        while (v47 != v46);
        v48 = v82;
      }
      v83 = v46;
      operator delete(v48);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v80, v81[0]);
    if (SHIBYTE(v79) < 0)
      operator delete(v77);
  }
}

void sub_22DAD95CC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAD95D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17)
{
  operations_research::sat::Model::~Model((operations_research::sat::Model *)&a16);
  _Unwind_Resume(a1);
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep operations_research::TimeLimit::MergeWithGlobalTimeLimit(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result, uint64_t a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;

  if (!a2)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = INFINITY;
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_23;
LABEL_12:
    result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
    if (v6 - result < 0)
    {
      v11 = 0.0;
    }
    else if (FLAGS_time_limit_use_usertime)
    {
      v9 = *(double *)(a2 + 96);
      if (*(_BYTE *)(a2 + 72))
      {
        result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
        v10 = result - *(_QWORD *)(a2 + 80) + *(_QWORD *)(a2 + 88);
      }
      else
      {
        v10 = *(_QWORD *)(a2 + 88);
      }
      v11 = v9 + (double)v10 * -0.000000001;
      if (v11 < 0.0)
        v11 = 0.0;
    }
    else
    {
      v11 = (double)(v6 - result) * 0.000000001;
    }
    goto LABEL_27;
  }
  result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
  if (v4 - result < 0)
  {
    v5 = 0.0;
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_23;
    goto LABEL_12;
  }
  if (FLAGS_time_limit_use_usertime)
  {
    v7 = *(double *)(v3 + 96);
    if (*(_BYTE *)(v3 + 72))
    {
      result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
      v8 = result - *(_QWORD *)(v3 + 80) + *(_QWORD *)(v3 + 88);
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 88);
    }
    if (v7 + (double)v8 * -0.000000001 >= 0.0)
      v5 = v7 + (double)v8 * -0.000000001;
    else
      v5 = 0.0;
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_23;
    goto LABEL_12;
  }
  v5 = (double)(v4 - result) * 0.000000001;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 != 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_12;
LABEL_23:
  v11 = INFINITY;
LABEL_27:
  if (v11 < v5)
    v5 = v11;
  v12 = fmax(*(double *)(v3 + 104) - *(double *)(v3 + 112), 0.0);
  v13 = fmax(*(double *)(a2 + 104) - *(double *)(a2 + 112), 0.0);
  if (v13 < v12)
    v12 = v13;
  *(_QWORD *)(v3 + 112) = 0;
  *(double *)(v3 + 104) = v12;
  *(_QWORD *)(v3 + 128) = 0x7FF0000000000000;
  if (FLAGS_time_limit_use_usertime)
  {
    *(_BYTE *)(v3 + 72) = 1;
    result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
    *(_QWORD *)(v3 + 80) = result;
    *(double *)(v3 + 96) = v5;
  }
  result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
  *(_QWORD *)v3 = result;
  *(_QWORD *)(v3 + 8) = result;
  v14 = result + (uint64_t)(v5 * 1000000000.0);
  if ((double)(result ^ 0x7FFFFFFFFFFFFFFFLL) * 0.000000001 <= v5)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v3 + 16) = v14;
  v15 = *(_QWORD *)(a2 + 120);
  if (v15)
    *(_QWORD *)(v3 + 120) = v15;
  return result;
}

void operations_research::sat::CpModelPresolver::PresolvePureSatPart(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v1;
  char ***v2;
  int v3;
  char **v4;
  int v5;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t i;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  int *v38;
  unint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  int *v49;
  int *v50;
  int *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t k;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  unint64_t v62;
  int v63;
  int v64;
  int *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  int *v71;
  unint64_t v72;
  int *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  int *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t j;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  char *v99;
  int64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  int *v106;
  unint64_t v107;
  char *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  _DWORD *v124;
  unint64_t v125;
  int *v126;
  int v127;
  uint64_t *v128;
  uint64_t v129;
  int *v130;
  int *v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t m;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  int *v147;
  uint64_t v148;
  __int128 v149;
  char *v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _BOOL4 IsTrue;
  uint64_t v159;
  unint64_t n;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t ii;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  operations_research::sat::PresolveContext *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  _BYTE *v175;
  char ***v176;
  __n128 v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  google::LogMessage *v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  google::LogMessage *v186;
  _QWORD *v187;
  operations_research::sat::PresolveContext *v188;
  int v189;
  BOOL v190;
  int v191;
  char *v192;
  int *v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  int v197;
  unsigned int *v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int **v207;
  int *v208;
  int *v209;
  int *v210;
  uint64_t v211;
  int v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  int v219;
  uint64_t v220;
  unsigned int *v221;
  uint64_t v222;
  int v223;
  unsigned int *v224;
  uint64_t v225;
  google::protobuf::Arena *v226;
  uint64_t v227;
  google::protobuf::Arena *v228;
  char *v229;
  int v230;
  int *v231;
  int *v232;
  int *v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  uint64_t v241;
  unsigned int *v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  unsigned int *v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  google::protobuf::Arena *v250;
  uint64_t v251;
  google::protobuf::Arena *v252;
  void **v253;
  void **v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  void *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char ***v262;
  int v263;
  int v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int *v269;
  void *__p;
  uint64_t v271;
  unint64_t v272;
  void *v273;
  char *v274;
  char *v275;
  void *v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  _BYTE v280[24];
  int v281;
  char v282;
  char v283;
  char v284;
  _BYTE v285[328];
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD v290[74];
  char v291[8];
  void *v292;
  _BYTE *v293;
  void *v294;
  void **v295;
  void **v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  int *v305;
  int *v306;
  uint64_t v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;

  v1 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v1 + 504) || *(_BYTE *)(v1 + 64))
    return;
  v2 = (char ***)this;
  v3 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 24);
  operations_research::sat::SatPostsolver::SatPostsolver((operations_research::sat::SatPostsolver *)v291, v3);
  operations_research::sat::SatPresolver::SatPresolver((operations_research::sat::SatPresolver *)v285, (operations_research::sat::SatPostsolver *)v291);
  v259 = v3;
  operations_research::sat::SatPresolver::SetNumVariables((operations_research::sat::SatPresolver *)v285, v3);
  v4 = *v2;
  v290[73] = (*v2)[73];
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v280, (const operations_research::sat::SatParameters *)(v4 + 1));
  v5 = v281;
  if (v282)
  {
    v5 = v281 | 0x400000;
    v283 = 0;
  }
  v281 = v5 | 0x800000;
  v284 = 0;
  operations_research::sat::SatParameters::CopyFrom((operations_research::sat::SatParameters *)v290, (const operations_research::sat::SatParameters *)v280);
  v276 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v277 = 0u;
  v278 = 0u;
  v279 = 0;
  v6 = v2[2];
  v7 = v6[6];
  if (*((int *)v7 + 12) < 1)
  {
    v150 = 0;
    v273 = 0;
    v274 = 0;
    v275 = 0;
    goto LABEL_350;
  }
  v8 = 0;
  do
  {
    if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 7) + 8 * v8 + 8) + 60) - 3) <= 1)
    {
      if (operations_research::sat::CpModelPresolver::PresolveOneConstraint((operations_research::sat::CpModelPresolver *)v2, v8))operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v2[2], v8);
      v6 = v2[2];
      if (*((_BYTE *)v6 + 504))
        goto LABEL_352;
    }
    ++v8;
    v7 = v6[6];
    v9 = *((int *)v7 + 12);
  }
  while (v8 < v9);
  v273 = 0;
  v274 = 0;
  v275 = 0;
  if ((int)v9 < 1)
  {
    v150 = 0;
    goto LABEL_350;
  }
  v10 = 0;
  v11 = 0;
  v262 = v2;
  do
  {
    v12 = *(_QWORD *)(*((_QWORD *)v7 + 7) + 8 * v10 + 8);
    v13 = *(_DWORD *)(v12 + 60);
    if (v13 != 4)
    {
      if (v13 != 3)
        goto LABEL_15;
      v266 = v10;
      v263 = v11;
      v14 = (char *)v273;
      v274 = (char *)v273;
      v260 = v12;
      v15 = *(_QWORD *)(v12 + 48);
      v16 = *(int *)(v15 + 16);
      if ((_DWORD)v16)
      {
        v17 = *(int **)(v15 + 24);
        v18 = &v17[v16];
        while (1)
        {
          v20 = 0;
          v21 = *v17;
          v22 = ~*v17;
          v23 = v22 <= *v17 ? *v17 : ~v21;
          v24 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v23)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v23));
          for (i = (v24 >> 7) ^ ((unint64_t)v276 >> 12); ; i = v20 + v26)
          {
            v26 = i & v278;
            v27 = *(_QWORD *)((char *)v276 + v26);
            v28 = ((v27 ^ (0x101010101010101 * (v24 & 0x7F))) - 0x101010101010101) & ~(v27 ^ (0x101010101010101
                                                                                                * (v24 & 0x7F))) & 0x8080808080808080;
            if (v28)
              break;
LABEL_29:
            if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0)
            {
              v29 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, v24);
              *(_DWORD *)(v277 + 4 * v29) = v23;
              v14 = v274;
              goto LABEL_32;
            }
            v20 += 8;
          }
          while (*(_DWORD *)(v277 + 4 * ((v26 + (__clz(__rbit64(v28)) >> 3)) & v278)) != v23)
          {
            v28 &= v28 - 1;
            if (!v28)
              goto LABEL_29;
          }
LABEL_32:
          v30 = v21 >= 0 ? 2 * v21 : (2 * v22) | 1;
          if (v14 >= v275)
            break;
          *(_DWORD *)v14 = v30;
          v19 = v14 + 4;
LABEL_21:
          v274 = v19;
          ++v17;
          v14 = v19;
          if (v17 == v18)
            goto LABEL_109;
        }
        v31 = (char *)v273;
        v32 = v14 - (_BYTE *)v273;
        v33 = (v14 - (_BYTE *)v273) >> 2;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v35 = v275 - (_BYTE *)v273;
        if ((v275 - (_BYTE *)v273) >> 1 > v34)
          v34 = v35 >> 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
          v36 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          if (v36 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v37 = operator new(4 * v36);
          v38 = (int *)&v37[4 * v33];
          *v38 = v30;
          v19 = (char *)(v38 + 1);
          if (v14 == v31)
            goto LABEL_50;
        }
        else
        {
          v37 = 0;
          v38 = (int *)(4 * v33);
          *(_DWORD *)(4 * v33) = v30;
          v19 = (char *)(4 * v33 + 4);
          if (v14 == v31)
            goto LABEL_50;
        }
        v39 = v14 - 4 - v31;
        if (v39 >= 0xBC)
        {
          if (&v37[v32 - 4 - (v39 & 0xFFFFFFFFFFFFFFFCLL)] > &v37[v32 - 4])
          {
            v40 = v14;
          }
          else if (&v14[-(v39 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
          {
            v40 = v14;
          }
          else if ((unint64_t)(v14 - v37 - v32) >= 0x20)
          {
            v42 = (v39 >> 2) + 1;
            v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
            v40 = &v14[-v43];
            v38 = (int *)((char *)v38 - v43);
            v44 = &v37[4 * v33 - 16];
            v45 = (__int128 *)(v14 - 16);
            v46 = v42 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v47 = *v45;
              *(v44 - 1) = *(v45 - 1);
              *v44 = v47;
              v44 -= 2;
              v45 -= 2;
              v46 -= 8;
            }
            while (v46);
            if (v42 == (v42 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_50:
              v273 = v38;
              v274 = v19;
              v275 = &v37[4 * v36];
              if (v31)
                operator delete(v31);
              goto LABEL_21;
            }
          }
          else
          {
            v40 = v14;
          }
        }
        else
        {
          v40 = v14;
        }
        do
        {
          v41 = *((_DWORD *)v40 - 1);
          v40 -= 4;
          *--v38 = v41;
        }
        while (v40 != v31);
        goto LABEL_50;
      }
      v19 = (char *)v273;
LABEL_109:
      v83 = *(int *)(v260 + 16);
      if (!(_DWORD)v83)
      {
        v86 = (uint64_t)v19;
LABEL_155:
        operations_research::sat::SatPresolver::AddClause((uint64_t)v285, v273, (v86 - (uint64_t)v273) >> 2);
        v2 = v262;
        v10 = v266;
        operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*((_QWORD *)v262[2][6] + 7) + 8 * v266 + 8));
        operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v262[2], v266);
        v120 = v263;
        goto LABEL_14;
      }
      v84 = *(int **)(v260 + 24);
      v85 = &v84[v83];
      while (1)
      {
        v87 = 0;
        v88 = *v84;
        v89 = ~*v84;
        v90 = v89 <= *v84 ? *v84 : ~v88;
        v91 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v90)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v90));
        for (j = (v91 >> 7) ^ ((unint64_t)v276 >> 12); ; j = v87 + v93)
        {
          v93 = j & v278;
          v94 = *(_QWORD *)((char *)v276 + v93);
          v95 = ((v94 ^ (0x101010101010101 * (v91 & 0x7F))) - 0x101010101010101) & ~(v94 ^ (0x101010101010101
                                                                                              * (v91 & 0x7F))) & 0x8080808080808080;
          if (v95)
            break;
LABEL_120:
          if ((v94 & (~v94 << 6) & 0x8080808080808080) != 0)
          {
            v96 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, v91);
            *(_DWORD *)(v277 + 4 * v96) = v90;
            v19 = v274;
            goto LABEL_123;
          }
          v87 += 8;
        }
        while (*(_DWORD *)(v277 + 4 * ((v93 + (__clz(__rbit64(v95)) >> 3)) & v278)) != v90)
        {
          v95 &= v95 - 1;
          if (!v95)
            goto LABEL_120;
        }
LABEL_123:
        v97 = 2 * v88;
        if (v88 < 0)
          v97 = (2 * v89) | 1;
        v98 = v97 ^ 1;
        if (v19 >= v275)
          break;
        *(_DWORD *)v19 = v98;
        v86 = (uint64_t)(v19 + 4);
LABEL_112:
        v274 = (char *)v86;
        ++v84;
        v19 = (char *)v86;
        if (v84 == v85)
          goto LABEL_155;
      }
      v99 = (char *)v273;
      v100 = v19 - (_BYTE *)v273;
      v101 = (v19 - (_BYTE *)v273) >> 2;
      v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v103 = v275 - (_BYTE *)v273;
      if ((v275 - (_BYTE *)v273) >> 1 > v102)
        v102 = v103 >> 1;
      if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
        v104 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v104 = v102;
      if (v104)
      {
        if (v104 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v105 = operator new(4 * v104);
        v106 = (int *)&v105[4 * v101];
        *v106 = v98;
        v86 = (uint64_t)(v106 + 1);
        if (v19 == v99)
          goto LABEL_140;
      }
      else
      {
        v105 = 0;
        v106 = (int *)(4 * v101);
        *(_DWORD *)(4 * v101) = v98;
        v86 = 4 * v101 + 4;
        if (v19 == v99)
          goto LABEL_140;
      }
      v107 = v19 - 4 - v99;
      if (v107 >= 0xBC)
      {
        if (&v105[v100 - 4 - (v107 & 0xFFFFFFFFFFFFFFFCLL)] > &v105[v100 - 4])
        {
          v108 = v19;
        }
        else if (&v19[-(v107 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v19 - 4)
        {
          v108 = v19;
        }
        else if ((unint64_t)(v19 - v105 - v100) >= 0x20)
        {
          v110 = (v107 >> 2) + 1;
          v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
          v108 = &v19[-v111];
          v106 = (int *)((char *)v106 - v111);
          v112 = &v105[4 * v101 - 16];
          v113 = (__int128 *)(v19 - 16);
          v114 = v110 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v115 = *v113;
            *(v112 - 1) = *(v113 - 1);
            *v112 = v115;
            v112 -= 2;
            v113 -= 2;
            v114 -= 8;
          }
          while (v114);
          if (v110 == (v110 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_140:
            v273 = v106;
            v274 = (char *)v86;
            v275 = &v105[4 * v104];
            if (v99)
              operator delete(v99);
            goto LABEL_112;
          }
        }
        else
        {
          v108 = v19;
        }
      }
      else
      {
        v108 = v19;
      }
      do
      {
        v109 = *((_DWORD *)v108 - 1);
        v108 -= 4;
        *--v106 = v109;
      }
      while (v108 != v99);
      goto LABEL_140;
    }
    v267 = v10;
    v264 = v11;
    v308 = 0uLL;
    v307 = 0;
    v48 = *(int *)(v12 + 16);
    if (!(_DWORD)v48)
    {
      v49 = 0;
      v81 = 0;
      v116 = (int *)v307;
      v117 = -v307;
      v118 = -v307 >> 2;
      v119 = v118 + 1;
      if (!((unint64_t)(v118 + 1) >> 62))
        goto LABEL_157;
LABEL_384:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    v49 = 0;
    v261 = v12;
    v50 = *(int **)(v12 + 24);
    v51 = &v50[v48];
    do
    {
      v52 = 0;
      v53 = *v50;
      v54 = ~*v50;
      if (v54 <= *v50)
        v55 = *v50;
      else
        v55 = ~v53;
      v56 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v55)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v55));
      for (k = (v56 >> 7) ^ ((unint64_t)v276 >> 12); ; k = v52 + v58)
      {
        v58 = k & v278;
        v59 = *(_QWORD *)((char *)v276 + v58);
        v60 = ((v59 ^ (0x101010101010101 * (v56 & 0x7F))) - 0x101010101010101) & ~(v59 ^ (0x101010101010101
                                                                                            * (v56 & 0x7F))) & 0x8080808080808080;
        if (v60)
          break;
LABEL_73:
        if ((v59 & (~v59 << 6) & 0x8080808080808080) != 0)
        {
          v62 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, v56);
          *(_DWORD *)(v277 + 4 * v62) = v55;
          v61 = (int *)v308;
          goto LABEL_77;
        }
        v52 += 8;
      }
      while (*(_DWORD *)(v277 + 4 * ((v58 + (__clz(__rbit64(v60)) >> 3)) & v278)) != v55)
      {
        v60 &= v60 - 1;
        if (!v60)
          goto LABEL_73;
      }
      v61 = v49;
LABEL_77:
      v63 = 2 * v53;
      if (v53 < 0)
        v63 = (2 * v54) | 1;
      v64 = v63 ^ 1;
      if ((unint64_t)v61 < *((_QWORD *)&v308 + 1))
      {
        *v61 = v64;
        v49 = v61 + 1;
        goto LABEL_65;
      }
      v65 = (int *)v307;
      v66 = ((uint64_t)v61 - v307) >> 2;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v68 = *((_QWORD *)&v308 + 1) - v307;
      if ((*((_QWORD *)&v308 + 1) - v307) >> 1 > v67)
        v67 = v68 >> 1;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
        v69 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v69 = v67;
      if (v69)
      {
        if (v69 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v70 = operator new(4 * v69);
        v71 = (int *)&v70[4 * v66];
        *v71 = v64;
        v49 = v71 + 1;
        if (v61 == v65)
          goto LABEL_94;
      }
      else
      {
        v70 = 0;
        v71 = (int *)(4 * v66);
        *(_DWORD *)(4 * v66) = v64;
        v49 = (int *)(4 * v66 + 4);
        if (v61 == v65)
          goto LABEL_94;
      }
      v72 = (char *)(v61 - 1) - (char *)v65;
      if (v72 < 0xBC)
      {
        v73 = v61;
        goto LABEL_93;
      }
      if (&v70[(char *)v61 - (char *)v65 - 4 - (v72 & 0xFFFFFFFFFFFFFFFCLL)] > &v70[(char *)v61 - (char *)v65 - 4])
      {
        v73 = v61;
        do
        {
LABEL_93:
          v74 = *--v73;
          *--v71 = v74;
        }
        while (v73 != v65);
        goto LABEL_94;
      }
      if ((int *)((char *)v61 - (v72 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v61 - 1)
      {
        v73 = v61;
        goto LABEL_93;
      }
      if ((unint64_t)((char *)v65 - v70) < 0x20)
      {
        v73 = v61;
        goto LABEL_93;
      }
      v75 = (v72 >> 2) + 1;
      v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
      v73 = &v61[v76 / 0xFFFFFFFFFFFFFFFCLL];
      v71 = (int *)((char *)v71 - v76);
      v77 = &v70[4 * v66 - 16];
      v78 = v61 - 4;
      v79 = v75 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v80 = *(_OWORD *)v78;
        *(v77 - 1) = *((_OWORD *)v78 - 1);
        *v77 = v80;
        v77 -= 2;
        v78 -= 8;
        v79 -= 8;
      }
      while (v79);
      if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_93;
LABEL_94:
      v307 = (uint64_t)v71;
      *(_QWORD *)&v308 = v49;
      *((_QWORD *)&v308 + 1) = &v70[4 * v69];
      if (v65)
        operator delete(v65);
LABEL_65:
      *(_QWORD *)&v308 = v49;
      ++v50;
    }
    while (v50 != v51);
    v81 = *((_QWORD *)&v308 + 1);
    if ((unint64_t)v49 < *((_QWORD *)&v308 + 1))
    {
      *v49 = -1;
      v82 = (uint64_t)(v49 + 1);
      v12 = v261;
      v2 = v262;
      goto LABEL_171;
    }
    v12 = v261;
    v116 = (int *)v307;
    v117 = (uint64_t)v49 - v307;
    v118 = ((uint64_t)v49 - v307) >> 2;
    v119 = v118 + 1;
    if ((unint64_t)(v118 + 1) >> 62)
      goto LABEL_384;
LABEL_157:
    v121 = v81 - (_QWORD)v116;
    if (v121 >> 1 > v119)
      v119 = v121 >> 1;
    if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
      v122 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v122 = v119;
    if (!v122)
    {
      v123 = 0;
      v124 = (_DWORD *)(4 * v118);
      *(_DWORD *)(4 * v118) = -1;
      v82 = 4 * v118 + 4;
      if (v49 != v116)
        goto LABEL_165;
LABEL_191:
      v2 = v262;
      v307 = (uint64_t)v124;
      *(_QWORD *)&v308 = v82;
      *((_QWORD *)&v308 + 1) = &v123[4 * v122];
      if (v116)
        goto LABEL_170;
      goto LABEL_171;
    }
    if (v122 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v123 = operator new(4 * v122);
    v124 = &v123[4 * v118];
    *v124 = -1;
    v82 = (uint64_t)(v124 + 1);
    if (v49 == v116)
      goto LABEL_191;
LABEL_165:
    v125 = (char *)(v49 - 1) - (char *)v116;
    if (v125 < 0x2C || (unint64_t)((char *)v49 - v123 - v117) < 0x20)
    {
      v126 = v49;
      v2 = v262;
      goto LABEL_168;
    }
    v144 = (v125 >> 2) + 1;
    v145 = 4 * (v144 & 0x7FFFFFFFFFFFFFF8);
    v126 = &v49[v145 / 0xFFFFFFFFFFFFFFFCLL];
    v124 = (_DWORD *)((char *)v124 - v145);
    v146 = &v123[4 * v118 - 16];
    v147 = v49 - 4;
    v148 = v144 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v149 = *(_OWORD *)v147;
      *(v146 - 1) = *((_OWORD *)v147 - 1);
      *v146 = v149;
      v146 -= 2;
      v147 -= 8;
      v148 -= 8;
    }
    while (v148);
    v2 = v262;
    if (v144 != (v144 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_168:
        v127 = *--v126;
        *--v124 = v127;
      }
      while (v126 != v116);
    }
    v307 = (uint64_t)v124;
    *(_QWORD *)&v308 = v82;
    *((_QWORD *)&v308 + 1) = &v123[4 * v122];
    if (v116)
LABEL_170:
      operator delete(v116);
LABEL_171:
    *(_QWORD *)&v308 = v82;
    v128 = &operations_research::sat::_BoolArgumentProto_default_instance_;
    if (*(_DWORD *)(v12 + 60) == 4)
      v128 = *(uint64_t **)(v12 + 48);
    v129 = *((int *)v128 + 4);
    if ((_DWORD)v129)
    {
      v130 = (int *)v128[3];
      v131 = &v130[v129];
      do
      {
        v132 = 0;
        v133 = *v130;
        v134 = ~*v130;
        if (v134 <= *v130)
          v135 = *v130;
        else
          v135 = ~v133;
        v136 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v135)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v135));
        for (m = (v136 >> 7) ^ ((unint64_t)v276 >> 12); ; m = v132 + v138)
        {
          v138 = m & v278;
          v139 = *(_QWORD *)((char *)v276 + v138);
          v140 = ((v139 ^ (0x101010101010101 * (v136 & 0x7F))) - 0x101010101010101) & ~(v139 ^ (0x101010101010101
                                                                                                  * (v136 & 0x7F))) & 0x8080808080808080;
          if (v140)
            break;
LABEL_182:
          if ((v139 & (~v139 << 6) & 0x8080808080808080) != 0)
          {
            v141 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, v136);
            *(_DWORD *)(v277 + 4 * v141) = v135;
            goto LABEL_185;
          }
          v132 += 8;
        }
        while (*(_DWORD *)(v277 + 4 * ((v138 + (__clz(__rbit64(v140)) >> 3)) & v278)) != v135)
        {
          v140 &= v140 - 1;
          if (!v140)
            goto LABEL_182;
        }
LABEL_185:
        v142 = 2 * v133;
        if (v133 < 0)
          v142 = (2 * v134) | 1;
        v143 = v308;
        *(_DWORD *)(v308 - 4) = v142;
        operations_research::sat::SatPresolver::AddClause((uint64_t)v285, (void *)v307, (v143 - v307) >> 2);
        ++v130;
      }
      while (v130 != v131);
    }
    v10 = v267;
    operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*((_QWORD *)v2[2][6] + 7) + 8 * v267 + 8));
    operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v2[2], v267);
    v120 = v264;
    if (v307)
    {
      *(_QWORD *)&v308 = v307;
      operator delete((void *)v307);
    }
LABEL_14:
    v11 = v120 + 1;
LABEL_15:
    ++v10;
    v7 = v2[2][6];
  }
  while (v10 < *((int *)v7 + 12));
  if (!v11)
    goto LABEL_349;
  __p = 0;
  v271 = 0;
  v272 = 0;
  if ((_DWORD)v259)
  {
    if ((v259 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    __p = operator new(8 * (((v259 - 1) >> 6) + 1));
    v271 = 0;
    v272 = ((v259 - 1) >> 6) + 1;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](&__p, v259, 0);
    v151 = 0;
    do
    {
      v170 = (operations_research::sat::PresolveContext *)v262[2];
      if (!*(_QWORD *)(*((_QWORD *)v170 + 85) + 48 * (_QWORD)v151 + 16))
        *(_QWORD *)((char *)__p + (((unint64_t)v151 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (char)v151;
      v156 = 0;
      v171 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v151)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + (_QWORD)v151));
      v172 = v171 >> 7;
      v157 = (v171 >> 7) ^ ((unint64_t)v276 >> 12);
      v173 = 0x101010101010101 * (v171 & 0x7F);
      while (1)
      {
        v152 = v157 & v278;
        v153 = *(_QWORD *)((char *)v276 + v152);
        v154 = ((v153 ^ v173) - 0x101010101010101) & ~(v153 ^ v173) & 0x8080808080808080;
        if (v154)
          break;
LABEL_205:
        if ((v153 & (~v153 << 6) & 0x8080808080808080) != 0)
          goto LABEL_226;
        v156 += 8;
        v157 = v156 + v152;
      }
      while (1)
      {
        v155 = (v152 + (__clz(__rbit64(v154)) >> 3)) & v278;
        if (v151 == (const char *)*(unsigned int *)(v277 + 4 * v155))
          break;
        v154 &= v154 - 1;
        if (!v154)
          goto LABEL_205;
      }
      if (v155 != (_QWORD)v278 && operations_research::sat::PresolveContext::IsFixed(v170, v151))
      {
        IsTrue = operations_research::sat::PresolveContext::LiteralIsTrue((operations_research::sat::PresolveContext *)v262[2], v151);
        v159 = 0;
        if (IsTrue)
        {
          for (n = v172 ^ ((unint64_t)v276 >> 12); ; n = v159 + v161)
          {
            v161 = n & v278;
            v162 = *(_QWORD *)((char *)v276 + v161);
            v163 = ((v162 ^ v173) - 0x101010101010101) & ~(v162 ^ v173) & 0x8080808080808080;
            if (v163)
              break;
LABEL_214:
            if ((v162 & (~v162 << 6) & 0x8080808080808080) != 0)
            {
              v168 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ (unint64_t)v151)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ (_QWORD)v151)));
              *(_DWORD *)(v277 + 4 * v168) = (_DWORD)v151;
              goto LABEL_223;
            }
            v159 += 8;
          }
          while (v151 != (const char *)*(unsigned int *)(v277 + 4 * ((v161 + (__clz(__rbit64(v163)) >> 3)) & v278)))
          {
            v163 &= v163 - 1;
            if (!v163)
              goto LABEL_214;
          }
LABEL_223:
          LODWORD(v307) = 2 * (_DWORD)v151;
          operations_research::sat::SatPresolver::AddClause((uint64_t)v285, &v307, 1);
        }
        else
        {
          for (ii = v172 ^ ((unint64_t)v276 >> 12); ; ii = v159 + v165)
          {
            v165 = ii & v278;
            v166 = *(_QWORD *)((char *)v276 + v165);
            v167 = ((v166 ^ v173) - 0x101010101010101) & ~(v166 ^ v173) & 0x8080808080808080;
            if (v167)
              break;
LABEL_220:
            if ((v166 & (~v166 << 6) & 0x8080808080808080) != 0)
            {
              v169 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v276, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ (unint64_t)v151)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ (_QWORD)v151)));
              *(_DWORD *)(v277 + 4 * v169) = (_DWORD)v151;
              goto LABEL_225;
            }
            v159 += 8;
          }
          while (v151 != (const char *)*(unsigned int *)(v277 + 4 * ((v165 + (__clz(__rbit64(v167)) >> 3)) & v278)))
          {
            v167 &= v167 - 1;
            if (!v167)
              goto LABEL_220;
          }
LABEL_225:
          LODWORD(v307) = (2 * (_DWORD)v151) | 1;
          operations_research::sat::SatPresolver::AddClause((uint64_t)v285, &v307, 1);
        }
      }
LABEL_226:
      ++v151;
    }
    while (v151 != (const char *)v259);
  }
  if (v284)
  {
    v174 = v293;
    v175 = v292;
    v176 = v262;
    if ((operations_research::sat::SatPresolver::Presolve((uint64_t)v285, (uint64_t)&__p, *(unsigned __int8 *)*v262) & 1) == 0)
      goto LABEL_238;
    v178 = (unint64_t)(v174 - v175) >> 2;
    v179 = (unint64_t)(v293 - (_BYTE *)v292) >> 2;
    if ((_DWORD)v178 != (_DWORD)v179)
    {
      if (!operations_research::sat::SatPresolver::Presolve((uint64_t)v285, (uint64_t)&__p, *(unsigned __int8 *)*v262))goto LABEL_238;
      v180 = (unint64_t)(v293 - (_BYTE *)v292) >> 2;
      if ((_DWORD)v179 != (_DWORD)v180
        && (!operations_research::sat::SatPresolver::Presolve((uint64_t)v285, (uint64_t)&__p, *(unsigned __int8 *)*v262)|| (_DWORD)v180 != ((unint64_t)(v293 - (_BYTE *)v292) >> 2)&& !operations_research::sat::SatPresolver::Presolve((uint64_t)v285, (uint64_t)&__p, *(unsigned __int8 *)*v262)))
      {
        goto LABEL_238;
      }
    }
  }
  else
  {
    v176 = v262;
    if ((operations_research::sat::SatPresolver::Presolve((uint64_t)v285, (uint64_t)&__p, *(unsigned __int8 *)*v262) & 1) == 0)
    {
LABEL_238:
      if (*_MergedGlobals_7[0] >= 1
        && (_MergedGlobals_7[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)_MergedGlobals_7, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_presolve.cc", (const char *)1)))
      {
        v181 = google::LogMessage::LogMessage((google::LogMessage *)&v307, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3513);
        v182 = (_QWORD *)google::LogMessage::stream(v181);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)"UNSAT during SAT presolve.", 26);
        google::LogMessage::~LogMessage((google::LogMessage *)&v307);
      }
      v183 = (uint64_t)v176[2];
      HIBYTE(v308) = 0;
      LOBYTE(v307) = 0;
      operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v183, (uint64_t)&v307);
      if (SHIBYTE(v308) < 0)
        operator delete((void *)v307);
      goto LABEL_347;
    }
  }
  v184 = (unint64_t)(v289 - v288) >> 3;
  v185 = (uint64_t)v176[2][6];
  if (*(_DWORD *)(v185 + 24) < (int)v184)
  {
    if (*off_254079468[0] >= 1
      && (off_254079468[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079468, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_presolve.cc", (const char *)1)))
    {
      v186 = google::LogMessage::LogMessage((google::LogMessage *)&v307, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3522);
      v187 = (_QWORD *)google::LogMessage::stream(v186);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)"New variables added by the SAT presolver.", 41);
      google::LogMessage::~LogMessage((google::LogMessage *)&v307);
    }
    v188 = (operations_research::sat::PresolveContext *)v176[2];
    v189 = *(_DWORD *)(*((_QWORD *)v188 + 6) + 24);
    v190 = __OFSUB__((_DWORD)v184, v189);
    v191 = v184 - v189;
    if (!((v191 < 0) ^ v190 | (v191 == 0)))
    {
      while (1)
      {
        v192 = v176[2][6];
        v193 = (int *)*((_QWORD *)v192 + 4);
        if (!v193)
          break;
        v194 = *((int *)v192 + 6);
        v195 = *v193;
        if ((int)v194 < *v193)
        {
          *((_DWORD *)v192 + 6) = v194 + 1;
          v196 = *(_QWORD *)&v193[2 * v194 + 2];
          v199 = *(unsigned int *)(v196 + 16);
          v197 = *(_DWORD *)(v196 + 20);
          v198 = (unsigned int *)(v196 + 16);
          v200 = v199 + 1;
          if ((_DWORD)v199 != v197)
            goto LABEL_263;
LABEL_262:
          google::protobuf::RepeatedField<long long>::Reserve(v198, v200);
          v197 = *(_DWORD *)(v196 + 20);
          goto LABEL_263;
        }
        if (v195 == *((_DWORD *)v192 + 7))
          goto LABEL_260;
LABEL_261:
        *v193 = v195 + 1;
        v196 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*((google::protobuf::Arena **)v192 + 2));
        v201 = *((_QWORD *)v192 + 4);
        v202 = *((int *)v192 + 6);
        *((_DWORD *)v192 + 6) = v202 + 1;
        *(_QWORD *)(v201 + 8 * v202 + 8) = v196;
        v199 = *(unsigned int *)(v196 + 16);
        v197 = *(_DWORD *)(v196 + 20);
        v198 = (unsigned int *)(v196 + 16);
        v200 = v199 + 1;
        if ((_DWORD)v199 == v197)
          goto LABEL_262;
LABEL_263:
        v203 = *(_QWORD *)(v196 + 24);
        *(_QWORD *)(v203 + 8 * v199) = 0;
        *(_DWORD *)(v196 + 16) = v200;
        v204 = v199 + 2;
        if (v200 == v197)
        {
          google::protobuf::RepeatedField<long long>::Reserve(v198, v204);
          v203 = *(_QWORD *)(v196 + 24);
        }
        *(_QWORD *)(v203 + 8 * v200) = 1;
        *v198 = v204;
        if (!--v191)
        {
          v188 = (operations_research::sat::PresolveContext *)v176[2];
          goto LABEL_266;
        }
      }
      v195 = *((_DWORD *)v192 + 7);
LABEL_260:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v192 + 4, v195 + 1);
      v193 = (int *)*((_QWORD *)v192 + 4);
      v195 = *v193;
      goto LABEL_261;
    }
LABEL_266:
    operations_research::sat::PresolveContext::InitializeNewDomains(v188, v177);
    v185 = (uint64_t)v176[2][6];
  }
  v308 = 0u;
  v309 = 0u;
  v307 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v310 = 0;
  v205 = v286;
  if ((int)(-1431655765 * ((unint64_t)(v287 - v286) >> 3)) >= 1)
  {
    v206 = 0;
    v268 = (unsigned int *)(v185 + 40);
    do
    {
      v207 = (int **)(v205 + 24 * v206);
      v208 = *v207;
      v209 = v207[1];
      if (*v207 != v209)
      {
        if ((char *)v209 - (char *)v208 != 8)
        {
          v210 = *(int **)(v185 + 56);
          if (!v210)
          {
            v212 = *(_DWORD *)(v185 + 52);
            goto LABEL_278;
          }
          v211 = *(int *)(v185 + 48);
          v212 = *v210;
          if ((int)v211 < *v210)
          {
            *(_DWORD *)(v185 + 48) = v211 + 1;
            v213 = *(_QWORD *)&v210[2 * v211 + 2];
            goto LABEL_283;
          }
          if (v212 == *(_DWORD *)(v185 + 52))
          {
LABEL_278:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v268, v212 + 1);
            v210 = *(int **)(v185 + 56);
            v212 = *v210;
          }
          *v210 = v212 + 1;
          v213 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)v268);
          v214 = *(_QWORD *)(v185 + 56);
          v215 = *(int *)(v185 + 48);
          *(_DWORD *)(v185 + 48) = v215 + 1;
          *(_QWORD *)(v214 + 8 * v215 + 8) = v213;
          v208 = *v207;
          v209 = v207[1];
LABEL_283:
          while (2)
          {
            if (v208 == v209)
              goto LABEL_270;
            v218 = *v208;
            v219 = *(_DWORD *)(v213 + 60);
            if ((*v208 & 1) == 0)
            {
              if (v219 == 3)
              {
                v220 = *(_QWORD *)(v213 + 48);
                v222 = *(unsigned int *)(v220 + 16);
                v221 = (unsigned int *)(v220 + 16);
                v223 = v222 + 1;
                if ((_DWORD)v222 == *(_DWORD *)(v220 + 20))
                  goto LABEL_280;
              }
              else
              {
                operations_research::sat::ConstraintProto::clear_constraint(v213);
                *(_DWORD *)(v213 + 60) = 3;
                v225 = *(_QWORD *)(v213 + 8);
                v226 = (google::protobuf::Arena *)(v225 & 0xFFFFFFFFFFFFFFFELL);
                if ((v225 & 1) != 0)
                  v226 = *(google::protobuf::Arena **)v226;
                v220 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v226);
                *(_QWORD *)(v213 + 48) = v220;
                v222 = *(unsigned int *)(v220 + 16);
                v221 = (unsigned int *)(v220 + 16);
                v223 = v222 + 1;
                if ((_DWORD)v222 == *(_DWORD *)(v220 + 20))
LABEL_280:
                  google::protobuf::RepeatedField<int>::Reserve(v221, v223);
              }
              v216 = *(_QWORD *)(v220 + 24);
              v217 = v218 >> 1;
LABEL_282:
              *(_DWORD *)(v216 + 4 * v222) = v217;
              *(_DWORD *)(v220 + 16) = v223;
              ++v208;
              continue;
            }
            break;
          }
          if (v219 == 3)
          {
            v220 = *(_QWORD *)(v213 + 48);
            v222 = *(unsigned int *)(v220 + 16);
            v224 = (unsigned int *)(v220 + 16);
            v223 = v222 + 1;
            if ((_DWORD)v222 == *(_DWORD *)(v220 + 20))
              goto LABEL_300;
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v213);
            *(_DWORD *)(v213 + 60) = 3;
            v227 = *(_QWORD *)(v213 + 8);
            v228 = (google::protobuf::Arena *)(v227 & 0xFFFFFFFFFFFFFFFELL);
            if ((v227 & 1) != 0)
              v228 = *(google::protobuf::Arena **)v228;
            v220 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v228);
            *(_QWORD *)(v213 + 48) = v220;
            v222 = *(unsigned int *)(v220 + 16);
            v224 = (unsigned int *)(v220 + 16);
            v223 = v222 + 1;
            if ((_DWORD)v222 == *(_DWORD *)(v220 + 20))
LABEL_300:
              google::protobuf::RepeatedField<int>::Reserve(v224, v223);
          }
          v216 = *(_QWORD *)(v220 + 24);
          v217 = ~(v218 >> 1);
          goto LABEL_282;
        }
      }
LABEL_270:
      ++v206;
      v205 = v286;
    }
    while (v206 < (int)(-1431655765 * ((unint64_t)(v287 - v286) >> 3)));
    v176 = v262;
    if ((_QWORD)v309)
    {
      operator delete((void *)v307);
      v307 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v310 = 0;
      *(_QWORD *)&v309 = 0;
      v308 = 0uLL;
    }
  }
  if (*((_QWORD *)&v309 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v309 + 1));
  operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)v176[2]);
  v229 = v176[2][7];
  v308 = 0u;
  v309 = 0u;
  v307 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v310 = 0;
  if ((int)((unint64_t)(v293 - (_BYTE *)v292) >> 2) < 1)
    goto LABEL_345;
  v230 = 0;
  v265 = v229;
  v269 = (unsigned int *)(v229 + 40);
  while (2)
  {
    operations_research::sat::SatPostsolver::Clause((operations_research::sat::SatPostsolver *)v291, v230, &v305);
    v231 = v305;
    v232 = v306;
    if (v305 == v306)
      goto LABEL_341;
    v233 = (int *)*((_QWORD *)v229 + 7);
    if (!v233)
    {
      v235 = *((_DWORD *)v229 + 13);
      goto LABEL_316;
    }
    v234 = *((int *)v229 + 12);
    v235 = *v233;
    if ((int)v234 < *v233)
    {
      *((_DWORD *)v229 + 12) = v234 + 1;
      v236 = *(_QWORD *)&v233[2 * v234 + 2];
      if (v231 != v232)
        goto LABEL_321;
      goto LABEL_318;
    }
    if (v235 == *((_DWORD *)v229 + 13))
    {
LABEL_316:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v269, v235 + 1);
      v233 = (int *)*((_QWORD *)v229 + 7);
      v235 = *v233;
    }
    *v233 = v235 + 1;
    v236 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)v269);
    v237 = *((_QWORD *)v229 + 7);
    v238 = *((int *)v229 + 12);
    *((_DWORD *)v229 + 12) = v238 + 1;
    *(_QWORD *)(v237 + 8 * v238 + 8) = v236;
    v231 = v305;
    v232 = v306;
    if (v305 == v306)
    {
LABEL_318:
      v231 = v232;
      goto LABEL_340;
    }
LABEL_321:
    while (2)
    {
      while (2)
      {
        v239 = *v231;
        v240 = *(_DWORD *)(v236 + 60);
        if ((*v231 & 1) == 0)
        {
          if (v240 == 3)
          {
            v241 = *(_QWORD *)(v236 + 48);
            v243 = *(unsigned int *)(v241 + 16);
            v242 = (unsigned int *)(v241 + 16);
            v244 = v243 + 1;
            if ((_DWORD)v243 == *(_DWORD *)(v241 + 20))
              goto LABEL_319;
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v236);
            *(_DWORD *)(v236 + 60) = 3;
            v249 = *(_QWORD *)(v236 + 8);
            v250 = (google::protobuf::Arena *)(v249 & 0xFFFFFFFFFFFFFFFELL);
            if ((v249 & 1) != 0)
              v250 = *(google::protobuf::Arena **)v250;
            v241 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v250);
            *(_QWORD *)(v236 + 48) = v241;
            v243 = *(unsigned int *)(v241 + 16);
            v242 = (unsigned int *)(v241 + 16);
            v244 = v243 + 1;
            if ((_DWORD)v243 == *(_DWORD *)(v241 + 20))
LABEL_319:
              google::protobuf::RepeatedField<int>::Reserve(v242, v244);
          }
          *(_DWORD *)(*(_QWORD *)(v241 + 24) + 4 * v243) = v239 >> 1;
          *(_DWORD *)(v241 + 16) = v244;
          if (++v231 == v232)
            goto LABEL_339;
          continue;
        }
        break;
      }
      if (v240 == 3)
      {
        v245 = *(_QWORD *)(v236 + 48);
        v247 = *(unsigned int *)(v245 + 16);
        v246 = (unsigned int *)(v245 + 16);
        v248 = v247 + 1;
        if ((_DWORD)v247 == *(_DWORD *)(v245 + 20))
          goto LABEL_337;
      }
      else
      {
        operations_research::sat::ConstraintProto::clear_constraint(v236);
        *(_DWORD *)(v236 + 60) = 3;
        v251 = *(_QWORD *)(v236 + 8);
        v252 = (google::protobuf::Arena *)(v251 & 0xFFFFFFFFFFFFFFFELL);
        if ((v251 & 1) != 0)
          v252 = *(google::protobuf::Arena **)v252;
        v245 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v252);
        *(_QWORD *)(v236 + 48) = v245;
        v247 = *(unsigned int *)(v245 + 16);
        v246 = (unsigned int *)(v245 + 16);
        v248 = v247 + 1;
        if ((_DWORD)v247 == *(_DWORD *)(v245 + 20))
LABEL_337:
          google::protobuf::RepeatedField<int>::Reserve(v246, v248);
      }
      *(_DWORD *)(*(_QWORD *)(v245 + 24) + 4 * v247) = ~(v239 >> 1);
      *(_DWORD *)(v245 + 16) = v248;
      if (++v231 != v232)
        continue;
      break;
    }
LABEL_339:
    v231 = v305;
LABEL_340:
    v229 = v265;
LABEL_341:
    if (v231)
    {
      v306 = v231;
      operator delete(v231);
    }
    if (++v230 < (int)((unint64_t)(v293 - (_BYTE *)v292) >> 2))
      continue;
    break;
  }
  if ((_QWORD)v309)
  {
    operator delete((void *)v307);
    v307 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v310 = 0;
    *(_QWORD *)&v309 = 0;
    v308 = 0uLL;
  }
LABEL_345:
  if (*((_QWORD *)&v309 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v309 + 1));
LABEL_347:
  if (__p)
    operator delete(__p);
LABEL_349:
  v150 = (char *)v273;
LABEL_350:
  if (v150)
  {
    v274 = v150;
    operator delete(v150);
  }
LABEL_352:
  if ((_QWORD)v278)
  {
    operator delete(v276);
    v276 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v279 = 0;
    *(_QWORD *)&v278 = 0;
    v277 = 0uLL;
  }
  if (*((_QWORD *)&v278 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v278 + 1));
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v280);
  operations_research::sat::SatPresolver::~SatPresolver((operations_research::sat::SatPresolver *)v285);
  if (v303)
  {
    v304 = v303;
    operator delete(v303);
  }
  if (v301)
  {
    v302 = v301;
    operator delete(v301);
  }
  if (v299)
  {
    v300 = v299;
    operator delete(v299);
  }
  v253 = v295;
  v254 = v296;
  v298 = 0;
  v255 = (char *)v296 - (char *)v295;
  if ((unint64_t)((char *)v296 - (char *)v295) >= 0x11)
  {
    do
    {
      operator delete(*v253);
      v254 = v296;
      v253 = v295 + 1;
      v295 = v253;
      v255 = (char *)v296 - (char *)v253;
    }
    while ((unint64_t)((char *)v296 - (char *)v253) > 0x10);
  }
  v256 = v255 >> 3;
  if (v256 == 1)
  {
    v257 = 512;
LABEL_368:
    v297 = v257;
  }
  else if (v256 == 2)
  {
    v257 = 1024;
    goto LABEL_368;
  }
  if (v253 != v254)
  {
    do
    {
      v258 = *v253++;
      operator delete(v258);
    }
    while (v253 != v254);
    if (v296 != v295)
      v296 = (void **)((char *)v296 + (((char *)v295 - (char *)v296 + 7) & 0xFFFFFFFFFFFFFFF8));
  }
  if (v294)
    operator delete(v294);
  if (v292)
  {
    v293 = v292;
    operator delete(v292);
  }
}

void sub_22DADB2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set((uint64_t)&a20);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&a26);
  operations_research::sat::SatPresolver::~SatPresolver((operations_research::sat::SatPresolver *)&STACK[0x2C8]);
  operations_research::sat::SatPostsolver::~SatPostsolver((operations_research::sat::SatPostsolver *)&STACK[0x6F8]);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveOneConstraint(operations_research::sat::CpModelPresolver *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  int v16;
  __n128 v17;

  v2 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v2 + 504))
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 56) + 8 * a2 + 8);
  if (operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations((operations_research::sat::PresolveContext **)this, a2, (operations_research::sat::ConstraintProto *)v6))
  {
    operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
    if (!operations_research::sat::CpModelPresolver::PresolveEnforcementLiteral(this, (operations_research::sat::ConstraintProto *)v6))goto LABEL_6;
LABEL_9:
    operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
    result = 0;
    v7 = *(_DWORD *)(v6 + 60) - 3;
    goto LABEL_10;
  }
  if (operations_research::sat::CpModelPresolver::PresolveEnforcementLiteral(this, (operations_research::sat::ConstraintProto *)v6))
  {
    goto LABEL_9;
  }
LABEL_6:
  result = 0;
  v7 = *(_DWORD *)(v6 + 60) - 3;
  if (v7 <= 0x19)
  {
LABEL_10:
    switch(v7)
    {
      case 0u:
        return operations_research::sat::CpModelPresolver::PresolveBoolOr(this, (operations_research::sat::ConstraintProto *)v6);
      case 1u:
        return operations_research::sat::CpModelPresolver::PresolveBoolAnd(this, (uint64_t **)v6);
      case 2u:
        return operations_research::sat::CpModelPresolver::PresolveBoolXor(this, (operations_research::sat::ConstraintProto *)v6);
      case 4u:
        return operations_research::sat::CpModelPresolver::PresolveIntDiv(this, (operations_research::sat::ConstraintProto *)v6);
      case 6u:
        v8 = *(_QWORD *)(v6 + 48);
        if (*(_DWORD *)(v8 + 16) == 2 && *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4) == ~**(_DWORD **)(v8 + 24))
          return operations_research::sat::CpModelPresolver::PresolveIntAbs(this, (operations_research::sat::ConstraintProto *)v6);
        else
          return operations_research::sat::CpModelPresolver::PresolveIntMax(this, (operations_research::sat::ConstraintProto *)v6);
      case 7u:
        return operations_research::sat::CpModelPresolver::PresolveIntMin(this, (const operations_research::sat::IntegerArgumentProto **)v6);
      case 8u:
        return operations_research::sat::CpModelPresolver::PresolveIntProd(this, (operations_research::sat::ConstraintProto *)v6);
      case 9u:
        if (operations_research::sat::CpModelPresolver::CanonicalizeLinear(this, (operations_research::sat::ConstraintProto *)v6))
        {
          operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
          if (!operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v10))goto LABEL_22;
        }
        else if (!operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v9))
        {
LABEL_22:
          if (operations_research::sat::CpModelPresolver::PropagateDomainsInLinear(this, a2, (operations_research::sat::ConstraintProto *)v6))goto LABEL_23;
          goto LABEL_40;
        }
        operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
        if (operations_research::sat::CpModelPresolver::PropagateDomainsInLinear(this, a2, (operations_research::sat::ConstraintProto *)v6))
        {
LABEL_23:
          operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
          if (!operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v12))goto LABEL_24;
          goto LABEL_41;
        }
LABEL_40:
        if (!operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v11))
        {
LABEL_24:
          if (!operations_research::sat::CpModelPresolver::RemoveSingletonInLinear(this, (operations_research::sat::ConstraintProto *)v6, v13))goto LABEL_44;
          goto LABEL_42;
        }
LABEL_41:
        operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
        if (!operations_research::sat::CpModelPresolver::RemoveSingletonInLinear(this, (operations_research::sat::ConstraintProto *)v6, v14))goto LABEL_44;
LABEL_42:
        operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
        if (operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v15))operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
LABEL_44:
        if (operations_research::sat::CpModelPresolver::PresolveLinearOnBooleans(this, (operations_research::sat::ConstraintProto *)v6))operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
        if (*(_DWORD *)(v6 + 60) == 12)
        {
          v16 = *(_DWORD *)(v6 + 16);
          operations_research::sat::CpModelPresolver::ExtractEnforcementLiteralFromLinearConstraint((operations_research::sat::PresolveContext **)this, (operations_research::sat::ConstraintProto *)v6);
          if (!*(_DWORD *)(v6 + 60))
          {
            operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
            return 1;
          }
          if (*(_DWORD *)(v6 + 16) > v16)
          {
            result = operations_research::sat::CpModelPresolver::PresolveSmallLinear(this, (operations_research::sat::ConstraintProto *)v6, v17);
            if (!(_DWORD)result)
              return result;
            operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), a2);
          }
        }
        return 0;
      case 0xAu:
        return operations_research::sat::CpModelPresolver::PresolveAllDiff(this, (operations_research::sat::ConstraintProto *)v6);
      case 0xBu:
        return operations_research::sat::CpModelPresolver::PresolveElement(this, (operations_research::sat::ConstraintProto *)v6);
      case 0xCu:
        return operations_research::sat::CpModelPresolver::PresolveCircuit(this, (operations_research::sat::ConstraintProto *)v6);
      case 0xDu:
        return operations_research::sat::CpModelPresolver::PresolveTable(this, (operations_research::sat::ConstraintProto *)v6);
      case 0xEu:
        return operations_research::sat::CpModelPresolver::PresolveAutomaton(this, (operations_research::sat::ConstraintProto *)v6);
      case 0x10u:
        return operations_research::sat::CpModelPresolver::PresolveInterval(this, a2, (operations_research::sat::ConstraintProto *)v6);
      case 0x11u:
        return operations_research::sat::CpModelPresolver::PresolveNoOverlap(this, (operations_research::sat::ConstraintProto *)v6);
      case 0x13u:
        return operations_research::sat::CpModelPresolver::PresolveCumulative(this, (operations_research::sat::ConstraintProto *)v6);
      case 0x14u:
        return operations_research::sat::CpModelPresolver::PresolveRoutes(this, (operations_research::sat::ConstraintProto *)v6);
      case 0x17u:
        return operations_research::sat::CpModelPresolver::PresolveAtMostOne(this, (operations_research::sat::ConstraintProto *)v6);
      case 0x18u:
        return operations_research::sat::CpModelPresolver::PresolveLinMax(this, (uint64_t **)v6);
      case 0x19u:
        return operations_research::sat::CpModelPresolver::PresolveLinMin(this, (operations_research::sat::ConstraintProto *)v6);
      default:
        return result;
    }
  }
  return result;
}

void operations_research::sat::SatPostsolver::~SatPostsolver(operations_research::sat::SatPostsolver *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)this + 32);
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

void operations_research::sat::CpModelPresolver::ExpandObjective(operations_research::sat::CpModelPresolver *this, unint64_t a2)
{
  operations_research::sat::PresolveContext *v3;
  BOOL v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t j;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  char *v27;
  unsigned int *v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  int v36;
  _DWORD *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t k;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t **v62;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t **v67;
  uint64_t **v68;
  BOOL v69;
  uint64_t m;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t **v77;
  int v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t **v82;
  uint64_t **v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t n;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  int v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t **v100;
  char **v101;
  int *v102;
  char *v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  int v108;
  _DWORD *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  int v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  int v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __n128 v143;
  int *v144;
  uint64_t v145;
  int v146;
  uint64_t *v147;
  uint64_t jj;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t **v159;
  uint64_t **v160;
  int v161;
  _DWORD *v162;
  uint64_t *v163;
  const char *v164;
  int v165;
  uint64_t *v166;
  int8x16_t v167;
  const char *v168;
  int v169;
  int IsIncludedIn;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  uint64_t v174;
  int v175;
  operations_research::sat::ConstraintProto *v176;
  uint64_t v177;
  uint64_t v178;
  operations_research::sat::PresolveContext *v179;
  uint64_t v180;
  uint64_t v181;
  const operations_research::sat::ConstraintProto *v182;
  int *v183;
  uint64_t v184;
  int v185;
  operations_research::sat::ConstraintProto *v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  operations_research::sat::PresolveContext *v190;
  google::LogMessage *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  int v202;
  uint64_t v203;
  int v204;
  unint64_t v205;
  int *ii;
  unint64_t v207[3];
  unint64_t v208[3];
  unint64_t v209[3];
  void *v210;
  void *v211[2];
  void *__p;
  void *v213[2];
  void *v214;
  __int128 v215;
  int *v216;
  int *v217;
  uint64_t v218;
  unint64_t v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  uint64_t **v223;
  uint64_t *v224;
  uint64_t v225;
  _DWORD *v226;
  char *v227;
  char *v228;
  unint64_t v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;

  v3 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (*((_BYTE *)v3 + 504))
    return;
  v4 = operations_research::sat::PresolveContext::CanonicalizeObjective(v3, a2);
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v4)
  {
    HIBYTE(v230) = 0;
    LOBYTE(v229) = 0;
    operations_research::sat::PresolveContext::NotifyThatModelIsUnsat((uint64_t)v6, (uint64_t)&v229);
    if (SHIBYTE(v230) < 0)
      operator delete((void *)v229);
    return;
  }
  v7 = v6[69];
  v8 = v6[6];
  v9 = *(int *)(v8 + 24);
  v10 = *(unsigned int *)(v8 + 48);
  v230 = 0u;
  v231 = 0u;
  v228 = 0;
  v229 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v232 = 0;
  v226 = 0;
  v227 = 0;
  if ((_DWORD)v9)
  {
    if ((v9 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = operator new(4 * v9);
    v226 = v11;
    v228 = (char *)&v11[v9];
    bzero(v11, 4 * v9);
    v227 = v228;
  }
  else
  {
    v11 = 0;
  }
  if ((int)v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 56) + 8 * i + 8);
      if (!*(_DWORD *)(v13 + 16) && *(_DWORD *)(v13 + 60) == 12)
      {
        v14 = *(_QWORD *)(v13 + 48);
        if (*(_DWORD *)(v14 + 64) == 2 && **(_QWORD **)(v14 + 72) == *(_QWORD *)(*(_QWORD *)(v14 + 72) + 8))
        {
          v15 = 0;
          v5 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + i)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + i));
          for (j = (v5 >> 7) ^ (v229 >> 12); ; j = v15 + v17)
          {
            v17 = j & v231;
            v18 = *(_QWORD *)(v229 + v17);
            v19 = ((v18 ^ (0x101010101010101 * (v5 & 0x7F))) - 0x101010101010101) & ~(v18 ^ (0x101010101010101
                                                                                               * (v5 & 0x7F))) & 0x8080808080808080;
            if (v19)
            {
              while (i != *(_DWORD *)(v230 + 4 * ((v17 + (__clz(__rbit64(v19)) >> 3)) & v231)))
              {
                v19 &= v19 - 1;
                if (!v19)
                  goto LABEL_20;
              }
              goto LABEL_23;
            }
LABEL_20:
            if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0)
              break;
            v15 += 8;
          }
          v20 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v229, v5);
          *(_DWORD *)(v230 + 4 * v20) = i;
          v21 = &operations_research::sat::_LinearConstraintProto_default_instance_;
          if (*(_DWORD *)(v13 + 60) != 12)
            goto LABEL_24;
LABEL_23:
          v21 = *(uint64_t **)(v13 + 48);
LABEL_24:
          v22 = *((unsigned int *)v21 + 4);
          if ((int)v22 >= 1)
          {
            v23 = 0;
            v24 = 4 * v22;
            do
            {
              v26 = &operations_research::sat::_LinearConstraintProto_default_instance_;
              if (*(_DWORD *)(v13 + 60) == 12)
                v26 = *(uint64_t **)(v13 + 48);
              v25 = *(_DWORD *)(v26[3] + v23);
              if (~v25 > v25)
                v25 = ~v25;
              ++v11[v25];
              v23 += 4;
            }
            while (v24 != v23);
          }
        }
      }
    }
    v6 = (_QWORD *)*((_QWORD *)this + 2);
  }
  v224 = 0;
  v225 = 0;
  v223 = &v224;
  v27 = (char *)v6[67];
  v28 = (unsigned int *)v6[68];
  v29 = v27;
  if (*v27 <= -2)
  {
    do
    {
      v30 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v29 = (_QWORD *)((char *)v29 + v30);
      v28 += 4 * v30;
    }
    while (*(char *)v29 < -1);
  }
  v31 = &v27[v6[70]];
  while (v29 != (_QWORD *)v31)
  {
    v32 = *v28;
    if ((v32 & 0x80000000) != 0)
    {
      v191 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v219, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3594);
      v192 = (_QWORD *)google::LogMessage::stream(v191);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v219);
    }
    if (v226[v32])
    {
      v33 = v224;
      v34 = &v224;
      v35 = &v224;
      if (v224)
      {
        while (1)
        {
          while (1)
          {
            v35 = (uint64_t **)v33;
            v36 = *((_DWORD *)v33 + 7);
            if ((int)v32 >= v36)
              break;
            v33 = *v35;
            v34 = v35;
            if (!*v35)
              goto LABEL_45;
          }
          if (v36 >= (int)v32)
            break;
          v33 = v35[1];
          if (!v33)
          {
            v34 = v35 + 1;
            goto LABEL_45;
          }
        }
      }
      else
      {
LABEL_45:
        v37 = operator new(0x20uLL);
        v37[7] = v32;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
        *((_QWORD *)v37 + 2) = v35;
        *v34 = (uint64_t *)v37;
        if (*v223)
        {
          v223 = (uint64_t **)*v223;
          v37 = *v34;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v224, (uint64_t *)v37);
        ++v225;
      }
    }
    v38 = *((char *)v29 + 1);
    v29 = (_QWORD *)((char *)v29 + 1);
    v28 += 4;
    if (v38 <= -2)
    {
      do
      {
        v39 = (__clz(__rbit64(((*v29 >> 7) & ~*v29 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v29 = (_QWORD *)((char *)v29 + v39);
        v28 += 4 * v39;
      }
      while (*(char *)v29 < -1);
    }
  }
  v220 = 0u;
  v221 = 0u;
  v218 = 0;
  v219 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v222 = 0;
  v216 = 0;
  v217 = 0;
  if (!*((_QWORD *)&v230 + 1))
    goto LABEL_293;
  v204 = 0;
  v202 = -1;
  do
  {
    v40 = v225;
    if (!v225)
      break;
    while (1)
    {
      v41 = 0;
      v42 = (const char *)*((unsigned int *)v223 + 7);
      v5 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v42)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + (int)v42));
      v43 = (v5 >> 7) ^ (v219 >> 12);
      v44 = 0x101010101010101 * (v5 & 0x7F);
      for (k = v43; ; k = v41 + v46)
      {
        v46 = k & v221;
        v47 = *(_QWORD *)(v219 + v46);
        v48 = (v47 ^ v44) - 0x101010101010101;
        v49 = v48 & ~(v47 ^ v44) & 0x8080808080808080;
        if (v49)
          break;
LABEL_62:
        if ((v47 & (~v47 << 6) & 0x8080808080808080) != 0)
          goto LABEL_65;
        v41 += 8;
      }
      while (1)
      {
        v48 = (v46 + (__clz(__rbit64(v49)) >> 3)) & v221;
        if (*(_DWORD *)(v220 + 4 * v48) == (_DWORD)v42)
          break;
        v48 = v49 - 1;
        v49 &= v49 - 1;
        if (!v49)
          goto LABEL_62;
      }
      if (v48 != (_QWORD)v221)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v214, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3609);
        v196 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v214);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)"Check failed: !processed_vars.contains(var) ", 44);
        goto LABEL_316;
      }
LABEL_65:
      if (!v226[(int)v42])
      {
        for (m = 0; ; v43 = m + v71)
        {
          v71 = v43 & v221;
          v72 = *(_QWORD *)(v219 + (v43 & v221));
          v73 = ((v72 ^ v44) - 0x101010101010101) & ~(v72 ^ v44) & 0x8080808080808080;
          if (v73)
            break;
LABEL_96:
          if ((v72 & (~v72 << 6) & 0x8080808080808080) != 0)
          {
            v74 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v219, v5);
            *(_DWORD *)(v220 + 4 * v74) = (_DWORD)v42;
            goto LABEL_99;
          }
          m += 8;
        }
        while (*(_DWORD *)(v220 + 4 * ((v71 + (__clz(__rbit64(v73)) >> 3)) & v221)) != (_DWORD)v42)
        {
          v73 &= v73 - 1;
          if (!v73)
            goto LABEL_96;
        }
LABEL_99:
        v58 = v224;
        if (!v224)
          goto LABEL_57;
        v59 = &v224;
        v75 = v224;
        do
        {
          v76 = v75;
          v77 = v59;
          v78 = *((_DWORD *)v75 + 7);
          v79 = v75 + 1;
          if (v78 >= (int)v42)
            v59 = (uint64_t **)v75;
          else
            ++v75;
          v75 = (uint64_t *)*v75;
        }
        while (v75);
        if (v59 == &v224)
          goto LABEL_57;
        if (v78 < (int)v42)
          v76 = (uint64_t *)v77;
        if ((int)v42 < *((_DWORD *)v76 + 7))
          goto LABEL_57;
        v80 = (uint64_t *)(v77 + 1);
        if (v78 >= (int)v42)
          v80 = v79;
        v81 = (uint64_t *)*v80;
        v82 = v59;
        if (*v80)
        {
          do
          {
            v83 = (uint64_t **)v81;
            v81 = (uint64_t *)*v81;
          }
          while (v81);
        }
        else
        {
          do
          {
            v83 = (uint64_t **)v82[2];
            v69 = *v83 == (uint64_t *)v82;
            v82 = v83;
          }
          while (!v69);
        }
        if (v223 == v59)
          v223 = v83;
        v40 = v225;
        goto LABEL_56;
      }
      v50 = 0;
      v51 = (_QWORD *)*((_QWORD *)this + 2);
      v52 = v51[67];
      v53 = (v5 >> 7) ^ (v52 >> 12);
      v54 = v51[70];
      while (1)
      {
        v55 = v53 & v54;
        v56 = *(_QWORD *)(v52 + v55);
        v57 = ((v56 ^ v44) - 0x101010101010101) & ~(v56 ^ v44) & 0x8080808080808080;
        if (v57)
          break;
LABEL_70:
        if ((v56 & (~v56 << 6) & 0x8080808080808080) != 0)
          goto LABEL_73;
        v50 += 8;
        v53 = v50 + v55;
      }
      while (1)
      {
        v5 = (v55 + (__clz(__rbit64(v57)) >> 3)) & v54;
        if (*(_DWORD *)(v51[68] + 16 * v5) == (_DWORD)v42)
          break;
        v5 = v57 - 1;
        v57 &= v57 - 1;
        if (!v57)
          goto LABEL_70;
      }
      if (v5 != v54)
        break;
LABEL_73:
      v58 = v224;
      if (!v224)
        goto LABEL_57;
      v59 = &v224;
      v60 = v224;
      do
      {
        v61 = v60;
        v62 = v59;
        v63 = *((_DWORD *)v60 + 7);
        v64 = v60 + 1;
        if (v63 >= (int)v42)
          v59 = (uint64_t **)v60;
        else
          ++v60;
        v60 = (uint64_t *)*v60;
      }
      while (v60);
      if (v59 == &v224)
        goto LABEL_57;
      if (v63 < (int)v42)
        v61 = (uint64_t *)v62;
      if ((int)v42 < *((_DWORD *)v61 + 7))
        goto LABEL_57;
      v65 = (uint64_t *)(v62 + 1);
      if (v63 >= (int)v42)
        v65 = v64;
      v66 = (uint64_t *)*v65;
      v67 = v59;
      if (*v65)
      {
        do
        {
          v68 = (uint64_t **)v66;
          v66 = (uint64_t *)*v66;
        }
        while (v66);
      }
      else
      {
        do
        {
          v68 = (uint64_t **)v67[2];
          v69 = *v68 == (uint64_t *)v67;
          v67 = v68;
        }
        while (!v69);
      }
      if (v223 == v59)
        v223 = v68;
LABEL_56:
      v225 = v40 - 1;
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v58, (uint64_t *)v59);
      operator delete(v59);
LABEL_57:
      v40 = v225;
      if (!v225)
        goto LABEL_280;
    }
    if ((_DWORD)v42 == -1)
      break;
    if ((v42 & 0x80000000) != 0)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v214, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3625);
      v198 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v214);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"Check failed: RefIsPositive(objective_var) ", 43);
LABEL_316:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v214);
    }
    v84 = 0;
    v85 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v42)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + (_QWORD)v42));
    for (n = (v85 >> 7) ^ (v219 >> 12); ; n = v84 + v87)
    {
      v87 = n & v221;
      v88 = *(_QWORD *)(v219 + v87);
      v89 = ((v88 ^ (0x101010101010101 * (v85 & 0x7F))) - 0x101010101010101) & ~(v88 ^ (0x101010101010101
                                                                                          * (v85 & 0x7F))) & 0x8080808080808080;
      if (v89)
        break;
LABEL_124:
      if ((v88 & (~v88 << 6) & 0x8080808080808080) != 0)
      {
        v90 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v219, v85);
        *(_DWORD *)(v220 + 4 * v90) = (_DWORD)v42;
        goto LABEL_127;
      }
      v84 += 8;
    }
    while (*(_DWORD *)(v220 + 4 * ((v87 + (__clz(__rbit64(v89)) >> 3)) & v221)) != (_DWORD)v42)
    {
      v89 &= v89 - 1;
      if (!v89)
        goto LABEL_124;
    }
LABEL_127:
    if (v224)
    {
      v91 = (uint64_t *)&v224;
      v92 = v224;
      do
      {
        v93 = v92;
        v94 = v91;
        v95 = *((_DWORD *)v92 + 7);
        v96 = v92 + 1;
        if (v95 >= (int)v42)
          v91 = v92;
        else
          ++v92;
        v92 = (uint64_t *)*v92;
      }
      while (v92);
      if (v91 != (uint64_t *)&v224)
      {
        if (v95 < (int)v42)
          v93 = v94;
        if ((int)v42 >= *((_DWORD *)v93 + 7))
        {
          v97 = v94 + 1;
          if (v95 >= (int)v42)
            v97 = v96;
          v98 = (uint64_t *)*v97;
          v99 = v91;
          if (*v97)
          {
            do
            {
              v100 = (uint64_t **)v98;
              v98 = (uint64_t *)*v98;
            }
            while (v98);
          }
          else
          {
            do
            {
              v100 = (uint64_t **)v99[2];
              v69 = *v100 == v99;
              v99 = (uint64_t *)v100;
            }
            while (!v69);
          }
          if (v223 == (uint64_t **)v91)
            v223 = v100;
          --v225;
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v224, v91);
          operator delete(v91);
        }
      }
    }
    v101 = (char **)(*(_QWORD *)(*((_QWORD *)this + 2) + 680) + 48 * v42);
    v102 = (int *)v101[1];
    v103 = *v101;
    if (**v101 <= -2)
    {
      do
      {
        v104 = (__clz(__rbit64(((*(_QWORD *)v103 >> 7) & ~*(_QWORD *)v103 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v103 += v104;
        v102 += v104;
      }
      while (*v103 < -1);
    }
    v105 = &v101[3][(_QWORD)*v101];
    v214 = 0;
    v215 = 0uLL;
    if (v103 == v105)
    {
      v106 = 0;
    }
    else
    {
      v106 = 0;
      v107 = v103;
      do
      {
        v108 = *++v107;
        if (v108 <= -2)
        {
          do
            v107 += (__clz(__rbit64(((*(_QWORD *)v107 >> 7) & ~*(_QWORD *)v107 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          while (*v107 < -1);
        }
        ++v106;
      }
      while (v107 != v105);
    }
    std::vector<int>::__init_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::const_iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::const_iterator>(&v214, v103, v102, v105, v48, v106);
    std::__sort<std::__less<int,int> &,int *>();
    v109 = v214;
    v5 = v215;
    if (v214 != (void *)v215)
    {
      v203 = 0;
      v200 = 0;
      v201 = -1;
      v205 = v215;
      while (2)
      {
        v114 = 0;
        LODWORD(v210) = 0;
        LODWORD(v210) = *v109;
        v138 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v210)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + (int)v210));
        v115 = (v138 >> 7) ^ (v229 >> 12);
        v139 = 0x101010101010101 * (v138 & 0x7F);
        while (1)
        {
          v110 = v115 & v231;
          v111 = *(_QWORD *)(v229 + v110);
          v112 = ((v111 ^ v139) - 0x101010101010101) & ~(v111 ^ v139) & 0x8080808080808080;
          if (v112)
            break;
LABEL_161:
          if ((v111 & (~v111 << 6) & 0x8080808080808080) != 0)
            goto LABEL_201;
          v114 += 8;
          v115 = v114 + v110;
        }
        while (1)
        {
          v113 = (v110 + (__clz(__rbit64(v112)) >> 3)) & v231;
          if (*(_DWORD *)(v230 + 4 * v113) == (_DWORD)v210)
            break;
          v112 &= v112 - 1;
          if (!v112)
            goto LABEL_161;
        }
        if (v113 == (_QWORD)v231)
          goto LABEL_201;
        v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 56) + 8 * (int)v210 + 8);
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)&v229, (int *)&v210);
        v117 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        if (*(_DWORD *)(v116 + 60) == 12)
          v117 = *(uint64_t **)(v116 + 48);
        v118 = *((unsigned int *)v117 + 4);
        if ((int)v118 < 1)
        {
LABEL_317:
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3667);
          v197 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"Check failed: is_present ", 25);
LABEL_314:
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
        }
        v119 = 0;
        v120 = v226;
        do
        {
          v122 = &operations_research::sat::_LinearConstraintProto_default_instance_;
          if (*(_DWORD *)(v116 + 60) == 12)
            v122 = *(uint64_t **)(v116 + 48);
          v121 = *(_DWORD *)(v122[3] + v119);
          if (~v121 > v121)
            v121 = ~v121;
          --v120[v121];
          v119 += 4;
        }
        while (4 * v118 != v119);
        v123 = 0;
        v124 = 0;
        v125 = 0;
        do
        {
          while (1)
          {
            v132 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (*(_DWORD *)(v116 + 60) == 12)
              v132 = *(uint64_t **)(v116 + 48);
            v133 = *(_DWORD *)(v132[3] + 4 * v123);
            v134 = ~v133 <= v133 ? *(_DWORD *)(v132[3] + 4 * v123) : ~v133;
            if (v134 == (_DWORD)v42)
              break;
            v130 = 0;
            v135 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v134)
                   * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                      * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                       + v134));
            v131 = (v219 >> 12) ^ (v135 >> 7);
            v136 = 0x101010101010101 * (v135 & 0x7F);
            while (1)
            {
              v126 = v131 & v221;
              v127 = *(_QWORD *)(v219 + v126);
              v128 = ((v127 ^ v136) - 0x101010101010101) & ~(v127 ^ v136) & 0x8080808080808080;
              if (v128)
                break;
LABEL_177:
              if ((v127 & (~v127 << 6) & 0x8080808080808080) != 0)
                goto LABEL_180;
              v130 += 8;
              v131 = v130 + v126;
            }
            while (1)
            {
              v129 = (v126 + (__clz(__rbit64(v128)) >> 3)) & v221;
              if (*(_DWORD *)(v220 + 4 * v129) == v134)
                break;
              v128 &= v128 - 1;
              if (!v128)
                goto LABEL_177;
            }
            if (v129 != (_QWORD)v221)
            {
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3664);
              v195 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)"Check failed: !processed_vars.contains(PositiveRef(ref)) ", 57);
              goto LABEL_314;
            }
LABEL_180:
            if (++v123 == v118)
              goto LABEL_193;
          }
          if ((v125 & 1) != 0)
          {
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3659);
            v193 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
            v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"Check failed: !is_present ", 26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"Duplicate variables not supported.", 34);
            goto LABEL_314;
          }
          v124 = *(_QWORD *)(v132[6] + 8 * v123);
          if (v133 != (_DWORD)v42)
            v124 = -v124;
          v125 = 1;
          ++v123;
        }
        while (v123 != v118);
LABEL_193:
        if ((v125 & 1) == 0)
          goto LABEL_317;
        if (v124 >= 0)
          v137 = v124;
        else
          v137 = -v124;
        if (v137 == 1)
        {
          v5 = v205;
          if (v203 < (int)v118)
          {
            v200 = v124;
            v201 = (int)v210;
            v203 = (int)v118;
          }
        }
        else
        {
          v5 = v205;
        }
LABEL_201:
        if (++v109 != (_DWORD *)v5)
          continue;
        break;
      }
      if (v201 == -1)
      {
        v169 = v204;
      }
      else
      {
        v140 = *((_QWORD *)this + 2);
        __p = operator new(0x30uLL);
        *(_OWORD *)v213 = xmmword_22DCE6560;
        strcpy((char *)__p, "objective: expanded objective constraint.");
        operations_research::sat::PresolveContext::UpdateRuleStats(v140, (uint64_t)&__p);
        if (SHIBYTE(v213[1]) < 0)
          operator delete(__p);
        v141 = v200;
        if (v200 < 0)
          v141 = -v200;
        __p = (void *)v141;
        LODWORD(v209[0]) = 1;
        if (v141 != 1)
        {
          v210 = (void *)google::MakeCheckOpString<long long,int>((int)&__p, (int)v209, "std::abs(objective_coeff_in_expanded_constraint) == 1");
          if (v210)
          {
            google::LogMessageFatal::LogMessageFatal((unint64_t *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3687, (uint64_t **)&v210);
            google::LogMessage::stream((google::LogMessage *)&__p);
            goto LABEL_314;
          }
        }
        v142 = *((_QWORD *)this + 2);
        v199 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v142 + 48) + 56) + 8 * v201 + 8);
        operations_research::sat::PresolveContext::SubstituteVariableInObjective(v142, (int)v42, v200, v199, (void **)&v216);
        v144 = v216;
        for (ii = v217; v144 != ii; ++v144)
        {
          v149 = 0;
          v150 = *v144;
          v151 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v150)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v150));
          v152 = (v151 >> 7) ^ (v219 >> 12);
          v153 = 0x101010101010101 * (v151 & 0x7F);
          while (1)
          {
            v154 = v152 & v221;
            v155 = *(_QWORD *)(v219 + v154);
            v156 = ((v155 ^ v153) - 0x101010101010101) & ~(v155 ^ v153) & 0x8080808080808080;
            if (v156)
              break;
LABEL_222:
            if ((v155 & (~v155 << 6) & 0x8080808080808080) != 0)
              goto LABEL_225;
            v149 += 8;
            v152 = v149 + v154;
          }
          while (1)
          {
            v157 = (v154 + (__clz(__rbit64(v156)) >> 3)) & v221;
            if (*(_DWORD *)(v220 + 4 * v157) == (_DWORD)v150)
              break;
            v156 &= v156 - 1;
            if (!v156)
              goto LABEL_222;
          }
          if (v157 == (_QWORD)v221)
          {
LABEL_225:
            v158 = v224;
            v159 = &v224;
            v160 = &v224;
            if (v224)
            {
              while (1)
              {
                while (1)
                {
                  v160 = (uint64_t **)v158;
                  v161 = *((_DWORD *)v158 + 7);
                  if ((int)v150 >= v161)
                    break;
                  v158 = *v160;
                  v159 = v160;
                  if (!*v160)
                    goto LABEL_232;
                }
                if (v161 >= (int)v150)
                  break;
                v158 = v160[1];
                if (!v158)
                {
                  v159 = v160 + 1;
                  goto LABEL_232;
                }
              }
            }
            else
            {
LABEL_232:
              v162 = operator new(0x20uLL);
              v162[7] = v150;
              *(_QWORD *)v162 = 0;
              *((_QWORD *)v162 + 1) = 0;
              *((_QWORD *)v162 + 2) = v160;
              *v159 = (uint64_t *)v162;
              if (*v223)
              {
                v223 = (uint64_t **)*v223;
                v162 = *v159;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v224, (uint64_t *)v162);
              ++v225;
            }
            continue;
          }
        }
        v145 = *((_QWORD *)this + 2);
        if (*(_QWORD *)(*(_QWORD *)(v145 + 680) + 48 * v42 + 16) == 1)
        {
          v146 = v204;
          if (!*(_BYTE *)(v145 + 64))
          {
            v147 = &operations_research::sat::_LinearConstraintProto_default_instance_;
            if (*(_DWORD *)(v199 + 60) == 12)
              v147 = *(uint64_t **)(v199 + 48);
            operations_research::Domain::FromFlatSpanOfIntervals(v147[9], *((int *)v147 + 16), (unint64_t *)&__p, v143);
            if (v203 >= 1)
            {
              for (jj = 0; v203 != jj; ++jj)
              {
                v163 = &operations_research::sat::_LinearConstraintProto_default_instance_;
                if (*(_DWORD *)(v199 + 60) == 12)
                  v163 = *(uint64_t **)(v199 + 48);
                v164 = (const char *)*(unsigned int *)(v163[3] + 4 * jj);
                if (~(_DWORD)v164 <= (int)v164)
                  v165 = *(_DWORD *)(v163[3] + 4 * jj);
                else
                  v165 = ~(_DWORD)v164;
                if (v165 == (_DWORD)v42)
                  continue;
                operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v164, v207);
                v166 = &operations_research::sat::_LinearConstraintProto_default_instance_;
                if (*(_DWORD *)(v199 + 60) == 12)
                  v166 = *(uint64_t **)(v199 + 48);
                operations_research::Domain::MultiplicationBy((operations_research::Domain *)v207, 0, -*(_QWORD *)(v166[6] + 8 * jj), v208);
                operations_research::Domain::AdditionWith((operations_research::Domain *)&__p, (const operations_research::Domain *)v208, v209, v167);
                operations_research::Domain::RelaxIfTooComplex(v209, v168, (unint64_t *)&v210);
                if ((__p & 1) != 0)
                  operator delete(v213[0]);
                __p = v210;
                *(_OWORD *)v213 = *(_OWORD *)v211;
                v210 = 0;
                if ((v209[0] & 1) != 0)
                {
                  operator delete((void *)v209[1]);
                  if ((v208[0] & 1) == 0)
                  {
LABEL_247:
                    if ((v207[0] & 1) != 0)
                      goto LABEL_251;
                    continue;
                  }
                }
                else if ((v208[0] & 1) == 0)
                {
                  goto LABEL_247;
                }
                operator delete((void *)v208[1]);
                if ((v207[0] & 1) != 0)
LABEL_251:
                  operator delete((void *)v207[1]);
              }
            }
            operations_research::Domain::InverseMultiplicationBy((operations_research::Domain *)&__p, v200, (unint64_t *)&v210);
            if ((__p & 1) != 0)
              operator delete(v213[0]);
            __p = v210;
            *(_OWORD *)v213 = *(_OWORD *)v211;
            operations_research::sat::PresolveContext::DomainOf(*((operations_research::sat::PresolveContext **)this + 2), v42, (unint64_t *)&v210);
            IsIncludedIn = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&__p, (const operations_research::Domain *)&v210);
            if ((v210 & 1) != 0)
              operator delete(v211[0]);
            if (IsIncludedIn)
            {
              v171 = *((_QWORD *)this + 2);
              v210 = operator new(0x30uLL);
              *(_OWORD *)v211 = xmmword_22DCED9E0;
              strcpy((char *)v210, "objective: removed objective constraint.");
              operations_research::sat::PresolveContext::UpdateRuleStats(v171, (uint64_t)&v210);
              if (SHIBYTE(v211[1]) < 0)
                operator delete(v210);
              v172 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
              v173 = *(int **)(v172 + 56);
              if (!v173)
              {
                v175 = *(_DWORD *)(v172 + 52);
                goto LABEL_273;
              }
              v174 = *(int *)(v172 + 48);
              v175 = *v173;
              if ((int)v174 < *v173)
              {
                *(_DWORD *)(v172 + 48) = v174 + 1;
                v176 = *(operations_research::sat::ConstraintProto **)&v173[2 * v174 + 2];
                goto LABEL_275;
              }
              if (v175 == *(_DWORD *)(v172 + 52))
              {
LABEL_273:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v172 + 40), v175 + 1);
                v173 = *(int **)(v172 + 56);
                v175 = *v173;
              }
              *v173 = v175 + 1;
              v176 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v172 + 40));
              v177 = *(_QWORD *)(v172 + 56);
              v178 = *(int *)(v172 + 48);
              *(_DWORD *)(v172 + 48) = v178 + 1;
              *(_QWORD *)(v177 + 8 * v178 + 8) = v176;
LABEL_275:
              operations_research::sat::ConstraintProto::CopyFrom(v176, (const operations_research::sat::ConstraintProto *)v199);
              operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 56) + 8 * v201 + 8));
              operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), v201);
            }
            else
            {
              v202 = v201;
            }
            if ((__p & 1) != 0)
              operator delete(v213[0]);
          }
        }
        else
        {
          v146 = v204;
        }
        v169 = v146 + 1;
      }
      v204 = v169;
      v109 = v214;
    }
    if (v109)
    {
      *(_QWORD *)&v215 = v109;
      operator delete(v109);
    }
  }
  while (*((_QWORD *)&v230 + 1));
LABEL_280:
  v179 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (v204 == 1 && v7 == 1 && v202 != -1)
  {
    v214 = operator new(0x30uLL);
    v215 = xmmword_22DCE5C70;
    strcpy((char *)v214, "objective: removed unique objective constraint.");
    operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)v179, (uint64_t)&v214);
    if (SHIBYTE(v215) < 0)
      operator delete(v214);
    v180 = *((_QWORD *)this + 2);
    v181 = *(_QWORD *)(v180 + 56);
    v182 = *(const operations_research::sat::ConstraintProto **)(*(_QWORD *)(*(_QWORD *)(v180 + 48) + 56)
                                                               + 8 * v202
                                                               + 8);
    v183 = *(int **)(v181 + 56);
    if (!v183)
    {
      v185 = *(_DWORD *)(v181 + 52);
      goto LABEL_290;
    }
    v184 = *(int *)(v181 + 48);
    v185 = *v183;
    if ((int)v184 < *v183)
    {
      *(_DWORD *)(v181 + 48) = v184 + 1;
      v186 = *(operations_research::sat::ConstraintProto **)&v183[2 * v184 + 2];
      goto LABEL_292;
    }
    if (v185 == *(_DWORD *)(v181 + 52))
    {
LABEL_290:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v181 + 40), v185 + 1);
      v183 = *(int **)(v181 + 56);
      v185 = *v183;
    }
    *v183 = v185 + 1;
    v186 = (operations_research::sat::ConstraintProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v181 + 40));
    v187 = *(_QWORD *)(v181 + 56);
    v188 = *(int *)(v181 + 48);
    *(_DWORD *)(v181 + 48) = v188 + 1;
    *(_QWORD *)(v187 + 8 * v188 + 8) = v186;
LABEL_292:
    operations_research::sat::ConstraintProto::CopyFrom(v186, v182);
    operations_research::sat::ConstraintProto::Clear(v182);
    operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), v202);
LABEL_293:
    v179 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  }
  v189 = operations_research::sat::PresolveContext::CanonicalizeObjective(v179, v5);
  v190 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (v189)
  {
    operations_research::sat::PresolveContext::WriteObjectiveToProto(v190);
  }
  else
  {
    HIBYTE(v215) = 0;
    LOBYTE(v214) = 0;
    operations_research::sat::PresolveContext::NotifyThatModelIsUnsat((uint64_t)v190, (uint64_t)&v214);
    if (SHIBYTE(v215) < 0)
      operator delete(v214);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if ((_QWORD)v221)
  {
    operator delete((void *)v219);
    v219 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v222 = 0;
    *(_QWORD *)&v221 = 0;
    v220 = 0uLL;
  }
  if (*((_QWORD *)&v221 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v221 + 1));
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v223, v224);
  if (v226)
    operator delete(v226);
  if ((_QWORD)v231)
  {
    operator delete((void *)v229);
    v229 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v232 = 0;
    *(_QWORD *)&v231 = 0;
    v230 = 0uLL;
  }
  if (*((_QWORD *)&v231 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v231 + 1));
}

void sub_22DADCE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a37);
}

void sub_22DADCEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,char a28,void *a29,uint64_t a30,char a31,void *a32,uint64_t a33,void *a34,void *a35,int a36,__int16 a37,char a38,char a39,void *a40,void *a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;
  void *v53;
  void *v54;

  if (__p)
    operator delete(__p);
  v53 = *(void **)(v51 - 256);
  if (v53)
  {
    *(_QWORD *)(v51 - 248) = v53;
    operator delete(v53);
  }
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set(v51 - 232);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v51 - 184, *(_QWORD **)(v51 - 176));
  v54 = *(void **)(v51 - 160);
  if (v54)
  {
    *(_QWORD *)(v51 - 152) = v54;
    operator delete(v54);
  }
  absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::~flat_hash_set(v51 - 136);
  _Unwind_Resume(a1);
}

void operations_research::sat::CpModelPresolver::MergeNoOverlapConstraints(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  char *v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  unint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  operations_research::sat::Trail *v55;
  operations_research::sat::BinaryImplicationGraph *v56;
  char **v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  int **v63;
  int *v64;
  int *v65;
  int v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  google::protobuf::Arena *v72;
  operations_research::sat::CpModelPresolver *v73;
  _QWORD *v74;
  char *v75;
  _BYTE *v76;
  char *v77;
  _BYTE *v78;
  char *v79;
  _BYTE *v80;
  char *v81;
  _BYTE *v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  void *v96;
  google::LogMessage *v97;
  _QWORD *v98;
  google::LogMessage *v99;
  _QWORD *v100;
  google::LogMessage *v101;
  _QWORD *v102;
  uint64_t v103;
  operations_research::sat::CpModelPresolver *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  unsigned int v108;
  absl::lts_2020_02_25::numbers_internal *v109;
  void *__p[2];
  unsigned __int8 v111;
  _BYTE v112[16];
  void *v113[2];
  uint64_t v114;
  _QWORD **v115;
  _QWORD *v116[2];
  void *v117;
  _QWORD *v118;
  uint64_t v119;
  void *v120;
  char *v121;
  unint64_t v122;
  void *v123;
  _DWORD *v124;
  char *v125;
  _BYTE *v126;
  uint64_t v127;
  _BYTE v128[32];
  __int128 v129;
  _BYTE v130[40];
  _BYTE *v131;
  uint64_t v132;
  _BYTE v133[32];
  _BYTE *v134;
  uint64_t v135;
  _BYTE v136[32];
  char *v137;
  _BYTE v138[24];
  const char *v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  const char *v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v1 + 504))
    return;
  v2 = *(unsigned int *)(*(_QWORD *)(v1 + 48) + 48);
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  if ((int)v2 < 1)
    goto LABEL_131;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v109 = 0;
  v103 = v2;
  v104 = this;
  do
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 56) + 8 * v6 + 8);
    if (*(_DWORD *)(v9 + 60) == 20)
    {
      v105 = (unint64_t)v4;
      v106 = (char *)v5;
      v107 = v3;
      *(_QWORD *)v138 = 0;
      *(_QWORD *)&v138[8] = 0;
      v137 = 0;
      v10 = *(_QWORD *)(v9 + 48);
      v11 = *(int *)(v10 + 16);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = *(_DWORD **)(v10 + 24);
        v14 = &v13[v11];
        while (1)
        {
          v16 = 2 * *v13;
          if ((unint64_t)v12 >= *(_QWORD *)&v138[8])
            break;
          *(_DWORD *)v12 = v16;
          v15 = (uint64_t)(v12 + 4);
LABEL_12:
          *(_QWORD *)v138 = v15;
          ++v13;
          v12 = (char *)v15;
          if (v13 == v14)
            goto LABEL_40;
        }
        v17 = v137;
        v18 = v12 - v137;
        v19 = (v12 - v137) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v21 = *(_QWORD *)&v138[8] - (_QWORD)v137;
        if ((uint64_t)(*(_QWORD *)&v138[8] - (_QWORD)v137) >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(4 * v22);
          v24 = &v23[4 * v19];
          *(_DWORD *)v24 = v16;
          v15 = (uint64_t)(v24 + 4);
          if (v12 == v17)
            goto LABEL_28;
LABEL_25:
          v25 = v12 - 4 - v17;
          if (v25 < 0xBC)
          {
            v26 = v12;
            goto LABEL_27;
          }
          if (&v23[v18 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v23[v18 - 4])
          {
            v26 = v12;
            goto LABEL_27;
          }
          if (&v12[-(v25 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v12 - 4)
          {
            v26 = v12;
            goto LABEL_27;
          }
          if ((unint64_t)(v17 - v23) < 0x20)
          {
            v26 = v12;
            goto LABEL_27;
          }
          v28 = (v25 >> 2) + 1;
          v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
          v26 = &v12[-v29];
          v24 -= v29;
          v30 = &v23[4 * v19 - 16];
          v31 = v12 - 16;
          v32 = v28 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v33 = *(_OWORD *)v31;
            *(v30 - 1) = *((_OWORD *)v31 - 1);
            *v30 = v33;
            v30 -= 2;
            v31 -= 32;
            v32 -= 8;
          }
          while (v32);
          if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_27:
              v27 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *((_DWORD *)v24 - 1) = v27;
              v24 -= 4;
            }
            while (v26 != v17);
          }
        }
        else
        {
          v23 = 0;
          v24 = (char *)(4 * v19);
          *(_DWORD *)(4 * v19) = v16;
          v15 = 4 * v19 + 4;
          if (v12 != v17)
            goto LABEL_25;
        }
LABEL_28:
        v137 = v24;
        *(_QWORD *)v138 = v15;
        *(_QWORD *)&v138[8] = &v23[4 * v22];
        if (v17)
          operator delete(v17);
        goto LABEL_12;
      }
LABEL_40:
      v34 = v121;
      if ((unint64_t)v121 >= v122)
      {
        v39 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>((char **)&v120, (uint64_t)&v137);
        v40 = v106;
        v3 = v107;
      }
      else
      {
        *(_QWORD *)v121 = 0;
        *((_QWORD *)v34 + 1) = 0;
        *((_QWORD *)v34 + 2) = 0;
        v35 = v137;
        v36 = *(_QWORD *)v138 - (_QWORD)v137;
        if (*(char **)v138 != v137)
        {
          if (v36 < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v37 = (char *)operator new(*(_QWORD *)v138 - (_QWORD)v137);
          *(_QWORD *)v34 = v37;
          *((_QWORD *)v34 + 1) = v37;
          v38 = &v37[4 * (v36 >> 2)];
          *((_QWORD *)v34 + 2) = v38;
          memcpy(v37, v35, v36);
          *((_QWORD *)v34 + 1) = v38;
        }
        v39 = v34 + 24;
        v40 = v106;
        v3 = v107;
      }
      v4 = (char *)v105;
      v121 = v39;
      if ((unint64_t)v40 < v105)
      {
        *(_DWORD *)v40 = v6;
        v5 = (uint64_t)(v40 + 4);
        v124 = v40 + 4;
        v8 = v137;
        v7 = *(_QWORD *)v138;
        if (!v137)
        {
LABEL_6:
          LODWORD(v109) = (_DWORD)v109 + ((unint64_t)(v7 - (_QWORD)v8) >> 2);
          ++HIDWORD(v109);
          v2 = v103;
          this = v104;
          goto LABEL_7;
        }
LABEL_5:
        *(_QWORD *)v138 = v8;
        operator delete(v8);
        goto LABEL_6;
      }
      v41 = (v40 - v3) >> 2;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v105 - (_QWORD)v3) >> 1 > v42)
        v42 = (uint64_t)(v105 - (_QWORD)v3) >> 1;
      if (v105 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
        v43 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v43 = v42;
      if (v43)
      {
        if (v43 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v44 = operator new(4 * v43);
        v45 = &v44[4 * v41];
        *v45 = v6;
        v5 = (uint64_t)(v45 + 1);
        if (v40 == v3)
        {
LABEL_61:
          v4 = &v44[4 * v43];
          v123 = v45;
          v124 = (_DWORD *)v5;
          v125 = v4;
          if (v3)
            operator delete(v3);
          v3 = (char *)v45;
          v124 = (_DWORD *)v5;
          v8 = v137;
          v7 = *(_QWORD *)v138;
          if (!v137)
            goto LABEL_6;
          goto LABEL_5;
        }
      }
      else
      {
        v44 = 0;
        v45 = (_DWORD *)(4 * v41);
        *(_DWORD *)(4 * v41) = v6;
        v5 = 4 * v41 + 4;
        if (v40 == v3)
          goto LABEL_61;
      }
      v46 = v40 - 4 - v3;
      if (v46 >= 0xBC)
      {
        if (&v44[v40 - v3 - 4 - (v46 & 0xFFFFFFFFFFFFFFFCLL)] > &v44[v40 - v3 - 4])
        {
          v47 = v40;
        }
        else if (&v40[-(v46 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v40 - 4)
        {
          v47 = v40;
        }
        else if ((unint64_t)(v3 - v44) >= 0x20)
        {
          v49 = (v46 >> 2) + 1;
          v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
          v47 = &v40[-v50];
          v45 = (_DWORD *)((char *)v45 - v50);
          v51 = &v44[4 * v41 - 16];
          v52 = v40 - 16;
          v53 = v49 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *v51 = v54;
            v51 -= 2;
            v52 -= 32;
            v53 -= 8;
          }
          while (v53);
          if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_61;
        }
        else
        {
          v47 = v40;
        }
      }
      else
      {
        v47 = v40;
      }
      do
      {
        v48 = *((_DWORD *)v47 - 1);
        v47 -= 4;
        *--v45 = v48;
      }
      while (v47 != v3);
      goto LABEL_61;
    }
LABEL_7:
    ++v6;
  }
  while (v6 != v2);
  if (HIDWORD(v109))
  {
    v113[0] = 0;
    v113[1] = 0;
    v116[0] = 0;
    v116[1] = 0;
    v114 = 0;
    v115 = v116;
    v118 = 0;
    v119 = 0;
    v117 = 0;
    v55 = (operations_research::sat::Trail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)v113);
    operations_research::sat::Trail::Resize(v55, v2);
    v56 = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)v113);
    operations_research::sat::BinaryImplicationGraph::Resize(v56, v2);
    v57 = (char **)v120;
    v58 = v121;
    if (v120 != v121)
    {
      while (operations_research::sat::BinaryImplicationGraph::AddAtMostOne((uint64_t)v56, *v57, (v57[1] - *v57) >> 2))
      {
        v57 += 3;
        if (v57 == (char **)v58)
          goto LABEL_79;
      }
      v99 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v137, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3794);
      v100 = (_QWORD *)google::LogMessage::stream(v99);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"Check failed: graph->AddAtMostOne(clique) ", 42);
LABEL_135:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v137);
    }
LABEL_79:
    if ((operations_research::sat::BinaryImplicationGraph::DetectEquivalences(v56, 0) & 1) == 0)
    {
      v101 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v137, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3796);
      v102 = (_QWORD *)google::LogMessage::stream(v101);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"Check failed: graph->DetectEquivalences() ", 42);
      goto LABEL_135;
    }
    operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(v56, (uint64_t **)&v120, (uint64_t)*(double *)(*(_QWORD *)v104 + 528));
    if (v121 != v120)
    {
      v59 = 0;
      v108 = 0;
      v60 = 0;
      while (1)
      {
        v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v104 + 2) + 48) + 56) + 8 * *((int *)v123 + v59) + 8);
        operations_research::sat::ConstraintProto::Clear((operations_research::sat::ConstraintProto *)v62);
        v61 = v120;
        v63 = (int **)((char *)v120 + 24 * v59);
        v65 = *v63;
        v64 = v63[1];
        if (*v63 != v64)
          break;
LABEL_83:
        if (0xAAAAAAAAAAAAAAABLL * ((v121 - v61) >> 3) <= ++v59)
          goto LABEL_98;
      }
      while (2)
      {
        v66 = *v65;
        if ((*v65 & 1) != 0)
        {
          v97 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v137, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3810);
          v98 = (_QWORD *)google::LogMessage::stream(v97);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Check failed: l.IsPositive() ", 29);
          goto LABEL_135;
        }
        if (*(_DWORD *)(v62 + 60) == 20)
        {
          v67 = *(_QWORD *)(v62 + 48);
          v69 = *(unsigned int *)(v67 + 16);
          v68 = (unsigned int *)(v67 + 16);
          v70 = v69 + 1;
          if ((_DWORD)v69 == *(_DWORD *)(v67 + 20))
            goto LABEL_86;
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint(v62);
          *(_DWORD *)(v62 + 60) = 20;
          v71 = *(_QWORD *)(v62 + 8);
          v72 = (google::protobuf::Arena *)(v71 & 0xFFFFFFFFFFFFFFFELL);
          if ((v71 & 1) != 0)
            v72 = *(google::protobuf::Arena **)v72;
          v67 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::NoOverlapConstraintProto>(v72);
          *(_QWORD *)(v62 + 48) = v67;
          v69 = *(unsigned int *)(v67 + 16);
          v68 = (unsigned int *)(v67 + 16);
          v70 = v69 + 1;
          if ((_DWORD)v69 == *(_DWORD *)(v67 + 20))
LABEL_86:
            google::protobuf::RepeatedField<int>::Reserve(v68, v70);
        }
        *(_DWORD *)(*(_QWORD *)(v67 + 24) + 4 * v69) = v66 >> 1;
        *(_DWORD *)(v67 + 16) = v70;
        if (++v65 == v64)
        {
          ++v108;
          v61 = v120;
          v60 = v60 + ((*((_QWORD *)v120 + 3 * v59 + 1) - *((_QWORD *)v120 + 3 * v59)) >> 2);
          goto LABEL_83;
        }
        continue;
      }
    }
    v60 = 0;
    v108 = 0;
LABEL_98:
    if (v109 != (absl::lts_2020_02_25::numbers_internal *)__PAIR64__(v108, v60))
    {
      v73 = v104;
      if (*operations_research::sat::CpModelPresolver::MergeNoOverlapConstraints(void)::vlocal__ >= 1
        && (operations_research::sat::CpModelPresolver::MergeNoOverlapConstraints(void)::vlocal__ != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)&operations_research::sat::CpModelPresolver::MergeNoOverlapConstraints(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_presolve.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v112, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3818);
        v74 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v112);
        v76 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(HIDWORD(v109), v130, v75);
        *(_QWORD *)&v129 = v130;
        *((_QWORD *)&v129 + 1) = v76 - v130;
        v78 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v109, v128, v77);
        v126 = v128;
        v127 = v78 - v128;
        v137 = "Merged ";
        *(_QWORD *)v138 = 7;
        *(_OWORD *)&v138[8] = v129;
        v139 = " no-overlaps (";
        v140 = 14;
        v141 = v128;
        v142 = v78 - v128;
        v143 = " intervals) into ";
        v144 = 17;
        v80 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v108, v136, v79);
        v134 = v136;
        v135 = v80 - v136;
        v145 = v136;
        v146 = v80 - v136;
        v147 = " no-overlaps (";
        v148 = 14;
        v82 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v60, v133, v81);
        v131 = v133;
        v132 = v82 - v133;
        v149 = v133;
        v150 = v82 - v133;
        v151 = " intervals).";
        v152 = 12;
        absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)&v137, 9, (char *)__p);
        if ((v111 & 0x80u) == 0)
          v83 = __p;
        else
          v83 = (void **)__p[0];
        if ((v111 & 0x80u) == 0)
          v84 = v111;
        else
          v84 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v83, v84);
        v73 = v104;
        if ((char)v111 < 0)
          operator delete(__p[0]);
        google::LogMessage::~LogMessage((google::LogMessage *)v112);
      }
      v85 = *((_QWORD *)v73 + 2);
      v137 = (char *)operator new(0x20uLL);
      *(_OWORD *)v138 = xmmword_22DCE5C00;
      strcpy(v137, "no_overlap: merged constraints");
      operations_research::sat::PresolveContext::UpdateRuleStats(v85, (uint64_t)&v137);
      if ((v138[15] & 0x80000000) != 0)
        operator delete(v137);
    }
    v86 = v117;
    if (v117)
    {
      v87 = v118;
      v88 = v117;
      if (v118 != v117)
      {
        do
        {
          v90 = *--v87;
          v89 = v90;
          *v87 = 0;
          if (v90)
            (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
        }
        while (v87 != v86);
        v88 = v117;
      }
      v118 = v86;
      operator delete(v88);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v115, v116[0]);
    if (SHIBYTE(v114) < 0)
      operator delete(v113[0]);
  }
  v91 = (char *)v120;
  if (v120)
  {
    v92 = v121;
    v93 = v120;
    if (v121 != v120)
    {
      v94 = v121;
      do
      {
        v96 = (void *)*((_QWORD *)v94 - 3);
        v94 -= 24;
        v95 = v96;
        if (v96)
        {
          *((_QWORD *)v92 - 2) = v95;
          operator delete(v95);
        }
        v92 = v94;
      }
      while (v94 != v91);
      v93 = v120;
    }
    v121 = v91;
    operator delete(v93);
  }
LABEL_131:
  if (v123)
    operator delete(v123);
}

void sub_22DADDAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  operations_research::sat::Model::~Model((operations_research::sat::Model *)&a23);
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a32);
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::Trail::Resize(operations_research::sat::Trail *this, int a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v4 = (2 * a2) & ~((2 * a2) >> 31);
  *((_DWORD *)this + 4) = v4;
  v6 = *((_QWORD *)this + 3);
  v7 = *((_QWORD *)this + 4);
  v5 = (char *)this + 24;
  v8 = (v4 + 63) >> 6;
  v20 = 0;
  v9 = (v7 - v6) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9)
      *((_QWORD *)this + 4) = v6 + 8 * v8;
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)v5, v8 - v9, &v20);
  }
  v10 = *((_QWORD *)this + 15);
  v11 = (*((_QWORD *)this + 16) - v10) >> 3;
  if (a2 <= v11)
  {
    if (a2 < v11)
      *((_QWORD *)this + 16) = v10 + 8 * a2;
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 15, a2 - v11);
  }
  v12 = *((_QWORD *)this + 9);
  v13 = (*((_QWORD *)this + 10) - v12) >> 2;
  if (a2 <= v13)
  {
    if (a2 < v13)
      *((_QWORD *)this + 10) = v12 + 4 * a2;
  }
  else
  {
    std::vector<operations_research::sat::Literal>::__append((uint64_t)this + 72, a2 - v13);
  }
  v14 = *((_QWORD *)this + 28);
  v15 = (*((_QWORD *)this + 29) - v14) >> 4;
  if (a2 <= v15)
  {
    if (a2 < v15)
      *((_QWORD *)this + 29) = v14 + 16 * a2;
  }
  else
  {
    std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)this + 28, a2 - v15);
  }
  v16 = *((_QWORD *)this + 31);
  v17 = (*((_QWORD *)this + 32) - v16) >> 2;
  if (a2 <= v17)
  {
    if (a2 < v17)
      *((_QWORD *)this + 32) = v16 + 4 * a2;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 248), a2 - v17);
  }
  v18 = *((_QWORD *)this + 19);
  v19 = (*((_QWORD *)this + 20) - v18) >> 2;
  if (a2 <= v19)
  {
    if (a2 < v19)
      *((_QWORD *)this + 20) = v18 + 4 * a2;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 152), a2 - v19);
  }
}

void operations_research::sat::CpModelPresolver::TransformIntoMaxCliques(operations_research::sat::CpModelPresolver *this)
{
  char **v1;
  char ***v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  int *v11;
  void *v12;
  int v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  int *v21;
  unint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  operations_research::sat::ConstraintProto *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  int v40;
  uint64_t *v41;
  uint64_t *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  operations_research::sat::Trail *v51;
  operations_research::sat::BinaryImplicationGraph *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v62;
  int v63;
  int *v64;
  int *v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  int v80;
  unsigned int *v81;
  uint64_t v82;
  google::protobuf::Arena *v83;
  uint64_t v84;
  google::protobuf::Arena *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  void *v100;
  void *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  operations_research::sat::ConstraintProto *v107;
  int v108;
  void *v109;
  __int128 v110;
  void *__p[2];
  char *v112;
  _QWORD **v113;
  _QWORD *v114[2];
  void *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  unint64_t v120;

  v1 = (char **)*((_QWORD *)this + 2);
  if (*((_BYTE *)v1 + 504))
    return;
  v2 = (char ***)this;
  v3 = *((unsigned int *)v1[6] + 12);
  v118 = 0;
  v119 = 0;
  v120 = 0;
  if ((int)v3 < 1)
  {
    v49 = 0;
    v48 = 0;
  }
  else
  {
    v4 = 0;
    v104 = v3;
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)v2[2][6] + 7) + 8 * v4 + 8);
      v6 = *(_DWORD *)(v5 + 60);
      if (v6 == 4)
      {
        if (*(_DWORD *)(v5 + 16) == 1)
        {
          v31 = *(operations_research::sat::ConstraintProto **)(*((_QWORD *)v2[2][6] + 7) + 8 * v4 + 8);
          v32 = *(_QWORD *)(v5 + 48);
          v33 = *(int *)(v32 + 16);
          if ((_DWORD)v33)
          {
            v34 = *(int **)(v32 + 24);
            v35 = **((_DWORD **)v31 + 3);
            if (v35 >= 0)
              v36 = (2 * v35);
            else
              v36 = (2 * ~v35) | 1u;
            v37 = 4 * v33;
            do
            {
              v38 = *v34;
              v39 = operator new(8uLL);
              v40 = (2 * ~v38) | 1;
              if (v38 >= 0)
                v40 = 2 * v38;
              __p[0] = v39;
              *v39 = v36 | ((unint64_t)(v40 ^ 1u) << 32);
              __p[1] = v39 + 1;
              v112 = (char *)(v39 + 1);
              v41 = v119;
              if ((unint64_t)v119 < v120)
              {
                *v119 = 0;
                v41[1] = 0;
                v41[2] = 0;
                *(_OWORD *)v41 = *(_OWORD *)__p;
                v41[2] = (uint64_t)v112;
                v119 = v41 + 3;
              }
              else
              {
                v119 = (uint64_t *)std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)&v118, (uint64_t)__p);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              ++v34;
              v37 -= 4;
            }
            while (v37);
          }
          operations_research::sat::ConstraintProto::Clear(v31);
          operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v2[2], v4);
        }
      }
      else if (v6 == 26)
      {
        __p[1] = 0;
        v112 = 0;
        __p[0] = 0;
        v107 = (operations_research::sat::ConstraintProto *)v5;
        v7 = *(_QWORD *)(v5 + 48);
        v8 = *(int *)(v7 + 16);
        if ((_DWORD)v8)
        {
          v9 = 0;
          v10 = *(int **)(v7 + 24);
          v11 = &v10[v8];
          do
          {
            if (*v10 >= 0)
              v13 = 2 * *v10;
            else
              v13 = (2 * ~*v10) | 1;
            if (v9 < v112)
            {
              *(_DWORD *)v9 = v13;
              v12 = v9 + 4;
            }
            else
            {
              v14 = (char *)__p[0];
              v15 = v9 - (char *)__p[0];
              v16 = (v9 - (char *)__p[0]) >> 2;
              v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v18 = v112 - (char *)__p[0];
              if ((v112 - (char *)__p[0]) >> 1 > v17)
                v17 = v18 >> 1;
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
                v19 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v19 = v17;
              if (v19)
              {
                if (v19 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v20 = operator new(4 * v19);
                v21 = (int *)&v20[4 * v16];
                *v21 = v13;
                v12 = v21 + 1;
                if (v9 != v14)
                {
LABEL_24:
                  v22 = v9 - 4 - v14;
                  if (v22 < 0xBC
                    || &v20[v15 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[v15 - 4]
                    || &v9[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4
                    || (unint64_t)(v9 - v20 - v15) < 0x20)
                  {
                    v23 = v9;
                  }
                  else
                  {
                    v25 = (v22 >> 2) + 1;
                    v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
                    v23 = &v9[-v26];
                    v21 = (int *)((char *)v21 - v26);
                    v27 = &v20[4 * v16 - 16];
                    v28 = v9 - 16;
                    v29 = v25 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v30 = *(_OWORD *)v28;
                      *(v27 - 1) = *((_OWORD *)v28 - 1);
                      *v27 = v30;
                      v27 -= 2;
                      v28 -= 32;
                      v29 -= 8;
                    }
                    while (v29);
                    if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_27:
                      __p[0] = v21;
                      __p[1] = v12;
                      v112 = &v20[4 * v19];
                      if (!v14)
                        goto LABEL_10;
LABEL_31:
                      operator delete(v14);
                      goto LABEL_10;
                    }
                  }
                  do
                  {
                    v24 = *((_DWORD *)v23 - 1);
                    v23 -= 4;
                    *--v21 = v24;
                  }
                  while (v23 != v14);
                  goto LABEL_27;
                }
              }
              else
              {
                v20 = 0;
                v21 = (int *)(4 * v16);
                *(_DWORD *)(4 * v16) = v13;
                v12 = (void *)(4 * v16 + 4);
                if (v9 != v14)
                  goto LABEL_24;
              }
              __p[0] = v21;
              __p[1] = v12;
              v112 = &v20[4 * v19];
              if (v14)
                goto LABEL_31;
            }
LABEL_10:
            __p[1] = v12;
            ++v10;
            v9 = (char *)v12;
          }
          while (v10 != v11);
        }
        v42 = v119;
        if ((unint64_t)v119 >= v120)
        {
          v47 = std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>((char **)&v118, (uint64_t)__p);
          v3 = v104;
          v2 = (char ***)this;
        }
        else
        {
          *v119 = 0;
          v42[1] = 0;
          v42[2] = 0;
          v43 = __p[0];
          v44 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] != __p[0])
          {
            if (v44 < 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v45 = (char *)operator new((char *)__p[1] - (char *)__p[0]);
            *v42 = (uint64_t)v45;
            v42[1] = (uint64_t)v45;
            v46 = &v45[4 * (v44 >> 2)];
            v42[2] = (uint64_t)v46;
            memcpy(v45, v43, v44);
            v42[1] = (uint64_t)v46;
          }
          v47 = (char *)(v42 + 3);
          v3 = v104;
          v2 = (char ***)this;
        }
        v119 = (uint64_t *)v47;
        operations_research::sat::ConstraintProto::Clear(v107);
        operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v2[2], v4);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v4;
    }
    while (v4 != v3);
    v49 = v118;
    v48 = v119;
    v1 = v2[2];
  }
  __p[0] = 0;
  __p[1] = 0;
  v114[0] = 0;
  v114[1] = 0;
  v112 = 0;
  v113 = v114;
  v116 = 0;
  v117 = 0;
  v115 = 0;
  v50 = *((unsigned int *)v1[6] + 6);
  v51 = (operations_research::sat::Trail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)__p);
  operations_research::sat::Trail::Resize(v51, v50);
  v52 = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)__p);
  operations_research::sat::BinaryImplicationGraph::Resize(v52, v50);
  v53 = v118;
  v54 = v119;
  if (v118 != v119)
  {
    while (operations_research::sat::BinaryImplicationGraph::AddAtMostOne((uint64_t)v52, (char *)*v53, (v53[1] - *v53) >> 2))
    {
      v53 += 3;
      if (v53 == v54)
        goto LABEL_66;
    }
    goto LABEL_111;
  }
LABEL_66:
  if ((operations_research::sat::BinaryImplicationGraph::DetectEquivalences(v52, 0) & 1) != 0)
  {
    operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(v52, &v118, (uint64_t)*((double *)*v2 + 67));
    if ((int)v50 >= 1)
    {
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 2 * v50;
      do
      {
        v59 = *((_QWORD *)v52 + 71);
        if ((int)v55 < (int)((unint64_t)(*((_QWORD *)v52 + 72) - v59) >> 2))
        {
          v60 = *(unsigned int *)(v59 + (v57 >> 30));
          if ((_DWORD)v60 != -1 && v55 != v60)
            operations_research::sat::PresolveContext::StoreBooleanEqualityRelation((uint64_t)v2[2], v56, (const char *)(-(v60 & 1) ^ ((int)v60 >> 1)));
        }
        v57 += 0x200000000;
        v56 = (const char *)((_DWORD)v56 + 1);
        v55 += 2;
      }
      while (v58 != v55);
    }
    v102 = v49;
    v103 = v48;
    v62 = v118;
    v105 = v119;
    if (v118 == v119)
    {
      v63 = 0;
LABEL_114:
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
      if (v63 != -1431655765 * ((unint64_t)((char *)v103 - (char *)v102) >> 3))
      {
        v87 = *((_QWORD *)this + 2);
        v109 = operator new(0x30uLL);
        v110 = xmmword_22DCE6560;
        strcpy((char *)v109, "at_most_one: transformed into max clique.");
        operations_research::sat::PresolveContext::UpdateRuleStats(v87, (uint64_t)&v109);
        if (SHIBYTE(v110) < 0)
          operator delete(v109);
      }
      if (**(_BYTE **)this)
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v109, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 3914);
        v88 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Merged ", 7);
        v89 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)" into ", 6);
        v90 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)" cliques.", 9);
        google::LogMessage::~LogMessage((google::LogMessage *)&v109);
      }
      goto LABEL_119;
    }
    v63 = 0;
    while (1)
    {
      v65 = (int *)*v62;
      v64 = (int *)v62[1];
      if ((int *)*v62 != v64)
        break;
LABEL_80:
      v62 += 3;
      if (v62 == v105)
        goto LABEL_114;
    }
    v66 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
    v67 = *(int **)(v66 + 56);
    if (v67)
    {
      v68 = *(int *)(v66 + 48);
      v69 = *v67;
      if ((int)v68 < *v67)
      {
        *(_DWORD *)(v66 + 48) = v68 + 1;
        v70 = *(_QWORD *)&v67[2 * v68 + 2];
LABEL_89:
        v108 = v63 + 1;
        while (1)
        {
          if (v65 == v64)
          {
            v63 = v108;
            goto LABEL_80;
          }
          v75 = *v65;
          v76 = *(_DWORD *)(v70 + 60);
          if ((*v65 & 1) == 0)
          {
            if (v76 == 26)
            {
              v77 = *(_QWORD *)(v70 + 48);
              v79 = *(unsigned int *)(v77 + 16);
              v78 = (unsigned int *)(v77 + 16);
              v80 = v79 + 1;
              if ((_DWORD)v79 == *(_DWORD *)(v77 + 20))
                goto LABEL_105;
            }
            else
            {
              operations_research::sat::ConstraintProto::clear_constraint(v70);
              *(_DWORD *)(v70 + 60) = 26;
              v82 = *(_QWORD *)(v70 + 8);
              v83 = (google::protobuf::Arena *)(v82 & 0xFFFFFFFFFFFFFFFELL);
              if ((v82 & 1) != 0)
                v83 = *(google::protobuf::Arena **)v83;
              v77 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v83);
              *(_QWORD *)(v70 + 48) = v77;
              v79 = *(unsigned int *)(v77 + 16);
              v78 = (unsigned int *)(v77 + 16);
              v80 = v79 + 1;
              if ((_DWORD)v79 == *(_DWORD *)(v77 + 20))
LABEL_105:
                google::protobuf::RepeatedField<int>::Reserve(v78, v80);
            }
            v73 = *(_QWORD *)(v77 + 24);
            v74 = v75 >> 1;
            goto LABEL_91;
          }
          if (v76 == 26)
          {
            v77 = *(_QWORD *)(v70 + 48);
            v79 = *(unsigned int *)(v77 + 16);
            v81 = (unsigned int *)(v77 + 16);
            v80 = v79 + 1;
            if ((_DWORD)v79 != *(_DWORD *)(v77 + 20))
              goto LABEL_110;
          }
          else
          {
            operations_research::sat::ConstraintProto::clear_constraint(v70);
            *(_DWORD *)(v70 + 60) = 26;
            v84 = *(_QWORD *)(v70 + 8);
            v85 = (google::protobuf::Arena *)(v84 & 0xFFFFFFFFFFFFFFFELL);
            if ((v84 & 1) != 0)
              v85 = *(google::protobuf::Arena **)v85;
            v77 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v85);
            *(_QWORD *)(v70 + 48) = v77;
            v79 = *(unsigned int *)(v77 + 16);
            v81 = (unsigned int *)(v77 + 16);
            v80 = v79 + 1;
            if ((_DWORD)v79 != *(_DWORD *)(v77 + 20))
              goto LABEL_110;
          }
          google::protobuf::RepeatedField<int>::Reserve(v81, v80);
LABEL_110:
          v73 = *(_QWORD *)(v77 + 24);
          v74 = ~(v75 >> 1);
LABEL_91:
          *(_DWORD *)(v73 + 4 * v79) = v74;
          *(_DWORD *)(v77 + 16) = v80;
          ++v65;
        }
      }
      if (v69 != *(_DWORD *)(v66 + 52))
      {
LABEL_88:
        *v67 = v69 + 1;
        v70 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v66 + 40));
        v71 = *(_QWORD *)(v66 + 56);
        v72 = *(int *)(v66 + 48);
        *(_DWORD *)(v66 + 48) = v72 + 1;
        *(_QWORD *)(v71 + 8 * v72 + 8) = v70;
        v65 = (int *)*v62;
        v64 = (int *)v62[1];
        goto LABEL_89;
      }
    }
    else
    {
      v69 = *(_DWORD *)(v66 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v66 + 40), v69 + 1);
    v67 = *(int **)(v66 + 56);
    v69 = *v67;
    goto LABEL_88;
  }
LABEL_111:
  v86 = (uint64_t)v2[2];
  HIBYTE(v110) = 0;
  LOBYTE(v109) = 0;
  operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v86, (uint64_t)&v109);
  if (SHIBYTE(v110) < 0)
    operator delete(v109);
LABEL_119:
  v91 = v115;
  if (v115)
  {
    v92 = v116;
    v93 = v115;
    if (v116 != v115)
    {
      do
      {
        v95 = *--v92;
        v94 = v95;
        *v92 = 0;
        if (v95)
          (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
      }
      while (v92 != v91);
      v93 = v115;
    }
    v116 = v91;
    operator delete(v93);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v113, v114[0]);
  if (SHIBYTE(v112) < 0)
    operator delete(__p[0]);
  v96 = v118;
  if (v118)
  {
    v97 = v119;
    v98 = v118;
    if (v119 != v118)
    {
      v99 = v119;
      do
      {
        v101 = (void *)*(v99 - 3);
        v99 -= 3;
        v100 = v101;
        if (v101)
        {
          *(v97 - 2) = (uint64_t)v100;
          operator delete(v100);
        }
        v97 = v99;
      }
      while (v99 != v96);
      v98 = v118;
    }
    v119 = v96;
    operator delete(v98);
  }
}

void sub_22DADE68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21)
{
  uint64_t v21;

  if (a19 < 0)
    operator delete(__p);
  operations_research::sat::Model::~Model((operations_research::sat::Model *)&a20);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v21 - 112));
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::ProcessSetPPCSubset(uint64_t a1, int a2, int a3, unsigned int **a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  int v26;
  uint64_t *v27;
  void *__p;
  __int128 v29;

  v6 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v6 + 504))
    return 0;
  v8 = *a6;
  v9 = (unint64_t)a2 >> 6;
  v10 = 1 << a2;
  v11 = *(_QWORD *)(*a6 + 8 * v9);
  if ((v11 & (1 << a2)) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4029);
    v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: !(*marked_for_removal)[c1] ", 41);
    goto LABEL_24;
  }
  v12 = (unint64_t)a3 >> 6;
  v13 = *(_QWORD *)(v8 + 8 * v12);
  if ((v13 & (1 << a3)) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4030);
    v22 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: !(*marked_for_removal)[c2] ", 41);
    goto LABEL_24;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 56) + 8;
  v16 = *(_DWORD *)(*(_QWORD *)(v15 + 8 * *(int *)(*a5 + 4 * a2)) + 60);
  v17 = *(_DWORD *)(*(_QWORD *)(v15 + 8 * *(int *)(*a5 + 4 * a3)) + 60);
  if (v16 != 3)
  {
    if (v16 != v17)
      return 0;
    LODWORD(__p) = *(_DWORD *)(*(_QWORD *)(v15 + 8 * *(int *)(*a5 + 4 * a2)) + 60);
    v26 = 26;
    if (v16 == 26)
      goto LABEL_17;
    v23 = 1 << a2;
    v24 = (unint64_t)a2 >> 6;
    v27 = (uint64_t *)google::MakeCheckOpString<operations_research::sat::ConstraintProto::ConstraintCase,operations_research::sat::ConstraintProto::ConstraintCase>((int)&__p, (int)&v26, "ct1->constraint_case() == ConstraintProto::ConstraintCase::kAtMostOne");
    if (!v27)
    {
      v8 = *a6;
      v9 = v24;
      v11 = *(_QWORD *)(*a6 + 8 * v24);
      v6 = *(_QWORD *)(a1 + 16);
      v10 = v23;
LABEL_17:
      *(_QWORD *)(v8 + 8 * v9) = v11 | v10;
      __p = operator new(0x28uLL);
      v29 = xmmword_22DCE6530;
      strcpy((char *)__p, "setppc: removed dominated constraints");
      operations_research::sat::PresolveContext::UpdateRuleStats(v6, (uint64_t)&__p);
      goto LABEL_19;
    }
    google::LogMessageFatal::LogMessageFatal((unint64_t *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4051, &v27);
    google::LogMessage::stream((google::LogMessage *)&__p);
LABEL_24:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
  }
  if (v17 == 3)
  {
    *(_QWORD *)(v8 + 8 * v12) = v13 | (1 << a3);
    __p = operator new(0x28uLL);
    v29 = xmmword_22DCE6530;
    strcpy((char *)__p, "setppc: removed dominated constraints");
    operations_research::sat::PresolveContext::UpdateRuleStats(v6, (uint64_t)&__p);
LABEL_19:
    if (SHIBYTE(v29) < 0)
      operator delete(__p);
    return 0;
  }
  if (v17 != 26)
    return 0;
  v18 = *a4;
  v19 = a4[1];
  if (*a4 != v19)
  {
    while (operations_research::sat::PresolveContext::SetLiteralToFalse(*(operations_research::sat::PresolveContext **)(a1 + 16), *v18))
    {
      v20 = *(_QWORD *)(a1 + 16);
      __p = operator new(0x19uLL);
      v29 = xmmword_22DCE63A0;
      strcpy((char *)__p, "setppc: fixed variables");
      operations_research::sat::PresolveContext::UpdateRuleStats(v20, (uint64_t)&__p);
      if (SHIBYTE(v29) < 0)
        operator delete(__p);
      ++v18;
      result = 1;
      if (v18 == v19)
        return result;
    }
  }
  return 1;
}

void sub_22DADEA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DADEA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DADEA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DADEAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::CpModelPresolver::ProcessSetPPC(int64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _DWORD *v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  void *v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  _DWORD *v35;
  int *v36;
  int *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _DWORD *v43;
  void *v44;
  unint64_t v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  char *v54;
  char *v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  int v60;
  int v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  int *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  size_t v87;
  char *v88;
  char *v89;
  __int128 v90;
  char *v91;
  char *v92;
  void *v93;
  void *v94;
  char *v95;
  char *v96;
  void *v97;
  void *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _OWORD *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  int v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _OWORD *v121;
  __int128 *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  int v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _BYTE *v137;
  int *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _OWORD *v143;
  __int128 *v144;
  uint64_t v145;
  __int128 v146;
  int v147;
  _QWORD *v148;
  char *v149;
  unint64_t v150;
  unint64_t v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  unsigned __int8 *v157;
  unsigned __int8 v158;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v160;
  double v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t i;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  int *v173;
  int v174;
  uint64_t j;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  int *v180;
  int v181;
  int v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  BOOL v188;
  char *v189;
  const std::vector<int>::value_type *begin;
  const std::vector<int>::value_type *v191;
  void *v192;
  void **v193;
  void *v194;
  void *v195;
  std::vector<int>::const_iterator v196;
  std::vector<int>::iterator v197;
  std::vector<int> *v198;
  std::vector<int> *v199;
  char *v200;
  std::vector<int>::const_iterator v201;
  const std::vector<int>::value_type *v202;
  void *v203;
  std::vector<int>::pointer v204;
  const std::vector<int>::value_type *v205;
  const std::vector<int>::value_type *v206;
  std::vector<int>::const_iterator v207;
  std::vector<int>::iterator v208;
  void **v209;
  void **v210;
  std::vector<int>::const_iterator v211;
  int *v212;
  int *v213;
  uint64_t v214;
  unint64_t v215;
  char v216;
  int *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  void *v222;
  void *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  void *v228;
  void *v229;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  void **v237;
  uint64_t v238;
  const std::vector<int>::value_type **v239;
  uint64_t v240;
  std::vector<int>::pointer *v241;
  uint64_t v242;
  uint64_t v243;
  char ***v244;
  int *v245;
  uint64_t v246;
  int v247;
  int v248;
  char v249;
  unint64_t v250;
  void *v251;
  __int128 v252;
  std::vector<int> v253;
  std::vector<int> v254;
  void *__p[3];
  __int128 v256;
  uint64_t v257;
  int *v258;
  char *v259;
  char *v260;
  _QWORD *v261;
  unint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  unint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  const int *v273;
  _QWORD v274[2];

  v244 = (char ***)this;
  v1 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 48) + 48);
  v270 = 0;
  v271 = 0;
  v272 = 0;
  v267 = 0;
  v268 = 0;
  v269 = 0;
  v264 = 0;
  v265 = 0;
  v266 = 0;
  v261 = 0;
  v262 = 0;
  v263 = 0;
  v258 = 0;
  v259 = 0;
  v260 = 0;
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = 0;
    v240 = v1;
    while (1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 48) + 56) + 8 * v2 + 8);
      v5 = *(_DWORD *)(v4 + 60);
      if (v5 != 26 && v5 != 3)
        goto LABEL_4;
      v242 = v2;
      if (operations_research::sat::CpModelPresolver::PresolveOneConstraint((operations_research::sat::CpModelPresolver *)this, v2))operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v244[2], v242);
      if (*((_BYTE *)v244[2] + 504))
      {
        v216 = 0;
        goto LABEL_313;
      }
      v7 = *(_DWORD *)(v4 + 60);
      if (v7 == 3)
        break;
      if (v7 == 26)
      {
        v247 = v3;
        memset(__p, 0, sizeof(__p));
        v8 = *(_QWORD *)(v4 + 48);
        v9 = *(int *)(v8 + 16);
        if ((_DWORD)v9)
        {
          v10 = 0;
          v11 = 0;
          v12 = 0;
          v13 = *(int **)(v8 + 24);
          v14 = &v13[v9];
          do
          {
            while (1)
            {
              v15 = *v13;
              if (v12 >= (_DWORD *)v11)
                break;
              *v12++ = v15;
              __p[1] = v12;
              if (++v13 == v14)
                goto LABEL_79;
            }
            v16 = ((char *)v12 - v10) >> 2;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            if ((v11 - v10) >> 1 > v17)
              v17 = (v11 - v10) >> 1;
            if ((unint64_t)(v11 - v10) >= 0x7FFFFFFFFFFFFFFCLL)
              v18 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
            {
              if (v18 >> 62)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v19 = operator new(4 * v18);
              v20 = &v19[4 * v16];
              *v20 = v15;
              v21 = v20 + 1;
              if (v12 == (_DWORD *)v10)
                goto LABEL_33;
            }
            else
            {
              v19 = 0;
              v20 = (_DWORD *)(4 * v16);
              *(_DWORD *)(4 * v16) = v15;
              v21 = (void *)(4 * v16 + 4);
              if (v12 == (_DWORD *)v10)
                goto LABEL_33;
            }
            v22 = (char *)(v12 - 1) - v10;
            if (v22 >= 0xBC)
            {
              if (&v19[(char *)v12 - v10 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[(char *)v12 - v10 - 4])
              {
                v23 = v12;
              }
              else if ((_DWORD *)((char *)v12 - (v22 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v12 - 1)
              {
                v23 = v12;
              }
              else if ((unint64_t)(v10 - v19) >= 0x20)
              {
                v25 = (v22 >> 2) + 1;
                v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
                v23 = &v12[v26 / 0xFFFFFFFFFFFFFFFCLL];
                v20 = (_DWORD *)((char *)v20 - v26);
                v27 = &v19[4 * v16 - 16];
                v28 = (__int128 *)(v12 - 4);
                v29 = v25 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v30 = *v28;
                  *(v27 - 1) = *(v28 - 1);
                  *v27 = v30;
                  v27 -= 2;
                  v28 -= 2;
                  v29 -= 8;
                }
                while (v29);
                if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_33;
              }
              else
              {
                v23 = v12;
              }
            }
            else
            {
              v23 = v12;
            }
            do
            {
              v24 = *--v23;
              *--v20 = v24;
            }
            while (v23 != (_DWORD *)v10);
LABEL_33:
            v11 = &v19[4 * v18];
            __p[0] = v20;
            __p[2] = v11;
            if (v10)
              operator delete(v10);
            v10 = v20;
            __p[1] = v21;
            ++v13;
            v12 = v21;
          }
          while (v13 != v14);
        }
LABEL_79:
        std::__sort<std::__less<int,int> &,int *>();
        v54 = v268;
        if ((unint64_t)v268 >= v269)
        {
          v55 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>(&v267, (uint64_t)__p);
          v268 = v55;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
            v55 = v268;
          }
        }
        else
        {
          *(_QWORD *)v268 = 0;
          *((_QWORD *)v54 + 1) = 0;
          *((_QWORD *)v54 + 2) = 0;
          *(_OWORD *)v54 = *(_OWORD *)__p;
          *((void **)v54 + 2) = __p[2];
          v55 = v54 + 24;
          v268 = v54 + 24;
        }
        v56 = (int *)*((_QWORD *)v55 - 3);
        v245 = (int *)*((_QWORD *)v55 - 2);
        if (v56 != v245)
        {
          v57 = 0;
          while (1)
          {
            v60 = *v56;
            if (~*v56 > *v56)
              v60 = ~v60;
            LOBYTE(v61) = v60 & 0x3F;
            if (v60 <= 0)
              v61 = -(-v60 & 0x3F);
            v249 = v61;
            v62 = v60;
            v63 = v264;
            v64 = v265;
            v65 = 0xAAAAAAAAAAAAAAABLL * ((v265 - v264) >> 3);
            if (v65 <= v60)
            {
              v81 = v60 + 1;
              v82 = v62 + 1 - v65;
              if (v62 + 1 <= v65)
              {
                if (v62 + 1 < v65)
                {
                  v95 = &v264[24 * v81];
                  if (v265 != v95)
                  {
                    v96 = v265;
                    do
                    {
                      v98 = (void *)*((_QWORD *)v96 - 3);
                      v96 -= 24;
                      v97 = v98;
                      if (v98)
                      {
                        *((_QWORD *)v64 - 2) = v97;
                        operator delete(v97);
                      }
                      v64 = v96;
                    }
                    while (v96 != v95);
                  }
                  v265 = v95;
                }
              }
              else
              {
                if (0xAAAAAAAAAAAAAAABLL * ((v266 - v265) >> 3) >= v82)
                {
                  bzero(v265, 24 * ((24 * v82 - 24) / 0x18) + 24);
                  v265 = &v64[24 * ((24 * v82 - 24) / 0x18) + 24];
                  goto LABEL_92;
                }
                if ((int)v62 <= -2)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((v266 - v264) >> 3) > v81)
                  v81 = 0x5555555555555556 * ((v266 - v264) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v266 - v264) >> 3) >= 0x555555555555555)
                  v83 = 0xAAAAAAAAAAAAAAALL;
                else
                  v83 = v81;
                if (v83 > 0xAAAAAAAAAAAAAAALL)
LABEL_337:
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v84 = (char *)operator new(24 * v83);
                v85 = &v84[24 * v65];
                v86 = &v84[24 * v83];
                v87 = 24 * ((24 * v82 - 24) / 0x18) + 24;
                bzero(v85, v87);
                v88 = &v85[v87];
                if (v64 == v63)
                {
                  v264 = v85;
                  v265 = &v85[v87];
                  v266 = v86;
                  goto LABEL_139;
                }
                do
                {
                  v89 = v85;
                  *((_QWORD *)v85 - 2) = 0;
                  *((_QWORD *)v85 - 1) = 0;
                  v90 = *(_OWORD *)(v64 - 24);
                  v64 -= 24;
                  *(_OWORD *)(v85 - 24) = v90;
                  v85 -= 24;
                  *((_QWORD *)v89 - 1) = *((_QWORD *)v64 + 2);
                  *(_QWORD *)v64 = 0;
                  *((_QWORD *)v64 + 1) = 0;
                  *((_QWORD *)v64 + 2) = 0;
                }
                while (v64 != v63);
                v64 = v264;
                v91 = v265;
                v264 = v85;
                v265 = v88;
                v266 = v86;
                if (v91 != v64)
                {
                  v92 = v91;
                  do
                  {
                    v94 = (void *)*((_QWORD *)v92 - 3);
                    v92 -= 24;
                    v93 = v94;
                    if (v94)
                    {
                      *((_QWORD *)v91 - 2) = v93;
                      operator delete(v93);
                    }
                    v91 = v92;
                  }
                  while (v92 != v64);
LABEL_139:
                  if (!v64)
                    goto LABEL_92;
LABEL_140:
                  operator delete(v64);
                  goto LABEL_92;
                }
                if (v64)
                  goto LABEL_140;
              }
            }
LABEL_92:
            v66 = &v264[24 * (int)v62];
            v68 = (uint64_t *)(v66 + 8);
            v67 = (char *)*((_QWORD *)v66 + 1);
            v69 = *((_QWORD *)v66 + 2);
            if ((unint64_t)v67 >= v69)
            {
              v70 = v57;
              v71 = *(char **)v66;
              v72 = (uint64_t)&v67[-*(_QWORD *)v66];
              v73 = v72 >> 2;
              v74 = (v72 >> 2) + 1;
              if (v74 >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v75 = v69 - (_QWORD)v71;
              if (v75 >> 1 > v74)
                v74 = v75 >> 1;
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                v76 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v76 = v74;
              if (v76)
              {
                if (v76 >> 62)
                  goto LABEL_337;
                v77 = v76;
                v78 = operator new(4 * v76);
                v76 = v77;
                v79 = (int *)&v78[4 * v73];
                *v79 = v247;
                v58 = (uint64_t)(v79 + 1);
                if (v67 != v71)
                {
LABEL_102:
                  v80 = v67 - 4 - v71;
                  if (v80 < 0x2C)
                  {
                    v57 = v70;
                    v59 = v249;
                    goto LABEL_132;
                  }
                  v99 = v67 - &v78[v72];
                  v57 = v70;
                  v59 = v249;
                  if (v99 < 0x20)
                    goto LABEL_349;
                  v100 = (v80 >> 2) + 1;
                  v101 = 4 * (v100 & 0x7FFFFFFFFFFFFFF8);
                  v102 = &v67[-v101];
                  v79 = (int *)((char *)v79 - v101);
                  v103 = &v78[4 * v73 - 16];
                  v104 = v67 - 16;
                  v105 = v100 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v106 = *(_OWORD *)v104;
                    *(v103 - 1) = *((_OWORD *)v104 - 1);
                    *v103 = v106;
                    v103 -= 2;
                    v104 -= 32;
                    v105 -= 8;
                  }
                  while (v105);
                  v67 = v102;
                  if (v100 != (v100 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_349:
                    do
                    {
LABEL_132:
                      v107 = *((_DWORD *)v67 - 1);
                      v67 -= 4;
                      *--v79 = v107;
                    }
                    while (v67 != v71);
                  }
LABEL_133:
                  *(_QWORD *)v66 = v79;
                  *v68 = v58;
                  *((_QWORD *)v66 + 2) = &v78[4 * v76];
                  if (v71)
                    operator delete(v71);
                  goto LABEL_86;
                }
              }
              else
              {
                v78 = 0;
                v79 = (int *)(4 * v73);
                *(_DWORD *)(4 * v73) = v247;
                v58 = 4 * v73 + 4;
                if (v67 != v71)
                  goto LABEL_102;
              }
              v57 = v70;
              v59 = v249;
              goto LABEL_133;
            }
            *(_DWORD *)v67 = v247;
            v58 = (uint64_t)(v67 + 4);
            v59 = v249;
LABEL_86:
            v57 |= 1 << v59;
            *v68 = v58;
            if (++v56 == v245)
              goto LABEL_144;
          }
        }
        v57 = 0;
LABEL_144:
        v108 = v271;
        if (v271 < v272)
        {
          *(_QWORD *)v271 = v57;
          v109 = (uint64_t)(v108 + 8);
          goto LABEL_165;
        }
        v110 = v270;
        v111 = (v271 - v270) >> 3;
        v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v113 = v272 - v270;
        if ((v272 - v270) >> 2 > v112)
          v112 = v113 >> 2;
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
          v114 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v114 = v112;
        if (v114)
        {
          if (v114 >> 61)
            goto LABEL_343;
          v115 = operator new(8 * v114);
          v116 = &v115[8 * v111];
          *(_QWORD *)v116 = v57;
          v109 = (uint64_t)(v116 + 8);
          if (v108 == v110)
            goto LABEL_163;
LABEL_157:
          v117 = v108 - 8 - v110;
          if (v117 < 0x58)
            goto LABEL_350;
          if ((unint64_t)(v110 - v115) < 0x20)
            goto LABEL_350;
          v118 = (v117 >> 3) + 1;
          v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
          v120 = &v108[-v119];
          v116 -= v119;
          v121 = &v115[8 * v111 - 16];
          v122 = (__int128 *)(v108 - 16);
          v123 = v118 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v124 = *v122;
            *(v121 - 1) = *(v122 - 1);
            *v121 = v124;
            v121 -= 2;
            v122 -= 2;
            v123 -= 4;
          }
          while (v123);
          v108 = v120;
          if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_350:
            do
            {
              v125 = *((_QWORD *)v108 - 1);
              v108 -= 8;
              *((_QWORD *)v116 - 1) = v125;
              v116 -= 8;
            }
            while (v108 != v110);
          }
        }
        else
        {
          v115 = 0;
          v116 = (char *)(8 * v111);
          *(_QWORD *)(8 * v111) = v57;
          v109 = 8 * v111 + 8;
          if (v108 != v110)
            goto LABEL_157;
        }
LABEL_163:
        v270 = v116;
        v272 = &v115[8 * v114];
        if (v110)
          operator delete(v110);
LABEL_165:
        v271 = (char *)v109;
        v126 = v262;
        if (v262 == v263 << 6)
        {
          if ((uint64_t)(v262 + 1) < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v127 = v263 << 7;
          if (v263 << 7 <= (v262 & 0xFFFFFFFFFFFFFFC0) + 64)
            v127 = (v262 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v262 <= 0x3FFFFFFFFFFFFFFELL)
            v128 = v127;
          else
            v128 = 0x7FFFFFFFFFFFFFFFLL;
          std::vector<BOOL>::reserve((uint64_t)&v261, v128);
          v126 = v262;
        }
        v262 = v126 + 1;
        *(_QWORD *)((char *)v261 + ((v126 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v126);
        v129 = v259;
        if (v259 < v260)
        {
          v1 = v240;
          v2 = v242;
          *(_DWORD *)v259 = v242;
          v130 = (uint64_t)(v129 + 4);
          v131 = v247;
LABEL_195:
          v259 = (char *)v130;
          v3 = v131 + 1;
          this = (int64_t)v244;
          goto LABEL_4;
        }
        v132 = (char *)v258;
        v133 = (v259 - (char *)v258) >> 2;
        v134 = v133 + 1;
        if ((unint64_t)(v133 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v135 = v260 - (char *)v258;
        if ((v260 - (char *)v258) >> 1 > v134)
          v134 = v135 >> 1;
        if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
          v136 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v136 = v134;
        if (v136)
        {
          if (v136 >> 62)
LABEL_343:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v137 = operator new(4 * v136);
          v138 = (int *)&v137[4 * v133];
          *v138 = v242;
          v130 = (uint64_t)(v138 + 1);
          if (v129 == v132)
            goto LABEL_192;
LABEL_186:
          v139 = v129 - 4 - v132;
          if (v139 < 0x2C)
            goto LABEL_351;
          if ((unint64_t)(v132 - v137) < 0x20)
            goto LABEL_351;
          v140 = (v139 >> 2) + 1;
          v141 = 4 * (v140 & 0x7FFFFFFFFFFFFFF8);
          v142 = &v129[-v141];
          v138 = (int *)((char *)v138 - v141);
          v143 = &v137[4 * v133 - 16];
          v144 = (__int128 *)(v129 - 16);
          v145 = v140 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v146 = *v144;
            *(v143 - 1) = *(v144 - 1);
            *v143 = v146;
            v143 -= 2;
            v144 -= 2;
            v145 -= 8;
          }
          while (v145);
          v129 = v142;
          if (v140 != (v140 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_351:
            do
            {
              v147 = *((_DWORD *)v129 - 1);
              v129 -= 4;
              *--v138 = v147;
            }
            while (v129 != v132);
          }
        }
        else
        {
          v137 = 0;
          v138 = (int *)(4 * v133);
          *(_DWORD *)(4 * v133) = v242;
          v130 = 4 * v133 + 4;
          if (v129 != v132)
            goto LABEL_186;
        }
LABEL_192:
        v258 = v138;
        v260 = &v137[4 * v136];
        if (v132)
          operator delete(v132);
        v131 = v247;
        v1 = v240;
        v2 = v242;
        goto LABEL_195;
      }
      v2 = v242;
      this = (int64_t)v244;
LABEL_4:
      if (++v2 == v1)
        goto LABEL_197;
    }
    v247 = v3;
    memset(__p, 0, sizeof(__p));
    v31 = *(_QWORD *)(v4 + 48);
    v32 = *(int *)(v31 + 16);
    if (!(_DWORD)v32)
      goto LABEL_79;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = *(int **)(v31 + 24);
    v37 = &v36[v32];
    while (1)
    {
      while (1)
      {
        v38 = *v36;
        if (v35 >= (_DWORD *)v34)
          break;
        *v35++ = v38;
        __p[1] = v35;
        if (++v36 == v37)
          goto LABEL_79;
      }
      v39 = ((char *)v35 - v33) >> 2;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((v34 - v33) >> 1 > v40)
        v40 = (v34 - v33) >> 1;
      if ((unint64_t)(v34 - v33) >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
      {
        if (v41 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v42 = operator new(4 * v41);
        v43 = &v42[4 * v39];
        *v43 = v38;
        v44 = v43 + 1;
        if (v35 == (_DWORD *)v33)
          goto LABEL_65;
      }
      else
      {
        v42 = 0;
        v43 = (_DWORD *)(4 * v39);
        *(_DWORD *)(4 * v39) = v38;
        v44 = (void *)(4 * v39 + 4);
        if (v35 == (_DWORD *)v33)
          goto LABEL_65;
      }
      v45 = (char *)(v35 - 1) - v33;
      if (v45 >= 0xBC)
      {
        if (&v42[(char *)v35 - v33 - 4 - (v45 & 0xFFFFFFFFFFFFFFFCLL)] > &v42[(char *)v35 - v33 - 4])
        {
          v46 = v35;
        }
        else if ((_DWORD *)((char *)v35 - (v45 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v35 - 1)
        {
          v46 = v35;
        }
        else if ((unint64_t)(v33 - v42) >= 0x20)
        {
          v48 = (v45 >> 2) + 1;
          v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
          v46 = &v35[v49 / 0xFFFFFFFFFFFFFFFCLL];
          v43 = (_DWORD *)((char *)v43 - v49);
          v50 = &v42[4 * v39 - 16];
          v51 = (__int128 *)(v35 - 4);
          v52 = v48 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v53 = *v51;
            *(v50 - 1) = *(v51 - 1);
            *v50 = v53;
            v50 -= 2;
            v51 -= 2;
            v52 -= 8;
          }
          while (v52);
          if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_65;
        }
        else
        {
          v46 = v35;
        }
      }
      else
      {
        v46 = v35;
      }
      do
      {
        v47 = *--v46;
        *--v43 = v47;
      }
      while (v46 != (_DWORD *)v33);
LABEL_65:
      v34 = &v42[4 * v41];
      __p[0] = v43;
      __p[2] = v34;
      if (v33)
        operator delete(v33);
      v33 = v43;
      __p[1] = v44;
      ++v36;
      v35 = v44;
      if (v36 == v37)
        goto LABEL_79;
    }
  }
  v3 = 0;
LABEL_197:
  if (*operations_research::sat::CpModelPresolver::ProcessSetPPC(void)::vlocal__ >= 1)
  {
    if (operations_research::sat::CpModelPresolver::ProcessSetPPC(void)::vlocal__ != &google::kLogSiteUninitialized
      || (this = google::InitVLOG3__((google *)&operations_research::sat::CpModelPresolver::ProcessSetPPC(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_presolve.cc", (const char *)1), (_DWORD)this))
    {
      google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4123);
      v148 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"#setppc constraints: ", 21);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)__p);
    }
  }
  v248 = v3;
  __p[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)&__p[1] = 0u;
  v256 = 0u;
  v257 = 0;
  v149 = v264;
  v231 = v265;
  if (v264 == v265)
  {
LABEL_298:
    if (v248 < 1)
    {
LABEL_303:
      v216 = 0;
      if (!(_QWORD)v256)
        goto LABEL_311;
    }
    else
    {
      v215 = 0;
      v216 = 0;
      do
      {
        if (((*(_QWORD *)((char *)v261 + ((v215 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v215) & 1) != 0)
        {
          v217 = v258;
          operations_research::sat::ConstraintProto::Clear(*(operations_research::sat::ConstraintProto **)(*((_QWORD *)v244[2][6] + 7) + 8 * v258[v215] + 8));
          operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v244[2], v217[v215]);
          v216 = 1;
        }
        ++v215;
      }
      while (v248 != v215);
LABEL_309:
      if (!(_QWORD)v256)
        goto LABEL_311;
    }
LABEL_310:
    operator delete(__p[0]);
    __p[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v257 = 0;
    __p[2] = 0;
    *(_QWORD *)&v256 = 0;
    __p[1] = 0;
    goto LABEL_311;
  }
  while (*((_QWORD *)v149 + 1) == *(_QWORD *)v149)
  {
LABEL_203:
    v149 += 24;
    if (v149 == v231)
      goto LABEL_298;
  }
  v150 = 0;
  v151 = 1;
  while (1)
  {
    v156 = (*v244)[73];
    if (v156)
    {
      v157 = (unsigned __int8 *)*((_QWORD *)v156 + 15);
      if (v157)
      {
        v158 = atomic_load(v157);
        if ((v158 & 1) != 0)
          goto LABEL_303;
      }
      if (fmax(*((double *)v156 + 13) - *((double *)v156 + 14), 0.0) <= 0.0)
        goto LABEL_303;
      CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
      v160 = *((_QWORD *)v156 + 3) <= CurrentTimeNanos - *((_QWORD *)v156 + 1)
           ? CurrentTimeNanos - *((_QWORD *)v156 + 1)
           : *((_QWORD *)v156 + 3);
      operations_research::RunningMax<long long>::Add((int *)v156 + 8, v160);
      *((_QWORD *)v156 + 1) = CurrentTimeNanos;
      if (*(_QWORD *)(*((_QWORD *)v156 + 5) + 8 * *((int *)v156 + 17)) + CurrentTimeNanos >= *((_QWORD *)v156 + 2))
        break;
    }
LABEL_208:
    v153 = *(_QWORD *)v149;
    v154 = *((_QWORD *)v149 + 1);
    v155 = *(unsigned int *)(*(_QWORD *)v149 + 4 * v150++);
    if (((1 << v155) & v261[(unint64_t)(int)v155 >> 6]) == 0 && v150 < (v154 - v153) >> 2)
    {
      v246 = 1 << v155;
      v250 = (unint64_t)(int)v155 >> 6;
      v235 = v150;
      v241 = (std::vector<int>::pointer *)&v267[24 * (int)v155];
      v232 = *(_QWORD *)(*((_QWORD *)v244[2][6] + 7) + 8 * v258[(int)v155] + 8);
      v243 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v155)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v155));
      v238 = (int)v155;
      v239 = (const std::vector<int>::value_type **)(v241 + 1);
      v234 = v151;
      v236 = v155;
      while (1)
      {
        v162 = *(unsigned int *)(v153 + 4 * v151);
        v163 = (unint64_t)(int)v162 >> 6;
        if (((1 << v162) & v261[v163]) != 0)
          goto LABEL_224;
        if ((v261[v250] & v246) != 0)
        {
LABEL_297:
          v151 = v234;
          v150 = v235;
          break;
        }
        if ((_DWORD)v155 == (_DWORD)v162)
          goto LABEL_224;
        LODWORD(v254.__begin_) = v155;
        LODWORD(v251) = v162;
        if ((int)v155 >= (int)v162)
        {
          this = google::MakeCheckOpString<int,int>((int)&v254, (int)&v251, "c1 < c2");
          v253.__begin_ = (std::vector<int>::pointer)this;
          if (this)
          {
            google::LogMessageFatal::LogMessageFatal((unint64_t *)&v254, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4147, (uint64_t **)&v253);
            google::LogMessage::stream((google::LogMessage *)&v254);
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v254);
          }
        }
        v164 = 0;
        v165 = (((unint64_t)(v243 + v162) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v243 + v162));
        v166 = (v165 >> 7) ^ ((unint64_t)__p[0] >> 12);
        v167 = 0x101010101010101 * (v165 & 0x7F);
        for (i = v166; ; i = v164 + v169)
        {
          v169 = i & v256;
          v170 = *(_QWORD *)((char *)__p[0] + v169);
          v171 = ((v170 ^ v167) - 0x101010101010101) & ~(v170 ^ v167) & 0x8080808080808080;
          if (v171)
            break;
LABEL_237:
          if ((v170 & (~v170 << 6) & 0x8080808080808080) != 0)
            goto LABEL_240;
          v164 += 8;
        }
        while (1)
        {
          v172 = (v169 + (__clz(__rbit64(v171)) >> 3)) & v256;
          v173 = (int *)((char *)__p[1] + 8 * v172);
          v174 = *v173;
          this = v173[1];
          if (v174 == (_DWORD)v155 && (_DWORD)this == (_DWORD)v162)
            break;
          v171 &= v171 - 1;
          if (!v171)
            goto LABEL_237;
        }
        if (v172 != (_QWORD)v256)
          goto LABEL_224;
LABEL_240:
        for (j = 0; ; v166 = j + v177)
        {
          v177 = v166 & v256;
          v178 = *(_QWORD *)((char *)__p[0] + v177);
          v179 = ((v178 ^ v167) - 0x101010101010101) & ~(v178 ^ v167) & 0x8080808080808080;
          if (v179)
            break;
LABEL_247:
          if ((v178 & (~v178 << 6) & 0x8080808080808080) != 0)
          {
            this = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::prepare_insert((uint64_t *)__p, v165);
            *((_QWORD *)__p[1] + this) = v155 | (v162 << 32);
            goto LABEL_250;
          }
          j += 8;
        }
        while (1)
        {
          v180 = (int *)((char *)__p[1] + 8 * ((v177 + (__clz(__rbit64(v179)) >> 3)) & v256));
          v182 = *v180;
          v181 = v180[1];
          if (v182 == (_DWORD)v155 && v181 == (_DWORD)v162)
            break;
          v179 &= v179 - 1;
          if (!v179)
            goto LABEL_247;
        }
LABEL_250:
        if ((unint64_t)__p[2] >> 4 > 0xC34)
        {
          v216 = 0;
          goto LABEL_309;
        }
        v184 = *(_QWORD *)&v270[8 * v238];
        v185 = *(_QWORD *)&v270[8 * (int)v162];
        v186 = v184 & ~v185;
        v187 = v185 & ~v184;
        if (v186)
          v188 = v187 == 0;
        else
          v188 = 1;
        if (!v188)
          goto LABEL_224;
        v189 = &v267[24 * (int)v162];
        v233 = *(_QWORD *)(*((_QWORD *)v244[2][6] + 7) + 8 * v258[(int)v162] + 8);
        memset(&v254, 0, sizeof(v254));
        begin = *v241;
        v191 = *v239;
        v192 = *(void **)v189;
        v237 = (void **)v189;
        v195 = (void *)*((_QWORD *)v189 + 1);
        v193 = (void **)(v189 + 8);
        v194 = v195;
        v253.__begin_ = *v241;
        v251 = v192;
        v274[0] = 0;
        while (begin != v191)
        {
          v200 = (char *)v251;
          if (v251 == v194)
          {
            if (begin != v191)
            {
              v201.__i_ = (std::__wrap_iter<const int *>::iterator_type)v274[0];
              do
                v201.__i_ = std::vector<int>::insert(&v254, v201, begin++).__i_ + 1;
              while (begin != v191);
            }
            break;
          }
          if (*begin < *(_DWORD *)v251)
          {
            v196.__i_ = (std::__wrap_iter<const int *>::iterator_type)v274[0];
            v197.__i_ = std::vector<int>::insert(&v254, v196, begin).__i_;
            v198 = &v253;
            v199 = (std::vector<int> *)v274;
            v200 = (char *)begin;
            begin = v197.__i_;
LABEL_258:
            v199->__begin_ = (std::vector<int>::pointer)(begin + 1);
            goto LABEL_259;
          }
          v198 = (std::vector<int> *)&v251;
          if (*(_DWORD *)v251 >= *begin)
          {
            v199 = &v253;
            goto LABEL_258;
          }
LABEL_259:
          v198->__begin_ = (std::vector<int>::pointer)(v200 + 4);
          begin = v253.__begin_;
        }
        memset(&v253, 0, sizeof(v253));
        v203 = *v193;
        v204 = *v241;
        v205 = *v239;
        v251 = *v237;
        v202 = (const std::vector<int>::value_type *)v251;
        v273 = 0;
        v274[0] = v204;
        if (v251 == v203)
          goto LABEL_280;
        while (2)
        {
          v206 = (const std::vector<int>::value_type *)v274[0];
          if ((const std::vector<int>::value_type *)v274[0] != v205)
          {
            if (*v202 < *(_DWORD *)v274[0])
            {
              v207.__i_ = v273;
              v208.__i_ = std::vector<int>::insert(&v253, v207, v202).__i_;
              v209 = &v251;
              v210 = (void **)&v273;
              v206 = v202;
              v202 = v208.__i_;
              goto LABEL_270;
            }
            v209 = (void **)v274;
            if (*(_DWORD *)v274[0] >= *v202)
            {
              v210 = &v251;
LABEL_270:
              *v210 = (void *)(v202 + 1);
            }
            *v209 = (void *)(v206 + 1);
            v202 = (const std::vector<int>::value_type *)v251;
            if (v251 == v203)
              goto LABEL_280;
            continue;
          }
          break;
        }
        if (v202 != v203)
        {
          v211.__i_ = v273;
          do
            v211.__i_ = std::vector<int>::insert(&v253, v211, v202++).__i_ + 1;
          while (v202 != v203);
        }
LABEL_280:
        v212 = v253.__begin_;
        if (v254.__begin_ == v254.__end_)
        {
          v155 = v236;
          if (v253.__begin_ == v253.__end_)
          {
            if (*(_DWORD *)(v232 + 60) == *(_DWORD *)(v233 + 60))
            {
              v261[v163] |= 1 << v162;
              v214 = (uint64_t)v244[2];
              v251 = operator new(0x28uLL);
              v252 = xmmword_22DCE6530;
              strcpy((char *)v251, "setppc: removed redundant constraints");
              operations_research::sat::PresolveContext::UpdateRuleStats(v214, (uint64_t)&v251);
              if (SHIBYTE(v252) < 0)
                operator delete(v251);
            }
          }
          else if (operations_research::sat::CpModelPresolver::ProcessSetPPCSubset((uint64_t)v244, v236, v162, (unsigned int **)&v253, &v258, (uint64_t *)&v261))
          {
            goto LABEL_286;
          }
LABEL_290:
          v212 = v253.__begin_;
        }
        else
        {
          v155 = v236;
          if (v253.__begin_ == v253.__end_)
          {
            if (operations_research::sat::CpModelPresolver::ProcessSetPPCSubset((uint64_t)v244, v162, v236, (unsigned int **)&v254, &v258, (uint64_t *)&v261))
            {
LABEL_286:
              v213 = v258;
              operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v244[2], v258[v238]);
              operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(v244[2], v213[(int)v162]);
            }
            goto LABEL_290;
          }
        }
        if (v212)
        {
          v253.__end_ = v212;
          operator delete(v212);
        }
        this = (int64_t)v254.__begin_;
        if (v254.__begin_)
        {
          v254.__end_ = v254.__begin_;
          operator delete(v254.__begin_);
        }
LABEL_224:
        ++v151;
        v153 = *(_QWORD *)v149;
        v154 = *((_QWORD *)v149 + 1);
        if (v151 >= (v154 - *(_QWORD *)v149) >> 2)
          goto LABEL_297;
      }
    }
    ++v151;
    if (v150 >= (v154 - v153) >> 2)
      goto LABEL_203;
  }
  if (!FLAGS_time_limit_use_usertime)
    goto LABEL_306;
  v161 = *((double *)v156 + 12);
  if (!v156[72])
  {
    v152 = v161 + (double)*((uint64_t *)v156 + 11) * -0.000000001;
    if (v152 <= 0.0001)
      goto LABEL_306;
    goto LABEL_207;
  }
  this = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
  v152 = v161 + (double)(this - *((_QWORD *)v156 + 10) + *((_QWORD *)v156 + 11)) * -0.000000001;
  if (v152 > 0.0001)
  {
LABEL_207:
    *((_QWORD *)v156 + 2) = *((_QWORD *)v156 + 1) + (uint64_t)(v152 * 1000000000.0);
    goto LABEL_208;
  }
LABEL_306:
  v216 = 0;
  *((_QWORD *)v156 + 2) = 0;
  if ((_QWORD)v256)
    goto LABEL_310;
LABEL_311:
  if (*((_QWORD *)&v256 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v256 + 1));
LABEL_313:
  if (v258)
    operator delete(v258);
  if (v261)
    operator delete(v261);
  v218 = v264;
  if (v264)
  {
    v219 = v265;
    v220 = v264;
    if (v265 != v264)
    {
      v221 = v265;
      do
      {
        v223 = (void *)*((_QWORD *)v221 - 3);
        v221 -= 24;
        v222 = v223;
        if (v223)
        {
          *((_QWORD *)v219 - 2) = v222;
          operator delete(v222);
        }
        v219 = v221;
      }
      while (v221 != v218);
      v220 = v264;
    }
    v265 = v218;
    operator delete(v220);
  }
  v224 = v267;
  if (v267)
  {
    v225 = v268;
    v226 = v267;
    if (v268 != v267)
    {
      v227 = v268;
      do
      {
        v229 = (void *)*((_QWORD *)v227 - 3);
        v227 -= 24;
        v228 = v229;
        if (v229)
        {
          *((_QWORD *)v225 - 2) = v228;
          operator delete(v228);
        }
        v225 = v227;
      }
      while (v227 != v224);
      v226 = v267;
    }
    v268 = v224;
    operator delete(v226);
  }
  if (v270)
    operator delete(v270);
  return v216 & 1;
}

void sub_22DAE00CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a34);
}

void sub_22DAE00D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  uint64_t v41;
  void *v43;
  void *v44;
  void *v45;

  absl::lts_2020_02_25::flat_hash_set<std::pair<int,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~flat_hash_set((uint64_t)&a40);
  v43 = *(void **)(v41 - 256);
  if (v43)
  {
    *(_QWORD *)(v41 - 248) = v43;
    operator delete(v43);
    v44 = *(void **)(v41 - 232);
    if (!v44)
    {
LABEL_3:
      std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v41 - 208));
      std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v41 - 184));
      v45 = *(void **)(v41 - 160);
      if (!v45)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v44 = *(void **)(v41 - 232);
    if (!v44)
      goto LABEL_3;
  }
  operator delete(v44);
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v41 - 208));
  std::vector<std::vector<int>>::~vector[abi:ne180100]((void **)(v41 - 184));
  v45 = *(void **)(v41 - 160);
  if (!v45)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  *(_QWORD *)(v41 - 152) = v45;
  operator delete(v45);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<std::pair<int,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~flat_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

void operations_research::sat::CpModelPresolver::TryToSimplifyDomain(operations_research::sat::PresolveContext **this, const char *a2)
{
  operations_research::sat::PresolveContext *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void **v17;
  void **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  uint64_t *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  operations_research::sat::PresolveContext *v50;
  const char *v51;
  operations_research::sat::PresolveContext *v52;
  uint64_t v53;
  google::LogMessage *v54;
  _QWORD *v55;
  google::LogMessage *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60[3];
  uint64_t *v61[3];
  uint64_t *v62;
  void *v63;
  char *v64;
  char *v65;
  uint64_t *v66;
  void *__p;
  void *v68[2];
  _DWORD v69[8];

  if ((a2 & 0x80000000) != 0)
  {
    v54 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v69, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4216);
    v55 = (_QWORD *)google::LogMessage::stream(v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
    goto LABEL_85;
  }
  if (!operations_research::sat::PresolveContext::ConstraintVariableGraphIsUpToDate(this[2]))
  {
    v56 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v69, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4217);
    v57 = (_QWORD *)google::LogMessage::stream(v56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: context_->ConstraintVariableGraphIsUpToDate() ", 60);
LABEL_85:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v69);
  }
  v4 = this[2];
  if (!*((_BYTE *)v4 + 504)
    && !operations_research::sat::PresolveContext::IsFixed(v4, a2)
    && !operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(this[2], (int)a2))
  {
    operations_research::sat::PresolveContext::GetAffineRelation(this[2], (int)a2, (uint64_t)v69);
    if (v69[0] == (_DWORD)a2)
    {
      if (operations_research::sat::PresolveContext::VariableIsOnlyUsedInEncoding(this[2], (int)a2))
      {
        v5 = (uint64_t)this[2];
        __p = operator new(0x28uLL);
        *(_OWORD *)v68 = xmmword_22DCEDA00;
        strcpy((char *)__p, "TODO variables: only used in encoding.");
        operations_research::sat::PresolveContext::UpdateRuleStats(v5, (uint64_t)&__p);
        if (SHIBYTE(v68[1]) < 0)
          operator delete(__p);
      }
      operations_research::sat::PresolveContext::DomainOf(this[2], a2, (unint64_t *)&__p);
      if (operations_research::Domain::Size((operations_research::Domain *)&__p) == 2
        && (operations_research::Domain::Min((operations_research::Domain *)&__p, v6)
         || operations_research::Domain::Max((operations_research::Domain *)&__p, v7) != 1))
      {
        operations_research::sat::PresolveContext::CanonicalizeDomainOfSizeTwo(this[2], a2);
      }
      else
      {
        v8 = (unint64_t)__p;
        if (operations_research::Domain::Size((operations_research::Domain *)&__p) == (int)(v8 >> 1))
        {
          v10 = operations_research::Domain::Min((operations_research::Domain *)&__p, v9);
          v11 = v10;
          v59 = v10;
          v12 = (unint64_t)__p;
          v13 = (char *)v68[0] + 16;
          if ((__p & 1) == 0)
            v13 = v69;
          v14 = *v13 - v10;
          if ((int)((unint64_t)__p >> 1) >= 3)
          {
            v15 = 2;
            while (1)
            {
              v16 = (v12 & 1) == 0;
              v17 = v68;
              if (!v16)
                v17 = (void **)v68[0];
              v18 = &v17[2 * v15];
              v20 = (uint64_t *)*v18;
              v19 = (uint64_t *)v18[1];
              v63 = v20;
              v66 = v19;
              if (v20 != v19)
              {
                v61[0] = (uint64_t *)google::MakeCheckOpString<long long,long long>((int)&v63, (int)&v66, "i.start == i.end");
                v11 = v59;
                if (v61[0])
                {
                  google::LogMessageFatal::LogMessageFatal((unint64_t *)&v63, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4249, v61);
                  google::LogMessage::stream((google::LogMessage *)&v63);
                  goto LABEL_87;
                }
              }
              LODWORD(v66) = 0;
              v21 = (uint64_t)v20 - v11;
              v63 = (void *)v21;
              if (v21 < 0)
                break;
              if (v21)
                goto LABEL_23;
LABEL_25:
              if (v14 == 1)
                goto LABEL_33;
              ++v15;
              v12 = (unint64_t)__p;
              if (v15 >= (int)((unint64_t)__p >> 1))
                goto LABEL_37;
            }
            v61[0] = (uint64_t *)google::MakeCheckOpString<long long,int>((int)&v63, (int)&v66, "shifted_value >= 0");
            if (v61[0])
            {
              google::LogMessageFatal::LogMessageFatal((unint64_t *)&v63, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4251, v61);
              google::LogMessage::stream((google::LogMessage *)&v63);
LABEL_87:
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v63);
            }
            v11 = v59;
LABEL_23:
            v22 = v14;
            do
            {
              v14 = v21;
              v21 = v22 % v21;
              v22 = v14;
            }
            while (v21);
            goto LABEL_25;
          }
          if (v14 != 1)
          {
LABEL_37:
            v63 = 0;
            v64 = 0;
            v65 = 0;
            if ((int)(v12 >> 1) >= 1)
            {
              v23 = 0;
              v24 = 0;
              do
              {
                v16 = (v12 & 1) == 0;
                v26 = v68;
                if (!v16)
                  v26 = (void **)v68[0];
                v27 = &v26[2 * v24];
                v29 = (uint64_t *)*v27;
                v28 = (uint64_t *)v27[1];
                v61[0] = v29;
                v62 = v28;
                if (v29 == v28)
                {
                  v30 = v65;
                  v31 = ((uint64_t)v29 - v11) / v14;
                  if (v23 < v65)
                    goto LABEL_39;
                }
                else
                {
                  v66 = (uint64_t *)google::MakeCheckOpString<long long,long long>((int)v61, (int)&v62, "i.start == i.end");
                  if (v66)
                  {
                    google::LogMessageFatal::LogMessageFatal((unint64_t *)v61, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4263, &v66);
                    google::LogMessage::stream((google::LogMessage *)v61);
                    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v61);
                  }
                  v23 = v64;
                  v30 = v65;
                  v11 = v59;
                  v31 = ((uint64_t)v29 - v59) / v14;
                  if (v64 < v65)
                  {
LABEL_39:
                    *(_QWORD *)v23 = v31;
                    v25 = (uint64_t)(v23 + 8);
                    goto LABEL_40;
                  }
                }
                v32 = (char *)v63;
                v33 = v23 - (_BYTE *)v63;
                v34 = (v23 - (_BYTE *)v63) >> 3;
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 61)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v36 = v30 - (_BYTE *)v63;
                if (v36 >> 2 > v35)
                  v35 = v36 >> 2;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                  v37 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v37 = v35;
                if (v37)
                {
                  if (v37 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v38 = v37;
                  v39 = operator new(8 * v37);
                  v37 = v38;
                  v40 = (uint64_t *)&v39[8 * v34];
                  *v40 = v31;
                  v25 = (uint64_t)(v40 + 1);
                  if (v23 != v32)
                  {
LABEL_54:
                    v41 = v23 - 8 - v32;
                    if (v41 < 0x168
                      || &v39[v33 - 8 - (v41 & 0xFFFFFFFFFFFFFFF8)] > &v39[v33 - 8]
                      || &v23[-(v41 & 0xFFFFFFFFFFFFFFF8) - 8] > v23 - 8
                      || (unint64_t)(v23 - v39 - v33) < 0x20)
                    {
                      v42 = v23;
                      v11 = v59;
                    }
                    else
                    {
                      v44 = (v41 >> 3) + 1;
                      v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
                      v42 = &v23[-v45];
                      v40 = (uint64_t *)((char *)v40 - v45);
                      v46 = &v39[8 * v34 - 16];
                      v47 = v23 - 16;
                      v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
                      v11 = v59;
                      do
                      {
                        v49 = *(_OWORD *)v47;
                        *(v46 - 1) = *((_OWORD *)v47 - 1);
                        *v46 = v49;
                        v46 -= 2;
                        v47 -= 32;
                        v48 -= 4;
                      }
                      while (v48);
                      if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_57:
                        v63 = v40;
                        v64 = (char *)v25;
                        v65 = &v39[8 * v37];
                        if (!v32)
                          goto LABEL_40;
LABEL_61:
                        operator delete(v32);
                        goto LABEL_40;
                      }
                    }
                    do
                    {
                      v43 = *((_QWORD *)v42 - 1);
                      v42 -= 8;
                      *--v40 = v43;
                    }
                    while (v42 != v32);
                    goto LABEL_57;
                  }
                }
                else
                {
                  v39 = 0;
                  v40 = (uint64_t *)(8 * v34);
                  *(_QWORD *)(8 * v34) = v31;
                  v25 = 8 * v34 + 8;
                  if (v23 != v32)
                    goto LABEL_54;
                }
                v11 = v59;
                v63 = v40;
                v64 = (char *)v25;
                v65 = &v39[8 * v37];
                if (v32)
                  goto LABEL_61;
LABEL_40:
                v64 = (char *)v25;
                ++v24;
                LOBYTE(v12) = (_BYTE)__p;
                v23 = (char *)v25;
              }
              while (v24 < (int)((unint64_t)__p >> 1));
            }
            v50 = this[2];
            std::vector<long long>::vector(v60, (uint64_t)&v63);
            operations_research::Domain::FromValues((int64_t **)v60, (unint64_t *)v61);
            v51 = (const char *)operations_research::sat::PresolveContext::NewIntVar(v50, (const operations_research::Domain *)v61);
            if (((uint64_t)v61[0] & 1) != 0)
              operator delete(v61[1]);
            if (v60[0])
            {
              v60[1] = v60[0];
              operator delete(v60[0]);
            }
            if (v63)
            {
              v64 = (char *)v63;
              operator delete(v63);
            }
            v52 = this[2];
            if (!*((_BYTE *)v52 + 504))
            {
              if (!operations_research::sat::PresolveContext::StoreAffineRelation(v52, a2, v51, v14, v11))
              {
                google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v63, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4271);
                v58 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v63);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Check failed: context_->StoreAffineRelation(var, new_var_index, gcd, var_min) ", 78);
                goto LABEL_87;
              }
              v53 = (uint64_t)this[2];
              std::string::basic_string[abi:ne180100]<0>(&v63, "variables: canonicalize affine domain");
              operations_research::sat::PresolveContext::UpdateRuleStats(v53, (uint64_t)&v63);
              if (SHIBYTE(v65) < 0)
                operator delete(v63);
              operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(this[2]);
            }
          }
        }
      }
LABEL_33:
      if ((__p & 1) != 0)
        operator delete(v68[0]);
    }
  }
}

void sub_22DAE0918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAE0920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAE0928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAE0930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,int a27,__int16 a28,char a29,char a30)
{
  if ((a25 & 1) != 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DAE0A48()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 112));
}

void sub_22DAE0A50()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 112));
}

void operations_research::sat::CpModelPresolver::EncodeAllAffineRelations(operations_research::sat::CpModelPresolver *this)
{
  operations_research::sat::PresolveContext *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  google::protobuf::Arena *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v2 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
  if (*(int *)(*((_QWORD *)v2 + 6) + 24) >= 1)
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      if (!operations_research::sat::PresolveContext::IsFixed(v2, v4))
      {
        operations_research::sat::PresolveContext::GetAffineRelation(*((operations_research::sat::PresolveContext **)this + 2), (int)v4, (uint64_t)&v32);
        if ((_DWORD)v4 != v32)
        {
          v5 = *((_QWORD *)this + 2);
          if (*(_BYTE *)(v5 + 64))
          {
            v6 = *(_QWORD *)(v5 + 48);
            v7 = *(int **)(v6 + 56);
            if (!v7)
              goto LABEL_20;
            goto LABEL_9;
          }
          if (!operations_research::sat::PresolveContext::VariableIsNotUsedAnymore((operations_research::sat::PresolveContext *)v5, (int)v4))
          {
            if (!operations_research::sat::CpModelPresolver::PresolveAffineRelationIfAny((operations_research::sat::PresolveContext **)this, v4))
            {
              operations_research::sat::PresolveContext::RemoveAllVariablesFromAffineRelationConstraint(*((_QWORD *)this + 2));
              if (**(_BYTE **)this)
                v31 = v3 < 1;
              else
                v31 = 1;
              if (!v31)
                goto LABEL_41;
              return;
            }
            if (!operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(*((operations_research::sat::PresolveContext **)this + 2), (int)v4)&& !operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), v4))
            {
              break;
            }
          }
        }
      }
LABEL_4:
      v4 = (const char *)((_DWORD)v4 + 1);
      v2 = (operations_research::sat::PresolveContext *)*((_QWORD *)this + 2);
      if ((int)v4 >= *(_DWORD *)(*((_QWORD *)v2 + 6) + 24))
        goto LABEL_37;
    }
    v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 48);
    v7 = *(int **)(v6 + 56);
    if (!v7)
    {
LABEL_20:
      v9 = *(_DWORD *)(v6 + 52);
      goto LABEL_22;
    }
LABEL_9:
    v8 = *(int *)(v6 + 48);
    v9 = *v7;
    if ((int)v8 >= *v7)
    {
      if (v9 == *(_DWORD *)(v6 + 52))
      {
LABEL_22:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v6 + 40), v9 + 1);
        v7 = *(int **)(v6 + 56);
        v9 = *v7;
      }
      *v7 = v9 + 1;
      v10 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v6 + 40));
      v17 = *(_QWORD *)(v6 + 56);
      v18 = *(int *)(v6 + 48);
      *(_DWORD *)(v6 + 48) = v18 + 1;
      *(_QWORD *)(v17 + 8 * v18 + 8) = v10;
      if (*(_DWORD *)(v10 + 60) != 12)
      {
LABEL_11:
        operations_research::sat::ConstraintProto::clear_constraint(v10);
        *(_DWORD *)(v10 + 60) = 12;
        v11 = *(_QWORD *)(v10 + 8);
        v12 = (google::protobuf::Arena *)(v11 & 0xFFFFFFFFFFFFFFFELL);
        if ((v11 & 1) != 0)
          v12 = *(google::protobuf::Arena **)v12;
        v13 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v12);
        *(_QWORD *)(v10 + 48) = v13;
        v15 = *(unsigned int *)(v13 + 16);
        v14 = (unsigned int *)(v13 + 16);
        v16 = v15 + 1;
        if ((_DWORD)v15 != *(_DWORD *)(v13 + 20))
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    else
    {
      *(_DWORD *)(v6 + 48) = v8 + 1;
      v10 = *(_QWORD *)&v7[2 * v8 + 2];
      if (*(_DWORD *)(v10 + 60) != 12)
        goto LABEL_11;
    }
    v13 = *(_QWORD *)(v10 + 48);
    v15 = *(unsigned int *)(v13 + 16);
    v14 = (unsigned int *)(v13 + 16);
    v16 = v15 + 1;
    if ((_DWORD)v15 != *(_DWORD *)(v13 + 20))
    {
LABEL_26:
      *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v15) = (_DWORD)v4;
      v19 = *(unsigned int *)(v13 + 40);
      *(_DWORD *)(v13 + 16) = v16;
      if ((_DWORD)v19 == *(_DWORD *)(v13 + 44))
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v13 + 40), v19 + 1);
        v16 = *v14;
      }
      *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v19) = 1;
      *(_DWORD *)(v13 + 40) = v19 + 1;
      v20 = v32;
      if (v16 == *(_DWORD *)(v13 + 20))
        google::protobuf::RepeatedField<int>::Reserve(v14, v16 + 1);
      *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v16) = v20;
      *(_DWORD *)(v13 + 16) = v16 + 1;
      v21 = v33;
      v22 = *(unsigned int *)(v13 + 40);
      if ((_DWORD)v22 == *(_DWORD *)(v13 + 44))
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v13 + 40), v22 + 1);
      v23 = *(unsigned int *)(v13 + 64);
      *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v22) = -v21;
      *(_DWORD *)(v13 + 40) = v22 + 1;
      v24 = v34;
      v25 = *(_DWORD *)(v13 + 68);
      v26 = v23 + 1;
      if ((_DWORD)v23 == v25)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v13 + 64), v23 + 1);
        v25 = *(_DWORD *)(v13 + 68);
      }
      v27 = *(_QWORD *)(v13 + 72);
      *(_QWORD *)(v27 + 8 * v23) = v24;
      *(_DWORD *)(v13 + 64) = v26;
      v28 = v34;
      if (v26 == v25)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v13 + 64), v23 + 2);
        v27 = *(_QWORD *)(v13 + 72);
      }
      ++v3;
      *(_QWORD *)(v27 + 8 * v26) = v28;
      *(_DWORD *)(v13 + 64) = v23 + 2;
      operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                   + 2));
      goto LABEL_4;
    }
LABEL_25:
    google::protobuf::RepeatedField<int>::Reserve(v14, v16);
    goto LABEL_26;
  }
  v3 = 0;
LABEL_37:
  operations_research::sat::PresolveContext::RemoveAllVariablesFromAffineRelationConstraint((uint64_t)v2);
  if (**(_BYTE **)this)
    v29 = v3 < 1;
  else
    v29 = 1;
  if (!v29)
  {
LABEL_41:
    google::LogMessage::LogMessage((google::LogMessage *)&v32, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4312);
    google::LogMessage::stream((google::LogMessage *)&v32);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" affine relations still in the model.", 37);
    google::LogMessage::~LogMessage((google::LogMessage *)&v32);
  }
}

void sub_22DAE0DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::PresolveAffineRelationIfAny(operations_research::sat::PresolveContext **this, const char *a2)
{
  uint64_t result;
  uint64_t v5;
  operations_research::sat::PresolveContext *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::Arena *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  _BYTE v41[16];
  int v42;
  uint64_t v43;
  uint64_t v44;

  if (operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(this[2], (int)a2))
    return 1;
  operations_research::sat::PresolveContext::GetAffineRelation(this[2], (int)a2, (uint64_t)&v42);
  if (v42 == (_DWORD)a2)
    return 1;
  result = operations_research::sat::PresolveContext::PropagateAffineRelation(this[2], (int)a2);
  if (!(_DWORD)result)
    return result;
  if (operations_research::sat::PresolveContext::IsFixed(this[2], a2))
    return 1;
  v5 = 0;
  v6 = this[2];
  v7 = (_QWORD *)(*((_QWORD *)v6 + 85) + 48 * (int)a2);
  v8 = ((((unint64_t)&off_24F97F560 + 6) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 6));
  v9 = (v8 >> 7) ^ (*v7 >> 12);
  v10 = v7[3];
  v11 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    v12 = v9 & v10;
    v13 = *(_QWORD *)(*v7 + v12);
    v14 = ((v13 ^ v11) - 0x101010101010101) & ~(v13 ^ v11) & 0x8080808080808080;
    if (v14)
      break;
LABEL_9:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
      goto LABEL_17;
    v5 += 8;
    v9 = v5 + v12;
  }
  while (1)
  {
    v15 = (v12 + (__clz(__rbit64(v14)) >> 3)) & v10;
    if (*(_DWORD *)(v7[1] + 4 * v15) == -2)
      break;
    v14 &= v14 - 1;
    if (!v14)
      goto LABEL_9;
  }
  if (v15 == v10)
  {
LABEL_17:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4331);
    v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Check failed: context_->VarToConstraints(var).contains(kAffineRelationConstraint) ", 82);
    goto LABEL_18;
  }
  if (operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(v6, v42))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4332);
    v40 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Check failed: !context_->VariableIsNotUsedAnymore(r.representative) ", 68);
LABEL_18:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v41);
  }
  if (operations_research::sat::PresolveContext::VariableIsUniqueAndRemovable(this[2], (int)a2))
  {
    v16 = *((_QWORD *)this[2] + 7);
    v17 = *(int **)(v16 + 56);
    if (v17)
    {
      v18 = *(int *)(v16 + 48);
      v19 = *v17;
      if ((int)v18 < *v17)
      {
        *(_DWORD *)(v16 + 48) = v18 + 1;
        v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_23:
        if (*(_DWORD *)(v20 + 60) == 12)
        {
          v24 = *(_QWORD *)(v20 + 48);
        }
        else
        {
          operations_research::sat::ConstraintProto::clear_constraint(v20);
          *(_DWORD *)(v20 + 60) = 12;
          v25 = *(_QWORD *)(v20 + 8);
          v26 = (google::protobuf::Arena *)(v25 & 0xFFFFFFFFFFFFFFFELL);
          if ((v25 & 1) != 0)
            v26 = *(google::protobuf::Arena **)v26;
          v24 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v26);
          *(_QWORD *)(v20 + 48) = v24;
        }
        v27 = *(unsigned int *)(v24 + 16);
        v28 = v27 + 1;
        if ((_DWORD)v27 == *(_DWORD *)(v24 + 20))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v24 + 16), v27 + 1);
        *(_DWORD *)(*(_QWORD *)(v24 + 24) + 4 * v27) = (_DWORD)a2;
        v29 = *(unsigned int *)(v24 + 40);
        *(_DWORD *)(v24 + 16) = v28;
        if ((_DWORD)v29 == *(_DWORD *)(v24 + 44))
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 40), v29 + 1);
          v28 = *(_DWORD *)(v24 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * v29) = 1;
        *(_DWORD *)(v24 + 40) = v29 + 1;
        v30 = v42;
        if (v28 == *(_DWORD *)(v24 + 20))
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v24 + 16), v28 + 1);
        *(_DWORD *)(*(_QWORD *)(v24 + 24) + 4 * v28) = v30;
        *(_DWORD *)(v24 + 16) = v28 + 1;
        v31 = -v43;
        v32 = *(unsigned int *)(v24 + 40);
        if ((_DWORD)v32 == *(_DWORD *)(v24 + 44))
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 40), v32 + 1);
        v33 = *(unsigned int *)(v24 + 64);
        *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * v32) = v31;
        *(_DWORD *)(v24 + 40) = v32 + 1;
        v34 = v44;
        v35 = *(_DWORD *)(v24 + 68);
        v36 = v33 + 1;
        if ((_DWORD)v33 == v35)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 64), v33 + 1);
          v35 = *(_DWORD *)(v24 + 68);
        }
        v37 = *(_QWORD *)(v24 + 72);
        *(_QWORD *)(v37 + 8 * v33) = v34;
        *(_DWORD *)(v24 + 64) = v36;
        v38 = v44;
        v39 = v33 + 2;
        if (v36 == v35)
        {
          google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v24 + 64), v39);
          v37 = *(_QWORD *)(v24 + 72);
        }
        *(_QWORD *)(v37 + 8 * v36) = v38;
        *(_DWORD *)(v24 + 64) = v39;
        operations_research::sat::PresolveContext::RemoveVariableFromAffineRelation(this[2], a2);
        return 1;
      }
      if (v19 != *(_DWORD *)(v16 + 52))
      {
LABEL_22:
        *v17 = v19 + 1;
        v20 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v16 + 40));
        v22 = *(_QWORD *)(v16 + 56);
        v23 = *(int *)(v16 + 48);
        *(_DWORD *)(v16 + 48) = v23 + 1;
        *(_QWORD *)(v22 + 8 * v23 + 8) = v20;
        goto LABEL_23;
      }
    }
    else
    {
      v19 = *(_DWORD *)(v16 + 52);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v16 + 40), v19 + 1);
    v17 = *(int **)(v16 + 56);
    v19 = *v17;
    goto LABEL_22;
  }
  return 1;
}

void sub_22DAE11C8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAE11D0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::CpModelPresolver::PresolveToFixPoint(operations_research::sat::CpModelPresolver *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep updated;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27;
  uint64_t v28;
  double v29;
  double v30;
  unsigned __int8 *v31;
  unsigned __int8 v32;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v33;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v34;
  uint64_t v35;
  absl::lts_2020_02_25 *v36;
  double v37;
  double v38;
  uint64_t v39;
  void **v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  void *p_p;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  const char *v59;
  _QWORD *v60;
  const char **v61;
  const char **v62;
  uint64_t v63;
  const char *v64;
  char **v65;
  char *v66;
  _QWORD *v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t i;
  uint64_t v82;
  unsigned int *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v102;
  char v103;
  uint64_t v104;
  char *v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char **v111;
  int *v112;
  int **v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  void **v129;
  void **v130;
  const operations_research::Domain *v131;
  unsigned int v132;
  uint64_t v133;
  void **v134;
  void *v135;
  void **v136;
  void **v137;
  void *v138;
  void **v139;
  void **v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  int *v145;
  uint64_t v146;
  void *v147;
  __int128 v148;
  BOOL v149;
  void *__p;
  void **v151;
  unsigned __int8 v152;
  void *v153[2];
  __int128 v154;
  unsigned __int128 v155;
  void *v156;
  unint64_t v157;
  unint64_t v158;
  void *v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;

  v1 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v1 + 504))
    return;
  v3 = *(_QWORD *)this;
  v4 = *(unsigned int *)(*(_QWORD *)this + 176);
  if ((int)v4 <= 0)
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  v146 = v4;
  v160 = 0u;
  v161 = 0u;
  v158 = 0;
  v159 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v162 = 0;
  v5 = *(_QWORD *)(v3 + 584);
  v6 = *(int *)(*(_QWORD *)(v1 + 48) + 48);
  v156 = 0;
  v157 = 0;
  if (!(_DWORD)v6)
  {
    v154 = 0uLL;
    v155 = 0uLL;
    *(_OWORD *)v153 = 0uLL;
LABEL_20:
    v16 = 0;
    v9 = 0;
    v11 = 0;
    v8 = 0;
LABEL_21:
    v17 = 0;
    v19 = 0;
    v18 = &v11[8 * ((v8 + v9) >> 10)];
    __p = this;
    goto LABEL_23;
  }
  if ((v6 & 0x80000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v156 = operator new(8 * (((v6 - 1) >> 6) + 1));
  v157 = 0;
  v158 = ((v6 - 1) >> 6) + 1;
  std::vector<BOOL>::__construct_at_end[abi:ne180100](&v156, v6, 0);
  v7 = v157;
  v154 = 0u;
  v155 = 0u;
  *(_OWORD *)v153 = 0u;
  if (!v157)
    goto LABEL_20;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 56) + 8 * v12 + 8) + 60))
    {
      *(_QWORD *)((char *)v156 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (v11 == v10)
        v13 = 0;
      else
        v13 = ((v11 - v10) << 7) - 1;
      v14 = *((_QWORD *)&v155 + 1);
      v9 = v155;
      v15 = *((_QWORD *)&v155 + 1) + v155;
      if (v13 == *((_QWORD *)&v155 + 1) + (_QWORD)v155)
      {
        std::deque<int>::__add_back_capacity((uint64_t)v153);
        v10 = (char *)v153[1];
        v11 = (_BYTE *)v154;
        v14 = *((_QWORD *)&v155 + 1);
        v9 = v155;
        v15 = v155 + *((_QWORD *)&v155 + 1);
      }
      *(_DWORD *)(*(_QWORD *)&v10[(v15 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v15 & 0x3FF)) = v12;
      v8 = v14 + 1;
      *((_QWORD *)&v155 + 1) = v8;
      v7 = v157;
    }
    ++v12;
  }
  while (v7 > v12);
  v16 = &v10[8 * (v9 >> 10)];
  if (v11 == v10)
    goto LABEL_21;
  v17 = (int *)(*(_QWORD *)v16 + 4 * (v9 & 0x3FF));
  v18 = &v10[8 * ((v8 + v9) >> 10)];
  v19 = (int *)(*(_QWORD *)v18 + 4 * (((_WORD)v8 + (_WORD)v9) & 0x3FF));
  __p = this;
  if (v19 != v17)
  {
    v20 = (((uint64_t)v19 - *(_QWORD *)v18) >> 2) + ((v18 - v16) << 7);
    v21 = ((uint64_t)v17 - *(_QWORD *)v16) >> 2;
    if (v20 != v21)
    {
      std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>((unint64_t)v16, v17, v18, v19, (uint64_t *)&__p, 2 * (63 - __clz(v20 - v21)), 1);
      if (!*((_QWORD *)&v155 + 1))
        goto LABEL_154;
      goto LABEL_26;
    }
  }
LABEL_23:
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>((unint64_t)v16, v17, v18, v19, (uint64_t *)&__p, 0, 1);
  if (*((_QWORD *)&v155 + 1))
  {
LABEL_26:
    v145 = (int *)(v5 + 32);
    v23 = *((_QWORD *)this + 2);
    do
    {
      if (*(_BYTE *)(v23 + 504))
        break;
      if (v5)
      {
        v24 = *(unsigned __int8 **)(v5 + 120);
        if (v24)
        {
          v25 = atomic_load(v24);
          if ((v25 & 1) != 0)
            break;
        }
        if (fmax(*(double *)(v5 + 104) - *(double *)(v5 + 112), 0.0) <= 0.0)
          break;
        CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)updated);
        v27 = CurrentTimeNanos;
        v28 = *(_QWORD *)(v5 + 24) <= CurrentTimeNanos - *(_QWORD *)(v5 + 8)
            ? CurrentTimeNanos - *(_QWORD *)(v5 + 8)
            : *(_QWORD *)(v5 + 24);
        operations_research::RunningMax<long long>::Add(v145, v28);
        *(_QWORD *)(v5 + 8) = v27;
        if (*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * *(int *)(v5 + 68)) + v27 >= *(_QWORD *)(v5 + 16))
        {
          if (!FLAGS_time_limit_use_usertime)
            goto LABEL_153;
          v29 = *(double *)(v5 + 96);
          if (*(_BYTE *)(v5 + 72))
          {
            updated = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)updated);
            v30 = v29 + (double)(updated - *(_QWORD *)(v5 + 80) + *(_QWORD *)(v5 + 88)) * -0.000000001;
            if (v30 <= 0.0001)
              goto LABEL_153;
          }
          else
          {
            v30 = v29 + (double)*(uint64_t *)(v5 + 88) * -0.000000001;
            if (v30 <= 0.0001)
            {
LABEL_153:
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
          }
          *(_QWORD *)(v5 + 16) = *(_QWORD *)(v5 + 8) + (uint64_t)(v30 * 1000000000.0);
        }
      }
      if (*(_QWORD *)(*((_QWORD *)this + 2) + 120) > v146)
        break;
      while (*((_QWORD *)&v155 + 1) && !*(_BYTE *)(*((_QWORD *)this + 2) + 504))
      {
        if (v5)
        {
          v31 = *(unsigned __int8 **)(v5 + 120);
          if (v31)
          {
            v32 = atomic_load(v31);
            if ((v32 & 1) != 0)
              break;
          }
          if (fmax(*(double *)(v5 + 104) - *(double *)(v5 + 112), 0.0) <= 0.0)
            break;
          v33 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)updated);
          v34 = v33;
          v35 = *(_QWORD *)(v5 + 24) <= v33 - *(_QWORD *)(v5 + 8) ? v33 - *(_QWORD *)(v5 + 8) : *(_QWORD *)(v5 + 24);
          operations_research::RunningMax<long long>::Add(v145, v35);
          *(_QWORD *)(v5 + 8) = v34;
          if (*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * *(int *)(v5 + 68)) + v34 >= *(_QWORD *)(v5 + 16))
          {
            if (!FLAGS_time_limit_use_usertime)
              goto LABEL_83;
            v37 = *(double *)(v5 + 96);
            if (*(_BYTE *)(v5 + 72))
            {
              v38 = v37
                  + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v36) - *(_QWORD *)(v5 + 80) + *(_QWORD *)(v5 + 88))
                  * -0.000000001;
              if (v38 <= 0.0001)
                goto LABEL_83;
            }
            else
            {
              v38 = v37 + (double)*(uint64_t *)(v5 + 88) * -0.000000001;
              if (v38 <= 0.0001)
              {
LABEL_83:
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
            }
            *(_QWORD *)(v5 + 16) = *(_QWORD *)(v5 + 8) + (uint64_t)(v38 * 1000000000.0);
          }
        }
        v39 = *((_QWORD *)this + 2);
        if (*(_QWORD *)(v39 + 120) > v146)
          break;
        v40 = (void **)v153[1];
        v41 = *(int *)(*(_QWORD *)((char *)v153[1] + (((unint64_t)v155 >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * (v155 & 0x3FF));
        *(_QWORD *)((char *)v156 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v41);
        v42 = v155 + 1;
        v155 = __PAIR128__(*((unint64_t *)&v155 + 1), (uint64_t)v155 + 1) + __PAIR128__(-1, 0);
        if (v42 >= 0x800)
        {
          operator delete(*v40);
          v153[1] = (char *)v153[1] + 8;
          *(_QWORD *)&v155 = v155 - 1024;
          v39 = *((_QWORD *)this + 2);
        }
        v43 = *(_DWORD *)(*(_QWORD *)(v39 + 48) + 48);
        v44 = operations_research::sat::CpModelPresolver::PresolveOneConstraint(this, v41);
        updated = *((_QWORD *)this + 2);
        if (*(_BYTE *)(updated + 504) && **(_BYTE **)this)
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v147, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4404);
          v45 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v147);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Unsat after presolving constraint #", 35);
          v46 = (_QWORD *)std::ostream::operator<<();
          v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" (warning, dump might be inconsistent): ", 40);
          google::protobuf::Message::ShortDebugString(*(google::protobuf::Message **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 56) + 8 * v41 + 8), (uint64_t)&__p);
          if ((v152 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v152 & 0x80u) == 0)
            v49 = v152;
          else
            v49 = (uint64_t)v151;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)p_p, v49);
          if ((char)v152 < 0)
            operator delete(__p);
          google::LogMessage::~LogMessage((google::LogMessage *)&v147);
          updated = *((_QWORD *)this + 2);
        }
        v50 = *(int *)(*(_QWORD *)(updated + 48) + 48);
        if ((int)v50 > v43)
        {
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)updated);
          std::vector<BOOL>::resize((uint64_t)&v156, v50, 1uLL);
          v51 = (char *)v153[1];
          v52 = (_BYTE *)v154;
          v54 = *((_QWORD *)&v155 + 1);
          v53 = v155;
          do
          {
            if (v52 == v51)
              v55 = 0;
            else
              v55 = ((v52 - v51) << 7) - 1;
            v56 = v54 + v53;
            if (v55 == v54 + v53)
            {
              std::deque<int>::__add_back_capacity((uint64_t)v153);
              v51 = (char *)v153[1];
              v52 = (_BYTE *)v154;
              v54 = *((_QWORD *)&v155 + 1);
              v53 = v155;
              v56 = v155 + *((_QWORD *)&v155 + 1);
            }
            *(_DWORD *)(*(_QWORD *)&v51[(v56 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v56 & 0x3FF)) = v43;
            *((_QWORD *)&v155 + 1) = ++v54;
            ++v43;
          }
          while ((_DWORD)v50 != v43);
        }
        if (v44)
          updated = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), v41);
      }
      v57 = *((_QWORD *)this + 2);
      v58 = *(_DWORD *)(*(_QWORD *)(v57 + 48) + 24);
      if (v58 >= 1)
      {
        v59 = 0;
        do
        {
          if (*(_BYTE *)(*((_QWORD *)this + 2) + 504)
            || !operations_research::sat::CpModelPresolver::PresolveAffineRelationIfAny((operations_research::sat::PresolveContext **)this, v59))
          {
            goto LABEL_192;
          }
          operations_research::sat::CpModelPresolver::TryToSimplifyDomain((operations_research::sat::PresolveContext **)this, v59);
          operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage(*((operations_research::sat::PresolveContext **)this
                                                                                       + 2));
          v59 = (const char *)((_DWORD)v59 + 1);
        }
        while (v58 != (_DWORD)v59);
        v57 = *((_QWORD *)this + 2);
      }
      if (*(_BYTE *)(v57 + 504))
        goto LABEL_192;
      std::vector<BOOL>::resize((uint64_t)&v156, *(int *)(*(_QWORD *)(v57 + 48) + 48), 0);
      v60 = (_QWORD *)*((_QWORD *)this + 2);
      v61 = (const char **)v60[38];
      v62 = (const char **)v60[39];
      if (v61 != v62)
      {
        while (1)
        {
          v64 = *v61;
          if (!operations_research::sat::PresolveContext::VariableIsNotUsedAnymore(*((operations_research::sat::PresolveContext **)this + 2), (int)*v61))break;
LABEL_94:
          if (++v61 == v62)
          {
            v63 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 2) + 48) + 24);
            if ((int)v63 >= 1)
              goto LABEL_115;
            goto LABEL_141;
          }
        }
        if (operations_research::sat::PresolveContext::IsFixed(*((operations_research::sat::PresolveContext **)this + 2), v64))
        {
          operations_research::sat::PresolveContext::ExploitFixedDomain(*((operations_research::sat::PresolveContext **)this + 2), v64);
        }
        v65 = (char **)(*(_QWORD *)(*((_QWORD *)this + 2) + 680) + 48 * (int)v64);
        v66 = v65[1];
        v67 = *v65;
        if (**v65 <= -2)
        {
          do
          {
            v68 = (__clz(__rbit64(((*v67 >> 7) & ~*v67 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v67 = (_QWORD *)((char *)v67 + v68);
            v66 += 4 * v68;
          }
          while (*(char *)v67 < -1);
        }
        v69 = &v65[3][(_QWORD)*v65];
        while (1)
        {
LABEL_101:
          if (v67 == (_QWORD *)v69)
            goto LABEL_94;
          v70 = *(unsigned int *)v66;
          if ((v70 & 0x80000000) != 0)
            break;
          v71 = *((_QWORD *)v156 + (v70 >> 6));
          if ((v71 & (1 << v70)) != 0)
            break;
          v74 = (char *)v153[1];
          v75 = (char *)v154;
          v76 = (((_QWORD)v154 - (unint64_t)v153[1]) << 7) - 1;
          *((_QWORD *)v156 + (v70 >> 6)) = v71 | (1 << v70);
          if (v75 == v74)
            v77 = 0;
          else
            v77 = v76;
          v78 = *((_QWORD *)&v155 + 1);
          v79 = *((_QWORD *)&v155 + 1) + v155;
          if (v77 == *((_QWORD *)&v155 + 1) + (_QWORD)v155)
          {
            std::deque<int>::__add_back_capacity((uint64_t)v153);
            v78 = *((_QWORD *)&v155 + 1);
            v74 = (char *)v153[1];
            v79 = v155 + *((_QWORD *)&v155 + 1);
          }
          *(_DWORD *)(*(_QWORD *)&v74[(v79 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v79 & 0x3FF)) = v70;
          *((_QWORD *)&v155 + 1) = v78 + 1;
          v80 = *((char *)v67 + 1);
          v67 = (_QWORD *)((char *)v67 + 1);
          v66 += 4;
          if (v80 <= -2)
            goto LABEL_105;
        }
        v72 = *((char *)v67 + 1);
        v67 = (_QWORD *)((char *)v67 + 1);
        v66 += 4;
        if (v72 > -2)
          goto LABEL_101;
        do
        {
LABEL_105:
          v73 = (__clz(__rbit64(((*v67 >> 7) & ~*v67 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v67 = (_QWORD *)((char *)v67 + v73);
          v66 += 4 * v73;
        }
        while (*(char *)v67 < -1);
        goto LABEL_101;
      }
      v63 = *(unsigned int *)(v60[6] + 24);
      if ((int)v63 >= 1)
      {
LABEL_115:
        for (i = 0; i != v63; ++i)
        {
          v82 = *(_QWORD *)(*((_QWORD *)this + 2) + 680) + 48 * i;
          if (*(_QWORD *)(v82 + 16) == 1)
          {
            v84 = *(_QWORD **)v82;
            v83 = *(unsigned int **)(v82 + 8);
            if (*(char *)v84 <= -2)
            {
              do
              {
                v85 = (__clz(__rbit64(((*v84 >> 7) & ~*v84 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v84 = (_QWORD *)((char *)v84 + v85);
                v83 += v85;
              }
              while (*(char *)v84 < -1);
            }
            v86 = *v83;
            if ((v86 & 0x80000000) == 0)
            {
              v87 = v86 >> 6;
              v88 = 1 << v86;
              if ((*((_QWORD *)v156 + (v86 >> 6)) & (1 << v86)) == 0)
              {
                v89 = 0;
                v90 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + i)
                       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                           + i)))
                    + v86;
                v91 = ((v90 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v90);
                v92 = (v91 >> 7) ^ ((unint64_t)v159 >> 12);
                v93 = 0x101010101010101 * (v91 & 0x7F);
                while (1)
                {
                  v94 = v92 & v161;
                  v95 = *(_QWORD *)((char *)v159 + v94);
                  v96 = ((v95 ^ v93) - 0x101010101010101) & ~(v95 ^ v93) & 0x8080808080808080;
                  if (v96)
                    break;
LABEL_130:
                  if ((v95 & (~v95 << 6) & 0x8080808080808080) != 0)
                    goto LABEL_133;
                  v89 += 8;
                  v92 = v89 + v94;
                }
                while (1)
                {
                  v97 = (v94 + (__clz(__rbit64(v96)) >> 3)) & v161;
                  v98 = (unsigned int *)(v160 + 8 * v97);
                  v99 = *v98;
                  v100 = v98[1];
                  if (i == v99 && v100 == (_DWORD)v86)
                    break;
                  v96 &= v96 - 1;
                  if (!v96)
                    goto LABEL_130;
                }
                if (v97 == (_QWORD)v161)
                {
LABEL_133:
                  __p = (void *)__PAIR64__(v86, i);
                  v102 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::find_or_prepare_insert<std::pair<int,int>>((uint64_t *)&v159, (unsigned int *)&__p);
                  if (v103)
                    *(_QWORD *)(v160 + 8 * v102) = __p;
                  v104 = *((_QWORD *)v156 + v87);
                  if ((v104 & v88) == 0)
                  {
                    v105 = (char *)v153[1];
                    v106 = (char *)v154;
                    v107 = (((_QWORD)v154 - (unint64_t)v153[1]) << 7) - 1;
                    *((_QWORD *)v156 + v87) = v104 | v88;
                    if (v106 == v105)
                      v108 = 0;
                    else
                      v108 = v107;
                    v109 = *((_QWORD *)&v155 + 1);
                    v110 = *((_QWORD *)&v155 + 1) + v155;
                    if (v108 == *((_QWORD *)&v155 + 1) + (_QWORD)v155)
                    {
                      std::deque<int>::__add_back_capacity((uint64_t)v153);
                      v109 = *((_QWORD *)&v155 + 1);
                      v105 = (char *)v153[1];
                      v110 = v155 + *((_QWORD *)&v155 + 1);
                    }
                    *(_DWORD *)(*(_QWORD *)&v105[(v110 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v110 & 0x3FF)) = v86;
                    *((_QWORD *)&v155 + 1) = v109 + 1;
                  }
                  continue;
                }
              }
            }
          }
        }
      }
LABEL_141:
      v111 = (char **)((char *)v153[1] + 8 * ((unint64_t)v155 >> 10));
      if ((void *)v154 == v153[1])
      {
        v112 = 0;
        v114 = 0;
        v113 = (int **)((char *)v153[1] + 8 * ((*((_QWORD *)&v155 + 1) + (_QWORD)v155) >> 10));
      }
      else
      {
        v112 = (int *)&(*v111)[4 * (v155 & 0x3FF)];
        v113 = (int **)((char *)v153[1] + 8 * ((*((_QWORD *)&v155 + 1) + (_QWORD)v155) >> 10));
        v114 = &(*v113)[(*((_QWORD *)&v155 + 1) + v155) & 0x3FF];
        if (v114 != v112)
        {
          v115 = ((4 * ((WORD4(v155) + (_WORD)v155) & 0x3FF)) >> 2) + (((char *)v113 - (char *)v111) << 7);
          v116 = (uint64_t)(4 * (v155 & 0x3FF)) >> 2;
          if (v115 != v116)
          {
            v117 = 63 - __clz(v115 - v116);
            goto LABEL_148;
          }
        }
      }
      v117 = 0;
LABEL_148:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(v111, v112, v113, v114, (uint64_t)&__p, 2 * v117, 1);
      v23 = *((_QWORD *)this + 2);
      v118 = *(unint64_t **)(v23 + 304);
      v119 = *(unint64_t **)(v23 + 312);
      if (v118 != v119)
      {
        v120 = *(_QWORD *)(v23 + 256);
        v121 = *(unint64_t **)(v23 + 304);
        do
        {
          v122 = *v121++;
          *(_QWORD *)(v120 + ((v122 >> 3) & 0x1FFFFFFFFFFFFFF8)) = 0;
        }
        while (v121 != v119);
      }
      *(_QWORD *)(v23 + 312) = v118;
    }
    while (*((_QWORD *)&v155 + 1));
  }
LABEL_154:
  v123 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v123 + 504))
    goto LABEL_192;
  v124 = *(unsigned int *)(*(_QWORD *)(v123 + 48) + 48);
  if ((int)v124 < 1)
  {
LABEL_191:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(v123 + 352, *(_DWORD *)(v123 + 352));
    goto LABEL_192;
  }
  v125 = 0;
  while (1)
  {
    v126 = *((_QWORD *)this + 2);
    v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v126 + 48) + 56) + 8 * v125 + 8);
    v128 = *(_DWORD *)(v127 + 60);
    if (v128 == 3)
      break;
    if (v128 == 20)
    {
      if ((operations_research::sat::CpModelPresolver::PresolveNoOverlap(this, (operations_research::sat::ConstraintProto *)v127) & 1) == 0)goto LABEL_158;
    }
    else if (v128 != 22
           || !operations_research::sat::CpModelPresolver::PresolveCumulative(this, (operations_research::sat::ConstraintProto *)v127))
    {
      goto LABEL_158;
    }
    operations_research::sat::PresolveContext::UpdateConstraintVariableUsage(*((char ***)this + 2), v125);
LABEL_158:
    if (++v125 == v124)
    {
      v123 = *((_QWORD *)this + 2);
      goto LABEL_191;
    }
  }
  operations_research::sat::DomainDeductions::ProcessClause((uint64_t *)(v126 + 328), *(int **)(*(_QWORD *)(v127 + 48) + 24), *(int *)(*(_QWORD *)(v127 + 48) + 16), (uint64_t *)&__p);
  v129 = (void **)__p;
  v130 = v151;
  if (__p == v151)
  {
LABEL_174:
    if (v129)
    {
      v134 = v151;
      v135 = v129;
      if (v151 != v129)
      {
        do
        {
          if ((*(_BYTE *)(v134 - 3) & 1) != 0)
            operator delete(*(v134 - 2));
          v134 -= 4;
        }
        while (v134 != v129);
        v135 = __p;
      }
      v151 = v129;
      operator delete(v135);
    }
    goto LABEL_158;
  }
  while (1)
  {
    v149 = 0;
    v132 = *(_DWORD *)v129;
    v131 = (const operations_research::Domain *)(v129 + 1);
    if ((operations_research::sat::PresolveContext::IntersectDomainWith(*((operations_research::sat::PresolveContext **)this + 2), (const char *)v132, v131, &v149) & 1) == 0)break;
    if (v149)
    {
      v133 = *((_QWORD *)this + 2);
      v147 = operator new(0x28uLL);
      v148 = xmmword_22DCE6590;
      strcpy((char *)v147, "deductions: reduced variable domain");
      operations_research::sat::PresolveContext::UpdateRuleStats(v133, (uint64_t)&v147);
      if (SHIBYTE(v148) < 0)
        operator delete(v147);
    }
    v129 = (void **)((char *)v131 + 24);
    if (v129 == v130)
    {
      v129 = (void **)__p;
      goto LABEL_174;
    }
  }
  v136 = (void **)__p;
  if (__p)
  {
    v137 = v151;
    v138 = __p;
    if (v151 != __p)
    {
      do
      {
        if ((*(_BYTE *)(v137 - 3) & 1) != 0)
          operator delete(*(v137 - 2));
        v137 -= 4;
      }
      while (v137 != v136);
      v138 = __p;
    }
    v151 = v136;
    operator delete(v138);
  }
LABEL_192:
  v139 = (void **)v153[1];
  v140 = (void **)v154;
  *((_QWORD *)&v155 + 1) = 0;
  v141 = v154 - (unint64_t)v153[1];
  if ((unint64_t)v154 - (unint64_t)v153[1] >= 0x11)
  {
    do
    {
      operator delete(*v139);
      v140 = (void **)v154;
      v139 = (void **)((char *)v153[1] + 8);
      v153[1] = v139;
      v141 = v154 - (_QWORD)v139;
    }
    while ((_QWORD)v154 - (_QWORD)v139 > 0x10uLL);
  }
  v142 = v141 >> 3;
  if (v142 == 1)
  {
    v143 = 512;
LABEL_198:
    *(_QWORD *)&v155 = v143;
  }
  else if (v142 == 2)
  {
    v143 = 1024;
    goto LABEL_198;
  }
  if (v139 != v140)
  {
    do
    {
      v144 = *v139++;
      operator delete(v144);
    }
    while (v139 != v140);
    if ((void *)v154 != v153[1])
      *(_QWORD *)&v154 = v154 + (((unint64_t)v153[1] - v154 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v153[0])
    operator delete(v153[0]);
  if (v156)
    operator delete(v156);
  if ((_QWORD)v161)
  {
    operator delete(v159);
    v159 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v162 = 0;
    *(_QWORD *)&v161 = 0;
    v160 = 0uLL;
  }
  if (*((_QWORD *)&v161 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v161 + 1));
}

void sub_22DAE20D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37)
{
  std::deque<int>::~deque[abi:ne180100]((uint64_t)&a27);
  if (__p)
    operator delete(__p);
  absl::lts_2020_02_25::flat_hash_set<std::pair<int,int>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::~flat_hash_set((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<int,operations_research::Domain>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if ((*(_BYTE *)(v3 - 3) & 1) != 0)
          operator delete(*(v3 - 2));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::LogInfoFromContext(operations_research::sat *this, const operations_research::sat::PresolveContext *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  const void **v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  char **v29;
  BOOL v30;
  _BYTE v31[16];
  char **v32;
  char *v33[2];

  google::LogMessage::LogMessage((google::LogMessage *)&v32, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4543);
  v3 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"- ", 2);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" affine relations were detected.", 32);
  google::LogMessage::~LogMessage((google::LogMessage *)&v32);
  google::LogMessage::LogMessage((google::LogMessage *)&v32, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4545);
  v5 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"- ", 2);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" variable equivalence relations were detected.", 46);
  google::LogMessage::~LogMessage((google::LogMessage *)&v32);
  v7 = (char *)*((_QWORD *)this + 9);
  v8 = (const void **)*((_QWORD *)this + 10);
  v9 = v7;
  if (*v7 <= -2)
  {
    do
    {
      v10 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v9 = (_QWORD *)((char *)v9 + v10);
      v8 += 4 * v10;
    }
    while (*(char *)v9 < -1);
  }
  v11 = &v7[*((_QWORD *)this + 12)];
  v33[0] = 0;
  v33[1] = 0;
  v32 = v33;
  if (v9 != (_QWORD *)v11)
  {
    do
    {
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>((uint64_t **)&v32, (uint64_t *)v33, v8, (uint64_t)v8);
      v12 = *((char *)v9 + 1);
      v9 = (_QWORD *)((char *)v9 + 1);
      v8 += 4;
      if (v12 <= -2)
      {
        do
        {
          v13 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v9 = (_QWORD *)((char *)v9 + v13);
          v8 += 4 * v13;
        }
        while (*(char *)v9 < -1);
      }
    }
    while (v9 != (_QWORD *)v11);
    v14 = (uint64_t *)v32;
    if (v32 != v33)
    {
      do
      {
        if (*((_DWORD *)v14 + 14) == 1)
        {
          google::LogMessage::LogMessage((google::LogMessage *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4551);
          v15 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v31);
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"- rule '", 8);
          v17 = *((char *)v14 + 55);
          if (v17 >= 0)
            v18 = (uint64_t)(v14 + 4);
          else
            v18 = v14[4];
          if (v17 >= 0)
            v19 = *((unsigned __int8 *)v14 + 55);
          else
            v19 = v14[5];
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' was applied 1 time.", 21);
        }
        else
        {
          google::LogMessage::LogMessage((google::LogMessage *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4553);
          v21 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v31);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"- rule '", 8);
          v23 = *((char *)v14 + 55);
          if (v23 >= 0)
            v24 = (uint64_t)(v14 + 4);
          else
            v24 = v14[4];
          if (v23 >= 0)
            v25 = *((unsigned __int8 *)v14 + 55);
          else
            v25 = v14[5];
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"' was applied ", 14);
          v27 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" times.", 7);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)v31);
        v28 = (char *)v14[1];
        if (v28)
        {
          do
          {
            v29 = (char **)v28;
            v28 = *(char **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (char **)v14[2];
            v30 = *v29 == (char *)v14;
            v14 = (uint64_t *)v29;
          }
          while (!v30);
        }
        v14 = (uint64_t *)v29;
      }
      while (v29 != v33);
    }
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v32, v33[0]);
}

void sub_22DAE2514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DAE2528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_22DAE253C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_22DAE255C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, char *a13)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a10);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::PresolveCpModel(unsigned __int8 *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  _BOOL8 v4;
  char *v6[3];
  void *__p;
  void *v8;

  operations_research::sat::CpModelPresolver::CpModelPresolver((uint64_t)v6, a1, a2, a3, a4);
  v4 = operations_research::sat::CpModelPresolver::Presolve(v6);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v4;
}

void sub_22DAE25D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::CpModelPresolver::Presolve(char **this)
{
  char *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  operations_research::sat::ConstraintProto *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const operations_research::sat::SatParameters *v27;
  __n128 v28;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v29;
  __n128 v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 v33;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v35;
  double v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 v39;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  operations_research::sat::ConstraintProto *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v50;
  uint64_t v51;
  absl::lts_2020_02_25 *v52;
  double v53;
  double v54;
  uint64_t v55;
  char *v56;
  const operations_research::sat::SatParameters *v57;
  __n128 v58;
  const operations_research::sat::PresolveContext *v59;
  _BOOL8 v60;
  const operations_research::sat::PresolveContext *v61;
  int *v62;
  int *v63;
  uint64_t v64;
  operations_research::sat::ConstraintProto *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const operations_research::sat::DecisionStrategyProto **v75;
  uint64_t v76;
  _UNKNOWN **v77;
  const operations_research::sat::DecisionStrategyProto *v78;
  int *v79;
  int *v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t i;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t j;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  operations_research::sat::PresolveContext *v97;
  uint64_t v98;
  int v99;
  _UNKNOWN **v100;
  _BOOL4 v101;
  _BOOL4 v102;
  uint64_t v103;
  int v104;
  int *v105;
  uint64_t v106;
  int v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t *size;
  uint64_t *v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  google::protobuf::Message *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _BYTE *v138;
  _DWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _OWORD *v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  int v148;
  const operations_research::sat::PresolveContext *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  int64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  google::protobuf::Arena *v159;
  _QWORD *v160;
  _QWORD *v161;
  std::string *v162;
  std::string::size_type v163;
  std::string::size_type v164;
  char v165;
  _QWORD *v166;
  _QWORD *v167;
  std::string *v168;
  std::string::size_type v169;
  const operations_research::sat::DecisionStrategyProto **v171;
  unsigned int *v172;
  const operations_research::sat::DecisionStrategyProto **v173;
  unsigned int *v174;
  std::string __p;
  void *v176;
  void *v177;
  char *v178;
  void *v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  void *v183;
  int *v184;
  char v185[8];
  _QWORD v186[73];
  char v187[8];
  _QWORD v188[73];
  _QWORD v189[6];
  _QWORD *v190;
  uint64_t v191;
  _QWORD v192[4];
  std::string v193;
  int *v194;
  uint64_t v195;

  v195 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = **this;
  v4 = this[2];
  v4[65] = v3;
  if (v2[402])
  {
    v5 = *((_QWORD *)v4 + 6);
    if (*(int *)(v5 + 48) >= 1)
    {
      v6 = 0;
      while (2)
      {
        v7 = *(operations_research::sat::ConstraintProto **)(*(_QWORD *)(v5 + 56) + 8 * v6 + 8);
        operations_research::sat::CpModelPresolver::PresolveEnforcementLiteral((operations_research::sat::CpModelPresolver *)this, v7);
        switch(*((_DWORD *)v7 + 15))
        {
          case 3:
            operations_research::sat::CpModelPresolver::PresolveBoolOr((operations_research::sat::CpModelPresolver *)this, v7);
            v4 = this[2];
            if (!v4[504])
              goto LABEL_11;
            break;
          case 4:
            operations_research::sat::CpModelPresolver::PresolveBoolAnd((operations_research::sat::CpModelPresolver *)this, (uint64_t **)v7);
            goto LABEL_10;
          case 0xC:
            operations_research::sat::CpModelPresolver::CanonicalizeLinear((operations_research::sat::CpModelPresolver *)this, v7);
            v4 = this[2];
            if (v4[504])
              break;
            goto LABEL_11;
          case 0x1A:
            operations_research::sat::CpModelPresolver::PresolveAtMostOne((operations_research::sat::CpModelPresolver *)this, v7);
            v4 = this[2];
            if (v4[504])
              break;
            goto LABEL_11;
          default:
LABEL_10:
            v4 = this[2];
            if (v4[504])
              break;
LABEL_11:
            ++v6;
            v5 = *((_QWORD *)v4 + 6);
            if (v6 >= *(int *)(v5 + 48))
              break;
            continue;
        }
        break;
      }
    }
    operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)v4);
    operations_research::sat::PresolveContext::RegisterVariablesUsedInAssumptions((unint64_t)this[2]);
    v9 = (uint64_t)this[2];
    if (*((int *)*this + 131) >= 1)
    {
      v10 = 0;
      while (1)
      {
        *((_BYTE *)&v193.__r_.__value_.__s + 23) = 19;
        strcpy((char *)&v193, "presolve: iteration");
        operations_research::sat::PresolveContext::UpdateRuleStats(v9, (uint64_t)&v193);
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v193.__r_.__value_.__l.__data_);
          v18 = this[2];
          v12 = *((_QWORD *)v18 + 15);
          v13 = *((_QWORD *)v18 + 6);
          v14 = *(unsigned int *)(v13 + 48);
          if ((int)v14 < 1)
          {
LABEL_21:
            v17 = 0;
            goto LABEL_33;
          }
        }
        else
        {
          v11 = this[2];
          v12 = *((_QWORD *)v11 + 15);
          v13 = *((_QWORD *)v11 + 6);
          v14 = *(unsigned int *)(v13 + 48);
          if ((int)v14 < 1)
            goto LABEL_21;
        }
        v15 = *(_QWORD *)(v13 + 56);
        if ((_DWORD)v14 == 1)
          break;
        v19 = 0;
        v20 = 0;
        v16 = v14 & 0xFFFFFFFE;
        v21 = v15 + 16;
        v22 = v16;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)(v21 - 8) + 60))
            ++v19;
          if (*(_DWORD *)(*(_QWORD *)v21 + 60))
            ++v20;
          v21 += 16;
          v22 -= 2;
        }
        while (v22);
        v17 = v20 + v19;
        if (v16 != v14)
          goto LABEL_29;
LABEL_33:
        operations_research::sat::CpModelPresolver::PresolveToFixPoint((operations_research::sat::CpModelPresolver *)this);
        v26 = *this;
        v27 = (const operations_research::sat::SatParameters *)(*this + 8);
        v185[0] = **this;
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v186, v27);
        v186[72] = *((_QWORD *)v26 + 73);
        operations_research::sat::ExpandCpModel(v185, (operations_research::sat::PresolveContext *)this[2], v28);
        operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v186);
        if (*((int *)*this + 109) <= 0)
          goto LABEL_49;
        v31 = *((_QWORD *)*this + 73);
        if (!v31)
          goto LABEL_48;
        v32 = *(unsigned __int8 **)(v31 + 120);
        if (!v32 || (v33 = atomic_load(v32), (v33 & 1) == 0))
        {
          v30.n128_f64[0] = fmax(*(double *)(v31 + 104) - *(double *)(v31 + 112), 0.0);
          if (v30.n128_f64[0] > 0.0)
          {
            CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v29);
            if (*(_QWORD *)(v31 + 24) <= CurrentTimeNanos - *(_QWORD *)(v31 + 8))
              v35 = CurrentTimeNanos - *(_QWORD *)(v31 + 8);
            else
              v35 = *(_QWORD *)(v31 + 24);
            operations_research::RunningMax<long long>::Add((int *)(v31 + 32), v35);
            *(_QWORD *)(v31 + 8) = CurrentTimeNanos;
            if (*(_QWORD *)(*(_QWORD *)(v31 + 40) + 8 * *(int *)(v31 + 68)) + CurrentTimeNanos >= *(_QWORD *)(v31 + 16))
            {
              if (!FLAGS_time_limit_use_usertime)
                goto LABEL_45;
              v36 = *(double *)(v31 + 96);
              if (*(_BYTE *)(v31 + 72))
              {
                v29 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v29);
                v30.n128_f64[0] = v36 + (double)(v29 - *(_QWORD *)(v31 + 80) + *(_QWORD *)(v31 + 88)) * -0.000000001;
                if (v30.n128_f64[0] <= 0.0001)
                  goto LABEL_45;
              }
              else
              {
                v30.n128_f64[0] = v36 + (double)*(uint64_t *)(v31 + 88) * -0.000000001;
                if (v30.n128_f64[0] <= 0.0001)
                {
LABEL_45:
                  *(_QWORD *)(v31 + 16) = 0;
                  goto LABEL_49;
                }
              }
              *(_QWORD *)(v31 + 16) = *(_QWORD *)(v31 + 8) + (uint64_t)(v30.n128_f64[0] * 1000000000.0);
            }
LABEL_48:
            operations_research::sat::CpModelPresolver::Probe((operations_research::sat::CpModelPresolver *)this);
            operations_research::sat::CpModelPresolver::PresolveToFixPoint((operations_research::sat::CpModelPresolver *)this);
          }
        }
LABEL_49:
        if (!(*this)[403])
          goto LABEL_65;
        v37 = *((_QWORD *)*this + 73);
        if (v37)
        {
          v38 = *(unsigned __int8 **)(v37 + 120);
          if (v38)
          {
            v39 = atomic_load(v38);
            if ((v39 & 1) != 0)
              goto LABEL_65;
          }
          v30.n128_f64[0] = fmax(*(double *)(v37 + 104) - *(double *)(v37 + 112), 0.0);
          if (v30.n128_f64[0] <= 0.0)
            goto LABEL_65;
          v40 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v29);
          v41 = *(_QWORD *)(v37 + 24) <= v40 - *(_QWORD *)(v37 + 8) ? v40 - *(_QWORD *)(v37 + 8) : *(_QWORD *)(v37 + 24);
          operations_research::RunningMax<long long>::Add((int *)(v37 + 32), v41);
          *(_QWORD *)(v37 + 8) = v40;
          if (*(_QWORD *)(*(_QWORD *)(v37 + 40) + 8 * *(int *)(v37 + 68)) + v40 >= *(_QWORD *)(v37 + 16))
          {
            if (!FLAGS_time_limit_use_usertime)
              goto LABEL_61;
            v42 = *(double *)(v37 + 96);
            if (*(_BYTE *)(v37 + 72))
            {
              v29 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v29);
              v30.n128_f64[0] = v42 + (double)(v29 - *(_QWORD *)(v37 + 80) + *(_QWORD *)(v37 + 88)) * -0.000000001;
              if (v30.n128_f64[0] <= 0.0001)
                goto LABEL_61;
            }
            else
            {
              v30.n128_f64[0] = v42 + (double)*(uint64_t *)(v37 + 88) * -0.000000001;
              if (v30.n128_f64[0] <= 0.0001)
              {
LABEL_61:
                *(_QWORD *)(v37 + 16) = 0;
                goto LABEL_65;
              }
            }
            *(_QWORD *)(v37 + 16) = *(_QWORD *)(v37 + 8) + (uint64_t)(v30.n128_f64[0] * 1000000000.0);
          }
        }
        operations_research::sat::CpModelPresolver::PresolvePureSatPart((operations_research::sat::CpModelPresolver *)this);
LABEL_65:
        if (!v10)
        {
          v29 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this[2];
          if (!*(_BYTE *)(v29 + 504))
          {
            v43 = *(unsigned int *)(*(_QWORD *)(v29 + 48) + 48);
            if ((int)v43 >= 1)
            {
              v44 = 0;
              v45 = 8 * v43;
              do
              {
                v46 = *(operations_research::sat::ConstraintProto **)(*(_QWORD *)(*((_QWORD *)this[2] + 6) + 56)
                                                                    + v44
                                                                    + 8);
                if (*((_DWORD *)v46 + 15) == 12)
                  operations_research::sat::CpModelPresolver::ExtractAtMostOneFromLinear((operations_research::sat::CpModelPresolver *)this, v46, v30);
                v44 += 8;
              }
              while (v45 != v44);
              v29 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this[2];
            }
            operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)v29);
          }
        }
        if (!v10)
          operations_research::sat::CpModelPresolver::TransformIntoMaxCliques((operations_research::sat::CpModelPresolver *)this);
        v47 = *((_QWORD *)*this + 73);
        if (v47)
        {
          v48 = *(unsigned __int8 **)(v47 + 120);
          if (v48)
          {
            v49 = atomic_load(v48);
            if ((v49 & 1) != 0)
              goto LABEL_91;
          }
          if (fmax(*(double *)(v47 + 104) - *(double *)(v47 + 112), 0.0) <= 0.0)
            goto LABEL_91;
          v50 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v29);
          v51 = *(_QWORD *)(v47 + 24) <= v50 - *(_QWORD *)(v47 + 8) ? v50 - *(_QWORD *)(v47 + 8) : *(_QWORD *)(v47 + 24);
          operations_research::RunningMax<long long>::Add((int *)(v47 + 32), v51);
          *(_QWORD *)(v47 + 8) = v50;
          if (*(_QWORD *)(*(_QWORD *)(v47 + 40) + 8 * *(int *)(v47 + 68)) + v50 >= *(_QWORD *)(v47 + 16))
          {
            if (!FLAGS_time_limit_use_usertime)
              goto LABEL_87;
            v53 = *(double *)(v47 + 96);
            if (*(_BYTE *)(v47 + 72))
            {
              v54 = v53
                  + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v52)
                           - *(_QWORD *)(v47 + 80)
                           + *(_QWORD *)(v47 + 88))
                  * -0.000000001;
              if (v54 <= 0.0001)
                goto LABEL_87;
            }
            else
            {
              v54 = v53 + (double)*(uint64_t *)(v47 + 88) * -0.000000001;
              if (v54 <= 0.0001)
              {
LABEL_87:
                *(_QWORD *)(v47 + 16) = 0;
                goto LABEL_91;
              }
            }
            *(_QWORD *)(v47 + 16) = *(_QWORD *)(v47 + 8) + (uint64_t)(v54 * 1000000000.0);
          }
        }
        operations_research::sat::CpModelPresolver::ProcessSetPPC((int64_t)this);
        operations_research::sat::CpModelPresolver::ExtractBoolAnd((operations_research::sat::CpModelPresolver *)this);
        operations_research::sat::CpModelPresolver::PresolveToFixPoint((operations_research::sat::CpModelPresolver *)this);
LABEL_91:
        v9 = (uint64_t)this[2];
        if ((double)(*(_DWORD *)(*(_QWORD *)(v9 + 48) + 24) + v17) * 0.8 <= (double)(*(_QWORD *)(v9 + 120) - v12)
          && ++v10 < *((_DWORD *)*this + 131))
        {
          continue;
        }
        goto LABEL_93;
      }
      v16 = 0;
      v17 = 0;
LABEL_29:
      v23 = (uint64_t *)(v15 + 8 * v16 + 8);
      v24 = v14 - v16;
      do
      {
        v25 = *v23++;
        if (*(_DWORD *)(v25 + 60))
          ++v17;
        --v24;
      }
      while (v24);
      goto LABEL_33;
    }
LABEL_93:
    if (*(_BYTE *)(v9 + 504))
    {
      v55 = *(_QWORD *)(v9 + 48);
      if ((_UNKNOWN *)v55 == &operations_research::sat::_CpModelProto_default_instance_)
        goto LABEL_102;
    }
    else
    {
      operations_research::sat::CpModelPresolver::MergeNoOverlapConstraints((operations_research::sat::CpModelPresolver *)this);
      v9 = (uint64_t)this[2];
      v55 = *(_QWORD *)(v9 + 48);
      if ((_UNKNOWN *)v55 == &operations_research::sat::_CpModelProto_default_instance_)
        goto LABEL_102;
    }
    if (*(_QWORD *)(v55 + 120) && !*(_BYTE *)(v9 + 504))
    {
      operations_research::sat::CpModelPresolver::ExpandObjective((operations_research::sat::CpModelPresolver *)this, v8);
      v9 = (uint64_t)this[2];
      if (*(_BYTE *)(v9 + 504))
      {
LABEL_104:
        operations_research::sat::FindDuplicateConstraints(*(operations_research::sat **)(v9 + 48), (char **)&v183);
        v62 = (int *)v183;
        v63 = v184;
        if (v183 != v184)
        {
          do
          {
            v64 = *v62;
            v65 = *(operations_research::sat::ConstraintProto **)(*(_QWORD *)(*((_QWORD *)this[2] + 6) + 56)
                                                                + 8 * v64
                                                                + 8);
            if (*((_DWORD *)v65 + 15) != 19)
            {
              operations_research::sat::ConstraintProto::Clear(v65);
              operations_research::sat::PresolveContext::UpdateConstraintVariableUsage((char **)this[2], v64);
              v66 = (uint64_t)this[2];
              v193.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
              *(_OWORD *)&v193.__r_.__value_.__r.__words[1] = xmmword_22DCE7550;
              strcpy(v193.__r_.__value_.__l.__data_, "removed duplicate constraints");
              operations_research::sat::PresolveContext::UpdateRuleStats(v66, (uint64_t)&v193);
              if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v193.__r_.__value_.__l.__data_);
            }
            ++v62;
          }
          while (v62 != v63);
        }
        v67 = this[2];
        if (v67[504])
        {
          if (**this)
          {
            operations_research::sat::LogInfoFromContext((operations_research::sat *)v67, v61);
            v67 = this[2];
          }
          operations_research::sat::CpModelProto::Clear(*((operations_research::sat::CpModelProto **)v67 + 6));
          v68 = *((_QWORD *)this[2] + 6);
          v69 = *(int **)(v68 + 56);
          if (v69)
          {
            v70 = *(int *)(v68 + 48);
            v71 = *v69;
            if ((int)v70 < *v69)
            {
              *(_DWORD *)(v68 + 48) = v70 + 1;
              v72 = *(_QWORD *)&v69[2 * v70 + 2];
              if (*(_DWORD *)(v72 + 60) == 3)
                goto LABEL_223;
              goto LABEL_220;
            }
            if (v71 != *(_DWORD *)(v68 + 52))
            {
LABEL_219:
              *v69 = v71 + 1;
              v72 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::ConstraintProto>(*(google::protobuf::Arena **)(v68 + 40));
              v156 = *(_QWORD *)(v68 + 56);
              v157 = *(int *)(v68 + 48);
              *(_DWORD *)(v68 + 48) = v157 + 1;
              *(_QWORD *)(v156 + 8 * v157 + 8) = v72;
              if (*(_DWORD *)(v72 + 60) == 3)
              {
LABEL_223:
                v60 = 1;
LABEL_258:
                if (v183)
                {
                  v184 = (int *)v183;
                  operator delete(v183);
                }
                return v60;
              }
LABEL_220:
              operations_research::sat::ConstraintProto::clear_constraint(v72);
              *(_DWORD *)(v72 + 60) = 3;
              v158 = *(_QWORD *)(v72 + 8);
              v159 = (google::protobuf::Arena *)(v158 & 0xFFFFFFFFFFFFFFFELL);
              if ((v158 & 1) != 0)
                v159 = *(google::protobuf::Arena **)v159;
              *(_QWORD *)(v72 + 48) = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::BoolArgumentProto>(v159);
              goto LABEL_223;
            }
          }
          else
          {
            v71 = *(_DWORD *)(v68 + 52);
          }
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v68 + 40), v71 + 1);
          v69 = *(int **)(v68 + 56);
          v71 = *v69;
          goto LABEL_219;
        }
        v179 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        v180 = 0u;
        v181 = 0u;
        v182 = 0;
        v73 = *((_QWORD *)v67 + 6);
        v74 = *(_QWORD *)(v73 + 80);
        v75 = (const operations_research::sat::DecisionStrategyProto **)(v74 + 8);
        if (!v74)
          v75 = 0;
        v76 = *(int *)(v73 + 72);
        if ((_DWORD)v76)
        {
          v171 = &v75[v76];
          v77 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
          do
          {
            v173 = v75;
            v78 = *v75;
            operations_research::sat::DecisionStrategyProto::DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)&v193, *v75);
            *((_DWORD *)v78 + 4) = 0;
            v174 = (unsigned int *)((char *)v78 + 16);
            if (LODWORD(v193.__r_.__value_.__r.__words[2]))
            {
              v79 = v194;
              v80 = &v194[SLODWORD(v193.__r_.__value_.__r.__words[2])];
              v172 = (unsigned int *)((char *)v78 + 40);
              do
              {
                v81 = *v79;
                if (~*v79 <= *v79)
                  v82 = v81;
                else
                  v82 = ~v81;
                if (!operations_research::sat::PresolveContext::IsFixed((operations_research::sat::PresolveContext *)this[2], (const char *)v82))
                {
                  v83 = 0;
                  v84 = ((((unint64_t)v77 + (int)v82) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)v77 + (int)v82));
                  v85 = (v84 >> 7) ^ ((unint64_t)v179 >> 12);
                  v86 = 0x101010101010101 * (v84 & 0x7F);
                  for (i = v85; ; i = v83 + v88)
                  {
                    v88 = i & v181;
                    v89 = *(_QWORD *)((char *)v179 + v88);
                    v90 = ((v89 ^ v86) - 0x101010101010101) & ~(v89 ^ v86) & 0x8080808080808080;
                    if (v90)
                      break;
LABEL_134:
                    if ((v89 & (~v89 << 6) & 0x8080808080808080) != 0)
                      goto LABEL_137;
                    v83 += 8;
                  }
                  while (1)
                  {
                    v91 = (v88 + (__clz(__rbit64(v90)) >> 3)) & v181;
                    if (*(_DWORD *)(v180 + 4 * v91) == (_DWORD)v82)
                      break;
                    v90 &= v90 - 1;
                    if (!v90)
                      goto LABEL_134;
                  }
                  if (v91 == (_QWORD)v181)
                  {
LABEL_137:
                    for (j = 0; ; v85 = j + v93)
                    {
                      v93 = v85 & v181;
                      v94 = *(_QWORD *)((char *)v179 + v93);
                      v95 = ((v94 ^ v86) - 0x101010101010101) & ~(v94 ^ v86) & 0x8080808080808080;
                      if (v95)
                        break;
LABEL_141:
                      if ((v94 & (~v94 << 6) & 0x8080808080808080) != 0)
                      {
                        v96 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&v179, v84);
                        *(_DWORD *)(v180 + 4 * v96) = v82;
                        goto LABEL_144;
                      }
                      j += 8;
                    }
                    while (*(_DWORD *)(v180 + 4 * ((v93 + (__clz(__rbit64(v95)) >> 3)) & v181)) != (_DWORD)v82)
                    {
                      v95 &= v95 - 1;
                      if (!v95)
                        goto LABEL_141;
                    }
LABEL_144:
                    v97 = (operations_research::sat::PresolveContext *)this[2];
                    if (*(_QWORD *)(*((_QWORD *)v97 + 85) + 48 * (int)v82 + 16))
                    {
                      v98 = *((unsigned int *)v78 + 4);
                      if ((_DWORD)v98 == *((_DWORD *)v78 + 5))
                        google::protobuf::RepeatedField<int>::Reserve(v174, v98 + 1);
                      *(_DWORD *)(*((_QWORD *)v78 + 3) + 4 * v98) = v81;
                      *((_DWORD *)v78 + 4) = v98 + 1;
                      goto LABEL_125;
                    }
                    operations_research::sat::PresolveContext::GetAffineRelation(v97, v82, (uint64_t)&v190);
                    v99 = (int)v190;
                    if (*(_QWORD *)(*((_QWORD *)this[2] + 85) + 48 * (int)v190 + 16))
                    {
                      v100 = v77;
                      v101 = v191 > 0;
                      v102 = v81 >= 0;
                      v103 = *((unsigned int *)v78 + 4);
                      if ((_DWORD)v103 == *((_DWORD *)v78 + 5))
                        google::protobuf::RepeatedField<int>::Reserve(v174, v103 + 1);
                      v104 = v99 ^ ((v102 ^ v101) << 31 >> 31);
                      *(_DWORD *)(*((_QWORD *)v78 + 3) + 4 * v103) = v104;
                      *((_DWORD *)v78 + 4) = v103 + 1;
                      v77 = v100;
                      if (*((_DWORD *)v78 + 16))
                      {
                        v105 = (int *)*((_QWORD *)v78 + 7);
                        if (v105)
                        {
                          v106 = *((int *)v78 + 12);
                          v107 = *v105;
                          if ((int)v106 < *v105)
                          {
                            *((_DWORD *)v78 + 12) = v106 + 1;
                            v108 = *(_QWORD **)&v105[2 * v106 + 2];
LABEL_158:
                            *((_DWORD *)v108 + 8) = v104;
                            v111 = v191;
                            if (v191 < 0)
                              v111 = -v191;
                            v108[2] = v192[0];
                            v108[3] = v111;
                            goto LABEL_125;
                          }
                          if (v107 == *((_DWORD *)v78 + 13))
                          {
LABEL_156:
                            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v172, v107 + 1);
                            v105 = (int *)*((_QWORD *)v78 + 7);
                            v107 = *v105;
                          }
                          *v105 = v107 + 1;
                          v108 = google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(*(google::protobuf::Arena **)v172);
                          v109 = *((_QWORD *)v78 + 7);
                          v110 = *((int *)v78 + 12);
                          *((_DWORD *)v78 + 12) = v110 + 1;
                          *(_QWORD *)(v109 + 8 * v110 + 8) = v108;
                          goto LABEL_158;
                        }
                        v107 = *((_DWORD *)v78 + 13);
                        goto LABEL_156;
                      }
                    }
                  }
                }
LABEL_125:
                ++v79;
              }
              while (v79 != v80);
            }
            operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)&v193);
            v75 = v173 + 1;
          }
          while (v173 + 1 != v171);
          v67 = this[2];
          v73 = *((_QWORD *)v67 + 6);
        }
        if (*(int *)(v73 + 24) >= 1)
        {
          v112 = 0;
          do
          {
            operations_research::sat::PresolveContext::DomainOf((operations_research::sat::PresolveContext *)v67, v112, (unint64_t *)&v193);
            v113 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[2] + 6) + 32) + 8 * (_QWORD)v112 + 8);
            *(_DWORD *)(v113 + 16) = 0;
            v114 = (unsigned int *)(v113 + 16);
            google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v113 + 16), v193.__r_.__value_.__r.__words[0] >> 1);
            v115 = v193.__r_.__value_.__s.__data_[0] & 1;
            if ((v193.__r_.__value_.__s.__data_[0] & 1) != 0)
              size = (uint64_t *)v193.__r_.__value_.__l.__size_;
            else
              size = (uint64_t *)&v193.__r_.__value_.__l.__size_;
            if (v193.__r_.__value_.__r.__words[0] >= 2)
            {
              v117 = &size[2 * (v193.__r_.__value_.__r.__words[0] >> 1)];
              v118 = *(_DWORD *)(v113 + 16);
              do
              {
                v119 = *size;
                v120 = *(_DWORD *)(v113 + 20);
                v121 = v118 + 1;
                if (v118 == v120)
                {
                  google::protobuf::RepeatedField<long long>::Reserve(v114, v118 + 1);
                  v120 = *(_DWORD *)(v113 + 20);
                }
                v122 = *(_QWORD *)(v113 + 24);
                *(_QWORD *)(v122 + 8 * v118) = v119;
                *(_DWORD *)(v113 + 16) = v121;
                v123 = size[1];
                v118 += 2;
                if (v121 == v120)
                {
                  google::protobuf::RepeatedField<long long>::Reserve(v114, v118);
                  v122 = *(_QWORD *)(v113 + 24);
                }
                *(_QWORD *)(v122 + 8 * v121) = v123;
                *v114 = v118;
                size += 2;
              }
              while (size != v117);
              v115 = v193.__r_.__value_.__s.__data_[0] & 1;
            }
            if (v115)
              operator delete((void *)v193.__r_.__value_.__l.__size_);
            ++v112;
            v67 = this[2];
            v73 = *((_QWORD *)v67 + 6);
          }
          while ((uint64_t)v112 < *(int *)(v73 + 24));
        }
        google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(*((_QWORD *)v67 + 7) + 16, v73 + 16);
        *((_QWORD *)this[1] + 1) = *(_QWORD *)this[1];
        v125 = this[2];
        v126 = *(int *)(*((_QWORD *)v125 + 6) + 24);
        v177 = 0;
        v178 = 0;
        v176 = 0;
        if ((_DWORD)v126)
        {
          if ((v126 & 0x80000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v176 = operator new(4 * v126);
          v178 = (char *)v176 + 4 * v126;
          memset(v176, 255, 4 * v126);
          v177 = v178;
          if (*(int *)(*((_QWORD *)v125 + 6) + 24) >= 1)
          {
            v127 = 0;
            while (1)
            {
              if (operations_research::sat::PresolveContext::VariableIsNotUsedAnymore((operations_research::sat::PresolveContext *)v125, v127))
              {
                v125 = this[2];
                if (!v125[64])
                  goto LABEL_185;
              }
              v129 = this[1];
              v130 = *(char **)v129;
              v131 = (char *)*((_QWORD *)v129 + 1);
              v132 = (uint64_t)&v131[-*(_QWORD *)v129];
              v133 = v132 >> 2;
              *((_DWORD *)v176 + v127) = v132 >> 2;
              v134 = *((_QWORD *)v129 + 2);
              if ((unint64_t)v131 >= v134)
                break;
              *(_DWORD *)v131 = v127;
              v128 = (uint64_t)(v131 + 4);
LABEL_184:
              *((_QWORD *)v129 + 1) = v128;
              v125 = this[2];
LABEL_185:
              if (++v127 >= *(int *)(*((_QWORD *)v125 + 6) + 24))
                goto LABEL_208;
            }
            v135 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v136 = v134 - (_QWORD)v130;
            if (v136 >> 1 > v135)
              v135 = v136 >> 1;
            if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
              v137 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v137 = v135;
            if (v137)
            {
              if (v137 >> 62)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v138 = operator new(4 * v137);
              v139 = &v138[4 * v133];
              *v139 = v127;
              v128 = (uint64_t)(v139 + 1);
              if (v131 == v130)
                goto LABEL_206;
            }
            else
            {
              v138 = 0;
              v139 = (_DWORD *)(4 * v133);
              *(_DWORD *)(4 * v133) = v127;
              v128 = 4 * v133 + 4;
              if (v131 == v130)
              {
LABEL_206:
                *(_QWORD *)v129 = v139;
                *((_QWORD *)v129 + 1) = v128;
                *((_QWORD *)v129 + 2) = &v138[4 * v137];
                if (v130)
                  operator delete(v130);
                goto LABEL_184;
              }
            }
            v140 = v131 - 4 - v130;
            if (v140 < 0x2C)
              goto LABEL_266;
            if (v131 - v138 - (v132 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
              goto LABEL_266;
            v141 = (v140 >> 2) + 1;
            v142 = 4 * (v141 & 0x7FFFFFFFFFFFFFF8);
            v143 = &v131[-v142];
            v139 = (_DWORD *)((char *)v139 - v142);
            v144 = &v138[4 * v133 - 16];
            v145 = v131 - 16;
            v146 = v141 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v147 = *(_OWORD *)v145;
              *(v144 - 1) = *((_OWORD *)v145 - 1);
              *v144 = v147;
              v144 -= 2;
              v145 -= 32;
              v146 -= 8;
            }
            while (v146);
            v131 = v143;
            if (v141 != (v141 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_266:
              do
              {
                v148 = *((_DWORD *)v131 - 1);
                v131 -= 4;
                *--v139 = v148;
              }
              while (v131 != v130);
            }
            goto LABEL_206;
          }
        }
LABEL_208:
        operations_research::sat::ApplyVariableMapping((uint64_t *)&v176, (operations_research::sat::PresolveContext *)v125, v124);
        operations_research::sat::CpModelPresolver::RemoveEmptyConstraints((operations_research::sat::CpModelPresolver *)this);
        v151 = (uint64_t)this[2];
        v152 = *(unsigned int *)(v151 + 472);
        if ((int)v152 >= 1)
        {
          v193.__r_.__value_.__r.__words[0] = (std::string::size_type)"deductions: ";
          v193.__r_.__value_.__l.__size_ = 12;
          v153 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v152, v192, v150);
          v190 = v192;
          v191 = v153 - (_BYTE *)v192;
          v189[0] = " stored";
          v189[1] = 7;
          absl::lts_2020_02_25::StrCat((uint64_t)&v193, (uint64_t)&v190, (uint64_t)v189, &__p);
          operations_research::sat::PresolveContext::UpdateRuleStats(v151, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v151 = (uint64_t)this[2];
        }
        if (**this)
        {
          operations_research::sat::LogInfoFromContext((operations_research::sat *)v151, v149);
          v151 = (uint64_t)this[2];
        }
        operations_research::sat::ValidateCpModel(*(operations_research::sat **)(v151 + 48), (int64_t)v150, &v193);
        v155 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
        {
          if (!v193.__r_.__value_.__l.__size_)
          {
            operator delete(v193.__r_.__value_.__l.__data_);
LABEL_239:
            operations_research::sat::ValidateCpModel(*((operations_research::sat **)this[2] + 7), v154, &v193);
            v164 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
            v165 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
            if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v164 = v193.__r_.__value_.__l.__size_;
            v60 = v164 == 0;
            if (v164 && **this)
            {
              google::LogMessage::LogMessage((google::LogMessage *)&v190, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4890);
              v166 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v190);
              v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"Error while validating mapping_model model: ", 44);
              if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v168 = &v193;
              else
                v168 = (std::string *)v193.__r_.__value_.__r.__words[0];
              if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v169 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
              else
                v169 = v193.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)v168, v169);
              google::LogMessage::~LogMessage((google::LogMessage *)&v190);
              v165 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
            }
            if (v165 < 0)
              operator delete(v193.__r_.__value_.__l.__data_);
LABEL_252:
            if (v176)
            {
              v177 = v176;
              operator delete(v176);
            }
            if ((_QWORD)v181)
            {
              operator delete(v179);
              v179 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              v182 = 0;
              *(_QWORD *)&v181 = 0;
              v180 = 0uLL;
            }
            if (*((_QWORD *)&v181 + 1))
              absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v181 + 1));
            goto LABEL_258;
          }
        }
        else if (!*((_BYTE *)&v193.__r_.__value_.__s + 23))
        {
          goto LABEL_239;
        }
        if (**this)
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v190, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4881);
          v160 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v190);
          v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"Error while validating postsolved model: ", 41);
          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v162 = &v193;
          else
            v162 = (std::string *)v193.__r_.__value_.__r.__words[0];
          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v163 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
          else
            v163 = v193.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)v162, v163);
          google::LogMessage::~LogMessage((google::LogMessage *)&v190);
          v155 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
        }
        if (v155 < 0)
          operator delete(v193.__r_.__value_.__l.__data_);
        v60 = 0;
        goto LABEL_252;
      }
LABEL_103:
      operations_research::sat::CpModelPresolver::EncodeAllAffineRelations((operations_research::sat::CpModelPresolver *)this);
      v9 = (uint64_t)this[2];
      goto LABEL_104;
    }
LABEL_102:
    if (*(_BYTE *)(v9 + 504))
      goto LABEL_104;
    goto LABEL_103;
  }
  operations_research::sat::PresolveContext::UpdateNewConstraintsVariableUsage((operations_research::sat::PresolveContext *)v4);
  v56 = *this;
  v57 = (const operations_research::sat::SatParameters *)(*this + 8);
  v187[0] = **this;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v188, v57);
  v188[72] = *((_QWORD *)v56 + 73);
  operations_research::sat::ExpandCpModel(v187, (operations_research::sat::PresolveContext *)this[2], v58);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v188);
  if (**this)
    operations_research::sat::LogInfoFromContext((operations_research::sat *)this[2], v59);
  return 1;
}

void sub_22DAE385C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::CpModelPresolver::CpModelPresolver(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  const operations_research::sat::DecisionStrategyProto **v10;
  uint64_t v11;
  uint64_t v12;
  const operations_research::sat::DecisionStrategyProto *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  operations_research::sat::DecisionStrategyProto *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  unint64_t v22;
  uint64_t v23;
  void *__p;
  char v26;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (a2[137] | a2[138])
    v6 = 1;
  else
    v6 = a2[402] == 0;
  v7 = v6;
  *(_BYTE *)(a3 + 64) = v7;
  v8 = *(_QWORD *)(a3 + 48);
  v9 = *(_QWORD *)(v8 + 80);
  if (v9)
    v10 = (const operations_research::sat::DecisionStrategyProto **)(v9 + 8);
  else
    v10 = 0;
  v11 = *(int *)(v8 + 72);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11;
    while (1)
    {
      v13 = *v10;
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
      v15 = *(int **)(v14 + 80);
      if (!v15)
        break;
      v16 = *(int *)(v14 + 72);
      v17 = *v15;
      if ((int)v16 >= *v15)
      {
        if (v17 == *(_DWORD *)(v14 + 76))
        {
LABEL_17:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v14 + 64), v17 + 1);
          v15 = *(int **)(v14 + 80);
          v17 = *v15;
        }
        *v15 = v17 + 1;
        v18 = (operations_research::sat::DecisionStrategyProto *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto>(*(google::protobuf::Arena **)(v14 + 64));
        v19 = *(_QWORD *)(v14 + 80);
        v20 = *(int *)(v14 + 72);
        *(_DWORD *)(v14 + 72) = v20 + 1;
        *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
        goto LABEL_19;
      }
      *(_DWORD *)(v14 + 72) = v16 + 1;
      v18 = *(operations_research::sat::DecisionStrategyProto **)&v15[2 * v16 + 2];
LABEL_19:
      operations_research::sat::DecisionStrategyProto::CopyFrom(v18, v13);
      ++v10;
      v12 -= 8;
      if (!v12)
      {
        a3 = *(_QWORD *)(a1 + 16);
        goto LABEL_21;
      }
    }
    v17 = *(_DWORD *)(v14 + 76);
    goto LABEL_17;
  }
LABEL_21:
  operations_research::sat::PresolveContext::InitializeNewDomains((operations_research::sat::PresolveContext *)a3, a5);
  operations_research::sat::PresolveContext::ReadObjectiveFromProto(*(operations_research::sat::PresolveContext **)(a1 + 16), v21);
  if (!operations_research::sat::PresolveContext::CanonicalizeObjective(*(operations_research::sat::PresolveContext **)(a1 + 16), v22))
  {
    v23 = *(_QWORD *)(a1 + 16);
    v26 = 0;
    LOBYTE(__p) = 0;
    operations_research::sat::PresolveContext::NotifyThatModelIsUnsat(v23, (uint64_t)&__p);
    if (v26 < 0)
      operator delete(__p);
  }
  return a1;
}

void sub_22DAE3B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void *v18;

  if (a15 < 0)
  {
    operator delete(__p);
    v18 = *v16;
    if (!*v16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = *v16;
    if (!*v16)
      goto LABEL_3;
  }
  *(_QWORD *)(v15 + 32) = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

unint64_t operations_research::sat::PresolveContext::RegisterVariablesUsedInAssumptions(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int *v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(this + 48);
  v2 = *(int *)(v1 + 88);
  if ((_DWORD)v2)
  {
    v3 = this;
    v4 = *(int **)(v1 + 96);
    v5 = &v4[v2];
    v6 = ((((unint64_t)&off_24F97F560 + 5) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 5));
    do
    {
      v10 = 0;
      v12 = *v4;
      if (~*v4 > *v4)
        v12 = ~v12;
      v13 = (_QWORD *)(*(_QWORD *)(v3 + 680) + 48 * v12);
      v11 = (v6 >> 7) ^ (*v13 >> 12);
      v14 = v13[3];
      while (1)
      {
        v7 = v11 & v14;
        v8 = *(_QWORD *)(*v13 + v7);
        v9 = ((v8 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v8 ^ (0x101010101010101
                                                                                        * (v6 & 0x7F))) & 0x8080808080808080;
        if (v9)
          break;
LABEL_6:
        if ((v8 & (~v8 << 6) & 0x8080808080808080) != 0)
        {
          this = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(*(_QWORD *)(v3 + 680) + 48 * v12), ((((unint64_t)&off_24F97F560 + 5) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)&off_24F97F560 + 5)));
          *(_DWORD *)(v13[1] + 4 * this) = -3;
          goto LABEL_9;
        }
        v10 += 8;
        v11 = v10 + v7;
      }
      while (*(_DWORD *)(v13[1] + 4 * ((v7 + (__clz(__rbit64(v9)) >> 3)) & v14)) != -3)
      {
        v9 &= v9 - 1;
        if (!v9)
          goto LABEL_6;
      }
LABEL_9:
      ++v4;
    }
    while (v4 != v5);
  }
  return this;
}

void operations_research::sat::FindDuplicateConstraints(operations_research::sat *this@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  char **v5;
  char *v6;
  uint64_t v7;
  _UNKNOWN **v8;
  uint64_t v9;
  google::protobuf::MessageLite *v10;
  uint64_t *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  int v24;
  void **v25;
  uint64_t v26;
  void **v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v33;
  _BOOL4 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _UNKNOWN **v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  char *v56;
  char *v57;
  void *v58[2];
  int64_t v59;
  void *__p[2];
  uint64_t v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v62 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v63 = 0u;
  v64 = 0u;
  v65 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v61 = 0;
  v3 = *((unsigned int *)this + 12);
  if ((int)v3 < 1)
    goto LABEL_77;
  v5 = a2;
  v6 = 0;
  v56 = 0;
  v57 = 0;
  v7 = 0;
  v8 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
  do
  {
    v10 = *(google::protobuf::MessageLite **)(*((_QWORD *)this + 7) + 8 * v7 + 8);
    if (!*((_DWORD *)v10 + 15))
      goto LABEL_5;
    google::protobuf::MessageLite::SerializeAsString(v10, (uint64_t)v58);
    if (SHIBYTE(v61) < 0)
      operator delete(__p[0]);
    v61 = v59;
    *(_OWORD *)__p = *(_OWORD *)v58;
    if (v59 >= 0)
      v11 = (uint64_t *)__p;
    else
      v11 = (uint64_t *)v58[0];
    if (v59 >= 0)
      v12 = (void *)HIBYTE(v59);
    else
      v12 = v58[1];
    v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v58, v11, (unint64_t)v12);
    v14 = v13;
    v15 = 0;
    v16 = ((((unint64_t)v8 + v13) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                            * ((_QWORD)v8 + v13));
    for (i = (v16 >> 7) ^ ((unint64_t)v62 >> 12); ; i = v15 + v18)
    {
      v18 = i & v64;
      v19 = *(_QWORD *)((char *)v62 + v18);
      v20 = ((v19 ^ (0x101010101010101 * (v16 & 0x7F))) - 0x101010101010101) & ~(v19 ^ (0x101010101010101
                                                                                          * (v16 & 0x7F))) & 0x8080808080808080;
      if (v20)
        break;
LABEL_19:
      if ((v19 & (~v19 << 6) & 0x8080808080808080) != 0)
      {
        v35 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::prepare_insert((uint64_t *)&v62, v16);
        v36 = v63 + 16 * v35;
        *(_QWORD *)v36 = v14;
        *(_DWORD *)(v36 + 8) = v7;
        goto LABEL_5;
      }
      v15 += 8;
    }
    while (1)
    {
      v21 = (v18 + (__clz(__rbit64(v20)) >> 3)) & v64;
      if (*(_QWORD *)(v63 + 16 * v21) == v13)
        break;
      v20 &= v20 - 1;
      if (!v20)
        goto LABEL_19;
    }
    google::protobuf::MessageLite::SerializeAsString(*(google::protobuf::MessageLite **)(*((_QWORD *)this + 7) + 8 * *(int *)(v63 + 16 * v21 + 8) + 8), (uint64_t)v58);
    if (v61 >= 0)
      v22 = (void *)HIBYTE(v61);
    else
      v22 = __p[1];
    v23 = (void *)HIBYTE(v59);
    v24 = SHIBYTE(v59);
    if (v59 < 0)
      v23 = v58[1];
    if (v22 != v23)
    {
      v34 = 0;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_47;
    }
    if (v59 >= 0)
      v25 = v58;
    else
      v25 = (void **)v58[0];
    if (v61 < 0)
    {
      v34 = memcmp(__p[0], v25, (size_t)__p[1]) == 0;
      goto LABEL_43;
    }
    if (HIBYTE(v61))
    {
      v26 = HIBYTE(v61) - 1;
      v27 = __p;
      do
      {
        v29 = *(unsigned __int8 *)v27;
        v27 = (void **)((char *)v27 + 1);
        v28 = v29;
        v31 = *(unsigned __int8 *)v25;
        v25 = (void **)((char *)v25 + 1);
        v30 = v31;
        v33 = v26-- != 0;
        v34 = v28 == v30;
      }
      while (v28 == v30 && v33);
LABEL_43:
      if ((v24 & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_47;
    }
    v34 = 1;
    if ((SHIBYTE(v59) & 0x80000000) == 0)
    {
LABEL_44:
      if (v34)
        goto LABEL_48;
      goto LABEL_5;
    }
LABEL_47:
    operator delete(v58[0]);
    if (v34)
    {
LABEL_48:
      if (v57 >= v56)
      {
        v37 = v3;
        v38 = v8;
        v39 = v57 - v6;
        v40 = (v57 - v6) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v56 - v6) >> 1 > v41)
          v41 = (v56 - v6) >> 1;
        if ((unint64_t)(v56 - v6) >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          if (v42 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v43 = (char *)operator new(4 * v42);
          v44 = &v43[4 * v40];
          *(_DWORD *)v44 = v7;
          v9 = (uint64_t)(v44 + 4);
          v45 = v57;
          if (v57 != v6)
          {
LABEL_58:
            v46 = v45 - 4 - v6;
            if (v46 < 0xBC)
            {
              v47 = v45;
              goto LABEL_66;
            }
            if (&v43[v39 - 4 - (v46 & 0xFFFFFFFFFFFFFFFCLL)] <= &v43[v39 - 4]
              && &v45[-(v46 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v45 - 4
              && (unint64_t)(v45 - &v43[v39]) >= 0x20)
            {
              v49 = (v46 >> 2) + 1;
              v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
              v47 = &v57[-v50];
              v44 -= v50;
              v51 = &v43[4 * v40 - 16];
              v52 = v57 - 16;
              v53 = v49 & 0x7FFFFFFFFFFFFFF8;
              v8 = v38;
              do
              {
                v54 = *(_OWORD *)v52;
                *((_OWORD *)v51 - 1) = *((_OWORD *)v52 - 1);
                *(_OWORD *)v51 = v54;
                v51 -= 32;
                v52 -= 32;
                v53 -= 8;
              }
              while (v53);
              v5 = a2;
              v3 = v37;
              if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_67;
            }
            else
            {
              v47 = v57;
LABEL_66:
              v5 = a2;
              v8 = v38;
              v3 = v37;
              do
              {
LABEL_67:
                v48 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *((_DWORD *)v44 - 1) = v48;
                v44 -= 4;
              }
              while (v47 != v6);
            }
LABEL_68:
            *v5 = v44;
            v5[1] = (char *)v9;
            v56 = &v43[4 * v42];
            v5[2] = v56;
            if (v6)
              operator delete(v6);
            v6 = v44;
LABEL_4:
            v5[1] = (char *)v9;
            v57 = (char *)v9;
            goto LABEL_5;
          }
        }
        else
        {
          v43 = 0;
          v44 = (char *)(4 * v40);
          *(_DWORD *)(4 * v40) = v7;
          v9 = 4 * v40 + 4;
          v45 = v57;
          if (v57 != v6)
            goto LABEL_58;
        }
        v5 = a2;
        v8 = v38;
        v3 = v37;
        goto LABEL_68;
      }
      *(_DWORD *)v57 = v7;
      v9 = (uint64_t)(v57 + 4);
      goto LABEL_4;
    }
LABEL_5:
    ++v7;
  }
  while (v7 != v3);
  if (SHIBYTE(v61) < 0)
    operator delete(__p[0]);
LABEL_77:
  if ((_QWORD)v64)
  {
    operator delete(v62);
    v62 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v65 = 0;
    *(_QWORD *)&v64 = 0;
    v63 = 0uLL;
  }
  if (*((_QWORD *)&v64 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v64 + 1));
}

void sub_22DAE419C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  void *v23;

  if (a20 < 0)
  {
    operator delete(__p);
    absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~flat_hash_map((uint64_t)&a22);
    v23 = *(void **)a9;
    if (!*(_QWORD *)a9)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    absl::lts_2020_02_25::flat_hash_map<long long,int,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::~flat_hash_map((uint64_t)&a22);
    v23 = *(void **)a9;
    if (!*(_QWORD *)a9)
      goto LABEL_3;
  }
  *(_QWORD *)(a9 + 8) = v23;
  operator delete(v23);
  _Unwind_Resume(a1);
}

void operations_research::sat::ApplyVariableMapping(uint64_t *a1, operations_research::sat::PresolveContext *a2, google::protobuf::Message *a3)
{
  uint64_t v4;
  uint64_t v5;
  operations_research::sat::ConstraintProto **v6;
  uint64_t v7;
  uint64_t i;
  uint64_t (***v9)();
  uint64_t v10;
  operations_research::sat::ConstraintProto *v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  const operations_research::sat::DecisionStrategyProto **v28;
  uint64_t v29;
  const operations_research::sat::DecisionStrategyProto *v30;
  unsigned int v31;
  int *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  operations_research::sat::DecisionStrategyProto_AffineTransformation **v38;
  uint64_t v39;
  uint64_t v40;
  const operations_research::sat::DecisionStrategyProto_AffineTransformation *v41;
  int v42;
  int v43;
  int v44;
  int *v45;
  uint64_t v46;
  int v47;
  operations_research::sat::DecisionStrategyProto_AffineTransformation *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t j;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  char *v66;
  google::protobuf::internal *v67;
  google::protobuf::Message *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  operations_research::sat::PartialVariableAssignment *v76;
  uint64_t v77;
  operations_research::sat::IntegerVariableProto **v78;
  google::protobuf::Message *v79;
  google::protobuf::Message *v80;
  int *v81;
  uint64_t v82;
  int v83;
  google::protobuf::internal *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  char *v96;
  char *v97;
  void *v98;
  uint64_t v100;
  const operations_research::sat::DecisionStrategyProto **v101;
  uint64_t *v102;
  void *__p;
  char *v104;
  uint64_t v105;
  int v106;
  uint64_t (**v107)();
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 6);
  v5 = *(_QWORD *)(v4 + 56);
  if (v5)
    v6 = (operations_research::sat::ConstraintProto **)(v5 + 8);
  else
    v6 = 0;
  v7 = *(int *)(v4 + 48);
  if ((_DWORD)v7)
  {
    for (i = 8 * v7; i; i -= 8)
    {
      v11 = *v6;
      v107 = &off_24F984458;
      v108 = (uint64_t)a1;
      v110 = (unint64_t *)&v107;
      operations_research::sat::ApplyToAllVariableIndices((uint64_t)&v107, v11);
      v12 = (uint64_t (***)())v110;
      if (v110 == (unint64_t *)&v107)
      {
        v12 = &v107;
        v13 = 4;
      }
      else
      {
        if (!v110)
          goto LABEL_14;
        v13 = 5;
      }
      ((void (*)(uint64_t (***)()))(*v12)[v13])(v12);
LABEL_14:
      v107 = &off_24F984458;
      v108 = (uint64_t)a1;
      v110 = (unint64_t *)&v107;
      operations_research::sat::ApplyToAllLiteralIndices((uint64_t)&v107, (uint64_t)v11);
      v9 = (uint64_t (***)())v110;
      if (v110 == (unint64_t *)&v107)
      {
        v9 = &v107;
        v10 = 4;
      }
      else
      {
        if (!v110)
          goto LABEL_8;
        v10 = 5;
      }
      ((void (*)(uint64_t (***)()))(*v9)[v10])(v9);
LABEL_8:
      ++v6;
    }
  }
  v100 = v4;
  if ((_UNKNOWN *)v4 != &operations_research::sat::_CpModelProto_default_instance_)
  {
    v14 = *(_QWORD *)(v4 + 120);
    if (v14)
    {
      v15 = *(int *)(v14 + 16);
      if ((_DWORD)v15)
      {
        v16 = *(int **)(v14 + 24);
        v17 = 4 * v15;
        do
        {
          while (1)
          {
            v18 = *v16;
            v19 = ~*v16 <= *v16 ? *v16 : ~v18;
            v20 = *(_DWORD *)(*a1 + 4 * v19);
            LODWORD(v107) = v20;
            LODWORD(__p) = 0;
            if (v20 < 0)
              break;
            *v16++ = v20 ^ (v18 >> 31);
            v17 -= 4;
            if (!v17)
              goto LABEL_29;
          }
          __p = (void *)google::MakeCheckOpString<int,int>((int)&v107, (int)&__p, "image >= 0");
          if (__p)
            goto LABEL_157;
          v4 = v100;
          *v16 = v20 ^ (*v16 >> 31);
          ++v16;
          v17 -= 4;
        }
        while (v17);
      }
    }
  }
LABEL_29:
  v21 = *(int *)(v4 + 88);
  if ((_DWORD)v21)
  {
    v22 = *(int **)(v4 + 96);
    v23 = 4 * v21;
    while (1)
    {
      while (1)
      {
        v24 = *v22;
        v25 = ~*v22 <= *v22 ? *v22 : ~v24;
        v26 = *(_DWORD *)(*a1 + 4 * v25);
        LODWORD(v107) = v26;
        LODWORD(__p) = 0;
        if (v26 < 0)
          break;
        *v22++ = v26 ^ (v24 >> 31);
        v23 -= 4;
        if (!v23)
          goto LABEL_39;
      }
      __p = (void *)google::MakeCheckOpString<int,int>((int)&v107, (int)&__p, "image >= 0");
      if (__p)
        break;
      v4 = v100;
      *v22 = v26 ^ (*v22 >> 31);
      ++v22;
      v23 -= 4;
      if (!v23)
        goto LABEL_39;
    }
LABEL_157:
    google::LogMessageFatal::LogMessageFatal((unint64_t *)&v107, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4906, (uint64_t **)&__p);
    google::LogMessage::stream((google::LogMessage *)&v107);
    goto LABEL_158;
  }
LABEL_39:
  v27 = *(_QWORD *)(v4 + 80);
  if (v27)
    v28 = (const operations_research::sat::DecisionStrategyProto **)(v27 + 8);
  else
    v28 = 0;
  v29 = *(int *)(v4 + 72);
  if ((_DWORD)v29)
  {
    v101 = &v28[v29];
    while (1)
    {
      v30 = *v28;
      operations_research::sat::DecisionStrategyProto::DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)&v107, *v28);
      *((_DWORD *)v30 + 4) = 0;
      if ((_DWORD)v109)
      {
        v31 = 0;
        v32 = (int *)v110;
        v33 = 4 * (int)v109;
        do
        {
          v34 = *v32;
          if (~*v32 <= *v32)
            v35 = *v32;
          else
            v35 = ~v34;
          v36 = *(_DWORD *)(*a1 + 4 * v35);
          if ((v36 & 0x80000000) == 0)
          {
            if (v31 == *((_DWORD *)v30 + 5))
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)v30 + 4, v31 + 1);
            *(_DWORD *)(*((_QWORD *)v30 + 3) + 4 * v31) = v36 ^ (v34 >> 31);
            *((_DWORD *)v30 + 4) = ++v31;
          }
          ++v32;
          v33 -= 4;
        }
        while (v33);
      }
      v37 = *((unsigned int *)v30 + 12);
      if ((int)v37 >= 1)
      {
        v38 = (operations_research::sat::DecisionStrategyProto_AffineTransformation **)(*((_QWORD *)v30 + 7) + 8);
        do
        {
          operations_research::sat::DecisionStrategyProto_AffineTransformation::Clear(*v38++);
          --v37;
        }
        while (v37);
        *((_DWORD *)v30 + 12) = 0;
      }
      v39 = v112 ? v112 + 8 : 0;
      if (v111)
        break;
LABEL_44:
      operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)&v107);
      if (++v28 == v101)
        goto LABEL_77;
    }
    v40 = 8 * v111;
    while (1)
    {
      v41 = *(const operations_research::sat::DecisionStrategyProto_AffineTransformation **)v39;
      v42 = *(_DWORD *)(*(_QWORD *)v39 + 32);
      if (~v42 <= v42)
        v43 = *(_DWORD *)(*(_QWORD *)v39 + 32);
      else
        v43 = ~v42;
      v44 = *(_DWORD *)(*a1 + 4 * v43);
      if (v44 < 0)
        goto LABEL_64;
      v45 = (int *)*((_QWORD *)v30 + 7);
      if (!v45)
        break;
      v46 = *((int *)v30 + 12);
      v47 = *v45;
      if ((int)v46 >= *v45)
      {
        if (v47 == *((_DWORD *)v30 + 13))
        {
LABEL_74:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v30 + 10, v47 + 1);
          v45 = (int *)*((_QWORD *)v30 + 7);
          v47 = *v45;
        }
        *v45 = v47 + 1;
        v48 = (operations_research::sat::DecisionStrategyProto_AffineTransformation *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::DecisionStrategyProto_AffineTransformation>(*((google::protobuf::Arena **)v30 + 5));
        v49 = *((_QWORD *)v30 + 7);
        v50 = *((int *)v30 + 12);
        *((_DWORD *)v30 + 12) = v50 + 1;
        *(_QWORD *)(v49 + 8 * v50 + 8) = v48;
        goto LABEL_76;
      }
      *((_DWORD *)v30 + 12) = v46 + 1;
      v48 = *(operations_research::sat::DecisionStrategyProto_AffineTransformation **)&v45[2 * v46 + 2];
LABEL_76:
      operations_research::sat::DecisionStrategyProto_AffineTransformation::CopyFrom(v48, v41);
      *((_DWORD *)v48 + 8) = v44 ^ (v42 >> 31);
LABEL_64:
      v39 += 8;
      v40 -= 8;
      if (!v40)
        goto LABEL_44;
    }
    v47 = *((_DWORD *)v30 + 13);
    goto LABEL_74;
  }
LABEL_77:
  v51 = v100;
  if ((_UNKNOWN *)v100 != &operations_research::sat::_CpModelProto_default_instance_)
  {
    v52 = *(_QWORD *)(v100 + 128);
    if (v52)
    {
      if (*(int *)(v52 + 16) >= 1)
      {
        v53 = 0;
        v54 = 0;
        do
        {
          v56 = *(_QWORD *)(*(_QWORD *)(v52 + 48) + 8 * v53);
          operations_research::sat::PresolveContext::GetAffineRelation(a2, *(_DWORD *)(*(_QWORD *)(v52 + 24) + 4 * v53), (uint64_t)&v107);
          v57 = *(_DWORD *)(*a1 + 4 * (int)v107);
          if ((v57 & 0x80000000) == 0)
          {
            v58 = (v56 - v109) / v108;
            *(_DWORD *)(*(_QWORD *)(v52 + 24) + 4 * v54) = v57;
            *(_QWORD *)(*(_QWORD *)(v52 + 48) + 8 * v54++) = v58;
          }
          v51 = v100;
          ++v53;
          v55 = *(int *)(v52 + 16);
        }
        while (v53 < v55);
        if (v54 > 0)
        {
          if ((int)v55 >= 1)
            *(_DWORD *)(v52 + 16) = v54;
          if (*(int *)(v52 + 40) >= 1)
            *(_DWORD *)(v52 + 40) = v54;
          goto LABEL_89;
        }
      }
      v74 = *(_QWORD *)(v51 + 8);
      v75 = (_QWORD *)(v74 & 0xFFFFFFFFFFFFFFFELL);
      if ((v74 & 1) != 0)
      {
        if (*v75)
          goto LABEL_114;
      }
      else if (v75)
      {
        goto LABEL_114;
      }
      v76 = *(operations_research::sat::PartialVariableAssignment **)(v51 + 128);
      if (v76)
      {
        operations_research::sat::PartialVariableAssignment::~PartialVariableAssignment(v76);
        MEMORY[0x22E31DF78]();
      }
LABEL_114:
      *(_QWORD *)(v51 + 128) = 0;
      __p = 0;
      v104 = 0;
      v105 = 0;
      v59 = *a1;
      if (a1[1] != *a1)
        goto LABEL_90;
      goto LABEL_115;
    }
  }
LABEL_89:
  __p = 0;
  v104 = 0;
  v105 = 0;
  v59 = *a1;
  if (a1[1] != *a1)
  {
LABEL_90:
    for (j = 0; j < (a1[1] - *a1) >> 2; ++j)
    {
      v61 = *(unsigned int *)(v59 + 4 * j);
      if ((v61 & 0x80000000) != 0)
        goto LABEL_92;
      v62 = (char *)__p;
      if (0x6DB6DB6DB6DB6DB7 * ((v104 - (_BYTE *)__p) >> 3) <= v61)
      {
        operations_research::sat::IntegerVariableProto::IntegerVariableProto((operations_research::sat::IntegerVariableProto *)&v107, 0);
        v63 = (v61 + 1);
        v64 = v104;
        v65 = 0x6DB6DB6DB6DB6DB7 * ((v104 - (_BYTE *)__p) >> 3);
        if (v63 <= v65)
        {
          if (v63 < v65)
          {
            v66 = (char *)__p + 56 * v63;
            if (v104 != v66)
            {
              do
                operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)(v64 - 56));
              while (v64 != v66);
            }
            v104 = v66;
          }
        }
        else
        {
          std::vector<operations_research::sat::IntegerVariableProto>::__append((uint64_t *)&__p, v63 - v65, (operations_research::sat::IntegerVariableProto *)&v107);
        }
        operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)&v107);
        v62 = (char *)__p;
      }
      v67 = (google::protobuf::internal *)&v62[56 * v61];
      v68 = *(google::protobuf::Message **)(*(_QWORD *)(v51 + 32) + 8 * j + 8);
      if (v68 == v67)
        goto LABEL_92;
      v69 = *((_QWORD *)v67 + 1);
      v70 = (_QWORD *)(v69 & 0xFFFFFFFFFFFFFFFELL);
      if ((v69 & 1) != 0)
      {
        v70 = (_QWORD *)*v70;
        v73 = *((_QWORD *)v68 + 1);
        v72 = (_QWORD *)(v73 & 0xFFFFFFFFFFFFFFFELL);
        if ((v73 & 1) == 0)
        {
LABEL_105:
          if (v70 != v72)
            goto LABEL_106;
          goto LABEL_91;
        }
      }
      else
      {
        v71 = *((_QWORD *)v68 + 1);
        v72 = (_QWORD *)(v71 & 0xFFFFFFFFFFFFFFFELL);
        if ((v71 & 1) == 0)
          goto LABEL_105;
      }
      if (v70 != (_QWORD *)*v72)
      {
LABEL_106:
        google::protobuf::internal::GenericSwap(v67, v68, a3);
        goto LABEL_92;
      }
LABEL_91:
      operations_research::sat::IntegerVariableProto::InternalSwap((__n128 *)v67, (__n128 *)v68);
LABEL_92:
      v59 = *a1;
    }
  }
LABEL_115:
  v77 = *(unsigned int *)(v51 + 24);
  if ((int)v77 >= 1)
  {
    v78 = (operations_research::sat::IntegerVariableProto **)(*(_QWORD *)(v51 + 32) + 8);
    do
    {
      operations_research::sat::IntegerVariableProto::Clear(*v78++);
      --v77;
    }
    while (v77);
    *(_DWORD *)(v51 + 24) = 0;
  }
  v79 = (google::protobuf::Message *)__p;
  v80 = (google::protobuf::Message *)v104;
  if (__p != v104)
  {
    while (1)
    {
      v81 = *(int **)(v51 + 32);
      if (!v81)
        break;
      v82 = *(int *)(v51 + 24);
      v83 = *v81;
      if ((int)v82 < *v81)
      {
        *(_DWORD *)(v51 + 24) = v82 + 1;
        v84 = *(google::protobuf::internal **)&v81[2 * v82 + 2];
        if (v79 == v84)
          goto LABEL_122;
        goto LABEL_131;
      }
      if (v83 == *(_DWORD *)(v51 + 28))
        goto LABEL_129;
LABEL_130:
      *v81 = v83 + 1;
      v84 = (google::protobuf::internal *)google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::IntegerVariableProto>(*(google::protobuf::Arena **)(v51 + 16));
      v85 = *(_QWORD *)(v51 + 32);
      v86 = *(int *)(v51 + 24);
      *(_DWORD *)(v51 + 24) = v86 + 1;
      *(_QWORD *)(v85 + 8 * v86 + 8) = v84;
      if (v79 == v84)
        goto LABEL_122;
LABEL_131:
      v87 = *((_QWORD *)v84 + 1);
      v88 = (_QWORD *)(v87 & 0xFFFFFFFFFFFFFFFELL);
      if ((v87 & 1) != 0)
      {
        v88 = (_QWORD *)*v88;
        v91 = *((_QWORD *)v79 + 1);
        v90 = (_QWORD *)(v91 & 0xFFFFFFFFFFFFFFFELL);
        if ((v91 & 1) != 0)
        {
LABEL_136:
          if (v88 != (_QWORD *)*v90)
          {
LABEL_134:
            google::protobuf::internal::GenericSwap(v84, v79, a3);
            goto LABEL_122;
          }
          goto LABEL_121;
        }
      }
      else
      {
        v89 = *((_QWORD *)v79 + 1);
        v90 = (_QWORD *)(v89 & 0xFFFFFFFFFFFFFFFELL);
        if ((v89 & 1) != 0)
          goto LABEL_136;
      }
      if (v88 != v90)
        goto LABEL_134;
LABEL_121:
      operations_research::sat::IntegerVariableProto::InternalSwap((__n128 *)v84, (__n128 *)v79);
LABEL_122:
      v79 = (google::protobuf::Message *)((char *)v79 + 56);
      if (v79 == v80)
      {
        LODWORD(v77) = *(_DWORD *)(v51 + 24);
        goto LABEL_139;
      }
    }
    v83 = *(_DWORD *)(v51 + 28);
LABEL_129:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v51 + 16), v83 + 1);
    v81 = *(int **)(v51 + 32);
    v83 = *v81;
    goto LABEL_130;
  }
LABEL_139:
  v92 = *(_QWORD *)(v51 + 32);
  if (v92)
    v93 = v92 + 8;
  else
    v93 = 0;
  if ((_DWORD)v77)
  {
    v94 = 8 * (int)v77;
    while (1)
    {
      v95 = *(_DWORD *)(*(_QWORD *)v93 + 16);
      v106 = 0;
      LODWORD(v107) = v95;
      if (v95 < 1)
      {
        v102 = (uint64_t *)google::MakeCheckOpString<int,int>((int)&v107, (int)&v106, "v.domain_size() > 0");
        if (v102)
          break;
      }
      v93 += 8;
      v94 -= 8;
      if (!v94)
        goto LABEL_149;
    }
    google::LogMessageFatal::LogMessageFatal((unint64_t *)&v107, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4995, &v102);
    google::LogMessage::stream((google::LogMessage *)&v107);
LABEL_158:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v107);
  }
LABEL_149:
  v96 = (char *)__p;
  if (__p)
  {
    v97 = v104;
    v98 = __p;
    if (v104 != __p)
    {
      do
        operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)(v97 - 56));
      while (v97 != v96);
      v98 = __p;
    }
    v104 = v96;
    operator delete(v98);
  }
}

void sub_22DAE4AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAE4ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAE4AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAE4ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DAE4AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DAE4AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)va1);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DAE4B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DAE4B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DAE4B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DAE4B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20)
{
  if (a20 != &a17)
  {
    if (a20)
    {
      (*(void (**)(void))(*a20 + 40))();
      _Unwind_Resume(exception_object);
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(void))(a17 + 32))();
  _Unwind_Resume(exception_object);
}

void sub_22DAE4BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DAE4BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)va);
  _Unwind_Resume(a1);
}

void sub_22DAE4BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)va);
  _Unwind_Resume(a1);
}

void sub_22DAE4BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  operations_research::sat::DecisionStrategyProto::~DecisionStrategyProto((operations_research::sat::DecisionStrategyProto *)va);
  _Unwind_Resume(a1);
}

void **std::vector<operations_research::sat::IntegerVariableProto>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)(v3 - 56));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Assign<absl::lts_2020_02_25::inlined_vector_internal::IteratorValueAdapter<std::allocator<operations_research::ClosedInterval>,operations_research::ClosedInterval const*>>(unint64_t *a1, __int128 *a2, unint64_t a3)
{
  unint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  unint64_t v19;

  v7 = a1 + 1;
  v6 = *a1;
  if ((*a1 & 1) != 0)
  {
    v7 = (_OWORD *)a1[1];
    v8 = a1[2];
    if (v8 >= a3)
      goto LABEL_3;
LABEL_14:
    if (2 * v8 <= a3)
      v15 = a3;
    else
      v15 = 2 * v8;
    if (v15 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = operator new(16 * v15);
    v11 = a3;
    v16 = v17;
    goto LABEL_19;
  }
  v8 = 1;
  if (a3 > 1)
    goto LABEL_14;
LABEL_3:
  v9 = v6 >> 1;
  v10 = a3 >= v6 >> 1;
  v11 = a3 - (v6 >> 1);
  if (!v10)
    v11 = 0;
  if (v9 >= a3)
    v12 = a3;
  else
    v12 = v9;
  if (v12)
  {
    v13 = v7;
    do
    {
      v14 = *a2++;
      *v13++ = v14;
      --v12;
    }
    while (v12);
  }
  if (v9 >= a3)
  {
    v19 = *a1;
    goto LABEL_25;
  }
  v15 = 0;
  v16 = 0;
  v17 = &v7[v9];
  do
  {
LABEL_19:
    v18 = *a2++;
    *v17++ = v18;
    --v11;
  }
  while (v11);
  v19 = *a1;
  if (v16)
  {
    if ((v19 & 1) != 0)
    {
      operator delete((void *)a1[1]);
      v19 = *a1;
    }
    a1[1] = (unint64_t)v16;
    a1[2] = v15;
    LOBYTE(v19) = v19 | 1;
  }
LABEL_25:
  *a1 = v19 & 1 | (2 * a3);
}

operations_research::sat::SatPresolver *operations_research::sat::SatPresolver::SatPresolver(operations_research::sat::SatPresolver *this, operations_research::sat::SatPostsolver *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = a2;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 118) = 0;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatPresolver *)((char *)this + 480), 0);
  *((_OWORD *)this + 66) = 0u;
  return this;
}

void sub_22DAE4E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void **v20;
  _QWORD **v21;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void **v34;

  v34 = v16;
  v23 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v12 + 456) = v23;
    operator delete(v23);
    v24 = *(void **)(v12 + 416);
    if (!v24)
    {
LABEL_3:
      std::vector<std::vector<int>>::~vector[abi:ne180100](v34);
      v25 = *(void **)(v12 + 352);
      if (!v25)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else
  {
    v24 = *(void **)(v12 + 416);
    if (!v24)
      goto LABEL_3;
  }
  *(_QWORD *)(v12 + 424) = v24;
  operator delete(v24);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v34);
  v25 = *(void **)(v12 + 352);
  if (!v25)
  {
LABEL_4:
    std::vector<std::vector<int>>::~vector[abi:ne180100](v18);
    std::deque<int>::~deque[abi:ne180100](v17);
    v26 = *(void **)(v12 + 256);
    if (!v26)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v12 + 360) = v25;
  operator delete(v25);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v18);
  std::deque<int>::~deque[abi:ne180100](v17);
  v26 = *(void **)(v12 + 256);
  if (!v26)
  {
LABEL_5:
    v27 = *(void **)(v12 + 232);
    if (!v27)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v26);
  v27 = *(void **)(v12 + 232);
  if (!v27)
  {
LABEL_6:
    v28 = *(void **)(v12 + 208);
    if (!v28)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v12 + 240) = v27;
  operator delete(v27);
  v28 = *(void **)(v12 + 208);
  if (!v28)
  {
LABEL_7:
    v29 = *(void **)(v12 + 184);
    if (!v29)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v12 + 216) = v28;
  operator delete(v28);
  v29 = *(void **)(v12 + 184);
  if (!v29)
  {
LABEL_8:
    v30 = *v15;
    if (!*v15)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  *(_QWORD *)(v12 + 192) = v29;
  operator delete(v29);
  v30 = *v15;
  if (!*v15)
  {
LABEL_9:
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v14, *v21);
    v31 = *v20;
    if (!*v20)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  *(_QWORD *)(v12 + 168) = v30;
  operator delete(v30);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v14, *v21);
  v31 = *v20;
  if (!*v20)
  {
LABEL_10:
    std::deque<operations_research::sat::SatPresolver::BvaPqElement>::~deque[abi:ne180100](a12);
    v32 = *v19;
    if (!*v19)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  *(_QWORD *)(v12 + 120) = v31;
  operator delete(v31);
  std::deque<operations_research::sat::SatPresolver::BvaPqElement>::~deque[abi:ne180100](a12);
  v32 = *v19;
  if (!*v19)
  {
LABEL_11:
    v33 = *(void **)v12;
    if (!*(_QWORD *)v12)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  *(_QWORD *)(v12 + 40) = v32;
  operator delete(v32);
  v33 = *(void **)v12;
  if (!*(_QWORD *)v12)
LABEL_12:
    _Unwind_Resume(a1);
LABEL_23:
  *(_QWORD *)(v12 + 8) = v33;
  operator delete(v33);
  _Unwind_Resume(a1);
}

uint64_t std::deque<operations_research::sat::SatPresolver::BvaPqElement>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void operations_research::sat::SatPresolver::~SatPresolver(operations_research::sat::SatPresolver *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatPresolver *)((char *)this + 480));
  v2 = (void *)*((_QWORD *)this + 56);
  if (v2)
  {
    *((_QWORD *)this + 57) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 52);
  if (v3)
  {
    *((_QWORD *)this + 53) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 49);
  if (v4)
  {
    v5 = *((_QWORD *)this + 50);
    v6 = (void *)*((_QWORD *)this + 49);
    if (v5 != v4)
    {
      v7 = *((_QWORD *)this + 50);
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 16) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)*((_QWORD *)this + 49);
    }
    *((_QWORD *)this + 50) = v4;
    operator delete(v6);
  }
  v10 = (void *)*((_QWORD *)this + 44);
  if (v10)
  {
    *((_QWORD *)this + 45) = v10;
    operator delete(v10);
  }
  v11 = *((_QWORD *)this + 41);
  if (v11)
  {
    v12 = *((_QWORD *)this + 42);
    v13 = (void *)*((_QWORD *)this + 41);
    if (v12 != v11)
    {
      v14 = *((_QWORD *)this + 42);
      do
      {
        v16 = *(void **)(v14 - 24);
        v14 -= 24;
        v15 = v16;
        if (v16)
        {
          *(_QWORD *)(v12 - 16) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = (void *)*((_QWORD *)this + 41);
    }
    *((_QWORD *)this + 42) = v11;
    operator delete(v13);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)this + 280);
  v17 = (void *)*((_QWORD *)this + 32);
  if (v17)
    operator delete(v17);
  v18 = (void *)*((_QWORD *)this + 29);
  if (v18)
  {
    *((_QWORD *)this + 30) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 26);
  if (v19)
  {
    *((_QWORD *)this + 27) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 23);
  if (v20)
  {
    *((_QWORD *)this + 24) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 20);
  if (v21)
  {
    *((_QWORD *)this + 21) = v21;
    operator delete(v21);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  v22 = (void *)*((_QWORD *)this + 14);
  if (v22)
  {
    *((_QWORD *)this + 15) = v22;
    operator delete(v22);
  }
  std::deque<operations_research::sat::SatPresolver::BvaPqElement>::~deque[abi:ne180100]((uint64_t)this + 56);
  v23 = (void *)*((_QWORD *)this + 4);
  if (v23)
  {
    *((_QWORD *)this + 5) = v23;
    operator delete(v23);
  }
  v24 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v24;
    operator delete(v24);
  }
}

void std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void std::deque<int>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_22DAE5898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_22DAE58B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DAE58C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22DAE58E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F9842C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F9842C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::operator()(uint64_t result, int **a2)
{
  int v2;
  unint64_t v3[2];
  uint64_t *v4;

  v2 = *(_DWORD *)(**(_QWORD **)(result + 8) + 4 * **a2);
  **a2 = v2;
  LODWORD(v3[0]) = -1;
  LODWORD(v4) = v2;
  if (v2 == -1)
  {
    result = google::MakeCheckOpString<int,int>((int)v3, (int)&v4, "-1 != *ref");
    v4 = (uint64_t *)result;
    if (result)
    {
      google::LogMessageFatal::LogMessageFatal(v3, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 84, &v4);
      google::LogMessage::stream((google::LogMessage *)v3);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v3);
    }
  }
  return result;
}

void sub_22DAE59E8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16CpModelPresolver22RemoveEmptyConstraintsEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16CpModelPresolver22RemoveEmptyConstraintsEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16CpModelPresolver22RemoveEmptyConstraintsEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16CpModelPresolver22RemoveEmptyConstraintsEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0,std::allocator<operations_research::sat::CpModelPresolver::RemoveEmptyConstraints(void)::$_0>,void ()(int *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F984358;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F984358;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::operator()(uint64_t a1, int **a2)
{
  int *v3;
  uint64_t result;

  v3 = *a2;
  result = operations_research::sat::PresolveContext::GetVariableRepresentative(*(operations_research::sat::PresolveContext **)(*(_QWORD *)(a1 + 16) + 16), **a2);
  if ((_DWORD)result != *v3)
  {
    **(_BYTE **)(a1 + 8) = 1;
    *v3 = result;
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15Const"
                                "raintProtoEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_0>,void ()(int *)>::target_type()
{
}

void std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F9843D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F9843D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const char *std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::operator()(uint64_t a1, unsigned int **a2)
{
  _DWORD *v3;
  const char *result;

  v3 = *a2;
  result = operations_research::sat::PresolveContext::GetLiteralRepresentative(*(operations_research::sat::PresolveContext **)(*(_QWORD *)(a1 + 16) + 16), (const char *)**a2);
  if ((_DWORD)result != *v3)
  {
    **(_BYTE **)(a1 + 8) = 1;
    *v3 = (_DWORD)result;
  }
  return result;
}

uint64_t std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15Const"
                                "raintProtoEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat16CpModelPresolver27ExploitEquivalenceRelationsEiPNS0_15ConstraintProtoEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1,std::allocator<operations_research::sat::CpModelPresolver::ExploitEquivalenceRelations(int,operations_research::sat::ConstraintProto *)::$_1>,void ()(int *)>::target_type()
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int *v40;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int *v57;
  unint64_t v58;
  uint64_t i;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t j;
  int *v66;
  int *v67;
  int *v68;

  v8 = result;
LABEL_2:
  v9 = a2 - 4;
  v66 = a2 - 12;
  v67 = a2 - 8;
  v10 = v8;
  v68 = a2;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = (uint64_t)a2 - v10;
    v13 = v12 >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v26 = *(a2 - 4);
        v27 = *(_DWORD *)v8;
        if (v26 < *(_DWORD *)v8)
        {
          v28 = *(_QWORD *)(v8 + 8);
          v29 = *((_QWORD *)a2 - 1);
LABEL_25:
          *(_DWORD *)v8 = v26;
          *(a2 - 4) = v27;
          *(_QWORD *)(v8 + 8) = v29;
          *((_QWORD *)a2 - 1) = v28;
          return result;
        }
        if (v27 >= v26)
        {
          v29 = *((_QWORD *)a2 - 1);
          v28 = *(_QWORD *)(v8 + 8);
          if (v29 < v28)
            goto LABEL_25;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)v8, (int *)(v8 + 16), v9);
      case 4uLL:
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)v8, (int *)(v8 + 16), (int *)(v8 + 32));
        v30 = *(a2 - 4);
        v31 = *(_DWORD *)(v8 + 32);
        if (v30 >= v31)
        {
          if (v31 < v30)
            return result;
          v33 = *((_QWORD *)a2 - 1);
          v32 = *(_QWORD *)(v8 + 40);
          if (v33 >= v32)
            return result;
        }
        else
        {
          v32 = *(_QWORD *)(v8 + 40);
          v33 = *((_QWORD *)a2 - 1);
        }
        *(_DWORD *)(v8 + 32) = v30;
        *(a2 - 4) = v31;
        *(_QWORD *)(v8 + 40) = v33;
        *((_QWORD *)a2 - 1) = v32;
        v34 = *(_DWORD *)(v8 + 32);
        v35 = *(_DWORD *)(v8 + 16);
        if (v34 >= v35)
        {
          if (v35 < v34)
            return result;
          v37 = *(_QWORD *)(v8 + 40);
          v36 = *(_QWORD *)(v8 + 24);
          if (v37 >= v36)
            return result;
        }
        else
        {
          v36 = *(_QWORD *)(v8 + 24);
          v37 = *(_QWORD *)(v8 + 40);
        }
        *(_DWORD *)(v8 + 16) = v34;
        *(_DWORD *)(v8 + 32) = v35;
        *(_QWORD *)(v8 + 24) = v37;
        *(_QWORD *)(v8 + 40) = v36;
        v38 = *(_DWORD *)v8;
        if (v34 < *(_DWORD *)v8)
        {
          v39 = *(_QWORD *)(v8 + 8);
LABEL_90:
          *(_DWORD *)v8 = v34;
          *(_DWORD *)(v8 + 16) = v38;
          *(_QWORD *)(v8 + 8) = v37;
          *(_QWORD *)(v8 + 24) = v39;
          return result;
        }
        if (v38 >= v34)
        {
          v39 = *(_QWORD *)(v8 + 8);
          if (v37 < v39)
            goto LABEL_90;
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(v8, v8 + 16, v8 + 32, v8 + 48, v9);
      default:
        if (v12 > 383)
        {
          v14 = v11;
          if (v11 == 1)
          {
            if ((int *)v8 != a2)
            {
              v55 = (v13 - 2) >> 1;
              v56 = v55 + 1;
              v57 = (int *)(v8 + 16 * v55);
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(v8, a3, v12 >> 4, v57);
                v57 -= 4;
                --v56;
              }
              while (v56);
              v58 = (unint64_t)v12 >> 4;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<int,long long> *>((int *)v8, (uint64_t)a2, a3, v58);
                a2 -= 4;
              }
              while (v58-- > 2);
            }
            return result;
          }
          v15 = v13 >> 1;
          v16 = (int *)(v8 + 16 * (v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(v16, (int *)v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)v8, v16, v9);
            v17 = a5;
            v18 = v9;
            v19 = v8 + 16 * v15;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)(v8 + 16), (int *)(v19 - 16), v67);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)(v8 + 32), (int *)(v8 + 16 + 16 * v15), v66);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)(v19 - 16), v16, (int *)(v8 + 16 + 16 * v15));
            v20 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *v16;
            *v16 = v20;
            v21 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v19 + 8);
            *(_QWORD *)(v19 + 8) = v21;
            v9 = v18;
            a5 = v17;
            a2 = v68;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v22 = *(_DWORD *)(v8 - 16);
          if (v22 >= *(_DWORD *)v8 && (*(_DWORD *)v8 < v22 || *(_QWORD *)(v8 - 8) >= *(_QWORD *)(v8 + 8)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,long long> *,std::__less<void,void> &>((int *)v8, a2);
            v10 = result;
            goto LABEL_19;
          }
LABEL_14:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,long long> *,std::__less<void,void> &>((int *)v8, (unint64_t)a2);
          if ((v24 & 1) == 0)
            goto LABEL_17;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(v8, v23);
          v10 = v23 + 16;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(v23 + 16, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v25)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>(v8, v23, a3, -v14, a5 & 1);
            v10 = v23 + 16;
LABEL_19:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = (int *)v23;
          if (v25)
            return result;
          goto LABEL_2;
        }
        v40 = (int *)(v8 + 16);
        v42 = (int *)v8 == a2 || v40 == a2;
        if ((a5 & 1) != 0)
        {
          if (v42)
            return result;
          v43 = 0;
          v44 = v8;
LABEL_46:
          v46 = v44;
          v44 = (uint64_t)v40;
          v47 = *(_DWORD *)(v46 + 16);
          v48 = *(_DWORD *)v46;
          if (v47 >= *(_DWORD *)v46)
          {
            if (v48 < v47)
              goto LABEL_45;
            v49 = *(_QWORD *)(v46 + 24);
            v50 = *(_QWORD *)(v46 + 8);
            if (v49 >= v50)
              goto LABEL_45;
          }
          else
          {
            v49 = *(_QWORD *)(v46 + 24);
            v50 = *(_QWORD *)(v46 + 8);
          }
          *(_DWORD *)(v46 + 16) = v48;
          *(_QWORD *)(v44 + 8) = v50;
          v45 = v8;
          if (v46 == v8)
            goto LABEL_44;
          v51 = v43;
          while (1)
          {
            v54 = *(_DWORD *)(v8 + v51 - 16);
            if (v47 < v54)
            {
              v52 = *(_QWORD *)(v8 + v51 - 8);
            }
            else
            {
              if (v54 < v47)
              {
                v45 = v8 + v51;
LABEL_44:
                *(_DWORD *)v45 = v47;
                *(_QWORD *)(v45 + 8) = v49;
LABEL_45:
                v40 = (int *)(v44 + 16);
                v43 += 16;
                if ((int *)(v44 + 16) == a2)
                  return result;
                goto LABEL_46;
              }
              v52 = *(_QWORD *)(v8 + v51 - 8);
              if (v49 >= v52)
              {
                v45 = v46;
                goto LABEL_44;
              }
            }
            v46 -= 16;
            v53 = v8 + v51;
            *(_DWORD *)v53 = v54;
            *(_QWORD *)(v53 + 8) = v52;
            v51 -= 16;
            if (!v51)
            {
              v45 = v8;
              goto LABEL_44;
            }
          }
        }
        if (!v42)
        {
          for (i = v8 + 8; ; i += 16)
          {
            v61 = v8;
            v8 = (uint64_t)v40;
            v62 = *(_DWORD *)(v61 + 16);
            v63 = *(_DWORD *)v61;
            if (v62 < *(_DWORD *)v61)
              break;
            if (v63 >= v62)
            {
              v64 = *(_QWORD *)(v61 + 24);
              if (v64 < *(_QWORD *)(v61 + 8))
                goto LABEL_79;
            }
LABEL_74:
            v40 = (int *)(v8 + 16);
            if ((int *)(v8 + 16) == a2)
              return result;
          }
          v64 = *(_QWORD *)(v61 + 24);
LABEL_79:
          for (j = i; ; j -= 16)
          {
            *(_DWORD *)(j + 8) = v63;
            *(_QWORD *)(j + 16) = *(_QWORD *)j;
            v63 = *(_DWORD *)(j - 24);
            if (v62 >= v63 && (v63 < v62 || v64 >= *(_QWORD *)(j - 16)))
              break;
          }
          *(_DWORD *)(j - 8) = v62;
          *(_QWORD *)j = v64;
          goto LABEL_74;
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v3 = *a2;
  v4 = *a1;
  if (*a2 < *a1 || v4 >= v3 && *((_QWORD *)a2 + 1) < *((_QWORD *)a1 + 1))
  {
    v5 = *a3;
    if (*a3 < v3)
    {
      v6 = *((_QWORD *)a3 + 1);
LABEL_16:
      *a1 = v5;
      *a3 = v4;
      v16 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v6;
      *((_QWORD *)a3 + 1) = v16;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = *((_QWORD *)a3 + 1);
      v10 = *((_QWORD *)a2 + 1);
      if (v6 < v10)
        goto LABEL_16;
    }
    else
    {
      v10 = *((_QWORD *)a2 + 1);
    }
    *a1 = v3;
    *a2 = v4;
    v17 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v10;
    *((_QWORD *)a2 + 1) = v17;
    v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = *((_QWORD *)a3 + 1);
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = *((_QWORD *)a3 + 1);
    }
    *a2 = v18;
    *a3 = v4;
    *((_QWORD *)a2 + 1) = v19;
    result = 2;
    *((_QWORD *)a3 + 1) = v17;
    return result;
  }
  v7 = *a3;
  if (*a3 >= v3)
  {
    if (v3 < v7)
      return 0;
    v9 = *((_QWORD *)a3 + 1);
    v8 = *((_QWORD *)a2 + 1);
    if (v9 >= v8)
      return 0;
  }
  else
  {
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a3 + 1);
  }
  *a2 = v7;
  *a3 = v3;
  *((_QWORD *)a2 + 1) = v9;
  *((_QWORD *)a3 + 1) = v8;
  v11 = *a2;
  v12 = *a1;
  if (*a2 < *a1)
  {
    v13 = *((_QWORD *)a1 + 1);
    v14 = *((_QWORD *)a2 + 1);
LABEL_14:
    *a1 = v11;
    *a2 = v12;
    *((_QWORD *)a1 + 1) = v14;
    result = 2;
    *((_QWORD *)a2 + 1) = v13;
    return result;
  }
  if (v12 >= v11)
  {
    v14 = *((_QWORD *)a2 + 1);
    v13 = *((_QWORD *)a1 + 1);
    if (v14 < v13)
      goto LABEL_14;
  }
  return 1;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,long long> *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int *i;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *(a2 - 4);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((_QWORD *)a2 - 1)))
  {
    for (i = a1 + 4; i < a2 && v2 >= *i && (*i < v2 || v3 >= *((_QWORD *)i + 1)); i += 4)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[4];
      i += 4;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((_QWORD *)i + 1)));
  }
  if (i < a2)
  {
    for (a2 -= 4; v2 < v4 || v4 >= v2 && v3 < *((_QWORD *)a2 + 1); a2 -= 4)
    {
      v8 = *(a2 - 4);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[4];
      i += 4;
      v9 = v11;
      v12 = *((_QWORD *)i - 1);
      *((_QWORD *)i - 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((_QWORD *)i + 1)))
      {
        v13 = i[4];
        i += 4;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(a2 - 4);
          a2 -= 4;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *((_QWORD *)a2 + 1));
    }
    while (i < a2);
  }
  if (i - 4 != a1)
  {
    *a1 = *(i - 4);
    *((_QWORD *)a1 + 1) = *((_QWORD *)i - 1);
  }
  *(i - 4) = v2;
  *((_QWORD *)i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,long long> *,std::__less<void,void> &>(int *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v2 = 0;
  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  while (1)
  {
    v5 = a1[v2 + 4];
    if (v5 >= v3 && (v3 < v5 || *(_QWORD *)&a1[v2 + 6] >= v4))
      break;
    v2 += 4;
  }
  v6 = (unint64_t)&a1[v2 + 4];
  if (v2 * 4)
  {
    do
    {
      v8 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_QWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v10 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (*(_QWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = v6;
  }
  else
  {
    v12 = *(_DWORD *)a2;
    v13 = v6;
    v14 = a2;
    do
    {
      *(_DWORD *)v13 = v12;
      *(_DWORD *)v14 = v5;
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          v16 = *(_DWORD *)(v13 + 16);
          v13 += 16;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_QWORD *)(v13 + 8) < v4);
      do
      {
        v17 = *(_DWORD *)(v14 - 16);
        v14 -= 16;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_QWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if ((int *)(v13 - 16) != a1)
  {
    *a1 = *(_DWORD *)(v13 - 16);
    *((_QWORD *)a1 + 1) = *(_QWORD *)(v13 - 8);
  }
  *(_DWORD *)(v13 - 16) = v3;
  *(_QWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v19 = *(_DWORD *)(a2 - 16);
      v20 = *(_DWORD *)a1;
      if (v19 < *(_DWORD *)a1)
      {
        v21 = *(_QWORD *)(a1 + 8);
        v22 = *(_QWORD *)(a2 - 8);
LABEL_24:
        *(_DWORD *)a1 = v19;
        *(_DWORD *)(a2 - 16) = v20;
        *(_QWORD *)(a1 + 8) = v22;
        *(_QWORD *)(a2 - 8) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        v22 = *(_QWORD *)(a2 - 8);
        v21 = *(_QWORD *)(a1 + 8);
        if (v22 < v21)
          goto LABEL_24;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a2 - 16));
      return 1;
    case 4:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      v23 = *(_DWORD *)(a2 - 16);
      v24 = *(_DWORD *)(a1 + 32);
      if (v23 >= v24)
      {
        if (v24 < v23)
          return 1;
        v26 = *(_QWORD *)(a2 - 8);
        v25 = *(_QWORD *)(a1 + 40);
        if (v26 >= v25)
          return 1;
      }
      else
      {
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(_QWORD *)(a2 - 8);
      }
      *(_DWORD *)(a1 + 32) = v23;
      *(_DWORD *)(a2 - 16) = v24;
      *(_QWORD *)(a1 + 40) = v26;
      *(_QWORD *)(a2 - 8) = v25;
      v27 = *(_DWORD *)(a1 + 32);
      v28 = *(_DWORD *)(a1 + 16);
      if (v27 >= v28)
      {
        if (v28 < v27)
          return 1;
        v30 = *(_QWORD *)(a1 + 40);
        v29 = *(_QWORD *)(a1 + 24);
        if (v30 >= v29)
          return 1;
      }
      else
      {
        v29 = *(_QWORD *)(a1 + 24);
        v30 = *(_QWORD *)(a1 + 40);
      }
      *(_DWORD *)(a1 + 16) = v27;
      *(_DWORD *)(a1 + 32) = v28;
      *(_QWORD *)(a1 + 24) = v30;
      *(_QWORD *)(a1 + 40) = v29;
      v31 = *(_DWORD *)a1;
      if (v27 < *(_DWORD *)a1)
      {
        v32 = *(_QWORD *)(a1 + 8);
LABEL_46:
        *(_DWORD *)a1 = v27;
        *(_DWORD *)(a1 + 16) = v31;
        *(_QWORD *)(a1 + 8) = v30;
        result = 1;
        *(_QWORD *)(a1 + 24) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        v32 = *(_QWORD *)(a1 + 8);
        if (v30 < v32)
          goto LABEL_46;
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(a1, a1 + 16, a1 + 32, a1 + 48, (int *)(a2 - 16));
      return 1;
    default:
      v6 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      v7 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *(_DWORD *)v7;
        v12 = *(_DWORD *)v6;
        if (*(_DWORD *)v7 >= *(_DWORD *)v6)
        {
          if (v12 < v11)
            goto LABEL_7;
          v13 = *(_QWORD *)(v7 + 8);
          v14 = *(_QWORD *)(v6 + 8);
          if (v13 >= v14)
            goto LABEL_7;
        }
        else
        {
          v13 = *(_QWORD *)(v7 + 8);
          v14 = *(_QWORD *)(v6 + 8);
        }
        *(_DWORD *)v7 = v12;
        *(_QWORD *)(v7 + 8) = v14;
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v15 = v8;
        while (2)
        {
          v17 = a1 + v15;
          v18 = *(_DWORD *)(a1 + v15 + 16);
          if (v11 < v18)
          {
            v16 = *(_QWORD *)(v17 + 24);
LABEL_13:
            v6 -= 16;
            *(_DWORD *)(v17 + 32) = v18;
            *(_QWORD *)(a1 + v15 + 40) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          v16 = *(_QWORD *)(a1 + v15 + 24);
          if (v13 >= v16)
          {
            v10 = a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = v6;
LABEL_6:
        *(_DWORD *)v10 = v11;
        *(_QWORD *)(v10 + 8) = v13;
        if (++v9 == 8)
          return v7 + 16 == a2;
LABEL_7:
        v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>((int *)a1, (int *)a2, (int *)a3);
  v11 = *(_DWORD *)a4;
  v12 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v12 < v11)
      goto LABEL_16;
    v14 = *(_QWORD *)(a4 + 8);
    v13 = *(_QWORD *)(a3 + 8);
    if (v14 >= v13)
      goto LABEL_16;
  }
  else
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = *(_QWORD *)(a4 + 8);
  }
  *(_DWORD *)a3 = v11;
  *(_DWORD *)a4 = v12;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a4 + 8) = v13;
  v15 = *(_DWORD *)a3;
  v16 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v16 < v15)
      goto LABEL_16;
    v18 = *(_QWORD *)(a3 + 8);
    v17 = *(_QWORD *)(a2 + 8);
    if (v18 >= v17)
      goto LABEL_16;
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_QWORD *)(a3 + 8);
  }
  *(_DWORD *)a2 = v15;
  *(_DWORD *)a3 = v16;
  *(_QWORD *)(a2 + 8) = v18;
  *(_QWORD *)(a3 + 8) = v17;
  v19 = *(_DWORD *)a2;
  v20 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_QWORD *)(a2 + 8);
LABEL_7:
    *(_DWORD *)a1 = v19;
    *(_DWORD *)a2 = v20;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a2 + 8) = v21;
    goto LABEL_16;
  }
  if (v20 >= v19)
  {
    v22 = *(_QWORD *)(a2 + 8);
    v21 = *(_QWORD *)(a1 + 8);
    if (v22 < v21)
      goto LABEL_7;
  }
LABEL_16:
  v23 = *a5;
  v24 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v24 < v23)
      return result;
    v26 = *((_QWORD *)a5 + 1);
    v25 = *(_QWORD *)(a4 + 8);
    if (v26 >= v25)
      return result;
  }
  else
  {
    v25 = *(_QWORD *)(a4 + 8);
    v26 = *((_QWORD *)a5 + 1);
  }
  *(_DWORD *)a4 = v23;
  *a5 = v24;
  *(_QWORD *)(a4 + 8) = v26;
  *((_QWORD *)a5 + 1) = v25;
  v27 = *(_DWORD *)a4;
  v28 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v28 < v27)
      return result;
    v30 = *(_QWORD *)(a4 + 8);
    v29 = *(_QWORD *)(a3 + 8);
    if (v30 >= v29)
      return result;
  }
  else
  {
    v29 = *(_QWORD *)(a3 + 8);
    v30 = *(_QWORD *)(a4 + 8);
  }
  *(_DWORD *)a3 = v27;
  *(_DWORD *)a4 = v28;
  *(_QWORD *)(a3 + 8) = v30;
  *(_QWORD *)(a4 + 8) = v29;
  v31 = *(_DWORD *)a3;
  v32 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v32 < v31)
      return result;
    v34 = *(_QWORD *)(a3 + 8);
    v33 = *(_QWORD *)(a2 + 8);
    if (v34 >= v33)
      return result;
  }
  else
  {
    v33 = *(_QWORD *)(a2 + 8);
    v34 = *(_QWORD *)(a3 + 8);
  }
  *(_DWORD *)a2 = v31;
  *(_DWORD *)a3 = v32;
  *(_QWORD *)(a2 + 8) = v34;
  *(_QWORD *)(a3 + 8) = v33;
  v35 = *(_DWORD *)a2;
  v36 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    v37 = *(_QWORD *)(a1 + 8);
    v38 = *(_QWORD *)(a2 + 8);
LABEL_24:
    *(_DWORD *)a1 = v35;
    *(_DWORD *)a2 = v36;
    *(_QWORD *)(a1 + 8) = v38;
    *(_QWORD *)(a2 + 8) = v37;
    return result;
  }
  if (v36 >= v35)
  {
    v38 = *(_QWORD *)(a2 + 8);
    v37 = *(_QWORD *)(a1 + 8);
    if (v38 < v37)
      goto LABEL_24;
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (int *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[4];
        if (*v8 < v10 || v10 >= *v8 && *(_QWORD *)(result + 16 * v7 + 8) < *((_QWORD *)v8 + 3))
        {
          v8 += 4;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v14 = *((_QWORD *)v8 + 1);
          v13 = *((_QWORD *)a4 + 1);
          if (v14 < v13)
            return result;
        }
        else
        {
          v13 = *((_QWORD *)a4 + 1);
          v14 = *((_QWORD *)v8 + 1);
        }
        *a4 = v11;
        *((_QWORD *)a4 + 1) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = (int *)(result + 16 * v7);
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = v15[4];
              if (*v15 < v18 || v18 >= *v15 && *(_QWORD *)(result + 16 * v7 + 8) < *((_QWORD *)v15 + 3))
              {
                v15 += 4;
                v7 = v17;
              }
            }
            v19 = *v15;
            if (*v15 < v12)
              break;
            v20 = *((_QWORD *)v15 + 1);
            if (v12 >= v19 && v20 < v13)
              break;
            *v8 = v19;
            *((_QWORD *)v8 + 1) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *v15 = v12;
        *((_QWORD *)v15 + 1) = v13;
      }
    }
  }
  return result;
}

int *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<int,long long> *>(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v6 = *((_QWORD *)result + 1);
    v7 = result;
    do
    {
      v8 = v7;
      v9 = v4 + 1;
      v7 += 4 * v4 + 4;
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v11 < a4)
      {
        v12 = v7[4];
        if (*v7 < v12 || v12 >= *v7 && *(_QWORD *)&v8[4 * v9 + 2] < *((_QWORD *)v7 + 3))
        {
          v7 += 4;
          v4 = v11;
        }
      }
      *v8 = *v7;
      *((_QWORD *)v8 + 1) = *((_QWORD *)v7 + 1);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (int *)(a2 - 16))
    {
      *v7 = v5;
      *((_QWORD *)v7 + 1) = v6;
      return result;
    }
    *v7 = *(_DWORD *)(a2 - 16);
    *((_QWORD *)v7 + 1) = *(_QWORD *)(a2 - 8);
    *(_DWORD *)(a2 - 16) = v5;
    *(_QWORD *)(a2 - 8) = v6;
    v13 = (char *)v7 - (char *)result + 16;
    if (v13 >= 17)
    {
      v14 = ((unint64_t)v13 >> 4) - 2;
      v15 = v14 >> 1;
      v16 = &result[4 * (v14 >> 1)];
      v17 = *v16;
      v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17)
          return result;
        v20 = *(_QWORD *)&result[4 * v15 + 2];
        v19 = *((_QWORD *)v7 + 1);
        if (v20 >= v19)
          return result;
      }
      else
      {
        v19 = *((_QWORD *)v7 + 1);
        v20 = *((_QWORD *)v16 + 1);
      }
      *v7 = v17;
      *((_QWORD *)v7 + 1) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          v23 = v15 - 1;
          v15 = (v15 - 1) >> 1;
          v21 = &result[4 * v15];
          v24 = *v21;
          if (*v21 < v18)
          {
            v22 = *((_QWORD *)v21 + 1);
          }
          else
          {
            if (v18 < v24)
              break;
            v22 = *(_QWORD *)&result[4 * v15 + 2];
            if (v22 >= v19)
              break;
          }
          *v16 = v24;
          *((_QWORD *)v16 + 1) = v22;
          v16 = &result[4 * v15];
          if (v23 <= 1)
            goto LABEL_19;
        }
      }
      v21 = v16;
LABEL_19:
      *v21 = v18;
      *((_QWORD *)v21 + 1) = v19;
    }
  }
  return result;
}

void std::vector<operations_research::Domain>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void **v24;
  void **v25;
  uint64_t v26;
  void **v27;
  char v28;
  unint64_t v29;
  uint64_t v30;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = (_QWORD *)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3) >= a2)
  {
    if (!a2)
    {
LABEL_32:
      a1[1] = (uint64_t)v6;
      return;
    }
    v12 = &v6[3 * a2];
    v13 = 24 * a2 - 24;
    if (v13 >= 0x18)
    {
      v29 = v13 / 0x18 + 1;
      v14 = &v6[3 * (v29 & 0x1FFFFFFFFFFFFFFELL)];
      v30 = v29 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *v6 = 0;
        v6[3] = 0;
        v6 += 6;
        v30 -= 2;
      }
      while (v30);
      if (v29 == (v29 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_31;
    }
    else
    {
      v14 = (_QWORD *)a1[1];
    }
    do
    {
      *v14 = 0;
      v14 += 3;
    }
    while (v14 != v12);
LABEL_31:
    v6 = v12;
    goto LABEL_32;
  }
  v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3);
  v8 = v7 + a2;
  if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v15 = (uint64_t)&v11[24 * v7];
  v16 = &v11[24 * v10];
  v17 = 24 * a2;
  v18 = (_QWORD *)(v15 + 24 * a2);
  v19 = v17 - 24;
  v20 = (_QWORD *)v15;
  if (v19 < 0x18)
    goto LABEL_38;
  v21 = v19 / 0x18 + 1;
  v20 = (_QWORD *)(v15 + 24 * (v21 & 0x1FFFFFFFFFFFFFFELL));
  v22 = v21 & 0x1FFFFFFFFFFFFFFELL;
  v23 = (_QWORD *)v15;
  do
  {
    *v23 = 0;
    v23[3] = 0;
    v23 += 6;
    v22 -= 2;
  }
  while (v22);
  if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_38:
    do
    {
      *v20 = 0;
      v20 += 3;
    }
    while (v20 != v18);
  }
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>>(v5, (uint64_t)v6, (uint64_t)v6, *a1, *a1, v15, v15);
  v25 = (void **)*a1;
  v24 = (void **)a1[1];
  *a1 = v26;
  a1[1] = (uint64_t)v18;
  a1[2] = (uint64_t)v16;
  if (v24 != v25)
  {
    v27 = v24;
    do
    {
      v28 = *((_BYTE *)v27 - 24);
      v27 -= 3;
      if ((v28 & 1) != 0)
        operator delete(*(v24 - 2));
      v24 = v27;
    }
    while (v27 != v25);
  }
  if (v25)
    operator delete(v25);
}

void sub_22DAE70F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<operations_research::Domain>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_22DAE72F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *,false>(uint64_t result, char **a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v35;
  BOOL v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v63;
  char *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = (uint64_t *)(a2 - 3);
  v10 = v8;
  while (2)
  {
    v8 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v28 = *v10;
        v29 = v10[1];
        if (*v10 == v29)
          return result;
        v30 = 0;
        v31 = (uint64_t)*(a2 - 3);
        while ((char *)(v31 + v30) != *(a2 - 2))
        {
          v32 = *(_QWORD *)(v31 + v30);
          v33 = *(_QWORD *)(v28 + v30);
          if (v32 < v33)
            break;
          v30 += 8;
          if (v33 < v32 || v30 + v28 == v29)
            return result;
        }
        *v10 = v31;
        *(a2 - 3) = (char *)v28;
        v63 = (char *)v10[1];
        v10[1] = (uint64_t)*(a2 - 2);
        *(a2 - 2) = v63;
        v64 = (char *)v10[2];
        v10[2] = (uint64_t)*(a2 - 1);
        *(a2 - 1) = v64;
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v10, v10 + 3, v9);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v10, v10 + 3, v10 + 6, v9);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v10, v10 + 3, v10 + 6, v10 + 9, v9);
      default:
        if (v11 <= 575)
        {
          v35 = v10 + 3;
          v37 = v10 == (uint64_t *)a2 || v35 == (uint64_t *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v37)
            {
              v38 = v10;
              do
              {
                v66 = v38;
                v38 = v35;
                v68 = *v66;
                v67 = v66[1];
                if (*v66 != v67)
                {
                  v69 = 0;
                  v70 = v66[4];
                  v71 = *v38;
                  while (v71 + v69 != v70)
                  {
                    v72 = *(_QWORD *)(v71 + v69);
                    v73 = *(_QWORD *)(v68 + v69);
                    if (v72 < v73)
                      break;
                    v69 += 8;
                    if (v73 < v72 || v69 + v68 == v67)
                      goto LABEL_85;
                  }
                  v75 = v66[5];
                  v38[1] = 0;
                  v38[2] = 0;
                  *v38 = 0;
                  v76 = v66[1];
                  v66[3] = v68;
                  v38[1] = v76;
                  v38[2] = v66[2];
                  *v66 = 0;
                  v66[1] = 0;
                  v66[2] = 0;
                  v65 = v10;
                  if (v66 != v10)
                  {
                    while (1)
                    {
                      v65 = v66;
                      v77 = *(v66 - 3);
                      v78 = *(v66 - 2);
                      v66 -= 3;
                      if (v77 == v78)
                        break;
                      v79 = 0;
                      while (v71 + v79 != v70)
                      {
                        v80 = *(_QWORD *)(v71 + v79);
                        result = *(_QWORD *)(v77 + v79);
                        if (v80 < result)
                          break;
                        v79 += 8;
                        if (result < v80 || v79 + v77 == v78)
                          goto LABEL_84;
                      }
                      *v65 = v77;
                      v65[1] = v78;
                      v65[2] = *(v65 - 1);
                      *v66 = 0;
                      v66[1] = 0;
                      v66[2] = 0;
                      if (v66 == v10)
                      {
                        v65 = v10;
                        break;
                      }
                    }
                  }
LABEL_84:
                  *v65 = v71;
                  v65[1] = v70;
                  v65[2] = v75;
                }
LABEL_85:
                v35 = v38 + 3;
              }
              while (v38 + 3 != (uint64_t *)a2);
            }
          }
          else if (!v37)
          {
            do
            {
              v44 = v8;
              v8 = v35;
              v46 = *v44;
              v45 = v44[1];
              if (*v44 != v45)
              {
                v47 = 0;
                v48 = v44[4];
                v49 = *v8;
                while (v49 + v47 != v48)
                {
                  v50 = *(_QWORD *)(v49 + v47);
                  v51 = *(_QWORD *)(v46 + v47);
                  if (v50 < v51)
                    break;
                  v47 += 8;
                  if (v51 < v50 || v47 + v46 == v45)
                    goto LABEL_58;
                }
                v53 = v44[5];
                v8[1] = 0;
                v8[2] = 0;
                *v8 = 0;
                v54 = v44[1];
                *v8 = v46;
                v8[1] = v54;
                v8[2] = v44[2];
LABEL_71:
                *v44 = 0;
                v44[1] = 0;
                v44[2] = 0;
                v56 = *(v44 - 3);
                v57 = *(v44 - 2);
                if (v56 != v57)
                {
                  v58 = 0;
                  v59 = v44;
                  v44 -= 3;
                  do
                  {
                    if (v49 + v58 == v48 || (v60 = *(_QWORD *)(v49 + v58), v61 = *(_QWORD *)(v56 + v58), v60 < v61))
                    {
                      v55 = v44[1];
                      *v59 = v56;
                      v59[1] = v55;
                      v59[2] = v44[2];
                      goto LABEL_71;
                    }
                    v58 += 8;
                    result = v58 + v56;
                  }
                  while (v61 >= v60 && result != v57);
                  v44 = v59;
                }
                *v44 = v49;
                v44[1] = v48;
                v44[2] = v53;
              }
LABEL_58:
              v35 = v8 + 3;
            }
            while (v8 + 3 != (uint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != (uint64_t *)a2)
          {
            v39 = (v12 - 2) >> 1;
            v40 = v39 + 1;
            v41 = &v10[3 * v39];
            do
            {
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>((uint64_t)v10, a3, v12, v41);
              v41 -= 3;
              --v40;
            }
            while (v40);
            v42 = v11 / 0x18uLL;
            do
            {
              result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::vector<long long> *>((char *)v10, (uint64_t)a2, a3, v42);
              a2 -= 3;
            }
            while (v42-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v8[3 * (v12 >> 1)];
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v14, v8, v9);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v8, v14, v9);
          v15 = v9;
          v16 = &v8[3 * v13];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v8 + 3, v16 - 3, (uint64_t *)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v8 + 6, &v8[3 * v13 + 3], (uint64_t *)a2 - 9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v16 - 3, v14, &v8[3 * v13 + 3]);
          v17 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v17;
          v18 = v8[2];
          v8[2] = v16[2];
          v16[2] = v18;
          v9 = v15;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_10;
        }
        v22 = v8[1];
        if (*v8 == v22)
        {
LABEL_23:
          result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<long long> *,std::__less<void,void> &>((uint64_t)v8, (unint64_t)a2);
          v10 = (uint64_t *)result;
          a5 = 0;
          continue;
        }
        v23 = (uint64_t *)*(v8 - 3);
        v24 = *v8 + 8;
        while (v23 != (uint64_t *)*(v8 - 2))
        {
          v25 = *v23;
          v26 = *(_QWORD *)(v24 - 8);
          if (*v23 < v26)
            break;
          ++v23;
          v27 = v26 < v25 || v24 == v22;
          v24 += 8;
          if (v27)
            goto LABEL_23;
        }
LABEL_10:
        v19 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<long long> *,std::__less<void,void> &>((char **)v8, a2);
        if ((v20 & 1) == 0)
        {
LABEL_13:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *,false>(v8, v19, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v19 + 3;
          continue;
        }
        v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v8, v19);
        v10 = v19 + 3;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(v19 + 3, (uint64_t *)a2);
        if (!(_DWORD)result)
        {
          if (v21)
            continue;
          goto LABEL_13;
        }
        a2 = (char **)v19;
        if (!v21)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  v6 = a2[1];
  if (*a1 == v4)
  {
LABEL_10:
    if (v5 == v6)
      return 0;
    v11 = 0;
    v12 = *a3;
    while (v12 + v11 != a3[1])
    {
      v13 = *(_QWORD *)(v12 + v11);
      v14 = *(_QWORD *)(v5 + v11);
      if (v13 < v14)
        break;
      v11 += 8;
      if (v14 < v13 || v11 + v5 == v6)
        return 0;
    }
    *a2 = v12;
    *a3 = v5;
    v32 = a2[1];
    a2[1] = a3[1];
    a3[1] = v32;
    v34 = a2 + 2;
    v33 = a2[2];
    a2[2] = a3[2];
    a3[2] = v33;
    v35 = *a1;
    v36 = a1[1];
    if (*a1 != v36)
    {
      v37 = 0;
      v38 = *a2;
      while (v38 + v37 != a2[1])
      {
        v39 = *(_QWORD *)(v38 + v37);
        v40 = *(_QWORD *)(v35 + v37);
        if (v39 < v40)
          break;
        v37 += 8;
        if (v40 < v39 || v37 + v35 == v36)
          return 1;
      }
      *a1 = v38;
      *a2 = v35;
      v47 = a1[1];
      a1[1] = a2[1];
      a2[1] = v47;
      v48 = a1 + 2;
      result = 2;
      v49 = *v48;
      *v48 = *v34;
      *v34 = v49;
      return result;
    }
    return 1;
  }
  v7 = 0;
  while (v5 + v7 != v6)
  {
    v8 = *(_QWORD *)(v5 + v7);
    v9 = *(_QWORD *)(v3 + v7);
    if (v8 < v9)
      break;
    v7 += 8;
    if (v9 < v8 || v7 + v3 == v4)
      goto LABEL_10;
  }
  if (v5 == v6)
  {
LABEL_29:
    *a1 = v5;
    *a2 = v3;
    v22 = a1[1];
    a1[1] = a2[1];
    a2[1] = v22;
    v23 = a2 + 2;
    v24 = a1[2];
    a1[2] = a2[2];
    a2[2] = v24;
    v25 = *a2;
    v26 = a2[1];
    if (*a2 != v26)
    {
      v27 = 0;
      v28 = *a3;
      while (v28 + v27 != a3[1])
      {
        v29 = *(_QWORD *)(v28 + v27);
        v30 = *(_QWORD *)(v25 + v27);
        if (v29 < v30)
          break;
        v27 += 8;
        if (v30 < v29 || v27 + v25 == v26)
          return 1;
      }
      *a2 = v28;
      *a3 = v25;
      v45 = a2[1];
      a2[1] = a3[1];
      a3[1] = v45;
      result = 2;
      v46 = *v23;
      *v23 = a3[2];
      a3[2] = v46;
      return result;
    }
    return 1;
  }
  v17 = 0;
  v18 = *a3;
  while (v18 + v17 != a3[1])
  {
    v19 = *(_QWORD *)(v18 + v17);
    v20 = *(_QWORD *)(v5 + v17);
    if (v19 < v20)
      break;
    v17 += 8;
    if (v20 < v19 || v17 + v5 == v6)
      goto LABEL_29;
  }
  *a1 = v18;
  *a3 = v3;
  v42 = a1[1];
  a1[1] = a3[1];
  a3[1] = v42;
  v43 = a1 + 2;
  result = 1;
  v44 = *v43;
  *v43 = a3[2];
  a3[2] = v44;
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<long long> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t *v48;
  __int128 v50;
  __int128 v51;

  v3 = *(uint64_t **)a1;
  v4 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v6 = *(_QWORD *)(a2 - 24);
  v5 = *(_QWORD *)(a2 - 16);
  if (v6 == v5)
  {
LABEL_10:
    v12 = (uint64_t *)(a1 + 24);
    if (a1 + 24 < a2)
    {
      v13 = (uint64_t *)a1;
      while (1)
      {
        v22 = v13[3];
        v21 = v13[4];
        v13 = v12;
        if (v22 != v21)
          break;
LABEL_23:
        v12 += 3;
        if ((unint64_t)(v13 + 3) >= a2)
          goto LABEL_34;
      }
      v23 = v22 + 8;
      v24 = v3;
      while (v24 != (uint64_t *)v4)
      {
        v25 = *v24;
        v26 = *(_QWORD *)(v23 - 8);
        if (*v24 < v26)
        {
          if ((unint64_t)v12 < a2)
            v28 = (uint64_t *)(a2 - 24);
          else
            v28 = (uint64_t *)a2;
          if ((unint64_t)v12 < a2)
            goto LABEL_38;
          goto LABEL_49;
        }
        ++v24;
        v27 = v26 < v25 || v23 == v21;
        v23 += 8;
        if (v27)
          goto LABEL_23;
      }
    }
  }
  else
  {
    v7 = v6 + 8;
    v8 = v3;
    while (v8 != (uint64_t *)v4)
    {
      v9 = *v8;
      v10 = *(_QWORD *)(v7 - 8);
      if (*v8 < v10)
        break;
      ++v8;
      v11 = v10 < v9 || v7 == v5;
      v7 += 8;
      if (v11)
        goto LABEL_10;
    }
    v12 = (uint64_t *)a1;
    do
    {
LABEL_13:
      v15 = v12[3];
      v14 = v12[4];
      v12 += 3;
    }
    while (v15 == v14);
    v16 = v15 + 8;
    v17 = v3;
    while (v17 != (uint64_t *)v4)
    {
      v18 = *v17;
      v19 = *(_QWORD *)(v16 - 8);
      if (*v17 < v19)
        break;
      ++v17;
      v20 = v19 < v18 || v16 == v14;
      v16 += 8;
      if (v20)
        goto LABEL_13;
    }
  }
LABEL_34:
  if ((unint64_t)v12 < a2)
    v28 = (uint64_t *)(a2 - 24);
  else
    v28 = (uint64_t *)a2;
  if ((unint64_t)v12 < a2)
  {
LABEL_38:
    if (v6 != v5)
    {
      v28 = (uint64_t *)(a2 - 24);
      do
      {
        v29 = v6 + 8;
        v30 = v3;
        while (v30 != (uint64_t *)v4)
        {
          v31 = *v30;
          v32 = *(_QWORD *)(v29 - 8);
          if (*v30 < v32)
            break;
          ++v30;
          v33 = v32 < v31 || v29 == v5;
          v29 += 8;
          if (v33)
            goto LABEL_49;
        }
        v6 = *(v28 - 3);
        v5 = *(v28 - 2);
        v28 -= 3;
      }
      while (v6 != v5);
    }
  }
LABEL_49:
  if (v12 < v28)
  {
    v34 = *v12;
    v35 = *v28;
    do
    {
      *v12 = v35;
      *v28 = v34;
      v36 = v12[1];
      v12[1] = v28[1];
      v28[1] = v36;
      v37 = v12[2];
      v12[2] = v28[2];
      v28[2] = v37;
      do
      {
LABEL_53:
        v34 = v12[3];
        v38 = v12[4];
        v12 += 3;
      }
      while (v34 == v38);
      v39 = 0;
      while (&v3[v39] != (uint64_t *)v4)
      {
        v40 = v3[v39];
        v41 = *(_QWORD *)(v34 + v39 * 8);
        if (v40 < v41)
          break;
        ++v39;
        if (v41 < v40 || v39 * 8 + v34 == v38)
          goto LABEL_53;
      }
      while (1)
      {
        v35 = *(v28 - 3);
        v47 = *(v28 - 2);
        v28 -= 3;
        if (v35 == v47)
          break;
        v43 = 0;
        while (&v3[v43] != (uint64_t *)v4)
        {
          v44 = v3[v43];
          v45 = *(_QWORD *)(v35 + v43 * 8);
          if (v44 < v45)
            break;
          ++v43;
          if (v45 < v44 || v43 * 8 + v35 == v47)
            goto LABEL_51;
        }
      }
LABEL_51:
      ;
    }
    while (v12 < v28);
  }
  v48 = *(uint64_t **)a1;
  if (v12 - 3 == (uint64_t *)a1)
  {
    if (v48)
    {
      *(v12 - 2) = (uint64_t)v48;
      v51 = v4;
      operator delete(v48);
      v4 = v51;
    }
  }
  else
  {
    if (v48)
    {
      *(_QWORD *)(a1 + 8) = v48;
      v50 = v4;
      operator delete(v48);
      v4 = v50;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)(v12 - 3);
    *(_QWORD *)(a1 + 16) = *(v12 - 1);
  }
  *(v12 - 3) = (uint64_t)v3;
  *((_OWORD *)v12 - 1) = v4;
  return v12;
}

char **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<long long> *,std::__less<void,void> &>(char **a1, char **a2)
{
  char **v2;
  char *v4;
  __int128 v5;
  char **v6;
  char **v7;
  char **v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char *v26;
  char *v27;
  char **v28;
  char **v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char **v42;
  char *v43;
  __int128 v45;
  __int128 v46;

  v2 = a2;
  v4 = *a1;
  v5 = *(_OWORD *)(a1 + 1);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v6 = a1 + 3;
  if (v4 == (char *)v5)
  {
    if (v6 >= a2)
    {
      v8 = a1 + 3;
      v42 = a1;
      v43 = *a1;
      if (v6 - 3 == a1)
        goto LABEL_64;
      goto LABEL_60;
    }
    goto LABEL_23;
  }
  v7 = a1;
LABEL_4:
  v8 = v6;
  v9 = (uint64_t *)v7[3];
  v10 = v4 + 8;
  do
  {
    if (v9 == (uint64_t *)v7[4] || (v11 = *v9, v12 = *((_QWORD *)v10 - 1), *v9 < v12))
    {
      v6 += 3;
      v7 = v8;
      goto LABEL_4;
    }
    ++v9;
    v13 = v12 < v11 || v10 == (char *)v5;
    v10 += 8;
  }
  while (!v13);
  if (v7 != a1)
  {
LABEL_13:
    v14 = (uint64_t *)*(v2 - 3);
    v15 = (uint64_t *)*(v2 - 2);
    v2 -= 3;
    v16 = v4 + 8;
    while (v14 != v15)
    {
      v17 = *v14;
      v18 = *((_QWORD *)v16 - 1);
      if (*v14 < v18)
        break;
      ++v14;
      v19 = v18 < v17 || v16 == (char *)v5;
      v16 += 8;
      if (v19)
        goto LABEL_13;
    }
    goto LABEL_36;
  }
  if (v6 >= a2)
    goto LABEL_36;
  if (v4 == (char *)v5)
  {
    do
LABEL_23:
      v2 -= 3;
    while (v6 < v2);
    v8 = v6;
    goto LABEL_36;
  }
LABEL_27:
  v20 = (uint64_t *)*(v2 - 3);
  v21 = (uint64_t *)*(v2 - 2);
  v2 -= 3;
  v22 = v4 + 8;
  while (v20 != v21)
  {
    v23 = *v20;
    v24 = *((_QWORD *)v22 - 1);
    if (*v20 < v24)
      break;
    ++v20;
    v25 = v24 < v23 || v22 == (char *)v5;
    v22 += 8;
    if (v25)
    {
      if (v6 < v2)
        goto LABEL_27;
      break;
    }
  }
LABEL_36:
  if (v8 >= v2)
  {
    v42 = v8 - 3;
    v43 = *a1;
    if (v8 - 3 == a1)
      goto LABEL_64;
LABEL_60:
    if (v43)
    {
      a1[1] = v43;
      v45 = v5;
      operator delete(v43);
      v5 = v45;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)(v8 - 3);
    a1[2] = *(v8 - 1);
    goto LABEL_66;
  }
  v26 = *v8;
  v27 = *v2;
  v28 = v8;
  v29 = v2;
  do
  {
    *v28 = v27;
    *v29 = v26;
    v30 = v28[1];
    v28[1] = v29[1];
    v29[1] = v30;
    v31 = v28[2];
    v28[2] = v29[2];
    v29[2] = v31;
LABEL_40:
    v32 = 0;
    v26 = v28[3];
    v33 = v28[4];
    v28 += 3;
    do
    {
      if (&v26[v32] == v33)
        goto LABEL_40;
      v34 = *(_QWORD *)&v26[v32];
      v35 = *(_QWORD *)&v4[v32];
      if (v34 < v35)
        goto LABEL_40;
      v32 += 8;
    }
    while (v35 >= v34 && &v4[v32] != (char *)v5);
LABEL_48:
    v37 = 0;
    v27 = *(v29 - 3);
    v38 = (uint64_t)*(v29 - 2);
    v29 -= 3;
    while (&v27[v37] != (char *)v38)
    {
      v39 = *(_QWORD *)&v27[v37];
      v40 = *(_QWORD *)&v4[v37];
      if (v39 < v40)
        break;
      v37 += 8;
      if (v40 < v39 || &v4[v37] == (char *)v5)
        goto LABEL_48;
    }
  }
  while (v28 < v29);
  v8 = v28;
  v42 = v28 - 3;
  v43 = *a1;
  if (v28 - 3 != a1)
    goto LABEL_60;
LABEL_64:
  if (v43)
  {
    *(v8 - 2) = v43;
    v46 = v5;
    operator delete(v43);
    v5 = v46;
  }
LABEL_66:
  *(v8 - 3) = v4;
  *((_OWORD *)v8 - 1) = v5;
  return v42;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v9 = *a1;
      v10 = a1[1];
      if (*a1 != v10)
      {
        v11 = 0;
        v12 = *(a2 - 3);
        while (v12 + v11 != *(a2 - 2))
        {
          v13 = *(_QWORD *)(v12 + v11);
          v14 = *(_QWORD *)(v9 + v11);
          if (v13 < v14)
            break;
          v11 += 8;
          if (v14 < v13 || v11 + v9 == v10)
            return result;
        }
        *a1 = v12;
        *(a2 - 3) = v9;
        v16 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v16;
        v17 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v17;
        result = 1;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a1 + 3, a2 - 3);
      result = 1;
      break;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      result = 1;
      break;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      result = 1;
      break;
    default:
      v6 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a1 + 3, a1 + 6);
      v7 = a1 + 9;
      if (a1 + 9 == a2)
      {
LABEL_45:
        result = 1;
      }
      else
      {
        v8 = 0;
        while (1)
        {
          v20 = *v6;
          v19 = v6[1];
          if (*v6 != v19)
          {
            v21 = 0;
            v23 = *v7;
            v22 = v7[1];
            while (v23 + v21 != v22)
            {
              v24 = *(_QWORD *)(v23 + v21);
              v25 = *(_QWORD *)(v20 + v21);
              if (v24 < v25)
                break;
              v21 += 8;
              if (v25 < v24 || v21 + v20 == v19)
                goto LABEL_21;
            }
            v27 = v7[2];
            *v7 = 0;
            v7[1] = 0;
            v7[2] = 0;
            v28 = v6[1];
            *v7 = v20;
            v7[1] = v28;
            v7[2] = v6[2];
            *v6 = 0;
            v6[1] = 0;
            v6[2] = 0;
            v18 = a1;
            if (v6 != a1)
            {
              while (1)
              {
                v18 = v6;
                v29 = *(v6 - 3);
                v30 = *(v6 - 2);
                v6 -= 3;
                if (v29 == v30)
                  break;
                v31 = 0;
                while (v23 + v31 != v22)
                {
                  v32 = *(_QWORD *)(v23 + v31);
                  v33 = *(_QWORD *)(v29 + v31);
                  if (v32 < v33)
                    break;
                  v31 += 8;
                  if (v33 < v32 || v31 + v29 == v30)
                    goto LABEL_20;
                }
                *v18 = v29;
                *(_OWORD *)(v18 + 1) = *((_OWORD *)v18 - 1);
                *v6 = 0;
                v6[1] = 0;
                v6[2] = 0;
                if (v6 == a1)
                {
                  v18 = a1;
                  break;
                }
              }
            }
LABEL_20:
            *v18 = v23;
            v18[1] = v22;
            v18[2] = v27;
            if (++v8 == 8)
              break;
          }
LABEL_21:
          v6 = v7;
          v7 += 3;
          if (v7 == a2)
            goto LABEL_45;
        }
        result = v7 + 3 == a2;
      }
      break;
  }
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a2, a3);
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    v11 = 0;
    v12 = *a4;
    while (v12 + v11 != a4[1])
    {
      v13 = *(_QWORD *)(v12 + v11);
      v14 = *(_QWORD *)(v9 + v11);
      if (v13 < v14)
        break;
      v11 += 8;
      if (v14 < v13 || v11 + v9 == v10)
        return result;
    }
    *a3 = v12;
    *a4 = v9;
    v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    v17 = a3[2];
    a3[2] = a4[2];
    a4[2] = v17;
    v18 = *a2;
    v19 = a2[1];
    if (*a2 != v19)
    {
      v20 = 0;
      v21 = *a3;
      while (v21 + v20 != a3[1])
      {
        v22 = *(_QWORD *)(v21 + v20);
        v23 = *(_QWORD *)(v18 + v20);
        if (v22 < v23)
          break;
        v20 += 8;
        if (v23 < v22 || v20 + v18 == v19)
          return result;
      }
      *a2 = v21;
      *a3 = v18;
      v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      v26 = a2[2];
      a2[2] = a3[2];
      a3[2] = v26;
      v27 = *a1;
      v28 = a1[1];
      if (*a1 != v28)
      {
        v29 = 0;
        v30 = *a2;
        while (v30 + v29 != a2[1])
        {
          v31 = *(_QWORD *)(v30 + v29);
          v32 = *(_QWORD *)(v27 + v29);
          if (v31 < v32)
            break;
          v29 += 8;
          if (v32 < v31 || v29 + v27 == v28)
            return result;
        }
        *a1 = v30;
        *a2 = v27;
        v34 = a1[1];
        a1[1] = a2[1];
        a2[1] = v34;
        v35 = a1[2];
        a1[2] = a2[2];
        a2[2] = v35;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(a1, a2, a3, a4);
  v11 = *a4;
  v12 = a4[1];
  if (*a4 != v12)
  {
    v13 = 0;
    v14 = *a5;
    while (v14 + v13 != a5[1])
    {
      v15 = *(_QWORD *)(v14 + v13);
      v16 = *(_QWORD *)(v11 + v13);
      if (v15 < v16)
        break;
      v13 += 8;
      if (v16 < v15 || v13 + v11 == v12)
        return result;
    }
    *a4 = v14;
    *a5 = v11;
    v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    v19 = a4[2];
    a4[2] = a5[2];
    a5[2] = v19;
    v20 = *a3;
    v21 = a3[1];
    if (*a3 != v21)
    {
      v22 = 0;
      v23 = *a4;
      while (v23 + v22 != a4[1])
      {
        v24 = *(_QWORD *)(v23 + v22);
        v25 = *(_QWORD *)(v20 + v22);
        if (v24 < v25)
          break;
        v22 += 8;
        if (v25 < v24 || v22 + v20 == v21)
          return result;
      }
      *a3 = v23;
      *a4 = v20;
      v27 = a3[1];
      a3[1] = a4[1];
      a4[1] = v27;
      v28 = a3[2];
      a3[2] = a4[2];
      a4[2] = v28;
      v29 = *a2;
      v30 = a2[1];
      if (*a2 != v30)
      {
        v31 = 0;
        v32 = *a3;
        while (v32 + v31 != a3[1])
        {
          v33 = *(_QWORD *)(v32 + v31);
          v34 = *(_QWORD *)(v29 + v31);
          if (v33 < v34)
            break;
          v31 += 8;
          if (v34 < v33 || v31 + v29 == v30)
            return result;
        }
        *a2 = v32;
        *a3 = v29;
        v36 = a2[1];
        a2[1] = a3[1];
        a3[1] = v36;
        v37 = a2[2];
        a2[2] = a3[2];
        a3[2] = v37;
        v38 = *a1;
        v39 = a1[1];
        if (*a1 != v39)
        {
          v40 = 0;
          v41 = *a2;
          while (v41 + v40 != a2[1])
          {
            v42 = *(_QWORD *)(v41 + v40);
            v43 = *(_QWORD *)(v38 + v40);
            if (v42 < v43)
              break;
            v40 += 8;
            if (v43 < v42 || v40 + v38 == v39)
              return result;
          }
          *a1 = v41;
          *a2 = v38;
          v45 = a1[1];
          a1[1] = a2[1];
          a2[1] = v45;
          v46 = a1[2];
          a1[2] = a2[2];
          a2[2] = v46;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<long long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      v6 = result + 24 * v5;
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 < a3)
      {
        v8 = *(_QWORD *)(v6 + 24);
        v7 = *(_QWORD *)(v6 + 32);
        if (v8 != v7)
        {
          v9 = *(uint64_t **)v6;
          v10 = v8 + 8;
          while (v9 != *(uint64_t **)(result + 24 * v5 + 8))
          {
            v11 = *v9;
            v12 = *(_QWORD *)(v10 - 8);
            if (*v9 < v12)
              break;
            ++v9;
            v13 = v12 < v11 || v10 == v7;
            v10 += 8;
            if (v13)
              goto LABEL_15;
          }
          v6 += 24;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
LABEL_15:
      v14 = *a4;
      v15 = a4[1];
      if (*a4 == v15)
      {
        v21 = a4[2];
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        *(_OWORD *)a4 = *(_OWORD *)v6;
        a4[2] = *(_QWORD *)(v6 + 16);
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        for (*(_QWORD *)(v6 + 16) = 0; v4 >= v5; *(_QWORD *)(v6 + 16) = 0)
        {
          v37 = v6;
          v38 = 2 * v5;
          v5 = (2 * v5) | 1;
          v6 = result + 24 * v5;
          v39 = v38 + 2;
          if (v39 < a3)
          {
            v41 = *(_QWORD *)(v6 + 24);
            v40 = *(_QWORD *)(v6 + 32);
            if (v41 != v40)
            {
              v42 = *(uint64_t **)v6;
              v43 = v41 + 8;
              while (v42 != *(uint64_t **)(result + 24 * v5 + 8))
              {
                v44 = *v42;
                v45 = *(_QWORD *)(v43 - 8);
                if (*v42 < v45)
                  break;
                ++v42;
                v46 = v45 < v44 || v43 == v40;
                v43 += 8;
                if (v46)
                  goto LABEL_52;
              }
              v6 += 24;
              v5 = v39;
            }
          }
LABEL_52:
          *(_OWORD *)v37 = *(_OWORD *)v6;
          *(_QWORD *)(v37 + 16) = *(_QWORD *)(v6 + 16);
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
LABEL_48:
        *(_QWORD *)v6 = v14;
        *(_QWORD *)(v6 + 8) = v15;
        *(_QWORD *)(v6 + 16) = v21;
      }
      else
      {
        v16 = *(uint64_t **)v6;
        v17 = v14 + 8;
        while (v16 != *(uint64_t **)(v6 + 8))
        {
          v18 = *v16;
          v19 = *(_QWORD *)(v17 - 8);
          if (*v16 < v19)
            break;
          ++v16;
          v20 = v19 < v18 || v17 == v15;
          v17 += 8;
          if (v20)
          {
            v21 = a4[2];
            *a4 = 0;
            a4[1] = 0;
            a4[2] = 0;
            *(_OWORD *)a4 = *(_OWORD *)v6;
            a4[2] = *(_QWORD *)(v6 + 16);
            *(_QWORD *)v6 = 0;
            *(_QWORD *)(v6 + 8) = 0;
            *(_QWORD *)(v6 + 16) = 0;
            if (v4 >= v5)
            {
LABEL_25:
              v22 = 2 * v5;
              v5 = (2 * v5) | 1;
              v23 = result + 24 * v5;
              v24 = v22 + 2;
              if (v24 < a3)
              {
                v26 = *(_QWORD *)(v23 + 24);
                v25 = *(_QWORD *)(v23 + 32);
                if (v26 != v25)
                {
                  v27 = *(uint64_t **)v23;
                  v28 = v26 + 8;
                  while (v27 != *(uint64_t **)(result + 24 * v5 + 8))
                  {
                    v29 = *v27;
                    v30 = *(_QWORD *)(v28 - 8);
                    if (*v27 < v30)
                      break;
                    ++v27;
                    v31 = v30 < v29 || v28 == v25;
                    v28 += 8;
                    if (v31)
                      goto LABEL_37;
                  }
                  v23 += 24;
                  v5 = v24;
                }
              }
LABEL_37:
              v32 = *(uint64_t **)v23;
              v33 = v14 + 8;
              while (v32 != *(uint64_t **)(v23 + 8))
              {
                v34 = *v32;
                v35 = *(_QWORD *)(v33 - 8);
                if (*v32 < v35)
                  break;
                ++v32;
                v36 = v35 < v34 || v33 == v15;
                v33 += 8;
                if (v36)
                {
                  *(_OWORD *)v6 = *(_OWORD *)v23;
                  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v23 + 16);
                  *(_QWORD *)v23 = 0;
                  *(_QWORD *)(v23 + 8) = 0;
                  *(_QWORD *)(v23 + 16) = 0;
                  v6 = v23;
                  if (v4 >= v5)
                    goto LABEL_25;
                  v6 = v23;
                  goto LABEL_48;
                }
              }
            }
            goto LABEL_48;
          }
        }
      }
    }
  }
  return result;
}

char *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::vector<long long> *>(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *(_QWORD *)result;
    v6 = *((_QWORD *)result + 1);
    v7 = *((_QWORD *)result + 2);
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    v8 = result;
    *(_QWORD *)result = 0;
    do
    {
      v9 = v8;
      v10 = v4 + 1;
      v8 += 24 * v4 + 24;
      v11 = 2 * v4;
      v4 = (2 * v4) | 1;
      v12 = v11 + 2;
      if (v12 < a4)
      {
        v14 = *((_QWORD *)v8 + 3);
        v13 = *((_QWORD *)v8 + 4);
        if (v14 != v13)
        {
          v15 = *(uint64_t **)&v9[24 * v10 + 8];
          v16 = *(uint64_t **)v8;
          v17 = v14 + 8;
          while (v16 != v15)
          {
            v18 = *v16;
            v19 = *(_QWORD *)(v17 - 8);
            if (*v16 < v19)
              break;
            ++v16;
            v20 = v19 < v18 || v17 == v13;
            v17 += 8;
            if (v20)
              goto LABEL_4;
          }
          v8 += 24;
          v4 = v12;
        }
      }
LABEL_4:
      *(_OWORD *)v9 = *(_OWORD *)v8;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v8 + 2);
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v8 == (char *)(a2 - 24))
    {
      *(_QWORD *)v8 = v5;
      *((_QWORD *)v8 + 1) = v6;
      *((_QWORD *)v8 + 2) = v7;
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)(a2 - 24);
      *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 24) = v5;
      *(_QWORD *)(a2 - 16) = v6;
      *(_QWORD *)(a2 - 8) = v7;
      v21 = v8 - result + 24;
      if (v21 >= 25)
      {
        v22 = *(uint64_t **)v8;
        v23 = (uint64_t *)*((_QWORD *)v8 + 1);
        if (*(uint64_t **)v8 != v23)
        {
          v24 = 0;
          v25 = v21 / 0x18uLL - 2;
          v26 = v25 >> 1;
          v27 = &result[24 * (v25 >> 1)];
          v28 = *(_QWORD *)v27;
          while (v28 + v24 * 8 != *((_QWORD *)v27 + 1))
          {
            v29 = *(_QWORD *)(v28 + v24 * 8);
            v30 = v22[v24];
            if (v29 < v30)
              break;
            ++v24;
            if (v30 < v29 || &v22[v24] == v23)
              return result;
          }
          v32 = *((_QWORD *)v8 + 2);
          *(_QWORD *)v8 = 0;
          *((_QWORD *)v8 + 1) = 0;
          *((_QWORD *)v8 + 2) = 0;
          *(_OWORD *)v8 = *(_OWORD *)v27;
          *((_QWORD *)v8 + 2) = *(_QWORD *)&result[24 * v26 + 16];
          *(_QWORD *)v27 = 0;
          *((_QWORD *)v27 + 1) = 0;
          *((_QWORD *)v27 + 2) = 0;
          if (v25 >= 2)
          {
LABEL_32:
            v33 = 0;
            v34 = v27;
            v35 = v26 - 1;
            v26 = (v26 - 1) >> 1;
            v27 = &result[24 * v26];
            v36 = *(_QWORD *)v27;
            v37 = *((_QWORD *)v27 + 1);
            do
            {
              if (v36 + v33 * 8 == v37 || (v38 = *(_QWORD *)(v36 + v33 * 8), v39 = v22[v33], v38 < v39))
              {
                *(_QWORD *)v34 = v36;
                *((_QWORD *)v34 + 1) = v37;
                *((_QWORD *)v34 + 2) = *(_QWORD *)&result[24 * v26 + 16];
                *(_QWORD *)v27 = 0;
                *((_QWORD *)v27 + 1) = 0;
                *((_QWORD *)v27 + 2) = 0;
                if (v35 < 2)
                  goto LABEL_41;
                goto LABEL_32;
              }
              ++v33;
            }
            while (v39 >= v38 && &v22[v33] != v23);
            v27 = v34;
          }
LABEL_41:
          *(_QWORD *)v27 = v22;
          *((_QWORD *)v27 + 1) = v23;
          *((_QWORD *)v27 + 2) = v32;
        }
      }
    }
  }
  return result;
}

const void **std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<long long> *>,std::__wrap_iter<std::vector<long long> *>,std::__equal_to &>(const void **a1, const void **a2)
{
  const void **v3;
  const void **v4;
  _BYTE *v5;
  size_t v6;
  _BYTE *v7;
  const void **v8;
  const void **v9;
  const void **v10;
  size_t v11;
  const void *v12;
  _BYTE *v13;
  void *v14;

  if (a1 == a2)
    return a2;
  v3 = a1;
  v4 = a1 + 3;
  if (a1 + 3 == a2)
    return a2;
  v5 = *a1;
  while (1)
  {
    v6 = (_BYTE *)*(v4 - 2) - v5;
    v7 = *v4;
    if (v6 == (_BYTE *)v4[1] - (_BYTE *)*v4 && !memcmp(v5, *v4, v6))
      break;
    v4 += 3;
    v3 += 3;
    v5 = v7;
    if (v4 == a2)
      return a2;
  }
  v8 = v4 - 3;
  if (v4 - 3 != a2)
  {
    v9 = v4 + 3;
    if (v9 == a2)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        while (1)
        {
          v11 = (_BYTE *)v8[1] - (_BYTE *)*v8;
          v12 = *v9;
          v13 = v9[1];
          if (v11 != v13 - (_BYTE *)*v9 || memcmp(*v8, *v9, v11))
            break;
          v10 = v8;
          v9 += 3;
          if (v9 == a2)
            return v10 + 3;
        }
        v10 = v8 + 3;
        v14 = (void *)v8[3];
        if (v14)
        {
          v8[4] = v14;
          operator delete(v14);
          *v10 = 0;
          v8[4] = 0;
          v8[5] = 0;
          v12 = *v9;
          v13 = v9[1];
        }
        v8[3] = v12;
        v8[4] = v13;
        v8[5] = v9[2];
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        v8 += 3;
        v9 += 3;
      }
      while (v9 != a2);
    }
    return v10 + 3;
  }
  return v3;
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator>(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, int a5, size_t __sz)
{
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *result;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  int v24;
  unint64_t v25;
  int64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;

  v8 = a3;
  v9 = a2;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(char **)a1;
  if (__sz <= (v11 - *(_QWORD *)a1) >> 3)
  {
    v19 = (_QWORD *)(a1 + 8);
    result = *(char **)(a1 + 8);
    v20 = (result - v12) >> 3;
    if (v20 >= __sz)
    {
      if (a2 == a4)
      {
        v27 = v12;
      }
      else
      {
        v27 = v12;
        do
        {
          v28 = *v8++;
          *(_QWORD *)v27 = v28;
          LODWORD(v28) = *((char *)v9 + 1);
          v9 = (_QWORD *)((char *)v9 + 1);
          if ((int)v28 <= -2)
          {
            do
            {
              v29 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v9 = (_QWORD *)((char *)v9 + v29);
              v8 += v29;
            }
            while (*(char *)v9 < -1);
          }
          v27 += 8;
        }
        while (v9 != a4);
      }
      v26 = v27 - v12;
      result = v12;
    }
    else
    {
      if (result - v12 < 1)
      {
        v22 = a2;
        v21 = a3;
      }
      else
      {
        v21 = a3;
        v22 = a2;
        do
        {
          v24 = *((char *)v22 + 1);
          v22 = (_QWORD *)((char *)v22 + 1);
          ++v21;
          if (v24 <= -2)
          {
            do
            {
              v25 = (__clz(__rbit64(((*v22 >> 7) & ~*v22 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v22 = (_QWORD *)((char *)v22 + v25);
              v21 += v25;
            }
            while (*(char *)v22 < -1);
          }
        }
        while (v20-- > 1);
        if (v22 == a2)
        {
          v22 = a2;
        }
        else
        {
          do
          {
            v30 = *v8++;
            *(_QWORD *)v12 = v30;
            LODWORD(v30) = *((char *)v9 + 1);
            v9 = (_QWORD *)((char *)v9 + 1);
            if ((int)v30 <= -2)
            {
              do
              {
                v31 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v9 = (_QWORD *)((char *)v9 + v31);
                v8 += v31;
              }
              while (*(char *)v9 < -1);
            }
            v12 += 8;
          }
          while (v9 != v22);
        }
      }
      v32 = result;
      while (v22 != a4)
      {
        v33 = *v21++;
        *(_QWORD *)v32 = v33;
        LODWORD(v33) = *((char *)v22 + 1);
        v22 = (_QWORD *)((char *)v22 + 1);
        if ((int)v33 <= -2)
        {
          do
          {
            v34 = (__clz(__rbit64(((*v22 >> 7) & ~*v22 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v22 = (_QWORD *)((char *)v22 + v34);
            v21 += v34;
          }
          while (*(char *)v22 < -1);
        }
        v32 += 8;
      }
      v26 = v32 - result;
    }
  }
  else
  {
    if (v12)
    {
      *(_QWORD *)(a1 + 8) = v12;
      operator delete(v12);
      v11 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 61)
      goto LABEL_47;
    v13 = v11 >> 2;
    if (v11 >> 2 <= __sz)
      v13 = __sz;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    if (v13 >> 61)
LABEL_47:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = 8 * v13;
    result = (char *)operator new(8 * v13);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v14];
    v16 = result;
    if (v9 != a4)
    {
      v16 = result;
      do
      {
        v17 = *v8++;
        *(_QWORD *)v16 = v17;
        LODWORD(v17) = *((char *)v9 + 1);
        v9 = (_QWORD *)((char *)v9 + 1);
        if ((int)v17 <= -2)
        {
          do
          {
            v18 = (__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v9 = (_QWORD *)((char *)v9 + v18);
            v8 += v18;
          }
          while (*(char *)v9 < -1);
        }
        v16 += 8;
      }
      while (v9 != a4);
    }
    v26 = v16 - result;
    v19 = (_QWORD *)(a1 + 8);
  }
  *v19 = &result[v26];
  return result;
}

char **std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &,std::__wrap_iter<std::vector<long long> *> &>(char ***a1, char ***a2, char ***a3, char ***a4, char ***a5)
{
  char **v6;
  char **v7;
  char **v10;
  uint64_t *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char ***v25;
  char **v26;
  uint64_t v27;

  v6 = *a1;
  v7 = *a2;
  if (*a1 == *a2)
    return v6;
  v10 = *a3;
  if (*a3 != *a4)
  {
    while (1)
    {
      v13 = (uint64_t *)*v10;
      v14 = (uint64_t *)v10[1];
      v15 = *v6;
      v16 = v6[1];
      if (*v10 != (char *)v14)
        break;
LABEL_12:
      if (v15 == v16)
      {
LABEL_21:
        v25 = a3;
        goto LABEL_24;
      }
      v21 = v15 + 8;
      while (v13 != v14)
      {
        v22 = *v13;
        v23 = *((_QWORD *)v21 - 1);
        if (*v13 < v23)
          break;
        ++v13;
        v24 = v23 < v22 || v21 == v16;
        v21 += 8;
        if (v24)
          goto LABEL_21;
      }
      *a3 = v10 + 3;
      v6 = *a1;
      v7 = *a2;
      if (*a1 == *a2)
        return v6;
LABEL_27:
      v10 = *a3;
      if (*a3 == *a4)
        goto LABEL_28;
    }
    v17 = 0;
    while (&v15[v17 * 8] != v16)
    {
      v18 = *(_QWORD *)&v15[v17 * 8];
      v19 = v13[v17];
      if (v18 < v19)
        break;
      ++v17;
      if (v19 < v18 || &v13[v17] == v14)
        goto LABEL_12;
    }
    v25 = a5;
    if (*a5 != v6)
    {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(*a5, v15, v16, (v16 - v15) >> 3);
      v6 = *a1;
      v25 = a5;
    }
LABEL_24:
    *a1 = v6 + 3;
    *v25 += 3;
    v6 = *a1;
    v7 = *a2;
    if (*a1 == *a2)
      return v6;
    goto LABEL_27;
  }
LABEL_28:
  v26 = *a5;
  if (v6 == v7)
    return v6;
  v27 = 0;
  do
  {
    if (v6 != v26)
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&v26[v27], v6[v27], v6[v27 + 1], (v6[v27 + 1] - v6[v27]) >> 3);
    v27 += 3;
  }
  while (&v6[v27] != v7);
  return v7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  operations_research::sat::PresolveContext *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  operations_research::sat::PresolveContext *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  operations_research::sat::PresolveContext *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  operations_research::sat::PresolveContext *v31;
  uint64_t v32;
  uint64_t *v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  operations_research::sat::PresolveContext *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  operations_research::sat::PresolveContext *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  operations_research::sat::PresolveContext *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  operations_research::sat::PresolveContext *v51;
  uint64_t v52;
  uint64_t *v53;
  int *v54;
  int *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  operations_research::sat::PresolveContext *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  operations_research::sat::PresolveContext *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  operations_research::sat::PresolveContext *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  operations_research::sat::PresolveContext *v72;
  uint64_t v73;
  uint64_t *v74;
  int *v75;
  int *v76;
  BOOL v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  operations_research::sat::PresolveContext *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  operations_research::sat::PresolveContext *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  operations_research::sat::PresolveContext *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  operations_research::sat::PresolveContext *v95;
  uint64_t v96;
  uint64_t *v97;
  int *v98;
  uint64_t v99;
  operations_research::sat::PresolveContext *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  operations_research::sat::PresolveContext *v105;
  uint64_t v106;
  uint64_t *v107;
  int *v108;
  uint64_t v109;
  operations_research::sat::PresolveContext *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  operations_research::sat::PresolveContext *v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  operations_research::sat::PresolveContext *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  operations_research::sat::PresolveContext *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  operations_research::sat::PresolveContext *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  operations_research::sat::PresolveContext *v136;
  uint64_t v137;
  uint64_t *v138;
  int *v139;
  uint64_t v140;
  uint64_t v141;
  operations_research::sat::PresolveContext *v142;
  uint64_t v143;
  uint64_t *v144;
  int *v145;
  BOOL v147;
  uint64_t v148;
  int *v149;
  int *v150;
  int *v151;
  uint64_t v152;
  operations_research::sat::PresolveContext *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  operations_research::sat::PresolveContext *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  operations_research::sat::PresolveContext *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  operations_research::sat::PresolveContext *v168;
  uint64_t v169;
  uint64_t *v170;
  int64_t v171;
  int64_t v172;
  int64_t v173;
  uint64_t v174;
  int *v175;
  uint64_t v176;
  uint64_t v177;
  operations_research::sat::PresolveContext *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  operations_research::sat::PresolveContext *v183;
  uint64_t v184;
  int *v185;
  uint64_t v186;
  uint64_t v187;
  operations_research::sat::PresolveContext *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  operations_research::sat::PresolveContext *v192;
  uint64_t v193;
  uint64_t *v194;
  int *v195;
  uint64_t v196;
  uint64_t v197;
  operations_research::sat::PresolveContext *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  operations_research::sat::PresolveContext *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  operations_research::sat::PresolveContext *v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  operations_research::sat::PresolveContext *v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  int *v215;
  BOOL v216;
  uint64_t v217;
  int *v218;
  int64_t v219;
  int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  operations_research::sat::PresolveContext *v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  operations_research::sat::PresolveContext *v229;
  uint64_t v230;
  uint64_t *v231;
  int *v232;
  uint64_t v233;
  unint64_t v234;
  int *v235;
  uint64_t v236;
  operations_research::sat::PresolveContext *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  operations_research::sat::PresolveContext *v242;
  uint64_t v243;
  uint64_t *v244;
  int v245;
  uint64_t v246;
  int *v247;
  uint64_t v248;
  operations_research::sat::PresolveContext *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  operations_research::sat::PresolveContext *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  operations_research::sat::PresolveContext *v257;
  uint64_t v258;
  int *v259;
  uint64_t v260;
  operations_research::sat::PresolveContext *v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  operations_research::sat::PresolveContext *v266;
  uint64_t v267;
  int v268;
  int *v269;
  uint64_t v270;
  operations_research::sat::PresolveContext *v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  operations_research::sat::PresolveContext *v276;
  uint64_t v277;
  uint64_t *v278;
  int v279;
  int *v280;
  int *v281;
  unint64_t v282;
  uint64_t v283;
  int *v284;
  int v285;
  int64_t v287;
  int v288;
  int *v289;
  int *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int *v294;

  v294 = (int *)result;
LABEL_2:
  v284 = a2 - 1;
  v280 = a2 - 3;
  v281 = a2 - 2;
  v8 = v294;
  v289 = a2;
  while (2)
  {
    v294 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v140 = *v294;
        v141 = *a3;
        v142 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
        v143 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v142 + 6) + 56) + 8 * *(a2 - 1) + 8);
        if (*(_DWORD *)(v143 + 60) == 19)
          v144 = *(uint64_t **)(v143 + 48);
        else
          v144 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        v256 = operations_research::sat::PresolveContext::MinOf(v142, (const char *)*((unsigned int *)v144 + 4));
        v257 = *(operations_research::sat::PresolveContext **)(v141 + 16);
        v258 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v257 + 6) + 56) + 8 * v140 + 8);
        if (*(_DWORD *)(v258 + 60) == 19)
        {
          result = operations_research::sat::PresolveContext::MinOf(v257, (const char *)*(unsigned int *)(*(_QWORD *)(v258 + 48) + 16));
          if (v256 >= result)
            return result;
        }
        else
        {
          result = operations_research::sat::PresolveContext::MinOf(v257, (const char *)qword_25408AE50);
          if (v256 >= result)
            return result;
        }
        v279 = *v294;
        *v294 = *(a2 - 1);
        *(a2 - 1) = v279;
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v294, v294 + 1, v284, a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v294, v294 + 1, v294 + 2, v284, a3);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,0>(v294, v294 + 1, v294 + 2, v294 + 3, v284, a3);
      default:
        if (v9 <= 95)
        {
          v145 = v294 + 1;
          v147 = v294 == a2 || v145 == a2;
          if ((a5 & 1) != 0)
          {
            if (v147)
              return result;
            v148 = 0;
            v149 = v294;
            while (1)
            {
              v151 = v145;
              v152 = *a3;
              v153 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              v154 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v153 + 6) + 56) + 8 * v149[1] + 8);
              v155 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v154 + 60) == 19)
                v155 = *(uint64_t **)(v154 + 48);
              v156 = *v149;
              v157 = operations_research::sat::PresolveContext::MinOf(v153, (const char *)*((unsigned int *)v155 + 4));
              v158 = *(operations_research::sat::PresolveContext **)(v152 + 16);
              v159 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v158 + 6) + 56) + 8 * v156 + 8);
              if (*(_DWORD *)(v159 + 60) == 19)
              {
                result = operations_research::sat::PresolveContext::MinOf(v158, (const char *)*(unsigned int *)(*(_QWORD *)(v159 + 48) + 16));
                if (v157 < result)
                {
LABEL_124:
                  v160 = *v151;
                  v161 = v148;
                  do
                  {
                    *(int *)((char *)v294 + v161 + 4) = *(int *)((char *)v294 + v161);
                    if (!v161)
                    {
                      v150 = v294;
                      goto LABEL_116;
                    }
                    v162 = *a3;
                    v163 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
                    v164 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v163 + 6) + 56) + 8 * v160 + 8);
                    v165 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                    if (*(_DWORD *)(v164 + 60) == 19)
                      v165 = *(uint64_t **)(v164 + 48);
                    v166 = *(int *)((char *)v294 + v161 - 4);
                    v167 = operations_research::sat::PresolveContext::MinOf(v163, (const char *)*((unsigned int *)v165 + 4));
                    v168 = *(operations_research::sat::PresolveContext **)(v162 + 16);
                    v169 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v168 + 6) + 56) + 8 * v166 + 8);
                    v170 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                    if (*(_DWORD *)(v169 + 60) == 19)
                      v170 = *(uint64_t **)(v169 + 48);
                    result = operations_research::sat::PresolveContext::MinOf(v168, (const char *)*((unsigned int *)v170 + 4));
                    v161 -= 4;
                  }
                  while (v167 < result);
                  v150 = (int *)((char *)v294 + v161 + 4);
LABEL_116:
                  *v150 = v160;
                  a2 = v289;
                }
              }
              else
              {
                result = operations_research::sat::PresolveContext::MinOf(v158, (const char *)qword_25408AE50);
                if (v157 < result)
                  goto LABEL_124;
              }
              v145 = v151 + 1;
              v148 += 4;
              v149 = v151;
              if (v151 + 1 == a2)
                return result;
            }
          }
          if (v147)
            return result;
          while (1)
          {
            v259 = v145;
            v260 = *a3;
            v261 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
            v262 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v261 + 6) + 56) + 8 * v294[1] + 8);
            v263 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v262 + 60) == 19)
              v263 = *(uint64_t **)(v262 + 48);
            v264 = *v294;
            v265 = operations_research::sat::PresolveContext::MinOf(v261, (const char *)*((unsigned int *)v263 + 4));
            v266 = *(operations_research::sat::PresolveContext **)(v260 + 16);
            v267 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v266 + 6) + 56) + 8 * v264 + 8);
            if (*(_DWORD *)(v267 + 60) == 19)
            {
              result = operations_research::sat::PresolveContext::MinOf(v266, (const char *)*(unsigned int *)(*(_QWORD *)(v267 + 48) + 16));
              if (v265 < result)
              {
LABEL_210:
                v268 = *v259;
                v269 = v259;
                do
                {
                  *v269 = *(v269 - 1);
                  v270 = *a3;
                  v271 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
                  v272 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v271 + 6) + 56) + 8 * v268 + 8);
                  v273 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                  if (*(_DWORD *)(v272 + 60) == 19)
                    v273 = *(uint64_t **)(v272 + 48);
                  v274 = *(v269 - 2);
                  v275 = operations_research::sat::PresolveContext::MinOf(v271, (const char *)*((unsigned int *)v273 + 4));
                  v276 = *(operations_research::sat::PresolveContext **)(v270 + 16);
                  v277 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v276 + 6) + 56) + 8 * v274 + 8);
                  v278 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                  if (*(_DWORD *)(v277 + 60) == 19)
                    v278 = *(uint64_t **)(v277 + 48);
                  result = operations_research::sat::PresolveContext::MinOf(v276, (const char *)*((unsigned int *)v278 + 4));
                  --v269;
                }
                while (v275 < result);
                *v269 = v268;
                a2 = v289;
              }
            }
            else
            {
              result = operations_research::sat::PresolveContext::MinOf(v266, (const char *)qword_25408AE50);
              if (v265 < result)
                goto LABEL_210;
            }
            v145 = v259 + 1;
            v294 = v259;
            if (v259 + 1 == a2)
              return result;
          }
        }
        if (!a4)
        {
          if (v294 != a2)
          {
            v282 = v9;
            v283 = v10;
            v171 = (unint64_t)(v10 - 2) >> 1;
            v172 = v171;
            do
            {
              v173 = v172;
              if (v171 >= v172)
              {
                v174 = (2 * v172) | 1;
                v175 = &v294[v174];
                v176 = 2 * v172 + 2;
                v287 = v172;
                if (v176 < v10)
                {
                  v177 = *a3;
                  v178 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
                  v179 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v178 + 6) + 56) + 8 * *v175 + 8);
                  v180 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                  v181 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                  if (*(_DWORD *)(v179 + 60) == 19)
                    v181 = *(uint64_t **)(v179 + 48);
                  v182 = v175[1];
                  ++v175;
                  v292 = operations_research::sat::PresolveContext::MinOf(v178, (const char *)*((unsigned int *)v181 + 4));
                  v183 = *(operations_research::sat::PresolveContext **)(v177 + 16);
                  v184 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v183 + 6) + 56) + 8 * v182 + 8);
                  if (*(_DWORD *)(v184 + 60) == 19)
                    v180 = *(uint64_t **)(v184 + 48);
                  a2 = v289;
                  if (v292 < operations_research::sat::PresolveContext::MinOf(v183, (const char *)*((unsigned int *)v180 + 4)))v174 = v176;
                  else
                    v175 = &v294[v174];
                  v173 = v287;
                }
                v185 = &v294[v173];
                v186 = *v185;
                v187 = *a3;
                v188 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
                v189 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v188 + 6) + 56) + 8 * *v175 + 8);
                v190 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                if (*(_DWORD *)(v189 + 60) == 19)
                  v190 = *(uint64_t **)(v189 + 48);
                v191 = operations_research::sat::PresolveContext::MinOf(v188, (const char *)*((unsigned int *)v190 + 4));
                v192 = *(operations_research::sat::PresolveContext **)(v187 + 16);
                v193 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v192 + 6) + 56) + 8 * v186 + 8);
                v194 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                if (*(_DWORD *)(v193 + 60) == 19)
                  v194 = *(uint64_t **)(v193 + 48);
                result = operations_research::sat::PresolveContext::MinOf(v192, (const char *)*((unsigned int *)v194 + 4));
                v173 = v287;
                if (v191 >= result)
                {
                  v285 = *v185;
                  do
                  {
                    v195 = v175;
                    *v185 = *v175;
                    if (v171 < v174)
                      break;
                    v196 = (2 * v174) | 1;
                    v175 = &v294[v196];
                    if (2 * v174 + 2 >= v10)
                    {
                      v174 = (2 * v174) | 1;
                    }
                    else
                    {
                      v197 = *a3;
                      v198 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
                      v199 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v198 + 6) + 56) + 8 * *v175 + 8);
                      v200 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                      if (*(_DWORD *)(v199 + 60) == 19)
                        v200 = *(uint64_t **)(v199 + 48);
                      v201 = v175[1];
                      ++v175;
                      v202 = operations_research::sat::PresolveContext::MinOf(v198, (const char *)*((unsigned int *)v200 + 4));
                      v203 = *(operations_research::sat::PresolveContext **)(v197 + 16);
                      v204 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v203 + 6) + 56) + 8 * v201 + 8);
                      v205 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                      if (*(_DWORD *)(v204 + 60) == 19)
                        v205 = *(uint64_t **)(v204 + 48);
                      if (v202 < operations_research::sat::PresolveContext::MinOf(v203, (const char *)*((unsigned int *)v205 + 4)))
                      {
                        v174 = 2 * v174 + 2;
                      }
                      else
                      {
                        v175 = &v294[v196];
                        v174 = (2 * v174) | 1;
                      }
                      v10 = v283;
                    }
                    v206 = *a3;
                    v207 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
                    v208 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v207 + 6) + 56) + 8 * *v175 + 8);
                    v209 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                    if (*(_DWORD *)(v208 + 60) == 19)
                      v209 = *(uint64_t **)(v208 + 48);
                    v210 = operations_research::sat::PresolveContext::MinOf(v207, (const char *)*((unsigned int *)v209 + 4));
                    v211 = *(operations_research::sat::PresolveContext **)(v206 + 16);
                    v212 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v211 + 6) + 56) + 8 * v285 + 8);
                    v213 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                    if (*(_DWORD *)(v212 + 60) == 19)
                      v213 = *(uint64_t **)(v212 + 48);
                    result = operations_research::sat::PresolveContext::MinOf(v211, (const char *)*((unsigned int *)v213 + 4));
                    v185 = v195;
                  }
                  while (v210 >= result);
                  v173 = v287;
                  *v195 = v285;
                  a2 = v289;
                }
              }
              v172 = v173 - 1;
            }
            while (v173);
            v214 = v282 >> 2;
            do
            {
              v217 = 0;
              v218 = v294;
              v288 = *v294;
              v219 = (unint64_t)(v214 - 2) >> 1;
              v290 = a2;
              do
              {
                v220 = &v218[v217 + 1];
                v221 = (2 * v217) | 1;
                v222 = 2 * v217 + 2;
                if (v222 < v214)
                {
                  v223 = *a3;
                  v224 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
                  v225 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v224 + 6) + 56) + 8 * *v220 + 8);
                  v226 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                  if (*(_DWORD *)(v225 + 60) == 19)
                    v226 = *(uint64_t **)(v225 + 48);
                  v227 = v220[1];
                  v228 = operations_research::sat::PresolveContext::MinOf(v224, (const char *)*((unsigned int *)v226 + 4));
                  v229 = *(operations_research::sat::PresolveContext **)(v223 + 16);
                  v230 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v229 + 6) + 56) + 8 * v227 + 8);
                  v231 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                  if (*(_DWORD *)(v230 + 60) == 19)
                    v231 = *(uint64_t **)(v230 + 48);
                  result = operations_research::sat::PresolveContext::MinOf(v229, (const char *)*((unsigned int *)v231 + 4));
                  if (v228 < result)
                  {
                    ++v220;
                    v221 = v222;
                  }
                  v219 = (unint64_t)(v214 - 2) >> 1;
                }
                *v218 = *v220;
                v218 = v220;
                v217 = v221;
              }
              while (v221 <= v219);
              v232 = v290 - 1;
              if (v220 == v290 - 1)
              {
                v215 = v290 - 1;
                *v220 = v288;
              }
              else
              {
                *v220 = *v232;
                v215 = v290 - 1;
                *v232 = v288;
                v233 = (char *)v220 - (char *)v294 + 4;
                if (v233 >= 5)
                {
                  v234 = (((unint64_t)v233 >> 2) - 2) >> 1;
                  v235 = &v294[v234];
                  v236 = *a3;
                  v237 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
                  v238 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v237 + 6) + 56) + 8 * *v235 + 8);
                  v239 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                  if (*(_DWORD *)(v238 + 60) == 19)
                    v239 = *(uint64_t **)(v238 + 48);
                  v240 = *v220;
                  v241 = operations_research::sat::PresolveContext::MinOf(v237, (const char *)*((unsigned int *)v239 + 4));
                  v242 = *(operations_research::sat::PresolveContext **)(v236 + 16);
                  v243 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v242 + 6) + 56) + 8 * v240 + 8);
                  v244 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                  if (*(_DWORD *)(v243 + 60) == 19)
                    v244 = *(uint64_t **)(v243 + 48);
                  result = operations_research::sat::PresolveContext::MinOf(v242, (const char *)*((unsigned int *)v244 + 4));
                  if (v241 < result)
                  {
                    v293 = v214;
                    v245 = *v220;
                    v246 = *v220;
                    do
                    {
                      v247 = v235;
                      *v220 = *v235;
                      if (!v234)
                        break;
                      v234 = (v234 - 1) >> 1;
                      v235 = &v294[v234];
                      v248 = *a3;
                      v249 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
                      v250 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v249 + 6) + 56) + 8 * *v235 + 8);
                      v251 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                      if (*(_DWORD *)(v250 + 60) == 19)
                        v251 = *(uint64_t **)(v250 + 48);
                      v252 = operations_research::sat::PresolveContext::MinOf(v249, (const char *)*((unsigned int *)v251 + 4));
                      v253 = *(operations_research::sat::PresolveContext **)(v248 + 16);
                      v254 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v253 + 6) + 56) + 8 * v246 + 8);
                      v255 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
                      if (*(_DWORD *)(v254 + 60) == 19)
                        v255 = *(uint64_t **)(v254 + 48);
                      result = operations_research::sat::PresolveContext::MinOf(v253, (const char *)*((unsigned int *)v255 + 4));
                      v220 = v247;
                    }
                    while (v252 < result);
                    *v247 = v245;
                    v214 = v293;
                  }
                }
              }
              v216 = v214-- <= 2;
              a2 = v215;
            }
            while (!v216);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v294[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x201)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v12, v294, v284, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_15;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v294, v12, v284, a3);
          v13 = v11;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v294 + 1, &v294[v13 - 1], v281, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v294 + 2, &v294[v13 + 1], v280, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(&v294[v13 - 1], v12, &v294[v13 + 1], a3);
          v14 = *v294;
          *v294 = v294[v13];
          v294[v13] = v14;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_15;
        }
        v15 = *a3;
        v16 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
        v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 6) + 56) + 8 * *(v294 - 1) + 8);
        v18 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v17 + 60) == 19)
          v18 = *(uint64_t **)(v17 + 48);
        v19 = *v294;
        v20 = operations_research::sat::PresolveContext::MinOf(v16, (const char *)*((unsigned int *)v18 + 4));
        v21 = *(operations_research::sat::PresolveContext **)(v15 + 16);
        v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v21 + 6) + 56) + 8 * v19 + 8);
        v23 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
        if (*(_DWORD *)(v22 + 60) == 19)
          v23 = *(uint64_t **)(v22 + 48);
        if (v20 >= operations_research::sat::PresolveContext::MinOf(v21, (const char *)*((unsigned int *)v23 + 4)))
        {
          v79 = *v294;
          v80 = *a3;
          v81 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          v82 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v81 + 6) + 56) + 8 * *v294 + 8);
          v83 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v82 + 60) == 19)
            v83 = *(uint64_t **)(v82 + 48);
          v84 = *v284;
          v85 = operations_research::sat::PresolveContext::MinOf(v81, (const char *)*((unsigned int *)v83 + 4));
          v86 = *(operations_research::sat::PresolveContext **)(v80 + 16);
          v87 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v86 + 6) + 56) + 8 * v84 + 8);
          v88 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v87 + 60) == 19)
            v88 = *(uint64_t **)(v87 + 48);
          result = operations_research::sat::PresolveContext::MinOf(v86, (const char *)*((unsigned int *)v88 + 4));
          if (v85 >= result)
          {
            v98 = v294 + 1;
            do
            {
              v8 = v98;
              if (v98 >= v289)
                break;
              v99 = *a3;
              v100 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              v101 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v100 + 6) + 56) + 8 * v79 + 8);
              v102 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v101 + 60) == 19)
                v102 = *(uint64_t **)(v101 + 48);
              v103 = *v8;
              v104 = operations_research::sat::PresolveContext::MinOf(v100, (const char *)*((unsigned int *)v102 + 4));
              v105 = *(operations_research::sat::PresolveContext **)(v99 + 16);
              v106 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v105 + 6) + 56) + 8 * v103 + 8);
              v107 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v106 + 60) == 19)
                v107 = *(uint64_t **)(v106 + 48);
              result = operations_research::sat::PresolveContext::MinOf(v105, (const char *)*((unsigned int *)v107 + 4));
              v98 = v8 + 1;
            }
            while (v104 >= result);
          }
          else
          {
            v8 = v294;
            do
            {
              v89 = *a3;
              v90 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              v91 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v90 + 6) + 56) + 8 * v79 + 8);
              v92 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v91 + 60) == 19)
                v92 = *(uint64_t **)(v91 + 48);
              v93 = v8[1];
              ++v8;
              v94 = operations_research::sat::PresolveContext::MinOf(v90, (const char *)*((unsigned int *)v92 + 4));
              v95 = *(operations_research::sat::PresolveContext **)(v89 + 16);
              v96 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v95 + 6) + 56) + 8 * v93 + 8);
              v97 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v96 + 60) == 19)
                v97 = *(uint64_t **)(v96 + 48);
              result = operations_research::sat::PresolveContext::MinOf(v95, (const char *)*((unsigned int *)v97 + 4));
            }
            while (v94 >= result);
          }
          v108 = v289;
          if (v8 < v289)
          {
            v108 = v289;
            do
            {
              v109 = *a3;
              v110 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              v111 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v110 + 6) + 56) + 8 * v79 + 8);
              v112 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v111 + 60) == 19)
                v112 = *(uint64_t **)(v111 + 48);
              v113 = *--v108;
              v114 = operations_research::sat::PresolveContext::MinOf(v110, (const char *)*((unsigned int *)v112 + 4));
              v115 = *(operations_research::sat::PresolveContext **)(v109 + 16);
              v116 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v115 + 6) + 56) + 8 * v113 + 8);
              v117 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v116 + 60) == 19)
                v117 = *(uint64_t **)(v116 + 48);
              result = operations_research::sat::PresolveContext::MinOf(v115, (const char *)*((unsigned int *)v117 + 4));
            }
            while (v114 < result);
          }
          while (v8 < v108)
          {
            v118 = *v8;
            *v8 = *v108;
            *v108 = v118;
            do
            {
              v120 = v8[1];
              ++v8;
              v119 = v120;
              v121 = *a3;
              v122 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              v123 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v122 + 6) + 56) + 8 * v79 + 8);
              v124 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v123 + 60) == 19)
                v124 = *(uint64_t **)(v123 + 48);
              v125 = operations_research::sat::PresolveContext::MinOf(v122, (const char *)*((unsigned int *)v124 + 4));
              v126 = *(operations_research::sat::PresolveContext **)(v121 + 16);
              v127 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v126 + 6) + 56) + 8 * v119 + 8);
              v128 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v127 + 60) == 19)
                v128 = *(uint64_t **)(v127 + 48);
            }
            while (v125 >= operations_research::sat::PresolveContext::MinOf(v126, (const char *)*((unsigned int *)v128 + 4)));
            do
            {
              v130 = *--v108;
              v129 = v130;
              v131 = *a3;
              v132 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              v133 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v132 + 6) + 56) + 8 * v79 + 8);
              v134 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v133 + 60) == 19)
                v134 = *(uint64_t **)(v133 + 48);
              v135 = operations_research::sat::PresolveContext::MinOf(v132, (const char *)*((unsigned int *)v134 + 4));
              v136 = *(operations_research::sat::PresolveContext **)(v131 + 16);
              v137 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v136 + 6) + 56) + 8 * v129 + 8);
              v138 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v137 + 60) == 19)
                v138 = *(uint64_t **)(v137 + 48);
              result = operations_research::sat::PresolveContext::MinOf(v136, (const char *)*((unsigned int *)v138 + 4));
            }
            while (v135 < result);
          }
          v139 = v8 - 1;
          if (v8 - 1 != v294)
            *v294 = *v139;
          a5 = 0;
          *v139 = v79;
          a2 = v289;
          continue;
        }
LABEL_15:
        v24 = 0;
        v25 = *v294;
        do
        {
          v26 = *a3;
          v27 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
          v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v27 + 6) + 56) + 8 * v294[v24 + 1] + 8);
          v29 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v28 + 60) == 19)
            v29 = *(uint64_t **)(v28 + 48);
          v30 = operations_research::sat::PresolveContext::MinOf(v27, (const char *)*((unsigned int *)v29 + 4));
          v31 = *(operations_research::sat::PresolveContext **)(v26 + 16);
          v32 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v31 + 6) + 56) + 8 * v25 + 8);
          v33 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
          if (*(_DWORD *)(v32 + 60) == 19)
            v33 = *(uint64_t **)(v32 + 48);
          ++v24;
        }
        while (v30 < operations_research::sat::PresolveContext::MinOf(v31, (const char *)*((unsigned int *)v33 + 4)));
        v291 = a4;
        v34 = &v294[v24];
        v35 = v289;
        if (v24 == 1)
        {
          v35 = v289;
          do
          {
            if (v34 >= v35)
              break;
            v45 = *--v35;
            v46 = *a3;
            v47 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
            v48 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v47 + 6) + 56) + 8 * v45 + 8);
            v49 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v48 + 60) == 19)
              v49 = *(uint64_t **)(v48 + 48);
            v50 = operations_research::sat::PresolveContext::MinOf(v47, (const char *)*((unsigned int *)v49 + 4));
            v51 = *(operations_research::sat::PresolveContext **)(v46 + 16);
            v52 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v51 + 6) + 56) + 8 * v25 + 8);
            v53 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v52 + 60) == 19)
              v53 = *(uint64_t **)(v52 + 48);
          }
          while (v50 >= operations_research::sat::PresolveContext::MinOf(v51, (const char *)*((unsigned int *)v53 + 4)));
        }
        else
        {
          do
          {
            v36 = *--v35;
            v37 = *a3;
            v38 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
            v39 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v38 + 6) + 56) + 8 * v36 + 8);
            v40 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v39 + 60) == 19)
              v40 = *(uint64_t **)(v39 + 48);
            v41 = operations_research::sat::PresolveContext::MinOf(v38, (const char *)*((unsigned int *)v40 + 4));
            v42 = *(operations_research::sat::PresolveContext **)(v37 + 16);
            v43 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 6) + 56) + 8 * v25 + 8);
            v44 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
            if (*(_DWORD *)(v43 + 60) == 19)
              v44 = *(uint64_t **)(v43 + 48);
          }
          while (v41 >= operations_research::sat::PresolveContext::MinOf(v42, (const char *)*((unsigned int *)v44 + 4)));
        }
        if (v34 >= v35)
        {
          v75 = v34 - 1;
          v76 = v294;
          if (v34 - 1 != v294)
            goto LABEL_51;
        }
        else
        {
          v54 = v34;
          v55 = v35;
          do
          {
            v56 = *v54;
            *v54 = *v55;
            *v55 = v56;
            do
            {
              v57 = v54[1];
              ++v54;
              v58 = *a3;
              v59 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              v60 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v59 + 6) + 56) + 8 * v57 + 8);
              v61 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v60 + 60) == 19)
                v61 = *(uint64_t **)(v60 + 48);
              v62 = operations_research::sat::PresolveContext::MinOf(v59, (const char *)*((unsigned int *)v61 + 4));
              v63 = *(operations_research::sat::PresolveContext **)(v58 + 16);
              v64 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v63 + 6) + 56) + 8 * v25 + 8);
              v65 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v64 + 60) == 19)
                v65 = *(uint64_t **)(v64 + 48);
            }
            while (v62 < operations_research::sat::PresolveContext::MinOf(v63, (const char *)*((unsigned int *)v65 + 4)));
            do
            {
              v66 = *--v55;
              v67 = *a3;
              v68 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
              v69 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v68 + 6) + 56) + 8 * v66 + 8);
              v70 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v69 + 60) == 19)
                v70 = *(uint64_t **)(v69 + 48);
              v71 = operations_research::sat::PresolveContext::MinOf(v68, (const char *)*((unsigned int *)v70 + 4));
              v72 = *(operations_research::sat::PresolveContext **)(v67 + 16);
              v73 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v72 + 6) + 56) + 8 * v25 + 8);
              v74 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
              if (*(_DWORD *)(v73 + 60) == 19)
                v74 = *(uint64_t **)(v73 + 48);
            }
            while (v71 >= operations_research::sat::PresolveContext::MinOf(v72, (const char *)*((unsigned int *)v74 + 4)));
          }
          while (v54 < v55);
          v75 = v54 - 1;
          v76 = v294;
          if (v54 - 1 != v294)
LABEL_51:
            *v76 = *v75;
        }
        *v75 = v25;
        v77 = v34 >= v35;
        a2 = v289;
        a4 = v291;
        if (!v77)
        {
LABEL_56:
          result = std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,false>(v294, v75, a3, v291, a5 & 1);
          a5 = 0;
          v8 = v75 + 1;
          continue;
        }
        v78 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v294, v75, a3);
        v8 = v75 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(v75 + 1, v289, a3);
        if (!(_DWORD)result)
        {
          if (v78)
            continue;
          goto LABEL_56;
        }
        a2 = v75;
        if (!v78)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,0>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  operations_research::sat::PresolveContext *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  operations_research::sat::PresolveContext *v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  uint64_t v23;
  operations_research::sat::PresolveContext *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  operations_research::sat::PresolveContext *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  operations_research::sat::PresolveContext *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  operations_research::sat::PresolveContext *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  operations_research::sat::PresolveContext *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  operations_research::sat::PresolveContext *v46;
  uint64_t v47;
  int v48;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(a1, a2, a3, a4, a6);
  v12 = *a4;
  v13 = *a6;
  v14 = *(operations_research::sat::PresolveContext **)(*a6 + 16);
  v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 6) + 56) + 8 * *a5 + 8);
  if (*(_DWORD *)(v15 + 60) == 19)
    v16 = *(uint64_t **)(v15 + 48);
  else
    v16 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v17 = operations_research::sat::PresolveContext::MinOf(v14, (const char *)*((unsigned int *)v16 + 4));
  v18 = *(operations_research::sat::PresolveContext **)(v13 + 16);
  v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 6) + 56) + 8 * v12 + 8);
  if (*(_DWORD *)(v19 + 60) == 19)
  {
    result = operations_research::sat::PresolveContext::MinOf(v18, (const char *)*(unsigned int *)(*(_QWORD *)(v19 + 48) + 16));
    if (v17 >= result)
      return result;
  }
  else
  {
    result = operations_research::sat::PresolveContext::MinOf(v18, (const char *)qword_25408AE50);
    if (v17 >= result)
      return result;
  }
  v21 = *a4;
  *a4 = *a5;
  *a5 = v21;
  v22 = *a3;
  v23 = *a6;
  v24 = *(operations_research::sat::PresolveContext **)(*a6 + 16);
  v25 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v24 + 6) + 56) + 8 * *a4 + 8);
  if (*(_DWORD *)(v25 + 60) == 19)
    v26 = *(uint64_t **)(v25 + 48);
  else
    v26 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v27 = operations_research::sat::PresolveContext::MinOf(v24, (const char *)*((unsigned int *)v26 + 4));
  v28 = *(operations_research::sat::PresolveContext **)(v23 + 16);
  v29 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v28 + 6) + 56) + 8 * v22 + 8);
  if (*(_DWORD *)(v29 + 60) == 19)
  {
    result = operations_research::sat::PresolveContext::MinOf(v28, (const char *)*(unsigned int *)(*(_QWORD *)(v29 + 48) + 16));
    if (v27 >= result)
      return result;
  }
  else
  {
    result = operations_research::sat::PresolveContext::MinOf(v28, (const char *)qword_25408AE50);
    if (v27 >= result)
      return result;
  }
  v30 = *a3;
  *a3 = *a4;
  *a4 = v30;
  v31 = *a2;
  v32 = *a6;
  v33 = *(operations_research::sat::PresolveContext **)(*a6 + 16);
  v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 6) + 56) + 8 * *a3 + 8);
  if (*(_DWORD *)(v34 + 60) == 19)
    v35 = *(uint64_t **)(v34 + 48);
  else
    v35 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v36 = operations_research::sat::PresolveContext::MinOf(v33, (const char *)*((unsigned int *)v35 + 4));
  v37 = *(operations_research::sat::PresolveContext **)(v32 + 16);
  v38 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v37 + 6) + 56) + 8 * v31 + 8);
  if (*(_DWORD *)(v38 + 60) == 19)
  {
    result = operations_research::sat::PresolveContext::MinOf(v37, (const char *)*(unsigned int *)(*(_QWORD *)(v38 + 48) + 16));
    if (v36 >= result)
      return result;
  }
  else
  {
    result = operations_research::sat::PresolveContext::MinOf(v37, (const char *)qword_25408AE50);
    if (v36 >= result)
      return result;
  }
  v39 = *a2;
  *a2 = *a3;
  *a3 = v39;
  v40 = *a1;
  v41 = *a6;
  v42 = *(operations_research::sat::PresolveContext **)(*a6 + 16);
  v43 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 6) + 56) + 8 * *a2 + 8);
  if (*(_DWORD *)(v43 + 60) == 19)
    v44 = *(uint64_t **)(v43 + 48);
  else
    v44 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v45 = operations_research::sat::PresolveContext::MinOf(v42, (const char *)*((unsigned int *)v44 + 4));
  v46 = *(operations_research::sat::PresolveContext **)(v41 + 16);
  v47 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v46 + 6) + 56) + 8 * v40 + 8);
  if (*(_DWORD *)(v47 + 60) != 19)
  {
    result = operations_research::sat::PresolveContext::MinOf(v46, (const char *)qword_25408AE50);
    if (v45 >= result)
      return result;
    goto LABEL_29;
  }
  result = operations_research::sat::PresolveContext::MinOf(v46, (const char *)*(unsigned int *)(*(_QWORD *)(v47 + 48) + 16));
  if (v45 < result)
  {
LABEL_29:
    v48 = *a1;
    *a1 = *a2;
    *a2 = v48;
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  operations_research::sat::PresolveContext *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  operations_research::sat::PresolveContext *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  operations_research::sat::PresolveContext *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  operations_research::sat::PresolveContext *v26;
  uint64_t v27;
  uint64_t result;
  int v29;
  uint64_t v30;
  uint64_t v31;
  operations_research::sat::PresolveContext *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  operations_research::sat::PresolveContext *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  operations_research::sat::PresolveContext *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  operations_research::sat::PresolveContext *v45;
  uint64_t v46;
  uint64_t v47;
  operations_research::sat::PresolveContext *v48;
  uint64_t v49;
  int v50;
  int v51;

  v8 = *a1;
  v9 = *a4;
  v10 = *(operations_research::sat::PresolveContext **)(*a4 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 6) + 56) + 8 * *a2 + 8);
  if (*(_DWORD *)(v11 + 60) == 19)
    v12 = *(uint64_t **)(v11 + 48);
  else
    v12 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v13 = operations_research::sat::PresolveContext::MinOf(v10, (const char *)*((unsigned int *)v12 + 4));
  v14 = *(operations_research::sat::PresolveContext **)(v9 + 16);
  v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 6) + 56) + 8 * v8 + 8);
  if (*(_DWORD *)(v15 + 60) == 19)
    v16 = *(uint64_t **)(v15 + 48);
  else
    v16 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v17 = operations_research::sat::PresolveContext::MinOf(v14, (const char *)*((unsigned int *)v16 + 4));
  v18 = *a2;
  v19 = *a4;
  v20 = *(operations_research::sat::PresolveContext **)(*a4 + 16);
  v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v20 + 6) + 56) + 8 * *a3 + 8);
  v22 = *(_DWORD *)(v21 + 60);
  if (v13 >= v17)
  {
    if (v22 == 19)
      v24 = *(uint64_t **)(v21 + 48);
    else
      v24 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    v35 = operations_research::sat::PresolveContext::MinOf(v20, (const char *)*((unsigned int *)v24 + 4));
    v36 = *(operations_research::sat::PresolveContext **)(v19 + 16);
    v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v36 + 6) + 56) + 8 * v18 + 8);
    if (*(_DWORD *)(v37 + 60) == 19)
    {
      result = operations_research::sat::PresolveContext::MinOf(v36, (const char *)*(unsigned int *)(*(_QWORD *)(v37 + 48) + 16));
      if (v35 >= result)
        return result;
    }
    else
    {
      result = operations_research::sat::PresolveContext::MinOf(v36, (const char *)qword_25408AE50);
      if (v35 >= result)
        return result;
    }
    v38 = *a2;
    *a2 = *a3;
    *a3 = v38;
    v39 = *a1;
    v40 = *a4;
    v41 = *(operations_research::sat::PresolveContext **)(v40 + 16);
    v42 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v41 + 6) + 56) + 8 * *a2 + 8);
    if (*(_DWORD *)(v42 + 60) == 19)
      v43 = *(uint64_t **)(v42 + 48);
    else
      v43 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    v47 = operations_research::sat::PresolveContext::MinOf(v41, (const char *)*((unsigned int *)v43 + 4));
    v48 = *(operations_research::sat::PresolveContext **)(v40 + 16);
    v49 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v48 + 6) + 56) + 8 * v39 + 8);
    if (*(_DWORD *)(v49 + 60) == 19)
    {
      result = operations_research::sat::PresolveContext::MinOf(v48, (const char *)*(unsigned int *)(*(_QWORD *)(v49 + 48) + 16));
      if (v47 >= result)
        return result;
    }
    else
    {
      result = operations_research::sat::PresolveContext::MinOf(v48, (const char *)qword_25408AE50);
      if (v47 >= result)
        return result;
    }
    v51 = *a1;
    *a1 = *a2;
    *a2 = v51;
    return result;
  }
  if (v22 == 19)
    v23 = *(uint64_t **)(v21 + 48);
  else
    v23 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v25 = operations_research::sat::PresolveContext::MinOf(v20, (const char *)*((unsigned int *)v23 + 4));
  v26 = *(operations_research::sat::PresolveContext **)(v19 + 16);
  v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 6) + 56) + 8 * v18 + 8);
  if (*(_DWORD *)(v27 + 60) == 19)
  {
    result = operations_research::sat::PresolveContext::MinOf(v26, (const char *)*(unsigned int *)(*(_QWORD *)(v27 + 48) + 16));
    v29 = *a1;
    if (v25 >= result)
      goto LABEL_15;
LABEL_22:
    *a1 = *a3;
    *a3 = v29;
    return result;
  }
  result = operations_research::sat::PresolveContext::MinOf(v26, (const char *)qword_25408AE50);
  v29 = *a1;
  if (v25 < result)
    goto LABEL_22;
LABEL_15:
  v30 = v29;
  *a1 = *a2;
  *a2 = v29;
  v31 = *a4;
  v32 = *(operations_research::sat::PresolveContext **)(v31 + 16);
  v33 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v32 + 6) + 56) + 8 * *a3 + 8);
  if (*(_DWORD *)(v33 + 60) == 19)
    v34 = *(uint64_t **)(v33 + 48);
  else
    v34 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v44 = operations_research::sat::PresolveContext::MinOf(v32, (const char *)*((unsigned int *)v34 + 4));
  v45 = *(operations_research::sat::PresolveContext **)(v31 + 16);
  v46 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v45 + 6) + 56) + 8 * v30 + 8);
  if (*(_DWORD *)(v46 + 60) == 19)
  {
    result = operations_research::sat::PresolveContext::MinOf(v45, (const char *)*(unsigned int *)(*(_QWORD *)(v46 + 48) + 16));
    if (v44 < result)
      goto LABEL_35;
  }
  else
  {
    result = operations_research::sat::PresolveContext::MinOf(v45, (const char *)qword_25408AE50);
    if (v44 < result)
    {
LABEL_35:
      v50 = *a2;
      *a2 = *a3;
      *a3 = v50;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(int *a1, int *a2, uint64_t *a3)
{
  int *v4;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  operations_research::sat::PresolveContext *v10;
  uint64_t v11;
  uint64_t *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  operations_research::sat::PresolveContext *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  operations_research::sat::PresolveContext *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  operations_research::sat::PresolveContext *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  operations_research::sat::PresolveContext *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  operations_research::sat::PresolveContext *v37;
  uint64_t v38;
  int v39;
  int *v40;
  int v41;
  int v42;

  v4 = a2;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a1;
      v9 = *a3;
      v10 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 6) + 56) + 8 * *(a2 - 1) + 8);
      if (*(_DWORD *)(v11 + 60) == 19)
        v12 = *(uint64_t **)(v11 + 48);
      else
        v12 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
      v36 = operations_research::sat::PresolveContext::MinOf(v10, (const char *)*((unsigned int *)v12 + 4));
      v37 = *(operations_research::sat::PresolveContext **)(v9 + 16);
      v38 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v37 + 6) + 56) + 8 * v8 + 8);
      if (*(_DWORD *)(v38 + 60) == 19)
      {
        if (v36 >= operations_research::sat::PresolveContext::MinOf(v37, (const char *)*(unsigned int *)(*(_QWORD *)(v38 + 48) + 16)))return 1;
      }
      else if (v36 >= operations_research::sat::PresolveContext::MinOf(v37, (const char *)qword_25408AE50))
      {
        return 1;
      }
      v39 = *a1;
      *a1 = *(v4 - 1);
      *(v4 - 1) = v39;
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v13 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a3);
      v14 = a1 + 3;
      if (a1 + 3 == v4)
        return 1;
      v15 = 0;
      v16 = 0;
      v40 = v4;
      break;
  }
  while (1)
  {
    v17 = *a3;
    v18 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
    v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v18 + 6) + 56) + 8 * *v14 + 8);
    v20 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    if (*(_DWORD *)(v19 + 60) == 19)
      v20 = *(uint64_t **)(v19 + 48);
    v21 = *v13;
    v22 = operations_research::sat::PresolveContext::MinOf(v18, (const char *)*((unsigned int *)v20 + 4));
    v23 = *(operations_research::sat::PresolveContext **)(v17 + 16);
    v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v23 + 6) + 56) + 8 * v21 + 8);
    v25 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    if (*(_DWORD *)(v24 + 60) == 19)
      v25 = *(uint64_t **)(v24 + 48);
    if (v22 < operations_research::sat::PresolveContext::MinOf(v23, (const char *)*((unsigned int *)v25 + 4)))
      break;
LABEL_21:
    v13 = v14;
    v15 += 4;
    if (++v14 == v4)
      return 1;
  }
  v42 = v16;
  v41 = *v14;
  v26 = v15;
  do
  {
    *(int *)((char *)a1 + v26 + 12) = *(int *)((char *)a1 + v26 + 8);
    if (v26 == -8)
    {
      v4 = v40;
      *a1 = v41;
      v16 = v42 + 1;
      if (v42 != 7)
        goto LABEL_21;
      return v14 + 1 == v4;
    }
    v27 = *a3;
    v28 = *(operations_research::sat::PresolveContext **)(*a3 + 16);
    v29 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v28 + 6) + 56) + 8 * v41 + 8);
    v30 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    if (*(_DWORD *)(v29 + 60) == 19)
      v30 = *(uint64_t **)(v29 + 48);
    v31 = *(int *)((char *)a1 + v26 + 4);
    v32 = operations_research::sat::PresolveContext::MinOf(v28, (const char *)*((unsigned int *)v30 + 4));
    v33 = *(operations_research::sat::PresolveContext **)(v27 + 16);
    v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 6) + 56) + 8 * v31 + 8);
    v35 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
    if (*(_DWORD *)(v34 + 60) == 19)
      v35 = *(uint64_t **)(v34 + 48);
    v26 -= 4;
  }
  while (v32 < operations_research::sat::PresolveContext::MinOf(v33, (const char *)*((unsigned int *)v35 + 4)));
  v4 = v40;
  *(int *)((char *)a1 + v26 + 12) = v41;
  v16 = v42 + 1;
  if (v42 != 7)
    goto LABEL_21;
  return v14 + 1 == v4;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  operations_research::sat::PresolveContext *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  operations_research::sat::PresolveContext *v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  operations_research::sat::PresolveContext *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  operations_research::sat::PresolveContext *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  operations_research::sat::PresolveContext *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  operations_research::sat::PresolveContext *v35;
  uint64_t v36;
  int v37;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveNoOverlap(operations_research::sat::ConstraintProto *)::$_0 &,int *>(a1, a2, a3, a5);
  v10 = *a3;
  v11 = *a5;
  v12 = *(operations_research::sat::PresolveContext **)(*a5 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 6) + 56) + 8 * *a4 + 8);
  if (*(_DWORD *)(v13 + 60) == 19)
    v14 = *(uint64_t **)(v13 + 48);
  else
    v14 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v15 = operations_research::sat::PresolveContext::MinOf(v12, (const char *)*((unsigned int *)v14 + 4));
  v16 = *(operations_research::sat::PresolveContext **)(v11 + 16);
  v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 6) + 56) + 8 * v10 + 8);
  if (*(_DWORD *)(v17 + 60) == 19)
  {
    result = operations_research::sat::PresolveContext::MinOf(v16, (const char *)*(unsigned int *)(*(_QWORD *)(v17 + 48) + 16));
    if (v15 >= result)
      return result;
  }
  else
  {
    result = operations_research::sat::PresolveContext::MinOf(v16, (const char *)qword_25408AE50);
    if (v15 >= result)
      return result;
  }
  v19 = *a3;
  *a3 = *a4;
  *a4 = v19;
  v20 = *a2;
  v21 = *a5;
  v22 = *(operations_research::sat::PresolveContext **)(*a5 + 16);
  v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v22 + 6) + 56) + 8 * *a3 + 8);
  if (*(_DWORD *)(v23 + 60) == 19)
    v24 = *(uint64_t **)(v23 + 48);
  else
    v24 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v25 = operations_research::sat::PresolveContext::MinOf(v22, (const char *)*((unsigned int *)v24 + 4));
  v26 = *(operations_research::sat::PresolveContext **)(v21 + 16);
  v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 6) + 56) + 8 * v20 + 8);
  if (*(_DWORD *)(v27 + 60) == 19)
  {
    result = operations_research::sat::PresolveContext::MinOf(v26, (const char *)*(unsigned int *)(*(_QWORD *)(v27 + 48) + 16));
    if (v25 >= result)
      return result;
  }
  else
  {
    result = operations_research::sat::PresolveContext::MinOf(v26, (const char *)qword_25408AE50);
    if (v25 >= result)
      return result;
  }
  v28 = *a2;
  *a2 = *a3;
  *a3 = v28;
  v29 = *a1;
  v30 = *a5;
  v31 = *(operations_research::sat::PresolveContext **)(*a5 + 16);
  v32 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v31 + 6) + 56) + 8 * *a2 + 8);
  if (*(_DWORD *)(v32 + 60) == 19)
    v33 = *(uint64_t **)(v32 + 48);
  else
    v33 = &operations_research::sat::_IntervalConstraintProto_default_instance_;
  v34 = operations_research::sat::PresolveContext::MinOf(v31, (const char *)*((unsigned int *)v33 + 4));
  v35 = *(operations_research::sat::PresolveContext **)(v30 + 16);
  v36 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v35 + 6) + 56) + 8 * v29 + 8);
  if (*(_DWORD *)(v36 + 60) == 19)
  {
    result = operations_research::sat::PresolveContext::MinOf(v35, (const char *)*(unsigned int *)(*(_QWORD *)(v36 + 48) + 16));
    if (v34 < result)
      goto LABEL_22;
  }
  else
  {
    result = operations_research::sat::PresolveContext::MinOf(v35, (const char *)qword_25408AE50);
    if (v34 < result)
    {
LABEL_22:
      v37 = *a1;
      *a1 = *a2;
      *a2 = v37;
    }
  }
  return result;
}

_QWORD **std::set<long long>::set[abi:ne180100]<long long const*>(_QWORD **a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = (uint64_t **)std::__tree<long long>::__find_equal<long long>(a1, v4, &v13, &v12, v6);
      if (!*v7)
      {
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = *v6;
        v9 = v13;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = v9;
        *v7 = v8;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v8 = *v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v8);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22DAEB23C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<long long>::__find_equal<long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = v18[4];
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = v22[4];
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

_QWORD *std::vector<long long>::vector<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = v6;
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      ++v6;
      v7 = v10;
    }
    while (v10 != a3);
    if (v8 >= 0x1FFFFFFFFFFFFFFFLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = operator new(8 * v6);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v6];
    do
    {
      *v12 = v5[4];
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v11 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v11);
      }
      ++v12;
      v5 = v14;
    }
    while (v14 != a3);
    a1[1] = v12;
  }
  return a1;
}

void sub_22DAEB510(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int **operations_research::sat::SatPostsolver::Clause@<X0>(operations_research::sat::SatPostsolver *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  int **result;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int *v28;

  v5 = a2;
  v6 = *((_QWORD *)this + 1);
  v7 = *(int *)(v6 + 4 * a2);
  v8 = a2 + 1;
  if (v8 >= (*((_QWORD *)this + 2) - v6) >> 2)
  {
    v9 = *((_DWORD *)this + 18);
    v10 = *((_QWORD *)this + 8);
    v11 = *((_QWORD *)this + 5);
    v12 = *((_QWORD *)this + 6);
    v13 = (char *)(v11 + 8 * (v10 >> 10));
    if (v12 != v11)
    {
LABEL_3:
      v14 = (char *)(*(_QWORD *)v13 + 4 * (v10 & 0x3FF));
      if ((_DWORD)v7)
        goto LABEL_4;
LABEL_9:
      v16 = (char **)v13;
      if (v12 == v11)
        goto LABEL_13;
      goto LABEL_10;
    }
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 4 * v8);
    v10 = *((_QWORD *)this + 8);
    v11 = *((_QWORD *)this + 5);
    v12 = *((_QWORD *)this + 6);
    v13 = (char *)(v11 + 8 * (v10 >> 10));
    if (v12 != v11)
      goto LABEL_3;
  }
  v14 = 0;
  if (!(_DWORD)v7)
    goto LABEL_9;
LABEL_4:
  v15 = v7 + ((uint64_t)&v14[-*(_QWORD *)v13] >> 2);
  if (v15 < 1)
  {
    v18 = 1023 - v15;
    v16 = (char **)&v13[-8 * (v18 >> 10)];
    v14 = &(*v16)[4 * (~(_WORD)v18 & 0x3FF)];
    if (v12 == v11)
      goto LABEL_13;
  }
  else
  {
    v16 = (char **)&v13[8 * ((unint64_t)v15 >> 10)];
    v14 = &(*v16)[4 * (v15 & 0x3FF)];
    if (v12 == v11)
    {
LABEL_13:
      v17 = 0;
      if (!v9)
        goto LABEL_16;
      goto LABEL_14;
    }
  }
LABEL_10:
  v17 = (char *)(*(_QWORD *)v13 + 4 * (v10 & 0x3FF));
  if (!v9)
  {
LABEL_16:
    result = (int **)std::vector<operations_research::sat::Literal>::vector<std::__deque_iterator<operations_research::sat::Literal,operations_research::sat::Literal const*,operations_research::sat::Literal const&,operations_research::sat::Literal const* const*,long,1024l>,0>(a3, v16, v14, v13, v17);
    v21 = *result;
    v22 = result[1];
    v23 = (char *)v22 - (char *)*result;
    if (v22 == *result)
      return result;
    goto LABEL_17;
  }
LABEL_14:
  v19 = ((uint64_t)&v17[-*(_QWORD *)v13] >> 2) + v9;
  if (v19 >= 1)
  {
    v13 += 8 * ((unint64_t)v19 >> 10);
    v17 = (char *)(*(_QWORD *)v13 + 4 * (v19 & 0x3FF));
    goto LABEL_16;
  }
  result = (int **)std::vector<operations_research::sat::Literal>::vector<std::__deque_iterator<operations_research::sat::Literal,operations_research::sat::Literal const*,operations_research::sat::Literal const&,operations_research::sat::Literal const* const*,long,1024l>,0>(a3, v16, v14, &v13[-8 * ((unint64_t)(1023 - v19) >> 10)], (char *)(*(_QWORD *)&v13[-8 * ((unint64_t)(1023 - v19) >> 10)]+ 4 * (~(1023 - (_WORD)v19) & 0x3FF)));
  v21 = *result;
  v28 = result[1];
  v23 = (char *)v28 - (char *)*result;
  if (v28 == *result)
    return result;
LABEL_17:
  v24 = 0;
  v25 = v23 >> 2;
  v26 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v5);
  if (v25 <= 1)
    v25 = 1;
  while (v21[v24] != v26)
  {
    if (v25 == ++v24)
      return result;
  }
  v27 = *v21;
  *v21 = v26;
  v21[v24] = v27;
  return result;
}

_QWORD *std::vector<operations_research::sat::Literal>::vector<std::__deque_iterator<operations_research::sat::Literal,operations_research::sat::Literal const*,operations_research::sat::Literal const&,operations_research::sat::Literal const* const*,long,1024l>,0>(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a5 != a3)
  {
    v7 = a3;
    v8 = a2;
    v9 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 2) + ((a4 - (char *)a2) << 7);
    v10 = (a3 - *a2) >> 2;
    v11 = v9 - v10;
    if (v9 != v10)
    {
      if (v11 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v12 = (char *)operator new(4 * v11);
      v13 = 0;
      *a1 = v12;
      a1[1] = v12;
      a1[2] = &v12[4 * v11];
      v14 = *v8;
      do
      {
        v15 = *(_DWORD *)v7;
        v7 += 4;
        *(_DWORD *)&v12[v13] = v15;
        if (v7 - v14 == 4096)
        {
          v16 = v8[1];
          ++v8;
          v14 = v16;
          v7 = v16;
        }
        v13 += 4;
      }
      while (v7 != a5);
      a1[1] = &v12[v13];
    }
  }
  return a1;
}

void sub_22DAEB7D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::vector<int>::__init_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::const_iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::const_iterator>(_DWORD *result, _QWORD *a2, int *a3, _QWORD *a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v7;
  int v11;
  int v12;
  unint64_t v13;

  if (a6)
  {
    v7 = result;
    if (a6 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    result = operator new(4 * a6);
    *v7 = result;
    v7[1] = result;
    for (v7[2] = &result[a6]; a2 != a4; ++result)
    {
      v11 = *a3++;
      *result = v11;
      v12 = *((char *)a2 + 1);
      a2 = (_QWORD *)((char *)a2 + 1);
      if (v12 <= -2)
      {
        do
        {
          v13 = (__clz(__rbit64(((*a2 >> 7) & ~*a2 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          a2 = (_QWORD *)((char *)a2 + v13);
          a3 += v13;
        }
        while (*(char *)a2 < -1);
      }
    }
    v7[1] = result;
  }
  return result;
}

void sub_22DAEB8C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::vector<operations_research::sat::Literal>>::__push_back_slow_path<std::vector<operations_research::sat::Literal> const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_22DAEBACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t google::MakeCheckOpString<operations_research::sat::ConstraintProto::ConstraintCase,operations_research::sat::ConstraintProto::ConstraintCase>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DAEBB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::find_or_prepare_insert<std::pair<int,int>>(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;

  v2 = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v3)))
     + v4;
  v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  while (1)
  {
    v9 = v7 & v8;
    v10 = *(_QWORD *)(*a1 + (v7 & v8));
    v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11)
      break;
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::prepare_insert(a1, v6);
    v2 += 8;
    v7 = v2 + v9;
  }
  while (1)
  {
    v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    v13 = (int *)(a1[1] + 8 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v15 == (_DWORD)v3 && v14 == (_DWORD)v4)
      return v12;
    v11 &= v11 - 1;
    if (!v11)
      goto LABEL_8;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v25 = a1[4];
    if (!v25)
      return;
LABEL_21:
    *((_QWORD *)v25 + 4) = v14 >> 3;
    *((_QWORD *)v25 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[8 * (_QWORD)v13];
      v19 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(unsigned int *)v18)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(unsigned int *)v18)))
          + *((unsigned int *)v18 + 1);
      v20 = ((v19 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v19);
      v21 = *a1;
      v22 = a1[3];
      v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      v24 = *(_QWORD *)&(*a1)[v23] & (~*(_QWORD *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v23 = (v15 + v23) & (unint64_t)v22;
          v24 = *(_QWORD *)&v21[v23] & (~*(_QWORD *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_QWORD *)&a1[1][8 * v16] = *(_QWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v25 = a1[4];
  if (v25)
    goto LABEL_21;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v30 = *(_QWORD *)(result + 32);
    if (!v30)
      return result;
LABEL_26:
    *(_QWORD *)(v30 + 32) = v15 >> 3;
    *(_QWORD *)(v30 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(unsigned int *)(*(_QWORD *)(result + 8) + 8 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(unsigned int *)(*(_QWORD *)(result + 8) + 8 * v14))))
          + *(unsigned int *)(*(_QWORD *)(result + 8) + 8 * v14 + 4);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          *(_QWORD *)(v25 + 8 * v18) = *(_QWORD *)(v25 + 8 * v14);
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v26 = *(_QWORD *)(v25 + 8 * v14);
          *(_QWORD *)(v25 + 8 * v14) = *(_QWORD *)(v25 + 8 * v18);
          *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v27 = v14 - (v14 >> 3);
  v28 = v14 == 7;
  v29 = 6;
  if (!v28)
    v29 = v27;
  *(_QWORD *)(result + 40) = v29 - *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 32);
  if (v30)
    goto LABEL_26;
  return result;
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::const_reference __x)
{
  int *v3;
  std::vector<int>::pointer end;
  char *begin;
  int64_t v7;
  uint64_t v8;
  int *v9;
  int *value;
  int64_t v11;
  uint64_t v12;
  std::vector<int>::pointer v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::pointer v16;
  unint64_t v17;
  unint64_t v18;
  std::vector<int>::pointer v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  const int *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int *v31;
  int *v32;
  unint64_t v33;
  std::vector<int>::pointer v34;
  char *v35;
  int *v36;
  char *v37;
  unint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  const int *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  std::vector<int>::pointer v47;
  int64_t v48;
  int *v49;
  size_t v50;
  int *v51;
  unint64_t v52;
  char *v53;
  int *v54;
  int v55;

  v3 = (int *)__x;
  begin = (char *)this->__begin_;
  end = this->__end_;
  v7 = (char *)__position.__i_ - (char *)this->__begin_;
  v8 = v7 >> 2;
  v9 = (std::vector<int>::pointer)((char *)this->__begin_ + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  value = this->__end_cap_.__value_;
  if (end < value)
  {
    if (v9 == end)
    {
      *v9 = *__x;
      this->__end_ = v9 + 1;
      return (std::vector<int>::iterator)v9;
    }
    v11 = (char *)end - (char *)(v9 + 1);
    v12 = v11 >> 2;
    v13 = end - 1;
    if ((unint64_t)end < 4)
    {
      v19 = this->__end_;
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = &begin[v14];
      v16 = (std::vector<int>::pointer)&begin[v14 + 4];
      if (end > v16)
        v16 = this->__end_;
      v17 = (unint64_t)v16 + ~(unint64_t)begin - v14;
      if (v17 < 0x2C)
      {
        v19 = this->__end_;
      }
      else
      {
        v18 = (char *)end - v15;
        v19 = this->__end_;
        if (v18 >= 0x20)
        {
          v20 = (v17 >> 2) + 1;
          v21 = v20 & 0x7FFFFFFFFFFFFFF8;
          v13 = (std::vector<int>::pointer)((char *)v13 + v21 * 4);
          v19 = &end[v21];
          v22 = end + 4;
          v23 = (const int *)&begin[4 * v12 + 16 + 4 * v8];
          v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            *v22 = v25;
            v22 += 2;
            v23 += 8;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_50;
        }
      }
      do
      {
        v55 = *v13++;
        *v19++ = v55;
      }
      while (v13 < end);
    }
LABEL_50:
    this->__end_ = v19;
    if (end != v9 + 1)
      memmove(&end[-v12], v9, v11);
    if (v9 <= v3)
      v3 += this->__end_ > v3;
    *v9 = *v3;
    return (std::vector<int>::iterator)v9;
  }
  v26 = (((char *)end - begin) >> 2) + 1;
  if (v26 >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v28 = (char *)value - begin;
  if (v28 >> 1 > v26)
    v26 = v28 >> 1;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
    v29 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v29 = v26;
  if (v29)
  {
    if (v29 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v30 = (char *)operator new(4 * v29);
    v31 = (int *)&v30[4 * v8];
    v32 = (int *)&v30[4 * v29];
    if (v8 != v29)
      goto LABEL_28;
  }
  else
  {
    v30 = 0;
    v31 = (int *)(4 * v8);
    v32 = 0;
    if (v8)
      goto LABEL_28;
  }
  if (v7 < 1)
  {
    if (begin == (char *)__position.__i_)
      v52 = 1;
    else
      v52 = v7 >> 1;
    if (v52 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v53 = (char *)operator new(4 * v52);
    v31 = (int *)&v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    v32 = (int *)&v53[4 * v52];
    if (v30)
    {
      v54 = (int *)&v53[4 * v52];
      operator delete(v30);
      v32 = v54;
      v34 = this->__begin_;
      *v31 = *v3;
      v35 = (char *)(v31 + 1);
      v36 = v31;
      if (v34 != v9)
        goto LABEL_29;
      goto LABEL_35;
    }
  }
  else
  {
    v33 = v8 + 2;
    if (v8 >= -1)
      v33 = v8 + 1;
    v31 -= v33 >> 1;
  }
LABEL_28:
  v34 = (std::vector<int>::pointer)begin;
  *v31 = *v3;
  v35 = (char *)(v31 + 1);
  v36 = v31;
  if (begin != (char *)v9)
  {
LABEL_29:
    v37 = &begin[v7 & 0xFFFFFFFFFFFFFFFCLL];
    v38 = v37 - (char *)v34 - 4;
    v39 = v9;
    v36 = v31;
    if (v38 < 0x2C)
      goto LABEL_62;
    v39 = v9;
    v36 = v31;
    if ((unint64_t)(v37 - (char *)v31) < 0x20)
      goto LABEL_62;
    v40 = (v38 >> 2) + 1;
    v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    v39 = &v9[v41 / 0xFFFFFFFFFFFFFFFCLL];
    v36 = &v31[v41 / 0xFFFFFFFFFFFFFFFCLL];
    v42 = v31 - 4;
    v43 = (const int *)&begin[4 * v8 - 16];
    v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *(_OWORD *)v43;
      *((_OWORD *)v42 - 1) = *((_OWORD *)v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 8;
      v43 -= 8;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_62:
      do
      {
        v46 = *--v39;
        *--v36 = v46;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  v47 = this->__end_;
  v48 = (char *)v47 - (char *)v9;
  if (v47 != v9)
  {
    v49 = v9;
    v50 = (char *)v47 - (char *)v9;
    v51 = v32;
    memmove(v35, v49, v50);
    v32 = v51;
    v34 = this->__begin_;
  }
  this->__begin_ = v36;
  this->__end_ = (std::vector<int>::pointer)&v35[v48];
  this->__end_cap_.__value_ = v32;
  if (v34)
    operator delete(v34);
  return (std::vector<int>::iterator)v31;
}

void sub_22DAEC60C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(unint64_t a1, int *a2, char *a3, int *a4, uint64_t *a5, uint64_t a6, char a7)
{
  int *v9;
  int *v11;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int *v24;
  char *v25;
  int *v26;
  _QWORD *v27;
  int *v28;
  char *v29;
  int *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  int *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  int *v67;
  unint64_t v68;
  _QWORD *v69;
  int *v70;
  uint64_t v71;
  _QWORD *v72;
  int *v73;
  unint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int *v93;
  int v94;
  _QWORD *v95;
  int *v96;
  int *v97;
  int v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  int *v104;
  int *v105;
  int *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  _BOOL4 v117;
  int *v118;
  uint64_t v119;
  int *v121;
  int *v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int *v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  int *v137;
  int v138;
  uint64_t v139;
  int *v140;
  int *v141;
  int v142;
  uint64_t v143;
  int *v145;
  int v146;
  uint64_t v147;
  char *v149;
  int *v150;
  int *v151;
  int v152;
  int v153;
  uint64_t v154;
  int v156;
  int *v157;
  int v158;
  uint64_t v159;
  int *v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v166;
  uint64_t v167;
  int *v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  int *v175;
  _QWORD *v176;
  int *v177;
  unint64_t v178;
  _QWORD *v179;
  int *v180;
  unint64_t v181;
  uint64_t v182;
  int *v183;
  int *v184;
  uint64_t v185;
  int **v186;
  uint64_t v187;
  int v188;
  int *v189;
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  int *v195;
  int *v196;
  int *v197;
  int *v198;
  int v199;
  int *v200;
  int v201;
  uint64_t v202;
  int *v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  int *v208;
  uint64_t v209;
  unint64_t v210;
  int *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v215;
  int v216;
  uint64_t v217;
  int *v218;
  uint64_t *v219;
  int *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int *v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  BOOL v232;
  int *v233;
  int *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  int *v241;
  unint64_t v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  int *v250;
  unint64_t v251;
  int v252;
  uint64_t v253;
  int *v255;
  uint64_t v256;
  _QWORD *v257;
  int *v258;
  uint64_t v259;
  _QWORD *v260;
  int *v261;
  unint64_t v262;
  _QWORD *v263;
  int *v264;
  uint64_t v265;
  int **v266;
  unint64_t v267;
  int *v268;
  int *v269;
  uint64_t v270;
  uint64_t v271;
  __int16 v272;
  int **v273;
  unint64_t v274;
  int *v275;
  int *v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  int *v282;
  int *v283;
  int *v284;
  int v285;
  uint64_t v286;
  BOOL v287;
  int *v288;

  if (a4 == a2)
    return;
  v9 = a4;
  v11 = a2;
  while (2)
  {
    v13 = (_QWORD)&a3[-a1] << 7;
    v14 = *(int **)a3;
    v15 = (uint64_t)v9 - *(_QWORD *)a3;
    v16 = v15 >> 2;
    v17 = *(int **)a1;
    v18 = (uint64_t)v11 - *(_QWORD *)a1;
    v19 = v18 >> 2;
    v20 = (v15 >> 2) + v13 - (v18 >> 2);
    switch(v20)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (v9 == v14)
          v9 = (int *)(*((_QWORD *)a3 - 1) + 4096);
        v169 = *(v9 - 1);
        v170 = *v11;
        v171 = *(_QWORD *)(*(_QWORD *)(*a5 + 16) + 656);
        v172 = (*(_QWORD *)(v171 + 24 * v169 + 8) - *(_QWORD *)(v171 + 24 * v169)) >> 2;
        v173 = (*(_QWORD *)(v171 + 24 * v170 + 8) - *(_QWORD *)(v171 + 24 * v170)) >> 2;
        if ((int)v172 < (int)v173 || v169 < v170 && (_DWORD)v172 == (_DWORD)v173)
        {
          *v11 = v169;
          *(v9 - 1) = v170;
        }
        return;
      case 3uLL:
        if (v18 < -3)
        {
          v174 = (_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v19) >> 10));
          v175 = (int *)(*v174 + 4 * (~(1022 - (_WORD)v19) & 0x3FF));
          if (v9 != v14)
            goto LABEL_309;
        }
        else
        {
          v174 = (_QWORD *)(a1 + 8 * ((unint64_t)(v19 + 1) >> 10));
          v175 = (int *)(*v174 + 4 * (((_WORD)v19 + 1) & 0x3FF));
          if (v9 != v14)
            goto LABEL_309;
        }
        v256 = *((_QWORD *)a3 - 1);
        a3 -= 8;
        v9 = (int *)(v256 + 4096);
LABEL_309:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, v11, (uint64_t)v174, v175, (uint64_t)a3, v9 - 1, *(_QWORD *)(*(_QWORD *)(*a5 + 16) + 656));
        return;
      case 4uLL:
        if (v18 >= -3)
        {
          v176 = (_QWORD *)(a1 + 8 * ((unint64_t)(v19 + 1) >> 10));
          v177 = (int *)(*v176 + 4 * ((v19 + 1) & 0x3FF));
          v178 = v19 + 2;
          goto LABEL_312;
        }
        v176 = (_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v19) >> 10));
        v177 = (int *)(*v176 + 4 * (~(1022 - (_WORD)v19) & 0x3FF));
        if ((unint64_t)v18 >= 0xFFFFFFFFFFFFFFF9)
        {
          v178 = 1;
LABEL_312:
          v257 = (_QWORD *)(a1 + 8 * (v178 >> 10));
          v258 = (int *)(*v257 + 4 * (v178 & 0x3FF));
          if (v9 != v14)
            goto LABEL_314;
          goto LABEL_313;
        }
        v257 = (_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v19) >> 10));
        v258 = (int *)(*v257 + 4 * (~(1021 - (_WORD)v19) & 0x3FF));
        if (v9 == v14)
        {
LABEL_313:
          v259 = *((_QWORD *)a3 - 1);
          a3 -= 8;
          v9 = (int *)(v259 + 4096);
        }
LABEL_314:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, v11, (uint64_t)v176, v177, (uint64_t)v257, v258, (uint64_t)a3, v9 - 1, (uint64_t)a5);
        return;
      case 5uLL:
        if (v18 >= -3)
        {
          v179 = (_QWORD *)(a1 + 8 * ((unint64_t)(v19 + 1) >> 10));
          v180 = (int *)(*v179 + 4 * ((v19 + 1) & 0x3FF));
          v181 = v19 + 2;
LABEL_317:
          v260 = (_QWORD *)(a1 + 8 * (v181 >> 10));
          v261 = (int *)(*v260 + 4 * (v181 & 0x3FF));
          v262 = v19 + 3;
          goto LABEL_318;
        }
        v179 = (_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v19) >> 10));
        v180 = (int *)(*v179 + 4 * (~(1022 - (_WORD)v19) & 0x3FF));
        if ((unint64_t)v18 >= 0xFFFFFFFFFFFFFFF9)
        {
          v181 = 1;
          goto LABEL_317;
        }
        v260 = (_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v19) >> 10));
        v261 = (int *)(*v260 + 4 * (~(1021 - (_WORD)v19) & 0x3FF));
        if ((unint64_t)v18 >= 0xFFFFFFFFFFFFFFF5)
        {
          v262 = 1;
LABEL_318:
          v263 = (_QWORD *)(a1 + 8 * (v262 >> 10));
          v264 = (int *)(*v263 + 4 * (v262 & 0x3FF));
          if (v9 != v14)
            goto LABEL_320;
          goto LABEL_319;
        }
        v263 = (_QWORD *)(a1 - 8 * ((unint64_t)(1020 - v19) >> 10));
        v264 = (int *)(*v263 + 4 * (~(1020 - (_WORD)v19) & 0x3FF));
        if (v9 == v14)
        {
LABEL_319:
          v265 = *((_QWORD *)a3 - 1);
          a3 -= 8;
          v9 = (int *)(v265 + 4096);
        }
LABEL_320:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(a1, v11, (uint64_t)v179, v180, (uint64_t)v260, v261, (uint64_t)v263, v264, (uint64_t)a3, v9 - 1, (uint64_t)a5);
        return;
      default:
        if ((uint64_t)v20 <= 23)
        {
          v182 = *a5;
          if ((a7 & 1) != 0)
          {
            v183 = v11 + 1;
            if ((char *)(v11 + 1) - (char *)v17 == 4096)
            {
              v184 = *(int **)(a1 + 8);
              a1 += 8;
              v17 = v184;
              v183 = v184;
            }
            if (v183 == v9)
              return;
            v185 = *(_QWORD *)(*(_QWORD *)(v182 + 16) + 656);
            while (1)
            {
              v186 = (int **)a1;
              v187 = (uint64_t)v183;
              if (v183 == v17)
              {
                v186 = (int **)(a1 - 8);
                v187 = *(_QWORD *)(a1 - 8) + 4096;
              }
              v190 = *(_DWORD *)(v187 - 4);
              v189 = (int *)(v187 - 4);
              v188 = v190;
              v191 = *v183;
              v192 = (*(_QWORD *)(v185 + 24 * v191 + 8) - *(_QWORD *)(v185 + 24 * v191)) >> 2;
              v193 = (*(_QWORD *)(v185 + 24 * v190 + 8) - *(_QWORD *)(v185 + 24 * v190)) >> 2;
              if ((int)v192 < (int)v193 || (v191 < v188 ? (v194 = (_DWORD)v192 == (_DWORD)v193) : (v194 = 0), v194))
              {
                *v183 = v188;
                v195 = v11;
                if (v189 != v11)
                {
                  v196 = *v186;
                  v195 = v189;
                  do
                  {
                    if (v195 == v196)
                    {
                      v198 = *--v186;
                      v196 = v198;
                      v197 = v198 + 1024;
                    }
                    else
                    {
                      v197 = v195;
                    }
                    v201 = *(v197 - 1);
                    v200 = v197 - 1;
                    v199 = v201;
                    v202 = (*(_QWORD *)(v185 + 24 * v201 + 8) - *(_QWORD *)(v185 + 24 * v201)) >> 2;
                    if ((int)v192 >= (int)v202 && (v191 >= v199 || (_DWORD)v192 != (_DWORD)v202))
                      goto LABEL_241;
                    *v195 = v199;
                    v195 = v200;
                  }
                  while (v200 != v11);
                  v195 = v11;
                }
LABEL_241:
                *v195 = v191;
                if ((char *)++v183 - (char *)v17 == 4096)
                {
LABEL_242:
                  v204 = *(int **)(a1 + 8);
                  a1 += 8;
                  v17 = v204;
                  v183 = v204;
                }
              }
              else if ((char *)++v183 - (char *)v17 == 4096)
              {
                goto LABEL_242;
              }
              if (v183 == v9)
                return;
            }
          }
          if (v18 < -3)
          {
            v267 = 1022 - v19;
            LOWORD(v19) = ~(1022 - v19);
            v266 = (int **)(a1 - 8 * (v267 >> 10));
          }
          else
          {
            v266 = (int **)(a1 + 8 * ((unint64_t)++v19 >> 10));
          }
          v268 = *v266;
          v269 = &(*v266)[v19 & 0x3FF];
          if (v269 == v9)
            return;
          v270 = *(_QWORD *)(*(_QWORD *)(v182 + 16) + 656);
          while (1)
          {
            v271 = v269 - v268;
            if ((char *)v269 - (char *)v268 < 5)
            {
              v274 = 1024 - v271;
              v272 = ~(_WORD)v274;
              v273 = &v266[-(v274 >> 10)];
            }
            else
            {
              v272 = v271 - 1;
              v273 = &v266[(unint64_t)(v271 - 1) >> 10];
            }
            v275 = *v273;
            v276 = &(*v273)[v272 & 0x3FF];
            v277 = *v269;
            v278 = *v276;
            v279 = (*(_QWORD *)(v270 + 24 * v277 + 8) - *(_QWORD *)(v270 + 24 * v277)) >> 2;
            v280 = (*(_QWORD *)(v270 + 24 * v278 + 8) - *(_QWORD *)(v270 + 24 * v278)) >> 2;
            if ((int)v279 < (int)v280)
              break;
            if (v277 < v278 && (_DWORD)v279 == (_DWORD)v280)
              break;
            if ((char *)++v269 - (char *)v268 == 4096)
              goto LABEL_351;
LABEL_331:
            if (v269 == v9)
              return;
          }
          v282 = v269;
          while (1)
          {
            v283 = v276;
            *v282 = v278;
            if (v276 == v275)
            {
              v284 = *--v273;
              v275 = v284;
              v276 = v284 + 1024;
            }
            v285 = *--v276;
            v278 = v285;
            v286 = (*(_QWORD *)(v270 + 24 * v285 + 8) - *(_QWORD *)(v270 + 24 * v285)) >> 2;
            v282 = v283;
            if ((int)v279 >= (int)v286)
            {
              v287 = v277 < v278 && (_DWORD)v279 == (_DWORD)v286;
              v282 = v283;
              if (!v287)
                break;
            }
          }
          *v283 = v277;
          if ((char *)++v269 - (char *)v268 != 4096)
            goto LABEL_331;
LABEL_351:
          v288 = v266[1];
          ++v266;
          v268 = v288;
          v269 = v288;
          goto LABEL_331;
        }
        if (!a6)
        {
          v205 = (v20 - 2) >> 1;
          v206 = 1023 - v205;
          do
          {
            v208 = v11;
            v207 = (char *)a1;
            if (v205)
            {
              v209 = ((uint64_t)v11 - *(_QWORD *)a1) >> 2;
              v210 = v205 + v209;
              if ((uint64_t)(v205 + v209) < 1)
              {
                v207 = (char *)(a1 - 8 * ((v206 - v209) >> 10));
                v208 = (int *)(*(_QWORD *)v207 + 4 * (~((_WORD)v206 - (_WORD)v209) & 0x3FF));
              }
              else
              {
                v207 = (char *)(a1 + 8 * (v210 >> 10));
                v208 = (int *)(*(_QWORD *)v207 + 4 * (v210 & 0x3FF));
              }
            }
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v11, *a5, v20, v207, v208);
            --v205;
            ++v206;
          }
          while (v205 != -1);
          v211 = *(int **)a3;
          v212 = ((uint64_t)v11 - *(_QWORD *)a1) >> 2;
          v213 = v13 + (((uint64_t)v9 - *(_QWORD *)a3) >> 2) - v212;
          if (v213 < 2)
            return;
LABEL_252:
          v215 = 0;
          v216 = *v11;
          v217 = *a5;
          v218 = v11;
          v219 = (uint64_t *)a1;
          while (1)
          {
            v220 = v218;
            if (v215 == -1)
            {
              v221 = -1;
              v215 = 0;
              if (v213 <= 0)
                goto LABEL_253;
            }
            else
            {
              v222 = v215 + 1 + (((uint64_t)v218 - *v219) >> 2);
              if (v222 < 1)
              {
                v223 = 1023 - v222;
                v219 -= v223 >> 10;
                v218 = (int *)(*v219 + 4 * (~(_WORD)v223 & 0x3FF));
                v221 = (2 * v215) | 1;
                v215 = 2 * v215 + 2;
                if (v215 >= v213)
                  goto LABEL_253;
              }
              else
              {
                v219 += (unint64_t)v222 >> 10;
                v218 = (int *)(*v219 + 4 * (v222 & 0x3FF));
                v221 = (2 * v215) | 1;
                v215 = 2 * v215 + 2;
                if (v215 >= v213)
                  goto LABEL_253;
              }
            }
            v224 = (uint64_t)v218 - *v219;
            v225 = v224 >> 2;
            if (v224 < -3)
              v226 = (int *)(v219[-((unint64_t)(1022 - v225) >> 10)] + 4 * (~(1022 - (_WORD)v225) & 0x3FF));
            else
              v226 = (int *)(*(uint64_t *)((char *)v219 + (((unint64_t)(v225 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * ((v225 + 1) & 0x3FF));
            v227 = *v218;
            v228 = *v226;
            v229 = *(_QWORD *)(*(_QWORD *)(v217 + 16) + 656);
            v230 = (*(_QWORD *)(v229 + 24 * v227 + 8) - *(_QWORD *)(v229 + 24 * v227)) >> 2;
            v231 = (*(_QWORD *)(v229 + 24 * v228 + 8) - *(_QWORD *)(v229 + 24 * v228)) >> 2;
            if ((int)v230 < (int)v231 || (v227 < v228 ? (v232 = (_DWORD)v230 == (_DWORD)v231) : (v232 = 0), v232))
            {
              if ((int *)((char *)++v218 - *v219) == (int *)4096)
              {
                v233 = (int *)v219[1];
                ++v219;
                v218 = v233;
              }
              goto LABEL_254;
            }
LABEL_253:
            v215 = v221;
LABEL_254:
            *v220 = *v218;
            if (v215 > (uint64_t)((unint64_t)(v213 - 2) >> 1))
            {
              if (v211 != v9)
              {
                v234 = v9 - 1;
                if (v218 != v9 - 1)
                  goto LABEL_275;
LABEL_302:
                *v218 = v216;
                goto LABEL_303;
              }
              v234 = (int *)(*((_QWORD *)a3 - 1) + 4092);
              if (v218 == v234)
                goto LABEL_302;
LABEL_275:
              *v218 = *v234;
              v235 = (uint64_t)(v218 + 1);
              v236 = *v219;
              if (v235 - *v219 == 4096)
              {
                v237 = v219[1];
                ++v219;
                v236 = v237;
                v235 = v237;
              }
              *v234 = v216;
              if ((int *)v235 != v11)
              {
                v238 = ((v235 - v236) >> 2) - v212 + (((_QWORD)v219 - a1) << 7);
                v239 = v238 - 2;
                if (v238 >= 2)
                {
                  v240 = v239 >> 1;
                  v241 = v11;
                  if (v239 < 2)
                    goto LABEL_282;
                  v242 = v240 + v212;
                  if ((uint64_t)(v240 + v212) < 1)
                  {
                    v241 = (int *)(*(_QWORD *)(a1 - 8 * ((1023 - v242) >> 10)) + 4 * (~(1023 - (_WORD)v242) & 0x3FF));
                    if (v236 == v235)
                      goto LABEL_283;
                  }
                  else
                  {
                    v241 = (int *)(*(_QWORD *)(a1 + ((v242 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v242 & 0x3FF));
LABEL_282:
                    if (v236 == v235)
LABEL_283:
                      v235 = *(v219 - 1) + 4096;
                  }
                  v243 = *v241;
                  v244 = *(_DWORD *)(v235 - 4);
                  v245 = *(_QWORD *)(*(_QWORD *)(*a5 + 16) + 656);
                  v246 = (*(_QWORD *)(v245 + 24 * *v241 + 8) - *(_QWORD *)(v245 + 24 * *v241)) >> 2;
                  v247 = (*(_QWORD *)(v245 + 24 * v244 + 8) - *(_QWORD *)(v245 + 24 * v244)) >> 2;
                  if ((int)v246 < (int)v247 || v243 < v244 && (_DWORD)v246 == (_DWORD)v247)
                  {
                    *(_DWORD *)(v235 - 4) = v243;
                    if (v239 >= 2)
                    {
                      while (1)
                      {
                        v248 = v240 - 1;
                        v249 = (v240 - 1) >> 1;
                        v250 = v11;
                        if (v240 >= 3)
                        {
                          v251 = v249 + v212;
                          if ((uint64_t)(v249 + v212) < 1)
                            v250 = (int *)(*(_QWORD *)(a1 - 8 * ((1023 - v251) >> 10))
                                         + 4 * (~(1023 - (_WORD)v251) & 0x3FF));
                          else
                            v250 = (int *)(*(_QWORD *)(a1 + ((v251 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v251 & 0x3FF));
                        }
                        v252 = *v250;
                        v253 = (*(_QWORD *)(v245 + 24 * v252 + 8) - *(_QWORD *)(v245 + 24 * v252)) >> 2;
                        if ((int)v253 >= (int)v247 && (v252 >= v244 || (_DWORD)v253 != (_DWORD)v247))
                          break;
                        *v241 = v252;
                        v240 = v249;
                        v241 = v250;
                        if (v248 <= 1)
                          goto LABEL_300;
                      }
                    }
                    v250 = v241;
LABEL_300:
                    *v250 = v244;
                  }
                }
              }
LABEL_303:
              if (v211 == v9)
              {
                v255 = (int *)*((_QWORD *)a3 - 1);
                a3 -= 8;
                v211 = v255;
                v9 = v255 + 1024;
              }
              --v9;
              if (v213-- <= 2)
                return;
              goto LABEL_252;
            }
          }
        }
        v21 = v20 >> 1;
        v22 = v19 + (v20 >> 1);
        if (v20 >= 0x81)
        {
          if (v22 < 1)
          {
            v31 = 1023 - v22;
            v23 = (_QWORD *)(a1 - 8 * (v31 >> 10));
            v24 = (int *)(*v23 + 4 * (~(_WORD)v31 & 0x3FF));
            if (v15 >= 5)
              goto LABEL_11;
          }
          else
          {
            v23 = (_QWORD *)(a1 + 8 * ((unint64_t)v22 >> 10));
            v24 = (int *)(*v23 + 4 * (v22 & 0x3FF));
            if (v15 >= 5)
            {
LABEL_11:
              v25 = &a3[8 * ((unint64_t)(v16 - 1) >> 10)];
              v26 = (int *)(*(_QWORD *)v25 + 4 * ((v16 - 1) & 0x3FF));
              goto LABEL_17;
            }
          }
          v25 = &a3[-8 * ((unint64_t)(1024 - v16) >> 10)];
          v26 = (int *)(*(_QWORD *)v25 + 4 * (~(1024 - (_WORD)v16) & 0x3FF));
LABEL_17:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, v11, (uint64_t)v23, v24, (uint64_t)v25, v26, *(_QWORD *)(*(_QWORD *)(*a5 + 16) + 656));
          v32 = (uint64_t)v11 - *(_QWORD *)a1;
          v33 = v32 >> 2;
          if (v32 < -3)
          {
            v34 = (_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v33) >> 10));
            v35 = (int *)(*v34 + 4 * (~(1022 - (_WORD)v33) & 0x3FF));
            v36 = v21 - 1;
            v37 = v33 + v21 - 1;
            if (v37 < 1)
            {
LABEL_19:
              v38 = 1023 - v37;
              v39 = (_QWORD *)(a1 - 8 * (v38 >> 10));
              v40 = (int *)(*v39 + 4 * (~(_WORD)v38 & 0x3FF));
              v41 = (uint64_t)v9 - *(_QWORD *)a3;
              v42 = v41 >> 2;
              if (v41 < 9)
              {
LABEL_20:
                v43 = 1025 - v42;
                v44 = &a3[-8 * (v43 >> 10)];
                v45 = (int *)(*(_QWORD *)v44 + 4 * (~(_WORD)v43 & 0x3FF));
                goto LABEL_24;
              }
LABEL_23:
              v47 = v42 - 2;
              v44 = &a3[8 * (v47 >> 10)];
              v45 = (int *)(*(_QWORD *)v44 + 4 * (v47 & 0x3FF));
LABEL_24:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)v34, v35, (uint64_t)v39, v40, (uint64_t)v44, v45, *(_QWORD *)(*(_QWORD *)(*a5 + 16) + 656));
              v48 = (uint64_t)v11 - *(_QWORD *)a1;
              v49 = v48 >> 2;
              if (v48 < -7)
              {
                v50 = (_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v49) >> 10));
                v51 = (int *)(*v50 + 4 * (~(1021 - (_WORD)v49) & 0x3FF));
                v52 = v21 + 1;
                v53 = v49 + v21 + 1;
                if (v53 < 1)
                {
LABEL_26:
                  v54 = 1023 - v53;
                  v55 = (_QWORD *)(a1 - 8 * (v54 >> 10));
                  v56 = (int *)(*v55 + 4 * (~(_WORD)v54 & 0x3FF));
                  v57 = (uint64_t)v9 - *(_QWORD *)a3;
                  v58 = v57 >> 2;
                  if (v57 < 13)
                  {
LABEL_27:
                    v59 = 1026 - v58;
                    v60 = &a3[-8 * (v59 >> 10)];
                    v61 = (int *)(*(_QWORD *)v60 + 4 * (~(_WORD)v59 & 0x3FF));
                    goto LABEL_31;
                  }
LABEL_30:
                  v63 = v58 - 3;
                  v60 = &a3[8 * (v63 >> 10)];
                  v61 = (int *)(*(_QWORD *)v60 + 4 * (v63 & 0x3FF));
LABEL_31:
                  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)v50, v51, (uint64_t)v55, v56, (uint64_t)v60, v61, *(_QWORD *)(*(_QWORD *)(*a5 + 16) + 656));
                  v64 = ((uint64_t)v11 - *(_QWORD *)a1) >> 2;
                  v65 = v64 + v36;
                  if ((uint64_t)(v64 + v36) < 1)
                  {
                    v89 = 1023 - v65;
                    v66 = (_QWORD *)(a1 - 8 * (v89 >> 10));
                    v67 = (int *)(*v66 + 4 * (~(_WORD)v89 & 0x3FF));
                    v68 = v64 + v21;
                    if ((uint64_t)(v64 + v21) >= 1)
                    {
LABEL_33:
                      v69 = (_QWORD *)(a1 + 8 * (v68 >> 10));
                      v70 = (int *)(*v69 + 4 * (v68 & 0x3FF));
                      v71 = v64 + v52;
                      if (v71 >= 1)
                      {
LABEL_34:
                        v72 = (_QWORD *)(a1 + 8 * ((unint64_t)v71 >> 10));
                        v73 = (int *)(*v72 + 4 * (v71 & 0x3FF));
                        goto LABEL_51;
                      }
LABEL_50:
                      v91 = 1023 - v71;
                      v72 = (_QWORD *)(a1 - 8 * (v91 >> 10));
                      v73 = (int *)(*v72 + 4 * (~(_WORD)v91 & 0x3FF));
LABEL_51:
                      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)v66, v67, (uint64_t)v69, v70, (uint64_t)v72, v73, *(_QWORD *)(*(_QWORD *)(*a5 + 16) + 656));
                      v92 = v21 + (((uint64_t)v11 - *(_QWORD *)a1) >> 2);
                      if (v92 < 1)
                        v93 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v92) >> 10))
                                    + 4 * (~(1023 - (_WORD)v92) & 0x3FF));
                      else
                        v93 = (int *)(*(_QWORD *)(a1 + (((unint64_t)v92 >> 7) & 0x1FFFFFFFFFFFFF8))
                                    + 4 * (v92 & 0x3FF));
                      v94 = *v11;
                      *v11 = *v93;
                      *v93 = v94;
                      --a6;
                      if ((a7 & 1) != 0)
                        goto LABEL_55;
LABEL_38:
                      v75 = *(int **)a1;
                      v76 = (uint64_t)v11 - *(_QWORD *)a1;
                      v77 = v76 >> 2;
                      if (v76 < 5)
                        v78 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1024 - v77) >> 10))
                                    + 4 * (~(1024 - (_WORD)v77) & 0x3FF));
                      else
                        v78 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v77 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                    + 4 * ((v77 - 1) & 0x3FF));
                      v79 = *v78;
                      v80 = *v11;
                      v81 = *(_QWORD *)(*(_QWORD *)(*a5 + 16) + 656);
                      v82 = (*(_QWORD *)(v81 + 24 * v79 + 8) - *(_QWORD *)(v81 + 24 * v79)) >> 2;
                      v83 = (*(_QWORD *)(v81 + 24 * v80 + 8) - *(_QWORD *)(v81 + 24 * v80)) >> 2;
                      if ((int)v82 < (int)v83)
                        goto LABEL_56;
                      if (v79 < v80 && (_DWORD)v82 == (_DWORD)v83)
                        goto LABEL_56;
                      v85 = *(int **)a3;
                      v86 = (uint64_t)v9 - *(_QWORD *)a3;
                      v87 = v86 >> 2;
                      if (v86 < 5)
                        v88 = (int *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1024 - v87) >> 10)]
                                    + 4 * (~(1024 - (_WORD)v87) & 0x3FF));
                      else
                        v88 = (int *)(*(_QWORD *)&a3[((unint64_t)(v87 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                                    + 4 * ((v87 - 1) & 0x3FF));
                      v138 = *v88;
                      v139 = (*(_QWORD *)(v81 + 24 * v138 + 8) - *(_QWORD *)(v81 + 24 * v138)) >> 2;
                      if ((int)v83 < (int)v139 || v80 < v138 && (_DWORD)v83 == (_DWORD)v139)
                      {
                        v140 = v11;
                        do
                        {
                          if ((char *)++v140 - (char *)v75 == 4096)
                          {
                            v141 = *(int **)(a1 + 8);
                            a1 += 8;
                            v75 = v141;
                            v140 = v141;
                          }
                          v142 = *v140;
                          v143 = (*(_QWORD *)(v81 + 24 * v142 + 8) - *(_QWORD *)(v81 + 24 * v142)) >> 2;
                          if ((int)v83 < (int)v143)
                            break;
                        }
                        while (v80 >= v142 || (_DWORD)v83 != (_DWORD)v143);
                      }
                      else
                      {
                        v140 = v11;
                        do
                        {
                          if ((char *)++v140 - (char *)v75 == 4096)
                          {
                            v145 = *(int **)(a1 + 8);
                            a1 += 8;
                            v75 = v145;
                            v140 = v145;
                          }
                          if (a1 >= (unint64_t)a3 && ((char *)a1 != a3 || v140 >= v9))
                            break;
                          v146 = *v140;
                          v147 = (*(_QWORD *)(v81 + 24 * v146 + 8) - *(_QWORD *)(v81 + 24 * v146)) >> 2;
                          if ((int)v83 < (int)v147)
                            break;
                        }
                        while (v80 >= v146 || (_DWORD)v83 != (_DWORD)v147);
                      }
                      if (a1 < (unint64_t)a3 || (char *)a1 == a3 && v140 < v9)
                      {
                        v149 = a3;
                        v150 = v9;
                        do
                        {
                          if (v150 == v85)
                          {
                            v151 = (int *)*((_QWORD *)v149 - 1);
                            v149 -= 8;
                            v85 = v151;
                            v150 = v151 + 1024;
                          }
                          v153 = *--v150;
                          v152 = v153;
                          v154 = (*(_QWORD *)(v81 + 24 * v153 + 8) - *(_QWORD *)(v81 + 24 * v153)) >> 2;
                        }
                        while ((int)v83 < (int)v154 || v80 < v152 && (_DWORD)v83 == (_DWORD)v154);
                      }
                      else
                      {
                        v149 = a3;
                        v150 = v9;
                      }
                      while (a1 < (unint64_t)v149 || (char *)a1 == v149 && v140 < v150)
                      {
                        v156 = *v140;
                        *v140 = *v150;
                        *v150 = v156;
                        do
                        {
                          if ((char *)++v140 - (char *)v75 == 4096)
                          {
                            v157 = *(int **)(a1 + 8);
                            a1 += 8;
                            v75 = v157;
                            v140 = v157;
                          }
                          v158 = *v140;
                          v159 = (*(_QWORD *)(v81 + 24 * v158 + 8) - *(_QWORD *)(v81 + 24 * v158)) >> 2;
                          if ((int)v83 < (int)v159)
                            break;
                        }
                        while (v80 >= v158 || (_DWORD)v83 != (_DWORD)v159);
                        do
                        {
                          if (v150 == v85)
                          {
                            v161 = (int *)*((_QWORD *)v149 - 1);
                            v149 -= 8;
                            v85 = v161;
                            v150 = v161 + 1024;
                          }
                          v163 = *--v150;
                          v162 = v163;
                          v164 = (*(_QWORD *)(v81 + 24 * v163 + 8) - *(_QWORD *)(v81 + 24 * v163)) >> 2;
                        }
                        while ((int)v83 < (int)v164 || v80 < v162 && (_DWORD)v83 == (_DWORD)v164);
                      }
                      v166 = (char *)v140 - (char *)v75;
                      v167 = v140 - v75;
                      if (v166 < 5)
                      {
                        v168 = (int *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1024 - v167) >> 10))
                                     + 4 * (~(1024 - (_WORD)v167) & 0x3FF));
                        if (v168 == v11)
                          goto LABEL_197;
                      }
                      else
                      {
                        v168 = (int *)(*(_QWORD *)(a1 + (((unint64_t)(v167 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                     + 4 * ((v167 - 1) & 0x3FF));
                        if (v168 == v11)
                        {
LABEL_197:
                          a7 = 0;
                          *v168 = v80;
                          v11 = v140;
                          if (v9 != v140)
                            continue;
                          return;
                        }
                      }
                      *v11 = *v168;
                      goto LABEL_197;
                    }
                  }
                  else
                  {
                    v66 = (_QWORD *)(a1 + 8 * (v65 >> 10));
                    v67 = (int *)(*v66 + 4 * (v65 & 0x3FF));
                    v68 = v64 + v21;
                    if ((uint64_t)(v64 + v21) >= 1)
                      goto LABEL_33;
                  }
                  v90 = 1023 - v68;
                  v69 = (_QWORD *)(a1 - 8 * (v90 >> 10));
                  v70 = (int *)(*v69 + 4 * (~(_WORD)v90 & 0x3FF));
                  v71 = v64 + v52;
                  if (v71 >= 1)
                    goto LABEL_34;
                  goto LABEL_50;
                }
              }
              else
              {
                v50 = (_QWORD *)(a1 + 8 * ((unint64_t)(v49 + 2) >> 10));
                v51 = (int *)(*v50 + 4 * ((v49 + 2) & 0x3FF));
                v52 = v21 + 1;
                v53 = v49 + v21 + 1;
                if (v53 < 1)
                  goto LABEL_26;
              }
              v55 = (_QWORD *)(a1 + 8 * ((unint64_t)v53 >> 10));
              v56 = (int *)(*v55 + 4 * (v53 & 0x3FF));
              v62 = (uint64_t)v9 - *(_QWORD *)a3;
              v58 = v62 >> 2;
              if (v62 < 13)
                goto LABEL_27;
              goto LABEL_30;
            }
          }
          else
          {
            v34 = (_QWORD *)(a1 + 8 * ((unint64_t)(v33 + 1) >> 10));
            v35 = (int *)(*v34 + 4 * ((v33 + 1) & 0x3FF));
            v36 = v21 - 1;
            v37 = v33 + v21 - 1;
            if (v37 < 1)
              goto LABEL_19;
          }
          v39 = (_QWORD *)(a1 + 8 * ((unint64_t)v37 >> 10));
          v40 = (int *)(*v39 + 4 * (v37 & 0x3FF));
          v46 = (uint64_t)v9 - *(_QWORD *)a3;
          v42 = v46 >> 2;
          if (v46 < 9)
            goto LABEL_20;
          goto LABEL_23;
        }
        if (v22 < 1)
        {
          v74 = 1023 - v22;
          v27 = (_QWORD *)(a1 - 8 * (v74 >> 10));
          v28 = (int *)(*v27 + 4 * (~(_WORD)v74 & 0x3FF));
          if (v15 >= 5)
            goto LABEL_14;
        }
        else
        {
          v27 = (_QWORD *)(a1 + 8 * ((unint64_t)v22 >> 10));
          v28 = (int *)(*v27 + 4 * (v22 & 0x3FF));
          if (v15 >= 5)
          {
LABEL_14:
            v29 = &a3[8 * ((unint64_t)(v16 - 1) >> 10)];
            v30 = (int *)(*(_QWORD *)v29 + 4 * ((v16 - 1) & 0x3FF));
            goto LABEL_37;
          }
        }
        v29 = &a3[-8 * ((unint64_t)(1024 - v16) >> 10)];
        v30 = (int *)(*(_QWORD *)v29 + 4 * (~(1024 - (_WORD)v16) & 0x3FF));
LABEL_37:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)v27, v28, a1, v11, (uint64_t)v29, v30, *(_QWORD *)(*(_QWORD *)(*a5 + 16) + 656));
        --a6;
        if ((a7 & 1) == 0)
          goto LABEL_38;
LABEL_55:
        v81 = *(_QWORD *)(*(_QWORD *)(*a5 + 16) + 656);
        v75 = *(int **)a1;
        v83 = (*(_QWORD *)(v81 + 24 * *v11 + 8) - *(_QWORD *)(v81 + 24 * *v11)) >> 2;
        v80 = *v11;
LABEL_56:
        v95 = (_QWORD *)a1;
        v96 = v11;
        do
        {
          if ((char *)++v96 - (char *)v75 == 4096)
          {
            v97 = (int *)v95[1];
            ++v95;
            v75 = v97;
            v96 = v97;
          }
          v98 = *v96;
          v99 = (*(_QWORD *)(v81 + 24 * v98 + 8) - *(_QWORD *)(v81 + 24 * v98)) >> 2;
        }
        while ((int)v83 > (int)v99 || v98 < v80 && (_DWORD)v83 == (_DWORD)v99);
        v101 = v96 - v75;
        if ((char *)v96 - (char *)v75 < 5)
        {
          v111 = v95[-((unint64_t)(1024 - v101) >> 10)] + 4 * (~(1024 - (_WORD)v101) & 0x3FF);
          v103 = a3;
          v104 = v9;
          if ((int *)v111 != v11)
          {
LABEL_66:
            v105 = *(int **)a3;
            v103 = a3;
            v104 = v9;
            do
            {
              if (v104 == v105)
              {
                v106 = (int *)*((_QWORD *)v103 - 1);
                v103 -= 8;
                v105 = v106;
                v104 = v106 + 1024;
              }
              v108 = *--v104;
              v107 = v108;
              v109 = (*(_QWORD *)(v81 + 24 * v108 + 8) - *(_QWORD *)(v81 + 24 * v108)) >> 2;
              if ((int)v83 > (int)v109)
                break;
            }
            while (v107 >= v80 || (_DWORD)v83 != (_DWORD)v109);
            goto LABEL_85;
          }
        }
        else
        {
          v102 = *(_QWORD *)((char *)v95 + (((unint64_t)(v101 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
               + 4 * ((v101 - 1) & 0x3FF);
          v103 = a3;
          v104 = v9;
          if ((int *)v102 != v11)
            goto LABEL_66;
        }
        do
        {
          if (v95 >= (_QWORD *)v103 && (v95 != (_QWORD *)v103 || v96 >= v104))
            break;
          if (v104 == *(int **)v103)
          {
            v112 = *((_QWORD *)v103 - 1);
            v103 -= 8;
            v104 = (int *)(v112 + 4096);
          }
          v114 = *--v104;
          v113 = v114;
          v115 = (*(_QWORD *)(v81 + 24 * v114 + 8) - *(_QWORD *)(v81 + 24 * v114)) >> 2;
          if ((int)v83 > (int)v115)
            break;
        }
        while (v113 >= v80 || (_DWORD)v83 != (_DWORD)v115);
LABEL_85:
        v117 = v95 != (_QWORD *)v103 || v96 >= v104;
        if (v95 < (_QWORD *)v103)
          v117 = 0;
        while (v95 < (_QWORD *)v103 || v95 == (_QWORD *)v103 && v96 < v104)
        {
          *v96 = *v104;
          *v104 = v98;
          do
          {
            if ((char *)++v96 - (char *)v75 == 4096)
            {
              v118 = (int *)v95[1];
              ++v95;
              v75 = v118;
              v96 = v118;
            }
            v98 = *v96;
            v119 = (*(_QWORD *)(v81 + 24 * v98 + 8) - *(_QWORD *)(v81 + 24 * v98)) >> 2;
          }
          while ((int)v83 > (int)v119 || v98 < v80 && (_DWORD)v83 == (_DWORD)v119);
          v121 = *(int **)v103;
          do
          {
            if (v104 == v121)
            {
              v122 = (int *)*((_QWORD *)v103 - 1);
              v103 -= 8;
              v121 = v122;
              v104 = v122 + 1024;
            }
            v124 = *--v104;
            v123 = v124;
            v125 = (*(_QWORD *)(v81 + 24 * v124 + 8) - *(_QWORD *)(v81 + 24 * v124)) >> 2;
            if ((int)v83 > (int)v125)
              break;
          }
          while (v123 >= v80 || (_DWORD)v83 != (_DWORD)v125);
        }
        v127 = (char *)v96 - (char *)v75;
        v128 = v96 - v75;
        if (v127 < 5)
        {
          v132 = 1024 - v128;
          v130 = (unint64_t)&v95[-(v132 >> 10)];
          v131 = (int *)(*(_QWORD *)v130 + 4 * (~(_WORD)v132 & 0x3FF));
          if (v131 == v11)
            goto LABEL_119;
          goto LABEL_118;
        }
        v129 = v128 - 1;
        v130 = (unint64_t)&v95[v129 >> 10];
        v131 = (int *)(*(_QWORD *)v130 + 4 * (v129 & 0x3FF));
        if (v131 != v11)
LABEL_118:
          *v11 = *v131;
LABEL_119:
        *v131 = v80;
        if (v117)
        {
          v133 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v11, (char *)v130, v131, (uint64_t)a5);
          v134 = (uint64_t)v131 - *(_QWORD *)v130;
          v135 = v134 >> 2;
          if (v134 < -3)
          {
            if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)(v130 - 8 * ((unint64_t)(1022 - v135) >> 10)), (int *)(*(_QWORD *)(v130 - 8 * ((unint64_t)(1022 - v135) >> 10))+ 4 * (~(1022 - (_WORD)v135) & 0x3FF)), a3, v9, (uint64_t)a5))goto LABEL_124;
          }
          else if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)(v130 + 8 * ((unint64_t)(v135 + 1) >> 10)), (int *)(*(_QWORD *)(v130 + 8 * ((unint64_t)(v135 + 1) >> 10))+ 4 * ((v135 + 1) & 0x3FF)), a3, v9, (uint64_t)a5))
          {
LABEL_124:
            if (v133)
            {
              v136 = v131 + 1;
              if ((int *)((char *)v131 - *(_QWORD *)v130 + 4) != (int *)4096)
              {
LABEL_130:
                a1 = v130;
                v11 = v136;
                if (v9 != v136)
                  continue;
                return;
              }
LABEL_129:
              v137 = *(int **)(v130 + 8);
              v130 += 8;
              v136 = v137;
              goto LABEL_130;
            }
            goto LABEL_127;
          }
          a3 = (char *)v130;
          v9 = v131;
          if ((v133 & 1) == 0 && v131 != v11)
            continue;
          return;
        }
LABEL_127:
        std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(a1, v11, v130, v131, a5, a6, a7 & 1);
        if ((int *)((char *)v131 - *(_QWORD *)v130 + 4) == (int *)4096)
        {
          a7 = 0;
          goto LABEL_129;
        }
        a7 = 0;
        a1 = v130;
        v11 = v131 + 1;
        if (v9 != v131 + 1)
          continue;
        return;
    }
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9, int *a10, uint64_t a11)
{
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, a3, a4, a5, a6, a7, a8, a11);
  v15 = *a10;
  v16 = *a8;
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a11 + 16) + 656);
  v18 = (*(_QWORD *)(v17 + 24 * v15 + 8) - *(_QWORD *)(v17 + 24 * v15)) >> 2;
  v19 = (*(_QWORD *)(v17 + 24 * v16 + 8) - *(_QWORD *)(v17 + 24 * v16)) >> 2;
  if ((int)v18 < (int)v19 || v15 < v16 && (_DWORD)v18 == (_DWORD)v19)
  {
    *a8 = v15;
    *a10 = v16;
    v20 = *a8;
    v21 = *a6;
    v22 = (*(_QWORD *)(v17 + 24 * v20 + 8) - *(_QWORD *)(v17 + 24 * v20)) >> 2;
    v23 = (*(_QWORD *)(v17 + 24 * v21 + 8) - *(_QWORD *)(v17 + 24 * v21)) >> 2;
    if ((int)v22 < (int)v23 || v20 < v21 && (_DWORD)v22 == (_DWORD)v23)
    {
      *a6 = v20;
      *a8 = v21;
      v24 = *a6;
      v25 = *a4;
      v26 = (*(_QWORD *)(v17 + 24 * v24 + 8) - *(_QWORD *)(v17 + 24 * v24)) >> 2;
      v27 = (*(_QWORD *)(v17 + 24 * v25 + 8) - *(_QWORD *)(v17 + 24 * v25)) >> 2;
      if ((int)v26 < (int)v27 || v24 < v25 && (_DWORD)v26 == (_DWORD)v27)
      {
        *a4 = v24;
        *a6 = v25;
        v28 = *a4;
        v29 = *a2;
        v30 = (*(_QWORD *)(v17 + 24 * v28 + 8) - *(_QWORD *)(v17 + 24 * v28)) >> 2;
        v31 = (*(_QWORD *)(v17 + 24 * v29 + 8) - *(_QWORD *)(v17 + 24 * v29)) >> 2;
        if ((int)v30 < (int)v31 || v28 < v29 && (_DWORD)v30 == (_DWORD)v31)
        {
          *a2 = v28;
          *a4 = v29;
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v7 = *a4;
  v8 = *a2;
  v9 = (*(_QWORD *)(a7 + 24 * v7 + 8) - *(_QWORD *)(a7 + 24 * v7)) >> 2;
  v10 = (*(_QWORD *)(a7 + 24 * v8 + 8) - *(_QWORD *)(a7 + 24 * v8)) >> 2;
  if ((int)v9 < (int)v10 || (v7 < v8 ? (v11 = (_DWORD)v9 == (_DWORD)v10) : (v11 = 0), v11))
  {
    v18 = *a6;
    v19 = (*(_QWORD *)(a7 + 24 * v18 + 8) - *(_QWORD *)(a7 + 24 * v18)) >> 2;
    if ((int)v19 < (int)v9 || v18 < v7 && (_DWORD)v19 == (_DWORD)v9)
    {
      *a2 = v18;
    }
    else
    {
      *a2 = v7;
      *a4 = v8;
      v20 = *a6;
      v21 = (*(_QWORD *)(a7 + 24 * v20 + 8) - *(_QWORD *)(a7 + 24 * v20)) >> 2;
      if ((int)v21 >= (int)v10 && (v20 >= v8 || (_DWORD)v21 != (_DWORD)v10))
        return;
      *a4 = v20;
    }
    *a6 = v8;
    return;
  }
  v12 = *a6;
  v13 = (*(_QWORD *)(a7 + 24 * v12 + 8) - *(_QWORD *)(a7 + 24 * v12)) >> 2;
  if ((int)v13 < (int)v9 || v12 < v7 && (_DWORD)v13 == (_DWORD)v9)
  {
    *a4 = v12;
    *a6 = v7;
    v14 = *a4;
    v15 = *a2;
    v16 = (*(_QWORD *)(a7 + 24 * v14 + 8) - *(_QWORD *)(a7 + 24 * v14)) >> 2;
    v17 = (*(_QWORD *)(a7 + 24 * v15 + 8) - *(_QWORD *)(a7 + 24 * v15)) >> 2;
    if ((int)v16 < (int)v17 || v14 < v15 && (_DWORD)v16 == (_DWORD)v17)
    {
      *a2 = v14;
      *a4 = v15;
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *a1, int *a2, char *a3, int *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  int **v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int *v25;
  unint64_t v26;
  char *v27;
  int *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int *v32;
  unint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  int *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int **v46;
  int *v47;
  int *v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  int *v52;
  int **v53;
  int *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int *v60;
  int *v61;
  int v62;
  int *v63;
  int v64;
  uint64_t v65;
  int *v68;

  if (a4 == a2)
    return 1;
  v6 = (uint64_t)a4;
  v7 = (uint64_t)a3;
  v9 = *(int **)a3;
  v10 = (uint64_t)a2 - *(_QWORD *)a1;
  v11 = v10 >> 2;
  v12 = 1;
  switch((((uint64_t)a4 - *(_QWORD *)a3) >> 2) + ((a3 - a1) << 7) - (v10 >> 2))
  {
    case 0:
    case 1:
      return v12;
    case 2:
      if (v9 == a4)
        v6 = *((_QWORD *)a3 - 1) + 4096;
      v13 = *(_DWORD *)(v6 - 4);
      v14 = *a2;
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 16) + 656);
      v16 = (*(_QWORD *)(v15 + 24 * v13 + 8) - *(_QWORD *)(v15 + 24 * v13)) >> 2;
      v17 = (*(_QWORD *)(v15 + 24 * v14 + 8) - *(_QWORD *)(v15 + 24 * v14)) >> 2;
      if ((int)v16 < (int)v17 || (v12 = 1, v13 < v14) && (_DWORD)v16 == (_DWORD)v17)
      {
        *a2 = v13;
        *(_DWORD *)(v6 - 4) = v14;
        return 1;
      }
      return v12;
    case 3:
      if (v10 < -3)
      {
        v18 = &a1[-8 * ((unint64_t)(1022 - v11) >> 10)];
        v19 = (int *)(*(_QWORD *)v18 + 4 * (~(1022 - (_WORD)v11) & 0x3FF));
        if (v9 == (int *)v6)
        {
LABEL_20:
          v30 = *(_QWORD *)(v7 - 8);
          v7 -= 8;
          v6 = v30 + 4096;
        }
      }
      else
      {
        v18 = &a1[8 * ((unint64_t)(v11 + 1) >> 10)];
        v19 = (int *)(*(_QWORD *)v18 + 4 * (((_WORD)v11 + 1) & 0x3FF));
        if (v9 == (int *)v6)
          goto LABEL_20;
      }
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v18, v19, v7, (int *)(v6 - 4), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 16) + 656));
      return 1;
    case 4:
      if (v10 >= -3)
      {
        v24 = &a1[8 * ((unint64_t)(v11 + 1) >> 10)];
        v25 = (int *)(*(_QWORD *)v24 + 4 * ((v11 + 1) & 0x3FF));
        v26 = v11 + 2;
        goto LABEL_32;
      }
      v24 = &a1[-8 * ((unint64_t)(1022 - v11) >> 10)];
      v25 = (int *)(*(_QWORD *)v24 + 4 * (~(1022 - (_WORD)v11) & 0x3FF));
      if ((unint64_t)v10 >= 0xFFFFFFFFFFFFFFF9)
      {
        v26 = 1;
LABEL_32:
        v39 = &a1[8 * (v26 >> 10)];
        v40 = (int *)(*(_QWORD *)v39 + 4 * (v26 & 0x3FF));
        if (v9 != (int *)v6)
          goto LABEL_34;
        goto LABEL_33;
      }
      v39 = &a1[-8 * ((unint64_t)(1021 - v11) >> 10)];
      v40 = (int *)(*(_QWORD *)v39 + 4 * (~(1021 - (_WORD)v11) & 0x3FF));
      if (v9 == (int *)v6)
      {
LABEL_33:
        v41 = *(_QWORD *)(v7 - 8);
        v7 -= 8;
        v6 = v41 + 4096;
      }
LABEL_34:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v24, v25, (uint64_t)v39, v40, v7, (int *)(v6 - 4), a5);
      return 1;
    case 5:
      if (v10 >= -3)
      {
        v27 = &a1[8 * ((unint64_t)(v11 + 1) >> 10)];
        v28 = (int *)(*(_QWORD *)v27 + 4 * ((v11 + 1) & 0x3FF));
        v29 = v11 + 2;
LABEL_24:
        v31 = &a1[8 * (v29 >> 10)];
        v32 = (int *)(*(_QWORD *)v31 + 4 * (v29 & 0x3FF));
        v33 = v11 + 3;
        goto LABEL_25;
      }
      v27 = &a1[-8 * ((unint64_t)(1022 - v11) >> 10)];
      v28 = (int *)(*(_QWORD *)v27 + 4 * (~(1022 - (_WORD)v11) & 0x3FF));
      if ((unint64_t)v10 >= 0xFFFFFFFFFFFFFFF9)
      {
        v29 = 1;
        goto LABEL_24;
      }
      v31 = &a1[-8 * ((unint64_t)(1021 - v11) >> 10)];
      v32 = (int *)(*(_QWORD *)v31 + 4 * (~(1021 - (_WORD)v11) & 0x3FF));
      if ((unint64_t)v10 >= 0xFFFFFFFFFFFFFFF5)
      {
        v33 = 1;
LABEL_25:
        v34 = &a1[8 * (v33 >> 10)];
        v35 = (int *)(*(_QWORD *)v34 + 4 * (v33 & 0x3FF));
        if (v9 != (int *)v6)
          goto LABEL_27;
        goto LABEL_26;
      }
      v34 = &a1[-8 * ((unint64_t)(1020 - v11) >> 10)];
      v35 = (int *)(*(_QWORD *)v34 + 4 * (~(1020 - (_WORD)v11) & 0x3FF));
      if (v9 == (int *)v6)
      {
LABEL_26:
        v36 = *(_QWORD *)(v7 - 8);
        v7 -= 8;
        v6 = v36 + 4096;
      }
LABEL_27:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>((uint64_t)a1, a2, (uint64_t)v27, v28, (uint64_t)v31, v32, (uint64_t)v34, v35, v7, (int *)(v6 - 4), a5);
      return 1;
    default:
      if (v10 <= -8)
      {
        v20 = (int **)&a1[-8 * ((unint64_t)(1021 - v11) >> 10)];
        v21 = &(*v20)[~(1021 - (_WORD)v11) & 0x3FF];
        v23 = 1022 - v11;
        goto LABEL_29;
      }
      v20 = (int **)&a1[8 * ((unint64_t)(v11 + 2) >> 10)];
      v21 = &(*v20)[(v11 + 2) & 0x3FF];
      v22 = v11 + 1;
      if (v11 == -1)
      {
        v23 = 1023;
LABEL_29:
        v37 = &a1[-8 * (v23 >> 10)];
        v38 = (int *)(*(_QWORD *)v37 + 4 * (~(_WORD)v23 & 0x3FF));
        goto LABEL_38;
      }
      v37 = &a1[8 * (v22 >> 10)];
      v38 = (int *)(*(_QWORD *)v37 + 4 * (v22 & 0x3FF));
LABEL_38:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v37, v38, (uint64_t)v20, v21, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 16) + 656));
      v42 = *v20;
      v43 = (char *)v21 - (char *)*v20;
      v44 = v43 >> 2;
      if (v43 < -3)
      {
        v49 = 1022 - v44;
        v46 = &v20[-(v49 >> 10)];
        v47 = *v46;
        v48 = &(*v46)[~(_DWORD)v49 & 0x3FFLL];
        if (v48 == (int *)v6)
          return 1;
      }
      else
      {
        v45 = v44 + 1;
        v46 = &v20[v45 >> 10];
        v47 = *v46;
        v48 = &(*v46)[v45 & 0x3FF];
        if (v48 == (int *)v6)
          return 1;
      }
      v50 = 0;
      v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 16) + 656);
      while (1)
      {
        v52 = v48;
        v53 = v46;
        v54 = v47;
        v55 = *v48;
        v56 = *v21;
        v57 = (*(_QWORD *)(v51 + 24 * v55 + 8) - *(_QWORD *)(v51 + 24 * v55)) >> 2;
        v58 = (*(_QWORD *)(v51 + 24 * v56 + 8) - *(_QWORD *)(v51 + 24 * v56)) >> 2;
        if ((int)v57 < (int)v58 || (v55 < v56 ? (v59 = (_DWORD)v57 == (_DWORD)v58) : (v59 = 0), v59))
        {
          *v52 = v56;
          if (v21 == a2)
          {
LABEL_51:
            v21 = a2;
          }
          else
          {
            while (1)
            {
              if (v21 == v42)
              {
                v61 = *--v20;
                v42 = v61;
                v60 = v61 + 1024;
              }
              else
              {
                v60 = v21;
              }
              v64 = *(v60 - 1);
              v63 = v60 - 1;
              v62 = v64;
              v65 = (*(_QWORD *)(v51 + 24 * v64 + 8) - *(_QWORD *)(v51 + 24 * v64)) >> 2;
              if ((int)v57 >= (int)v65 && (v55 >= v62 || (_DWORD)v57 != (_DWORD)v65))
                break;
              *v21 = v62;
              v21 = v63;
              if (v63 == a2)
                goto LABEL_51;
            }
          }
          *v21 = v55;
          if (++v50 == 8)
            break;
        }
        v48 = v52 + 1;
        v47 = v54;
        v46 = v53;
        if ((char *)(v52 + 1) - (char *)v54 == 4096)
        {
          v46 = v53 + 1;
          v47 = v53[1];
          v48 = v47;
        }
        v42 = v54;
        v20 = v53;
        v21 = v52;
        if (v48 == (int *)v6)
          return 1;
      }
      v68 = v52 + 1;
      if ((char *)(v52 + 1) - (char *)v54 == 4096)
        v68 = v53[1];
      v12 = v68 == (int *)v6;
      break;
  }
  return v12;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, a3, a4, a5, a6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a9 + 16) + 656));
  v13 = *a8;
  v14 = *a6;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a9 + 16) + 656);
  v16 = (*(_QWORD *)(v15 + 24 * v13 + 8) - *(_QWORD *)(v15 + 24 * v13)) >> 2;
  v17 = (*(_QWORD *)(v15 + 24 * v14 + 8) - *(_QWORD *)(v15 + 24 * v14)) >> 2;
  if ((int)v16 < (int)v17 || v13 < v14 && (_DWORD)v16 == (_DWORD)v17)
  {
    *a6 = v13;
    *a8 = v14;
    v18 = *a6;
    v19 = *a4;
    v20 = (*(_QWORD *)(v15 + 24 * v18 + 8) - *(_QWORD *)(v15 + 24 * v18)) >> 2;
    v21 = (*(_QWORD *)(v15 + 24 * v19 + 8) - *(_QWORD *)(v15 + 24 * v19)) >> 2;
    if ((int)v20 < (int)v21 || v18 < v19 && (_DWORD)v20 == (_DWORD)v21)
    {
      *a4 = v18;
      *a6 = v19;
      v22 = *a4;
      v23 = *a2;
      v24 = (*(_QWORD *)(v15 + 24 * v22 + 8) - *(_QWORD *)(v15 + 24 * v22)) >> 2;
      v25 = (*(_QWORD *)(v15 + 24 * v23 + 8) - *(_QWORD *)(v15 + 24 * v23)) >> 2;
      if ((int)v24 < (int)v25 || v22 < v23 && (_DWORD)v24 == (_DWORD)v25)
      {
        *a2 = v22;
        *a4 = v23;
      }
    }
  }
}

char *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::CpModelPresolver::PresolveToFixPoint(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *result, int *a2, uint64_t a3, uint64_t a4, char *a5, int *a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;

  if (a6 == a2)
  {
    v6 = 0;
    v7 = a4 - 2;
    if (a4 < 2)
      return result;
  }
  else
  {
    v6 = (((uint64_t)a6 - *(_QWORD *)a5) >> 2) + ((a5 - result) << 7) - (((uint64_t)a2 - *(_QWORD *)result) >> 2);
    v7 = a4 - 2;
    if (a4 < 2)
      return result;
  }
  v8 = v7 >> 1;
  if (v8 < v6)
    return result;
  v9 = 2 * v6;
  v10 = (2 * v6) | 1;
  v11 = ((uint64_t)a2 - *(_QWORD *)result) >> 2;
  v12 = v11 + v10;
  if (v11 + v10 >= 1)
  {
    v13 = &result[8 * (v12 >> 10)];
    v14 = *(_QWORD *)v13;
    v15 = (int *)(*(_QWORD *)v13 + 4 * (v12 & 0x3FF));
    v16 = v9 + 2;
    if (v9 + 2 < a4)
      goto LABEL_8;
LABEL_11:
    v21 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 656);
    goto LABEL_22;
  }
  v20 = 1023 - v12;
  v13 = &result[-8 * (v20 >> 10)];
  v14 = *(_QWORD *)v13;
  v15 = (int *)(*(_QWORD *)v13 + 4 * (~(_WORD)v20 & 0x3FF));
  v16 = v9 + 2;
  if (v9 + 2 >= a4)
    goto LABEL_11;
LABEL_8:
  v17 = *v15;
  v18 = ((uint64_t)v15 - v14) >> 2;
  if ((uint64_t)v15 - v14 < -3)
    v19 = (int *)(*(_QWORD *)&v13[-8 * ((unint64_t)(1022 - v18) >> 10)] + 4 * (~(1022 - (_WORD)v18) & 0x3FF));
  else
    v19 = (int *)(*(_QWORD *)&v13[((unint64_t)(v18 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v18 + 1) & 0x3FF));
  v22 = *v19;
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 656);
  v23 = (*(_QWORD *)(v21 + 24 * v17 + 8) - *(_QWORD *)(v21 + 24 * v17)) >> 2;
  v24 = (*(_QWORD *)(v21 + 24 * v22 + 8) - *(_QWORD *)(v21 + 24 * v22)) >> 2;
  if ((int)v23 < (int)v24 || (v17 < v22 ? (v25 = (_DWORD)v23 == (_DWORD)v24) : (v25 = 0), v25))
  {
    if ((int *)((char *)++v15 - v14) == (int *)4096)
      v15 = (int *)*((_QWORD *)v13 + 1);
    v10 = v16;
  }
LABEL_22:
  v26 = *v15;
  v27 = *a6;
  v28 = (*(_QWORD *)(v21 + 24 * v26 + 8) - *(_QWORD *)(v21 + 24 * v26)) >> 2;
  v29 = (*(_QWORD *)(v21 + 24 * v27 + 8) - *(_QWORD *)(v21 + 24 * v27)) >> 2;
  if ((int)v28 >= (int)v29 && (v26 >= v27 || (_DWORD)v28 != (_DWORD)v29))
  {
    while (1)
    {
      *a6 = v26;
      a6 = v15;
      if (v8 < v10)
      {
LABEL_49:
        *a6 = v27;
        return result;
      }
      v31 = (2 * v10) | 1;
      v32 = v31 + v11;
      if (v31 + v11 < 1)
      {
        v35 = 1023 - v32;
        v33 = &result[-8 * (v35 >> 10)];
        v34 = *(_QWORD *)v33;
        v15 = (int *)(*(_QWORD *)v33 + 4 * (~(_DWORD)v35 & 0x3FFLL));
        v10 = 2 * v10 + 2;
        if (v10 >= a4)
          goto LABEL_40;
      }
      else
      {
        v33 = &result[8 * (v32 >> 10)];
        v34 = *(_QWORD *)v33;
        v15 = (int *)(*(_QWORD *)v33 + 4 * (v32 & 0x3FF));
        v10 = 2 * v10 + 2;
        if (v10 >= a4)
          goto LABEL_40;
      }
      v36 = ((uint64_t)v15 - v34) >> 2;
      if ((uint64_t)v15 - v34 < -3)
        v37 = (int *)(*(_QWORD *)&v33[-8 * ((unint64_t)(1022 - v36) >> 10)] + 4
                                                                                   * (~(1022 - (_WORD)v36) & 0x3FF));
      else
        v37 = (int *)(*(_QWORD *)&v33[((unint64_t)(v36 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4
                                                                                                * ((v36 + 1) & 0x3FF));
      v38 = *v15;
      v39 = *v37;
      v40 = (*(_QWORD *)(v21 + 24 * v38 + 8) - *(_QWORD *)(v21 + 24 * v38)) >> 2;
      v41 = (*(_QWORD *)(v21 + 24 * v39 + 8) - *(_QWORD *)(v21 + 24 * v39)) >> 2;
      if ((int)v40 < (int)v41 || (v38 < v39 ? (v42 = (_DWORD)v40 == (_DWORD)v41) : (v42 = 0), v42))
      {
        if ((int *)((char *)++v15 - v34) == (int *)4096)
          v15 = (int *)*((_QWORD *)v33 + 1);
        goto LABEL_43;
      }
LABEL_40:
      v10 = v31;
LABEL_43:
      v26 = *v15;
      v43 = (*(_QWORD *)(v21 + 24 * v26 + 8) - *(_QWORD *)(v21 + 24 * v26)) >> 2;
      if ((int)v43 >= (int)v29 && (v26 >= v27 || (_DWORD)v43 != (_DWORD)v29))
        continue;
      goto LABEL_49;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(char **a1, int *a2, int **a3, int *a4, uint64_t a5, uint64_t a6, char a7)
{
  int *v9;
  int *v11;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  int *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int *v60;
  int v61;
  int *v62;
  int v63;
  int *v64;
  char *v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  int v72;
  int *v73;
  char **v74;
  int *v75;
  unint64_t v76;
  int *v77;
  unint64_t v78;
  int *i;
  int *v80;
  char *v81;
  char **v82;
  int *v83;
  int v84;
  int v85;
  int *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  char **v91;
  int *v92;
  unint64_t v93;
  char **v94;
  int *v95;
  uint64_t v96;
  int v97;
  char *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  __int16 v103;
  char **v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unint64_t v109;
  char *v110;
  int *v111;
  uint64_t v112;
  __int16 v113;
  char **v114;
  unint64_t v115;
  int *v116;
  int *v117;
  int v118;
  int v119;
  int *v120;
  int *v121;
  int *v122;
  int *v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  char v127;

  if (a4 == a2)
    return;
  v9 = a4;
  v11 = a2;
  v13 = a6 - 1;
  while (2)
  {
    v14 = *a3;
    v15 = (char *)v9 - (char *)*a3;
    v16 = v15 >> 2;
    v17 = *a1;
    v18 = (char *)v11 - *a1;
    v19 = v18 >> 2;
    v20 = (v15 >> 2) + (((char *)a3 - (char *)a1) << 7) - (v18 >> 2);
    switch(v20)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (v9 == v14)
          v9 = *(a3 - 1) + 1024;
        v71 = *(v9 - 1);
        v72 = *v11;
        if (v71 < *v11)
        {
          *v11 = v71;
          *(v9 - 1) = v72;
        }
        return;
      case 3uLL:
        if (v18 < -3)
        {
          v73 = (int *)&a1[-((unint64_t)(1022 - v19) >> 10)][4 * (~(1022 - (_WORD)v19) & 0x3FF)];
          if (v9 != v14)
            goto LABEL_135;
        }
        else
        {
          v73 = (int *)&(*(char **)((char *)a1 + (((unint64_t)(v19 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v19 + 1) & 0x3FF)];
          if (v9 != v14)
            goto LABEL_135;
        }
        v9 = *(a3 - 1) + 1024;
LABEL_135:
        v88 = *v73;
        v89 = *v11;
        v90 = *(v9 - 1);
        if (*v73 >= *v11)
        {
          if (v90 < v88)
          {
            *v73 = v90;
            *(v9 - 1) = v88;
            v97 = *v11;
            if (*v73 < *v11)
            {
              *v11 = *v73;
              *v73 = v97;
            }
          }
        }
        else if (v90 >= v88)
        {
          *v11 = v88;
          *v73 = v89;
          v105 = *(v9 - 1);
          if (v105 < v89)
          {
            *v73 = v105;
            *(v9 - 1) = v89;
          }
        }
        else
        {
          *v11 = v90;
          *(v9 - 1) = v89;
        }
        return;
      case 4uLL:
        if (v18 >= -3)
        {
          v77 = (int *)&(*(char **)((char *)a1 + (((unint64_t)(v19 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v19 + 1) & 0x3FF)];
          v78 = v19 + 2;
          goto LABEL_149;
        }
        v77 = (int *)&a1[-((unint64_t)(1022 - v19) >> 10)][4 * (~(1022 - (_WORD)v19) & 0x3FF)];
        if ((unint64_t)v18 >= 0xFFFFFFFFFFFFFFF9)
        {
          v78 = 1;
LABEL_149:
          v98 = &(*(char **)((char *)a1 + ((v78 >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * (v78 & 0x3FF)];
          if (v9 != v14)
            goto LABEL_151;
          goto LABEL_150;
        }
        v98 = &a1[-((unint64_t)(1021 - v19) >> 10)][4 * (~(1021 - (_WORD)v19) & 0x3FF)];
        if (v9 == v14)
LABEL_150:
          v9 = *(a3 - 1) + 1024;
LABEL_151:
        v99 = *v77;
        v100 = *v11;
        v101 = *(_DWORD *)v98;
        if (*v77 >= *v11)
        {
          if (v101 >= v99)
          {
            v99 = *(_DWORD *)v98;
          }
          else
          {
            *v77 = v101;
            *(_DWORD *)v98 = v99;
            v102 = *v11;
            if (*v77 < *v11)
            {
              *v11 = *v77;
              *v77 = v102;
              v99 = *(_DWORD *)v98;
            }
          }
        }
        else
        {
          if (v101 >= v99)
          {
            *v11 = v99;
            *v77 = v100;
            v99 = *(_DWORD *)v98;
            if (*(_DWORD *)v98 >= v100)
              goto LABEL_169;
            *v77 = v99;
          }
          else
          {
            *v11 = v101;
          }
          *(_DWORD *)v98 = v100;
          v99 = v100;
        }
LABEL_169:
        v106 = *(v9 - 1);
        if (v106 < v99)
        {
          *(_DWORD *)v98 = v106;
          *(v9 - 1) = v99;
          v107 = *v77;
          if (*(_DWORD *)v98 < *v77)
          {
            *v77 = *(_DWORD *)v98;
            *(_DWORD *)v98 = v107;
            v108 = *v11;
            if (*v77 < *v11)
            {
              *v11 = *v77;
              *v77 = v108;
            }
          }
        }
        return;
      case 5uLL:
        if (v18 >= -3)
        {
          v74 = &a1[(unint64_t)(v19 + 1) >> 10];
          v75 = (int *)&(*v74)[4 * ((v19 + 1) & 0x3FF)];
          v76 = v19 + 2;
LABEL_140:
          v91 = &a1[v76 >> 10];
          v92 = (int *)&(*v91)[4 * (v76 & 0x3FF)];
          v93 = v19 + 3;
          goto LABEL_141;
        }
        v74 = &a1[-((unint64_t)(1022 - v19) >> 10)];
        v75 = (int *)&(*v74)[4 * (~(1022 - (_WORD)v19) & 0x3FF)];
        if ((unint64_t)v18 >= 0xFFFFFFFFFFFFFFF9)
        {
          v76 = 1;
          goto LABEL_140;
        }
        v91 = &a1[-((unint64_t)(1021 - v19) >> 10)];
        v92 = (int *)&(*v91)[4 * (~(1021 - (_WORD)v19) & 0x3FF)];
        if ((unint64_t)v18 >= 0xFFFFFFFFFFFFFFF5)
        {
          v93 = 1;
LABEL_141:
          v94 = &a1[v93 >> 10];
          v95 = (int *)&(*v94)[4 * (v93 & 0x3FF)];
          if (v9 != v14)
            goto LABEL_143;
          goto LABEL_142;
        }
        v124 = 1020 - v19;
        v94 = &a1[-(v124 >> 10)];
        v95 = (int *)&(*v94)[4 * (~(_WORD)v124 & 0x3FF)];
        if (v9 == v14)
        {
LABEL_142:
          v96 = (uint64_t)*--a3;
          v9 = (int *)(v96 + 4096);
        }
LABEL_143:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, v11, (uint64_t)v74, v75, (uint64_t)v91, v92, (uint64_t)v94, v95, (uint64_t)a3, v9 - 1);
        return;
      default:
        if ((uint64_t)v20 <= 23)
        {
          if ((a7 & 1) != 0)
          {
            for (i = v11 + 1; ; ++i)
            {
              if ((char *)i - v17 == 4096)
              {
                v81 = a1[1];
                ++a1;
                v17 = v81;
                i = (int *)v81;
              }
              if (i == v9)
                return;
              v82 = a1;
              if (i == (int *)v17)
              {
                v82 = a1 - 1;
                v83 = (int *)(*(a1 - 1) + 4092);
                v84 = *v83;
                v85 = *i;
                if (*i >= *v83)
                  continue;
              }
              else
              {
                v83 = i - 1;
                v84 = *(i - 1);
                v85 = *i;
                if (*i >= v84)
                  continue;
              }
              v86 = i;
              while (1)
              {
                *v86 = v84;
                if (v83 == v11)
                  break;
                v80 = v83;
                if (v83 == (int *)*v82)
                {
                  v87 = (uint64_t)*--v82;
                  v83 = (int *)(v87 + 4092);
                  v84 = *(_DWORD *)(v87 + 4092);
                  v86 = v80;
                  if (v85 >= v84)
                    goto LABEL_117;
                }
                else
                {
                  --v83;
                  v84 = *(v80 - 1);
                  v86 = v80;
                  if (v85 >= v84)
                    goto LABEL_117;
                }
              }
              v80 = v11;
LABEL_117:
              *v80 = v85;
            }
          }
          if (v18 < -3)
          {
            v109 = 1022 - v19;
            v103 = ~(_WORD)v109;
            v104 = &a1[-(v109 >> 10)];
          }
          else
          {
            v103 = v19 + 1;
            v104 = &a1[(unint64_t)(v19 + 1) >> 10];
          }
          v110 = *v104;
          v111 = (int *)&(*v104)[4 * (v103 & 0x3FF)];
          if (v111 == v9)
            return;
          while (1)
          {
            v112 = ((char *)v111 - v110) >> 2;
            if ((char *)v111 - v110 < 5)
            {
              v115 = 1024 - v112;
              v113 = ~(_WORD)v115;
              v114 = &v104[-(v115 >> 10)];
            }
            else
            {
              v113 = v112 - 1;
              v114 = &v104[(unint64_t)(v112 - 1) >> 10];
            }
            v116 = (int *)*v114;
            v117 = (int *)&(*v114)[4 * (v113 & 0x3FF)];
            v118 = *v111;
            v119 = *v117;
            if (*v111 < *v117)
              break;
            if ((char *)++v111 - v110 == 4096)
              goto LABEL_188;
LABEL_176:
            if (v111 == v9)
              return;
          }
          v120 = v111;
          do
          {
            while (1)
            {
              v122 = v117;
              *v120 = v119;
              if (v117 != v116)
                break;
              v121 = (int *)*--v114;
              v116 = v121;
              v117 = v121 + 1023;
              v119 = v121[1023];
              v120 = v122;
              if (v118 >= v119)
                goto LABEL_187;
            }
            --v117;
            v119 = *(v122 - 1);
            v120 = v122;
          }
          while (v118 < v119);
LABEL_187:
          *v122 = v118;
          if ((char *)++v111 - v110 != 4096)
            goto LABEL_176;
LABEL_188:
          v123 = (int *)v104[1];
          ++v104;
          v110 = (char *)v123;
          v111 = v123;
          goto LABEL_176;
        }
        if (v13 == -1)
        {
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v11, a3, v9, a3, v9, a5);
          return;
        }
        v21 = v20 >> 1;
        v22 = v19 + (v20 >> 1);
        if (v20 < 0x81)
        {
          if (v22 < 1)
          {
            v29 = (int *)&a1[-((unint64_t)(1023 - v22) >> 10)][4 * (~(1023 - (_WORD)v22) & 0x3FF)];
            if (v15 >= 5)
            {
LABEL_15:
              v30 = &(*(int **)((char *)a3 + (((unint64_t)(v16 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v16 - 1) & 0x3FF];
              v31 = *v11;
              v32 = *v29;
              v33 = *v30;
              if (*v11 >= *v29)
              {
LABEL_16:
                if (v33 < v31)
                {
                  *v11 = v33;
                  *v30 = v31;
                  v34 = *v29;
                  if (*v11 < *v29)
                  {
                    *v29 = *v11;
                    *v11 = v34;
                    if ((a7 & 1) != 0)
                      goto LABEL_90;
                    goto LABEL_85;
                  }
                }
                goto LABEL_46;
              }
LABEL_26:
              if (v33 >= v31)
              {
                *v29 = v31;
                *v11 = v32;
                if (*v30 >= v32)
                  goto LABEL_46;
                *v11 = *v30;
              }
              else
              {
                *v29 = v33;
              }
              *v30 = v32;
LABEL_46:
              if ((a7 & 1) != 0)
                goto LABEL_90;
LABEL_85:
              if (v18 < 5)
              {
                if (*(_DWORD *)&a1[-((unint64_t)(1024 - v19) >> 10)][4 * (~(1024 - (_WORD)v19) & 0x3FF)] < *v11)
                  goto LABEL_90;
              }
              else if (*(_DWORD *)&(*(char **)((char *)a1 + (((unint64_t)(v19 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v19 - 1) & 0x3FF)] < *v11)
              {
                goto LABEL_90;
              }
              a1 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__less<void,void> &>(a1, (char *)v11, a3, (char *)v9);
              v11 = v64;
              a7 = 0;
              --v13;
              if (v9 != v64)
                continue;
              return;
            }
          }
          else
          {
            v29 = (int *)&(*(char **)((char *)a1 + (((unint64_t)v22 >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * (v22 & 0x3FF)];
            if (v15 >= 5)
              goto LABEL_15;
          }
          v30 = &a3[-((unint64_t)(1024 - v16) >> 10)][~(1024 - (_WORD)v16) & 0x3FF];
          v31 = *v11;
          v32 = *v29;
          v33 = *v30;
          if (*v11 >= *v29)
            goto LABEL_16;
          goto LABEL_26;
        }
        if (v22 >= 1)
        {
          v23 = (int *)&(*(char **)((char *)a1 + (((unint64_t)v22 >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * (v22 & 0x3FF)];
          if (v15 >= 5)
            goto LABEL_9;
LABEL_21:
          v24 = &a3[-((unint64_t)(1024 - v16) >> 10)][~(1024 - (_WORD)v16) & 0x3FF];
          v25 = *v23;
          v26 = *v11;
          v27 = *v24;
          if (*v23 >= *v11)
            goto LABEL_10;
          goto LABEL_22;
        }
        v23 = (int *)&a1[-((unint64_t)(1023 - v22) >> 10)][4 * (~(1023 - (_WORD)v22) & 0x3FF)];
        if (v15 < 5)
          goto LABEL_21;
LABEL_9:
        v24 = &(*(int **)((char *)a3 + (((unint64_t)(v16 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v16 - 1) & 0x3FF];
        v25 = *v23;
        v26 = *v11;
        v27 = *v24;
        if (*v23 >= *v11)
        {
LABEL_10:
          if (v27 < v25)
          {
            *v23 = v27;
            *v24 = v25;
            v28 = *v11;
            if (*v23 < *v11)
            {
              *v11 = *v23;
              *v23 = v28;
            }
          }
          goto LABEL_31;
        }
LABEL_22:
        if (v27 >= v25)
        {
          *v11 = v25;
          *v23 = v26;
          if (*v24 >= v26)
            goto LABEL_31;
          *v23 = *v24;
        }
        else
        {
          *v11 = v27;
        }
        *v24 = v26;
LABEL_31:
        if (v18 < -3)
        {
          v35 = &a1[-((unint64_t)(1022 - v19) >> 10)][4 * (~(1022 - (_WORD)v19) & 0x3FF)];
          v36 = v21 + v19 - 1;
          v37 = (unint64_t)v36 >> 7;
          if (v36 < 1)
          {
LABEL_33:
            v38 = &a1[-((unint64_t)(1023 - v36) >> 10)][4 * (~(1023 - (_WORD)v36) & 0x3FF)];
            if (v15 < 9)
              goto LABEL_34;
LABEL_40:
            v39 = &(*(int **)((char *)a3 + (((unint64_t)(v16 - 2) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v16 - 2) & 0x3FF];
            v40 = *(_DWORD *)v38;
            v41 = *(_DWORD *)v35;
            v42 = *v39;
            if (*(_DWORD *)v38 >= *(_DWORD *)v35)
              goto LABEL_35;
            goto LABEL_41;
          }
        }
        else
        {
          v35 = &(*(char **)((char *)a1 + (((unint64_t)(v19 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v19 + 1) & 0x3FF)];
          v36 = v21 + v19 - 1;
          v37 = (unint64_t)v36 >> 7;
          if (v36 < 1)
            goto LABEL_33;
        }
        v38 = &(*(char **)((char *)a1 + (v37 & 0x1FFFFFFFFFFFFF8)))[4 * (v36 & 0x3FF)];
        if (v15 >= 9)
          goto LABEL_40;
LABEL_34:
        v39 = &a3[-((unint64_t)(1025 - v16) >> 10)][~(1025 - (_WORD)v16) & 0x3FF];
        v40 = *(_DWORD *)v38;
        v41 = *(_DWORD *)v35;
        v42 = *v39;
        if (*(_DWORD *)v38 >= *(_DWORD *)v35)
        {
LABEL_35:
          if (v42 < v40)
          {
            *(_DWORD *)v38 = v42;
            *v39 = v40;
            v43 = *(_DWORD *)v35;
            if (*(_DWORD *)v38 < *(_DWORD *)v35)
            {
              *(_DWORD *)v35 = *(_DWORD *)v38;
              *(_DWORD *)v38 = v43;
            }
          }
          goto LABEL_51;
        }
LABEL_41:
        if (v42 >= v40)
        {
          *(_DWORD *)v35 = v40;
          *(_DWORD *)v38 = v41;
          if (*v39 >= v41)
            goto LABEL_51;
          *(_DWORD *)v38 = *v39;
        }
        else
        {
          *(_DWORD *)v35 = v42;
        }
        *v39 = v41;
LABEL_51:
        if (v18 < -7)
        {
          v44 = &a1[-((unint64_t)(1021 - v19) >> 10)][4 * (~(1021 - (_WORD)v19) & 0x3FF)];
          v45 = v21 + v19 + 1;
          v46 = (unint64_t)v45 >> 7;
          if (v45 < 1)
          {
LABEL_53:
            v47 = &a1[-((unint64_t)(1023 - v45) >> 10)][4 * (~(1023 - (_WORD)v45) & 0x3FF)];
            if (v15 < 13)
              goto LABEL_54;
LABEL_60:
            v48 = &(*(int **)((char *)a3 + (((unint64_t)(v16 - 3) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v16 - 3) & 0x3FF];
            v49 = *(_DWORD *)v47;
            v50 = *(_DWORD *)v44;
            v51 = *v48;
            if (*(_DWORD *)v47 >= *(_DWORD *)v44)
              goto LABEL_55;
            goto LABEL_61;
          }
        }
        else
        {
          v44 = &(*(char **)((char *)a1 + (((unint64_t)(v19 + 2) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v19 + 2) & 0x3FF)];
          v45 = v21 + v19 + 1;
          v46 = (unint64_t)v45 >> 7;
          if (v45 < 1)
            goto LABEL_53;
        }
        v47 = &(*(char **)((char *)a1 + (v46 & 0x1FFFFFFFFFFFFF8)))[4 * (v45 & 0x3FF)];
        if (v15 >= 13)
          goto LABEL_60;
LABEL_54:
        v48 = &a3[-((unint64_t)(1026 - v16) >> 10)][~(1026 - (_WORD)v16) & 0x3FF];
        v49 = *(_DWORD *)v47;
        v50 = *(_DWORD *)v44;
        v51 = *v48;
        if (*(_DWORD *)v47 >= *(_DWORD *)v44)
        {
LABEL_55:
          if (v51 < v49)
          {
            *(_DWORD *)v47 = v51;
            *v48 = v49;
            v52 = *(_DWORD *)v44;
            if (*(_DWORD *)v47 < *(_DWORD *)v44)
            {
              *(_DWORD *)v44 = *(_DWORD *)v47;
              *(_DWORD *)v47 = v52;
            }
          }
          goto LABEL_66;
        }
LABEL_61:
        if (v51 >= v49)
        {
          *(_DWORD *)v44 = v49;
          *(_DWORD *)v47 = v50;
          if (*v48 >= v50)
            goto LABEL_66;
          *(_DWORD *)v47 = *v48;
        }
        else
        {
          *(_DWORD *)v44 = v51;
        }
        *v48 = v50;
LABEL_66:
        if (v36 < 1)
        {
          v53 = &a1[-((unint64_t)(1023 - v36) >> 10)][4 * (~(1023 - (_WORD)v36) & 0x3FF)];
          if (v22 >= 1)
          {
LABEL_68:
            v54 = &(*(char **)((char *)a1 + (((unint64_t)v22 >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * (v22 & 0x3FF)];
            if (v45 >= 1)
              goto LABEL_69;
LABEL_74:
            v55 = &a1[-((unint64_t)(1023 - v45) >> 10)][4 * (~(1023 - (_WORD)v45) & 0x3FF)];
            v56 = *(_DWORD *)v54;
            v57 = *(_DWORD *)v53;
            v58 = *(_DWORD *)v55;
            if (*(_DWORD *)v54 < *(_DWORD *)v53)
              goto LABEL_70;
LABEL_75:
            if (v58 < v56)
            {
              *(_DWORD *)v54 = v58;
              *(_DWORD *)v55 = v56;
              v59 = *(_DWORD *)v53;
              if (*(_DWORD *)v54 < *(_DWORD *)v53)
              {
                *(_DWORD *)v53 = *(_DWORD *)v54;
                *(_DWORD *)v54 = v59;
              }
            }
            goto LABEL_81;
          }
        }
        else
        {
          v53 = &(*(char **)((char *)a1 + (v37 & 0x1FFFFFFFFFFFFF8)))[4 * (v36 & 0x3FF)];
          if (v22 >= 1)
            goto LABEL_68;
        }
        v54 = &a1[-((unint64_t)(1023 - v22) >> 10)][4 * (~(1023 - (_WORD)v22) & 0x3FF)];
        if (v45 < 1)
          goto LABEL_74;
LABEL_69:
        v55 = &(*(char **)((char *)a1 + (v46 & 0x1FFFFFFFFFFFFF8)))[4 * (v45 & 0x3FF)];
        v56 = *(_DWORD *)v54;
        v57 = *(_DWORD *)v53;
        v58 = *(_DWORD *)v55;
        if (*(_DWORD *)v54 >= *(_DWORD *)v53)
          goto LABEL_75;
LABEL_70:
        if (v58 >= v56)
        {
          *(_DWORD *)v53 = v56;
          *(_DWORD *)v54 = v57;
          if (*(_DWORD *)v55 >= v57)
            goto LABEL_81;
          *(_DWORD *)v54 = *(_DWORD *)v55;
        }
        else
        {
          *(_DWORD *)v53 = v58;
        }
        *(_DWORD *)v55 = v57;
LABEL_81:
        if (v22 < 1)
        {
          v62 = (int *)&a1[-((unint64_t)(1023 - v22) >> 10)][4 * (~(1023 - (_WORD)v22) & 0x3FF)];
          v63 = *v11;
          *v11 = *v62;
          *v62 = v63;
          if ((a7 & 1) != 0)
            goto LABEL_90;
          goto LABEL_85;
        }
        v60 = (int *)&(*(char **)((char *)a1 + (((unint64_t)v22 >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * (v22 & 0x3FF)];
        v61 = *v11;
        *v11 = *v60;
        *v60 = v61;
        if ((a7 & 1) == 0)
          goto LABEL_85;
LABEL_90:
        std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__less<void,void> &>(a1, (char *)v11, (char **)a3, (char *)v9, (uint64_t)&v125);
        v65 = v125;
        v66 = v126;
        if (!v127)
        {
LABEL_94:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(a1, v11, v65, v66, a5, v13, a7 & 1);
          a7 = 0;
          goto LABEL_95;
        }
        v67 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v11, v125, v126);
        v68 = v66 - *(_QWORD *)v65;
        v69 = v68 >> 2;
        if (v68 >= -3)
        {
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(&v65[8 * ((unint64_t)(v69 + 1) >> 10)], (int *)(*(_QWORD *)&v65[8 * ((unint64_t)(v69 + 1) >> 10)] + 4 * ((v69 + 1) & 0x3FF)), (char *)a3, (uint64_t)v9))goto LABEL_93;
LABEL_99:
          a3 = (int **)v65;
          v9 = (int *)v66;
          if (v67)
            return;
          goto LABEL_100;
        }
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(&v65[-8 * ((unint64_t)(1022 - v69) >> 10)], (int *)(*(_QWORD *)&v65[-8 * ((unint64_t)(1022 - v69) >> 10)]+ 4 * (~(1022 - (_WORD)v69) & 0x3FF)), (char *)a3, (uint64_t)v9))
        {
          goto LABEL_99;
        }
LABEL_93:
        if (!v67)
          goto LABEL_94;
LABEL_95:
        v11 = (int *)(v66 + 4);
        if (v66 + 4 - *(_QWORD *)v65 == 4096)
        {
          v70 = (int *)*((_QWORD *)v65 + 1);
          v65 += 8;
          v11 = v70;
        }
        a1 = (char **)v65;
LABEL_100:
        --v13;
        if (v9 != v11)
          continue;
        return;
    }
  }
}

char **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__less<void,void> &>(char **result, char *a2, _QWORD *a3, char *a4)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  int v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v4 = *(_DWORD *)a2;
  v5 = (char *)*a3;
  v6 = (uint64_t)&a4[-*a3];
  v7 = v6 >> 2;
  if (v6 < 5)
  {
    v8 = *result;
    if (v4 >= *(_DWORD *)(a3[-((unint64_t)(1024 - v7) >> 10)] + 4 * (~(1024 - (_WORD)v7) & 0x3FF)))
    {
LABEL_3:
      v9 = a2;
      do
      {
        v9 += 4;
        if (v9 - v8 == 4096)
        {
          v10 = result[1];
          ++result;
          v8 = v10;
          v9 = v10;
        }
      }
      while ((result < a3 || result == a3 && v9 < a4) && v4 >= *(_DWORD *)v9);
      goto LABEL_10;
    }
  }
  else
  {
    v8 = *result;
    if (v4 >= *(_DWORD *)(*(_QWORD *)((char *)a3 + (((unint64_t)(v7 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((v7 - 1) & 0x3FF)))
      goto LABEL_3;
  }
  v9 = a2;
  do
  {
    v9 += 4;
    if (v9 - v8 == 4096)
    {
      v20 = result[1];
      ++result;
      v8 = v20;
      v9 = v20;
    }
  }
  while (v4 >= *(_DWORD *)v9);
LABEL_10:
  if (result < a3 || result == a3 && v9 < a4)
  {
    do
    {
      if (a4 == v5)
      {
        v12 = (char *)*--a3;
        v5 = v12;
        a4 = v12 + 4096;
      }
      v11 = *((_DWORD *)a4 - 1);
      a4 -= 4;
    }
    while (v4 < v11);
  }
  while (result < a3 || result == a3 && v9 < a4)
  {
    v13 = *(_DWORD *)v9;
    *(_DWORD *)v9 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v13;
    do
    {
      v9 += 4;
      if (v9 - v8 == 4096)
      {
        v14 = result[1];
        ++result;
        v8 = v14;
        v9 = v14;
      }
    }
    while (v4 >= *(_DWORD *)v9);
    do
    {
      if (a4 == v5)
      {
        v16 = (char *)*--a3;
        v5 = v16;
        a4 = v16 + 4096;
      }
      v15 = *((_DWORD *)a4 - 1);
      a4 -= 4;
    }
    while (v4 < v15);
  }
  v17 = v9 - v8;
  v18 = v17 >> 2;
  if (v17 >= 5)
  {
    v19 = &(*(char **)((char *)result + (((unint64_t)(v18 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v18 - 1) & 0x3FF)];
    if (v19 == a2)
      goto LABEL_37;
    goto LABEL_36;
  }
  v19 = &result[-((unint64_t)(1024 - v18) >> 10)][4 * (~(1024 - (_WORD)v18) & 0x3FF)];
  if (v19 != a2)
LABEL_36:
    *(_DWORD *)a2 = *(_DWORD *)v19;
LABEL_37:
  *(_DWORD *)v19 = v4;
  return result;
}

char **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__less<void,void> &>@<X0>(char **result@<X0>, char *a2@<X1>, char **a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  uint64_t v15;
  BOOL v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char **v25;
  char *v26;
  unint64_t v27;
  __int16 v28;

  v5 = *(_DWORD *)a2;
  v6 = *result;
  v7 = a2;
  do
  {
    v7 += 4;
    if (v7 - v6 == 4096)
    {
      v9 = result[1];
      ++result;
      v6 = v9;
      v7 = v9;
    }
    v8 = *(_DWORD *)v7;
  }
  while (*(_DWORD *)v7 < v5);
  v10 = (v7 - v6) >> 2;
  if (v7 - v6 >= 5)
  {
    if (&(*(char **)((char *)result + (((unint64_t)(v10 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[4 * ((v10 - 1) & 0x3FF)] == a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  if (&result[-((unint64_t)(1024 - v10) >> 10)][4 * (~(1024 - (_WORD)v10) & 0x3FF)] != a2)
  {
LABEL_9:
    v11 = *a3;
    do
    {
      if (a4 == v11)
      {
        v13 = *--a3;
        v11 = v13;
        a4 = v13 + 4096;
      }
      v12 = *((_DWORD *)a4 - 1);
      a4 -= 4;
    }
    while (v12 >= v5);
    goto LABEL_20;
  }
LABEL_15:
  while (result < a3 || result == a3 && v7 < a4)
  {
    if (a4 == *a3)
    {
      v15 = (uint64_t)*--a3;
      a4 = (char *)(v15 + 4092);
      if (*(_DWORD *)(v15 + 4092) < v5)
        break;
    }
    else
    {
      v14 = *((_DWORD *)a4 - 1);
      a4 -= 4;
      if (v14 < v5)
        break;
    }
  }
LABEL_20:
  v17 = result != a3 || v7 >= a4;
  if (result < a3)
    v17 = 0;
  while (result < a3 || result == a3 && v7 < a4)
  {
    *(_DWORD *)v7 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v8;
    do
    {
      v7 += 4;
      if (v7 - v6 == 4096)
      {
        v18 = result[1];
        ++result;
        v6 = v18;
        v7 = v18;
      }
      v8 = *(_DWORD *)v7;
    }
    while (*(_DWORD *)v7 < v5);
    v19 = *a3;
    do
    {
      if (a4 == v19)
      {
        v21 = *--a3;
        v19 = v21;
        a4 = v21 + 4096;
      }
      v20 = *((_DWORD *)a4 - 1);
      a4 -= 4;
    }
    while (v20 >= v5);
  }
  v22 = v7 - v6;
  v23 = v22 >> 2;
  if (v22 >= 5)
  {
    v24 = v23 - 1;
    v25 = &result[(unint64_t)(v23 - 1) >> 10];
    v26 = &(*v25)[4 * (v24 & 0x3FF)];
    if (v26 == a2)
      goto LABEL_44;
    goto LABEL_43;
  }
  v27 = 1024 - v23;
  v28 = ~(_WORD)v27;
  v25 = &result[-(v27 >> 10)];
  v26 = &(*v25)[4 * (v28 & 0x3FF)];
  if (v26 != a2)
LABEL_43:
    *(_DWORD *)a2 = *(_DWORD *)v26;
LABEL_44:
  *(_DWORD *)v26 = v5;
  *(_QWORD *)a5 = v25;
  *(_QWORD *)(a5 + 8) = v26;
  *(_BYTE *)(a5 + 16) = v17;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *a1, int *a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;
  char *v9;
  int *v10;
  unint64_t v11;
  int v12;
  int v13;
  int *v14;
  char *v15;
  int *v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  int *v27;
  unint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  int v46;
  int *v47;
  char *v48;
  _DWORD *v49;
  int v50;
  int v51;
  int *v52;
  _DWORD *v53;
  int *v54;
  int v55;
  int v56;
  int v57;
  _DWORD *v58;
  unint64_t v59;

  if ((int *)a4 == a2)
    return 1;
  v4 = *(_QWORD *)a3;
  v5 = (uint64_t)a2 - *(_QWORD *)a1;
  v6 = v5 >> 2;
  switch(((a4 - *(_QWORD *)a3) >> 2) + ((a3 - a1) << 7) - (v5 >> 2))
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (v4 == a4)
        a4 = *((_QWORD *)a3 - 1) + 4096;
      v12 = *(_DWORD *)(a4 - 4);
      v13 = *a2;
      if (v12 < *a2)
      {
        *a2 = v12;
        *(_DWORD *)(a4 - 4) = v13;
      }
      return 1;
    case 3:
      if (v5 < -3)
      {
        v14 = (int *)(*(_QWORD *)&a1[-8 * ((unint64_t)(1022 - v6) >> 10)] + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
        if (v4 != a4)
          goto LABEL_25;
      }
      else
      {
        v14 = (int *)(*(_QWORD *)&a1[((unint64_t)(v6 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v6 + 1) & 0x3FF));
        if (v4 != a4)
          goto LABEL_25;
      }
      a4 = *((_QWORD *)a3 - 1) + 4096;
LABEL_25:
      v23 = *v14;
      v24 = *a2;
      v25 = *(_DWORD *)(a4 - 4);
      if (*v14 >= *a2)
      {
        if (v25 >= v23)
          return 1;
        *v14 = v25;
        *(_DWORD *)(a4 - 4) = v23;
        goto LABEL_85;
      }
      if (v25 < v23)
      {
        *a2 = v25;
        *(_DWORD *)(a4 - 4) = v24;
        return 1;
      }
      *a2 = v23;
      *v14 = v24;
      v55 = *(_DWORD *)(a4 - 4);
      if (v55 < v24)
      {
        *v14 = v55;
        *(_DWORD *)(a4 - 4) = v24;
        return 1;
      }
      return 1;
    case 4:
      if (v5 >= -3)
      {
        v14 = (int *)(*(_QWORD *)&a1[((unint64_t)(v6 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v6 + 1) & 0x3FF));
        v18 = v6 + 2;
        goto LABEL_38;
      }
      v14 = (int *)(*(_QWORD *)&a1[-8 * ((unint64_t)(1022 - v6) >> 10)] + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF9)
      {
        v18 = 1;
LABEL_38:
        v32 = (int *)(*(_QWORD *)&a1[(v18 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v18 & 0x3FF));
        if (v4 != a4)
          goto LABEL_40;
        goto LABEL_39;
      }
      v32 = (int *)(*(_QWORD *)&a1[-8 * ((unint64_t)(1021 - v6) >> 10)] + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
      if (v4 == a4)
LABEL_39:
        a4 = *((_QWORD *)a3 - 1) + 4096;
LABEL_40:
      v33 = *v14;
      v34 = *a2;
      v35 = *v32;
      if (*v14 < *a2)
      {
        if (v35 >= v33)
        {
          *a2 = v33;
          *v14 = v34;
          v33 = *v32;
          if (*v32 >= v34)
            goto LABEL_80;
          *v14 = v33;
        }
        else
        {
          *a2 = v35;
        }
        *v32 = v34;
        v33 = v34;
LABEL_80:
        v37 = *(_DWORD *)(a4 - 4);
        if (v37 >= v33)
          return 1;
        goto LABEL_83;
      }
      if (v35 < v33)
      {
        *v14 = v35;
        *v32 = v33;
        v36 = *a2;
        if (*v14 < *a2)
        {
          *a2 = *v14;
          *v14 = v36;
          v33 = *v32;
          v37 = *(_DWORD *)(a4 - 4);
          if (v37 >= *v32)
            return 1;
          goto LABEL_83;
        }
        goto LABEL_80;
      }
      v33 = *v32;
      v37 = *(_DWORD *)(a4 - 4);
      if (v37 >= v35)
        return 1;
LABEL_83:
      *v32 = v37;
      *(_DWORD *)(a4 - 4) = v33;
      v56 = *v14;
      if (*v32 >= *v14)
        return 1;
      *v14 = *v32;
      *v32 = v56;
LABEL_85:
      v57 = *a2;
      if (*v14 >= *a2)
        return 1;
      *a2 = *v14;
      *v14 = v57;
      return 1;
    case 5:
      if (v5 >= -3)
      {
        v15 = &a1[8 * ((unint64_t)(v6 + 1) >> 10)];
        v16 = (int *)(*(_QWORD *)v15 + 4 * ((v6 + 1) & 0x3FF));
        v17 = v6 + 2;
LABEL_30:
        v26 = &a1[8 * (v17 >> 10)];
        v27 = (int *)(*(_QWORD *)v26 + 4 * (v17 & 0x3FF));
        v28 = v6 + 3;
        goto LABEL_31;
      }
      v15 = &a1[-8 * ((unint64_t)(1022 - v6) >> 10)];
      v16 = (int *)(*(_QWORD *)v15 + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF9)
      {
        v17 = 1;
        goto LABEL_30;
      }
      v26 = &a1[-8 * ((unint64_t)(1021 - v6) >> 10)];
      v27 = (int *)(*(_QWORD *)v26 + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF5)
      {
        v28 = 1;
LABEL_31:
        v29 = &a1[8 * (v28 >> 10)];
        v30 = (int *)(*(_QWORD *)v29 + 4 * (v28 & 0x3FF));
        if (v4 != a4)
          goto LABEL_33;
        goto LABEL_32;
      }
      v59 = 1020 - v6;
      v29 = &a1[-8 * (v59 >> 10)];
      v30 = (int *)(*(_QWORD *)v29 + 4 * (~(_WORD)v59 & 0x3FF));
      if (v4 == a4)
      {
LABEL_32:
        v31 = *((_QWORD *)a3 - 1);
        a3 -= 8;
        a4 = v31 + 4096;
      }
LABEL_33:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v15, v16, (uint64_t)v26, v27, (uint64_t)v29, v30, (uint64_t)a3, (int *)(a4 - 4));
      return 1;
    default:
      if (v5 <= -8)
      {
        v8 = &a1[-8 * ((unint64_t)(1021 - v6) >> 10)];
        v9 = *(char **)v8;
        v10 = (int *)(*(_QWORD *)v8 + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
        v11 = 1022 - v6;
      }
      else
      {
        v8 = &a1[8 * ((unint64_t)(v6 + 2) >> 10)];
        v9 = *(char **)v8;
        v10 = (int *)(*(_QWORD *)v8 + 4 * ((v6 + 2) & 0x3FF));
        if (v6 != -1)
        {
          v19 = (int *)(*(_QWORD *)&a1[((unint64_t)(v6 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v6 + 1) & 0x3FF));
          v20 = *v19;
          v21 = *a2;
          v22 = *v10;
          if (*v19 < *a2)
            goto LABEL_21;
LABEL_48:
          if (v22 < v20)
          {
            *v19 = v22;
            *v10 = v20;
            v38 = *a2;
            if (*v19 < *a2)
            {
              *a2 = *v19;
              *v19 = v38;
            }
          }
          goto LABEL_54;
        }
        v11 = 1023;
      }
      v19 = (int *)(*(_QWORD *)&a1[-8 * (v11 >> 10)] + 4 * (~(_WORD)v11 & 0x3FF));
      v20 = *v19;
      v21 = *a2;
      v22 = *v10;
      if (*v19 >= *a2)
        goto LABEL_48;
LABEL_21:
      if (v22 >= v20)
      {
        *a2 = v20;
        *v19 = v21;
        if (*v10 >= v21)
          goto LABEL_54;
        *v19 = *v10;
      }
      else
      {
        *a2 = v22;
      }
      *v10 = v21;
LABEL_54:
      v39 = ((char *)v10 - v9) >> 2;
      if ((char *)v10 - v9 < -3)
      {
        v44 = 1022 - v39;
        v41 = &v8[-8 * (v44 >> 10)];
        v42 = *(_DWORD **)v41;
        v43 = ~(_DWORD)v44 & 0x3FFLL;
      }
      else
      {
        v40 = v39 + 1;
        v41 = &v8[8 * (v40 >> 10)];
        v42 = *(_DWORD **)v41;
        v43 = v40 & 0x3FF;
      }
      v45 = &v42[v43];
      if (v45 == (int *)a4)
        return 1;
      v46 = 0;
      while (1)
      {
        v47 = v45;
        v48 = v41;
        v49 = v42;
        v50 = *v45;
        v51 = *v10;
        if (v50 < *v10)
        {
          v52 = v47;
          while (1)
          {
            *v52 = v51;
            if (v10 == a2)
              break;
            v54 = v10;
            if (v10 == (int *)v9)
            {
              v53 = (_DWORD *)*((_QWORD *)v8 - 1);
              v8 -= 8;
              v9 = (char *)v53;
              v10 = v53 + 1023;
              v51 = v53[1023];
              v52 = v54;
              if (v50 >= v51)
                goto LABEL_68;
            }
            else
            {
              --v10;
              v51 = *(v54 - 1);
              v52 = v54;
              if (v50 >= v51)
                goto LABEL_68;
            }
          }
          v54 = a2;
LABEL_68:
          *v54 = v50;
          if (++v46 == 8)
            break;
        }
        v45 = v47 + 1;
        v42 = v49;
        v41 = v48;
        if ((char *)(v47 + 1) - (char *)v49 == 4096)
        {
          v41 = v48 + 8;
          v42 = (_DWORD *)*((_QWORD *)v48 + 1);
          v45 = v42;
        }
        v9 = (char *)v49;
        v8 = v48;
        v10 = v47;
        if (v45 == (int *)a4)
          return 1;
      }
      v58 = v47 + 1;
      if ((char *)(v47 + 1) - (char *)v49 == 4096)
        v58 = (_DWORD *)*((_QWORD *)v48 + 1);
      return v58 == (_DWORD *)a4;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9, int *a10)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v10 = *a4;
  v11 = *a2;
  v12 = *a6;
  if (*a4 >= *a2)
  {
    if (v12 >= v10)
    {
      v10 = *a6;
      v14 = *a8;
      if (*a8 >= v12)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a4 = v12;
    *a6 = v10;
    v13 = *a2;
    if (*a4 < *a2)
    {
      *a2 = *a4;
      *a4 = v13;
      v10 = *a6;
      v14 = *a8;
      if (*a8 >= *a6)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 >= v10)
    {
      *a2 = v10;
      *a4 = v11;
      v10 = *a6;
      if (*a6 >= v11)
        goto LABEL_11;
      *a4 = v10;
    }
    else
    {
      *a2 = v12;
    }
    *a6 = v11;
    v10 = v11;
  }
LABEL_11:
  v14 = *a8;
  if (*a8 >= v10)
    goto LABEL_17;
LABEL_14:
  *a6 = v14;
  *a8 = v10;
  v15 = *a4;
  if (*a6 < *a4)
  {
    *a4 = *a6;
    *a6 = v15;
    v16 = *a2;
    if (*a4 < *a2)
    {
      *a2 = *a4;
      *a4 = v16;
    }
  }
LABEL_17:
  v17 = *a8;
  if (*a10 < *a8)
  {
    *a8 = *a10;
    *a10 = v17;
    v18 = *a6;
    if (*a8 < *a6)
    {
      *a6 = *a8;
      *a8 = v18;
      v19 = *a4;
      if (*a6 < *a4)
      {
        *a4 = *a6;
        *a6 = v19;
        v20 = *a2;
        if (*a4 < *a2)
        {
          *a2 = *a4;
          *a4 = v20;
        }
      }
    }
  }
}

int **std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *a1, int *a2, int **a3, int *a4, int **a5, int *a6, uint64_t a7)
{
  uint64_t v9;
  int **v10;
  int64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  int *v25;
  int v26;
  int *v27;
  uint64_t v29;

  if (a2 == a4)
    return a5;
  v9 = (uint64_t)a4;
  v10 = a3;
  v13 = ((char *)a3 - a1) << 7;
  v14 = *a3;
  v15 = v13 + a4 - *a3 - (((uint64_t)a2 - *(_QWORD *)a1) >> 2);
  v16 = v15 - 2;
  if (v15 >= 2)
  {
    v17 = v16 >> 1;
    v18 = 1023 - (v16 >> 1);
    do
    {
      if (v17)
      {
        v22 = ((uint64_t)a2 - *(_QWORD *)a1) >> 2;
        v23 = v17 + v22;
        if (v17 + v22 < 1)
        {
          v20 = &a1[-8 * ((unint64_t)(v18 - v22) >> 10)];
          v19 = (int *)(*(_QWORD *)v20 + 4 * (~((_WORD)v18 - (_WORD)v22) & 0x3FF));
        }
        else
        {
          v20 = &a1[8 * (v23 >> 10)];
          v19 = (int *)(*(_QWORD *)v20 + 4 * (v23 & 0x3FF));
        }
      }
      else
      {
        v19 = a2;
        v20 = a1;
      }
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, a7, v15, v20, v19);
      ++v18;
      v21 = v17-- <= 0;
    }
    while (!v21);
    v14 = *v10;
    v15 = v13 + ((v9 - (uint64_t)*v10) >> 2) - (((uint64_t)a2 - *(_QWORD *)a1) >> 2);
  }
  if ((int *)v9 == a6)
  {
    a5 = v10;
    if (v15 >= 2)
      goto LABEL_25;
    return a5;
  }
  v25 = (int *)v9;
  a5 = v10;
  do
  {
    v26 = *v25;
    if (*v25 < *a2)
    {
      *v25++ = *a2;
      *a2 = v26;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, a7, v15, a1, a2);
      v14 = *a5;
      if ((char *)v25 - (char *)*a5 != 4096)
        continue;
    }
    else if ((char *)++v25 - (char *)v14 != 4096)
    {
      continue;
    }
    v27 = a5[1];
    ++a5;
    v14 = v27;
    v25 = v27;
  }
  while (v25 != a6);
  v15 = v13 + ((v9 - (uint64_t)*v10) >> 2) - (((uint64_t)a2 - *(_QWORD *)a1) >> 2);
  if (v15 < 2)
    return a5;
  do
  {
LABEL_25:
    std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, v10, v9, a7, v15);
    if ((int *)v9 == *v10)
    {
      v29 = (uint64_t)*--v10;
      v9 = v29 + 4096;
    }
    v9 -= 4;
    v21 = v15-- <= 2;
  }
  while (!v21);
  return a5;
}

char *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *result, int *a2, uint64_t a3, uint64_t a4, char *a5, int *a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  if (a6 == a2)
  {
    v6 = 0;
    v7 = a4 - 2;
    if (a4 < 2)
      return result;
  }
  else
  {
    v6 = (((uint64_t)a6 - *(_QWORD *)a5) >> 2) + ((a5 - result) << 7) - (((uint64_t)a2 - *(_QWORD *)result) >> 2);
    v7 = a4 - 2;
    if (a4 < 2)
      return result;
  }
  v8 = v7 >> 1;
  if (v8 >= v6)
  {
    v9 = 2 * v6;
    v10 = (2 * v6) | 1;
    v11 = ((uint64_t)a2 - *(_QWORD *)result) >> 2;
    v12 = v11 + v10;
    if (v11 + v10 < 1)
    {
      v17 = 1023 - v12;
      v13 = &result[-8 * (v17 >> 10)];
      v14 = *(_QWORD *)v13;
      v15 = (int *)(*(_QWORD *)v13 + 4 * (~(_DWORD)v17 & 0x3FFLL));
      v16 = v9 + 2;
      if (v16 < a4)
        goto LABEL_10;
    }
    else
    {
      v13 = &result[8 * (v12 >> 10)];
      v14 = *(_QWORD *)v13;
      v15 = (int *)(*(_QWORD *)v13 + 4 * (v12 & 0x3FF));
      v16 = v9 + 2;
      if (v16 < a4)
      {
LABEL_10:
        v18 = ((uint64_t)v15 - v14) >> 2;
        if ((uint64_t)v15 - v14 < -3)
        {
          if (*v15 >= *(_DWORD *)(*(_QWORD *)&v13[-8 * ((unint64_t)(1022 - v18) >> 10)]
                                 + 4 * (~(1022 - (_WORD)v18) & 0x3FF)))
            goto LABEL_12;
        }
        else if (*v15 >= *(_DWORD *)(*(_QWORD *)&v13[((unint64_t)(v18 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                                    + 4 * ((v18 + 1) & 0x3FF)))
        {
          goto LABEL_12;
        }
        if ((int *)((char *)++v15 - v14) == (int *)4096)
          v15 = (int *)*((_QWORD *)v13 + 1);
LABEL_13:
        v19 = *v15;
        v20 = *a6;
        if (*v15 < *a6)
          return result;
        while (1)
        {
          *a6 = v19;
          a6 = v15;
          if (v8 < v16)
          {
LABEL_29:
            *a6 = v20;
            return result;
          }
          v21 = (2 * v16) | 1;
          v22 = v21 + v11;
          if (v21 + v11 < 1)
          {
            v25 = 1023 - v22;
            v23 = &result[-8 * (v25 >> 10)];
            v24 = *(_QWORD *)v23;
            v15 = (int *)(*(_QWORD *)v23 + 4 * (~(_DWORD)v25 & 0x3FFLL));
            v16 = 2 * v16 + 2;
            if (v16 >= a4)
              goto LABEL_16;
          }
          else
          {
            v23 = &result[8 * (v22 >> 10)];
            v24 = *(_QWORD *)v23;
            v15 = (int *)(*(_QWORD *)v23 + 4 * (v22 & 0x3FF));
            v16 = 2 * v16 + 2;
            if (v16 >= a4)
              goto LABEL_16;
          }
          v26 = ((uint64_t)v15 - v24) >> 2;
          if ((uint64_t)v15 - v24 < -3)
          {
            if (*v15 < *(_DWORD *)(*(_QWORD *)&v23[-8 * ((unint64_t)(1022 - v26) >> 10)]
                                  + 4 * (~(1022 - (_WORD)v26) & 0x3FF)))
            {
LABEL_27:
              if ((int *)((char *)++v15 - v24) == (int *)4096)
                v15 = (int *)*((_QWORD *)v23 + 1);
              goto LABEL_17;
            }
          }
          else if (*v15 < *(_DWORD *)(*(_QWORD *)&v23[((unint64_t)(v26 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                                     + 4 * ((v26 + 1) & 0x3FF)))
          {
            goto LABEL_27;
          }
LABEL_16:
          v16 = v21;
LABEL_17:
          v19 = *v15;
          if (*v15 < v20)
            goto LABEL_29;
        }
      }
    }
LABEL_12:
    v16 = v10;
    goto LABEL_13;
  }
  return result;
}

char *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *result, _DWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  _DWORD *v8;
  char *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  if (a6 < 2)
    return result;
  v6 = 0;
  v7 = *a2;
  v8 = a2;
  v9 = result;
  do
  {
    v10 = v8;
    if (v6 == -1)
    {
      v11 = -1;
      v6 = 0;
    }
    else
    {
      v12 = v6 + 1 + (((uint64_t)v8 - *(_QWORD *)v9) >> 2);
      if (v12 < 1)
      {
        v13 = 1023 - v12;
        v9 -= 8 * (v13 >> 10);
        v8 = (_DWORD *)(*(_QWORD *)v9 + 4 * (~(_WORD)v13 & 0x3FF));
        v11 = (2 * v6) | 1;
        v6 = 2 * v6 + 2;
        if (v6 >= a6)
          goto LABEL_3;
      }
      else
      {
        v9 += 8 * ((unint64_t)v12 >> 10);
        v8 = (_DWORD *)(*(_QWORD *)v9 + 4 * (v12 & 0x3FF));
        v11 = (2 * v6) | 1;
        v6 = 2 * v6 + 2;
        if (v6 >= a6)
          goto LABEL_3;
      }
    }
    v14 = (uint64_t)v8 - *(_QWORD *)v9;
    v15 = v14 >> 2;
    if (v14 < -3)
    {
      if (*v8 >= *(_DWORD *)(*(_QWORD *)&v9[-8 * ((unint64_t)(1022 - v15) >> 10)]
                            + 4 * (~(1022 - (_WORD)v15) & 0x3FF)))
      {
LABEL_3:
        v6 = v11;
        goto LABEL_4;
      }
    }
    else if (*v8 >= *(_DWORD *)(*(_QWORD *)&v9[((unint64_t)(v15 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                               + 4 * ((v15 + 1) & 0x3FF)))
    {
      goto LABEL_3;
    }
    if ((_DWORD *)((char *)++v8 - *(_QWORD *)v9) == (_DWORD *)4096)
    {
      v16 = (_DWORD *)*((_QWORD *)v9 + 1);
      v9 += 8;
      v8 = v16;
    }
LABEL_4:
    *v10 = *v8;
  }
  while (v6 <= (uint64_t)((unint64_t)(a6 - 2) >> 1));
  if (*a3 != a4)
  {
    v17 = (_DWORD *)(a4 - 4);
    if (v8 != (_DWORD *)(a4 - 4))
      goto LABEL_20;
LABEL_29:
    *v8 = v7;
    return result;
  }
  v17 = (_DWORD *)(*(a3 - 1) + 4092);
  if (v8 == v17)
    goto LABEL_29;
LABEL_20:
  *v8 = *v17;
  v18 = v8 + 1;
  v19 = *(_DWORD **)v9;
  if ((_DWORD *)((char *)v18 - *(_QWORD *)v9) == (_DWORD *)4096)
  {
    v20 = (_DWORD *)*((_QWORD *)v9 + 1);
    v9 += 8;
    v19 = v20;
    v18 = v20;
  }
  *v17 = v7;
  if (v18 != a2)
  {
    v21 = ((uint64_t)a2 - *(_QWORD *)result) >> 2;
    v22 = v18 - v19 + ((v9 - result) << 7) - v21;
    v23 = v22 - 2;
    if (v22 >= 2)
    {
      v24 = v23 >> 1;
      v25 = a2;
      if (v23 >= 2)
      {
        v32 = v21 + v24;
        if ((uint64_t)(v21 + v24) < 1)
        {
          v25 = (int *)(*(_QWORD *)&result[-8 * ((1023 - v32) >> 10)] + 4 * (~(1023 - (_WORD)v32) & 0x3FF));
          if (v19 != v18)
            goto LABEL_26;
        }
        else
        {
          v25 = (int *)(*(_QWORD *)&result[(v32 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v32 & 0x3FF));
          if (v19 != v18)
            goto LABEL_26;
        }
      }
      else if (v19 != v18)
      {
LABEL_26:
        v28 = *(v18 - 1);
        v26 = v18 - 1;
        v27 = v28;
        v29 = *v25;
        if (*v25 >= v28)
          return result;
        do
        {
LABEL_32:
          *v26 = v29;
          v26 = v25;
          if (!v24)
            break;
          v30 = (v24 - 1) >> 1;
          v25 = a2;
          if (v24 >= 3)
          {
            v31 = v21 + v30;
            if ((uint64_t)(v21 + v30) < 1)
              v25 = (int *)(*(_QWORD *)&result[-8 * ((1023 - v31) >> 10)] + 4 * (~(1023 - (_WORD)v31) & 0x3FF));
            else
              v25 = (int *)(*(_QWORD *)&result[(v31 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v31 & 0x3FF));
          }
          v29 = *v25;
          v24 = v30;
        }
        while (*v25 < v27);
        *v26 = v27;
        return result;
      }
      v26 = (int *)(*((_QWORD *)v9 - 1) + 4092);
      v27 = *v26;
      v29 = *v25;
      if (*v25 >= *v26)
        return result;
      goto LABEL_32;
    }
  }
  return result;
}

char *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  char *v9;
  std::string *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (char *)*v6;
  v8 = v6;
  v9 = (char *)operator new(0x40uLL);
  v10 = (std::string *)(v9 + 32);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *((_QWORD *)v9 + 6) = *(_QWORD *)(a4 + 16);
  }
  *((_DWORD *)v9 + 14) = *(_DWORD *)(a4 + 24);
  v11 = v15;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v11;
  *v8 = (uint64_t)v9;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_22DAF0B98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t **v38;
  _QWORD *v39;
  const void *v40;
  const void *v41;
  int v42;
  size_t v43;
  const void *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  int v48;
  _BOOL4 v49;
  uint64_t *v50;
  int v51;
  size_t v52;
  uint64_t *v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t **v59;
  _QWORD *v60;
  const void *v61;
  const void *v62;
  int v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  _BOOL4 v68;
  int v69;
  _BOOL4 v70;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_20;
  v10 = *((char *)a2 + 55);
  v11 = *((char *)a5 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  if (v11 >= 0)
    v13 = a5;
  else
    v13 = *a5;
  if (v10 >= 0)
    v14 = *((unsigned __int8 *)a2 + 55);
  else
    v14 = a2[5];
  if (v10 >= 0)
    v15 = a2 + 4;
  else
    v15 = (const void *)a2[4];
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v18 = v12 < v14;
  if (v17)
    v18 = v17 < 0;
  if (v18)
  {
LABEL_20:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
LABEL_53:
      if (v19)
      {
        *a3 = v21;
        return v21 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v19)
    {
      v20 = (uint64_t *)*a2;
      do
      {
        v21 = v20;
        v20 = (uint64_t *)v20[1];
      }
      while (v20);
    }
    else
    {
      v26 = a2;
      do
      {
        v21 = (uint64_t *)v26[2];
        v27 = *v21 == (_QWORD)v26;
        v26 = v21;
      }
      while (v27);
    }
    v28 = *((char *)a5 + 23);
    v29 = *((char *)v21 + 55);
    if (v29 >= 0)
      v30 = *((unsigned __int8 *)v21 + 55);
    else
      v30 = v21[5];
    if (v29 >= 0)
      v31 = v21 + 4;
    else
      v31 = (const void *)v21[4];
    if (v28 >= 0)
      v32 = *((unsigned __int8 *)a5 + 23);
    else
      v32 = (size_t)a5[1];
    if (v28 >= 0)
      v33 = a5;
    else
      v33 = *a5;
    if (v32 >= v30)
      v34 = v30;
    else
      v34 = v32;
    v35 = memcmp(v31, v33, v34);
    v36 = v30 < v32;
    if (v35)
      v36 = v35 < 0;
    if (v36)
      goto LABEL_53;
    v37 = *v8;
    if (*v8)
    {
      do
      {
        while (1)
        {
          v38 = (uint64_t **)v37;
          v41 = (const void *)v37[4];
          v39 = v37 + 4;
          v40 = v41;
          v42 = *((char *)v39 + 23);
          if (v42 >= 0)
            v43 = *((unsigned __int8 *)v39 + 23);
          else
            v43 = v39[1];
          if (v42 >= 0)
            v44 = v39;
          else
            v44 = v40;
          if (v43 >= v32)
            v45 = v32;
          else
            v45 = v43;
          v46 = memcmp(v33, v44, v45);
          v47 = v32 < v43;
          if (v46)
            v47 = v46 < 0;
          if (!v47)
            break;
          v37 = *v38;
          v8 = v38;
          if (!*v38)
            goto LABEL_74;
        }
        v48 = memcmp(v44, v33, v45);
        v49 = v43 < v32;
        if (v48)
          v49 = v48 < 0;
        if (!v49)
          break;
        v8 = v38 + 1;
        v37 = v38[1];
      }
      while (v37);
    }
    else
    {
      v38 = v8;
    }
LABEL_74:
    *a3 = (uint64_t *)v38;
    return (uint64_t *)v8;
  }
  v22 = memcmp(v15, v13, v16);
  v23 = v14 < v12;
  if (v22)
    v23 = v22 < 0;
  if (!v23)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v24 = a2[1];
  if (v24)
  {
    v25 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v25;
      v25 = (uint64_t *)*v25;
    }
    while (v25);
  }
  else
  {
    v50 = a2;
    do
    {
      a4 = (uint64_t **)v50[2];
      v27 = *a4 == v50;
      v50 = (uint64_t *)a4;
    }
    while (!v27);
  }
  if (a4 != v8)
  {
    v51 = *((char *)a4 + 55);
    if (v51 >= 0)
      v52 = *((unsigned __int8 *)a4 + 55);
    else
      v52 = (size_t)a4[5];
    if (v51 >= 0)
      v53 = (uint64_t *)(a4 + 4);
    else
      v53 = a4[4];
    if (v52 >= v12)
      v54 = v12;
    else
      v54 = v52;
    v55 = memcmp(v13, v53, v54);
    v56 = v12 < v52;
    if (v55)
      v56 = v55 < 0;
    if (!v56)
    {
      v57 = *v8;
      if (*v8)
      {
        v58 = a3;
        do
        {
          while (1)
          {
            v59 = (uint64_t **)v57;
            v62 = (const void *)v57[4];
            v60 = v57 + 4;
            v61 = v62;
            v63 = *((char *)v60 + 23);
            if (v63 >= 0)
              v64 = *((unsigned __int8 *)v60 + 23);
            else
              v64 = v60[1];
            if (v63 >= 0)
              v65 = v60;
            else
              v65 = v61;
            if (v64 >= v12)
              v66 = v12;
            else
              v66 = v64;
            v67 = memcmp(v13, v65, v66);
            v68 = v12 < v64;
            if (v67)
              v68 = v67 < 0;
            if (!v68)
              break;
            v57 = *v59;
            v8 = v59;
            if (!*v59)
              goto LABEL_119;
          }
          v69 = memcmp(v65, v13, v66);
          v70 = v64 < v12;
          if (v69)
            v70 = v69 < 0;
          if (!v70)
            break;
          v8 = v59 + 1;
          v57 = v59[1];
        }
        while (v57);
      }
      else
      {
        v59 = v8;
        v58 = a3;
      }
LABEL_119:
      *v58 = (uint64_t *)v59;
      return (uint64_t *)v8;
    }
  }
  if (v24)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F984458;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F984458;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::operator()(uint64_t result, int **a2)
{
  int *v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6[2];
  uint64_t *v7;

  v2 = *a2;
  v3 = **a2;
  if (~v3 <= v3)
    v4 = **a2;
  else
    v4 = ~v3;
  v5 = *(_DWORD *)(**(_QWORD **)(result + 8) + 4 * v4);
  LODWORD(v6[0]) = v5;
  LODWORD(v7) = 0;
  if (v5 < 0)
  {
    result = google::MakeCheckOpString<int,int>((int)v6, (int)&v7, "image >= 0");
    v7 = (uint64_t *)result;
    if (result)
    {
      google::LogMessageFatal::LogMessageFatal(v6, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_presolve.cc", 4906, &v7);
      google::LogMessage::stream((google::LogMessage *)v6);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v6);
    }
    *v2 = v5 ^ (*v2 >> 31);
  }
  else
  {
    *v2 = v5 ^ (v3 >> 31);
  }
  return result;
}

void sub_22DAF1120(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20ApplyVariableMappingERKNSt3__16vectorIiNS1_9allocatorIiEEEERKNS0_15Pre"
                     "solveContextEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20ApplyVariableMappingERKNSt3__16vectorIiNS1_9allocatorIiEEEE"
                                "RKNS0_15PresolveContextEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20ApplyVariableMappingERKNSt3__16vectorIiNS1_9allocatorIiEEEERKNS0_15PresolveContextEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20ApplyVariableMappingERKNSt3__16vectorIiNS1_9allocatorIiEEEERKNS0_15PresolveContextEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0,std::allocator<operations_research::sat::ApplyVariableMapping(std::vector<int> const&,operations_research::sat::PresolveContext const&)::$_0>,void ()(int *)>::target_type()
{
}

void std::vector<operations_research::sat::IntegerVariableProto>::__append(uint64_t *a1, unint64_t a2, operations_research::sat::IntegerVariableProto *a3)
{
  uint64_t v6;
  uint64_t v7;
  operations_research::sat::IntegerVariableProto *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  operations_research::sat::IntegerVariableProto *v14;
  uint64_t v15;
  operations_research::sat::IntegerVariableProto *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  v7 = (uint64_t)(a1 + 2);
  v6 = a1[2];
  v8 = (operations_research::sat::IntegerVariableProto *)a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (uint64_t)v8) >> 3) >= a2)
  {
    if (a2)
    {
      v14 = (operations_research::sat::IntegerVariableProto *)((char *)v8 + 56 * a2);
      v15 = 56 * a2;
      do
      {
        operations_research::sat::IntegerVariableProto::IntegerVariableProto(v8, a3);
        v8 = (operations_research::sat::IntegerVariableProto *)((char *)v8 + 56);
        v15 -= 56;
      }
      while (v15);
      v8 = v14;
    }
    a1[1] = (uint64_t)v8;
  }
  else
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v8 - *a1) >> 3);
    v10 = v9 + a2;
    if (v9 + a2 > 0x492492492492492)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = 0x6DB6DB6DB6DB6DB7 * ((v6 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x249249249249249)
      v12 = 0x492492492492492;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(56 * v12);
    }
    else
    {
      v13 = 0;
    }
    v16 = (operations_research::sat::IntegerVariableProto *)&v13[56 * v9];
    v22 = (uint64_t)v16;
    v23 = &v13[56 * v12];
    v17 = 56 * a2;
    v18 = (char *)v16 + 56 * a2;
    do
    {
      operations_research::sat::IntegerVariableProto::IntegerVariableProto(v16, a3);
      v16 = (operations_research::sat::IntegerVariableProto *)((char *)v16 + 56);
      v17 -= 56;
    }
    while (v17);
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::sat::IntegerVariableProto>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>>(v7, a1[1], (__n128 *)a1[1], *a1, (__n128 *)*a1, v22, v22);
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v21;
    a1[1] = (uint64_t)v18;
    a1[2] = (uint64_t)v23;
    while (v19 != v20)
      operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)(v19 - 56));
    if (v20)
      operator delete(v20);
  }
}

void sub_22DAF1380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<operations_research::sat::IntegerVariableProto>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22DAF1394(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22DAF139C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<operations_research::sat::IntegerVariableProto>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<operations_research::sat::IntegerVariableProto>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    operations_research::sat::IntegerVariableProto::~IntegerVariableProto((operations_research::sat::IntegerVariableProto *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::sat::IntegerVariableProto>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>,std::reverse_iterator<operations_research::sat::IntegerVariableProto*>>(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, __n128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __n128 *v10;
  operations_research::sat::IntegerVariableProto *v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v7 = a7;
  if (a3 != a5)
  {
    v10 = (__n128 *)((char *)a3 - 56);
    v11 = (operations_research::sat::IntegerVariableProto *)(a7 - 56);
    do
    {
      operations_research::sat::IntegerVariableProto::IntegerVariableProto(v11, 0);
      v13 = *((_QWORD *)v11 + 1);
      v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      if ((v13 & 1) != 0)
      {
        v14 = (_QWORD *)*v14;
        v17 = v10->n128_u64[1];
        v16 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) == 0)
        {
LABEL_7:
          if (v14 == v16)
            goto LABEL_8;
          goto LABEL_3;
        }
      }
      else
      {
        v15 = v10->n128_u64[1];
        v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        if ((v15 & 1) == 0)
          goto LABEL_7;
      }
      if (v14 == (_QWORD *)*v16)
      {
LABEL_8:
        if ((char *)v11 + 56 != &v10[3].n128_i8[8])
          operations_research::sat::IntegerVariableProto::InternalSwap((__n128 *)v11, v10);
        goto LABEL_4;
      }
LABEL_3:
      operations_research::sat::IntegerVariableProto::CopyFrom(v11, (const operations_research::sat::IntegerVariableProto *)v10);
LABEL_4:
      v7 -= 56;
      v11 = (operations_research::sat::IntegerVariableProto *)((char *)v11 - 56);
      v12 = v10 == a5;
      v10 = (__n128 *)((char *)v10 - 56);
    }
    while (!v12);
  }
  return a6;
}

void operations_research::sat::ConstructSearchStrategyInternal(char **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  void *v15;
  __int128 v16;
  void *v17;
  char *v18;
  void *__p[3];
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)&v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
  *((_QWORD *)&v16 + 1) = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a3);
  std::vector<operations_research::sat::Strategy>::vector(&v17, a2);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::raw_hash_set((uint64_t)__p, a1);
  v23 = a3;
  *(_QWORD *)(a4 + 24) = 0;
  v8 = (char *)operator new(0x68uLL);
  *(_QWORD *)v8 = &off_24F9844D8;
  *(_OWORD *)(v8 + 8) = v16;
  std::vector<operations_research::sat::Strategy>::vector((_QWORD *)v8 + 3, (uint64_t *)&v17);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::raw_hash_set((uint64_t)(v8 + 48), (char **)__p);
  v9 = v20;
  *((_QWORD *)v8 + 12) = v23;
  *(_QWORD *)(a4 + 24) = v8;
  if (v9)
  {
    operator delete(__p[0]);
    v22 = 0;
    __p[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    __p[1] = 0;
    __p[2] = 0;
    v20 = 0;
  }
  if (v21)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v21);
  v10 = (char *)v17;
  if (v17)
  {
    v11 = v18;
    v12 = v17;
    if (v18 != v17)
    {
      v13 = v18;
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 4);
        v13 -= 32;
        v14 = v15;
        if (v15)
        {
          *((_QWORD *)v11 - 3) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = v17;
    }
    v18 = v10;
    operator delete(v12);
  }
}

void sub_22DAF1644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;
  uint64_t *v11;

  if (*v11)
    operations_research::sat::ConstructSearchStrategyInternal((uint64_t)v10, *v11);
  operator delete(v10);
  operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0::~$_0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_22DAF167C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0::~$_0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22DAF1690(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void **std::vector<operations_research::sat::Strategy>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 4);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 3) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0::~$_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (*(_QWORD *)(a1 + 64))
  {
    operator delete(*(void **)(a1 + 40));
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 40) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  v2 = *(_QWORD **)(a1 + 72);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(void **)(a1 + 16);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 24);
      do
      {
        v8 = *(void **)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v5);
  }
  return a1;
}

_QWORD *operations_research::sat::ConstructSearchStrategy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  operations_research::sat::SatParameters *v7;
  _QWORD *v8;
  int *v9;
  int *v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int v27;
  unint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  _QWORD *v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  int *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  int *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  _OWORD *v73;
  int *v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  int8x16_t **v79;
  uint64_t v80;
  int8x16_t **v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t i;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  __n128 v102;
  char *v103;
  _QWORD *v104;
  void *v105;
  _QWORD *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  char *v112;
  char *v113;
  void *v114;
  char *v115;
  void *v116;
  void *v117;
  _QWORD *result;
  uint64_t v119;
  int v121;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  void **v129;
  int8x16_t v130;
  void *v131;
  _QWORD *v132;
  void *__p;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  void *v137;
  char *v138;
  unint64_t v139;
  void *v140[2];
  __int128 v141;
  _BYTE v142[24];
  _BYTE *v143;
  _QWORD v144[3];
  _QWORD *v145;
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  v145 = 0;
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a4);
  v127 = a2;
  v121 = *((unsigned __int8 *)v7 + 424);
  if (!*((_BYTE *)v7 + 424))
    goto LABEL_82;
  v124 = a1;
  __p = 0;
  v134 = 0uLL;
  v8 = a2;
  v9 = (int *)*a2;
  v10 = (int *)v8[1];
  if (v9 != v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = a3 ^ 1;
    do
    {
      v17 = *v9;
      if (*v9 == -1)
        goto LABEL_7;
      if (v17 == v14)
      {
        if (v11 >= v12)
        {
          v23 = (v11 - v13) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
LABEL_190:
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if ((v12 - v13) >> 1 > v24)
            v24 = (v12 - v13) >> 1;
          if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v24;
          if (v20)
          {
            if (v20 >> 62)
LABEL_191:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v21 = operator new(4 * v20);
            v22 = &v21[4 * v23];
            *v22 = a3;
            v16 = (uint64_t)(v22 + 1);
            if (v11 == v13)
              goto LABEL_42;
          }
          else
          {
            v21 = 0;
            v22 = (_DWORD *)(4 * v23);
            *(_DWORD *)(4 * v23) = a3;
            v16 = 4 * v23 + 4;
            if (v11 == v13)
              goto LABEL_42;
          }
          v28 = v11 - 4 - v13;
          if (v28 >= 0xBC)
          {
            if (&v21[v11 - v13 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v11 - v13 - 4])
            {
              v29 = v11;
            }
            else if (&v11[-(v28 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4)
            {
              v29 = v11;
            }
            else if ((unint64_t)(v13 - v21) >= 0x20)
            {
              v37 = (v28 >> 2) + 1;
              v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
              v29 = &v11[-v38];
              v22 = (_DWORD *)((char *)v22 - v38);
              v39 = &v21[4 * v23 - 16];
              v40 = v11 - 16;
              v41 = v37 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v42 = *(_OWORD *)v40;
                *(v39 - 1) = *((_OWORD *)v40 - 1);
                *v39 = v42;
                v39 -= 2;
                v40 -= 32;
                v41 -= 8;
              }
              while (v41);
              if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_42;
            }
            else
            {
              v29 = v11;
            }
          }
          else
          {
            v29 = v11;
          }
          do
          {
            v30 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *--v22 = v30;
          }
          while (v29 != v13);
LABEL_42:
          v12 = &v21[4 * v20];
          __p = v22;
          *((_QWORD *)&v134 + 1) = v12;
          if (v13)
            operator delete(v13);
          v13 = (char *)v22;
          v14 = a3 ^ 1;
          goto LABEL_6;
        }
        *(_DWORD *)v11 = a3;
        v15 = v11 + 4;
      }
      else
      {
        if (v11 >= v12)
        {
          v18 = (v11 - v13) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            goto LABEL_190;
          if ((v12 - v13) >> 1 > v19)
            v19 = (v12 - v13) >> 1;
          if ((unint64_t)(v12 - v13) >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
          {
            if (v20 >> 62)
              goto LABEL_191;
            v21 = operator new(4 * v20);
            v22 = &v21[4 * v18];
            *v22 = v17;
            v16 = (uint64_t)(v22 + 1);
            if (v11 == v13)
              goto LABEL_42;
LABEL_34:
            v25 = v11 - 4 - v13;
            if (v25 < 0xBC)
            {
              v26 = v11;
              goto LABEL_36;
            }
            if (&v21[v11 - v13 - 4 - (v25 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v11 - v13 - 4])
            {
              v26 = v11;
              goto LABEL_36;
            }
            if (&v11[-(v25 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4)
            {
              v26 = v11;
              goto LABEL_36;
            }
            if ((unint64_t)(v13 - v21) < 0x20)
            {
              v26 = v11;
              goto LABEL_36;
            }
            v31 = (v25 >> 2) + 1;
            v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
            v26 = &v11[-v32];
            v22 = (_DWORD *)((char *)v22 - v32);
            v33 = &v21[4 * v18 - 16];
            v34 = v11 - 16;
            v35 = v31 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v36 = *(_OWORD *)v34;
              *(v33 - 1) = *((_OWORD *)v34 - 1);
              *v33 = v36;
              v33 -= 2;
              v34 -= 32;
              v35 -= 8;
            }
            while (v35);
            if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_36:
                v27 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *--v22 = v27;
              }
              while (v26 != v13);
            }
          }
          else
          {
            v21 = 0;
            v22 = (_DWORD *)(4 * v18);
            *(_DWORD *)(4 * v18) = v17;
            v16 = 4 * v18 + 4;
            if (v11 != v13)
              goto LABEL_34;
          }
          goto LABEL_42;
        }
        *(_DWORD *)v11 = v17;
        v15 = v11 + 4;
      }
      v16 = (uint64_t)v15;
LABEL_6:
      *(_QWORD *)&v134 = v16;
      v11 = (char *)v16;
LABEL_7:
      ++v9;
    }
    while (v9 != v10);
  }
  operations_research::sat::FirstUnassignedVarAtItsMinHeuristic((uint64_t)&__p, a4, (uint64_t)v140);
  v43 = v145;
  v145 = 0;
  a2 = v127;
  if (v43 == v144)
  {
    v44 = 4;
    v43 = v144;
    a1 = v124;
  }
  else
  {
    a1 = v124;
    if (!v43)
      goto LABEL_70;
    v44 = 5;
  }
  (*(void (**)(_QWORD *))(*v43 + 8 * v44))(v43);
LABEL_70:
  if (*((_QWORD *)&v141 + 1))
  {
    if (*((void ***)&v141 + 1) == v140)
    {
      v145 = v144;
      (*((void (**)(void **, _QWORD *))v140[0] + 3))(v140, v144);
    }
    else
    {
      v145 = (_QWORD *)*((_QWORD *)&v141 + 1);
      *((_QWORD *)&v141 + 1) = 0;
    }
  }
  else
  {
    v145 = 0;
  }
  v45 = (void **)*((_QWORD *)&v141 + 1);
  if (*((void ***)&v141 + 1) == v140)
  {
    v46 = 4;
    v45 = v140;
  }
  else
  {
    if (!*((_QWORD *)&v141 + 1))
      goto LABEL_80;
    v46 = 5;
  }
  (*((void (**)(void **))*v45 + v46))(v45);
LABEL_80:
  if (__p)
  {
    *(_QWORD *)&v134 = __p;
    operator delete(__p);
  }
LABEL_82:
  v137 = 0;
  v138 = 0;
  v139 = 0;
  __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v134 = 0u;
  v135 = 0u;
  v136 = 0;
  v47 = *(_QWORD *)(a1 + 80);
  v48 = (_QWORD *)(v47 + 8);
  if (!v47)
    v48 = 0;
  v49 = *(int *)(a1 + 72);
  if ((_DWORD)v49)
  {
    v123 = &v48[v49];
    while (1)
    {
      v125 = v48;
      v50 = *v48;
      *(_OWORD *)v140 = 0u;
      v141 = 0u;
      v51 = v138;
      if ((unint64_t)v138 >= v139)
      {
        v52 = std::vector<operations_research::sat::Strategy>::__push_back_slow_path<operations_research::sat::Strategy>(&v137, (uint64_t)v140);
        v138 = v52;
        if (v140[0])
        {
          v140[1] = v140[0];
          operator delete(v140[0]);
          v52 = v138;
        }
      }
      else
      {
        *(_QWORD *)v138 = 0;
        *((_QWORD *)v51 + 1) = 0;
        *((_QWORD *)v51 + 2) = 0;
        *(_OWORD *)v51 = *(_OWORD *)v140;
        *((_QWORD *)v51 + 2) = v141;
        v140[0] = 0;
        v140[1] = 0;
        *(_QWORD *)&v141 = 0;
        *((_QWORD *)v51 + 3) = *((_QWORD *)&v141 + 1);
        v52 = v51 + 32;
        v138 = v51 + 32;
      }
      v126 = v50;
      v53 = *(int *)(v50 + 16);
      if ((_DWORD)v53)
        break;
LABEL_118:
      *((_QWORD *)v52 - 1) = *(_QWORD *)(v126 + 64);
      v78 = *(_QWORD *)(v126 + 56);
      if (v78)
        v79 = (int8x16_t **)(v78 + 8);
      else
        v79 = 0;
      v80 = *(int *)(v126 + 48);
      if ((_DWORD)v80)
      {
        v81 = &v79[v80];
        do
        {
          v90 = (*v79)[2].u32[0];
          if ((v90 & 0x80000000) != 0)
            v91 = *(_DWORD *)(*a2 + 4 * ~(_DWORD)v90) ^ 1;
          else
            v91 = *(_DWORD *)(*a2 + 4 * v90);
          v92 = 0;
          v93 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v91)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v91));
          v89 = v134;
          v87 = (v93 >> 7) ^ ((unint64_t)__p >> 12);
          v94 = 0x101010101010101 * (v93 & 0x7F);
          for (i = v87; ; i = v92 + v96)
          {
            v96 = i & v135;
            v97 = *(_QWORD *)((char *)__p + v96);
            v98 = ((v97 ^ v94) - 0x101010101010101) & ~(v97 ^ v94) & 0x8080808080808080;
            if (v98)
              break;
LABEL_138:
            if ((v97 & (~v97 << 6) & 0x8080808080808080) != 0)
              goto LABEL_141;
            v92 += 8;
          }
          while (1)
          {
            v99 = (v96 + (__clz(__rbit64(v98)) >> 3)) & v135;
            if (*(_DWORD *)(v134 + 24 * v99) == v91)
              break;
            v98 &= v98 - 1;
            if (!v98)
              goto LABEL_138;
          }
          if (v99 == (_QWORD)v135)
          {
LABEL_141:
            v86 = 0;
            v130 = (*v79)[1];
            while (1)
            {
              v82 = v87 & v135;
              v83 = *(_QWORD *)((char *)__p + (v87 & v135));
              v84 = ((v83 ^ v94) - 0x101010101010101) & ~(v83 ^ v94) & 0x8080808080808080;
              if (v84)
                break;
LABEL_126:
              if ((v83 & (~v83 << 6) & 0x8080808080808080) != 0)
              {
                v85 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::prepare_insert((uint64_t *)&__p, v93);
                v88 = v134 + 24 * v85;
                *(_DWORD *)v88 = v91;
                *(_QWORD *)(v88 + 8) = 0;
                *(_QWORD *)(v88 + 16) = 0;
                v89 = v134;
                goto LABEL_129;
              }
              v86 += 8;
              v87 = v86 + v82;
            }
            while (1)
            {
              v85 = (v82 + (__clz(__rbit64(v84)) >> 3)) & v135;
              if (*(_DWORD *)(v134 + 24 * v85) == v91)
                break;
              v84 &= v84 - 1;
              if (!v84)
                goto LABEL_126;
            }
LABEL_129:
            *(int8x16_t *)(v89 + 24 * v85 + 8) = vextq_s8(v130, v130, 8uLL);
          }
          ++v79;
        }
        while (v79 != v81);
      }
      v48 = v125 + 1;
      if (v125 + 1 == v123)
        goto LABEL_142;
    }
    v129 = (void **)(v52 - 32);
    v54 = *(unsigned int **)(v50 + 24);
    v55 = &v54[v53];
    while (1)
    {
      while (1)
      {
        v56 = *v54;
        if ((v56 & 0x80000000) == 0)
          break;
        v57 = *(_DWORD *)(*a2 + 4 * ~(_DWORD)v56) ^ 1;
        v59 = (int *)*((_QWORD *)v52 - 3);
        v58 = *((_QWORD *)v52 - 2);
        if ((unint64_t)v59 >= v58)
          goto LABEL_98;
LABEL_93:
        *v59 = v57;
        *((_QWORD *)v52 - 3) = v59 + 1;
        if (++v54 == v55)
          goto LABEL_118;
      }
      v57 = *(_DWORD *)(*a2 + 4 * v56);
      v59 = (int *)*((_QWORD *)v52 - 3);
      v58 = *((_QWORD *)v52 - 2);
      if ((unint64_t)v59 < v58)
        goto LABEL_93;
LABEL_98:
      v60 = (int *)*v129;
      v61 = (char *)v59 - (_BYTE *)*v129;
      v62 = v61 >> 2;
      v63 = (v61 >> 2) + 1;
      if (v63 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v64 = v58 - (_QWORD)v60;
      if (v64 >> 1 > v63)
        v63 = v64 >> 1;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
        v65 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        if (v65 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v66 = operator new(4 * v65);
        v67 = (int *)&v66[4 * v62];
        *v67 = v57;
        v68 = (uint64_t)(v67 + 1);
        if (v59 == v60)
          goto LABEL_115;
LABEL_109:
        v69 = (char *)(v59 - 1) - (char *)v60;
        if (v69 < 0x2C)
          goto LABEL_194;
        if ((unint64_t)((char *)v59 - &v66[v61]) < 0x20)
          goto LABEL_194;
        v70 = (v69 >> 2) + 1;
        v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
        v72 = &v59[v71 / 0xFFFFFFFFFFFFFFFCLL];
        v67 = (int *)((char *)v67 - v71);
        v73 = &v66[4 * v62 - 16];
        v74 = v59 - 4;
        v75 = v70 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v76 = *(_OWORD *)v74;
          *(v73 - 1) = *((_OWORD *)v74 - 1);
          *v73 = v76;
          v73 -= 2;
          v74 -= 8;
          v75 -= 8;
        }
        while (v75);
        v59 = v72;
        if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_194:
          do
          {
            v77 = *--v59;
            *--v67 = v77;
          }
          while (v59 != v60);
        }
        goto LABEL_115;
      }
      v66 = 0;
      v67 = (int *)(4 * v62);
      *(_DWORD *)(4 * v62) = v57;
      v68 = 4 * v62 + 4;
      if (v59 != v60)
        goto LABEL_109;
LABEL_115:
      *((_QWORD *)v52 - 4) = v67;
      *((_QWORD *)v52 - 3) = v68;
      *((_QWORD *)v52 - 2) = &v66[4 * v65];
      if (v60)
        operator delete(v60);
      a2 = v127;
      *((_QWORD *)v52 - 3) = v68;
      if (++v54 == v55)
        goto LABEL_118;
    }
  }
LABEL_142:
  if (!v121)
  {
    operations_research::sat::ConstructSearchStrategyInternal((char **)&__p, (uint64_t *)&v137, a4, a5);
    goto LABEL_170;
  }
  operations_research::sat::ConstructSearchStrategyInternal((char **)&__p, (uint64_t *)&v137, a4, (uint64_t)v140);
  v100 = v142;
  v101 = (uint64_t)v145;
  if (!v145)
    goto LABEL_146;
  if (v145 != v144)
  {
    v101 = (*(uint64_t (**)(_QWORD *))(*v145 + 16))(v145);
LABEL_146:
    v143 = (_BYTE *)v101;
    goto LABEL_149;
  }
  v143 = v142;
  (*(void (**)(_QWORD *, _BYTE *))(v144[0] + 24))(v144, v142);
LABEL_149:
  std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](&v131, (uint64_t)v140, 2uLL);
  v102.n128_f64[0] = operations_research::sat::SequentialSearch((uint64_t *)&v131, a5);
  v103 = (char *)v131;
  if (!v131)
    goto LABEL_160;
  v104 = v132;
  v105 = v131;
  if (v132 != v131)
  {
    while (1)
    {
      v108 = (char *)(v104 - 4);
      v106 = (_QWORD *)*(v104 - 1);
      if (v104 - 4 == v106)
      {
        v106 = v104 - 4;
        v107 = 4;
      }
      else
      {
        if (!v106)
          goto LABEL_154;
        v107 = 5;
      }
      (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_154:
      v104 = v108;
      if (v108 == v103)
      {
        v105 = v131;
        break;
      }
    }
  }
  v132 = v103;
  operator delete(v105);
LABEL_160:
  if (v143 == v142)
  {
    v109 = 4;
  }
  else
  {
    if (!v143)
      goto LABEL_165;
    v109 = 5;
    v100 = v143;
  }
  (*(void (**)(_QWORD *, __n128))(*v100 + 8 * v109))(v100, v102);
LABEL_165:
  v110 = (void **)*((_QWORD *)&v141 + 1);
  if (*((void ***)&v141 + 1) == v140)
  {
    v111 = 4;
    v110 = v140;
  }
  else
  {
    if (!*((_QWORD *)&v141 + 1))
      goto LABEL_170;
    v111 = 5;
  }
  (*((void (**)(__n128))*v110 + v111))(v102);
LABEL_170:
  if ((_QWORD)v135)
  {
    operator delete(__p);
    __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v136 = 0;
    *(_QWORD *)&v135 = 0;
    v134 = 0uLL;
  }
  if (*((_QWORD *)&v135 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v135 + 1));
  v112 = (char *)v137;
  if (v137)
  {
    v113 = v138;
    v114 = v137;
    if (v138 != v137)
    {
      v115 = v138;
      do
      {
        v117 = (void *)*((_QWORD *)v115 - 4);
        v115 -= 32;
        v116 = v117;
        if (v117)
        {
          *((_QWORD *)v113 - 3) = v116;
          operator delete(v116);
        }
        v113 = v115;
      }
      while (v115 != v112);
      v114 = v137;
    }
    v138 = v112;
    operator delete(v114);
  }
  result = v145;
  if (v145 == v144)
  {
    v119 = 4;
    result = v144;
  }
  else
  {
    if (!v145)
      return result;
    v119 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v119))();
}

void sub_22DAF22E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::~flat_hash_map(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

void operations_research::sat::InstrumentSearchStrategy(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  int *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  unint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  int *v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  int64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  void *v43;
  int64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _BYTE *v49;
  int64_t v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char *v59;
  char *v60;
  char *v61;
  _DWORD *v62;
  uint64_t v63;
  int *v64;
  _QWORD v65[3];
  _QWORD *v66;
  uint64_t v67;
  void *__p;
  _BYTE *v69;
  char *v70;
  _BYTE v71[144];
  __int128 v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v7 = *(_DWORD *)(a1 + 24);
  v8 = 0;
  if (v7 >= 1)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      if (*((_DWORD *)*a2 + v9) == -1)
        goto LABEL_5;
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9 + 8) + 40);
      if (*(char *)(v13 + 23) < 0)
      {
        if (!*(_QWORD *)(v13 + 8))
          goto LABEL_5;
      }
      else if (!*(_BYTE *)(v13 + 23))
      {
        goto LABEL_5;
      }
      if (v8 >= v10)
        break;
      *v8 = v9;
      v12 = (uint64_t)(v8 + 1);
LABEL_4:
      v63 = v12;
      v7 = *(_DWORD *)(a1 + 24);
      v8 = (int *)v12;
LABEL_5:
      if (++v9 >= v7)
        goto LABEL_40;
    }
    v14 = v8 - v11;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    if (((char *)v10 - (char *)v11) >> 1 > v15)
      v15 = ((char *)v10 - (char *)v11) >> 1;
    if ((unint64_t)((char *)v10 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(4 * v16);
      v18 = &v17[4 * v14];
      *v18 = v9;
      v12 = (uint64_t)(v18 + 1);
      if (v8 == v11)
        goto LABEL_26;
    }
    else
    {
      v17 = 0;
      v18 = (_DWORD *)(4 * v14);
      *(_DWORD *)(4 * v14) = v9;
      v12 = 4 * v14 + 4;
      if (v8 == v11)
        goto LABEL_26;
    }
    v19 = (char *)(v8 - 1) - (char *)v11;
    if (v19 >= 0xBC)
    {
      if (&v17[(char *)v8 - (char *)v11 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v17[(char *)v8 - (char *)v11 - 4])
      {
        v20 = v8;
      }
      else if ((int *)((char *)v8 - (v19 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v8 - 1)
      {
        v20 = v8;
      }
      else if ((unint64_t)((char *)v11 - v17) >= 0x20)
      {
        v22 = (v19 >> 2) + 1;
        v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        v20 = &v8[v23 / 0xFFFFFFFFFFFFFFFCLL];
        v18 = (_DWORD *)((char *)v18 - v23);
        v24 = &v17[4 * v14 - 16];
        v25 = v8 - 4;
        v26 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 8;
          v26 -= 8;
        }
        while (v26);
        if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_26;
      }
      else
      {
        v20 = v8;
      }
    }
    else
    {
      v20 = v8;
    }
    do
    {
      v21 = *--v20;
      *--v18 = v21;
    }
    while (v20 != v11);
LABEL_26:
    v10 = (int *)&v17[4 * v16];
    v62 = v18;
    v64 = v10;
    if (v11)
      operator delete(v11);
    v11 = v18;
    goto LABEL_4;
  }
  v11 = 0;
LABEL_40:
  v28 = 126 - 2 * __clz(v8 - v11);
  v59 = (char *)a1;
  if (v8 == v11)
    v29 = 0;
  else
    v29 = v28;
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,false>((uint64_t)v11, v8, (uint64_t *)&v59, v29, 1);
  v31 = *a2;
  v30 = a2[1];
  v60 = 0;
  v61 = 0;
  v59 = 0;
  v32 = v30 - v31;
  if (v30 == v31)
  {
    v34 = 0;
    v33 = 0;
    v35 = a3;
    v36 = *(_QWORD *)(a3 + 24);
    if (!v36)
    {
LABEL_50:
      v66 = (_QWORD *)v36;
      goto LABEL_52;
    }
  }
  else
  {
    if ((unint64_t)v32 >= 0x3FFFFFFFFFFFFFFDLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v33 = (char *)operator new(4 * v32);
    v59 = v33;
    v61 = &v33[16 * (v32 >> 2)];
    bzero(v33, 4 * v32);
    v34 = &v33[4 * v32];
    v60 = v34;
    v35 = a3;
    v36 = *(_QWORD *)(a3 + 24);
    if (!v36)
      goto LABEL_50;
  }
  if (v36 != v35)
  {
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
    goto LABEL_50;
  }
  v66 = v65;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v35 + 24))(v35, v65);
LABEL_52:
  v67 = a4;
  __p = 0;
  v69 = 0;
  v70 = 0;
  v37 = *a2;
  v38 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (v38)
  {
    if (v38 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    __p = operator new(v38);
    v69 = __p;
    v39 = (char *)__p + 4 * (v38 >> 2);
    v70 = v39;
    memcpy(__p, v37, v38);
    v69 = v39;
  }
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v71, (const operations_research::sat::CpModelProto *)a1);
  v72 = 0uLL;
  v73 = 0;
  v40 = v34 - v33;
  if (v40)
  {
    if (v40 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v41 = (char *)operator new(v40);
    *(_QWORD *)&v72 = v41;
    v73 = &v41[16 * (v40 >> 4)];
    v42 = v40 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v41, v33, v42);
    *((_QWORD *)&v72 + 1) = &v41[v42];
  }
  v74 = 0uLL;
  v75 = 0;
  v43 = v62;
  v44 = v63 - (_QWORD)v62;
  if ((_DWORD *)v63 != v62)
  {
    if (v44 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    *(_QWORD *)&v74 = operator new(v63 - (_QWORD)v62);
    *((_QWORD *)&v74 + 1) = v74;
    v45 = v74 + 4 * (v44 >> 2);
    v75 = v45;
    memcpy((void *)v74, v43, v44);
    *((_QWORD *)&v74 + 1) = v45;
  }
  *(_QWORD *)(a5 + 24) = 0;
  v46 = (char *)operator new(0x108uLL);
  *(_QWORD *)v46 = &off_24F9845A0;
  v47 = v46 + 8;
  v48 = (uint64_t)v66;
  if (!v66)
    goto LABEL_64;
  if (v66 != v65)
  {
    v48 = (*(uint64_t (**)(void))(*v66 + 16))();
LABEL_64:
    *((_QWORD *)v46 + 4) = v48;
    goto LABEL_66;
  }
  *((_QWORD *)v46 + 4) = v47;
  (*(void (**)(_QWORD *, char *))(v65[0] + 24))(v65, v47);
LABEL_66:
  *((_QWORD *)v46 + 6) = 0;
  v49 = __p;
  *((_QWORD *)v46 + 5) = v67;
  *((_QWORD *)v46 + 7) = 0;
  *((_QWORD *)v46 + 8) = 0;
  v50 = v69 - v49;
  if (v69 != v49)
  {
    v55 = v33;
    if (v50 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v51 = (char *)operator new(v69 - v49);
    *((_QWORD *)v46 + 6) = v51;
    *((_QWORD *)v46 + 7) = v51;
    v52 = &v51[4 * (v50 >> 2)];
    *((_QWORD *)v46 + 8) = v52;
    memcpy(v51, v49, v50);
    *((_QWORD *)v46 + 7) = v52;
    v33 = v55;
  }
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(v46 + 72), (const operations_research::sat::CpModelProto *)v71);
  *(_OWORD *)(v46 + 216) = v72;
  *((_QWORD *)v46 + 29) = v73;
  v73 = 0;
  v72 = 0uLL;
  *((_OWORD *)v46 + 15) = v74;
  *((_QWORD *)v46 + 32) = v75;
  v75 = 0;
  v74 = 0uLL;
  *(_QWORD *)(a5 + 24) = v46;
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)v71);
  if (__p)
  {
    v69 = __p;
    operator delete(__p);
  }
  v53 = v66;
  if (v66 == v65)
  {
    v54 = 4;
    v53 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_76;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_76:
  if (v33)
    operator delete(v33);
  if (v43)
    operator delete(v43);
}

void sub_22DAF2A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  void *v49;
  void *v50;

  operator delete(v50);
  operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1::~$_1(&a19);
  if (v49)
    operator delete(v49);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1::~$_1(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[26];
  if (v3)
  {
    a1[27] = v3;
    operator delete(v3);
  }
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(a1 + 8));
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_11;
  }
  if (v5)
  {
    v6 = 5;
LABEL_11:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void operations_research::sat::DiversifySearchParameters(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  const char *v15;
  uint64_t v16;
  const char *v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  BOOL (*v30)(int, uint64_t, unsigned int, char *);
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)a5, (const operations_research::sat::SatParameters *)a1);
  v10 = *(_DWORD *)(a5 + 20);
  *(_DWORD *)(a5 + 272) = *(_DWORD *)(a1 + 272) + a3;
  v11 = v10 | 0x8000080;
  *(_DWORD *)(a5 + 20) = v10 | 0x8000080;
  *(_BYTE *)(a5 + 155) = 0;
  if (*(_BYTE *)(a1 + 154))
    v12 = *(_BYTE *)(a1 + 153) == 0;
  else
    v12 = 1;
  if (!v12)
  {
    LODWORD(v26) = a3;
    v28 = 4;
    if (a3 > 4)
    {
      v29 = google::MakeCheckOpString<int,int>((int)&v26, (int)&v28, "index <= 4");
      if (v29)
      {
        google::LogMessageFatal::LogMessageFatal((unint64_t *)&v26, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 298, (uint64_t **)&v29);
        google::LogMessage::stream((google::LogMessage *)&v26);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v26);
      }
    }
    v16 = *(_QWORD *)(a2 + 120);
    if ((_UNKNOWN *)a2 != &operations_research::sat::_CpModelProto_default_instance_ && v16 != 0)
    {
      if (a3)
      {
        if (*(int *)(a2 + 72) >= 1)
        {
          if (a3 == 1)
            goto LABEL_35;
          goto LABEL_55;
        }
        if (a3 != 1)
        {
LABEL_55:
          if (*(int *)(v16 + 16) >= 2)
          {
            if (a3 == 2)
            {
LABEL_57:
              v22 = *(_DWORD *)(a5 + 16);
              *(_DWORD *)(a5 + 124) = 0;
              *(_DWORD *)(a5 + 16) = v22 | 0x80040000;
              *(_BYTE *)(a5 + 147) = 1;
              *(_DWORD *)(a5 + 24) |= 0x4000000u;
              *(_DWORD *)(a5 + 396) = 0;
              v18 = "core";
              goto LABEL_78;
            }
            goto LABEL_59;
          }
          if (a3 != 2)
          {
LABEL_59:
            *(_DWORD *)(a5 + 16) |= 0x40000u;
            *(_DWORD *)(a5 + 124) = 0;
            if (a3 != 3)
            {
              *(_DWORD *)(a5 + 20) |= 0x80u;
              *(_BYTE *)(a5 + 155) = 1;
              v18 = "lns";
              goto LABEL_78;
            }
            *(_DWORD *)(a5 + 396) = 2;
            *(int8x8_t *)(a5 + 20) = vorr_s8(*(int8x8_t *)(a5 + 20), (int8x8_t)0x400000000000100);
            goto LABEL_76;
          }
LABEL_61:
          *(_DWORD *)(a5 + 16) |= 0x40000u;
          *(_DWORD *)(a5 + 124) = 0;
          *(_DWORD *)(a5 + 24) |= 0x4000000u;
          *(_DWORD *)(a5 + 396) = 0;
          v18 = "no_lp";
          goto LABEL_78;
        }
LABEL_54:
        v21 = *(_DWORD *)(a5 + 16);
        *(_DWORD *)(a5 + 124) = 4;
        *(_DWORD *)(a5 + 16) = v21 | 0x20040000;
        *(_BYTE *)(a5 + 145) = 1;
        v18 = "pseudo_cost";
        goto LABEL_78;
      }
LABEL_36:
      *(_DWORD *)(a5 + 16) |= 0x40000u;
      *(_DWORD *)(a5 + 124) = 0;
      v18 = "auto";
      goto LABEL_78;
    }
    if (!a3)
      goto LABEL_36;
    if (*(int *)(a2 + 72) < 1)
    {
      if (a3 == 1)
        goto LABEL_61;
LABEL_50:
      if (a3 != 3)
      {
        *(_DWORD *)(a5 + 16) |= 0x40000u;
        if (a3 == 2)
        {
          *(_DWORD *)(a5 + 124) = 0;
          *(_DWORD *)(a5 + 28) |= 1u;
          *(_DWORD *)(a5 + 420) = 0;
          v18 = "less encoding";
        }
        else
        {
          *(_DWORD *)(a5 + 124) = 5;
          v18 = "random";
        }
        goto LABEL_78;
      }
      *(_DWORD *)(a5 + 16) |= 0x40000u;
      *(_DWORD *)(a5 + 124) = 0;
      *(_DWORD *)(a5 + 24) |= 0x4000000u;
      *(_DWORD *)(a5 + 396) = 2;
      goto LABEL_77;
    }
    if (a3 != 1)
      goto LABEL_50;
LABEL_35:
    *(_DWORD *)(a5 + 16) |= 0x40000u;
    *(_DWORD *)(a5 + 124) = 1;
    v18 = "fixed";
LABEL_78:
    MEMORY[0x22E31DC84](a4, v18);
    return;
  }
  v13 = *(_QWORD *)(a2 + 120);
  if ((_UNKNOWN *)a2 == &operations_research::sat::_CpModelProto_default_instance_ || v13 == 0)
  {
    if (a3)
    {
      if (*(int *)(a2 + 72) < 1 || (--a3, a3))
      {
        switch(a3)
        {
          case 3:
            *(_DWORD *)(a5 + 16) |= 0x40000u;
            *(_DWORD *)(a5 + 124) = 0;
            *(_DWORD *)(a5 + 24) |= 0x4000000u;
            *(_DWORD *)(a5 + 396) = 2;
            v15 = "max_lp";
            break;
          case 2:
            *(_DWORD *)(a5 + 16) |= 0x40000u;
            *(_DWORD *)(a5 + 124) = 0;
            *(_DWORD *)(a5 + 24) |= 0x4000000u;
            *(_DWORD *)(a5 + 396) = 0;
            v15 = "no_lp";
            break;
          case 1:
            *(_DWORD *)(a5 + 16) |= 0x40000u;
            *(_DWORD *)(a5 + 124) = 0;
            *(_DWORD *)(a5 + 28) |= 1u;
            *(_DWORD *)(a5 + 420) = 0;
            v15 = "less encoding";
            break;
          default:
            v23 = *(_DWORD *)(a5 + 16);
            if (a3 != 4)
            {
              *(_DWORD *)(a5 + 124) = 1;
              *(_BYTE *)(a5 + 151) = 1;
              *(_DWORD *)(a5 + 16) = v23 | 0x8040000;
              *(_DWORD *)(a5 + 20) = v10 | 0x8000088;
              *(_QWORD *)(a5 + 136) = a3 - 4;
              v29 = (a3 - 4);
              v30 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
              absl::lts_2020_02_25::str_format_internal::FormatPack("random_%i", 9, (uint64_t)&v29, 1, (uint64_t)&v26);
              goto LABEL_67;
            }
            *(_DWORD *)(a5 + 16) = v23 | 0x40000;
            *(_DWORD *)(a5 + 124) = 5;
            v15 = "random";
            break;
        }
      }
      else
      {
        *(_DWORD *)(a5 + 16) |= 0x40000u;
        *(_DWORD *)(a5 + 124) = 1;
        v15 = "fixed";
      }
    }
    else
    {
      *(_DWORD *)(a5 + 16) |= 0x40000u;
      *(_DWORD *)(a5 + 124) = 0;
      v15 = "auto";
    }
    MEMORY[0x22E31DC84](a4, v15);
    return;
  }
  if (!a3)
  {
    *(_DWORD *)(a5 + 16) |= 0x40000u;
    *(_DWORD *)(a5 + 124) = 0;
    *(_DWORD *)(a5 + 24) |= 0x4000000u;
    *(_DWORD *)(a5 + 396) = 1;
    v18 = "auto";
    goto LABEL_78;
  }
  if (*(int *)(a2 + 72) < 1)
  {
    if (a3 == 1)
    {
      *(_DWORD *)(a5 + 16) |= 0x40000u;
      *(_DWORD *)(a5 + 124) = 3;
      v18 = "lp_br";
      goto LABEL_78;
    }
  }
  else if (a3 == 1)
  {
    goto LABEL_35;
  }
  if (a3 == 3)
    goto LABEL_61;
  if (a3 == 2)
    goto LABEL_54;
  v19 = a3 - 4;
  if (a3 == 4)
  {
    v24 = *(_DWORD *)(a5 + 24) | 0x4000000;
    *(_DWORD *)(a5 + 396) = 2;
    v25 = *(_DWORD *)(a5 + 16) | 0x40000;
    *(_DWORD *)(a5 + 124) = 0;
    *(_DWORD *)(a5 + 16) = v25;
    *(_DWORD *)(a5 + 20) = v10 | 0x8000180;
    *(_DWORD *)(a5 + 24) = v24;
LABEL_76:
    *(_BYTE *)(a5 + 156) = 1;
LABEL_77:
    v18 = "max_lp";
    goto LABEL_78;
  }
  if (*(int *)(a1 + 416) >= 9)
  {
    v19 = a3 - 5;
    if (a3 == 5)
    {
      *(_DWORD *)(a5 + 16) |= 0x40000u;
      *(_DWORD *)(a5 + 124) = 5;
      v18 = "quick_restart";
      goto LABEL_78;
    }
  }
  if (*(int *)(v13 + 16) >= 2 && !--v19)
    goto LABEL_57;
  v20 = *(_DWORD *)(a5 + 16) | 0x40000;
  *(_DWORD *)(a5 + 124) = 0;
  *(_DWORD *)(a5 + 16) = v20;
  *(_DWORD *)(a5 + 20) = v11;
  *(_BYTE *)(a5 + 155) = 1;
  v29 = v19;
  v30 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("lns_%i", 6, (uint64_t)&v29, 1, (uint64_t)&v26);
LABEL_67:
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v26;
  *(_QWORD *)(a4 + 16) = v27;
}

void sub_22DAF327C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAF3284(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters *v1;

  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

void sub_22DAF3298(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters *v1;

  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

void sub_22DAF32AC(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters *v1;

  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

void sub_22DAF32C0(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters *v1;

  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

void sub_22DAF32D4(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters *v1;

  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

void sub_22DAF32E8(_Unwind_Exception *a1)
{
  operations_research::sat::SatParameters *v1;

  operations_research::sat::SatParameters::~SatParameters(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::raw_hash_set(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  unint64_t v22;

  *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a2[2];
  if (v4 == (char *)7)
  {
    v5 = 8;
  }
  else
  {
    v5 = (unint64_t)&v4[(uint64_t)(v4 - 1) / 7];
    if (!v5)
      goto LABEL_5;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::resize((char **)a1, (char *)(0xFFFFFFFFFFFFFFFFLL >> __clz(v5)));
LABEL_5:
  v6 = *a2;
  v7 = a2[1];
  if (**a2 > -2)
  {
    v8 = *a2;
    v11 = a2[3];
    v10 = &v11[(_QWORD)v6];
    if (v6 == &v11[(_QWORD)v6])
      goto LABEL_20;
  }
  else
  {
    v8 = *a2;
    do
    {
      v9 = (__clz(__rbit64(((*(_QWORD *)v8 >> 7) & ~*(_QWORD *)v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v8 += v9;
      v7 += 24 * v9;
    }
    while (*v8 < -1);
    v10 = &a2[3][(_QWORD)v6];
    if (v8 == v10)
      goto LABEL_20;
  }
  do
  {
    v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v7)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + *(int *)v7));
    v13 = *(char **)a1;
    v14 = *(_QWORD *)(a1 + 24);
    v15 = ((v12 >> 7) ^ (*(_QWORD *)a1 >> 12)) & v14;
    v16 = 0;
    for (i = *(_QWORD *)(*(_QWORD *)a1 + v15) & (~*(_QWORD *)(*(_QWORD *)a1 + v15) << 7) & 0x8080808080808080;
          !i;
          i = *(_QWORD *)&v13[v15] & (~*(_QWORD *)&v13[v15] << 7) & 0x8080808080808080)
    {
      v16 += 8;
      v15 = (v16 + v15) & v14;
    }
    v18 = (v15 + (__clz(__rbit64(i)) >> 3)) & v14;
    v13[v18] = v12 & 0x7F;
    *(_BYTE *)((*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + ((v18 - 8) & *(_QWORD *)(a1 + 24)) + 1) = v12 & 0x7F;
    v19 = *(_QWORD *)(a1 + 8) + 24 * v18;
    *(_DWORD *)v19 = *(_DWORD *)v7;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)(v7 + 8);
    v20 = *(unint64_t **)(a1 + 32);
    if (v20)
      absl::lts_2020_02_25::container_internal::RecordInsertSlow(v20, v12, v16);
    v21 = *++v8;
    v7 += 24;
    if (v21 <= -2)
    {
      do
      {
        v22 = (__clz(__rbit64(((*(_QWORD *)v8 >> 7) & ~*(_QWORD *)v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v8 += v22;
        v7 += 24 * v22;
      }
      while (*v8 < -1);
    }
  }
  while (v8 != v10);
LABEL_20:
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 40) -= a2[2];
  return a1;
}

void sub_22DAF357C(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

void sub_22DAF3590(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::~raw_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 24 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v26 = a1[4];
    if (!v26)
      return;
LABEL_21:
    *((_QWORD *)v26 + 4) = v14 >> 3;
    *((_QWORD *)v26 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v20 = &v5[24 * (_QWORD)v13];
      v21 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v20)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v20));
      v22 = *a1;
      v23 = a1[3];
      v24 = ((v21 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v23;
      v25 = *(_QWORD *)&(*a1)[v24] & (~*(_QWORD *)&(*a1)[v24] << 7) & 0x8080808080808080;
      if (v25)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v24 = (v15 + v24) & (unint64_t)v23;
          v25 = *(_QWORD *)&v22[v24] & (~*(_QWORD *)&v22[v24] << 7) & 0x8080808080808080;
        }
        while (!v25);
      }
      v16 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v23;
      v14 += v15;
      v17 = v21 & 0x7F;
      v22[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      v18 = *(_OWORD *)v20;
      v19 = (uint64_t)&a1[1][24 * v16];
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v20 + 2);
      *(_OWORD *)v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v26 = a1[4];
  if (v26)
    goto LABEL_21;
}

_QWORD *std::vector<operations_research::sat::Strategy>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = operator new(v5 - *a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[4 * (v6 >> 5)];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::Strategy>,operations_research::sat::Strategy*,operations_research::sat::Strategy*,operations_research::sat::Strategy*>(v3, v4, v5, v7);
  }
  return a1;
}

void sub_22DAF38A0(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;

  v1[1] = v2;
  if (*v1)
    std::vector<operations_research::sat::Strategy>::vector(v1 + 1, *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::Strategy>,operations_research::sat::Strategy*,operations_research::sat::Strategy*,operations_research::sat::Strategy*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4[3] = *(_QWORD *)(v6 + 24);
      a4 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_22DAF399C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::Strategy>,operations_research::sat::Strategy*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22DAF39B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::Strategy>,operations_research::sat::Strategy*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::Strategy>,operations_research::sat::Strategy*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 32);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 24) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

uint64_t std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = &off_24F9844D8;
  if (*(_QWORD *)(a1 + 72))
  {
    operator delete(*(void **)(a1 + 48));
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 48) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  v2 = *(_QWORD **)(a1 + 80);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 32);
      do
      {
        v8 = *(void **)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v5);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = &off_24F9844D8;
  if (*(_QWORD *)(a1 + 72))
  {
    operator delete(*(void **)(a1 + 48));
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 48) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  v2 = *(_QWORD **)(a1 + 80);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 32);
      do
      {
        v8 = *(void **)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v5);
  }
  JUMPOUT(0x22E31DF78);
}

char *std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_24F9844D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  std::vector<operations_research::sat::Strategy>::vector((_QWORD *)v2 + 3, (uint64_t *)(a1 + 24));
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::raw_hash_set((uint64_t)(v2 + 48), (char **)(a1 + 48));
  *((_QWORD *)v2 + 12) = *(_QWORD *)(a1 + 96);
  return v2;
}

void sub_22DAF3C38(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t *v2;

  if (*v2)
  {
    operations_research::sat::ConstructSearchStrategyInternal((uint64_t)v1, *v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = &off_24F9844D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  std::vector<operations_research::sat::Strategy>::vector((_QWORD *)(a2 + 24), (uint64_t *)(a1 + 24));
  result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::raw_hash_set(a2 + 48, (char **)(a1 + 48));
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  return result;
}

void sub_22DAF3CE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;

  if (*v2)
    operations_research::sat::ConstructSearchStrategyInternal(v1, *v2);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  operations_research::sat::SatParameters *v2;
  int **v3;
  operations_research::sat::SatParameters *v4;
  int *v5;
  int *v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int **v32;
  uint64_t v33;
  int **v34;
  uint64_t v35;
  int64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  int v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  char *v53;
  int v54;
  int64_t v55;
  uint64_t v56;
  unint64_t AssociatedLiteral;
  _BYTE *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  int **v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  operations_research::sat::SatParameters *v76;
  int *v77;
  char *v78;
  char *v79;
  _BYTE v80[12];
  void *__p;
  char *v82;
  char *v83;

  v1 = a1;
  v2 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(*(_QWORD *)(a1 + 96));
  v3 = *(int ***)(v1 + 24);
  v72 = *(int ***)(v1 + 32);
  if (v3 == v72)
    return 0xFFFFFFFFLL;
  v4 = v2;
  v73 = (uint64_t *)(v1 + 48);
  v75 = v1;
  v76 = v2;
LABEL_4:
  __p = 0;
  v82 = 0;
  v83 = 0;
  v6 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    goto LABEL_3;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0x7FFFFFFFFFFFFFFELL;
  v12 = -1;
  v77 = v3[1];
  while (2)
  {
    v14 = *v6;
    v15 = *(_QWORD **)(v1 + 16);
    v16 = *(int *)(v15[51] + 4 * *v6);
    if ((_DWORD)v16 != -1
      && ((*(_QWORD *)(*(_QWORD *)(v15[117] + 24) + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
    {
      goto LABEL_9;
    }
    v17 = v15[5];
    v18 = *(_QWORD *)(v17 + 12 * v14);
    v19 = *(_QWORD *)(v17 + 12 * (v14 ^ 1));
    if (!(v18 + v19))
      goto LABEL_9;
    v20 = 0;
    v21 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v14)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v14));
    v22 = *(_QWORD *)(v1 + 48);
    v23 = (v22 >> 12) ^ (v21 >> 7);
    v24 = *(_QWORD *)(v1 + 72);
    v25 = 0x101010101010101 * (v21 & 0x7F);
    while (1)
    {
      v26 = v23 & v24;
      v27 = *(_QWORD *)(v22 + v26);
      v28 = ((v27 ^ v25) - 0x101010101010101) & ~(v27 ^ v25) & 0x8080808080808080;
      if (v28)
        break;
LABEL_17:
      if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0)
        goto LABEL_20;
      v20 += 8;
      v23 = v20 + v26;
    }
    while (1)
    {
      v29 = (v26 + (__clz(__rbit64(v28)) >> 3)) & v24;
      if (*(_DWORD *)(*(_QWORD *)(v1 + 56) + 24 * v29) == v14)
        break;
      v28 &= v28 - 1;
      if (!v28)
        goto LABEL_17;
    }
    if (v29 == v24)
    {
LABEL_20:
      v30 = 0;
      v31 = 1;
      v32 = v3;
      v33 = *((unsigned int *)v3 + 6);
      if (v33 > 4)
      {
LABEL_94:
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v80, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 103);
        v70 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Unknown VariableSelectionStrategy ", 34);
        std::ostream::operator<<();
LABEL_92:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v80);
      }
    }
    else
    {
      v78 = v8;
      v34 = v3;
      v35 = v11;
      v36 = v9;
      v37 = v12;
      v38 = v10;
      *(_DWORD *)v80 = *v6;
      v39 = (uint64_t *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>>(v73, (int *)v80);
      v31 = *v39;
      v30 = v39[1];
      v10 = v38;
      v1 = v75;
      v4 = v76;
      v12 = v37;
      v9 = v36;
      v11 = v35;
      v5 = v77;
      v8 = v78;
      v32 = v34;
      v33 = *((unsigned int *)v34 + 6);
    }
    v40 = v33;
    switch((int)v33)
    {
      case 0:
        goto LABEL_28;
      case 1:
        v40 = v30 + v31 * v18;
        goto LABEL_28;
      case 2:
        v40 = v31 * v19 - v30;
        goto LABEL_28;
      case 3:
        v40 = v31 - v31 * (v18 + v19);
        goto LABEL_28;
      case 4:
        v40 = v31 * (v19 + v18 - 1);
LABEL_28:
        if (v40 < v11)
        {
          v10 = -v19;
          v9 = v18;
          v11 = v40;
          v12 = v14;
        }
        if ((_DWORD)v33)
        {
          if (*((_BYTE *)v4 + 151))
            goto LABEL_34;
LABEL_8:
          v3 = v32;
LABEL_9:
          if (++v6 == v5)
            goto LABEL_53;
          continue;
        }
        if (*((_BYTE *)v4 + 151))
        {
LABEL_34:
          if (v8 == v7 || v40 <= *((_QWORD *)v4 + 17) + v11)
          {
            if (v7 < v83)
            {
              *(_DWORD *)v7 = v14;
              *(_QWORD *)(v7 + 4) = v40;
              v13 = v7 + 12;
            }
            else
            {
              v41 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 2);
              v42 = v41 + 1;
              v43 = 0x1555555555555555;
              if (v41 + 1 > 0x1555555555555555)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v83 - v8) >> 2) > v42)
                v42 = 0x5555555555555556 * ((v83 - v8) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((v83 - v8) >> 2) < 0xAAAAAAAAAAAAAAALL)
                v43 = v42;
              v74 = v10;
              if (v43)
              {
                v79 = v8;
                if (v43 > 0x1555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v44 = v11;
                v45 = v9;
                v46 = v12;
                v47 = v43;
                v48 = (char *)operator new(12 * v43);
                v4 = v76;
                v5 = v77;
                v12 = v46;
                v9 = v45;
                v11 = v44;
                v8 = v79;
                v43 = v47;
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[12 * v41];
              *(_DWORD *)v49 = v14;
              *(_QWORD *)(v49 + 4) = v40;
              v50 = v49;
              if (v8 != v7)
              {
                do
                {
                  v51 = *(_QWORD *)(v7 - 12);
                  v7 -= 12;
                  v52 = *((_DWORD *)v7 + 2);
                  *(_QWORD *)(v50 - 12) = v51;
                  v50 -= 12;
                  *((_DWORD *)v50 + 2) = v52;
                }
                while (v7 != v8);
                v7 = (char *)__p;
              }
              v13 = v49 + 12;
              __p = v50;
              v82 = v49 + 12;
              v83 = &v48[12 * v43];
              if (v7)
              {
                v53 = v7;
                v54 = v12;
                v55 = v9;
                v56 = v11;
                operator delete(v53);
                v11 = v56;
                v4 = v76;
                v5 = v77;
                v9 = v55;
                v12 = v54;
              }
              v8 = v50;
              v10 = v74;
              v1 = v75;
            }
            v82 = v13;
            v7 = v13;
          }
          goto LABEL_8;
        }
        v3 = v32;
LABEL_53:
        if (v12 != -1)
        {
          if (*((_BYTE *)v4 + 151))
          {
            v59 = __p;
            if (__p == v7)
            {
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v80, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 125);
              v69 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v80);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"Check failed: !active_vars.empty() ", 35);
              goto LABEL_92;
            }
            v60 = *((_QWORD *)v4 + 17) + v11;
            v61 = (char *)__p;
            while (*(_QWORD *)(v61 + 4) <= v60)
            {
              v61 += 12;
              if (v61 == v7)
                goto LABEL_73;
            }
            if (v61 != v7)
            {
              v62 = v61 + 12;
              if (v61 + 12 != v7)
              {
                do
                {
                  if (*(_QWORD *)(v62 + 4) <= v60)
                  {
                    v63 = *(_QWORD *)v62;
                    *((_DWORD *)v61 + 2) = *((_DWORD *)v62 + 2);
                    *(_QWORD *)v61 = v63;
                    v61 += 12;
                  }
                  v62 += 12;
                }
                while (v62 != v7);
                v59 = __p;
                v7 = v82;
              }
            }
            if (v61 != v7)
            {
              v7 = v61;
              v82 = v61;
            }
LABEL_73:
            *(_DWORD *)v80 = 0;
            *(_DWORD *)&v80[4] = -1431655765 * ((unint64_t)(v7 - v59) >> 2) - 1;
            v64 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>(*(_QWORD *)(v1 + 96));
            v12 = *(_DWORD *)&v59[12
                                * (int)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v80, v64, v80)];
            v65 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 40);
            v9 = *(_QWORD *)(v65 + 12 * v12);
            v10 = -*(_QWORD *)(v65 + 12 * (v12 ^ 1));
          }
          switch(*((_DWORD *)v3 + 7))
          {
            case 0:
            case 4:
              if (v9 >= (uint64_t)0x8000000000000002)
                v10 = -v9;
              else
                v10 = 0x7FFFFFFFFFFFFFFFLL;
              *(_DWORD *)v80 = v12 ^ 1;
              goto LABEL_89;
            case 1:
              goto LABEL_82;
            case 2:
              v67 = v10 - v9;
              if (v10 < v9)
                ++v67;
              v68 = v9 + (v67 >> 1);
              if (v68 >= (uint64_t)0x8000000000000002)
                v10 = -v68;
              else
                v10 = 0x7FFFFFFFFFFFFFFFLL;
              *(_DWORD *)v80 = v12 ^ 1;
              goto LABEL_89;
            case 3:
              v66 = v10 - v9;
              if (v10 < v9)
                ++v66;
              v10 -= v66 >> 1;
LABEL_82:
              *(_DWORD *)v80 = v12;
LABEL_89:
              *(_QWORD *)&v80[4] = v10;
              AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(*(unsigned int **)(v1 + 8), *(const char **)v80, SHIDWORD(v10));
              if (__p)
                operator delete(__p);
              return AssociatedLiteral;
            default:
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v80, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 164);
              v71 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v80);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Unknown DomainReductionStrategy ", 32);
              std::ostream::operator<<();
              goto LABEL_92;
          }
        }
        if (__p)
        {
          operator delete(__p);
          v4 = v76;
        }
LABEL_3:
        v3 += 4;
        if (v3 != v72)
          goto LABEL_4;
        return 0xFFFFFFFFLL;
      default:
        goto LABEL_94;
    }
  }
}

void sub_22DAF43FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DAF4404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat31ConstructSearchStrategyInternalERKN4absl14lts_2020_02_2513flat_hash_ma"
                     "pIiNSt3__14pairIxxEENS2_13hash_internal4HashIiEENS4_8equal_toIiEENS4_9allocatorINS5_IKiS6_EEEEEERKN"
                     "S4_6vectorINS0_8StrategyENSC_ISK_EEEEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat31ConstructSearchStrategyInternalERKN4absl14lts_2020_02_2513f"
                                "lat_hash_mapIiNSt3__14pairIxxEENS2_13hash_internal4HashIiEENS4_8equal_toIiEENS4_9allocat"
                                "orINS5_IKiS6_EEEEEERKNS4_6vectorINS0_8StrategyENSC_ISK_EEEEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat31ConstructSearchStrategyInternalERKN4absl14lts_2020_02_2513flat_hash_mapIiNSt3__14pairIxxEENS2_13hash_internal4HashIiEENS4_8equal_toIiEENS4_9allocatorINS5_IKiS6_EEEEEERKNS4_6vectorINS0_8StrategyENSC_ISK_EEEEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat31ConstructSearchStrategyInternalERKN4absl14lts_2020_02_2513flat_hash_mapIiNSt3__14pairIxxEENS2_13hash_internal4HashIiEENS4_8equal_toIiEENS4_9allocatorINS5_IKiS6_EEEEEERKNS4_6vectorINS0_8StrategyENSC_ISK_EEEEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

void std::__function::__alloc_func<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::ConstructSearchStrategyInternal(absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>> const&,std::vector<operations_research::sat::Strategy> const&,operations_research::sat::Model *)::$_0>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (*(_QWORD *)(a1 + 64))
  {
    operator delete(*(void **)(a1 + 40));
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 40) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  v2 = *(_QWORD **)(a1 + 72);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(void **)(a1 + 16);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 24);
      do
      {
        v8 = *(void **)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v5);
  }
}

_DWORD *gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,std::pair<long long,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE v18[16];

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  v5 = *a1;
  v6 = a1[1];
  v7 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v10 = v7 & v8;
    v11 = *(_QWORD *)(v5 + v10);
    v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12)
      break;
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      goto LABEL_9;
    v2 += 8;
    v7 = v2 + v10;
  }
  while (1)
  {
    v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    v14 = (_DWORD *)(v6 + 24 * v13);
    if (*v14 == (_DWORD)v3)
      break;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_5;
  }
  if (v13 == v8)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v18, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v18);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v18);
  }
  return v14 + 2;
}

void sub_22DAF46B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t i;
  unsigned int v12;
  uint64_t j;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v24;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ModelRandomGenerator>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ModelRandomGenerator>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::ModelRandomGenerator>(void)::d)
    return v4[5];
LABEL_12:
  v8 = operator new();
  v9 = v8;
  v10 = 5489;
  *(_DWORD *)v8 = 5489;
  for (i = 1; i != 624; ++i)
  {
    v10 = i + 1812433253 * (v10 ^ (v10 >> 30));
    *(_DWORD *)(v8 + 4 * i) = v10;
  }
  *(_QWORD *)(v8 + 2496) = 0;
  v12 = *((_DWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a1) + 68);
  *(_DWORD *)v9 = v12;
  for (j = 1; j != 624; ++j)
  {
    v12 = j + 1812433253 * (v12 ^ (v12 >> 30));
    *(_DWORD *)(v9 + 4 * j) = v12;
  }
  *(_QWORD *)(v9 + 2496) = 0;
  v14 = (_QWORD *)*v3;
  v15 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v15 = v14;
        v16 = v14[4];
        if (v16 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::ModelRandomGenerator>(void)::d)
          break;
        v14 = (_QWORD *)*v15;
        v3 = v15;
        if (!*v15)
          goto LABEL_23;
      }
      if (v16 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ModelRandomGenerator>(void)::d)
        break;
      v14 = (_QWORD *)v15[1];
      if (!v14)
      {
        v3 = v15 + 1;
        goto LABEL_23;
      }
    }
  }
  else
  {
LABEL_23:
    v17 = v15;
    v15 = operator new(0x30uLL);
    v15[4] = &gtl::FastTypeId<operations_research::sat::ModelRandomGenerator>(void)::d;
    v15[5] = 0;
    *v15 = 0;
    v15[1] = 0;
    v15[2] = v17;
    *v3 = v15;
    v18 = **(_QWORD **)(a1 + 24);
    v19 = v15;
    if (v18)
    {
      *(_QWORD *)(a1 + 24) = v18;
      v19 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v19);
    ++*(_QWORD *)(a1 + 40);
  }
  v15[5] = v9;
  v20 = (_QWORD *)operator new();
  *v20 = &off_24F984558;
  v20[1] = v9;
  v24 = v20;
  v21 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v21 >= *(_QWORD *)(a1 + 64))
  {
    v22 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v24);
  }
  else
  {
    *v21 = v20;
    v22 = (char *)(v21 + 1);
  }
  *(_QWORD *)(a1 + 56) = v22;
  return v9;
}

void sub_22DAF489C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1000C407BAC9B3ELL);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::ModelRandomGenerator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F984558;
  a1[1] = 0;
  if (v2)
    MEMORY[0x22E31DF78](v2, 0x1000C407BAC9B3ELL);
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::ModelRandomGenerator>::~Delete(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24F984558;
  a1[1] = 0;
  if (v2)
    MEMORY[0x22E31DF78](v2, 0x1000C407BAC9B3ELL);
  JUMPOUT(0x22E31DF78);
}

char *std::vector<operations_research::sat::Strategy>::__push_back_slow_path<operations_research::sat::Strategy>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v11 + 2) = v13;
  *((_QWORD *)v11 + 3) = v14;
  v15 = v11 + 32;
  v17 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    if (!v16)
      return v15;
    goto LABEL_17;
  }
  v18 = 0;
  do
  {
    v19 = &v11[v18];
    v20 = &v16[v18];
    *((_OWORD *)v19 - 2) = *(_OWORD *)&v16[v18 - 32];
    *((_QWORD *)v19 - 2) = *(_QWORD *)&v16[v18 - 16];
    *((_QWORD *)v20 - 4) = 0;
    *((_QWORD *)v20 - 3) = 0;
    *((_QWORD *)v20 - 2) = 0;
    *((_QWORD *)v19 - 1) = *(_QWORD *)&v16[v18 - 8];
    v18 -= 32;
  }
  while (&v16[v18] != v17);
  v21 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = &v11[v18];
  a1[1] = v15;
  a1[2] = v12;
  if (v16 != v21)
  {
    v22 = v16;
    do
    {
      v24 = (void *)*((_QWORD *)v22 - 4);
      v22 -= 32;
      v23 = v24;
      if (v24)
      {
        *((_QWORD *)v16 - 3) = v23;
        operator delete(v23);
      }
      v16 = v22;
    }
    while (v22 != v21);
    v16 = v21;
  }
  if (v16)
LABEL_17:
    operator delete(v16);
  return v15;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::drop_deletes_without_resize(a1);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,std::pair<long long,long long>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,std::pair<long long,long long>>>>::drop_deletes_without_resize(uint64_t result)
{
  int8x16_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(int8x16_t **)result;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)result + v2;
  if (v3 + 1 != *(_QWORD *)result)
  {
    v4 = v2 - 7;
    v5 = *(unint64_t **)result;
    if (v4 < 0x18)
      goto LABEL_29;
    v6 = (v4 >> 3) + 1;
    v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vandq_s8(v7[-1], v8);
      v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(_QWORD *)(v3 + 1) = v1->i64[0];
  *(_BYTE *)v3 = -1;
  v13 = *(_QWORD *)(result + 24);
  if (!v13)
  {
    v15 = 0;
    *(_QWORD *)(result + 40) = -*(_QWORD *)(result + 16);
    v38 = *(_QWORD *)(result + 32);
    if (!v38)
      return result;
LABEL_26:
    *(_QWORD *)(v38 + 32) = v15 >> 3;
    *(_QWORD *)(v38 + 16) = 0;
    return result;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(_QWORD *)result + v14) == 254)
    {
      v20 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(_QWORD *)(result + 8) + 24 * v14);
      v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      v23 = *(uint64_t *)((_BYTE *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        v16 = 0;
        v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v13;
          v23 = *(uint64_t *)((_BYTE *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v18 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
        v25 = *(_QWORD *)(result + 8);
        if (v24 == 128)
        {
          v26 = v25 + 24 * v18;
          v27 = (__int128 *)(v25 + 24 * v14);
          v28 = *v27;
          *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
          *(_OWORD *)v26 = v28;
          *(_BYTE *)(*(_QWORD *)result + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = 0x80;
        }
        else
        {
          v29 = (__int128 *)(v25 + 24 * v14);
          v30 = *v29;
          v31 = *((_QWORD *)v29 + 2);
          v32 = (__int128 *)(v25 + 24 * v18);
          v33 = *((_QWORD *)v32 + 2);
          *v29 = *v32;
          *((_QWORD *)v29 + 2) = v33;
          v34 = *(_QWORD *)(result + 8) + 24 * v18;
          *(_OWORD *)v34 = v30;
          *(_QWORD *)(v34 + 16) = v31;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(_BYTE *)((*(_QWORD *)(result + 24) & (v14 - 8)) + (*(_QWORD *)(result + 24) & 7) + *(_QWORD *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    v13 = *(_QWORD *)(result + 24);
  }
  while (v14 != v13);
  v35 = v14 - (v14 >> 3);
  v36 = v14 == 7;
  v37 = 6;
  if (!v36)
    v37 = v35;
  *(_QWORD *)(result + 40) = v37 - *(_QWORD *)(result + 16);
  v38 = *(_QWORD *)(result + 32);
  if (v38)
    goto LABEL_26;
  return result;
}

_QWORD *std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 59)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v5 = 32 * a3;
    v6 = (char *)operator new(32 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    while (1)
    {
      v9 = &v6[v7];
      v10 = a2 + v7;
      v11 = *(_QWORD *)(a2 + v7 + 24);
      if (v11)
      {
        if (v10 == v11)
        {
          *(_QWORD *)&v6[v7 + 24] = v9;
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 24))(v10, &v6[v7]);
          goto LABEL_6;
        }
        v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 16))(*(_QWORD *)(a2 + v7 + 24));
      }
      else
      {
        v8 = 0;
      }
      *((_QWORD *)v9 + 3) = v8;
LABEL_6:
      v7 += 32;
      if (v5 == v7)
      {
        a1[1] = &v6[v7];
        return a1;
      }
    }
  }
  return a1;
}

void sub_22DAF5040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_22DAF5054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (v11)
    std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::vector[abi:ne180100]((_QWORD *)((char *)v10 + v11), v10);
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_13:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        v8 = v4 - 4;
        v6 = (_QWORD *)*(v4 - 1);
        if (v4 - 4 == v6)
        {
          v6 = v4 - 4;
          v7 = 4;
        }
        else
        {
          if (!v6)
            goto LABEL_8;
          v7 = 5;
        }
        (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_8:
        v4 = v8;
        if (v8 == v3)
        {
          v5 = **v1;
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const void *v21;
  size_t v22;
  char v23;
  const void **v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  size_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  BOOL v43;
  int *v44;
  int *v45;
  uint64_t v46;
  const void **v47;
  int v48;
  size_t v49;
  const void *v50;
  size_t v51;
  int v52;
  _BOOL4 v53;
  uint64_t v54;
  const void **v55;
  int v56;
  size_t v57;
  const void *v58;
  size_t v59;
  int v60;
  BOOL v61;
  int v62;
  int v63;
  int *v64;
  int *v65;
  int v66;
  size_t v67;
  const void *v68;
  uint64_t v69;
  const void **v70;
  int v71;
  size_t v72;
  const void *v73;
  size_t v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  const void **v78;
  int v79;
  size_t v80;
  const void *v81;
  size_t v82;
  int v83;
  _BOOL4 v84;
  int *v85;
  BOOL v86;
  int v87;
  BOOL v88;
  uint64_t v89;
  int v90;
  size_t v91;
  const void *v92;
  size_t v93;
  BOOL v94;
  uint64_t v95;
  const void **v96;
  int v97;
  size_t v98;
  const void *v99;
  size_t v100;
  BOOL v101;
  int *v102;
  uint64_t v103;
  int v104;
  size_t v105;
  const void *v106;
  size_t v107;
  _BOOL4 v108;
  int *v109;
  uint64_t v110;
  const void **v111;
  int v112;
  size_t v113;
  const void *v114;
  size_t v115;
  BOOL v116;
  int v117;
  int v118;
  int v119;
  size_t v120;
  const void *v121;
  uint64_t v122;
  const void **v123;
  int v124;
  size_t v125;
  const void *v126;
  size_t v127;
  int v128;
  _BOOL4 v129;
  uint64_t v130;
  const void **v131;
  int v132;
  size_t v133;
  const void *v134;
  size_t v135;
  BOOL v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const void **v141;
  const void **v142;
  int v143;
  int v144;
  size_t v145;
  const void *v146;
  size_t v147;
  const void *v148;
  size_t v149;
  _BOOL4 v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  int *v155;
  int *v156;
  uint64_t v157;
  uint64_t v158;
  const void **v159;
  uint64_t v160;
  int v161;
  int v162;
  size_t v163;
  const void *v164;
  size_t v165;
  const void *v166;
  size_t v167;
  int *v168;
  _BOOL4 v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  size_t v174;
  const void *v175;
  size_t v176;
  const void *v177;
  size_t v178;
  BOOL v179;
  int64_t v180;
  int64_t v181;
  uint64_t v182;
  uint64_t v183;
  int *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  size_t v193;
  const void *v194;
  size_t v195;
  const void *v196;
  size_t v197;
  int v198;
  BOOL v199;
  _BOOL4 v200;
  int *v201;
  uint64_t v202;
  const void **v203;
  int v204;
  int v205;
  size_t v206;
  const void *v207;
  size_t v208;
  const void *v209;
  size_t v210;
  BOOL v211;
  int *v212;
  const void **v213;
  const void **v214;
  char v215;
  char v216;
  size_t v217;
  const void *v218;
  unint64_t v219;
  size_t v220;
  const void *v221;
  size_t v222;
  int v223;
  _BOOL4 v224;
  uint64_t v225;
  int v226;
  int v227;
  size_t v228;
  const void *v229;
  size_t v230;
  const void *v231;
  size_t v232;
  _BOOL4 v233;
  int *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  BOOL v239;
  uint64_t v240;
  int64_t v241;
  int *v242;
  uint64_t v243;
  uint64_t v244;
  const void **v245;
  const void **v246;
  int v247;
  int v248;
  size_t v249;
  const void *v250;
  size_t v251;
  const void *v252;
  size_t v253;
  _BOOL4 v254;
  int v255;
  int *v256;
  int *v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  int *v261;
  uint64_t v262;
  unint64_t v263;
  int *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  const void **v269;
  int v270;
  int v271;
  size_t v272;
  const void *v273;
  size_t v274;
  const void *v275;
  size_t v276;
  _BOOL4 v277;
  int *v278;
  uint64_t v279;
  int v280;
  int v281;
  size_t v282;
  const void *v283;
  size_t v284;
  const void *v285;
  size_t v286;
  BOOL v287;
  int *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  const void **v292;
  uint64_t v293;
  int v294;
  int v295;
  size_t v296;
  const void *v297;
  size_t v298;
  const void *v299;
  size_t v300;
  _BOOL4 v301;
  int *v302;
  uint64_t v303;
  int v304;
  int v305;
  size_t v306;
  const void *v307;
  size_t v308;
  const void *v309;
  size_t v310;
  BOOL v311;
  unint64_t v312;
  uint64_t v313;
  int *v314;
  int64_t v315;
  int *v316;
  uint64_t v317;
  uint64_t v320;
  int v321;
  int *v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  int64_t v327;
  uint64_t v328;

  v6 = (uint64_t)a3;
  v7 = (int *)result;
LABEL_2:
  v8 = a2;
  v316 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v10 = v9;
    v11 = (char *)v8 - (char *)v9;
    v12 = v8 - v9;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v138 = *(a2 - 1);
        v139 = *v9;
        v140 = *(_QWORD *)(*(_QWORD *)v6 + 32) + 8;
        v141 = *(const void ***)(*(_QWORD *)(v140 + 8 * v138) + 40);
        v142 = *(const void ***)(*(_QWORD *)(v140 + 8 * v139) + 40);
        v143 = *((char *)v142 + 23);
        v144 = *((char *)v141 + 23);
        if (v144 >= 0)
          v145 = *((unsigned __int8 *)v141 + 23);
        else
          v145 = (size_t)v141[1];
        if (v144 >= 0)
          v146 = v141;
        else
          v146 = *v141;
        if (v143 >= 0)
          v147 = *((unsigned __int8 *)v142 + 23);
        else
          v147 = (size_t)v142[1];
        if (v143 >= 0)
          v148 = v142;
        else
          v148 = *v142;
        if (v147 >= v145)
          v149 = v145;
        else
          v149 = v147;
        result = memcmp(v146, v148, v149);
        v150 = v145 < v147;
        if ((_DWORD)result)
          v150 = (int)result < 0;
        if (v150)
        {
          *v9 = v138;
          *(a2 - 1) = v139;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v9, v9 + 1, v316, *(_QWORD *)(*(_QWORD *)v6 + 32));
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v9, v9 + 1, v9 + 2, v316, v6);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,0>(v9, v9 + 1, v9 + 2, v9 + 3, v316, v6);
      default:
        v323 = v9;
        if (v11 <= 95)
        {
          v151 = *(_QWORD *)v6;
          if ((a5 & 1) != 0)
          {
            if (v9 != v8)
            {
              v152 = v9 + 1;
              if (v9 + 1 != a2)
              {
                v153 = 0;
                v154 = *(_QWORD *)(v151 + 32);
                v155 = v9;
                do
                {
                  v157 = *v155;
                  v158 = v155[1];
                  v155 = v152;
                  v159 = *(const void ***)(*(_QWORD *)(v154 + 8 + 8 * v158) + 40);
                  v160 = *(_QWORD *)(*(_QWORD *)(v154 + 8 + 8 * v157) + 40);
                  v161 = *(char *)(v160 + 23);
                  v162 = *((char *)v159 + 23);
                  if (v162 >= 0)
                    v163 = *((unsigned __int8 *)v159 + 23);
                  else
                    v163 = (size_t)v159[1];
                  if (v162 >= 0)
                    v164 = *(const void **)(*(_QWORD *)(v154 + 8 + 8 * v158) + 40);
                  else
                    v164 = *v159;
                  if (v161 >= 0)
                    v165 = *(unsigned __int8 *)(v160 + 23);
                  else
                    v165 = *(_QWORD *)(v160 + 8);
                  if (v161 >= 0)
                    v166 = *(const void **)(*(_QWORD *)(v154 + 8 + 8 * v157) + 40);
                  else
                    v166 = *(const void **)v160;
                  if (v165 >= v163)
                    v167 = v163;
                  else
                    v167 = v165;
                  result = memcmp(v164, v166, v167);
                  v168 = v323;
                  v169 = v163 < v165;
                  if ((_DWORD)result)
                    v169 = (int)result < 0;
                  if (v169)
                  {
                    v170 = v153;
                    do
                    {
                      *(int *)((char *)v168 + v170 + 4) = v157;
                      if (!v170)
                      {
                        v156 = v168;
                        goto LABEL_238;
                      }
                      v157 = *(int *)((char *)v168 + v170 - 4);
                      v171 = *(_QWORD *)(*(_QWORD *)(v154 + 8 * v157 + 8) + 40);
                      v172 = *(char *)(v171 + 23);
                      v173 = *((char *)v159 + 23);
                      if (v173 >= 0)
                        v174 = *((unsigned __int8 *)v159 + 23);
                      else
                        v174 = (size_t)v159[1];
                      if (v173 >= 0)
                        v175 = v159;
                      else
                        v175 = *v159;
                      if (v172 >= 0)
                        v176 = *(unsigned __int8 *)(v171 + 23);
                      else
                        v176 = *(_QWORD *)(v171 + 8);
                      if (v172 >= 0)
                        v177 = *(const void **)(*(_QWORD *)(v154 + 8 * v157 + 8) + 40);
                      else
                        v177 = *(const void **)v171;
                      if (v176 >= v174)
                        v178 = v174;
                      else
                        v178 = v176;
                      result = memcmp(v175, v177, v178);
                      v168 = v323;
                      v179 = v174 < v176;
                      if ((_DWORD)result)
                        v179 = (int)result < 0;
                      v170 -= 4;
                    }
                    while (v179);
                    v156 = (int *)((char *)v323 + v170 + 4);
LABEL_238:
                    *v156 = v158;
                  }
                  v152 = v155 + 1;
                  v153 += 4;
                }
                while (v155 + 1 != a2);
              }
            }
          }
          else if (v9 != v8)
          {
            v288 = v9 + 1;
            if (v9 + 1 != a2)
            {
              v289 = *(_QWORD *)(v151 + 32);
              do
              {
                v291 = *v10;
                v290 = v10[1];
                v10 = v288;
                v292 = *(const void ***)(*(_QWORD *)(v289 + 8 + 8 * v290) + 40);
                v293 = *(_QWORD *)(*(_QWORD *)(v289 + 8 + 8 * v291) + 40);
                v294 = *(char *)(v293 + 23);
                v295 = *((char *)v292 + 23);
                if (v295 >= 0)
                  v296 = *((unsigned __int8 *)v292 + 23);
                else
                  v296 = (size_t)v292[1];
                if (v295 >= 0)
                  v297 = *(const void **)(*(_QWORD *)(v289 + 8 + 8 * v290) + 40);
                else
                  v297 = *v292;
                if (v294 >= 0)
                  v298 = *(unsigned __int8 *)(v293 + 23);
                else
                  v298 = *(_QWORD *)(v293 + 8);
                if (v294 >= 0)
                  v299 = *(const void **)(*(_QWORD *)(v289 + 8 + 8 * v291) + 40);
                else
                  v299 = *(const void **)v293;
                if (v298 >= v296)
                  v300 = v296;
                else
                  v300 = v298;
                result = memcmp(v297, v299, v300);
                v301 = v296 < v298;
                if ((_DWORD)result)
                  v301 = (int)result < 0;
                if (v301)
                {
                  v302 = v10;
                  do
                  {
                    *v302 = v291;
                    v291 = *(v302 - 2);
                    v303 = *(_QWORD *)(*(_QWORD *)(v289 + 8 * v291 + 8) + 40);
                    v304 = *(char *)(v303 + 23);
                    v305 = *((char *)v292 + 23);
                    if (v305 >= 0)
                      v306 = *((unsigned __int8 *)v292 + 23);
                    else
                      v306 = (size_t)v292[1];
                    if (v305 >= 0)
                      v307 = v292;
                    else
                      v307 = *v292;
                    if (v304 >= 0)
                      v308 = *(unsigned __int8 *)(v303 + 23);
                    else
                      v308 = *(_QWORD *)(v303 + 8);
                    if (v304 >= 0)
                      v309 = *(const void **)(*(_QWORD *)(v289 + 8 * v291 + 8) + 40);
                    else
                      v309 = *(const void **)v303;
                    if (v308 >= v306)
                      v310 = v306;
                    else
                      v310 = v308;
                    result = memcmp(v307, v309, v310);
                    v311 = v306 < v308;
                    if ((_DWORD)result)
                      v311 = (int)result < 0;
                    --v302;
                  }
                  while (v311);
                  *v302 = v290;
                }
                v288 = v10 + 1;
              }
              while (v10 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != v8)
          {
            v312 = (char *)v8 - (char *)v9;
            v180 = (v12 - 2) >> 1;
            v327 = v180;
            do
            {
              v181 = v180;
              if (v327 >= v180)
              {
                v182 = *a3;
                v183 = (2 * v181) | 1;
                v184 = &v10[v183];
                v185 = 2 * v181 + 2;
                v186 = *v184;
                v315 = v181;
                if (v185 >= (uint64_t)v12)
                {
                  v188 = *(_QWORD *)(v182 + 32);
                }
                else
                {
                  v187 = v184[1];
                  v188 = *(_QWORD *)(v182 + 32);
                  v189 = *(_QWORD *)(*(_QWORD *)(v188 + 8 + 8 * v186) + 40);
                  v190 = *(_QWORD *)(*(_QWORD *)(v188 + 8 + 8 * v187) + 40);
                  v191 = *(char *)(v190 + 23);
                  v192 = *(char *)(v189 + 23);
                  if (v192 >= 0)
                    v193 = *(unsigned __int8 *)(v189 + 23);
                  else
                    v193 = *(_QWORD *)(v189 + 8);
                  if (v192 >= 0)
                    v194 = *(const void **)(*(_QWORD *)(v188 + 8 + 8 * v186) + 40);
                  else
                    v194 = *(const void **)v189;
                  if (v191 >= 0)
                    v195 = *(unsigned __int8 *)(v190 + 23);
                  else
                    v195 = *(_QWORD *)(v190 + 8);
                  if (v191 >= 0)
                    v196 = *(const void **)(*(_QWORD *)(v188 + 8 + 8 * v187) + 40);
                  else
                    v196 = *(const void **)v190;
                  if (v195 >= v193)
                    v197 = v193;
                  else
                    v197 = v195;
                  v198 = memcmp(v194, v196, v197);
                  v181 = v315;
                  v199 = v193 >= v195;
                  v10 = v323;
                  v200 = !v199;
                  if (v198)
                    v200 = v198 < 0;
                  if (v200)
                  {
                    v186 = v187;
                    ++v184;
                    v183 = v185;
                  }
                }
                v201 = &v10[v181];
                v313 = *v201;
                v202 = *(_QWORD *)(*(_QWORD *)(v188 + 8 + 8 * v186) + 40);
                v203 = *(const void ***)(*(_QWORD *)(v188 + 8 + 8 * v313) + 40);
                v204 = *((char *)v203 + 23);
                v205 = *(char *)(v202 + 23);
                if (v205 >= 0)
                  v206 = *(unsigned __int8 *)(v202 + 23);
                else
                  v206 = *(_QWORD *)(v202 + 8);
                if (v205 >= 0)
                  v207 = *(const void **)(*(_QWORD *)(v188 + 8 + 8 * v186) + 40);
                else
                  v207 = *(const void **)v202;
                if (v204 >= 0)
                  v208 = *((unsigned __int8 *)v203 + 23);
                else
                  v208 = (size_t)v203[1];
                if (v204 >= 0)
                  v209 = *(const void **)(*(_QWORD *)(v188 + 8 + 8 * v313) + 40);
                else
                  v209 = *v203;
                if (v208 >= v206)
                  v210 = v206;
                else
                  v210 = v208;
                result = memcmp(v207, v209, v210);
                v181 = v315;
                v199 = v206 >= v208;
                v10 = v323;
                v211 = !v199;
                if ((_DWORD)result)
                  v211 = (int)result < 0;
                if (!v211)
                {
                  v317 = v188;
                  do
                  {
                    v234 = v184;
                    *v201 = v186;
                    if (v327 < v183)
                      break;
                    v235 = (2 * v183) | 1;
                    v184 = &v323[v235];
                    v236 = 2 * v183 + 2;
                    v186 = *v184;
                    if (v236 < (uint64_t)v12)
                    {
                      v212 = v184 + 1;
                      v320 = v184[1];
                      v213 = *(const void ***)(*(_QWORD *)(v188 + 8 + 8 * v186) + 40);
                      v214 = *(const void ***)(*(_QWORD *)(v188 + 8 + 8 * v320) + 40);
                      v215 = *((_BYTE *)v214 + 23);
                      v216 = *((_BYTE *)v213 + 23);
                      if (v216 >= 0)
                        v217 = *((unsigned __int8 *)v213 + 23);
                      else
                        v217 = (size_t)v213[1];
                      if (v216 >= 0)
                        v218 = v213;
                      else
                        v218 = *v213;
                      v219 = v12;
                      if (v215 >= 0)
                        v220 = *((unsigned __int8 *)v214 + 23);
                      else
                        v220 = (size_t)v214[1];
                      if (v215 >= 0)
                        v221 = v214;
                      else
                        v221 = *v214;
                      if (v220 >= v217)
                        v222 = v217;
                      else
                        v222 = v220;
                      v223 = memcmp(v218, v221, v222);
                      v199 = v217 >= v220;
                      v188 = v317;
                      v12 = v219;
                      v224 = !v199;
                      if (v223)
                        v224 = v223 < 0;
                      if (v224)
                      {
                        v186 = v320;
                        v184 = v212;
                      }
                      else
                      {
                        v184 = &v323[v235];
                      }
                      v183 = v224 ? v236 : v235;
                    }
                    else
                    {
                      v183 = (2 * v183) | 1;
                    }
                    v225 = *(_QWORD *)(*(_QWORD *)(v188 + 8 * v186 + 8) + 40);
                    v226 = *((char *)v203 + 23);
                    v227 = *(char *)(v225 + 23);
                    if (v227 >= 0)
                      v228 = *(unsigned __int8 *)(v225 + 23);
                    else
                      v228 = *(_QWORD *)(v225 + 8);
                    if (v227 >= 0)
                      v229 = *(const void **)(*(_QWORD *)(v188 + 8 * v186 + 8) + 40);
                    else
                      v229 = *(const void **)v225;
                    if (v226 >= 0)
                      v230 = *((unsigned __int8 *)v203 + 23);
                    else
                      v230 = (size_t)v203[1];
                    if (v226 >= 0)
                      v231 = v203;
                    else
                      v231 = *v203;
                    if (v230 >= v228)
                      v232 = v228;
                    else
                      v232 = v230;
                    result = memcmp(v229, v231, v232);
                    v233 = v228 < v230;
                    if ((_DWORD)result)
                      v233 = (int)result < 0;
                    v201 = v234;
                  }
                  while (!v233);
                  v181 = v315;
                  *v234 = v313;
                  v10 = v323;
                }
              }
              v180 = v181 - 1;
            }
            while (v181);
            v237 = v312 >> 2;
            v238 = a3;
            do
            {
              v240 = 0;
              v321 = *v10;
              v325 = v237;
              v328 = *v238;
              v241 = (unint64_t)(v237 - 2) >> 1;
              v242 = v10;
              do
              {
                while (1)
                {
                  v257 = &v242[v240];
                  v258 = v257[1];
                  v256 = v257 + 1;
                  v255 = v258;
                  v259 = (2 * v240) | 1;
                  v260 = 2 * v240 + 2;
                  if (v260 < v237)
                    break;
                  v240 = (2 * v240) | 1;
                  *v242 = v255;
                  v242 = v256;
                  if (v259 > v241)
                    goto LABEL_407;
                }
                v243 = v256[1];
                v244 = *(_QWORD *)(v328 + 32) + 8;
                v245 = *(const void ***)(*(_QWORD *)(v244 + 8 * v255) + 40);
                v246 = *(const void ***)(*(_QWORD *)(v244 + 8 * v243) + 40);
                v247 = *((char *)v246 + 23);
                v248 = *((char *)v245 + 23);
                if (v248 >= 0)
                  v249 = *((unsigned __int8 *)v245 + 23);
                else
                  v249 = (size_t)v245[1];
                if (v248 >= 0)
                  v250 = v245;
                else
                  v250 = *v245;
                if (v247 >= 0)
                  v251 = *((unsigned __int8 *)v246 + 23);
                else
                  v251 = (size_t)v246[1];
                if (v247 >= 0)
                  v252 = v246;
                else
                  v252 = *v246;
                if (v251 >= v249)
                  v253 = v249;
                else
                  v253 = v251;
                result = memcmp(v250, v252, v253);
                v254 = v249 < v251;
                if ((_DWORD)result)
                  v254 = (int)result < 0;
                if (v254)
                {
                  v255 = v243;
                  ++v256;
                }
                v237 = v325;
                if (v254)
                  v240 = v260;
                else
                  v240 = v259;
                *v242 = v255;
                v242 = v256;
              }
              while (v240 <= v241);
LABEL_407:
              v261 = a2 - 1;
              v86 = v256 == --a2;
              if (v86)
              {
                *v256 = v321;
              }
              else
              {
                *v256 = *v261;
                *v261 = v321;
                v262 = (char *)v256 - (char *)v323 + 4;
                if (v262 >= 5)
                {
                  v263 = (((unint64_t)v262 >> 2) - 2) >> 1;
                  v264 = &v323[v263];
                  v265 = *v264;
                  v266 = *v256;
                  v267 = *(_QWORD *)(*a3 + 32);
                  v268 = *(_QWORD *)(*(_QWORD *)(v267 + 8 + 8 * v265) + 40);
                  v269 = *(const void ***)(*(_QWORD *)(v267 + 8 + 8 * v266) + 40);
                  v270 = *((char *)v269 + 23);
                  v271 = *(char *)(v268 + 23);
                  if (v271 >= 0)
                    v272 = *(unsigned __int8 *)(v268 + 23);
                  else
                    v272 = *(_QWORD *)(v268 + 8);
                  if (v271 >= 0)
                    v273 = *(const void **)(*(_QWORD *)(v267 + 8 + 8 * v265) + 40);
                  else
                    v273 = *(const void **)v268;
                  if (v270 >= 0)
                    v274 = *((unsigned __int8 *)v269 + 23);
                  else
                    v274 = (size_t)v269[1];
                  if (v270 >= 0)
                    v275 = *(const void **)(*(_QWORD *)(v267 + 8 + 8 * v266) + 40);
                  else
                    v275 = *v269;
                  if (v274 >= v272)
                    v276 = v272;
                  else
                    v276 = v274;
                  result = memcmp(v273, v275, v276);
                  v277 = v272 < v274;
                  if ((_DWORD)result)
                    v277 = (int)result < 0;
                  if (v277)
                  {
                    do
                    {
                      v278 = v264;
                      *v256 = v265;
                      if (!v263)
                        break;
                      v263 = (v263 - 1) >> 1;
                      v264 = &v323[v263];
                      v265 = *v264;
                      v279 = *(_QWORD *)(*(_QWORD *)(v267 + 8 * v265 + 8) + 40);
                      v280 = *((char *)v269 + 23);
                      v281 = *(char *)(v279 + 23);
                      if (v281 >= 0)
                        v282 = *(unsigned __int8 *)(v279 + 23);
                      else
                        v282 = *(_QWORD *)(v279 + 8);
                      if (v281 >= 0)
                        v283 = *(const void **)(*(_QWORD *)(v267 + 8 * v265 + 8) + 40);
                      else
                        v283 = *(const void **)v279;
                      if (v280 >= 0)
                        v284 = *((unsigned __int8 *)v269 + 23);
                      else
                        v284 = (size_t)v269[1];
                      if (v280 >= 0)
                        v285 = v269;
                      else
                        v285 = *v269;
                      if (v284 >= v282)
                        v286 = v282;
                      else
                        v286 = v284;
                      result = memcmp(v283, v285, v286);
                      v287 = v282 < v284;
                      if ((_DWORD)result)
                        v287 = (int)result < 0;
                      v256 = v278;
                    }
                    while (v287);
                    *v278 = v266;
                  }
                }
              }
              v239 = v237-- <= 2;
              v10 = v323;
              v238 = a3;
            }
            while (!v239);
          }
          return result;
        }
        v13 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        if ((unint64_t)v11 < 0x201)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(&v9[v12 >> 1], v9, v316, v13);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v9, &v9[v12 >> 1], v316, v13);
          v14 = v12 >> 1;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v9 + 1, &v9[v14 - 1], a2 - 2, *(_QWORD *)(*(_QWORD *)v6 + 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v9 + 2, &v9[v14 + 1], a2 - 3, *(_QWORD *)(*(_QWORD *)v6 + 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(&v9[v14 - 1], &v9[v14], &v9[v14 + 1], *(_QWORD *)(*(_QWORD *)v6 + 32));
          v15 = *v9;
          *v9 = v9[v14];
          v9[v14] = v15;
        }
        v16 = *(_QWORD *)v6;
        v17 = *v9;
        v324 = *v10;
        v326 = a4 - 1;
        if ((a5 & 1) == 0)
        {
          v18 = *(_QWORD *)(v16 + 32);
          v24 = *(const void ***)(*(_QWORD *)(v18 + 8 + 8 * *(v10 - 1)) + 40);
          v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8 + 8 * v17) + 40);
          v20 = *(unsigned __int8 *)(v19 + 23);
          v23 = *(_BYTE *)(v19 + 23);
          v21 = *(const void **)v19;
          v22 = *(_QWORD *)(v19 + 8);
          v25 = *((char *)v24 + 23);
          if (v25 >= 0)
            v26 = *((unsigned __int8 *)v24 + 23);
          else
            v26 = (size_t)v24[1];
          if (v25 >= 0)
            v27 = v24;
          else
            v27 = *v24;
          if ((v20 & 0x80u) == 0)
            v28 = *(unsigned __int8 *)(v19 + 23);
          else
            v28 = *(_QWORD *)(v19 + 8);
          if ((v20 & 0x80u) == 0)
            v29 = *(const void **)(*(_QWORD *)(v18 + 8 + 8 * v17) + 40);
          else
            v29 = *(const void **)v19;
          if (v28 >= v26)
            v30 = v26;
          else
            v30 = v28;
          v31 = memcmp(v27, v29, v30);
          v32 = v26 < v28;
          if (v31)
            v32 = v31 < 0;
          if (v32)
            goto LABEL_29;
          v89 = *(_QWORD *)(*(_QWORD *)(v18 + 8 * *v316 + 8) + 40);
          v90 = *(char *)(v89 + 23);
          if (v90 >= 0)
            v91 = *(unsigned __int8 *)(v89 + 23);
          else
            v91 = *(_QWORD *)(v89 + 8);
          if (v90 >= 0)
            v92 = *(const void **)(*(_QWORD *)(v18 + 8 * *v316 + 8) + 40);
          else
            v92 = *(const void **)v89;
          if (v91 >= v28)
            v93 = v28;
          else
            v93 = v91;
          result = memcmp(v29, v92, v93);
          v94 = v28 < v91;
          if ((_DWORD)result)
            v94 = (int)result < 0;
          if (v94)
          {
            v9 = v323;
            do
            {
              v95 = v9[1];
              ++v9;
              v96 = *(const void ***)(*(_QWORD *)(v18 + 8 * v95 + 8) + 40);
              v97 = *((char *)v96 + 23);
              if (v97 >= 0)
                v98 = *((unsigned __int8 *)v96 + 23);
              else
                v98 = (size_t)v96[1];
              if (v97 >= 0)
                v99 = v96;
              else
                v99 = *v96;
              if (v98 >= v28)
                v100 = v28;
              else
                v100 = v98;
              result = memcmp(v29, v99, v100);
              v101 = v28 < v98;
              if ((_DWORD)result)
                v101 = (int)result < 0;
            }
            while (!v101);
          }
          else
          {
            v102 = v323 + 1;
            do
            {
              v9 = v102;
              if (v102 >= a2)
                break;
              ++v102;
              v103 = *(_QWORD *)(*(_QWORD *)(v18 + 8 * *v9 + 8) + 40);
              v104 = *(char *)(v103 + 23);
              if (v104 >= 0)
                v105 = *(unsigned __int8 *)(v103 + 23);
              else
                v105 = *(_QWORD *)(v103 + 8);
              if (v104 >= 0)
                v106 = *(const void **)(*(_QWORD *)(v18 + 8 * *v9 + 8) + 40);
              else
                v106 = *(const void **)v103;
              if (v105 >= v28)
                v107 = v28;
              else
                v107 = v105;
              result = memcmp(v29, v106, v107);
              v108 = v28 < v105;
              if ((_DWORD)result)
                v108 = (int)result < 0;
            }
            while (!v108);
          }
          v109 = a2;
          if (v9 < a2)
          {
            v109 = a2;
            do
            {
              v110 = *--v109;
              v111 = *(const void ***)(*(_QWORD *)(v18 + 8 * v110 + 8) + 40);
              v112 = *((char *)v111 + 23);
              if (v112 >= 0)
                v113 = *((unsigned __int8 *)v111 + 23);
              else
                v113 = (size_t)v111[1];
              if (v112 >= 0)
                v114 = v111;
              else
                v114 = *v111;
              if (v113 >= v28)
                v115 = v28;
              else
                v115 = v113;
              result = memcmp(v29, v114, v115);
              v116 = v28 < v113;
              if ((_DWORD)result)
                v116 = (int)result < 0;
            }
            while (v116);
          }
          if (v9 < v109)
          {
            v117 = *v9;
            v118 = *v109;
            do
            {
              *v9 = v118;
              *v109 = v117;
              v119 = *(char *)(v19 + 23);
              if (v119 >= 0)
                v120 = *(unsigned __int8 *)(v19 + 23);
              else
                v120 = *(_QWORD *)(v19 + 8);
              if (v119 >= 0)
                v121 = (const void *)v19;
              else
                v121 = *(const void **)v19;
              do
              {
                v122 = v9[1];
                ++v9;
                v117 = v122;
                v123 = *(const void ***)(*(_QWORD *)(v18 + 8 * v122 + 8) + 40);
                v124 = *((char *)v123 + 23);
                if (v124 >= 0)
                  v125 = *((unsigned __int8 *)v123 + 23);
                else
                  v125 = (size_t)v123[1];
                if (v124 >= 0)
                  v126 = v123;
                else
                  v126 = *v123;
                if (v125 >= v120)
                  v127 = v120;
                else
                  v127 = v125;
                v128 = memcmp(v121, v126, v127);
                v129 = v120 < v125;
                if (v128)
                  v129 = v128 < 0;
              }
              while (!v129);
              do
              {
                v130 = *--v109;
                v118 = v130;
                v131 = *(const void ***)(*(_QWORD *)(v18 + 8 * v130 + 8) + 40);
                v132 = *((char *)v131 + 23);
                if (v132 >= 0)
                  v133 = *((unsigned __int8 *)v131 + 23);
                else
                  v133 = (size_t)v131[1];
                if (v132 >= 0)
                  v134 = v131;
                else
                  v134 = *v131;
                if (v133 >= v120)
                  v135 = v120;
                else
                  v135 = v133;
                result = memcmp(v121, v134, v135);
                v136 = v120 < v133;
                if ((_DWORD)result)
                  v136 = (int)result < 0;
              }
              while (v136);
            }
            while (v9 < v109);
          }
          v137 = v9 - 1;
          v8 = a2;
          if (v9 - 1 != v323)
            *v323 = *v137;
          a5 = 0;
          a4 = v326;
          *v137 = v324;
          v6 = (uint64_t)a3;
          continue;
        }
        v18 = *(_QWORD *)(v16 + 32);
        v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8 * v17 + 8) + 40);
        v20 = *(unsigned __int8 *)(v19 + 23);
        v21 = *(const void **)v19;
        v22 = *(_QWORD *)(v19 + 8);
        v23 = *(_BYTE *)(v19 + 23);
LABEL_29:
        v33 = 0;
        if (v23 >= 0)
          v34 = v20;
        else
          v34 = v22;
        if (v23 >= 0)
          v35 = (const void *)v19;
        else
          v35 = v21;
        v7 = v323;
        do
        {
          v36 = v323[v33 + 1];
          v37 = *(_QWORD *)(*(_QWORD *)(v18 + 8 * v36 + 8) + 40);
          v38 = *(char *)(v37 + 23);
          if (v38 >= 0)
            v39 = *(unsigned __int8 *)(v37 + 23);
          else
            v39 = *(_QWORD *)(v37 + 8);
          if (v38 >= 0)
            v40 = *(const void **)(*(_QWORD *)(v18 + 8 * v36 + 8) + 40);
          else
            v40 = *(const void **)v37;
          if (v34 >= v39)
            v41 = v39;
          else
            v41 = v34;
          v42 = memcmp(v40, v35, v41);
          v43 = v39 < v34;
          if (v42)
            v43 = v42 < 0;
          ++v33;
        }
        while (v43);
        v44 = &v323[v33];
        v45 = a2;
        if (v33 == 1)
        {
          v45 = a2;
          do
          {
            if (v44 >= v45)
              break;
            v54 = *--v45;
            v55 = *(const void ***)(*(_QWORD *)(v18 + 8 * v54 + 8) + 40);
            v56 = *((char *)v55 + 23);
            if (v56 >= 0)
              v57 = *((unsigned __int8 *)v55 + 23);
            else
              v57 = (size_t)v55[1];
            if (v56 >= 0)
              v58 = v55;
            else
              v58 = *v55;
            if (v34 >= v57)
              v59 = v57;
            else
              v59 = v34;
            v60 = memcmp(v58, v35, v59);
            v61 = v57 < v34;
            if (v60)
              v61 = v60 < 0;
          }
          while (!v61);
        }
        else
        {
          do
          {
            v46 = *--v45;
            v47 = *(const void ***)(*(_QWORD *)(v18 + 8 * v46 + 8) + 40);
            v48 = *((char *)v47 + 23);
            if (v48 >= 0)
              v49 = *((unsigned __int8 *)v47 + 23);
            else
              v49 = (size_t)v47[1];
            if (v48 >= 0)
              v50 = v47;
            else
              v50 = *v47;
            if (v34 >= v49)
              v51 = v49;
            else
              v51 = v34;
            v52 = memcmp(v50, v35, v51);
            v53 = v49 < v34;
            if (v52)
              v53 = v52 < 0;
          }
          while (!v53);
        }
        if (v44 >= v45)
        {
          v85 = v44 - 1;
          v8 = a2;
          v6 = (uint64_t)a3;
          v87 = v324;
          a4 = v326;
          if (v44 - 1 != v323)
            goto LABEL_113;
        }
        else
        {
          v62 = *v45;
          v63 = v36;
          v314 = v44;
          v64 = v44;
          v65 = v45;
          do
          {
            *v64 = v62;
            *v65 = v63;
            v66 = *(char *)(v19 + 23);
            if (v66 >= 0)
              v67 = *(unsigned __int8 *)(v19 + 23);
            else
              v67 = *(_QWORD *)(v19 + 8);
            if (v66 >= 0)
              v68 = (const void *)v19;
            else
              v68 = *(const void **)v19;
            do
            {
              v69 = v64[1];
              ++v64;
              v63 = v69;
              v70 = *(const void ***)(*(_QWORD *)(v18 + 8 * v69 + 8) + 40);
              v71 = *((char *)v70 + 23);
              if (v71 >= 0)
                v72 = *((unsigned __int8 *)v70 + 23);
              else
                v72 = (size_t)v70[1];
              if (v71 >= 0)
                v73 = v70;
              else
                v73 = *v70;
              if (v67 >= v72)
                v74 = v72;
              else
                v74 = v67;
              v75 = memcmp(v73, v68, v74);
              v76 = v72 < v67;
              if (v75)
                v76 = v75 < 0;
            }
            while (v76);
            do
            {
              v77 = *--v65;
              v62 = v77;
              v78 = *(const void ***)(*(_QWORD *)(v18 + 8 * v77 + 8) + 40);
              v79 = *((char *)v78 + 23);
              if (v79 >= 0)
                v80 = *((unsigned __int8 *)v78 + 23);
              else
                v80 = (size_t)v78[1];
              if (v79 >= 0)
                v81 = v78;
              else
                v81 = *v78;
              if (v67 >= v80)
                v82 = v80;
              else
                v82 = v67;
              v83 = memcmp(v81, v68, v82);
              v84 = v80 < v67;
              if (v83)
                v84 = v83 < 0;
            }
            while (!v84);
          }
          while (v64 < v65);
          v85 = v64 - 1;
          v8 = a2;
          v7 = v323;
          v44 = v314;
          v86 = v64 - 1 == v323;
          v6 = (uint64_t)a3;
          v87 = v324;
          a4 = v326;
          if (!v86)
LABEL_113:
            *v7 = *v85;
        }
        *v85 = v87;
        if (v44 < v45)
        {
LABEL_117:
          result = std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,false>(v7, v85, v6, a4, a5 & 1);
          a5 = 0;
          v9 = v85 + 1;
          continue;
        }
        v88 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v7, v85, v6);
        v9 = v85 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(v85 + 1, v8, v6);
        if (!(_DWORD)result)
        {
          if (v88)
            continue;
          goto LABEL_117;
        }
        a2 = v85;
        if (!v88)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,0>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  uint64_t result;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void **v29;
  int v30;
  int v31;
  size_t v32;
  const void *v33;
  size_t v34;
  const void *v35;
  size_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void **v42;
  int v43;
  int v44;
  size_t v45;
  const void *v46;
  size_t v47;
  const void *v48;
  size_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const void **v54;
  int v55;
  int v56;
  size_t v57;
  const void *v58;
  size_t v59;
  const void *v60;
  size_t v61;
  _BOOL4 v62;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(a1, a2, a3, a4, a6);
  v11 = *a5;
  v12 = *a4;
  v13 = *(_QWORD *)(*(_QWORD *)a6 + 32);
  v14 = v13 + 8;
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 8 + 8 * v11) + 40);
  v16 = *(_QWORD *)(*(_QWORD *)(v13 + 8 + 8 * v12) + 40);
  v17 = *(char *)(v16 + 23);
  v18 = *(char *)(v15 + 23);
  if (v18 >= 0)
    v19 = *(unsigned __int8 *)(v15 + 23);
  else
    v19 = *(_QWORD *)(v15 + 8);
  if (v18 >= 0)
    v20 = *(const void **)(*(_QWORD *)(v13 + 8 + 8 * v11) + 40);
  else
    v20 = *(const void **)v15;
  if (v17 >= 0)
    v21 = *(unsigned __int8 *)(v16 + 23);
  else
    v21 = *(_QWORD *)(v16 + 8);
  if (v17 >= 0)
    v22 = *(const void **)(*(_QWORD *)(v13 + 8 + 8 * v12) + 40);
  else
    v22 = *(const void **)v16;
  if (v21 >= v19)
    v23 = v19;
  else
    v23 = v21;
  result = memcmp(v20, v22, v23);
  v25 = v19 < v21;
  if ((_DWORD)result)
    v25 = (int)result < 0;
  if (v25)
  {
    *a4 = v11;
    *a5 = v12;
    v26 = *a4;
    v27 = *a3;
    v28 = *(_QWORD *)(*(_QWORD *)(v14 + 8 * v26) + 40);
    v29 = *(const void ***)(*(_QWORD *)(v14 + 8 * v27) + 40);
    v30 = *((char *)v29 + 23);
    v31 = *(char *)(v28 + 23);
    if (v31 >= 0)
      v32 = *(unsigned __int8 *)(v28 + 23);
    else
      v32 = *(_QWORD *)(v28 + 8);
    if (v31 >= 0)
      v33 = *(const void **)(*(_QWORD *)(v14 + 8 * v26) + 40);
    else
      v33 = *(const void **)v28;
    if (v30 >= 0)
      v34 = *((unsigned __int8 *)v29 + 23);
    else
      v34 = (size_t)v29[1];
    if (v30 >= 0)
      v35 = v29;
    else
      v35 = *v29;
    if (v34 >= v32)
      v36 = v32;
    else
      v36 = v34;
    result = memcmp(v33, v35, v36);
    v37 = v32 < v34;
    if ((_DWORD)result)
      v37 = (int)result < 0;
    if (v37)
    {
      *a3 = v26;
      *a4 = v27;
      v38 = *a3;
      v39 = *a2;
      v40 = v13 + 8;
      v41 = *(_QWORD *)(*(_QWORD *)(v13 + 8 + 8 * v38) + 40);
      v42 = *(const void ***)(*(_QWORD *)(v13 + 8 + 8 * v39) + 40);
      v43 = *((char *)v42 + 23);
      v44 = *(char *)(v41 + 23);
      if (v44 >= 0)
        v45 = *(unsigned __int8 *)(v41 + 23);
      else
        v45 = *(_QWORD *)(v41 + 8);
      if (v44 >= 0)
        v46 = *(const void **)(*(_QWORD *)(v13 + 8 + 8 * v38) + 40);
      else
        v46 = *(const void **)v41;
      if (v43 >= 0)
        v47 = *((unsigned __int8 *)v42 + 23);
      else
        v47 = (size_t)v42[1];
      if (v43 >= 0)
        v48 = v42;
      else
        v48 = *v42;
      if (v47 >= v45)
        v49 = v45;
      else
        v49 = v47;
      result = memcmp(v46, v48, v49);
      v50 = v45 < v47;
      if ((_DWORD)result)
        v50 = (int)result < 0;
      if (v50)
      {
        *a2 = v38;
        *a3 = v39;
        v51 = *a2;
        v52 = *a1;
        v53 = *(_QWORD *)(*(_QWORD *)(v40 + 8 * v51) + 40);
        v54 = *(const void ***)(*(_QWORD *)(v40 + 8 * v52) + 40);
        v55 = *((char *)v54 + 23);
        v56 = *(char *)(v53 + 23);
        if (v56 >= 0)
          v57 = *(unsigned __int8 *)(v53 + 23);
        else
          v57 = *(_QWORD *)(v53 + 8);
        if (v56 >= 0)
          v58 = *(const void **)(*(_QWORD *)(v40 + 8 * v51) + 40);
        else
          v58 = *(const void **)v53;
        if (v55 >= 0)
          v59 = *((unsigned __int8 *)v54 + 23);
        else
          v59 = (size_t)v54[1];
        if (v55 >= 0)
          v60 = v54;
        else
          v60 = *v54;
        if (v59 >= v57)
          v61 = v57;
        else
          v61 = v59;
        result = memcmp(v58, v60, v61);
        v62 = v57 < v59;
        if ((_DWORD)result)
          v62 = (int)result < 0;
        if (v62)
        {
          *a1 = v51;
          *a2 = v52;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  int v11;
  int v12;
  size_t v13;
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  const void **v21;
  int v22;
  size_t v23;
  const void *v24;
  size_t v25;
  uint64_t result;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void **v31;
  int v32;
  int v33;
  size_t v34;
  const void *v35;
  size_t v36;
  const void *v37;
  size_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  size_t v44;
  const void *v45;
  size_t v46;
  const void *v47;
  size_t v48;
  _BOOL4 v49;
  uint64_t v50;

  v7 = *a2;
  v8 = a4 + 8;
  v50 = *a1;
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 8 + 8 * v7) + 40);
  v10 = *(const void ***)(*(_QWORD *)(a4 + 8 + 8 * v50) + 40);
  v11 = *((char *)v10 + 23);
  v12 = *(char *)(v9 + 23);
  if (v12 >= 0)
    v13 = *(unsigned __int8 *)(v9 + 23);
  else
    v13 = *(_QWORD *)(v9 + 8);
  if (v12 >= 0)
    v14 = *(const void **)(*(_QWORD *)(a4 + 8 + 8 * v7) + 40);
  else
    v14 = *(const void **)v9;
  if (v11 >= 0)
    v15 = *((unsigned __int8 *)v10 + 23);
  else
    v15 = (size_t)v10[1];
  if (v11 >= 0)
    v16 = *(const void **)(*(_QWORD *)(a4 + 8 + 8 * v50) + 40);
  else
    v16 = *v10;
  if (v15 >= v13)
    v17 = v13;
  else
    v17 = v15;
  v18 = memcmp(v14, v16, v17);
  if (v18)
    v19 = v18 < 0;
  else
    v19 = v13 < v15;
  v20 = *a3;
  v21 = *(const void ***)(*(_QWORD *)(v8 + 8 * v20) + 40);
  v22 = *((char *)v21 + 23);
  if (v22 >= 0)
    v23 = *((unsigned __int8 *)v21 + 23);
  else
    v23 = (size_t)v21[1];
  if (v22 >= 0)
    v24 = v21;
  else
    v24 = *v21;
  if (v13 >= v23)
    v25 = v23;
  else
    v25 = v13;
  result = memcmp(v24, v14, v25);
  v27 = v23 < v13;
  if ((_DWORD)result)
    v27 = (int)result < 0;
  if (v19)
  {
    if (v27)
    {
      *a1 = v20;
      *a3 = v50;
    }
    else
    {
      *a1 = v7;
      *a2 = v50;
      v40 = *a3;
      v41 = *(_QWORD *)(*(_QWORD *)(a4 + 8 * v40 + 8) + 40);
      v42 = *((char *)v10 + 23);
      v43 = *(char *)(v41 + 23);
      if (v43 >= 0)
        v44 = *(unsigned __int8 *)(v41 + 23);
      else
        v44 = *(_QWORD *)(v41 + 8);
      if (v43 >= 0)
        v45 = *(const void **)(*(_QWORD *)(a4 + 8 * v40 + 8) + 40);
      else
        v45 = *(const void **)v41;
      if (v42 >= 0)
        v46 = *((unsigned __int8 *)v10 + 23);
      else
        v46 = (size_t)v10[1];
      if (v42 >= 0)
        v47 = v10;
      else
        v47 = *v10;
      if (v46 >= v44)
        v48 = v44;
      else
        v48 = v46;
      result = memcmp(v45, v47, v48);
      v49 = v44 < v46;
      if ((_DWORD)result)
        v49 = (int)result < 0;
      if (v49)
      {
        *a2 = v40;
        *a3 = v50;
      }
    }
  }
  else if (v27)
  {
    *a2 = v20;
    *a3 = v7;
    v28 = *a2;
    v29 = *a1;
    v30 = *(_QWORD *)(*(_QWORD *)(a4 + 8 + 8 * v28) + 40);
    v31 = *(const void ***)(*(_QWORD *)(a4 + 8 + 8 * v29) + 40);
    v32 = *((char *)v31 + 23);
    v33 = *(char *)(v30 + 23);
    if (v33 >= 0)
      v34 = *(unsigned __int8 *)(v30 + 23);
    else
      v34 = *(_QWORD *)(v30 + 8);
    if (v33 >= 0)
      v35 = *(const void **)(*(_QWORD *)(a4 + 8 + 8 * v28) + 40);
    else
      v35 = *(const void **)v30;
    if (v32 >= 0)
      v36 = *((unsigned __int8 *)v31 + 23);
    else
      v36 = (size_t)v31[1];
    if (v32 >= 0)
      v37 = v31;
    else
      v37 = *v31;
    if (v36 >= v34)
      v38 = v34;
    else
      v38 = v36;
    result = memcmp(v35, v37, v38);
    v39 = v34 < v36;
    if ((_DWORD)result)
      v39 = (int)result < 0;
    if (v39)
    {
      *a1 = v28;
      *a2 = v29;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  const void **v12;
  int v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;
  int *v22;
  int *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  const void **v29;
  uint64_t v30;
  int v31;
  int v32;
  size_t v33;
  const void *v34;
  size_t v35;
  const void *v36;
  size_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  size_t v45;
  const void *v46;
  size_t v47;
  const void *v48;
  size_t v49;
  int v50;
  BOOL v51;
  int *v52;
  uint64_t v53;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 32) + 8;
      v11 = *(const void ***)(*(_QWORD *)(v10 + 8 * v8) + 40);
      v12 = *(const void ***)(*(_QWORD *)(v10 + 8 * v9) + 40);
      v13 = *((char *)v12 + 23);
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = *((unsigned __int8 *)v11 + 23);
      else
        v15 = (size_t)v11[1];
      if (v14 >= 0)
        v16 = v11;
      else
        v16 = *v11;
      if (v13 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = (size_t)v12[1];
      if (v13 >= 0)
        v18 = v12;
      else
        v18 = *v12;
      if (v17 >= v15)
        v19 = v15;
      else
        v19 = v17;
      v20 = memcmp(v16, v18, v19);
      v21 = v15 < v17;
      if (v20)
        v21 = v20 < 0;
      if (v21)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v22 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 32));
      v23 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v24 = 0;
      v25 = *(_QWORD *)(*(_QWORD *)a3 + 32);
      v26 = 12;
      v52 = a2;
      break;
  }
  while (1)
  {
    v28 = *v22;
    v53 = *v23;
    v29 = *(const void ***)(*(_QWORD *)(v25 + 8 + 8 * v53) + 40);
    v30 = *(_QWORD *)(*(_QWORD *)(v25 + 8 + 8 * v28) + 40);
    v31 = *(char *)(v30 + 23);
    v32 = *((char *)v29 + 23);
    if (v32 >= 0)
      v33 = *((unsigned __int8 *)v29 + 23);
    else
      v33 = (size_t)v29[1];
    if (v32 >= 0)
      v34 = *(const void **)(*(_QWORD *)(v25 + 8 + 8 * v53) + 40);
    else
      v34 = *v29;
    if (v31 >= 0)
      v35 = *(unsigned __int8 *)(v30 + 23);
    else
      v35 = *(_QWORD *)(v30 + 8);
    if (v31 >= 0)
      v36 = *(const void **)(*(_QWORD *)(v25 + 8 + 8 * v28) + 40);
    else
      v36 = *(const void **)v30;
    if (v35 >= v33)
      v37 = v33;
    else
      v37 = v35;
    v38 = memcmp(v34, v36, v37);
    v39 = v33 < v35;
    if (v38)
      v39 = v38 < 0;
    if (v39)
      break;
    v27 = v52;
LABEL_24:
    v22 = v23;
    v26 += 4;
    if (++v23 == v27)
      return 1;
  }
  v40 = v26;
  while (1)
  {
    *(int *)((char *)a1 + v40) = v28;
    v41 = v40 - 4;
    if (v40 == 4)
      break;
    v28 = *(int *)((char *)a1 + v40 - 8);
    v42 = *(_QWORD *)(*(_QWORD *)(v25 + 8 * v28 + 8) + 40);
    v43 = *(char *)(v42 + 23);
    v44 = *((char *)v29 + 23);
    if (v44 >= 0)
      v45 = *((unsigned __int8 *)v29 + 23);
    else
      v45 = (size_t)v29[1];
    if (v44 >= 0)
      v46 = v29;
    else
      v46 = *v29;
    if (v43 >= 0)
      v47 = *(unsigned __int8 *)(v42 + 23);
    else
      v47 = *(_QWORD *)(v42 + 8);
    if (v43 >= 0)
      v48 = *(const void **)(*(_QWORD *)(v25 + 8 * v28 + 8) + 40);
    else
      v48 = *(const void **)v42;
    if (v47 >= v45)
      v49 = v45;
    else
      v49 = v47;
    v50 = memcmp(v46, v48, v49);
    v51 = v50 < 0;
    if (!v50)
      v51 = v45 < v47;
    v40 = v41;
    if (!v51)
    {
      v27 = v52;
      *(int *)((char *)a1 + v41) = v53;
      if (++v24 != 8)
        goto LABEL_24;
      return v23 + 1 == v27;
    }
  }
  v27 = v52;
  *a1 = v53;
  if (++v24 != 8)
    goto LABEL_24;
  return v23 + 1 == v27;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  uint64_t result;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  const void **v28;
  int v29;
  int v30;
  size_t v31;
  const void *v32;
  size_t v33;
  const void *v34;
  size_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  const void **v39;
  const void **v40;
  int v41;
  int v42;
  size_t v43;
  const void *v44;
  size_t v45;
  const void *v46;
  size_t v47;
  _BOOL4 v48;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_0 &,int *>(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a5 + 32));
  v10 = *a4;
  v11 = *a3;
  v12 = *(_QWORD *)(*(_QWORD *)a5 + 32);
  v13 = v12 + 8;
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 8 + 8 * v10) + 40);
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 8 + 8 * v11) + 40);
  v16 = *(char *)(v15 + 23);
  v17 = *(char *)(v14 + 23);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = *(_QWORD *)(v14 + 8);
  if (v17 >= 0)
    v19 = *(const void **)(*(_QWORD *)(v12 + 8 + 8 * v10) + 40);
  else
    v19 = *(const void **)v14;
  if (v16 >= 0)
    v20 = *(unsigned __int8 *)(v15 + 23);
  else
    v20 = *(_QWORD *)(v15 + 8);
  if (v16 >= 0)
    v21 = *(const void **)(*(_QWORD *)(v12 + 8 + 8 * v11) + 40);
  else
    v21 = *(const void **)v15;
  if (v20 >= v18)
    v22 = v18;
  else
    v22 = v20;
  result = memcmp(v19, v21, v22);
  v24 = v18 < v20;
  if ((_DWORD)result)
    v24 = (int)result < 0;
  if (v24)
  {
    *a3 = v10;
    *a4 = v11;
    v25 = *a3;
    v26 = *a2;
    v27 = *(const void ***)(*(_QWORD *)(v13 + 8 * v25) + 40);
    v28 = *(const void ***)(*(_QWORD *)(v13 + 8 * v26) + 40);
    v29 = *((char *)v28 + 23);
    v30 = *((char *)v27 + 23);
    if (v30 >= 0)
      v31 = *((unsigned __int8 *)v27 + 23);
    else
      v31 = (size_t)v27[1];
    if (v30 >= 0)
      v32 = v27;
    else
      v32 = *v27;
    if (v29 >= 0)
      v33 = *((unsigned __int8 *)v28 + 23);
    else
      v33 = (size_t)v28[1];
    if (v29 >= 0)
      v34 = v28;
    else
      v34 = *v28;
    if (v33 >= v31)
      v35 = v31;
    else
      v35 = v33;
    result = memcmp(v32, v34, v35);
    v36 = v31 < v33;
    if ((_DWORD)result)
      v36 = (int)result < 0;
    if (v36)
    {
      *a2 = v25;
      *a3 = v26;
      v37 = *a2;
      v38 = *a1;
      v39 = *(const void ***)(*(_QWORD *)(v12 + 8 + 8 * v37) + 40);
      v40 = *(const void ***)(*(_QWORD *)(v12 + 8 + 8 * v38) + 40);
      v41 = *((char *)v40 + 23);
      v42 = *((char *)v39 + 23);
      if (v42 >= 0)
        v43 = *((unsigned __int8 *)v39 + 23);
      else
        v43 = (size_t)v39[1];
      if (v42 >= 0)
        v44 = v39;
      else
        v44 = *v39;
      if (v41 >= 0)
        v45 = *((unsigned __int8 *)v40 + 23);
      else
        v45 = (size_t)v40[1];
      if (v41 >= 0)
        v46 = v40;
      else
        v46 = *v40;
      if (v45 >= v43)
        v47 = v43;
      else
        v47 = v45;
      result = memcmp(v44, v46, v47);
      v48 = v43 < v45;
      if ((_DWORD)result)
        v48 = (int)result < 0;
      if (v48)
      {
        *a1 = v37;
        *a2 = v38;
      }
    }
  }
  return result;
}

_QWORD *std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F9845A0;
  v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[27];
  if (v3)
  {
    a1[28] = v3;
    operator delete(v3);
  }
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(a1 + 9));
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_11;
  }
  if (v5)
  {
    v6 = 5;
LABEL_11:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24F9845A0;
  v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[27];
  if (v3)
  {
    a1[28] = v3;
    operator delete(v3);
  }
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(a1 + 9));
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
  }
  else
  {
    if (!v5)
      goto LABEL_12;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x108uLL);
  *v2 = &off_24F9845A0;
  std::__compressed_pair_elem<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_22DAF6C30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F9845A0;
  return std::__compressed_pair_elem<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1 const&,0ul>(a2 + 1, (_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  uint64_t result;

  v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[27];
  if (v3)
  {
    a1[28] = v3;
    operator delete(v3);
  }
  v4 = a1 + 1;
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(a1 + 9));
  v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  result = a1[4];
  if ((_QWORD *)result == v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 32))(a1 + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::destroy_deallocate(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[27];
  if (v3)
  {
    a1[28] = v3;
    operator delete(v3);
  }
  operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)(a1 + 9));
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_11;
  }
  if (v5)
  {
    v6 = 5;
LABEL_11:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  operator delete(a1);
}

uint64_t std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  std::string *v27;
  std::string::size_type size;
  _QWORD *v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  operations_research::sat::IntegerTrail *v36;
  char *v37;
  int *v38;
  int *v39;
  operations_research::sat::IntegerTrail *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  operations_research::sat::IntegerTrail *v51;
  uint64_t v52;
  int v53;
  std::string::size_type v54;
  std::string::size_type v55;
  _BYTE *v56;
  char *v57;
  _BYTE *v58;
  char *v59;
  _BYTE *v60;
  char *v61;
  _BYTE *v62;
  uint64_t *v63;
  google::LogMessage *v64;
  _QWORD *v65;
  std::string *p_p;
  std::string::size_type v67;
  uint64_t v69;
  int *v70;
  std::string __p;
  _BYTE *v73;
  uint64_t v74;
  _BYTE v75[32];
  __int128 v76;
  _BYTE v77[32];
  const char *v78;
  uint64_t v79;
  _BYTE v80[32];
  _BYTE *v81;
  uint64_t v82;
  _BYTE v83[32];
  std::string v84;
  uint64_t v85;
  __int128 v86;
  const char *v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v1 = a1[4];
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  v4 = v2;
  if ((_DWORD)v2 != -1)
  {
    v5 = a1[5];
    v6 = *(_QWORD **)(v5 + 32);
    if (!v6)
      goto LABEL_14;
    v7 = (_QWORD *)(v5 + 32);
    v8 = *(_QWORD **)(v5 + 32);
    do
    {
      v9 = v8[4];
      v10 = v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
      if (v9 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        v11 = v8;
      else
        v11 = v8 + 1;
      if (v10)
        v7 = v8;
      v8 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v7 != (_QWORD *)(v5 + 32)
      && v7[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
    {
      v12 = (_QWORD *)v7[5];
    }
    else
    {
LABEL_14:
      v12 = 0;
    }
    v13 = v12[14];
    v14 = (unint64_t)(v12[15] - v13) >> 5;
    v15 = v12 + 7;
    v16 = (unint64_t *)(v13 + 32 * (int)v2);
    if ((int)v2 >= (int)v14)
      v17 = v15;
    else
      v17 = v16;
    v20 = *v17;
    v19 = (const char *)(v17 + 1);
    v18 = v20;
    if ((v20 & 1) != 0)
      v19 = *(const char **)v19;
    if (v18 >= 2)
    {
      v21 = &v19[12 * (v18 >> 1)];
      do
      {
        v22 = *(const char **)v19;
        v23 = *((_DWORD *)v19 + 2);
        google::LogMessage::LogMessage((google::LogMessage *)&v81, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 255);
        v24 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v81);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"decision ", 9);
        v78 = v22;
        LODWORD(v79) = v23;
        operations_research::sat::IntegerLiteral::DebugString((operations_research::sat::IntegerLiteral *)&v78, v26, &v84);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v84;
        else
          v27 = (std::string *)v84.__r_.__value_.__r.__words[0];
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        else
          size = v84.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, size);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        google::LogMessage::~LogMessage((google::LogMessage *)&v81);
        v19 += 12;
      }
      while (v19 != v21);
      v5 = a1[5];
      v6 = *(_QWORD **)(v5 + 32);
    }
    v29 = (_QWORD *)(v5 + 32);
    do
    {
      v30 = v6[4];
      v31 = v30 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
      if (v30 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
        v32 = v6;
      else
        v32 = v6 + 1;
      if (v31)
        v29 = v6;
      v6 = (_QWORD *)*v32;
    }
    while (*v32);
    v33 = (*(_DWORD *)(v29[5] + 8) >> 1) & 0x7FFFFFF;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)"Diff since last call, level=";
    v84.__r_.__value_.__l.__size_ = 28;
    v34 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v33, v83, v3);
    v81 = v83;
    v82 = v34 - v83;
    v78 = "\n";
    v79 = 1;
    absl::lts_2020_02_25::StrCat((uint64_t)&v84, (uint64_t)&v81, (uint64_t)&v78, &__p);
    v69 = v4;
    v35 = a1;
    v36 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a1[5]);
    v39 = (int *)a1[30];
    v38 = (int *)a1[31];
    if (v39 != v38)
    {
      v40 = v36;
      v41 = a1[27];
      v70 = (int *)a1[31];
      do
      {
        v42 = *v39;
        v43 = *(_DWORD *)(v35[6] + 4 * v42);
        v44 = *((_QWORD *)v40 + 5);
        v45 = *(_QWORD *)(v44 + 12 * v43);
        v46 = -*(_QWORD *)(v44 + 12 * (v43 ^ 1));
        v47 = (uint64_t *)(v41 + 16 * v42);
        v48 = *v47;
        v49 = v47[1];
        if (v45 != v48 || v49 != v46)
        {
          v51 = v40;
          v52 = *(_QWORD *)(*(_QWORD *)(v35[13] + 8 * v42 + 8) + 40);
          v53 = *(char *)(v52 + 23);
          if (v53 >= 0)
            v54 = *(_QWORD *)(*(_QWORD *)(v35[13] + 8 * v42 + 8) + 40);
          else
            v54 = *(_QWORD *)v52;
          if (v53 >= 0)
            v55 = *(unsigned __int8 *)(v52 + 23);
          else
            v55 = *(_QWORD *)(v52 + 8);
          v56 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v48, v77, v37);
          *(_QWORD *)&v76 = v77;
          *((_QWORD *)&v76 + 1) = v56 - v77;
          v58 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(_QWORD *)(v35[27] + 16 * v42 + 8), v75, v57);
          v73 = v75;
          v74 = v58 - v75;
          v84.__r_.__value_.__r.__words[0] = v54;
          v84.__r_.__value_.__l.__size_ = v55;
          v84.__r_.__value_.__r.__words[2] = (std::string::size_type)" [";
          v85 = 2;
          v86 = v76;
          v87 = ",";
          v88 = 1;
          v89 = v75;
          v90 = v58 - v75;
          v91 = "] -> [";
          v92 = 6;
          v60 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v45, v83, v59);
          v81 = v83;
          v82 = v60 - v83;
          v93 = v83;
          v94 = v60 - v83;
          v95 = ",";
          v96 = 1;
          v62 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v46, v80, v61);
          v78 = v80;
          v79 = v62 - v80;
          v97 = v80;
          v98 = v62 - v80;
          v99 = "]\n";
          v100 = 2;
          absl::lts_2020_02_25::strings_internal::AppendPieces(&__p, &v84, 10);
          v35 = a1;
          v41 = a1[27];
          v63 = (uint64_t *)(v41 + 16 * v42);
          *v63 = v45;
          v63[1] = v46;
          v40 = v51;
          v38 = v70;
        }
        ++v39;
      }
      while (v39 != v38);
    }
    v64 = google::LogMessage::LogMessage((google::LogMessage *)&v84, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_search.cc", 274);
    v65 = (_QWORD *)google::LogMessage::stream(v64);
    v4 = v69;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v67 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)p_p, v67);
    google::LogMessage::~LogMessage((google::LogMessage *)&v84);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_22DAF720C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat24InstrumentSearchStrategyERKNS0_12CpModelProtoERKNSt3__16vectorIN3gtl7I"
                     "ntTypeINS0_20IntegerVariable_tag_EiEENS4_9allocatorIS9_EEEERKNS4_8functionIFNS7_INS0_17LiteralIndex"
                     "_tag_EiEEvEEEPNS0_5ModelEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat24InstrumentSearchStrategyERKNS0_12CpModelProtoERKNSt3__16vec"
                                "torIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_9allocatorIS9_EEEERKNS4_8functionIFN"
                                "S7_INS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat24InstrumentSearchStrategyERKNS0_12CpModelProtoERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_9allocatorIS9_EEEERKNS4_8functionIFNS7_INS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat24InstrumentSearchStrategyERKNS0_12CpModelProtoERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS4_9allocatorIS9_EEEERKNS4_8functionIFNS7_INS0_17LiteralIndex_tag_EiEEvEEEPNS0_5ModelEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,std::allocator<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::InstrumentSearchStrategy(operations_research::sat::CpModelProto const&,std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::function<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> ()(void)> const&,operations_research::sat::Model *)::$_1 const&,0ul>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], a1);
    }
    else
    {
      a1[3] = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    a1[3] = 0;
  }
  v5 = a2[4];
  a1[5] = 0;
  a1[4] = v5;
  a1[6] = 0;
  a1[7] = 0;
  v7 = (_BYTE *)a2[5];
  v6 = (_BYTE *)a2[6];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - v7);
    a1[5] = v9;
    a1[6] = v9;
    v10 = &v9[4 * (v8 >> 2)];
    a1[7] = v10;
    memcpy(v9, v7, v8);
    a1[6] = v10;
  }
  operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)(a1 + 8), (const operations_research::sat::CpModelProto *)(a2 + 8));
  a1[26] = 0;
  a1[27] = 0;
  a1[28] = 0;
  v12 = (_BYTE *)a2[26];
  v11 = (_BYTE *)a2[27];
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    a1[26] = v14;
    a1[27] = v14;
    a1[28] = &v14[16 * (v13 >> 4)];
    v15 = v13 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v14, v12, v15);
    a1[27] = &v14[v15];
  }
  a1[29] = 0;
  a1[30] = 0;
  a1[31] = 0;
  v17 = (_BYTE *)a2[29];
  v16 = (_BYTE *)a2[30];
  v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v19 = (char *)operator new(v16 - v17);
    a1[29] = v19;
    a1[30] = v19;
    v20 = &v19[4 * (v18 >> 2)];
    a1[31] = v20;
    memcpy(v19, v17, v18);
    a1[30] = v20;
  }
  return a1;
}

void sub_22DAF748C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *v2;
  if (*v2)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)v1[3];
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_8;
    v6 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_8:
  _Unwind_Resume(exception_object);
}

void operations_research::sat::IntegerLiteral::DebugString(operations_research::sat::IntegerLiteral *this@<X0>, char *a2@<X2>, std::string *a3@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  char *v10;
  _QWORD v11[2];
  _BYTE v12[32];
  const char *v13;
  uint64_t v14;
  _BYTE *v15;
  int64_t v16;
  _BYTE v17[32];
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)this;
  if (*(int *)this >= 0)
    v6 = *(_DWORD *)this;
  else
    v6 = v5 + 1;
  v7 = (v6 >> 1);
  if ((v5 & 1) != 0)
  {
    v18 = "I";
    v19 = 1;
    v15 = v17;
    v16 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v7, v17, a2) - v17;
    v13 = "<=";
    v14 = 2;
    v9 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(-*(_QWORD *)((char *)this + 4), v12, v10);
  }
  else
  {
    v18 = "I";
    v19 = 1;
    v15 = v17;
    v16 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v7, v17, a2) - v17;
    v13 = ">=";
    v14 = 2;
    v9 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(_QWORD *)((char *)this + 4), v12, v8);
  }
  v11[0] = v12;
  v11[1] = v9 - v12;
  absl::lts_2020_02_25::StrCat((uint64_t)&v18, (uint64_t)&v15, (uint64_t)&v13, (uint64_t)v11, a3);
}

uint64_t OUTLINED_FUNCTION_0_6(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_2_2(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 24) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_4_0(void *__p)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = v1;
  operator delete(__p);
}

void operations_research::sat::CpModelStats(operations_research::sat *this@<X0>, std::string *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  int v14;
  int v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t **v31;
  void **v32;
  _QWORD *v33;
  char *v34;
  uint64_t *v35;
  std::string *v36;
  BOOL v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  std::string::size_type v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string::size_type size;
  std::string *v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  std::string::size_type v58;
  std::string *v59;
  const char *v60;
  char *v61;
  absl::lts_2020_02_25::numbers_internal *v62;
  uint64_t **v63;
  _BYTE *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  uint64_t *v69;
  uint64_t **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t **v78;
  _BYTE *v79;
  char *v80;
  _BYTE *v81;
  char *v82;
  _BYTE *v83;
  char *v84;
  _BYTE *v85;
  std::string::value_type *v86;
  int64_t v87;
  uint64_t *v88;
  std::string::size_type v89;
  const std::string::value_type *v90;
  char *v91;
  _BYTE *v92;
  uint64_t *v93;
  uint64_t **v94;
  unsigned int v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  std::string::size_type v99;
  std::string *v100;
  char *v101;
  uint64_t *v102;
  std::string::size_type v103;
  std::string::size_type v104;
  _BYTE *v105;
  std::vector<std::string>::pointer end;
  __int128 v107;
  char *v108;
  int v109;
  size_t v110;
  const void *v111;
  char **v112;
  char *v113;
  char **v114;
  char *v115;
  char *v116;
  int v117;
  size_t v118;
  char *v119;
  size_t v120;
  int v121;
  _BOOL4 v122;
  char **v123;
  char *v124;
  BOOL v125;
  _QWORD *v126;
  size_t v127;
  size_t v128;
  char *v129;
  size_t v130;
  char *v131;
  size_t v132;
  int v133;
  _BOOL4 v134;
  std::vector<std::string>::pointer v135;
  uint64_t **v136;
  char *v137;
  _BYTE *v138;
  char *v139;
  int v140;
  size_t v141;
  uint64_t *v142;
  char **v143;
  char *v144;
  char **v145;
  char *v146;
  char *v147;
  int v148;
  size_t v149;
  char *v150;
  size_t v151;
  int v152;
  _BOOL4 v153;
  char **v154;
  char *v155;
  BOOL v156;
  _QWORD *v157;
  size_t v158;
  size_t v159;
  char *v160;
  size_t v161;
  char *v162;
  size_t v163;
  int v164;
  _BOOL4 v165;
  std::vector<std::string>::pointer v166;
  uint64_t **v167;
  char *v168;
  _BYTE *v169;
  char *v170;
  char **v171;
  unint64_t v172;
  uint64_t v173;
  std::string::size_type v174;
  std::string *v175;
  std::string *begin;
  std::vector<std::string>::pointer v177;
  std::vector<std::string>::pointer v178;
  std::string v181;
  std::string v182;
  uint64_t **v183;
  uint64_t *v184;
  absl::lts_2020_02_25::numbers_internal *v185;
  uint64_t **v186;
  uint64_t *v187;
  uint64_t v188;
  char **v189;
  char *v190[2];
  char **v191;
  char *v192[2];
  char **v193;
  char *v194;
  std::vector<std::string>::size_type __n;
  std::vector<std::string> v196;
  std::string __p[2];
  std::string v198[2];
  std::string v199;
  char *v200;
  std::string v201;
  const char *v202;
  uint64_t v203;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string::size_type v205;
  const char *v206;
  uint64_t v207;
  std::string *v208;
  std::string::size_type v209;
  const char *v210;
  uint64_t v211;
  std::string::value_type *v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;

  v216 = *MEMORY[0x24BDAC8D0];
  v194 = 0;
  __n = 0;
  v192[1] = 0;
  v193 = &v194;
  v191 = v192;
  v192[0] = 0;
  v190[0] = 0;
  v190[1] = 0;
  v189 = v190;
  v4 = *((_QWORD *)this + 7);
  if (v4)
    v5 = (uint64_t *)(v4 + 8);
  else
    v5 = 0;
  v6 = *((int *)this + 12);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      operations_research::sat::ConstraintCaseName(*(_DWORD *)(*v5 + 60));
      if (*(_DWORD *)(v8 + 60) == 12)
        break;
LABEL_22:
      v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
      v12 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v193, (const void **)&v200, (uint64_t)&std::piecewise_construct, (__int128 **)&v199);
      ++*((_DWORD *)v12 + 14);
      if (*(_DWORD *)(v8 + 16))
      {
        v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
        v13 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v191, (const void **)&v200, (uint64_t)&std::piecewise_construct, (__int128 **)&v199);
        ++*((_DWORD *)v13 + 14);
      }
      v14 = *(_DWORD *)(v8 + 60);
      if (v14 == 26 || v14 == 4 || v14 == 3)
      {
        v15 = *(_DWORD *)(*(_QWORD *)(v8 + 48) + 16);
        v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
        v16 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v189, (const void **)&v200, (uint64_t)&std::piecewise_construct, (__int128 **)&v199);
        *((_DWORD *)v16 + 14) += v15;
      }
      if (v201.__r_.__value_.__s.__data_[15] < 0)
        operator delete(v200);
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_30;
    }
    if (*(_DWORD *)(*(_QWORD *)(v8 + 48) + 16) == 1
      && (std::string::append((std::string *)&v200, "1"), v9 = *(_DWORD *)(v8 + 60), v9 != 12))
    {
      if ((_DWORD)qword_25408AC60 == 2)
      {
LABEL_11:
        std::string::append((std::string *)&v200, "2");
        v9 = *(_DWORD *)(v8 + 60);
        v10 = &operations_research::sat::_LinearConstraintProto_default_instance_;
        if (v9 != 12)
          goto LABEL_16;
        goto LABEL_15;
      }
    }
    else
    {
      v9 = 12;
      if (*(_DWORD *)(*(_QWORD *)(v8 + 48) + 16) == 2)
        goto LABEL_11;
    }
    v10 = &operations_research::sat::_LinearConstraintProto_default_instance_;
    if (v9 != 12)
    {
LABEL_16:
      if (*((_DWORD *)v10 + 4) == 3)
      {
        std::string::append((std::string *)&v200, "3");
        v9 = *(_DWORD *)(v8 + 60);
      }
      v11 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      if (v9 == 12)
        v11 = *(uint64_t **)(v8 + 48);
      if (*((int *)v11 + 4) >= 4)
        std::string::append((std::string *)&v200, "N");
      goto LABEL_22;
    }
LABEL_15:
    v10 = *(uint64_t **)(v8 + 48);
    goto LABEL_16;
  }
LABEL_30:
  v187 = 0;
  v188 = 0;
  v185 = 0;
  v186 = &v187;
  v183 = &v184;
  v184 = 0;
  v17 = *((_QWORD *)this + 4);
  if (v17)
    v18 = v17 + 8;
  else
    v18 = 0;
  v19 = *((int *)this + 6);
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = v18 + 8 * v19;
    do
    {
      v22 = *(int *)(*(_QWORD *)v18 + 16);
      v23 = *(uint64_t **)(*(_QWORD *)v18 + 24);
      if ((_DWORD)v22 == 2 && (v24 = *v23, *v23 == v23[1]))
      {
        ++v20;
        v25 = v187;
        v26 = &v187;
        v27 = &v187;
        if (v187)
        {
          while (1)
          {
            while (1)
            {
              v27 = (uint64_t **)v25;
              v28 = v25[4];
              if (v24 >= v28)
                break;
              v25 = *v27;
              v26 = v27;
              if (!*v27)
                goto LABEL_46;
            }
            if (v28 >= v24)
              break;
            v25 = v27[1];
            if (!v25)
            {
              v26 = v27 + 1;
              goto LABEL_46;
            }
          }
        }
        else
        {
LABEL_46:
          v29 = (uint64_t *)operator new(0x28uLL);
          v29[4] = v24;
          *v29 = 0;
          v29[1] = 0;
          v29[2] = (uint64_t)v27;
          *v26 = v29;
          if (*v186)
          {
            v186 = (uint64_t **)*v186;
            v29 = *v26;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v187, v29);
          ++v188;
        }
      }
      else
      {
        operations_research::Domain::FromFlatSpanOfIntervals((uint64_t)v23, v22, (unint64_t *)&v200, a3);
        v30 = v184;
        v31 = &v184;
        v32 = (void **)&v184;
        if (!v184)
          goto LABEL_56;
        v32 = (void **)&v184;
        while (1)
        {
          while (1)
          {
            v31 = (uint64_t **)v30;
            v33 = v30 + 4;
            if (!operations_research::Domain::operator<(&v200, v30 + 4))
              break;
            v30 = *v31;
            v32 = (void **)v31;
            if (!*v31)
              goto LABEL_56;
          }
          if (!operations_research::Domain::operator<(v33, (uint64_t *)&v200))
            break;
          v32 = (void **)(v31 + 1);
          v30 = v31[1];
          if (!v30)
            goto LABEL_56;
        }
        v34 = (char *)*v32;
        if (!*v32)
        {
LABEL_56:
          v34 = (char *)operator new(0x40uLL);
          *((_QWORD *)v34 + 4) = v200;
          *(_OWORD *)(v34 + 40) = *(_OWORD *)&v201.__r_.__value_.__l.__data_;
          v200 = 0;
          *((_DWORD *)v34 + 14) = 0;
          *(_QWORD *)v34 = 0;
          *((_QWORD *)v34 + 1) = 0;
          *((_QWORD *)v34 + 2) = v31;
          *v32 = v34;
          v35 = (uint64_t *)v34;
          if (*v183)
          {
            v183 = (uint64_t **)*v183;
            v35 = (uint64_t *)*v32;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v184, v35);
          v185 = (absl::lts_2020_02_25::numbers_internal *)((char *)v185 + 1);
        }
        ++*((_DWORD *)v34 + 14);
        if ((v200 & 1) != 0)
          operator delete(v201.__r_.__value_.__l.__data_);
      }
      v18 += 8;
    }
    while (v18 != v21);
  }
  else
  {
    v20 = 0;
  }
  v36 = a2;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v37 = this == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_
     || *((_QWORD *)this + 15) == 0;
  if (v37)
  {
    v200 = "Satisfaction model '";
    v201.__r_.__value_.__r.__words[0] = 20;
    v38 = *((_QWORD *)this + 14);
    v39 = *(unsigned __int8 *)(v38 + 23);
    v40 = *(_QWORD *)(v38 + 8);
    if ((v39 & 0x80u) != 0)
    {
      v38 = *(_QWORD *)v38;
      v39 = v40;
    }
  }
  else
  {
    v200 = "Optimization model '";
    v201.__r_.__value_.__r.__words[0] = 20;
    v38 = *((_QWORD *)this + 14);
    v39 = *(unsigned __int8 *)(v38 + 23);
    v41 = *(_QWORD *)(v38 + 8);
    if ((v39 & 0x80u) != 0)
    {
      v38 = *(_QWORD *)v38;
      v39 = v41;
    }
  }
  v199.__r_.__value_.__r.__words[0] = v38;
  v199.__r_.__value_.__l.__size_ = v39;
  v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"':\n";
  v198[0].__r_.__value_.__l.__size_ = 3;
  absl::lts_2020_02_25::StrAppend(a2, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198);
  v43 = *((_QWORD *)this + 10);
  if (v43)
    v44 = (uint64_t *)(v43 + 8);
  else
    v44 = 0;
  v45 = *((int *)this + 18);
  if ((_DWORD)v45)
  {
    v46 = 8 * v45;
    while (1)
    {
      v47 = *v44;
      v48 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(unsigned int *)(*v44 + 16), &v199.__r_.__value_.__s.__data_[16], v42);
      v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
      v199.__r_.__value_.__l.__size_ = v48 - (_BYTE *)&v199.__r_.__value_.__r.__words[2];
      operations_research::ProtoEnumToString<operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy>((operations_research::sat *)*(unsigned int *)(v47 + 64), v198);
      v49 = HIBYTE(v198[0].__r_.__value_.__r.__words[2]);
      v50 = *(_OWORD *)&v198[0].__r_.__value_.__l.__data_;
      operations_research::ProtoEnumToString<operations_research::sat::DecisionStrategyProto_DomainReductionStrategy>((operations_research::sat *)*(unsigned int *)(v47 + 68), __p);
      v51 = v198;
      if ((v49 & 0x80u) == 0)
      {
        v52 = v49;
      }
      else
      {
        v52 = *((_QWORD *)&v50 + 1);
        v51 = (std::string *)v50;
      }
      v200 = "Search strategy: on ";
      v201.__r_.__value_.__r.__words[0] = 20;
      *(_OWORD *)&v201.__r_.__value_.__r.__words[1] = *(_OWORD *)&v199.__r_.__value_.__l.__data_;
      v202 = " variables, ";
      v203 = 12;
      p_end_cap = (std::__compressed_pair<std::string *> *)v51;
      v205 = v52;
      v206 = ", ";
      v207 = 2;
      size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      v54 = __p;
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        size = __p[0].__r_.__value_.__l.__size_;
        v54 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      v208 = v54;
      v209 = size;
      v210 = "\n";
      v211 = 1;
      v36 = a2;
      absl::lts_2020_02_25::strings_internal::AppendPieces(a2, &v200, 7);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if ((SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_78;
LABEL_86:
        operator delete(v198[0].__r_.__value_.__l.__data_);
        ++v44;
        v46 -= 8;
        if (!v46)
          break;
      }
      else
      {
        if (SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_86;
LABEL_78:
        ++v44;
        v46 -= 8;
        if (!v46)
          break;
      }
    }
  }
  if (this == (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_
    || (v55 = *((_QWORD *)this + 15)) == 0)
  {
    *((_BYTE *)&v182.__r_.__value_.__s + 23) = 0;
    v182.__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    v200 = " (";
    v201.__r_.__value_.__r.__words[0] = 2;
    v56 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*(unsigned int *)(v55 + 16), &v199.__r_.__value_.__s.__data_[16], v42);
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
    v199.__r_.__value_.__l.__size_ = v56 - (_BYTE *)&v199.__r_.__value_.__r.__words[2];
    v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)" in objective)";
    v198[0].__r_.__value_.__l.__size_ = 14;
    absl::lts_2020_02_25::StrCat((uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198, &v182);
  }
  v200 = "#Variables: ";
  v201.__r_.__value_.__r.__words[0] = 12;
  v57 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((unsigned int *)this + 6), &v199.__r_.__value_.__s.__data_[16], v42);
  v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
  v199.__r_.__value_.__l.__size_ = v57 - (_BYTE *)&v199.__r_.__value_.__r.__words[2];
  v58 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
  v59 = &v182;
  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v58 = v182.__r_.__value_.__l.__size_;
    v59 = (std::string *)v182.__r_.__value_.__r.__words[0];
  }
  v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
  v198[0].__r_.__value_.__l.__size_ = v58;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"\n";
  __p[0].__r_.__value_.__l.__size_ = 1;
  absl::lts_2020_02_25::StrAppend(v36, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198, (uint64_t)__p);
  v62 = v185;
  v63 = v183;
  if ((unint64_t)v185 > 0x63)
  {
    if (v183 == &v184)
    {
      v71 = 0;
      v73 = 0x7FFFFFFFFFFFFFFFLL;
      v72 = 0x8000000000000000;
    }
    else
    {
      v71 = 0;
      v72 = 0x8000000000000000;
      v73 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v74 = operations_research::Domain::Min((operations_research::Domain *)(v63 + 4), v60);
        if (v74 < v73)
          v73 = v74;
        v76 = operations_research::Domain::Max((operations_research::Domain *)(v63 + 4), v75);
        if (v72 <= v76)
          v72 = v76;
        if (v71 <= (int)((uint64_t)v63[4] >> 1))
          v71 = (int)((uint64_t)v63[4] >> 1);
        v77 = v63[1];
        if (v77)
        {
          do
          {
            v78 = (uint64_t **)v77;
            v77 = (uint64_t *)*v77;
          }
          while (v77);
        }
        else
        {
          do
          {
            v78 = (uint64_t **)v63[2];
            v37 = *v78 == (uint64_t *)v63;
            v63 = v78;
          }
          while (!v37);
        }
        v63 = v78;
      }
      while (v78 != &v184);
      v62 = v185;
    }
    v79 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((unint64_t)v62, &__p[0].__r_.__value_.__s.__data_[16], v61);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
    __p[0].__r_.__value_.__l.__size_ = v79 - (_BYTE *)&__p[0].__r_.__value_.__r.__words[2];
    v81 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v73, &v196.__end_cap_, v80);
    v196.__begin_ = (std::vector<std::string>::pointer)&v196.__end_cap_;
    v196.__end_ = (std::vector<std::string>::pointer)(v81 - (_BYTE *)&v196.__end_cap_);
    v200 = " - ";
    v201.__r_.__value_.__r.__words[0] = 3;
    *(_OWORD *)&v201.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    v202 = " different domains in [";
    v203 = 23;
    p_end_cap = &v196.__end_cap_;
    v205 = v81 - (_BYTE *)&v196.__end_cap_;
    v206 = ",";
    v207 = 1;
    v83 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v72, &v199.__r_.__value_.__s.__data_[16], v82);
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
    v199.__r_.__value_.__l.__size_ = v83 - (_BYTE *)&v199.__r_.__value_.__r.__words[2];
    v208 = (std::string *)&v199.__r_.__value_.__r.__words[2];
    v209 = v83 - (_BYTE *)&v199.__r_.__value_.__r.__words[2];
    v210 = "] with a largest complexity of ";
    v211 = 31;
    v85 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v71, &v198[0].__r_.__value_.__s.__data_[16], v84);
    v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v198[0].__r_.__value_.__r.__words[2];
    v198[0].__r_.__value_.__l.__size_ = v85 - (_BYTE *)&v198[0].__r_.__value_.__r.__words[2];
    v212 = &v198[0].__r_.__value_.__s.__data_[16];
    v213 = v85 - (_BYTE *)&v198[0].__r_.__value_.__r.__words[2];
    v214 = ".\n";
    v215 = 2;
    absl::lts_2020_02_25::strings_internal::AppendPieces(a2, &v200, 9);
  }
  else if (v183 != &v184)
  {
    do
    {
      v64 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((unsigned int *)v63 + 14), &v199.__r_.__value_.__s.__data_[16], v61);
      v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
      v199.__r_.__value_.__l.__size_ = v64 - (_BYTE *)&v199.__r_.__value_.__r.__words[2];
      operations_research::Domain::ToString((operations_research::Domain *)(v63 + 4), __p);
      v65 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = __p;
      else
        v66 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v65 = __p[0].__r_.__value_.__l.__size_;
      v200 = " - ";
      v201.__r_.__value_.__r.__words[0] = 3;
      *(_OWORD *)&v201.__r_.__value_.__r.__words[1] = *(_OWORD *)&v199.__r_.__value_.__l.__data_;
      v202 = " in ";
      v203 = 4;
      p_end_cap = (std::__compressed_pair<std::string *> *)v66;
      v205 = v65;
      v206 = "\n";
      v207 = 1;
      absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)&v200, 5, (char *)v198);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v67 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
      if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = &v199;
      else
        v68 = (std::string *)v199.__r_.__value_.__r.__words[0];
      if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v67 = v199.__r_.__value_.__l.__size_;
      v200 = (char *)v68;
      v201.__r_.__value_.__r.__words[0] = v67;
      absl::lts_2020_02_25::StrAppend((uint64_t)a2, (uint64_t)&v200);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v199.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_111:
          v69 = v63[1];
          if (v69)
            goto LABEL_115;
          goto LABEL_117;
        }
      }
      else if ((SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_111;
      }
      operator delete(v198[0].__r_.__value_.__l.__data_);
      v69 = v63[1];
      if (v69)
      {
        do
        {
LABEL_115:
          v70 = (uint64_t **)v69;
          v69 = (uint64_t *)*v69;
        }
        while (v69);
        goto LABEL_96;
      }
      do
      {
LABEL_117:
        v70 = (uint64_t **)v63[2];
        v37 = *v70 == (uint64_t *)v63;
        v63 = v70;
      }
      while (!v37);
LABEL_96:
      v63 = v70;
    }
    while (v70 != &v184);
  }
  if (v20 >= 1)
  {
    v86 = &v199.__r_.__value_.__s.__data_[16];
    v87 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v20, &v199.__r_.__value_.__s.__data_[16], v61)- (_BYTE *)&v199.__r_.__value_.__r.__words[2];
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
    v199.__r_.__value_.__l.__size_ = v87;
    v88 = (uint64_t *)v186;
    memset(__p, 0, 24);
    if (v186 == &v187)
    {
      v96 = 0;
      v97 = 0;
      v95 = 0;
    }
    else
    {
      v89 = 0;
      v90 = "";
      do
      {
        std::string::append(__p, v90, v89);
        v92 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v88[4], &v201.__r_.__value_.__s.__data_[8], v91);
        v200 = &v201.__r_.__value_.__s.__data_[8];
        v201.__r_.__value_.__r.__words[0] = v92 - (_BYTE *)&v201.__r_.__value_.__r.__words[1];
        absl::lts_2020_02_25::StrAppend((uint64_t)__p, (uint64_t)&v200);
        v93 = (uint64_t *)v88[1];
        if (v93)
        {
          do
          {
            v94 = (uint64_t **)v93;
            v93 = (uint64_t *)*v93;
          }
          while (v93);
        }
        else
        {
          do
          {
            v94 = (uint64_t **)v88[2];
            v37 = *v94 == v88;
            v88 = (uint64_t *)v94;
          }
          while (!v37);
        }
        v88 = (uint64_t *)v94;
        v90 = ",";
        v89 = 1;
      }
      while (v94 != &v187);
      v95 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      v96 = __p[0].__r_.__value_.__l.__size_;
      v97 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v87 = v199.__r_.__value_.__l.__size_;
      v86 = (std::string::value_type *)v199.__r_.__value_.__r.__words[0];
    }
    v200 = " - ";
    v201.__r_.__value_.__r.__words[0] = 3;
    if ((v95 & 0x80u) == 0)
      v97 = __p;
    v201.__r_.__value_.__l.__size_ = (std::string::size_type)v86;
    v201.__r_.__value_.__r.__words[2] = v87;
    if ((v95 & 0x80u) == 0)
      v98 = v95;
    else
      v98 = v96;
    v202 = " constants in {";
    v203 = 15;
    p_end_cap = (std::__compressed_pair<std::string *> *)v97;
    v205 = v98;
    v206 = "} \n";
    v207 = 3;
    absl::lts_2020_02_25::strings_internal::CatPieces((uint64_t)&v200, 5, (char *)v198);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v99 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v100 = &v199;
    else
      v100 = (std::string *)v199.__r_.__value_.__r.__words[0];
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v99 = v199.__r_.__value_.__l.__size_;
    v200 = (char *)v100;
    v201.__r_.__value_.__r.__words[0] = v99;
    absl::lts_2020_02_25::StrAppend((uint64_t)a2, (uint64_t)&v200);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v199.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_164;
    }
    else if ((SHIBYTE(v198[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_164;
    }
    operator delete(v198[0].__r_.__value_.__l.__data_);
  }
LABEL_164:
  memset(&v196, 0, sizeof(v196));
  std::vector<std::string>::reserve(&v196, __n);
  v102 = (uint64_t *)v193;
  if (v193 != &v194)
  {
    do
    {
      v103 = v102[4];
      v200 = "#";
      v201.__r_.__value_.__r.__words[0] = 1;
      v104 = *((unsigned __int8 *)v102 + 55);
      if ((v104 & 0x80u) != 0)
        v104 = v102[5];
      else
        v103 = (std::string::size_type)(v102 + 4);
      v199.__r_.__value_.__r.__words[0] = v103;
      v199.__r_.__value_.__l.__size_ = v104;
      v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)": ";
      v198[0].__r_.__value_.__l.__size_ = 2;
      v105 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((unsigned int *)v102 + 14), &__p[0].__r_.__value_.__s.__data_[16], v101);
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
      __p[0].__r_.__value_.__l.__size_ = v105 - (_BYTE *)&__p[0].__r_.__value_.__r.__words[2];
      absl::lts_2020_02_25::StrCat((uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198, (uint64_t)__p, &v181);
      end = v196.__end_;
      if (v196.__end_ >= v196.__end_cap_.__value_)
      {
        v196.__end_ = std::vector<std::string>::__push_back_slow_path<std::string>((char **)&v196, (uint64_t)&v181);
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v181.__r_.__value_.__l.__data_);
          v108 = v192[0];
          if (v192[0])
          {
LABEL_175:
            v109 = *((char *)v102 + 55);
            if (v109 >= 0)
              v110 = *((unsigned __int8 *)v102 + 55);
            else
              v110 = v102[5];
            if (v109 >= 0)
              v111 = v102 + 4;
            else
              v111 = (const void *)v102[4];
            v112 = v192;
            do
            {
              v113 = v108;
              v114 = v112;
              v116 = v108 + 32;
              v115 = (char *)*((_QWORD *)v108 + 4);
              v117 = v113[55];
              if (v117 >= 0)
                v118 = v113[55];
              else
                v118 = *((_QWORD *)v113 + 5);
              if (v117 >= 0)
                v119 = v116;
              else
                v119 = v115;
              if (v110 >= v118)
                v120 = v118;
              else
                v120 = v110;
              v121 = memcmp(v119, v111, v120);
              if (v121)
                v122 = v121 < 0;
              else
                v122 = v118 < v110;
              v123 = (char **)(v113 + 8);
              if (v122)
              {
                v112 = v114;
              }
              else
              {
                v123 = (char **)v113;
                v112 = (char **)v113;
              }
              v108 = *v123;
            }
            while (v108);
            if (v112 != v192)
            {
              v124 = (char *)(v114 + 4);
              v125 = !v122;
              if (v122)
                v126 = v114;
              else
                v126 = v113;
              if (v125)
                v124 = v116;
              v127 = *((unsigned __int8 *)v112 + 55);
              v129 = (char *)v126[4];
              v128 = v126[5];
              if ((v127 & 0x80u) == 0)
                v130 = v127;
              else
                v130 = v128;
              if ((v127 & 0x80u) == 0)
                v131 = v124;
              else
                v131 = v129;
              if (v130 >= v110)
                v132 = v110;
              else
                v132 = v130;
              v133 = memcmp(v111, v131, v132);
              v134 = v110 >= v130;
              if (v133)
                v134 = v133 >= 0;
              if (v134)
              {
                v135 = v196.__end_;
                v200 = " (#enforced: ";
                v201.__r_.__value_.__r.__words[0] = 13;
                v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v102 + 4);
                v136 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v191, (const void **)v102 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v198);
                v138 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((unsigned int *)v136 + 14), &v199.__r_.__value_.__s.__data_[16], v137);
                v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
                v199.__r_.__value_.__l.__size_ = v138 - (_BYTE *)&v199.__r_.__value_.__r.__words[2];
                v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)")";
                v198[0].__r_.__value_.__l.__size_ = 1;
                absl::lts_2020_02_25::StrAppend(v135 - 1, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198);
              }
            }
          }
        }
        else
        {
          v108 = v192[0];
          if (v192[0])
            goto LABEL_175;
        }
      }
      else
      {
        v107 = *(_OWORD *)&v181.__r_.__value_.__l.__data_;
        v196.__end_->__r_.__value_.__r.__words[2] = v181.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v107;
        v196.__end_ = end + 1;
        v108 = v192[0];
        if (v192[0])
          goto LABEL_175;
      }
      v139 = v190[0];
      if (v190[0])
      {
        v140 = *((char *)v102 + 55);
        v141 = v140 >= 0 ? *((unsigned __int8 *)v102 + 55) : v102[5];
        v142 = v140 >= 0 ? v102 + 4 : (uint64_t *)v102[4];
        v143 = v190;
        do
        {
          v144 = v139;
          v145 = v143;
          v147 = v139 + 32;
          v146 = (char *)*((_QWORD *)v139 + 4);
          v148 = v144[55];
          if (v148 >= 0)
            v149 = v144[55];
          else
            v149 = *((_QWORD *)v144 + 5);
          if (v148 >= 0)
            v150 = v147;
          else
            v150 = v146;
          if (v141 >= v149)
            v151 = v149;
          else
            v151 = v141;
          v152 = memcmp(v150, v142, v151);
          if (v152)
            v153 = v152 < 0;
          else
            v153 = v149 < v141;
          v154 = (char **)(v144 + 8);
          if (v153)
          {
            v143 = v145;
          }
          else
          {
            v154 = (char **)v144;
            v143 = (char **)v144;
          }
          v139 = *v154;
        }
        while (v139);
        if (v143 != v190)
        {
          v155 = (char *)(v145 + 4);
          v156 = !v153;
          if (v153)
            v157 = v145;
          else
            v157 = v144;
          if (v156)
            v155 = v147;
          v158 = *((unsigned __int8 *)v143 + 55);
          v160 = (char *)v157[4];
          v159 = v157[5];
          if ((v158 & 0x80u) == 0)
            v161 = v158;
          else
            v161 = v159;
          if ((v158 & 0x80u) == 0)
            v162 = v155;
          else
            v162 = v160;
          if (v161 >= v141)
            v163 = v141;
          else
            v163 = v161;
          v164 = memcmp(v142, v162, v163);
          v165 = v141 >= v161;
          if (v164)
            v165 = v164 >= 0;
          if (v165)
          {
            v166 = v196.__end_;
            v200 = " (#literals: ";
            v201.__r_.__value_.__r.__words[0] = 13;
            v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v102 + 4);
            v167 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v189, (const void **)v102 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v198);
            v169 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((unsigned int *)v167 + 14), &v199.__r_.__value_.__s.__data_[16], v168);
            v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199.__r_.__value_.__r.__words[2];
            v199.__r_.__value_.__l.__size_ = v169 - (_BYTE *)&v199.__r_.__value_.__r.__words[2];
            v198[0].__r_.__value_.__r.__words[0] = (std::string::size_type)")";
            v198[0].__r_.__value_.__l.__size_ = 1;
            absl::lts_2020_02_25::StrAppend(v166 - 1, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)v198);
          }
        }
      }
      v170 = (char *)v102[1];
      if (v170)
      {
        do
        {
          v171 = (char **)v170;
          v170 = *(char **)v170;
        }
        while (v170);
      }
      else
      {
        do
        {
          v171 = (char **)v102[2];
          v37 = *v171 == (char *)v102;
          v102 = (uint64_t *)v171;
        }
        while (!v37);
      }
      v102 = (uint64_t *)v171;
    }
    while (v171 != &v194);
  }
  v172 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v196.__end_ - (char *)v196.__begin_) >> 3));
  if (v196.__end_ == v196.__begin_)
    v173 = 0;
  else
    v173 = v172;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v196.__begin_, (const void **)&v196.__end_->__r_.__value_.__l.__data_, (uint64_t)&v200, v173, 1);
  absl::lts_2020_02_25::strings_internal::JoinAlgorithm<std::__wrap_iter<std::string const*>,void>((char *)v196.__begin_, (char *)v196.__end_, "\n", 1uLL, &v199);
  v174 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v175 = &v199;
  else
    v175 = (std::string *)v199.__r_.__value_.__r.__words[0];
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v174 = v199.__r_.__value_.__l.__size_;
  v200 = (char *)v175;
  v201.__r_.__value_.__r.__words[0] = v174;
  absl::lts_2020_02_25::StrAppend((uint64_t)a2, (uint64_t)&v200);
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
  begin = v196.__begin_;
  if (v196.__begin_)
  {
    v177 = v196.__end_;
    v178 = v196.__begin_;
    if (v196.__end_ != v196.__begin_)
    {
      do
      {
        if (SHIBYTE(v177[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v177[-1].__r_.__value_.__l.__data_);
        --v177;
      }
      while (v177 != begin);
      v178 = v196.__begin_;
    }
    v196.__end_ = begin;
    operator delete(v178);
  }
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<operations_research::Domain,int>,std::__map_value_compare<operations_research::Domain,std::__value_type<operations_research::Domain,int>,std::less<operations_research::Domain>,true>,std::allocator<std::__value_type<operations_research::Domain,int>>>::destroy((uint64_t)&v183, v184);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v186, v187);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v189, v190[0]);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v191, v192[0]);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v193, v194);
}

void sub_22DAF8838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40)
{
  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(a16 + 23) < 0)
    operator delete(*(void **)a16);
  std::__tree<std::__value_type<operations_research::Domain,int>,std::__map_value_compare<operations_research::Domain,std::__value_type<operations_research::Domain,int>,std::less<operations_research::Domain>,true>,std::allocator<std::__value_type<operations_research::Domain,int>>>::destroy((uint64_t)&a27, (_QWORD *)a28);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a30, (_QWORD *)a31);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a33, (char *)a34);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a36, (char *)a37);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a39, (char *)a40);
  _Unwind_Resume(a1);
}

void operations_research::ProtoEnumToString<operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy>(operations_research::sat *a1@<X0>, std::string *a2@<X8>)
{
  google::protobuf::EnumDescriptor *v4;
  uint64_t ValueByNumber;
  char *v6;
  __int128 *v7;
  __int128 v8;
  operations_research::sat *v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[2];
  _BYTE v16[32];
  _QWORD v17[7];

  v17[6] = *MEMORY[0x24BDAC8D0];
  v4 = (google::protobuf::EnumDescriptor *)operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy_descriptor(a1);
  ValueByNumber = google::protobuf::EnumDescriptor::FindValueByNumber(v4, (int)a1);
  if (ValueByNumber)
  {
    v7 = *(__int128 **)ValueByNumber;
    if (*(char *)(*(_QWORD *)ValueByNumber + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    v17[0] = "Invalid enum value of: ";
    v17[1] = 23;
    v9 = (operations_research::sat *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)a1, v16, v6);
    v15[0] = v16;
    v15[1] = v9 - (operations_research::sat *)v16;
    v14[0] = " for enum type: ";
    v14[1] = 16;
    v10 = (_QWORD **)operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy_descriptor(v9);
    v11 = *v10;
    v12 = *((unsigned __int8 *)*v10 + 23);
    if ((v12 & 0x80u) != 0)
    {
      v11 = (_QWORD *)**v10;
      v12 = (*v10)[1];
    }
    v13[0] = v11;
    v13[1] = v12;
    absl::lts_2020_02_25::StrCat((uint64_t)v17, (uint64_t)v15, (uint64_t)v14, (uint64_t)v13, a2);
  }
}

void operations_research::ProtoEnumToString<operations_research::sat::DecisionStrategyProto_DomainReductionStrategy>(operations_research::sat *a1@<X0>, std::string *a2@<X8>)
{
  google::protobuf::EnumDescriptor *v4;
  uint64_t ValueByNumber;
  char *v6;
  __int128 *v7;
  __int128 v8;
  operations_research::sat *v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[2];
  _BYTE v16[32];
  _QWORD v17[7];

  v17[6] = *MEMORY[0x24BDAC8D0];
  v4 = (google::protobuf::EnumDescriptor *)operations_research::sat::DecisionStrategyProto_DomainReductionStrategy_descriptor(a1);
  ValueByNumber = google::protobuf::EnumDescriptor::FindValueByNumber(v4, (int)a1);
  if (ValueByNumber)
  {
    v7 = *(__int128 **)ValueByNumber;
    if (*(char *)(*(_QWORD *)ValueByNumber + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    v17[0] = "Invalid enum value of: ";
    v17[1] = 23;
    v9 = (operations_research::sat *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)a1, v16, v6);
    v15[0] = v16;
    v15[1] = v9 - (operations_research::sat *)v16;
    v14[0] = " for enum type: ";
    v14[1] = 16;
    v10 = (_QWORD **)operations_research::sat::DecisionStrategyProto_DomainReductionStrategy_descriptor(v9);
    v11 = *v10;
    v12 = *((unsigned __int8 *)*v10 + 23);
    if ((v12 & 0x80u) != 0)
    {
      v11 = (_QWORD *)**v10;
      v12 = (*v10)[1];
    }
    v13[0] = v11;
    v13[1] = v12;
    absl::lts_2020_02_25::StrCat((uint64_t)v17, (uint64_t)v15, (uint64_t)v14, (uint64_t)v13, a2);
  }
}

void operations_research::sat::`anonymous namespace'::Summarize(std::string *this, uint64_t *a2)
{
  uint64_t **v2;
  std::string::size_type v4;
  const std::string::value_type *v5;
  _WORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void **p_p;
  void *__p;
  __int128 v18;
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[7];

  v2 = (uint64_t **)a2;
  v21[6] = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) < 0)
  {
    v4 = a2[1];
    if (v4 < 0x69)
    {
      std::string::__init_copy_ctor_external(this, (const std::string::value_type *)*a2, v4);
      return;
    }
    v5 = (const std::string::value_type *)*a2;
  }
  else
  {
    if (*((unsigned __int8 *)a2 + 23) <= 0x68u)
    {
      *this = *(std::string *)a2;
      return;
    }
    v5 = (const std::string::value_type *)a2;
  }
  v6 = operator new(0x38uLL);
  v7 = *(_OWORD *)v5;
  v8 = *((_OWORD *)v5 + 1);
  v9 = *((_OWORD *)v5 + 2);
  v6[24] = *((_WORD *)v5 + 24);
  *((_OWORD *)v6 + 1) = v8;
  *((_OWORD *)v6 + 2) = v9;
  *(_OWORD *)v6 = v7;
  *((_BYTE *)v6 + 50) = 0;
  v21[0] = v6;
  v21[1] = 50;
  v20[0] = " ... ";
  v20[1] = 5;
  if (*((char *)v2 + 23) < 0)
  {
    v10 = (unint64_t)v2[1];
    if (v10 < 0x32)
      goto LABEL_18;
    v2 = (uint64_t **)*v2;
  }
  else
  {
    v10 = *((unsigned __int8 *)v2 + 23);
    if (*((unsigned __int8 *)v2 + 23) <= 0x31u)
LABEL_18:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v11 = operator new(0x38uLL);
  __p = v11;
  v18 = xmmword_22DCE6570;
  v12 = *(_OWORD *)((char *)v2 + v10 - 34);
  v13 = *(_OWORD *)((char *)v2 + v10 - 18);
  v14 = *(_OWORD *)((char *)v2 + v10 - 50);
  *((_WORD *)v11 + 24) = *(_WORD *)((char *)v2 + v10 - 2);
  v11[1] = v12;
  v11[2] = v13;
  *v11 = v14;
  *((_BYTE *)v11 + 50) = 0;
  v15 = HIBYTE(v18);
  p_p = &__p;
  if (v18 < 0)
  {
    p_p = (void **)v11;
    v15 = v18;
  }
  v19[0] = p_p;
  v19[1] = v15;
  absl::lts_2020_02_25::StrCat((uint64_t)v21, (uint64_t)v20, (uint64_t)v19, this);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  operator delete(v6);
}

void sub_22DAF8E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    operator delete(v14);
    _Unwind_Resume(a1);
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v5;
  char *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  std::vector<std::string>::pointer v11;

  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    end = this->__end_;
    v5 = 24 * __n;
    v6 = (char *)operator new(24 * __n);
    v7 = (std::string *)&v6[v5];
    v8 = (std::string *)&v6[24 * (end - begin)];
    if (end == begin)
    {
      this->__begin_ = v8;
      this->__end_ = v8;
      this->__end_cap_.__value_ = v7;
      if (begin)
LABEL_13:
        operator delete(begin);
    }
    else
    {
      v9 = (std::string *)&v6[24 * (end - begin)];
      do
      {
        v10 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
        v9[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v9[-1].__r_.__value_.__l.__data_ = v10;
        --v9;
        end[-1].__r_.__value_.__l.__size_ = 0;
        end[-1].__r_.__value_.__r.__words[2] = 0;
        end[-1].__r_.__value_.__r.__words[0] = 0;
        --end;
      }
      while (end != begin);
      v11 = this->__begin_;
      begin = this->__end_;
      this->__begin_ = v9;
      this->__end_ = v8;
      this->__end_cap_.__value_ = v7;
      if (begin != v11)
      {
        do
        {
          if (SHIBYTE(begin[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(begin[-1].__r_.__value_.__l.__data_);
          --begin;
        }
        while (begin != v11);
        begin = v11;
      }
      if (begin)
        goto LABEL_13;
    }
  }
}

std::string *operations_research::sat::CpSolverResponseStats@<X0>(operations_research::sat *this@<X0>, const operations_research::sat::CpSolverResponse *a2@<X1>, std::string *a3@<X8>)
{
  int v3;
  std::string::size_type size;
  std::string *p_p;
  char *v8;
  _BYTE *v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string __p;
  std::string *v32;
  std::string::size_type v33;
  _BYTE v34[32];
  const char *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = (int)a2;
  v37 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v35 = "CpSolverResponse:";
  v36 = 17;
  absl::lts_2020_02_25::StrAppend((uint64_t)a3, (uint64_t)&v35);
  v35 = "\nstatus: ";
  v36 = 9;
  operations_research::ProtoEnumToString<operations_research::sat::CpSolverStatus>((operations_research::sat *)*((unsigned int *)this + 38), &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v32 = p_p;
  v33 = size;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v35, (uint64_t)&v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v3)
    {
LABEL_12:
      v35 = "\nobjective: NA";
      v36 = 14;
      absl::lts_2020_02_25::StrAppend((uint64_t)a3, (uint64_t)&v35);
      v35 = "\nbest_bound: NA";
      v36 = 15;
      absl::lts_2020_02_25::StrAppend((uint64_t)a3, (uint64_t)&v35);
      goto LABEL_13;
    }
  }
  else if (!v3)
  {
    goto LABEL_12;
  }
  if (*((_DWORD *)this + 38) == 3)
    goto LABEL_12;
  v35 = (const char *)*((_QWORD *)this + 18);
  v36 = (uint64_t)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::AppendPack((uint64_t)a3, "\nobjective: %.9g", 16, (uint64_t)&v35, 1);
  v35 = (const char *)*((_QWORD *)this + 20);
  v36 = (uint64_t)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::AppendPack((uint64_t)a3, "\nbest_bound: %.9g", 17, (uint64_t)&v35, 1);
LABEL_13:
  v35 = "\nBOOLeans: ";
  v36 = 11;
  v9 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((_QWORD *)this + 21), v34, v8);
  v32 = (std::string *)v34;
  v33 = v9 - v34;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v35, (uint64_t)&v32);
  v35 = "\nconflicts: ";
  v36 = 12;
  v11 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((_QWORD *)this + 22), v34, v10);
  v32 = (std::string *)v34;
  v33 = v11 - v34;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v35, (uint64_t)&v32);
  v35 = "\nbranches: ";
  v36 = 11;
  v13 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((_QWORD *)this + 23), v34, v12);
  v32 = (std::string *)v34;
  v33 = v13 - v34;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v35, (uint64_t)&v32);
  v35 = "\npropagations: ";
  v36 = 15;
  v15 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((_QWORD *)this + 24), v34, v14);
  v32 = (std::string *)v34;
  v33 = v15 - v34;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v35, (uint64_t)&v32);
  v35 = "\ninteger_propagations: ";
  v36 = 23;
  v17 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(*((_QWORD *)this + 25), v34, v16);
  v32 = (std::string *)v34;
  v33 = v17 - v34;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v35, (uint64_t)&v32);
  v35 = "\nwalltime: ";
  v36 = 11;
  v20 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v34, *((double *)this + 26), v18, v19);
  v32 = (std::string *)v34;
  v33 = v20;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v35, (uint64_t)&v32);
  v35 = "\nusertime: ";
  v36 = 11;
  v23 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v34, *((double *)this + 27), v21, v22);
  v32 = (std::string *)v34;
  v33 = v23;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v35, (uint64_t)&v32);
  v35 = "\ndeterministic_time: ";
  v36 = 21;
  v26 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v34, *((double *)this + 28), v24, v25);
  v32 = (std::string *)v34;
  v33 = v26;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v35, (uint64_t)&v32);
  v35 = "\nprimal_integral: ";
  v36 = 18;
  v29 = absl::lts_2020_02_25::numbers_internal::SixDigitsToBuffer((absl::lts_2020_02_25::numbers_internal *)v34, *((double *)this + 29), v27, v28);
  v32 = (std::string *)v34;
  v33 = v29;
  absl::lts_2020_02_25::StrAppend(a3, (uint64_t)&v35, (uint64_t)&v32);
  v35 = "\n";
  v36 = 1;
  return absl::lts_2020_02_25::StrAppend((uint64_t)a3, (uint64_t)&v35);
}

void sub_22DAF93A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
  {
    operator delete(*(void **)v14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::ProtoEnumToString<operations_research::sat::CpSolverStatus>(operations_research::sat *a1@<X0>, std::string *a2@<X8>)
{
  google::protobuf::EnumDescriptor *v4;
  uint64_t ValueByNumber;
  char *v6;
  __int128 *v7;
  __int128 v8;
  operations_research::sat *v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[2];
  _BYTE v16[32];
  _QWORD v17[7];

  v17[6] = *MEMORY[0x24BDAC8D0];
  v4 = (google::protobuf::EnumDescriptor *)operations_research::sat::CpSolverStatus_descriptor(a1);
  ValueByNumber = google::protobuf::EnumDescriptor::FindValueByNumber(v4, (int)a1);
  if (ValueByNumber)
  {
    v7 = *(__int128 **)ValueByNumber;
    if (*(char *)(*(_QWORD *)ValueByNumber + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    v17[0] = "Invalid enum value of: ";
    v17[1] = 23;
    v9 = (operations_research::sat *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)a1, v16, v6);
    v15[0] = v16;
    v15[1] = v9 - (operations_research::sat *)v16;
    v14[0] = " for enum type: ";
    v14[1] = 16;
    v10 = (_QWORD **)operations_research::sat::CpSolverStatus_descriptor(v9);
    v11 = *v10;
    v12 = *((unsigned __int8 *)*v10 + 23);
    if ((v12 & 0x80u) != 0)
    {
      v11 = (_QWORD *)**v10;
      v12 = (*v10)[1];
    }
    v13[0] = v11;
    v13[1] = v12;
    absl::lts_2020_02_25::StrCat((uint64_t)v17, (uint64_t)v15, (uint64_t)v14, (uint64_t)v13, a2);
  }
}

void operations_research::sat::SolveCpModel(operations_research::sat *this@<X0>, const operations_research::sat::CpModelProto *a2@<X1>, std::string::size_type a3@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type size;
  _QWORD *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type *p_size;
  uint64_t v16;
  operations_research::sat::SatParameters *v17;
  const void *v18;
  size_t v19;
  const char *v20;
  std::string::size_type v21;
  std::string *p_dst;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int64_t v28;
  operations_research::sat::SatParameters *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string::size_type *v34;
  uint64_t v35;
  int v36;
  char v37;
  std::string::size_type v38;
  _QWORD *v39;
  std::string *v40;
  std::string::size_type v41;
  _QWORD *v42;
  __n128 v43;
  std::string *v44;
  std::string::size_type v45;
  absl::lts_2020_02_25 *v46;
  absl::lts_2020_02_25 *v47;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v48;
  uint64_t v49;
  std::string *v50;
  std::string::size_type v51;
  operations_research::sat::SatParameters *v52;
  uint64_t v53;
  operations_research::sat::PresolveContext *v54;
  __n128 v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  __n128 v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  std::string *v74;
  uint64_t v75;
  const void *v76;
  size_t v77;
  std::string::size_type v78;
  std::string *v79;
  uint64_t v80;
  uint64_t v81;
  absl::lts_2020_02_25::Mutex *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  std::string *v89;
  std::string::size_type v90;
  _QWORD *v91;
  std::string::size_type v92;
  std::string *v93;
  _QWORD *v94;
  _QWORD *v95;
  std::string *v96;
  std::string::size_type v97;
  _QWORD *v98;
  std::string::size_type v99;
  std::string *v100;
  operations_research::sat::Model *v101;
  operations_research::sat **v102;
  uint64_t v103;
  uint64_t v104;
  std::string::size_type v105;
  std::string::size_type v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  absl::lts_2020_02_25::Mutex *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  absl::lts_2020_02_25 *v128;
  absl::lts_2020_02_25::Mutex *v129;
  uint64_t v130;
  absl::lts_2020_02_25::Mutex *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  absl::lts_2020_02_25 *v135;
  absl::lts_2020_02_25 *v136;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v137;
  uint64_t v138;
  std::string *v139;
  std::string::size_type v140;
  operations_research::sat::Model *v141;
  absl::lts_2020_02_25 *v142;
  absl::lts_2020_02_25 *v143;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v144;
  uint64_t v145;
  std::string *v146;
  std::string::size_type v147;
  _QWORD *v148;
  operations_research::sat::Model *v149;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  char *v154;
  char *v155;
  void *v156;
  char *v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  char IsFeasible;
  int v163;
  uint64_t v164;
  std::string v165;
  std::string v166;
  void *v167;
  void *v168;
  uint64_t v169;
  operations_research::sat::PresolveContext *v170;
  _BYTE v171[144];
  _QWORD v172[3];
  int v173;
  uint64_t v174;
  _QWORD v175[72];
  uint64_t v176;
  _QWORD *v177;
  char v178;
  char *v179;
  char v180;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v181;
  uint64_t v182;
  char v183[8];
  absl::lts_2020_02_25 *CurrentTimeNanos;
  uint64_t v185;
  _QWORD v186[3];
  _QWORD *v187;
  double v188;
  uint64_t v189;
  _QWORD v190[3];
  _QWORD *v191;
  _QWORD v192[3];
  _QWORD *v193;
  std::string __dst;
  operations_research::sat *v195;
  std::string *v196;
  _QWORD *v197;
  char v198[8];
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  std::string __p[24];
  std::string v204;
  std::string *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208[21];
  void *v209;
  char *v210;
  std::string v211;
  char v212[8];
  _BYTE v213[24];
  _BYTE *v214;
  uint64_t v215;

  v215 = *MEMORY[0x24BDAC8D0];
  v185 = 0;
  v182 = 0;
  v183[0] = 1;
  CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  v180 = 1;
  v181 = absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  v176 = 0;
  v177 = v7;
  v178 = 0;
  v179 = (char *)v7[15];
  if (!v179)
  {
    v179 = &v178;
    v7[15] = &v178;
  }
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)a3, 0);
  if (!FLAGS_cp_model_dump_models)
    goto LABEL_14;
  __dst.__r_.__value_.__r.__words[0] = FLAGS_cp_model_dump_prefix;
  __dst.__r_.__value_.__l.__size_ = strlen((const char *)FLAGS_cp_model_dump_prefix);
  v204.__r_.__value_.__r.__words[0] = (std::string::size_type)"model.pbtxt";
  v204.__r_.__value_.__l.__size_ = 11;
  absl::lts_2020_02_25::StrCat((uint64_t)&__dst, (uint64_t)&v204, __p);
  google::LogMessage::LogMessage((google::LogMessage *)&__dst, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2728);
  v8 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__dst);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Dumping cp model proto to '", 27);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = __p;
  else
    v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  else
    size = __p[0].__r_.__value_.__l.__size_;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"'.", 2);
  google::LogMessage::~LogMessage((google::LogMessage *)&__dst);
  v13 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  v14 = __p;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v13 = __p[0].__r_.__value_.__l.__size_;
    v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  __dst.__r_.__value_.__l.__size_ = v13;
  file::SetTextProto((const char **)&__dst.__r_.__value_.__l.__data_, this, 47802, v172);
  if (v172[0])
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v204, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2729);
    v152 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v204);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)"Check failed: (file::SetTextProto(file, model_proto, file::Defaults())).ok() ", 77);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v204);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    v212[0] = 0;
    v214 = 0;
    if (!FLAGS_cp_model_dump_response)
      goto LABEL_23;
  }
  else
  {
LABEL_14:
    v212[0] = 0;
    v214 = 0;
    if (!FLAGS_cp_model_dump_response)
      goto LABEL_23;
  }
  v204.__r_.__value_.__l.__size_ = a3;
  __dst.__r_.__value_.__s.__data_[0] = 1;
  v204.__r_.__value_.__s.__data_[0] = 0;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24F985108;
  __dst.__r_.__value_.__r.__words[2] = a3;
  v196 = (std::string *)&__dst.__r_.__value_.__r.__words[1];
  absl::cleanup_internal::Storage<std::function<void ()(void)>>::operator=((uint64_t)v212, (uint64_t)&__dst);
  if (__dst.__r_.__value_.__s.__data_[0])
  {
    __dst.__r_.__value_.__s.__data_[0] = 0;
    if (!v196)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(std::string *))(v196->__r_.__value_.__r.__words[0] + 48))(v196);
  }
  p_size = (std::string::size_type *)v196;
  if (v196 == (std::string *)&__dst.__r_.__value_.__r.__words[1])
  {
    v16 = 4;
    p_size = &__dst.__r_.__value_.__l.__size_;
  }
  else
  {
    if (!v196)
      goto LABEL_23;
    v16 = 5;
  }
  (*(void (**)(void))(*p_size + 8 * v16))();
LABEL_23:
  if (*FLAGS_cp_model_params)
  {
    v17 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&v204, v17);
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)__p, 0);
    v18 = (const void *)FLAGS_cp_model_params;
    v19 = strlen(FLAGS_cp_model_params);
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = v19;
    if (v19 >= 0x17)
    {
      v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v23 = v19 | 7;
      v24 = v23 + 1;
      p_dst = (std::string *)operator new(v23 + 1);
      __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      __dst.__r_.__value_.__l.__size_ = v21;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
      p_dst = &__dst;
      if (!v19)
      {
LABEL_32:
        p_dst->__r_.__value_.__s.__data_[v21] = 0;
        if ((google::protobuf::TextFormat::ParseFromString((uint64_t)&__dst, (google::protobuf::Message *)__p, v20) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v172, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2747);
          v153 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v172);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"Check failed: google::protobuf::TextFormat::ParseFromString(FLAGS_cp_model_params, &flag_params) ", 97);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v172);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        operations_research::sat::SatParameters::MergeFrom((operations_research::sat::SatParameters *)&v204, (const operations_research::sat::SatParameters *)__p);
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&__dst, (const operations_research::sat::SatParameters *)&v204);
        v202 = 0;
        v25 = operator new(0x248uLL);
        *v25 = &off_24F985078;
        operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v25 + 1), (const operations_research::sat::SatParameters *)&__dst);
        v202 = v25;
        operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&__dst);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        if (!v202)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *__return_ptr, _BYTE *, std::string *))(*(_QWORD *)v202 + 48))(v175, v202, &__dst);
        operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v175);
        v26 = v202;
        if (v202 == v201)
        {
          v27 = 4;
          v26 = v201;
        }
        else
        {
          if (!v202)
          {
LABEL_43:
            operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)__p);
            operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v204);
            goto LABEL_44;
          }
          v27 = 5;
        }
        (*(void (**)(void))(*v26 + 8 * v27))();
        goto LABEL_43;
      }
    }
    memmove(p_dst, v18, v21);
    goto LABEL_32;
  }
LABEL_44:
  v29 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  if (!*((_BYTE *)v29 + 99)
    && (*operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__ < 1
     || operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__ == &google::kLogSiteUninitialized
     && !google::InitVLOG3__((google *)&operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)1)))
  {
    v36 = 0;
    v198[0] = 0;
    v200 = 0;
    goto LABEL_66;
  }
  google::LogMessage::LogMessage((google::LogMessage *)&v204, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2771);
  v30 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v204);
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Parameters: ", 12);
  google::protobuf::Message::ShortDebugString(v29, (uint64_t)&__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &__dst;
  else
    v32 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v33 = __dst.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  google::LogMessage::~LogMessage((google::LogMessage *)&v204);
  v198[0] = 0;
  v200 = 0;
  v204.__r_.__value_.__l.__size_ = a3;
  v204.__r_.__value_.__r.__words[2] = (std::string::size_type)this;
  __dst.__r_.__value_.__s.__data_[0] = 1;
  v204.__r_.__value_.__s.__data_[0] = 0;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24F985188;
  __dst.__r_.__value_.__r.__words[2] = a3;
  v195 = this;
  v196 = (std::string *)&__dst.__r_.__value_.__r.__words[1];
  absl::cleanup_internal::Storage<std::function<void ()(void)>>::operator=((uint64_t)v198, (uint64_t)&__dst);
  if (__dst.__r_.__value_.__s.__data_[0])
  {
    __dst.__r_.__value_.__s.__data_[0] = 0;
    if (!v196)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(std::string *))(v196->__r_.__value_.__r.__words[0] + 48))(v196);
  }
  v34 = (std::string::size_type *)v196;
  if (v196 == (std::string *)&__dst.__r_.__value_.__r.__words[1])
  {
    v35 = 4;
    v34 = &__dst.__r_.__value_.__l.__size_;
    goto LABEL_64;
  }
  if (v196)
  {
    v35 = 5;
LABEL_64:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  v36 = 1;
LABEL_66:
  operations_research::sat::ValidateCpModel(this, v28, &__dst);
  v37 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v38 = __dst.__r_.__value_.__l.__size_;
  if (v38)
  {
    if (v36)
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v204, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2788);
      v39 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v204);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &__dst;
      else
        v40 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v41 = __dst.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
      google::LogMessage::~LogMessage((google::LogMessage *)&v204);
      v37 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    *(_DWORD *)(a3 + 152) = 1;
  }
  if (v37 < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v38)
      goto LABEL_147;
  }
  else if (v38)
  {
    goto LABEL_147;
  }
  if (v36)
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v204, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2793);
    v42 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v204);
    operations_research::sat::CpModelStats(this, &__dst, v43);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &__dst;
    else
      v44 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v45 = __dst.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v44, v45);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    google::LogMessage::~LogMessage((google::LogMessage *)&v204);
  }
  if (*((_BYTE *)v29 + 135)
    || this != (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_
    && *(_OWORD *)((char *)this + 120) != 0
    || *((_BYTE *)v29 + 129)
    || *((_BYTE *)v29 + 155)
    || *((int *)v29 + 104) > 1
    || *((_DWORD *)this + 22))
  {
    goto LABEL_98;
  }
  v117 = *((_QWORD *)this + 4);
  v118 = v117 ? v117 + 8 : 0;
  v119 = *((int *)this + 6);
  if ((_DWORD)v119)
  {
    v120 = 8 * v119 - 8;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v118 + 16) != 2)
        goto LABEL_98;
      v121 = *(_QWORD **)(*(_QWORD *)v118 + 24);
      if ((*v121 & 0x8000000000000000) != 0)
        goto LABEL_98;
      v122 = v121[1];
      v118 += 8;
      v123 = v122 > 1 || v120 == 0;
      v120 -= 8;
    }
    while (!v123);
    if (v122 > 1)
    {
LABEL_98:
      if (v36)
      {
        google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2836);
        v46 = (absl::lts_2020_02_25 *)google::LogMessage::stream((google::LogMessage *)__p);
        v47 = v46;
        if (v183[0])
        {
          v48 = absl::lts_2020_02_25::GetCurrentTimeNanos(v46);
          v49 = v48 - (_QWORD)CurrentTimeNanos + v185;
        }
        else
        {
          v49 = v185;
        }
        *(double *)&v204.__r_.__value_.__l.__data_ = (double)v49 * 0.000000001;
        v204.__r_.__value_.__l.__size_ = (std::string::size_type)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
        absl::lts_2020_02_25::str_format_internal::FormatPack("*** starting model presolve at %.2fs", 36, (uint64_t)&v204, 1, (uint64_t)&__dst);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &__dst;
        else
          v50 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v51 = __dst.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v50, v51);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        google::LogMessage::~LogMessage((google::LogMessage *)__p);
      }
      operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v172, this);
      operations_research::sat::CpModelProto::CpModelProto((operations_research::sat::CpModelProto *)v171, 0);
      __dst.__r_.__value_.__s.__data_[0] = 1;
      operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&__dst.__r_.__value_.__r.__words[1], 0);
      v197 = 0;
      __dst.__r_.__value_.__s.__data_[0] = v36;
      v52 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
      operations_research::sat::SatParameters::CopyFrom((operations_research::sat::SatParameters *)&__dst.__r_.__value_.__r.__words[1], v52);
      v197 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
      v53 = operator new();
      v54 = (operations_research::sat::PresolveContext *)v53;
      v55 = 0uLL;
      *(_OWORD *)(v53 + 16) = 0u;
      *(_OWORD *)(v53 + 32) = 0u;
      *(_OWORD *)v53 = 0u;
      *(_QWORD *)(v53 + 48) = v172;
      *(_QWORD *)(v53 + 56) = v171;
      *(_WORD *)(v53 + 64) = 256;
      *(_QWORD *)(v53 + 72) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v53 + 80) = 0u;
      *(_OWORD *)(v53 + 96) = 0u;
      *(_OWORD *)(v53 + 112) = 0u;
      *(_OWORD *)(v53 + 128) = 0u;
      *(_OWORD *)(v53 + 144) = 0u;
      *(_OWORD *)(v53 + 160) = 0u;
      *(_OWORD *)(v53 + 176) = 0u;
      *(_QWORD *)(v53 + 192) = 0;
      *(_QWORD *)(v53 + 200) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v53 + 208) = 0u;
      *(_OWORD *)(v53 + 224) = 0u;
      *(_OWORD *)(v53 + 240) = 0u;
      *(_OWORD *)(v53 + 256) = 0u;
      *(_QWORD *)(v53 + 272) = 0;
      *(_QWORD *)(v53 + 280) = v53 + 248;
      *(_OWORD *)(v53 + 288) = 0u;
      *(_OWORD *)(v53 + 304) = 0u;
      *(_DWORD *)(v53 + 288) = -1;
      *(_OWORD *)(v53 + 360) = 0u;
      *(_OWORD *)(v53 + 320) = 0u;
      *(_OWORD *)(v53 + 336) = 0u;
      *(_DWORD *)(v53 + 352) = 0;
      *(_QWORD *)(v53 + 376) = 0;
      *(_QWORD *)(v53 + 384) = v53 + 352;
      *(_OWORD *)(v53 + 392) = 0u;
      *(_OWORD *)(v53 + 408) = 0u;
      *(_DWORD *)(v53 + 392) = -1;
      *(_OWORD *)(v53 + 424) = 0u;
      *(_OWORD *)(v53 + 440) = 0u;
      *(_QWORD *)(v53 + 456) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v53 + 512) = 0u;
      *(_QWORD *)(v53 + 528) = 0;
      *(_OWORD *)(v53 + 489) = 0u;
      *(_OWORD *)(v53 + 464) = 0u;
      *(_OWORD *)(v53 + 480) = 0u;
      *(_QWORD *)(v53 + 536) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v53 + 616) = 0;
      *(_BYTE *)(v53 + 608) = 0;
      *(_OWORD *)(v53 + 576) = 0u;
      *(_OWORD *)(v53 + 592) = 0u;
      *(_OWORD *)(v53 + 544) = 0u;
      *(_OWORD *)(v53 + 560) = 0u;
      *(_OWORD *)(v53 + 768) = 0u;
      *(_OWORD *)(v53 + 784) = 0u;
      *(_OWORD *)(v53 + 736) = 0u;
      *(_OWORD *)(v53 + 752) = 0u;
      *(_OWORD *)(v53 + 704) = 0u;
      *(_OWORD *)(v53 + 720) = 0u;
      *(_OWORD *)(v53 + 672) = 0u;
      *(_OWORD *)(v53 + 688) = 0u;
      *(_OWORD *)(v53 + 656) = 0u;
      *(_QWORD *)(v53 + 800) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v53 + 840) = 0;
      *(_OWORD *)(v53 + 824) = 0u;
      *(_OWORD *)(v53 + 808) = 0u;
      *(_QWORD *)(v53 + 848) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v53 + 936) = 0;
      *(_OWORD *)(v53 + 920) = 0u;
      *(_OWORD *)(v53 + 904) = 0u;
      *(_OWORD *)(v53 + 888) = 0u;
      *(_OWORD *)(v53 + 872) = 0u;
      *(_OWORD *)(v53 + 856) = 0u;
      *(_QWORD *)(v53 + 944) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v53 + 984) = 0;
      *(_OWORD *)(v53 + 968) = 0u;
      *(_OWORD *)(v53 + 952) = 0u;
      *(_QWORD *)(v53 + 992) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)(v53 + 1032) = 0;
      *(_OWORD *)(v53 + 1016) = 0u;
      *(_OWORD *)(v53 + 1000) = 0u;
      *(_QWORD *)(v53 + 1040) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v53 + 1048) = 0u;
      *(_OWORD *)(v53 + 1336) = 0u;
      *(_OWORD *)(v53 + 1352) = 0u;
      *(_OWORD *)(v53 + 1304) = 0u;
      *(_OWORD *)(v53 + 1320) = 0u;
      *(_OWORD *)(v53 + 1272) = 0u;
      *(_OWORD *)(v53 + 1288) = 0u;
      *(_OWORD *)(v53 + 1240) = 0u;
      *(_OWORD *)(v53 + 1256) = 0u;
      *(_OWORD *)(v53 + 1208) = 0u;
      *(_OWORD *)(v53 + 1224) = 0u;
      *(_OWORD *)(v53 + 1176) = 0u;
      *(_OWORD *)(v53 + 1192) = 0u;
      *(_OWORD *)(v53 + 1144) = 0u;
      *(_OWORD *)(v53 + 1160) = 0u;
      *(_OWORD *)(v53 + 1112) = 0u;
      *(_OWORD *)(v53 + 1128) = 0u;
      *(_OWORD *)(v53 + 1080) = 0u;
      *(_OWORD *)(v53 + 1096) = 0u;
      *(_OWORD *)(v53 + 1064) = 0u;
      *(_QWORD *)(v53 + 1368) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v53 + 1376) = 0u;
      *(_OWORD *)(v53 + 1392) = 0u;
      *(_QWORD *)(v53 + 1408) = 0;
      v170 = (operations_research::sat::PresolveContext *)v53;
      if (*((int *)v29 + 104) > 1
        || (v163 = 0, this != (operations_research::sat *)&operations_research::sat::_CpModelProto_default_instance_)
        && *((_QWORD *)this + 15))
      {
        operations_research::sat::PresolveContext::InitializeNewDomains((operations_research::sat::PresolveContext *)v53, (__n128)0);
        v56 = *((int *)this + 22);
        if ((_DWORD)v56)
        {
          v57 = (int *)*((_QWORD *)this + 12);
          v58 = 4 * v56;
          while (1)
          {
            v59 = *v57;
            if ((operations_research::sat::PresolveContext::SetLiteralToTrue(v54, *v57) & 1) == 0)
              break;
            ++v57;
            v58 -= 4;
            if (!v58)
            {
              v163 = 1;
              goto LABEL_120;
            }
          }
          v69 = *(unsigned int *)(a3 + 112);
          *(_DWORD *)(a3 + 152) = 3;
          if ((_DWORD)v69 == *(_DWORD *)(a3 + 116))
            google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(a3 + 112), v69 + 1);
          *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4 * v69) = v59;
          *(_DWORD *)(a3 + 112) = v69 + 1;
LABEL_145:
          operations_research::sat::PresolveContext::~PresolveContext((void **)v54);
          MEMORY[0x22E31DF78]();
LABEL_146:
          operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&__dst.__r_.__value_.__r.__words[1]);
          operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)v171);
          operations_research::sat::CpModelProto::~CpModelProto((operations_research::sat::CpModelProto *)v172);
          goto LABEL_147;
        }
        v163 = 1;
      }
LABEL_120:
      v193 = 0;
      v167 = 0;
      v168 = 0;
      v169 = 0;
      if (!operations_research::sat::PresolveCpModel((unsigned __int8 *)&__dst, (uint64_t)v54, (uint64_t)&v167, v55))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v204, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2875, 2);
        v65 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v204);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Error while presolving, likely due to integer overflow.", 55);
        google::LogMessage::~LogMessage((google::LogMessage *)&v204);
        *(_DWORD *)(a3 + 152) = 1;
        v66 = v167;
        if (!v167)
          goto LABEL_135;
        goto LABEL_134;
      }
      if (v36)
      {
        google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2879);
        v60 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
        operations_research::sat::CpModelStats((operations_research::sat *)v172, &v204, v61);
        if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v204;
        else
          v62 = (std::string *)v204.__r_.__value_.__r.__words[0];
        if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
        else
          v63 = v204.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v62, v63);
        if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v204.__r_.__value_.__l.__data_);
        google::LogMessage::~LogMessage((google::LogMessage *)__p);
      }
      if (*((_BYTE *)v29 + 394))
      {
        v64 = (std::string *)operator new(0x48uLL);
        v64->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24F985208;
        v64->__r_.__value_.__l.__size_ = (std::string::size_type)this;
        v64->__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
        v64[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
        v64[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v176;
        v64[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v167;
        v64[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v183;
        v64[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v180;
        v64[2].__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
      }
      else
      {
        v64 = (std::string *)operator new(0x30uLL);
        v64->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24F9852D0;
        v64->__r_.__value_.__l.__size_ = (std::string::size_type)this;
        v64->__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
        v64[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v183;
        v64[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v176;
        v64[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v180;
      }
      v205 = v64;
      std::__function::__value_func<BOOL ()(operations_research::sat::CpSolverResponse *)>::swap[abi:ne180100](&v204, v192);
      v74 = v205;
      if (v205 == &v204)
      {
        v75 = 4;
        v74 = &v204;
      }
      else
      {
        if (!v205)
          goto LABEL_172;
        v75 = 5;
      }
      (*(void (**)(void))(v74->__r_.__value_.__r.__words[0] + 8 * v75))();
LABEL_172:
      v170 = 0;
      operations_research::sat::PresolveContext::~PresolveContext((void **)v54);
      MEMORY[0x22E31DF78]();
      operations_research::sat::SharedResponseManager::SharedResponseManager((uint64_t)&v204, v36, *((_BYTE *)v29 + 129), (uint64_t)v172, (uint64_t)v183, (uint64_t)&v176);
      v76 = (const void *)FLAGS_cp_model_dump_prefix;
      v77 = strlen((const char *)FLAGS_cp_model_dump_prefix);
      if (v77 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v78 = v77;
      if (v77 >= 0x17)
      {
        v80 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v77 | 7) != 0x17)
          v80 = v77 | 7;
        v81 = v80 + 1;
        v79 = (std::string *)operator new(v80 + 1);
        __p[0].__r_.__value_.__r.__words[2] = v81 | 0x8000000000000000;
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
        __p[0].__r_.__value_.__l.__size_ = v78;
      }
      else
      {
        *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v77;
        v79 = __p;
        if (!v77)
        {
LABEL_180:
          v79->__r_.__value_.__s.__data_[v78] = 0;
          std::string::operator=(&v211, __p);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          operations_research::sat::SharedResponseManager::SetGapLimitsFromParameters((operations_research::sat::SharedResponseManager *)&v204, v29);
          operations_research::sat::Model::Register<operations_research::sat::SharedResponseManager>((uint64_t *)a2, (uint64_t *)&v204);
          v83 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SolutionObservers>((uint64_t)a2);
          if (*v83 != v83[1])
          {
            v191 = 0;
            v84 = operator new(0x38uLL);
            *v84 = &off_24F985350;
            v84[1] = this;
            v84[2] = v83;
            v84[3] = v183;
            v84[4] = &v180;
            v84[5] = v192;
            v84[6] = &v176;
            v191 = v84;
            operations_research::sat::SharedResponseManager::AddSolutionCallback((uint64_t)&v204, v190);
            v85 = v191;
            if (v191 == v190)
            {
              v86 = 4;
              v85 = v190;
            }
            else
            {
              if (!v191)
                goto LABEL_188;
              v86 = 5;
            }
            (*(void (**)(void))(*v85 + 8 * v86))();
          }
LABEL_188:
          if (!FLAGS_cp_model_dump_models)
            goto LABEL_211;
          __p[0].__r_.__value_.__r.__words[0] = FLAGS_cp_model_dump_prefix;
          __p[0].__r_.__value_.__l.__size_ = strlen((const char *)FLAGS_cp_model_dump_prefix);
          v188 = COERCE_DOUBLE("presolved_model.pbtxt");
          v189 = 21;
          absl::lts_2020_02_25::StrCat((uint64_t)__p, (uint64_t)&v188, &v166);
          google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2970);
          v87 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Dumping presolved cp model proto to '", 37);
          if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v89 = &v166;
          else
            v89 = (std::string *)v166.__r_.__value_.__r.__words[0];
          if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
          else
            v90 = v166.__r_.__value_.__l.__size_;
          v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v89, v90);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"'.", 2);
          google::LogMessage::~LogMessage((google::LogMessage *)__p);
          v92 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
          v93 = &v166;
          if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v92 = v166.__r_.__value_.__l.__size_;
            v93 = (std::string *)v166.__r_.__value_.__r.__words[0];
          }
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
          __p[0].__r_.__value_.__l.__size_ = v92;
          file::SetTextProto((const char **)&__p[0].__r_.__value_.__l.__data_, (const google::protobuf::Message *)v172, 47802, &v165);
          if (v165.__r_.__value_.__r.__words[0])
          {
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v188, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2973);
            v159 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v188);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"Check failed: (file::SetTextProto(presolved_file, new_cp_model_proto, file::Defaults())).ok() ", 94);
          }
          else
          {
            __p[0].__r_.__value_.__r.__words[0] = FLAGS_cp_model_dump_prefix;
            __p[0].__r_.__value_.__l.__size_ = strlen((const char *)FLAGS_cp_model_dump_prefix);
            v188 = COERCE_DOUBLE("mapping_model.pbtxt");
            v189 = 19;
            absl::lts_2020_02_25::StrCat((uint64_t)__p, (uint64_t)&v188, &v165);
            google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2977);
            v94 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
            v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Dumping mapping cp model proto to '", 35);
            if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v96 = &v165;
            else
              v96 = (std::string *)v165.__r_.__value_.__r.__words[0];
            if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v97 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
            else
              v97 = v165.__r_.__value_.__l.__size_;
            v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v96, v97);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"'.", 2);
            google::LogMessage::~LogMessage((google::LogMessage *)__p);
            v99 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
            v100 = &v165;
            if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            {
              v99 = v165.__r_.__value_.__l.__size_;
              v100 = (std::string *)v165.__r_.__value_.__r.__words[0];
            }
            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
            __p[0].__r_.__value_.__l.__size_ = v99;
            file::SetTextProto((const char **)&__p[0].__r_.__value_.__l.__data_, (const google::protobuf::Message *)v171, 47802, &v164);
            if (!v164)
            {
              if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v165.__r_.__value_.__l.__data_);
              if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v166.__r_.__value_.__l.__data_);
LABEL_211:
              if (*((_BYTE *)v29 + 152)
                || operations_research::SharedTimeLimit::LimitReached((operations_research::SharedTimeLimit *)&v176, v82))
              {
                if (v174)
                  v102 = (operations_research::sat **)(v174 + 8);
                else
                  v102 = 0;
                if (v173)
                {
                  v103 = 0;
                  v104 = 8 * v173;
                  do
                  {
                    operations_research::sat::UsedVariables(*v102, __p);
                    v105 = __p[0].__r_.__value_.__l.__size_;
                    v106 = __p[0].__r_.__value_.__r.__words[0];
                    if (__p[0].__r_.__value_.__r.__words[0])
                    {
                      __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
                      operator delete(__p[0].__r_.__value_.__l.__data_);
                    }
                    v103 += (uint64_t)(v105 - v106) >> 2;
                    ++v102;
                    v104 -= 8;
                  }
                  while (v104);
                }
                if ((v36 & 1) != 0)
                {
                  google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2987);
                  v107 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
                  v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Stopped after presolve.", 23);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"\nPresolvedNumVariables: ", 24);
                  v109 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"\nPresolvedNumConstraints: ", 26);
                  v110 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"\nPresolvedNumTerms: ", 20);
                  std::ostream::operator<<();
                  google::LogMessage::~LogMessage((google::LogMessage *)__p);
                }
                operations_research::sat::SharedResponseManager::SetStatsFromModel((operations_research::sat::SharedResponseManager *)&v204, a2);
                operations_research::sat::SharedResponseManager::GetResponse((operations_research::sat::SharedResponseManager *)&v204, v111, (operations_research::sat::CpSolverResponse *)__p);
                v112 = *(_QWORD *)(a3 + 8);
                v113 = (_QWORD *)(v112 & 0xFFFFFFFFFFFFFFFELL);
                if ((v112 & 1) != 0)
                {
                  v113 = (_QWORD *)*v113;
                  v114 = (_QWORD *)(__p[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFELL);
                  if ((__p[0].__r_.__value_.__s.__data_[8] & 1) == 0)
                  {
LABEL_225:
                    if (v113 != v114)
                    {
LABEL_226:
                      operations_research::sat::CpSolverResponse::CopyFrom((operations_research::sat::CpSolverResponse *)a3, (const operations_research::sat::CpSolverResponse *)__p);
                      goto LABEL_304;
                    }
LABEL_302:
                    if (__p != (std::string *)a3)
                      operations_research::sat::CpSolverResponse::InternalSwap((operations_research::sat::CpSolverResponse *)a3, (operations_research::sat::CpSolverResponse *)__p);
LABEL_304:
                    operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)__p);
                    __p[0].__r_.__value_.__r.__words[0] = a3;
                    if (!v193)
                      std::__throw_bad_function_call[abi:ne180100]();
                    if (((*(uint64_t (**)(_QWORD *, std::string *))(*v193 + 48))(v193, __p) & 1) != 0)
                      goto LABEL_307;
                    goto LABEL_306;
                  }
                }
                else
                {
                  v114 = (_QWORD *)(__p[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFELL);
                  if ((__p[0].__r_.__value_.__s.__data_[8] & 1) == 0)
                    goto LABEL_225;
                }
                if (v113 != (_QWORD *)*v114)
                  goto LABEL_226;
                goto LABEL_302;
              }
              if (*((_BYTE *)v29 + 131))
              {
                v186[0] = &off_24F9853D0;
                v186[1] = &v176;
                v187 = v186;
                operations_research::sat::SharedResponseManager::AddSolutionCallback((uint64_t)&v204, v186);
                v115 = v187;
                if (v187 == v186)
                {
                  v116 = 4;
                  v115 = v186;
                  goto LABEL_256;
                }
                if (v187)
                {
                  v116 = 5;
LABEL_256:
                  (*(void (**)(void))(*v115 + 8 * v116))();
                }
              }
              if (*((int *)v29 + 104) > 1 || *((_BYTE *)v29 + 153))
              {
              }
              else
              {
                if (v36)
                {
                  google::LogMessage::LogMessage((google::LogMessage *)&v166, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 3023);
                  v135 = (absl::lts_2020_02_25 *)google::LogMessage::stream((google::LogMessage *)&v166);
                  v136 = v135;
                  if (v183[0])
                  {
                    v137 = absl::lts_2020_02_25::GetCurrentTimeNanos(v135);
                    v138 = v137 - (_QWORD)CurrentTimeNanos + v185;
                  }
                  else
                  {
                    v138 = v185;
                  }
                  v188 = (double)v138 * 0.000000001;
                  v189 = (uint64_t)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
                  absl::lts_2020_02_25::str_format_internal::FormatPack("*** starting to load the model at %.2fs", 39, (uint64_t)&v188, 1, (uint64_t)__p);
                  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v139 = __p;
                  else
                    v139 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v140 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                  else
                    v140 = __p[0].__r_.__value_.__l.__size_;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)v139, v140);
                  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p[0].__r_.__value_.__l.__data_);
                  google::LogMessage::~LogMessage((google::LogMessage *)&v166);
                }
                operations_research::sat::SharedResponseManager::LoadDebugSolution((operations_research::sat::SharedResponseManager *)&v204, a2);
                if (v36)
                {
                  google::LogMessage::LogMessage((google::LogMessage *)&v166, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 3029);
                  v142 = (absl::lts_2020_02_25 *)google::LogMessage::stream((google::LogMessage *)&v166);
                  v143 = v142;
                  if (v183[0])
                  {
                    v144 = absl::lts_2020_02_25::GetCurrentTimeNanos(v142);
                    v145 = v144 - (_QWORD)CurrentTimeNanos + v185;
                  }
                  else
                  {
                    v145 = v185;
                  }
                  v188 = (double)v145 * 0.000000001;
                  v189 = (uint64_t)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
                  absl::lts_2020_02_25::str_format_internal::FormatPack("*** starting sequential search at %.2fs", 39, (uint64_t)&v188, 1, (uint64_t)__p);
                  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v146 = __p;
                  else
                    v146 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v147 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                  else
                    v147 = __p[0].__r_.__value_.__l.__size_;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)v146, v147);
                  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p[0].__r_.__value_.__l.__data_);
                  google::LogMessage::~LogMessage((google::LogMessage *)&v166);
                  google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 3031);
                  v148 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"Initial num_BOOL: ", 18);
                  operations_research::sat::Model::Get<operations_research::sat::SatSolver>((uint64_t)a2);
                  std::ostream::operator<<();
                  google::LogMessage::~LogMessage((google::LogMessage *)__p);
                }
              }
              operations_research::sat::SharedResponseManager::GetResponse((operations_research::sat::SharedResponseManager *)&v204, v131, (operations_research::sat::CpSolverResponse *)__p);
              v132 = *(_QWORD *)(a3 + 8);
              v133 = (_QWORD *)(v132 & 0xFFFFFFFFFFFFFFFELL);
              if ((v132 & 1) != 0)
              {
                v133 = (_QWORD *)*v133;
                v134 = (_QWORD *)(__p[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFELL);
                if ((__p[0].__r_.__value_.__s.__data_[8] & 1) == 0)
                {
LABEL_262:
                  if (v133 != v134)
                  {
LABEL_263:
                    operations_research::sat::CpSolverResponse::CopyFrom((operations_research::sat::CpSolverResponse *)a3, (const operations_research::sat::CpSolverResponse *)__p);
                    goto LABEL_329;
                  }
LABEL_327:
                  if (__p != (std::string *)a3)
                    operations_research::sat::CpSolverResponse::InternalSwap((operations_research::sat::CpSolverResponse *)a3, (operations_research::sat::CpSolverResponse *)__p);
LABEL_329:
                  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)__p);
                  __p[0].__r_.__value_.__r.__words[0] = a3;
                  if (!v193)
                    std::__throw_bad_function_call[abi:ne180100]();
                  (*(void (**)(_QWORD *, std::string *))(*v193 + 48))(v193, __p);
                  v161 = *(int *)(a3 + 16);
                  if ((_DWORD)v161)
                  {
                    std::vector<long long>::vector<long long const*,0>(__p, *(_BYTE **)(a3 + 24), (_BYTE *)(*(_QWORD *)(a3 + 24) + 8 * v161));
                    IsFeasible = operations_research::sat::SolutionIsFeasible((uint64_t)this, (uint64_t)__p, 0, 0);
                    if (__p[0].__r_.__value_.__r.__words[0])
                    {
                      __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
                      operator delete(__p[0].__r_.__value_.__l.__data_);
                    }
                    if ((IsFeasible & 1) == 0)
                    {
LABEL_306:
                      *(_DWORD *)(a3 + 152) = 3;
LABEL_307:
                      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v211.__r_.__value_.__l.__data_);
                      v154 = (char *)v209;
                      if (!v209)
                      {
LABEL_320:
                        operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository(v208);
                        operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&v207);
                        absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&v206);
                        v66 = v167;
                        if (!v167)
                        {
LABEL_135:
                          v67 = v193;
                          if (v193 == v192)
                          {
                            v68 = 4;
                            v67 = v192;
                          }
                          else
                          {
                            if (!v193)
                              goto LABEL_140;
                            v68 = 5;
                          }
                          (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_140:
                          v54 = v170;
                          if (!v170)
                            goto LABEL_146;
                          goto LABEL_145;
                        }
LABEL_134:
                        v168 = v66;
                        operator delete(v66);
                        goto LABEL_135;
                      }
                      v155 = v210;
                      v156 = v209;
                      if (v210 == v209)
                      {
LABEL_319:
                        v210 = v154;
                        operator delete(v156);
                        goto LABEL_320;
                      }
                      while (1)
                      {
                        v157 = (char *)*((_QWORD *)v155 - 1);
                        if (v155 - 32 == v157)
                        {
                          v157 = v155 - 32;
                          v158 = 4;
                        }
                        else
                        {
                          if (!v157)
                            goto LABEL_314;
                          v158 = 5;
                        }
                        (*(void (**)(void))(*(_QWORD *)v157 + 8 * v158))();
LABEL_314:
                        v155 -= 40;
                        if (v155 == v154)
                        {
                          v156 = v209;
                          goto LABEL_319;
                        }
                      }
                    }
                    if ((v163 & 1) == 0)
                      goto LABEL_307;
                  }
                  else if (!v163)
                  {
                    goto LABEL_307;
                  }
                  if (*(_DWORD *)(a3 + 152) == 3)
                    google::protobuf::RepeatedField<int>::operator=((unsigned int *)(a3 + 112), (int *)this + 22);
                  goto LABEL_307;
                }
              }
              else
              {
                v134 = (_QWORD *)(__p[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFELL);
                if ((__p[0].__r_.__value_.__s.__data_[8] & 1) == 0)
                  goto LABEL_262;
              }
              if (v133 != (_QWORD *)*v134)
                goto LABEL_263;
              goto LABEL_327;
            }
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v188, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2978);
            v160 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v188);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"Check failed: (file::SetTextProto(mapping_file, mapping_proto, file::Defaults())).ok() ", 87);
          }
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v188);
        }
      }
      memmove(v79, v76, v78);
      goto LABEL_180;
    }
  }
  v124 = *((_QWORD *)this + 7);
  if (v124)
    v125 = v124 + 8;
  else
    v125 = 0;
  v126 = *((int *)this + 12);
  if ((_DWORD)v126)
  {
    v127 = 8 * v126;
    while ((*(_DWORD *)(*(_QWORD *)v125 + 60) - 3) < 2)
    {
      v125 += 8;
      v127 -= 8;
      if (!v127)
        goto LABEL_253;
    }
    goto LABEL_98;
  }
LABEL_253:
  operations_research::sat::CpSolverResponse::operator=((operations_research::sat::CpSolverResponse *)a3, (const operations_research::sat::CpSolverResponse *)&__dst);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&__dst);
  if (v183[0])
  {
    v128 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(v128);
    v130 = v128 - CurrentTimeNanos + v185;
  }
  else
  {
    v130 = v185;
  }
  *(double *)(a3 + 208) = (double)v130 * 0.000000001;
  if (v180)
  {
    v150 = absl::lts_2020_02_25::GetCurrentTimeNanos(v128);
    v151 = v150 - v181 + v182;
  }
  else
  {
    v151 = v182;
  }
  *(double *)(a3 + 216) = (double)v151 * 0.000000001;
  *(double *)(a3 + 224) = operations_research::SharedTimeLimit::GetElapsedDeterministicTime((operations_research::SharedTimeLimit *)&v176, v129);
  if (*((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2)
       + 130)
    && (operations_research::sat *)(a3 + 88) != (operations_research::sat *)((char *)this + 16))
  {
    google::protobuf::internal::RepeatedPtrFieldBase::CopyFrom<google::protobuf::RepeatedPtrField<operations_research::sat::IntegerVariableProto>::TypeHandler>(a3 + 88, (uint64_t)this + 16);
  }
LABEL_147:
  if (v198[0])
  {
    v198[0] = 0;
    if (!v200)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *))(*(_QWORD *)v200 + 48))(v200);
  }
  v70 = v200;
  if (v200 == v199)
  {
    v71 = 4;
    v70 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_155;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_155:
  if (v212[0])
  {
    v212[0] = 0;
    if (!v214)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *))(*(_QWORD *)v214 + 48))(v214);
  }
  v72 = v214;
  if (v214 == v213)
  {
    v73 = 4;
    v72 = v213;
  }
  else
  {
    if (!v214)
      goto LABEL_163;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_163:
  if (v179 == &v178)
    v177[15] = 0;
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&v176);
}

void sub_22DAFAE2C(_Unwind_Exception *a1)
{
  operations_research::sat::CpSolverResponse *v1;
  uint64_t v2;
  uint64_t v3;

  absl::Cleanup<std::function<void ()(void)>>::~Cleanup((uint64_t)&STACK[0x700]);
  absl::Cleanup<std::function<void ()(void)>>::~Cleanup(v3 - 152);
  operations_research::sat::CpSolverResponse::~CpSolverResponse(v1);
  if (STACK[0x3E8] == v2)
    *(_QWORD *)(STACK[0x3D8] + 120) = 0;
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&STACK[0x3D0]);
  _Unwind_Resume(a1);
}

uint64_t absl::Cleanup<std::function<void ()(void)>>::~Cleanup(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    v2 = *(_QWORD *)(a1 + 32);
    if (!v2)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  }
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == (_QWORD *)(a1 + 8))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 8);
    goto LABEL_8;
  }
  if (v3)
  {
    v4 = 5;
LABEL_8:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t absl::Cleanup<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0>::~Cleanup(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_0::operator()((const google::protobuf::Message **)(a1 + 8));
  }
  return a1;
}

_BYTE *absl::Cleanup<operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1>::~Cleanup(_BYTE *a1)
{
  if (*a1)
  {
    *a1 = 0;
    operations_research::sat::SolveCpModel(operations_research::sat::CpModelProto const&,operations_research::sat::Model *)::$_1::operator()((uint64_t)(a1 + 8));
  }
  return a1;
}

void operations_research::sat::`anonymous namespace'::SolvePureSatModel(operations_research::sat::CpSolverResponse *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  operations_research::sat::SatSolver *v7;
  operations_research::sat::SatParameters *v8;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v10;
  double v11;
  uint64_t v12;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13;
  uint64_t v14;
  operations_research::sat::DratProofHandler *v15;
  operations_research::sat::SatSolver *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int *v35;
  operations_research::sat::DratProofHandler *v36;
  uint64_t v37;
  int v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int *v43;
  int v44;
  int *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  int *v52;
  uint64_t v53;
  unint64_t v54;
  int *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  int *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  operations_research::sat::DratProofHandler *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int *v80;
  uint64_t v81;
  int v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int *v87;
  int v88;
  int *v89;
  int64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  int *v96;
  uint64_t v97;
  unint64_t v98;
  int *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  int *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  int v111;
  operations_research::sat::CpSolverResponse *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  const char *v118;
  const char *v119;
  int v120;
  uint64_t v121;
  _QWORD *v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  operations_research::sat::SatSolver *v127;
  operations_research::TimeLimit *v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  double *v140;
  const void *v141;
  uint64_t v142;
  size_t v143;
  char *v144;
  int v145;
  absl::lts_2020_02_25 *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  BOOL v152;
  _QWORD *v153;
  operations_research::sat::DratProofHandler *v154;
  int v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  absl::lts_2020_02_25 *v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  operations_research::sat::SatSolver *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  operations_research::sat::CpSolverResponse *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t *v180;
  File *v182[2];
  void *v183;
  void *v184;
  char *v185;
  void *v186;
  uint64_t v187;
  int *v188;
  uint64_t v189;
  operations_research::sat::DratProofHandler *v190;
  _BYTE v191[280];
  double v192;
  uint64_t v193;
  char v194;
  operations_research::sat::SatSolver *v195;
  char v196[8];
  uint64_t v197;
  int v198;
  const char *v199;
  void *__p;
  int v201;
  int v202;
  _QWORD *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  absl::lts_2020_02_25 *v208;
  uint64_t v209;
  double v210;
  uint64_t v211;
  uint64_t v212;

  v212 = *MEMORY[0x24BDAC8D0];
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v196, 0);
  v198 = 0;
  v7 = (operations_research::sat::SatSolver *)operator new();
  operations_research::sat::SatSolver::SatSolver(v7);
  v195 = v7;
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(a4);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v191, v8);
  operations_research::sat::SatSolver::SetParameters((operations_research::sat::SatParameters **)v195, (const operations_research::sat::SatParameters *)v191);
  CurrentTimeNanos = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a4);
  v10 = CurrentTimeNanos;
  v11 = v192;
  v12 = v193;
  *(_QWORD *)(CurrentTimeNanos + 112) = 0;
  *(_QWORD *)(CurrentTimeNanos + 104) = v12;
  *(_QWORD *)(CurrentTimeNanos + 128) = 0x7FF0000000000000;
  if (FLAGS_time_limit_use_usertime)
  {
    *(_BYTE *)(CurrentTimeNanos + 72) = 1;
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
    *(_QWORD *)(v10 + 80) = CurrentTimeNanos;
    *(double *)(v10 + 96) = v11;
  }
  v13 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
  v174 = a4;
  *(_QWORD *)v10 = v13;
  *(_QWORD *)(v10 + 8) = v13;
  v14 = v13 + (uint64_t)(v11 * 1000000000.0);
  if ((double)(v13 ^ 0x7FFFFFFFFFFFFFFFLL) * 0.000000001 <= v11)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v10 + 16) = v14;
  v190 = 0;
  v173 = a3;
  if (*FLAGS_drat_output | FLAGS_drat_check)
  {
    if (*FLAGS_drat_output)
    {
      v182[0] = 0;
      v199 = (const char *)FLAGS_drat_output;
      __p = (void *)strlen(FLAGS_drat_output);
      v186 = "w";
      v187 = 1;
      file::Open(&v199, (const char **)&v186, v182, 47802, &v189);
      if (v189)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v183, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1730);
        v170 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v183);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"Check failed: (file::Open(FLAGS_drat_output, \"w\", &output, file::Defaults())).ok() ", 83);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v183);
      }
      v15 = (operations_research::sat::DratProofHandler *)operator new();
      operations_research::sat::DratProofHandler::DratProofHandler(v15, 0, v182[0], FLAGS_drat_check);
    }
    else
    {
      v15 = (operations_research::sat::DratProofHandler *)operator new();
      operations_research::sat::DratProofHandler::DratProofHandler(v15);
    }
    v190 = v15;
    v16 = v195;
    *((_QWORD *)v195 + 165) = v15;
    *(_QWORD *)(*((_QWORD *)v16 + 4) + 384) = v15;
    *(_QWORD *)(*((_QWORD *)v16 + 3) + 136) = v15;
  }
  else
  {
    v15 = 0;
    v16 = v195;
  }
  v175 = a1;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v17 = *(unsigned int *)(a2 + 24);
  operations_research::sat::SatSolver::SetNumVariables(v16, *(_DWORD *)(a2 + 24));
  v176 = v17;
  if (!v15)
    goto LABEL_86;
  operations_research::sat::DratProofHandler::SetNumVariables(v15, v17);
  if ((int)v17 >= 1)
  {
    v19 = 0;
    v20 = 8;
    do
    {
      operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + v20) + 24), *(int *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + v20) + 16), (unint64_t *)&v199, v18);
      if (operations_research::Domain::IsFixed((operations_research::Domain *)&v199, v21))
      {
        if (operations_research::Domain::Min((operations_research::Domain *)&v199, v22))
          v23 = v19;
        else
          v23 = v19 + 1;
        LODWORD(v183) = v23;
        operations_research::sat::DratProofHandler::AddProblemClause((uint64_t)v190, (char *)&v183, 1);
      }
      if ((v199 & 1) != 0)
        operator delete(__p);
      v19 += 2;
      v20 += 8;
    }
    while (2 * v17 != v19);
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = v24 ? v24 + 8 : 0;
  v26 = *(int *)(a2 + 48);
  if (!(_DWORD)v26)
  {
LABEL_86:
    v69 = *(_QWORD *)(a2 + 56);
    if (v69)
      v70 = (uint64_t *)(v69 + 8);
    else
      v70 = 0;
    v71 = *(int *)(a2 + 48);
    if ((_DWORD)v71)
    {
      v180 = &v70[v71];
      while (1)
      {
        v73 = *v70;
        v74 = *(_DWORD *)(*v70 + 60);
        if (v74 == 3)
          break;
        if (v74 != 4)
        {
          v133 = operations_research::sat::CpSolverResponse::CpSolverResponse(v175, 0);
          v134 = *(_QWORD *)(v133 + 8);
          v135 = (_QWORD *)(v134 & 0xFFFFFFFFFFFFFFFELL);
          if ((v134 & 1) != 0)
          {
            v135 = (_QWORD *)*v135;
            v136 = (_QWORD *)(v197 & 0xFFFFFFFFFFFFFFFELL);
            if ((v197 & 1) == 0)
              goto LABEL_177;
          }
          else
          {
            v136 = (_QWORD *)(v197 & 0xFFFFFFFFFFFFFFFELL);
            if ((v197 & 1) == 0)
            {
LABEL_177:
              if (v135 != v136)
                goto LABEL_178;
              goto LABEL_236;
            }
          }
          if (v135 != (_QWORD *)*v136)
            goto LABEL_178;
LABEL_236:
          if (v196 == (char *)v133)
            goto LABEL_243;
          goto LABEL_237;
        }
        if (*(_DWORD *)(v73 + 16))
        {
          v75 = **(_DWORD **)(v73 + 24);
          v76 = 2 * v75;
          if (v75 < 0)
            v76 = (2 * ~v75) | 1;
          v77 = *(_QWORD *)(v73 + 48);
          v78 = *(int *)(v77 + 16);
          if ((_DWORD)v78)
          {
            v79 = v76 ^ 1;
            v80 = *(int **)(v77 + 24);
            v81 = 4 * v78;
            do
            {
              if (*v80 >= 0)
                v82 = 2 * *v80;
              else
                v82 = (2 * ~*v80) | 1;
              v199 = (const char *)__PAIR64__(v82, v79);
              operations_research::sat::SatSolver::AddProblemClause(v195, (int *)&v199, 2);
              ++v80;
              v81 -= 4;
            }
            while (v81);
          }
        }
        else
        {
          v107 = *(_QWORD *)(v73 + 48);
          v108 = *(int *)(v107 + 16);
          if ((_DWORD)v108)
          {
            v109 = *(int **)(v107 + 24);
            v110 = 4 * v108;
            do
            {
              if (*v109 >= 0)
                v111 = 2 * *v109;
              else
                v111 = (2 * ~*v109) | 1;
              operations_research::sat::SatSolver::AddUnitClause((uint64_t)v195, v111);
              ++v109;
              v110 -= 4;
            }
            while (v110);
          }
        }
LABEL_93:
        if (++v70 == v180)
          goto LABEL_149;
      }
      v178 = v70;
      v83 = (int *)v186;
      v187 = (uint64_t)v186;
      v84 = *(_QWORD *)(v73 + 48);
      v85 = *(int *)(v84 + 16);
      if (!(_DWORD)v85)
      {
        v72 = (int *)v186;
LABEL_92:
        operations_research::sat::SatSolver::AddProblemClause(v195, v72, v83 - v72);
        v70 = v178;
        goto LABEL_93;
      }
      v86 = *(int **)(v84 + 24);
      v87 = &v86[v85];
      while (1)
      {
        while (1)
        {
          v88 = *v86 >= 0 ? 2 * *v86 : (2 * ~*v86) | 1;
          if (v83 >= v188)
            break;
          *v83++ = v88;
          v187 = (uint64_t)v83;
          if (++v86 == v87)
            goto LABEL_91;
        }
        v89 = (int *)v186;
        v90 = (char *)v83 - (_BYTE *)v186;
        v91 = ((char *)v83 - (_BYTE *)v186) >> 2;
        v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v93 = (char *)v188 - (_BYTE *)v186;
        if (((char *)v188 - (_BYTE *)v186) >> 1 > v92)
          v92 = v93 >> 1;
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
          v94 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v94 = v92;
        if (v94)
        {
          if (v94 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v95 = operator new(4 * v94);
          v96 = (int *)&v95[4 * v91];
          *v96 = v88;
          v97 = (uint64_t)(v96 + 1);
          if (v83 == v89)
            goto LABEL_127;
        }
        else
        {
          v95 = 0;
          v96 = (int *)(4 * v91);
          *(_DWORD *)(4 * v91) = v88;
          v97 = 4 * v91 + 4;
          if (v83 == v89)
            goto LABEL_127;
        }
        v98 = (char *)(v83 - 1) - (char *)v89;
        if (v98 >= 0xBC)
        {
          if (&v95[v90 - 4 - (v98 & 0xFFFFFFFFFFFFFFFCLL)] > &v95[v90 - 4])
          {
            v99 = v83;
          }
          else if ((int *)((char *)v83 - (v98 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v83 - 1)
          {
            v99 = v83;
          }
          else if ((unint64_t)((char *)v83 - v95 - v90) >= 0x20)
          {
            v101 = (v98 >> 2) + 1;
            v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
            v99 = &v83[v102 / 0xFFFFFFFFFFFFFFFCLL];
            v96 = (int *)((char *)v96 - v102);
            v103 = &v95[4 * v91 - 16];
            v104 = v83 - 4;
            v105 = v101 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v106 = *(_OWORD *)v104;
              *(v103 - 1) = *((_OWORD *)v104 - 1);
              *v103 = v106;
              v103 -= 2;
              v104 -= 8;
              v105 -= 8;
            }
            while (v105);
            if (v101 == (v101 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_127;
          }
          else
          {
            v99 = v83;
          }
        }
        else
        {
          v99 = v83;
        }
        do
        {
          v100 = *--v99;
          *--v96 = v100;
        }
        while (v99 != v89);
LABEL_127:
        v186 = v96;
        v187 = v97;
        v188 = (int *)&v95[4 * v94];
        if (v89)
          operator delete(v89);
        v83 = (int *)v97;
        v187 = v97;
        if (++v86 == v87)
        {
LABEL_91:
          v72 = (int *)v186;
          v17 = v176;
          goto LABEL_92;
        }
      }
    }
LABEL_149:
    v112 = v175;
    v113 = v173;
    if ((int)v17 >= 1)
    {
      v114 = 0;
      v115 = 8;
      do
      {
        operations_research::Domain::FromFlatSpanOfIntervals(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + v115) + 24), *(int *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + v115) + 16), (unint64_t *)&v199, v18);
        v117 = operations_research::Domain::Min((operations_research::Domain *)&v199, v116);
        if (v117 == operations_research::Domain::Max((operations_research::Domain *)&v199, v118))
        {
          if (operations_research::Domain::Min((operations_research::Domain *)&v199, v119))
            v120 = v114;
          else
            v120 = v114 + 1;
          operations_research::sat::SatSolver::AddUnitClause((uint64_t)v195, v120);
        }
        if ((v199 & 1) != 0)
          operator delete(__p);
        v114 += 2;
        v115 += 8;
      }
      while (2 * v17 != v114);
    }
    operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)&v199, 0);
    v121 = v174;
    if (v194)
    {
      v183 = 0;
      v184 = 0;
      v185 = 0;
      v122 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(v174);
      v123 = operations_research::sat::SolveWithPresolve((uint64_t **)&v195, (uint64_t)v122, (uint64_t)&v183, (uint64_t)v190);
      if (v123 == 2)
      {
        v201 = 0;
        if ((int)v17 >= 1)
        {
          v124 = 0;
          do
          {
            v125 = *(_QWORD *)((char *)v183 + ((v124 >> 3) & 0x1FFFFFFFFFFFFFF8));
            v126 = v124 + 1;
            if ((_DWORD)v124 == v202)
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)&v201, v124 + 1);
            v203[v124] = (v125 >> v124) & 1;
            v201 = ++v124;
          }
          while (v17 != v126);
        }
      }
      if (v183)
        operator delete(v183);
      v121 = v174;
      v112 = v175;
      v113 = v173;
    }
    else
    {
      v127 = v195;
      v128 = (operations_research::TimeLimit *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(v174);
      v123 = operations_research::sat::SatSolver::SolveWithTimeLimit(v127, v128);
      if (v123 == 2)
      {
        v201 = 0;
        if ((int)v17 < 1)
        {
          v123 = 2;
        }
        else
        {
          v129 = 0;
          v130 = 0;
          do
          {
            v131 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v195 + 26) + 24)
                             + (((unint64_t)v129 >> 3) & 0x1FFFFFFFFFFFFFF8));
            v132 = v130 + 1;
            if ((_DWORD)v130 == v202)
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)&v201, v130 + 1);
            v203[v130] = (v131 >> (v129 & 0x3E)) & 1;
            v201 = v130 + 1;
            v129 += 2;
            ++v130;
          }
          while (v17 != v132);
          v123 = 2;
          v121 = v174;
        }
      }
    }
    v140 = (double *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(v121);
    v140[14] = *((double *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(_QWORD *)v195)
               + 14)
             + v140[14];
    switch(v123)
    {
      case 1:
        v145 = 3;
        goto LABEL_197;
      case 3:
        v145 = 0;
        goto LABEL_197;
      case 2:
        v141 = v203;
        v142 = v201;
        v184 = 0;
        v185 = 0;
        v183 = 0;
        if (v201)
        {
          if (v201 < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v143 = 8 * v201;
          v183 = operator new(v143);
          v184 = v183;
          v144 = (char *)v183 + 8 * v142;
          v185 = v144;
          memcpy(v183, v141, v143);
          v184 = v144;
        }
        v121 = v174;
        if ((operations_research::sat::SolutionIsFeasible(a2, (uint64_t)&v183, 0, 0) & 1) == 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v182, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1868);
          v172 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v182);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)"Check failed: SolutionIsFeasible(model_proto, std::vector<int64>(response.solution().begin(), response.solution().end())) ", 122);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v182);
        }
        if (v183)
        {
          v184 = v183;
          operator delete(v183);
        }
        v145 = 4;
LABEL_197:
        v204 = v145;
        v205 = *((int *)v195 + 4);
        v207 = operations_research::sat::SatSolver::num_branches(v195);
        v206 = operations_research::sat::SatSolver::num_failures(v195);
        v146 = (absl::lts_2020_02_25 *)operations_research::sat::SatSolver::num_propagations(v195);
        v208 = v146;
        v209 = 0;
        if (*(_BYTE *)v113)
        {
          v146 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(v146);
          v147 = (uint64_t)v146 + *(_QWORD *)(v113 + 16) - *(_QWORD *)(v113 + 8);
        }
        else
        {
          v147 = *(_QWORD *)(v113 + 16);
        }
        v210 = (double)v147 * 0.000000001;
        v150 = *(_QWORD **)(v121 + 32);
        v149 = v121 + 32;
        v148 = v150;
        do
        {
          v151 = v148[4];
          v152 = v151 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d;
          if (v151 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d)
            v153 = v148;
          else
            v153 = v148 + 1;
          if (v152)
            v149 = (uint64_t)v148;
          v148 = (_QWORD *)*v153;
        }
        while (*v153);
        v211 = *(_QWORD *)(*(_QWORD *)(v149 + 40) + 112);
        v154 = v190;
        if (v123 != 1)
        {
          if (!v190)
            goto LABEL_225;
          google::LogMessage::LogMessage((google::LogMessage *)&v183, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1911);
          v157 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v183);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)"DRAT status: NA", 15);
          google::LogMessage::~LogMessage((google::LogMessage *)&v183);
          google::LogMessage::LogMessage((google::LogMessage *)&v183, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1912);
          v158 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v183);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"DRAT wall time: NA", 18);
          google::LogMessage::~LogMessage((google::LogMessage *)&v183);
          google::LogMessage::LogMessage((google::LogMessage *)&v183, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1913);
          v159 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v183);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"DRAT user time: NA", 18);
LABEL_224:
          google::LogMessage::~LogMessage((google::LogMessage *)&v183);
LABEL_225:
          operations_research::sat::CpSolverResponse::CpSolverResponse(v112, 0);
          v167 = *((_QWORD *)v112 + 1);
          v168 = (_QWORD *)(v167 & 0xFFFFFFFFFFFFFFFELL);
          if ((v167 & 1) != 0)
          {
            v168 = (_QWORD *)*v168;
            v169 = (_QWORD *)((unint64_t)__p & 0xFFFFFFFFFFFFFFFELL);
            if ((__p & 1) == 0)
            {
LABEL_227:
              if (v168 != v169)
              {
LABEL_228:
                operations_research::sat::CpSolverResponse::CopyFrom(v112, (const operations_research::sat::CpSolverResponse *)&v199);
                goto LABEL_242;
              }
LABEL_231:
              if (&v199 != (const char **)v112)
                operations_research::sat::CpSolverResponse::InternalSwap(v112, (operations_research::sat::CpSolverResponse *)&v199);
              goto LABEL_242;
            }
          }
          else
          {
            v169 = (_QWORD *)((unint64_t)__p & 0xFFFFFFFFFFFFFFFELL);
            if ((__p & 1) == 0)
              goto LABEL_227;
          }
          if (v168 != (_QWORD *)*v169)
            goto LABEL_228;
          goto LABEL_231;
        }
        if (!v190)
          goto LABEL_225;
        absl::lts_2020_02_25::GetCurrentTimeNanos(v146);
        v155 = operations_research::sat::DratProofHandler::Check(v154, *(double *)&FLAGS_max_drat_time_in_seconds);
        if (v155)
        {
          if (v155 == 1)
          {
            google::LogMessage::LogMessage((google::LogMessage *)&v183, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1898);
            v163 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v183);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"DRAT status: VALID", 18);
          }
          else
          {
            if (v155 != 2)
            {
LABEL_223:
              google::LogMessage::LogMessage((google::LogMessage *)&v183, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1907);
              v165 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v183);
              v166 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)"DRAT wall time: ", 16);
              absl::lts_2020_02_25::GetCurrentTimeNanos(v166);
              std::ostream::operator<<();
              goto LABEL_224;
            }
            google::LogMessage::LogMessage((google::LogMessage *)&v183, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1901, 2);
            v156 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v183);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"DRAT status: INVALID", 20);
          }
        }
        else
        {
          google::LogMessage::LogMessage((google::LogMessage *)&v183, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1895);
          v164 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v183);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"DRAT status: UNKNOWN", 20);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)&v183);
        goto LABEL_223;
    }
    operations_research::sat::CpSolverResponse::CpSolverResponse(v112, 0);
    v160 = *((_QWORD *)v112 + 1);
    v161 = (_QWORD *)(v160 & 0xFFFFFFFFFFFFFFFELL);
    if ((v160 & 1) != 0)
    {
      v161 = (_QWORD *)*v161;
      v162 = (_QWORD *)(v197 & 0xFFFFFFFFFFFFFFFELL);
      if ((v197 & 1) == 0)
      {
LABEL_218:
        if (v161 != v162)
        {
LABEL_219:
          operations_research::sat::CpSolverResponse::CopyFrom(v112, (const operations_research::sat::CpSolverResponse *)v196);
LABEL_242:
          operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&v199);
          goto LABEL_243;
        }
LABEL_240:
        if (v196 != (char *)v112)
          operations_research::sat::CpSolverResponse::InternalSwap(v112, (operations_research::sat::CpSolverResponse *)v196);
        goto LABEL_242;
      }
    }
    else
    {
      v162 = (_QWORD *)(v197 & 0xFFFFFFFFFFFFFFFELL);
      if ((v197 & 1) == 0)
        goto LABEL_218;
    }
    if (v161 != (_QWORD *)*v162)
      goto LABEL_219;
    goto LABEL_240;
  }
  v179 = v25 + 8 * v26;
  while (1)
  {
    v28 = *(_QWORD *)v25;
    v29 = *(_DWORD *)(*(_QWORD *)v25 + 60);
    if (v29 == 3)
    {
      v177 = v25;
      v39 = (int *)v186;
      v187 = (uint64_t)v186;
      v40 = *(_QWORD *)(v28 + 48);
      v41 = *(int *)(v40 + 16);
      if (!(_DWORD)v41)
      {
        v27 = (char *)v186;
LABEL_29:
        operations_research::sat::DratProofHandler::AddProblemClause((uint64_t)v190, v27, ((char *)v39 - v27) >> 2);
        v25 = v177;
        goto LABEL_30;
      }
      v42 = *(int **)(v40 + 24);
      v43 = &v42[v41];
      while (1)
      {
        while (1)
        {
          v44 = *v42 >= 0 ? 2 * *v42 : (2 * ~*v42) | 1;
          if (v39 >= v188)
            break;
          *v39++ = v44;
          v187 = (uint64_t)v39;
          if (++v42 == v43)
            goto LABEL_28;
        }
        v45 = (int *)v186;
        v46 = (char *)v39 - (_BYTE *)v186;
        v47 = ((char *)v39 - (_BYTE *)v186) >> 2;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v49 = (char *)v188 - (_BYTE *)v186;
        if (((char *)v188 - (_BYTE *)v186) >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v51 = operator new(4 * v50);
          v52 = (int *)&v51[4 * v47];
          *v52 = v44;
          v53 = (uint64_t)(v52 + 1);
          if (v39 == v45)
            goto LABEL_64;
        }
        else
        {
          v51 = 0;
          v52 = (int *)(4 * v47);
          *(_DWORD *)(4 * v47) = v44;
          v53 = 4 * v47 + 4;
          if (v39 == v45)
            goto LABEL_64;
        }
        v54 = (char *)(v39 - 1) - (char *)v45;
        if (v54 >= 0xBC)
        {
          if (&v51[v46 - 4 - (v54 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v46 - 4])
          {
            v55 = v39;
          }
          else if ((int *)((char *)v39 - (v54 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v39 - 1)
          {
            v55 = v39;
          }
          else if ((unint64_t)((char *)v39 - v51 - v46) >= 0x20)
          {
            v57 = (v54 >> 2) + 1;
            v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
            v55 = &v39[v58 / 0xFFFFFFFFFFFFFFFCLL];
            v52 = (int *)((char *)v52 - v58);
            v59 = &v51[4 * v47 - 16];
            v60 = v39 - 4;
            v61 = v57 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v62 = *(_OWORD *)v60;
              *(v59 - 1) = *((_OWORD *)v60 - 1);
              *v59 = v62;
              v59 -= 2;
              v60 -= 8;
              v61 -= 8;
            }
            while (v61);
            if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_64;
          }
          else
          {
            v55 = v39;
          }
        }
        else
        {
          v55 = v39;
        }
        do
        {
          v56 = *--v55;
          *--v52 = v56;
        }
        while (v55 != v45);
LABEL_64:
        v186 = v52;
        v187 = v53;
        v188 = (int *)&v51[4 * v50];
        if (v45)
          operator delete(v45);
        v39 = (int *)v53;
        v187 = v53;
        if (++v42 == v43)
        {
LABEL_28:
          v27 = (char *)v186;
          v17 = v176;
          goto LABEL_29;
        }
      }
    }
    if (v29 != 4)
      break;
    if (*(_DWORD *)(v28 + 16))
    {
      v30 = **(_DWORD **)(v28 + 24);
      v31 = 2 * v30;
      if (v30 < 0)
        v31 = (2 * ~v30) | 1;
      v32 = *(_QWORD *)(v28 + 48);
      v33 = *(int *)(v32 + 16);
      if ((_DWORD)v33)
      {
        v34 = v31 ^ 1;
        v35 = *(int **)(v32 + 24);
        v36 = v190;
        v37 = 4 * v33;
        do
        {
          if (*v35 >= 0)
            v38 = 2 * *v35;
          else
            v38 = (2 * ~*v35) | 1;
          v199 = (const char *)__PAIR64__(v38, v34);
          operations_research::sat::DratProofHandler::AddProblemClause((uint64_t)v36, (char *)&v199, 2);
          ++v35;
          v37 -= 4;
        }
        while (v37);
      }
    }
    else
    {
      v63 = *(_QWORD *)(v28 + 48);
      v64 = *(int *)(v63 + 16);
      if ((_DWORD)v64)
      {
        v65 = *(int **)(v63 + 24);
        v66 = v190;
        v67 = 4 * v64;
        do
        {
          if (*v65 >= 0)
            v68 = 2 * *v65;
          else
            v68 = (2 * ~*v65) | 1;
          LODWORD(v199) = v68;
          operations_research::sat::DratProofHandler::AddProblemClause((uint64_t)v66, (char *)&v199, 1);
          ++v65;
          v67 -= 4;
        }
        while (v67);
      }
    }
LABEL_30:
    v25 += 8;
    if (v25 == v179)
      goto LABEL_86;
  }
  v133 = operations_research::sat::CpSolverResponse::CpSolverResponse(v175, 0);
  v137 = *(_QWORD *)(v133 + 8);
  v138 = (_QWORD *)(v137 & 0xFFFFFFFFFFFFFFFELL);
  if ((v137 & 1) == 0)
  {
    v139 = (_QWORD *)(v197 & 0xFFFFFFFFFFFFFFFELL);
    if ((v197 & 1) == 0)
      goto LABEL_181;
LABEL_252:
    if (v138 == (_QWORD *)*v139)
      goto LABEL_253;
LABEL_178:
    operations_research::sat::CpSolverResponse::CopyFrom((operations_research::sat::CpSolverResponse *)v133, (const operations_research::sat::CpSolverResponse *)v196);
    goto LABEL_243;
  }
  v138 = (_QWORD *)*v138;
  v139 = (_QWORD *)(v197 & 0xFFFFFFFFFFFFFFFELL);
  if ((v197 & 1) != 0)
    goto LABEL_252;
LABEL_181:
  if (v138 != v139)
    goto LABEL_178;
LABEL_253:
  if (v196 != (char *)v133)
LABEL_237:
    operations_research::sat::CpSolverResponse::InternalSwap((operations_research::sat::CpSolverResponse *)v133, (operations_research::sat::CpSolverResponse *)v196);
LABEL_243:
  if (v186)
  {
    v187 = (uint64_t)v186;
    operator delete(v186);
  }
  if (v190)
  {
    operations_research::sat::DratProofHandler::~DratProofHandler(v190);
    MEMORY[0x22E31DF78]();
  }
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v191);
  v171 = v195;
  v195 = 0;
  if (v171)
  {
    operations_research::sat::SatSolver::~SatSolver(v171);
    MEMORY[0x22E31DF78]();
  }
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v196);
}

void sub_22DAFC594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,operations_research::sat::DratProofHandler *a25,__int16 a26)
{
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&STACK[0x3C8]);
  if (__p)
    operator delete(__p);
  std::unique_ptr<operations_research::sat::DratProofHandler>::~unique_ptr[abi:ne180100](&a25);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&a26);
  std::unique_ptr<operations_research::sat::SatSolver>::~unique_ptr[abi:ne180100]((operations_research::sat::SatSolver **)&STACK[0x2C8]);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

operations_research::sat::CpSolverResponse *operations_research::sat::CpSolverResponse::operator=(operations_research::sat::CpSolverResponse *this, const operations_research::sat::CpSolverResponse *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 1);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if ((v3 & 1) == 0)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 1) == 0)
      goto LABEL_3;
LABEL_6:
    if (v4 != (_QWORD *)*v6)
      goto LABEL_4;
    goto LABEL_7;
  }
  v4 = (_QWORD *)*v4;
  v7 = *((_QWORD *)a2 + 1);
  v6 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
  if ((v7 & 1) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 != v6)
  {
LABEL_4:
    operations_research::sat::CpSolverResponse::CopyFrom(this, a2);
    return this;
  }
LABEL_7:
  if (this != a2)
    operations_research::sat::CpSolverResponse::InternalSwap(this, a2);
  return this;
}

double operations_research::SharedTimeLimit::GetElapsedDeterministicTime(operations_research::SharedTimeLimit *this, absl::lts_2020_02_25::Mutex *a2)
{
  double v3;
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  absl::lts_2020_02_25::Mutex::ReaderLock(this, a2);
  v3 = *(double *)(*((_QWORD *)this + 1) + 112);
  absl::lts_2020_02_25::Mutex::ReaderUnlock(this, v4, v5, v6, v7, v8, v9, v10);
  return v3;
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::SharedResponseManager>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE v17[16];

  v3 = result;
  v5 = (uint64_t **)(result + 4);
  v4 = (uint64_t *)result[4];
  if (v4)
  {
    v6 = result + 4;
    v7 = (_QWORD *)result[4];
    do
    {
      v8 = v7[4];
      v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        v6 = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v4;
        v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
          break;
        v4 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_19;
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d)
        break;
      v4 = v12[1];
      if (!v4)
      {
        v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v12 = (uint64_t **)(result + 4);
LABEL_19:
    v14 = (uint64_t *)v12;
    v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::SharedResponseManager>(void)::d;
    v12[5] = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v5 = (uint64_t *)v12;
    v15 = *(_QWORD *)v3[3];
    v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      v16 = *v5;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_22DAFC9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

_QWORD *operations_research::sat::Model::GetOrCreate<operations_research::sat::SolutionObservers>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SolutionObservers>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SolutionObservers>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SolutionObservers>(void)::d)
    return (_QWORD *)v4[5];
LABEL_12:
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SolutionObservers>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SolutionObservers>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::SolutionObservers>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F985040;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

uint64_t operations_research::SharedTimeLimit::LimitReached(operations_research::SharedTimeLimit *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25 *v3;
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  uint64_t v15;
  absl::lts_2020_02_25 *v16;
  uint64_t v17;
  double v18;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19;
  double v20;
  uint64_t v21;

  v3 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::Mutex::Lock(this, a2);
  v11 = *((_QWORD *)this + 1);
  v12 = *(unsigned __int8 **)(v11 + 120);
  if (v12 && (v13 = atomic_load(v12), (v13 & 1) != 0)
    || fmax(*(double *)(v11 + 104) - *(double *)(v11 + 112), 0.0) <= 0.0)
  {
    v17 = 1;
  }
  else
  {
    CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v3);
    if (*(_QWORD *)(v11 + 24) <= CurrentTimeNanos - *(_QWORD *)(v11 + 8))
      v15 = CurrentTimeNanos - *(_QWORD *)(v11 + 8);
    else
      v15 = *(_QWORD *)(v11 + 24);
    operations_research::RunningMax<long long>::Add((int *)(v11 + 32), v15);
    *(_QWORD *)(v11 + 8) = CurrentTimeNanos;
    if (*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8 * *(int *)(v11 + 68)) + CurrentTimeNanos >= *(_QWORD *)(v11 + 16))
    {
      if (FLAGS_time_limit_use_usertime
        && ((v18 = *(double *)(v11 + 96), !*(_BYTE *)(v11 + 72))
          ? (v19 = *(_QWORD *)(v11 + 88))
          : (v19 = absl::lts_2020_02_25::GetCurrentTimeNanos(v16) - *(_QWORD *)(v11 + 80) + *(_QWORD *)(v11 + 88)),
            v20 = v18 + (double)v19 * -0.000000001,
            v20 > 0.0001))
      {
        v17 = 0;
        v21 = *(_QWORD *)(v11 + 8) + (uint64_t)(v20 * 1000000000.0);
      }
      else
      {
        v21 = 0;
        v17 = 1;
      }
      *(_QWORD *)(v11 + 16) = v21;
    }
    else
    {
      v17 = 0;
    }
  }
  absl::lts_2020_02_25::Mutex::Unlock(this, v4, v5, v6, v7, v8, v9, v10);
  return v17;
}

void sub_22DAFCC88(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

operations_research::sat::SharedBoundsManager *operations_research::sat::`anonymous namespace'::SolveCpModelParallel(const operations_research::sat::CpModelProto *a1, uint64_t *a2, operations_research::SharedTimeLimit *a3, uint64_t a4, uint64_t *a5)
{
  operations_research::sat::SatParameters *v9;
  std::string::size_type v10;
  int v11;
  operations_research::sat::SharedBoundsManager *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  std::string::size_type v21;
  void *v22;
  uint64_t *v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  uint64_t **v27;
  void *v28;
  __int128 *v29;
  __int128 *p_p;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  void *v35;
  uint64_t *v36;
  uint64_t *v37;
  void *v38;
  uint64_t *v39;
  _QWORD *v40;
  absl::lts_2020_02_25::Mutex *v41;
  absl::lts_2020_02_25::Mutex *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  operations_research::sat::Model *v49;
  operations_research::sat::_anonymous_namespace_ **v50;
  const operations_research::sat::CpModelProto *v51;
  uint64_t *v52;
  uint64_t *v53;
  std::string::size_type v54;
  operations_research::sat::SharedBoundsManager *v55;
  operations_research::sat::NeighborhoodGeneratorHelper *v56;
  uint64_t *v57;
  uint64_t *v58;
  std::string::size_type v59;
  unsigned int v60;
  int v61;
  std::string::size_type size;
  std::string *v65;
  uint64_t v66;
  std::string *v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  std::string::size_type v72;
  std::string *v73;
  uint64_t v74;
  std::string *v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  std::string::size_type v80;
  std::string *v81;
  uint64_t v82;
  std::string *v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  std::string::size_type v89;
  std::string *v90;
  uint64_t v91;
  std::string *v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  std::string::size_type v97;
  std::string *v98;
  uint64_t v99;
  std::string *v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  std::string::size_type v105;
  std::string *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  std::string::size_type v112;
  std::string *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  std::string::size_type v119;
  std::string *v120;
  uint64_t v121;
  std::string *v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  std::string::size_type v127;
  std::string *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  std::string::size_type v136;
  char *v137;
  uint64_t *v138;
  uint64_t v139;
  __int128 v140;
  std::string::size_type v141;
  uint64_t v142;
  __int128 v143;
  _OWORD *v144;
  __int128 v145;
  absl::lts_2020_02_25 *v146;
  absl::lts_2020_02_25 *v147;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v148;
  void *v149;
  uint64_t v150;
  void **v151;
  void **v152;
  uint64_t *v153;
  uint64_t *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  void **v158;
  char *v159;
  char *v160;
  void *v161;
  char *v162;
  void *v163;
  void *v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t *v167;
  _QWORD *v168;
  operations_research::sat::SharedBoundsManager *result;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  std::string::size_type v173;
  _BOOL4 inited;
  uint64_t v175;
  std::string v177;
  _QWORD *v178;
  std::string v179;
  void *v180;
  uint64_t *v181;
  unint64_t v182;
  _QWORD v183[4];
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  void **v188;
  uint64_t *v189;
  uint64_t *v190;
  operations_research::sat::SharedBoundsManager *v191;
  uint64_t v192;
  void *v193;
  std::string::size_type v194;
  unsigned __int8 v195;
  __int128 __p;
  unint64_t v197;
  __int128 *v198;
  std::string v199;
  BOOL (*v200)(int, uint64_t, unsigned int, char *);
  std::string *v201;
  uint64_t (*v202)(uint64_t, uint64_t, int, char *);
  char v203;
  char v204;
  int v205;
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v199, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2455);
    v170 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v199);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"Check failed: shared_response_manager != nullptr ", 49);
    goto LABEL_321;
  }
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a5);
  v10 = *((unsigned int *)v9 + 104);
  if (*((_BYTE *)v9 + 99))
    goto LABEL_3;
  {
    inited = 0;
  }
  else
  {
    {
LABEL_3:
      inited = 1;
      goto LABEL_4;
    }
  }
LABEL_4:
  if (*((_BYTE *)v9 + 129))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v199, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2459);
    v171 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v199);
    v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"Check failed: !parameters.enumerate_all_solutions() ", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)"Enumerating all solutions in parallel is not supported.", 55);
LABEL_321:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v199);
  }
  v175 = a4;
  v11 = v10;
  if (*((_BYTE *)v9 + 153))
  {
    if (*((_BYTE *)v9 + 154))
      v11 = 5;
    else
      v11 = 9;
  }
  v191 = 0;
  if (*((_BYTE *)v9 + 427))
  {
    v12 = (operations_research::sat::SharedBoundsManager *)operator new();
    operations_research::sat::SharedBoundsManager::SharedBoundsManager(v12, a1);
    v191 = v12;
  }
  v190 = 0;
  if (*((_BYTE *)v9 + 149))
  {
    v13 = (uint64_t *)operator new();
    operations_research::sat::SharedSolutionRepository<long long>::SharedSolutionRepository((uint64_t)v13, 10);
    v190 = v13;
    operations_research::sat::Model::Register<operations_research::sat::SharedRelaxationSolutionRepository>(a5, v13);
  }
  v14 = (uint64_t *)operator new();
  operations_research::sat::SharedSolutionRepository<double>::SharedSolutionRepository((uint64_t)v14, 10);
  v189 = v14;
  operations_research::sat::Model::Register<operations_research::sat::SharedLPSolutionRepository>(a5, v14);
  v188 = 0;
  v173 = v10;
  if (!*((_BYTE *)v9 + 501) || *((int *)v9 + 99) < 1 || *((_BYTE *)v9 + 155) || *((_BYTE *)v9 + 153))
  {
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v15 = operator new();
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    v188 = (void **)v15;
    operations_research::sat::Model::Register<operations_research::sat::SharedIncompleteSolutionManager>(a5, (uint64_t *)v15);
    v16 = 1;
  }
  v183[0] = a1;
  v183[1] = v175;
  v183[2] = a3;
  v183[3] = v191;
  v184 = a2;
  v185 = v190;
  v186 = v189;
  v187 = (uint64_t *)v15;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v17 = operator new();
  v18 = operator new(0x28uLL);
  *v18 = &off_24F984620;
  v18[1] = a2;
  v18[2] = &v191;
  v18[3] = &v190;
  v18[4] = &v189;
  *(_BYTE *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 39) = 0;
  *(_QWORD *)(v17 + 31) = 0;
  *(_BYTE *)(v17 + 47) = 0;
  *(_QWORD *)v17 = off_24F9846A0;
  *(_QWORD *)(v17 + 72) = v18;
  v199.__r_.__value_.__r.__words[0] = v17;
  v19 = v181;
  if ((unint64_t)v181 >= v182)
  {
    v20 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v199);
  }
  else
  {
    v199.__r_.__value_.__r.__words[0] = 0;
    *v181 = v17;
    v20 = v19 + 1;
  }
  v181 = v20;
  v21 = v199.__r_.__value_.__r.__words[0];
  v199.__r_.__value_.__r.__words[0] = 0;
  if (v21)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v21 + 8))(v21);
  if (*((_BYTE *)v9 + 155))
  {
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&v199, v9);
    v203 = 1;
    LODWORD(v199.__r_.__value_.__r.__words[2]) |= 0x400000u;
    LODWORD(v200) = v200 | 0x4000000;
    v205 = 0;
    v22 = (void *)operator new();
    HIBYTE(v197) = 14;
    strcpy((char *)&__p, "first_solution");
    if (SHIBYTE(v197) < 0)
    {
      operator delete((void *)__p);
      v193 = v22;
      v23 = v181;
      if ((unint64_t)v181 < v182)
        goto LABEL_26;
    }
    else
    {
      v193 = v22;
      v23 = v181;
      if ((unint64_t)v181 < v182)
      {
LABEL_26:
        v193 = 0;
        *v23 = (uint64_t)v22;
        v24 = v23 + 1;
LABEL_36:
        v181 = v24;
        v25 = v193;
        v193 = 0;
        if (v25)
          (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
        operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v199);
        goto LABEL_39;
      }
    }
    v24 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v193);
    goto LABEL_36;
  }
  if ((a1 == (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_
     || !*((_QWORD *)a1 + 15))
    && (*((_BYTE *)v9 + 500) || *((_BYTE *)v9 + 149)))
  {
    if (v11 <= 2)
      v32 = 2;
    else
      v32 = v11;
    v11 = v32 - 1;
  }
  else if (v11 < 1)
  {
    goto LABEL_39;
  }
  v33 = 0;
  do
  {
    __p = 0uLL;
    v197 = 0;
    operations_research::sat::DiversifySearchParameters((uint64_t)v9, (uint64_t)a1, v33, (uint64_t)&__p, (uint64_t)&v199);
    if (!v204 && !*((_BYTE *)v9 + 128))
    {
      v34 = *((unsigned __int8 *)v9 + 153);
      v35 = (void *)operator new();
      v193 = v35;
      v36 = v181;
      if ((unint64_t)v181 >= v182)
      {
        v37 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v193);
      }
      else
      {
        v193 = 0;
        *v181 = (uint64_t)v35;
        v37 = v36 + 1;
      }
      v181 = v37;
      v38 = v193;
      v193 = 0;
      if (v38)
        (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
    }
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v199);
    if (SHIBYTE(v197) < 0)
      operator delete((void *)__p);
    ++v33;
  }
  while (v11 != v33);
LABEL_39:
  if (v16)
  {
    v26 = operator new();
    strcpy((char *)(v26 + 8), "feasibility_pump");
    *(_BYTE *)(v26 + 31) = 16;
    *(_QWORD *)v26 = off_24F984918;
    *(_QWORD *)(v26 + 40) = 0;
    *(_QWORD *)(v26 + 48) = v183;
    v27 = (uint64_t **)(v26 + 56);
    *(_QWORD *)(v26 + 32) = 0;
    std::make_unique[abi:ne180100]<operations_research::sat::Model,std::string const&>(v26 + 8, (std::string **)(v26 + 56));
    *(_QWORD *)(v26 + 64) = 0;
    *(_BYTE *)(v26 + 72) = 1;
    *(_QWORD *)(v26 + 80) = 0;
    *(_BYTE *)(v26 + 88) = 1;
    v28 = *(void **)(v26 + 56);
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)&v199, v9);
    v198 = 0;
    v29 = (__int128 *)operator new(0x248uLL);
    *(_QWORD *)v29 = &off_24F985078;
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)((char *)v29 + 8), (const operations_research::sat::SatParameters *)&v199);
    v198 = v29;
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v199);
    v193 = v28;
    if (!v198)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(std::string *__return_ptr, __int128 *, void **))(*(_QWORD *)v198 + 48))(&v199, v198, &v193);
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v199);
    p_p = v198;
    if (v198 == &__p)
    {
      v31 = 4;
      p_p = &__p;
    }
    else
    {
      if (!v198)
      {
LABEL_63:
        v39 = *(uint64_t **)(*(_QWORD *)(v26 + 48) + 16);
        v40 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(_QWORD *)(v26 + 56));
        absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v39, v41);
        operations_research::TimeLimit::MergeWithGlobalTimeLimit((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v40, v39[1]);
        absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v39, v42, v43, v44, v45, v46, v47, v48);
        if (v184)
          operations_research::sat::Model::Register<operations_research::sat::SharedResponseManager>(*v27, v184);
        if (v185)
          operations_research::sat::Model::Register<operations_research::sat::SharedRelaxationSolutionRepository>(*v27, v185);
        if (v186)
          operations_research::sat::Model::Register<operations_research::sat::SharedLPSolutionRepository>(*v27, v186);
        if (v187)
          operations_research::sat::Model::Register<operations_research::sat::SharedIncompleteSolutionManager>(*v27, v187);
        v50 = *(operations_research::sat::_anonymous_namespace_ ***)(v26 + 48);
        v51 = v50[3];
        if (v51)
        v179.__r_.__value_.__r.__words[0] = v26;
        v52 = v181;
        if ((unint64_t)v181 >= v182)
        {
          v53 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v179);
        }
        else
        {
          v179.__r_.__value_.__r.__words[0] = 0;
          *v181 = v26;
          v53 = v52 + 1;
        }
        v181 = v53;
        v54 = v179.__r_.__value_.__r.__words[0];
        v179.__r_.__value_.__r.__words[0] = 0;
        if (v54)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v54 + 8))(v54);
        goto LABEL_78;
      }
      v31 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)p_p + 8 * v31))();
    goto LABEL_63;
  }
LABEL_78:
  v55 = v191;
  v56 = (operations_research::sat::NeighborhoodGeneratorHelper *)operator new();
  operations_research::sat::NeighborhoodGeneratorHelper::NeighborhoodGeneratorHelper(v56, a1, v9, (operations_research::sat::SharedResponseManager *)a2, a3, v55);
  v199.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  v57 = v181;
  if ((unint64_t)v181 >= v182)
  {
    v58 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v199);
  }
  else
  {
    v199.__r_.__value_.__r.__words[0] = 0;
    *v181 = (uint64_t)v56;
    v58 = v57 + 1;
  }
  v181 = v58;
  v59 = v199.__r_.__value_.__r.__words[0];
  v199.__r_.__value_.__r.__words[0] = 0;
  if (v59)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v59 + 8))(v59);
  v60 = 0;
  v61 = *((unsigned __int8 *)v9 + 150);
  do
  {
    memset(&v179, 0, sizeof(v179));
    operations_research::sat::DiversifySearchParameters((uint64_t)v9, (uint64_t)a1, v60, (uint64_t)&v179, (uint64_t)&v199);
    if (v204)
      goto LABEL_85;
    if (a1 == (const operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_
      || *((_QWORD *)a1 + 15) == 0)
    {
      goto LABEL_325;
    }
    *(_QWORD *)&__p = "rnd_lns_";
    *((_QWORD *)&__p + 1) = 8;
    size = HIBYTE(v179.__r_.__value_.__r.__words[2]);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v179;
    else
      v65 = (std::string *)v179.__r_.__value_.__r.__words[0];
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v179.__r_.__value_.__l.__size_;
    v193 = v65;
    v194 = size;
    absl::lts_2020_02_25::StrCat((uint64_t)&__p, (uint64_t)&v193, &v177);
    v66 = operator new();
    *(_QWORD *)v66 = off_24F982810;
    v67 = (std::string *)(v66 + 8);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v67, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v67->__r_.__value_.__l.__data_ = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
      *(_QWORD *)(v66 + 24) = *((_QWORD *)&v177.__r_.__value_.__l + 2);
    }
    *(_QWORD *)(v66 + 32) = v56;
    *(_OWORD *)(v66 + 40) = 0u;
    *(_OWORD *)(v66 + 56) = 0u;
    *(_QWORD *)(v66 + 72) = 0x3FE0000000000000;
    *(_QWORD *)(v66 + 80) = 0;
    *(_QWORD *)(v66 + 88) = 0x3FB999999999999ALL;
    *(_OWORD *)(v66 + 96) = 0u;
    *(_OWORD *)(v66 + 112) = 0u;
    *(_QWORD *)(v66 + 128) = 0;
    *(_QWORD *)v66 = &unk_24F982860;
    v68 = (_QWORD *)operator new();
    v192 = v66;
    if (v192)
      (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
    v178 = v68;
    v69 = v181;
    if ((unint64_t)v181 >= v182)
    {
      v70 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v178);
    }
    else
    {
      v178 = 0;
      *v181 = (uint64_t)v68;
      v70 = v69 + 1;
    }
    v181 = v70;
    v71 = (uint64_t)v178;
    v178 = 0;
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v177.__r_.__value_.__l.__data_);
    *(_QWORD *)&__p = "var_lns_";
    *((_QWORD *)&__p + 1) = 8;
    v72 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &v179;
    else
      v73 = (std::string *)v179.__r_.__value_.__r.__words[0];
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v72 = v179.__r_.__value_.__l.__size_;
    v193 = v73;
    v194 = v72;
    absl::lts_2020_02_25::StrCat((uint64_t)&__p, (uint64_t)&v193, &v177);
    v74 = operator new();
    *(_QWORD *)v74 = off_24F982810;
    v75 = (std::string *)(v74 + 8);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v75, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v75->__r_.__value_.__l.__data_ = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
      *(_QWORD *)(v74 + 24) = *((_QWORD *)&v177.__r_.__value_.__l + 2);
    }
    *(_QWORD *)(v74 + 32) = v56;
    *(_OWORD *)(v74 + 40) = 0u;
    *(_OWORD *)(v74 + 56) = 0u;
    *(_QWORD *)(v74 + 72) = 0x3FE0000000000000;
    *(_QWORD *)(v74 + 80) = 0;
    *(_QWORD *)(v74 + 88) = 0x3FB999999999999ALL;
    *(_OWORD *)(v74 + 96) = 0u;
    *(_OWORD *)(v74 + 112) = 0u;
    *(_QWORD *)(v74 + 128) = 0;
    *(_QWORD *)v74 = &unk_24F9828B8;
    v76 = (_QWORD *)operator new();
    v192 = v74;
    if (v192)
      (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
    v178 = v76;
    v77 = v181;
    if ((unint64_t)v181 >= v182)
    {
      v78 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v178);
    }
    else
    {
      v178 = 0;
      *v181 = (uint64_t)v76;
      v78 = v77 + 1;
    }
    v181 = v78;
    v79 = (uint64_t)v178;
    v178 = 0;
    if (v79)
      (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v177.__r_.__value_.__l.__data_);
    *(_QWORD *)&__p = "cst_lns_";
    *((_QWORD *)&__p + 1) = 8;
    v80 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = &v179;
    else
      v81 = (std::string *)v179.__r_.__value_.__r.__words[0];
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v80 = v179.__r_.__value_.__l.__size_;
    v193 = v81;
    v194 = v80;
    absl::lts_2020_02_25::StrCat((uint64_t)&__p, (uint64_t)&v193, &v177);
    v82 = operator new();
    *(_QWORD *)v82 = off_24F982810;
    v83 = (std::string *)(v82 + 8);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v83, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v83->__r_.__value_.__l.__data_ = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
      *(_QWORD *)(v82 + 24) = *((_QWORD *)&v177.__r_.__value_.__l + 2);
    }
    *(_QWORD *)(v82 + 32) = v56;
    *(_OWORD *)(v82 + 40) = 0u;
    *(_OWORD *)(v82 + 56) = 0u;
    *(_QWORD *)(v82 + 72) = 0x3FE0000000000000;
    *(_QWORD *)(v82 + 80) = 0;
    *(_QWORD *)(v82 + 88) = 0x3FB999999999999ALL;
    *(_OWORD *)(v82 + 96) = 0u;
    *(_OWORD *)(v82 + 112) = 0u;
    *(_QWORD *)(v82 + 128) = 0;
    *(_QWORD *)v82 = &unk_24F982910;
    v84 = (_QWORD *)operator new();
    v192 = v82;
    if (v192)
      (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
    v178 = v84;
    v85 = v181;
    if ((unint64_t)v181 >= v182)
    {
      v86 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v178);
    }
    else
    {
      v178 = 0;
      *v181 = (uint64_t)v84;
      v86 = v85 + 1;
    }
    v181 = v86;
    v87 = (uint64_t)v178;
    v178 = 0;
    if (v87)
      (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v177.__r_.__value_.__l.__data_);
    v88 = *((_QWORD *)v56 + 32);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v56 + 33) - v88) >> 3) < 0x15
      || *(_QWORD *)(v88 + 488) == *(_QWORD *)(v88 + 480))
    {
      goto LABEL_325;
    }
    *(_QWORD *)&__p = "scheduling_time_window_lns_";
    *((_QWORD *)&__p + 1) = 27;
    v89 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v90 = &v179;
    else
      v90 = (std::string *)v179.__r_.__value_.__r.__words[0];
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v89 = v179.__r_.__value_.__l.__size_;
    v193 = v90;
    v194 = v89;
    absl::lts_2020_02_25::StrCat((uint64_t)&__p, (uint64_t)&v193, &v177);
    v91 = operator new();
    *(_QWORD *)v91 = off_24F982810;
    v92 = (std::string *)(v91 + 8);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v92, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v92->__r_.__value_.__l.__data_ = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
      *(_QWORD *)(v91 + 24) = *((_QWORD *)&v177.__r_.__value_.__l + 2);
    }
    *(_QWORD *)(v91 + 32) = v56;
    *(_OWORD *)(v91 + 40) = 0u;
    *(_OWORD *)(v91 + 56) = 0u;
    *(_QWORD *)(v91 + 72) = 0x3FE0000000000000;
    *(_QWORD *)(v91 + 80) = 0;
    *(_QWORD *)(v91 + 88) = 0x3FB999999999999ALL;
    *(_OWORD *)(v91 + 96) = 0u;
    *(_OWORD *)(v91 + 112) = 0u;
    *(_QWORD *)(v91 + 128) = 0;
    *(_QWORD *)v91 = &unk_24F9829C0;
    v93 = (_QWORD *)operator new();
    v192 = v91;
    if (v192)
      (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
    v178 = v93;
    v94 = v181;
    if ((unint64_t)v181 >= v182)
    {
      v95 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v178);
    }
    else
    {
      v178 = 0;
      *v181 = (uint64_t)v93;
      v95 = v94 + 1;
    }
    v181 = v95;
    v96 = (uint64_t)v178;
    v178 = 0;
    if (v96)
      (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v177.__r_.__value_.__l.__data_);
    *(_QWORD *)&__p = "scheduling_random_lns_";
    *((_QWORD *)&__p + 1) = 22;
    v97 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v98 = &v179;
    else
      v98 = (std::string *)v179.__r_.__value_.__r.__words[0];
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v97 = v179.__r_.__value_.__l.__size_;
    v193 = v98;
    v194 = v97;
    absl::lts_2020_02_25::StrCat((uint64_t)&__p, (uint64_t)&v193, &v177);
    v99 = operator new();
    *(_QWORD *)v99 = off_24F982810;
    v100 = (std::string *)(v99 + 8);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v100, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v100->__r_.__value_.__l.__data_ = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
      *(_QWORD *)(v99 + 24) = *((_QWORD *)&v177.__r_.__value_.__l + 2);
    }
    *(_QWORD *)(v99 + 32) = v56;
    *(_OWORD *)(v99 + 40) = 0u;
    *(_OWORD *)(v99 + 56) = 0u;
    *(_QWORD *)(v99 + 72) = 0x3FE0000000000000;
    *(_QWORD *)(v99 + 80) = 0;
    *(_QWORD *)(v99 + 88) = 0x3FB999999999999ALL;
    *(_OWORD *)(v99 + 96) = 0u;
    *(_OWORD *)(v99 + 112) = 0u;
    *(_QWORD *)(v99 + 128) = 0;
    *(_QWORD *)v99 = &unk_24F982968;
    v101 = (_QWORD *)operator new();
    v192 = v99;
    if (v192)
      (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
    v178 = v101;
    v102 = v181;
    if ((unint64_t)v181 >= v182)
    {
      v103 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v178);
    }
    else
    {
      v178 = 0;
      *v181 = (uint64_t)v101;
      v103 = v102 + 1;
    }
    v181 = v103;
    v104 = (uint64_t)v178;
    v178 = 0;
    if (v104)
      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
    if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_325:
      if (*((_BYTE *)v9 + 500))
        goto LABEL_182;
    }
    else
    {
      operator delete(v177.__r_.__value_.__l.__data_);
      if (*((_BYTE *)v9 + 500))
      {
LABEL_182:
        if (!*((_BYTE *)v9 + 153))
        {
          *(_QWORD *)&__p = "rins_lns_";
          *((_QWORD *)&__p + 1) = 9;
          v105 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v106 = &v179;
          else
            v106 = (std::string *)v179.__r_.__value_.__r.__words[0];
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v105 = v179.__r_.__value_.__l.__size_;
          v193 = v106;
          v194 = v105;
          absl::lts_2020_02_25::StrCat((uint64_t)&__p, (uint64_t)&v193, &v177);
          v107 = operator new();
          operations_research::sat::RelaxationInducedNeighborhoodGenerator::RelaxationInducedNeighborhoodGenerator(v107, (uint64_t)v56, (uint64_t)v184, (uint64_t)v185, (uint64_t)v186, 0, (__int128 *)&v177);
          v108 = (_QWORD *)operator new();
          v192 = v107;
          if (v192)
            (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
          v178 = v108;
          v109 = v181;
          if ((unint64_t)v181 >= v182)
          {
            v110 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v178);
          }
          else
          {
            v178 = 0;
            *v181 = (uint64_t)v108;
            v110 = v109 + 1;
          }
          v181 = v110;
          v111 = (uint64_t)v178;
          v178 = 0;
          if (v111)
            (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v177.__r_.__value_.__l.__data_);
          *(_QWORD *)&__p = "rens_lns_";
          *((_QWORD *)&__p + 1) = 9;
          v112 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v113 = &v179;
          else
            v113 = (std::string *)v179.__r_.__value_.__r.__words[0];
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v112 = v179.__r_.__value_.__l.__size_;
          v193 = v113;
          v194 = v112;
          absl::lts_2020_02_25::StrCat((uint64_t)&__p, (uint64_t)&v193, &v177);
          v114 = operator new();
          operations_research::sat::RelaxationInducedNeighborhoodGenerator::RelaxationInducedNeighborhoodGenerator(v114, (uint64_t)v56, 0, (uint64_t)v185, (uint64_t)v186, (uint64_t)v187, (__int128 *)&v177);
          v115 = (_QWORD *)operator new();
          v192 = v114;
          if (v192)
            (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
          v178 = v115;
          v116 = v181;
          if ((unint64_t)v181 >= v182)
          {
            v117 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v178);
          }
          else
          {
            v178 = 0;
            *v181 = (uint64_t)v115;
            v117 = v116 + 1;
          }
          v181 = v117;
          v118 = (uint64_t)v178;
          v178 = 0;
          if (v118)
            (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v177.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*((_BYTE *)v9 + 149))
    {
      *(_QWORD *)&__p = "rnd_rel_lns_";
      *((_QWORD *)&__p + 1) = 12;
      v119 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v120 = &v179;
      else
        v120 = (std::string *)v179.__r_.__value_.__r.__words[0];
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v119 = v179.__r_.__value_.__l.__size_;
      v193 = v120;
      v194 = v119;
      absl::lts_2020_02_25::StrCat((uint64_t)&__p, (uint64_t)&v193, &v177);
      v121 = operator new();
      *(_QWORD *)v121 = off_24F982810;
      v122 = (std::string *)(v121 + 8);
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v122, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v122->__r_.__value_.__l.__data_ = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
        *(_QWORD *)(v121 + 24) = *((_QWORD *)&v177.__r_.__value_.__l + 2);
      }
      *(_QWORD *)(v121 + 32) = v56;
      *(_OWORD *)(v121 + 40) = 0u;
      *(_OWORD *)(v121 + 56) = 0u;
      *(_QWORD *)(v121 + 72) = 0x3FE0000000000000;
      *(_QWORD *)(v121 + 80) = 0;
      *(_QWORD *)(v121 + 88) = 0x3FB999999999999ALL;
      *(_OWORD *)(v121 + 96) = 0u;
      *(_OWORD *)(v121 + 112) = 0u;
      *(_QWORD *)(v121 + 128) = 0;
      *(_QWORD *)v121 = &unk_24F982A70;
      v123 = (_QWORD *)operator new();
      v192 = v121;
      if (v192)
        (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
      v178 = v123;
      v124 = v181;
      if ((unint64_t)v181 >= v182)
      {
        v125 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v178);
      }
      else
      {
        v178 = 0;
        *v181 = (uint64_t)v123;
        v125 = v124 + 1;
      }
      v181 = v125;
      v126 = (uint64_t)v178;
      v178 = 0;
      if (v126)
        (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      *(_QWORD *)&__p = "wgt_rel_lns_";
      *((_QWORD *)&__p + 1) = 12;
      v127 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v128 = &v179;
      else
        v128 = (std::string *)v179.__r_.__value_.__r.__words[0];
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v127 = v179.__r_.__value_.__l.__size_;
      v193 = v128;
      v194 = v127;
      absl::lts_2020_02_25::StrCat((uint64_t)&__p, (uint64_t)&v193, &v177);
      v129 = operator new();
      operations_research::sat::WeightedRandomRelaxationNeighborhoodGenerator::WeightedRandomRelaxationNeighborhoodGenerator(v129, v56, &v177);
      v130 = (_QWORD *)operator new();
      v192 = v129;
      if (v192)
        (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
      v178 = v130;
      v131 = v181;
      if ((unint64_t)v181 >= v182)
      {
        v132 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v178);
      }
      else
      {
        v178 = 0;
        *v181 = (uint64_t)v130;
        v132 = v131 + 1;
      }
      v181 = v132;
      v133 = (uint64_t)v178;
      v178 = 0;
      if (v133)
        (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
    }
LABEL_85:
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&v199);
    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v179.__r_.__value_.__l.__data_);
    if (!v61)
      break;
  }
  while (v60++ < 5);
  v134 = operator new();
  *(_BYTE *)(v134 + 8) = 0;
  *(_QWORD *)(v134 + 39) = 0;
  *(_QWORD *)(v134 + 31) = 0;
  *(_BYTE *)(v134 + 47) = 0;
  *(_QWORD *)v134 = off_24F9846A0;
  *(_QWORD *)(v134 + 48) = &off_24F984BF0;
  *(_QWORD *)(v134 + 72) = v134 + 48;
  *(_QWORD *)(v134 + 56) = a2;
  v199.__r_.__value_.__r.__words[0] = v134;
  v135 = v181;
  if ((unint64_t)v181 >= v182)
  {
    v181 = std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(&v180, (uint64_t *)&v199);
    v136 = v199.__r_.__value_.__r.__words[0];
    v199.__r_.__value_.__r.__words[0] = 0;
    if (v136)
LABEL_247:
      (*(void (**)(std::string::size_type))(*(_QWORD *)v136 + 8))(v136);
  }
  else
  {
    v199.__r_.__value_.__r.__words[0] = 0;
    *v181 = v134;
    v181 = v135 + 1;
    v136 = v199.__r_.__value_.__r.__words[0];
    v199.__r_.__value_.__r.__words[0] = 0;
    if (v136)
      goto LABEL_247;
  }
  if (!inited)
    goto LABEL_290;
  __p = 0uLL;
  v197 = 0;
  v137 = (char *)v180;
  v138 = v181;
  while (v137 != (char *)v138)
  {
    v139 = *(_QWORD *)v137;
    if (*(char *)(*(_QWORD *)v137 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(v139 + 8), *(_QWORD *)(v139 + 16));
    }
    else
    {
      v140 = *(_OWORD *)(v139 + 8);
      v199.__r_.__value_.__r.__words[2] = *(_QWORD *)(v139 + 24);
      *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v140;
    }
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    {
      v141 = v199.__r_.__value_.__l.__size_;
      operator delete(v199.__r_.__value_.__l.__data_);
      if (!v141)
        goto LABEL_250;
    }
    else if (!*((_BYTE *)&v199.__r_.__value_.__s + 23))
    {
      goto LABEL_250;
    }
    v142 = *(_QWORD *)v137;
    if (*(char *)(*(_QWORD *)v137 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)(v142 + 8), *(_QWORD *)(v142 + 16));
    }
    else
    {
      v143 = *(_OWORD *)(v142 + 8);
      v199.__r_.__value_.__r.__words[2] = *(_QWORD *)(v142 + 24);
      *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v143;
    }
    v144 = (_OWORD *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1) >= v197)
    {
      *((_QWORD *)&__p + 1) = std::vector<std::string>::__push_back_slow_path<std::string>((char **)&__p, (uint64_t)&v199);
      if ((SHIBYTE(v199.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_250:
        v137 += 8;
        continue;
      }
      operator delete(v199.__r_.__value_.__l.__data_);
      v137 += 8;
    }
    else
    {
      v145 = *(_OWORD *)&v199.__r_.__value_.__l.__data_;
      *(_QWORD *)(*((_QWORD *)&__p + 1) + 16) = *((_QWORD *)&v199.__r_.__value_.__l + 2);
      *v144 = v145;
      *((_QWORD *)&__p + 1) = (char *)v144 + 24;
      v137 += 8;
    }
  }
  google::LogMessage::LogMessage((google::LogMessage *)&v177, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 2678);
  v146 = (absl::lts_2020_02_25 *)google::LogMessage::stream((google::LogMessage *)&v177);
  v147 = v146;
  if (*(_BYTE *)v175)
    v148 = absl::lts_2020_02_25::GetCurrentTimeNanos(v146) - *(_QWORD *)(v175 + 8) + *(_QWORD *)(v175 + 16);
  else
    v148 = *(_QWORD *)(v175 + 16);
  absl::lts_2020_02_25::strings_internal::JoinAlgorithm<std::__wrap_iter<std::string const*>,void>((char *)__p, *((char **)&__p + 1), ", ", 2uLL, &v179);
  *(double *)&v199.__r_.__value_.__l.__data_ = (double)v148 * 0.000000001;
  v199.__r_.__value_.__l.__size_ = (std::string::size_type)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v199.__r_.__value_.__r.__words[2] = v173;
  v200 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  v201 = &v179;
  v202 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("*** starting Search at %.2fs with %i workers and subsolvers: [ %s ]", 67, (uint64_t)&v199, 3, (uint64_t)&v193);
  if ((v195 & 0x80u) == 0)
    v149 = &v193;
  else
    v149 = v193;
  if ((v195 & 0x80u) == 0)
    v150 = v195;
  else
    v150 = v194;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)v149, v150);
  if ((char)v195 < 0)
  {
    operator delete(v193);
    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_289;
LABEL_279:
    google::LogMessage::~LogMessage((google::LogMessage *)&v177);
    v151 = (void **)__p;
    if ((_QWORD)__p)
      goto LABEL_280;
LABEL_290:
    if (*((_BYTE *)v9 + 153))
      goto LABEL_291;
    goto LABEL_282;
  }
  if ((SHIBYTE(v179.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_279;
LABEL_289:
  operator delete(v179.__r_.__value_.__l.__data_);
  google::LogMessage::~LogMessage((google::LogMessage *)&v177);
  v151 = (void **)__p;
  if (!(_QWORD)__p)
    goto LABEL_290;
LABEL_280:
  v152 = (void **)*((_QWORD *)&__p + 1);
  if (*((void ***)&__p + 1) != v151)
  {
    do
    {
      if (*((char *)v152 - 1) < 0)
        operator delete(*(v152 - 3));
      v152 -= 3;
    }
    while (v152 != v151);
    *((_QWORD *)&__p + 1) = v151;
    operator delete((void *)__p);
    if (*((_BYTE *)v9 + 153))
      goto LABEL_291;
LABEL_282:
    operations_research::sat::NonDeterministicLoop((uint64_t *)&v180, v173);
    goto LABEL_292;
  }
  *((_QWORD *)&__p + 1) = v151;
  operator delete(v151);
  if (!*((_BYTE *)v9 + 153))
    goto LABEL_282;
LABEL_291:
  operations_research::sat::DeterministicLoop((uint64_t *)&v180, v173, *((_DWORD *)v9 + 128));
LABEL_292:
  v153 = (uint64_t *)v180;
  if (v180)
  {
    v154 = v181;
    v155 = v180;
    if (v181 != v180)
    {
      do
      {
        v157 = *--v154;
        v156 = v157;
        *v154 = 0;
        if (v157)
          (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
      }
      while (v154 != v153);
      v155 = v180;
    }
    v181 = v153;
    operator delete(v155);
  }
  v158 = v188;
  if (v188)
  {
    absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)(v188 + 3));
    v159 = (char *)*v158;
    if (*v158)
    {
      v160 = (char *)v158[1];
      v161 = *v158;
      if (v160 != v159)
      {
        v162 = (char *)v158[1];
        do
        {
          v164 = (void *)*((_QWORD *)v162 - 3);
          v162 -= 24;
          v163 = v164;
          if (v164)
          {
            *((_QWORD *)v160 - 2) = v163;
            operator delete(v163);
          }
          v160 = v162;
        }
        while (v162 != v159);
        v161 = *v158;
      }
      v158[1] = v159;
      operator delete(v161);
    }
    MEMORY[0x22E31DF78](v158, 0x1020C4016EE4530);
  }
  v165 = v189;
  v189 = 0;
  if (v165)
  {
    v166 = operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository(v165);
    MEMORY[0x22E31DF78](v166, 0x1030C408E1DFBA0);
  }
  v167 = v190;
  v190 = 0;
  if (v167)
  {
    v168 = operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository(v167);
    MEMORY[0x22E31DF78](v168, 0x1030C408E1DFBA0);
  }
  result = v191;
  v191 = 0;
  if (result)
  {
    operations_research::sat::SharedBoundsManager::~SharedBoundsManager(result);
    return (operations_research::sat::SharedBoundsManager *)MEMORY[0x22E31DF78]();
  }
  return result;
}

void sub_22DAFE5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void **a38,_QWORD *a39,_QWORD *a40,operations_research::sat::SharedBoundsManager *a41)
{
  std::unique_ptr<operations_research::sat::SharedIncompleteSolutionManager>::~unique_ptr[abi:ne180100](&a38);
  std::unique_ptr<operations_research::sat::SharedRelaxationSolutionRepository>::~unique_ptr[abi:ne180100](&a39);
  std::unique_ptr<operations_research::sat::SharedRelaxationSolutionRepository>::~unique_ptr[abi:ne180100](&a40);
  std::unique_ptr<operations_research::sat::SharedBoundsManager>::~unique_ptr[abi:ne180100](&a41);
  _Unwind_Resume(a1);
}

void sub_22DAFEB94()
{
  uint64_t v0;

  MEMORY[0x22E31DF78](v0, 0x10F3C409D26FD0FLL);
  JUMPOUT(0x22DAFEB3CLL);
}

void sub_22DAFEBB4()
{
  JUMPOUT(0x22DAFEB3CLL);
}

void sub_22DAFEBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&a58);
  if ((a29 & 0x80000000) == 0)
    JUMPOUT(0x22DAFEB64);
  JUMPOUT(0x22DAFEB5CLL);
}

void sub_22DAFEBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if ((a29 & 0x80000000) == 0)
    JUMPOUT(0x22DAFEB64);
  JUMPOUT(0x22DAFEB5CLL);
}

void sub_22DAFEBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a55);
}

void sub_22DAFEC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a55);
}

void operations_research::sat::`anonymous namespace'::LoadCpModel(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::SharedResponseManager *a3, operations_research::sat::Model *a4)
{
  operations_research::sat::Model *v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  char v21;
  operations_research::sat::SatParameters *v22;
  uint64_t v23;
  operations_research::sat::SharedResponseManager *v24;
  operations_research::sat::BinaryImplicationGraph *v25;
  char v26;
  signed int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  operations_research::sat::IntegerTrail *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type size;
  uint64_t v40;
  int *v41;
  int *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  int v50;
  int v51;
  int *v52;
  int v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string::size_type v61;
  int **v62;
  int *v63;
  int *v64;
  int *v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int *v71;
  int v72;
  int v73;
  int v74;
  int *v75;
  int v76;
  int v77;
  int v78;
  BOOL v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  std::string::size_type v83;
  int v84;
  int v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  __int128 *v90;
  int v91;
  _DWORD *v92;
  uint64_t *v93;
  uint64_t i;
  uint64_t v95;
  std::string::size_type v96;
  int v97;
  int v98;
  int *v99;
  int v100;
  uint64_t v101;
  __int128 *v102;
  __int128 *v103;
  int v104;
  _DWORD *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  std::string::size_type v113;
  int v114;
  int v115;
  int *v116;
  int v117;
  uint64_t v118;
  __int128 *v119;
  __int128 *v120;
  int v121;
  _DWORD *v122;
  uint64_t *v123;
  uint64_t j;
  std::string::size_type v125;
  int v126;
  int v127;
  _DWORD *v128;
  uint64_t v129;
  uint64_t v130;
  __int128 *v131;
  __int128 *v132;
  int v133;
  _DWORD *v134;
  uint64_t *v135;
  uint64_t *v136;
  int data;
  uint64_t **v138;
  uint64_t **v139;
  int v140;
  operations_research::sat::LinearConstraint **v141;
  uint64_t *v142;
  const operations_research::sat::LinearConstraint *v143;
  operations_research::sat::LinearConstraint *v144;
  char *v145;
  uint64_t **v146;
  uint64_t *v147;
  uint64_t **v148;
  uint64_t *v149;
  uint64_t **v150;
  int v151;
  uint64_t **v152;
  operations_research::sat::LinearProgrammingConstraint *v153;
  _QWORD *v154;
  _QWORD *v155;
  char *v156;
  uint64_t *v157;
  uint64_t **v158;
  uint64_t **v159;
  int v160;
  int v161;
  _DWORD *v162;
  uint64_t *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  int64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _BYTE *v173;
  operations_research::sat::LinearProgrammingConstraint **v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  _OWORD *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  operations_research::sat::LinearProgrammingConstraint *v183;
  operations_research::sat::LinearProgrammingConstraint **v184;
  uint64_t v185;
  uint64_t v186;
  std::string::size_type v187;
  int v188;
  int v189;
  int *v190;
  int v191;
  uint64_t *v192;
  uint64_t **v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t **v196;
  int v197;
  operations_research::sat::LinearProgrammingConstraint *v198;
  _QWORD *v199;
  _QWORD *v200;
  char *v201;
  uint64_t *v202;
  uint64_t **v203;
  uint64_t **v204;
  int v205;
  _DWORD *v206;
  uint64_t *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  int64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  _BYTE *v217;
  operations_research::sat::LinearProgrammingConstraint **v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  _OWORD *v223;
  char *v224;
  uint64_t v225;
  __int128 v226;
  operations_research::sat::LinearProgrammingConstraint *v227;
  uint64_t **v228;
  uint64_t **v229;
  int v230;
  _QWORD *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE *v236;
  _BYTE *v237;
  int64_t v238;
  std::string::size_type v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t **v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t **v249;
  uint64_t **v250;
  int v251;
  int v252;
  void *v253;
  uint64_t *v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t **v258;
  uint64_t *v259;
  BOOL v260;
  operations_research::sat::LinearProgrammingConstraint **v261;
  operations_research::sat::LinearProgrammingConstraint **v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  char *v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  std::string::size_type v289;
  int v290;
  int v291;
  int *v292;
  int v293;
  uint64_t *v294;
  uint64_t **v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t **v298;
  int v299;
  char *v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  char *v306;
  char *v307;
  char *v308;
  uint64_t *v309;
  int v310;
  uint64_t **v311;
  void *v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t **v315;
  uint64_t **v316;
  int v317;
  _DWORD *v318;
  uint64_t *v319;
  unint64_t v320;
  uint64_t *v321;
  _QWORD *v322;
  uint64_t **v323;
  uint64_t *v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  char *v329;
  char *v330;
  uint64_t v331;
  uint64_t **v332;
  int v333;
  uint64_t v334;
  int v335;
  int v336;
  _QWORD *v337;
  char *v338;
  _QWORD *v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  char *v344;
  uint64_t v345;
  char *v346;
  char *v347;
  char *v348;
  uint64_t *v349;
  uint64_t **v350;
  uint64_t v351;
  operations_research::sat::LinearProgrammingConstraint *v352;
  _QWORD *v353;
  _QWORD *v354;
  void **v355;
  uint64_t v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  int v360;
  uint64_t *v361;
  uint64_t v362;
  _QWORD *v363;
  unint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  int v377;
  int v378;
  _DWORD *v379;
  uint64_t v380;
  int v381;
  int v382;
  int v383;
  int v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t *v388;
  unint64_t v389;
  operations_research::sat::IntegerTrail *v390;
  uint64_t v391;
  unint64_t v392;
  int *v393;
  __int128 *v394;
  unint64_t v395;
  __int128 *v396;
  unint64_t v397;
  __int128 v398;
  google::LogMessage *v399;
  _QWORD *v400;
  _QWORD *v401;
  google::LogMessage *v402;
  _QWORD *v403;
  _QWORD *v404;
  google::LogMessage *v405;
  _QWORD *v406;
  _QWORD *v407;
  operations_research::sat::IntegerTrail *v408;
  int v409;
  std::string::size_type v410;
  __int128 *v411;
  std::string::size_type v412;
  _OWORD *v413;
  std::string::size_type v414;
  __int128 v415;
  char updated;
  uint64_t *v417;
  char *v418;
  uint64_t v419;
  int v420;
  int v421;
  int v422;
  char *v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  unint64_t v429;
  _BYTE *v430;
  int *v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  char *v435;
  _OWORD *v436;
  char *v437;
  uint64_t v438;
  __int128 v439;
  int v440;
  uint64_t v441;
  char *v442;
  uint64_t v443;
  unint64_t v444;
  int64_t v445;
  unint64_t v446;
  _BYTE *v447;
  _QWORD *v448;
  std::string::size_type v449;
  unint64_t v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  _OWORD *v455;
  char *v456;
  uint64_t v457;
  __int128 v458;
  google::LogMessage *v459;
  _QWORD *v460;
  uint64_t v461;
  const std::string::value_type *v462;
  void *v463;
  uint64_t v464;
  char *v465;
  _DWORD *v466;
  int VariableGreaterOrEqualToSumOf;
  char *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  _BYTE *v473;
  char v474;
  int *v475;
  char *v476;
  unint64_t v477;
  char *v478;
  uint64_t v479;
  uint64_t v480;
  _OWORD *v481;
  char *v482;
  uint64_t v483;
  __int128 v484;
  int v485;
  std::string::size_type v486;
  char *v487;
  uint64_t v488;
  unint64_t v489;
  int64_t v490;
  unint64_t v491;
  _BYTE *v492;
  _QWORD *v493;
  std::string::size_type v494;
  unint64_t v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  _OWORD *v499;
  char *v500;
  uint64_t v501;
  __int128 v502;
  uint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  operations_research::sat::IntegerTrail *v507;
  _QWORD *v508;
  uint64_t v509;
  _QWORD *v510;
  _QWORD *v511;
  unint64_t v512;
  BOOL v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t *v516;
  _BYTE *v517;
  unint64_t v518;
  char *v519;
  __int128 v520;
  uint64_t v521;
  operations_research::sat::Model *v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  operations_research::sat::SatSolver *v526;
  operations_research::sat::IntegerTrail *v527;
  uint64_t v528;
  uint64_t *v529;
  char *v530;
  std::string *v531;
  __int128 v532;
  unint64_t v533;
  uint64_t v534;
  std::string *v535;
  uint64_t v536;
  operations_research::sat::IntegerTrail *v537;
  _OWORD *v538;
  uint64_t v539;
  _OWORD *v540;
  unint64_t v541;
  _UNKNOWN **v542;
  char *v543;
  int v544;
  _DWORD *v545;
  int v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  unint64_t v558;
  char *v559;
  uint64_t v560;
  _UNKNOWN **v561;
  char *v562;
  unint64_t v563;
  unint64_t v564;
  unint64_t v565;
  unint64_t v566;
  char *v567;
  char *v568;
  char *v569;
  __int128 v570;
  char *v571;
  uint64_t v572;
  _QWORD *v573;
  _QWORD *v574;
  _QWORD *v575;
  uint64_t v576;
  _QWORD *v577;
  _QWORD *v578;
  uint64_t v579;
  _QWORD *v580;
  uint64_t v581;
  _QWORD *v582;
  uint64_t v583;
  uint64_t *v584;
  const void **v585;
  uint64_t k;
  std::string::size_type v587;
  unint64_t v588;
  int v589;
  unsigned int v590;
  uint64_t v591;
  std::string::size_type v592;
  _QWORD *v593;
  std::string::size_type v594;
  std::string::size_type v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  unint64_t v599;
  char *v600;
  unint64_t *v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t v604;
  _QWORD *v605;
  char *v606;
  __int128 *v607;
  uint64_t v608;
  __int128 v609;
  unint64_t v610;
  uint64_t *v611;
  uint64_t *v612;
  uint64_t v613;
  std::string::size_type v614;
  void *v615;
  std::string::size_type v616;
  uint64_t v617;
  unint64_t v618;
  int64_t v619;
  unint64_t v620;
  char *v621;
  char *v622;
  unint64_t v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  std::string::size_type v627;
  char *v628;
  __int128 *v629;
  uint64_t v630;
  __int128 v631;
  uint64_t v632;
  _QWORD *v633;
  uint64_t v634;
  uint64_t *v635;
  uint64_t v636;
  _QWORD *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t *v640;
  int v641;
  uint64_t v642;
  char *v643;
  std::string *v644;
  _QWORD *v645;
  uint64_t v646;
  _QWORD *v647;
  _QWORD *v648;
  char *v649;
  google::LogMessage *v650;
  _QWORD *v651;
  google::LogMessage *v652;
  _QWORD *v653;
  unint64_t *v654;
  _QWORD *v655;
  int v656;
  operations_research::sat::SatSolver *v657;
  const operations_research::sat::CpModelProto *v658;
  operations_research::sat::SatParameters *v659;
  _QWORD *v660;
  const void **v661;
  operations_research::sat::CpModelProto *v662;
  uint64_t v663;
  int v664;
  char v665;
  _QWORD *v666;
  uint64_t v667;
  operations_research::sat::Model *v668;
  __int128 v669;
  std::string v670;
  uint64_t v671;
  std::string::size_type v672;
  void *v673[2];
  int v674;
  void *v675[2];
  unsigned __int8 v676;
  _BYTE v677[16];
  void *v678;
  char *v679;
  char *v680;
  uint64_t **v681;
  uint64_t *v682;
  uint64_t v683;
  uint64_t **v684;
  uint64_t *v685;
  uint64_t v686;
  void *__p;
  char *v688;
  char *v689;
  uint64_t **v690;
  uint64_t *v691;
  uint64_t v692;
  unint64_t v693;
  __int128 v694;
  _BYTE v695[24];
  _BYTE *v696;
  _QWORD v697[3];
  _QWORD *v698;
  std::string v699;
  _BYTE v700[24];
  _BYTE *v701;
  std::string v702;
  _QWORD v703[3];
  _QWORD *v704;
  _BYTE v705[40];
  __int128 v706;
  uint64_t v707;
  std::string v708;
  __int128 v709;
  __int128 v710;
  uint64_t v711;

  v711 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v652 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v705, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1244);
    v653 = (_QWORD *)google::LogMessage::stream(v652);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v653, (uint64_t)"Check failed: shared_response_manager != nullptr ", 49);
    goto LABEL_972;
  }
  v657 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  v662 = this;
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a3);
  v658 = a2;
  v659 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  v11 = (char *)a3 + 32;
  v10 = (_QWORD *)*((_QWORD *)a3 + 4);
  if (v10)
  {
    v12 = (char *)a3 + 32;
    v13 = (_QWORD *)*((_QWORD *)a3 + 4);
    do
    {
      v14 = v13[4];
      v15 = v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d;
      if (v14 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d)
        v16 = v13;
      else
        v16 = v13 + 1;
      if (v15)
        v12 = (char *)v13;
      v13 = (_QWORD *)*v16;
    }
    while (*v16);
    if (v12 != v11
      && *((_QWORD *)v12 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d
      && *((_QWORD *)v12 + 5)
      && *((_BYTE *)v659 + 425))
    {
      v17 = (char *)a3 + 32;
      do
      {
        v18 = v10[4];
        v19 = v18 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d;
        if (v18 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d)
          v20 = v10;
        else
          v20 = v10 + 1;
        if (v19)
          v17 = (char *)v10;
        v10 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 == v11
        || *((_QWORD *)v17 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::PrecedencesPropagator>(void)::d)
      {
        operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraints(0, a3);
        v21 = operations_research::sat::SatSolver::FinishPropagation(v657);
        v11 = (char *)a3 + 32;
        if ((v21 & 1) != 0)
          goto LABEL_26;
LABEL_677:
        *((_BYTE *)v657 + 496) = 1;
        v23 = *((unsigned __int8 *)a3 + 23);
        if ((v23 & 0x80u) == 0)
          v24 = a3;
        else
          v24 = *(operations_research::sat::SharedResponseManager **)a3;
        if ((v23 & 0x80u) != 0)
          v23 = *((_QWORD *)a3 + 1);
        goto LABEL_682;
      }
      operations_research::sat::PrecedencesPropagator::AddGreaterThanAtLeastOneOfConstraints(*((operations_research::sat::PrecedencesPropagator **)v17 + 5), a3);
      v474 = operations_research::sat::SatSolver::FinishPropagation(v657);
      v11 = (char *)a3 + 32;
      if ((v474 & 1) == 0)
        goto LABEL_677;
    }
  }
LABEL_26:
  v655 = v11;
  v22 = v659;
  if (*((int *)v659 + 107) > 1)
  {
    operations_research::sat::ProbeBooleanVariables(a3, 1.0, 0);
    if (*((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3) + 496))
    {
      *((_BYTE *)v657 + 496) = 1;
      v23 = *((unsigned __int8 *)a3 + 23);
      if ((v23 & 0x80u) == 0)
        v24 = a3;
      else
        v24 = *(operations_research::sat::SharedResponseManager **)a3;
      if ((v23 & 0x80u) != 0)
        v23 = *((_QWORD *)a3 + 1);
LABEL_682:
      *(_QWORD *)v705 = v24;
      *(_QWORD *)&v705[8] = v23;
      v708.__r_.__value_.__r.__words[0] = (std::string::size_type)" [loading]";
      v708.__r_.__value_.__l.__size_ = 10;
      absl::lts_2020_02_25::StrCat((uint64_t)v705, (uint64_t)&v708, &v702);
      operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)a2, (absl::lts_2020_02_25::Mutex *)&v702);
LABEL_760:
      if ((SHIBYTE(v702.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v523 = (void *)v702.__r_.__value_.__r.__words[0];
      goto LABEL_968;
    }
    v25 = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)a3);
    v26 = operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(v25, 0);
    v22 = v659;
    if ((v26 & 1) == 0)
    {
      *((_BYTE *)v657 + 496) = 1;
      v23 = *((unsigned __int8 *)a3 + 23);
      if ((v23 & 0x80u) == 0)
        v24 = a3;
      else
        v24 = *(operations_research::sat::SharedResponseManager **)a3;
      if ((v23 & 0x80u) != 0)
        v23 = *((_QWORD *)a3 + 1);
      goto LABEL_682;
    }
  }
  v661 = (const void **)v8;
  v674 = -1;
  v27 = *((_DWORD *)v22 + 99);
  v668 = a3;
  if (v27 < 1)
  {
    if (v662 == (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_)
      goto LABEL_545;
    v263 = *((_QWORD *)v662 + 15);
    if (!v263)
      goto LABEL_545;
    memset(v705, 0, 24);
    v264 = *(int *)(v263 + 16);
    if ((_DWORD)v264)
    {
      if ((v264 & 0x80000000) != 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v265 = (char *)operator new(16 * v264);
      v266 = v265;
      *(_QWORD *)v705 = v265;
      *(_QWORD *)&v705[8] = v265;
      *(_QWORD *)&v705[16] = &v265[16 * v264];
      if (*(int *)(v263 + 16) >= 1)
      {
        v267 = 0;
        while (1)
        {
          v269 = *(_DWORD *)(*(_QWORD *)(v263 + 24) + 4 * v267);
          v270 = ~v269 <= v269 ? *(_DWORD *)(*(_QWORD *)(v263 + 24) + 4 * v267) : ~v269;
          v271 = *((_DWORD *)*v661 + v270) ^ (v269 >> 31);
          v272 = *(_QWORD *)(*(_QWORD *)(v263 + 48) + 8 * v267);
          if ((unint64_t)v266 >= *(_QWORD *)&v705[16])
            break;
          *(_QWORD *)v266 = v271;
          *((_QWORD *)v266 + 1) = v272;
          v268 = v266 + 16;
LABEL_347:
          *(_QWORD *)&v705[8] = v268;
          ++v267;
          v266 = v268;
          if (v267 >= *(int *)(v263 + 16))
            goto LABEL_660;
        }
        v273 = *(char **)v705;
        v274 = (uint64_t)&v266[-*(_QWORD *)v705] >> 4;
        v275 = v274 + 1;
        if ((unint64_t)(v274 + 1) >> 60)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v276 = *(_QWORD *)&v705[16] - *(_QWORD *)v705;
        if ((uint64_t)(*(_QWORD *)&v705[16] - *(_QWORD *)v705) >> 3 > v275)
          v275 = v276 >> 3;
        if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFF0)
          v277 = 0xFFFFFFFFFFFFFFFLL;
        else
          v277 = v275;
        if (v277)
        {
          if (v277 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v278 = (char *)operator new(16 * v277);
          v279 = &v278[16 * v274];
          v280 = &v278[16 * v277];
          *(_QWORD *)v279 = v271;
          *((_QWORD *)v279 + 1) = v272;
          v268 = v279 + 16;
          if (v266 == v273)
            goto LABEL_366;
        }
        else
        {
          v279 = (char *)(16 * v274);
          v280 = 0;
          *(_QWORD *)v279 = v271;
          *((_QWORD *)v279 + 1) = v272;
          v268 = (char *)(16 * v274 + 16);
          if (v266 == v273)
          {
LABEL_366:
            *(_QWORD *)v705 = v279;
            *(_QWORD *)&v705[16] = v280;
            v273 = v266;
LABEL_367:
            operator delete(v273);
            goto LABEL_347;
          }
        }
        do
        {
          *((_OWORD *)v279 - 1) = *((_OWORD *)v266 - 1);
          v279 -= 16;
          v266 -= 16;
        }
        while (v266 != v273);
        *(_QWORD *)v705 = v279;
        *(_QWORD *)&v705[16] = v280;
        if (!v273)
          goto LABEL_347;
        goto LABEL_367;
      }
      v268 = v265;
      if (!*((_BYTE *)v659 + 147))
        goto LABEL_673;
    }
    else
    {
      v268 = 0;
LABEL_660:
      if (!*((_BYTE *)v659 + 147))
      {
LABEL_673:
LABEL_674:
        v360 = VariableGreaterOrEqualToSumOf;
        v674 = VariableGreaterOrEqualToSumOf;
        if (*(_QWORD *)v705)
          operator delete(*(void **)v705);
        goto LABEL_514;
      }
    }
    goto LABEL_674;
  }
  v28 = *(_OWORD *)v705;
  v30 = *((_QWORD *)&v706 + 1);
  v29 = v707;
  v31 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  v32 = (*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 6;
  v33 = 0x6DB6DB6DB6DB6DB7 * ((v29 - v30) >> 3);
  v34 = (*((_QWORD *)v31 + 6) - *((_QWORD *)v31 + 5)) >> 2;
  LODWORD(v708.__r_.__value_.__l.__data_) = 0;
  *(_OWORD *)&v708.__r_.__value_.__r.__words[1] = 0u;
  v709 = 0u;
  v710 = 0u;
  v35 = v33 + v32;
  operations_research::ConnectedComponents<int,int>::Init((std::vector<int> *)&v708, v33 + v32 - 1431655765 * v34);
  v36 = v32;
  if ((int)v32 >= 1)
  {
    v37 = 0;
    v38 = *(_QWORD *)v705;
    size = v708.__r_.__value_.__l.__size_;
    do
    {
      v40 = v38 + (v37 << 6);
      v41 = *(int **)(v40 + 16);
      v42 = *(int **)(v40 + 24);
      if (v41 != v42)
      {
        v43 = *((_QWORD *)&v709 + 1);
        do
        {
          v44 = *v41;
          v45 = v37;
          do
          {
            v46 = v45;
            v45 = *(_DWORD *)(size + 4 * v45);
          }
          while (v46 != v45);
          v47 = *(unsigned int *)(size + 4 * v37);
          if (v37 != v47)
          {
            v48 = (_DWORD *)(size + 4 * v37);
            do
            {
              *v48 = v46;
              v48 = (_DWORD *)(size + 4 * (int)v47);
              v260 = (_DWORD)v47 == *v48;
              LODWORD(v47) = *v48;
            }
            while (!v260);
          }
          v49 = v44 + v35;
          v50 = v44 + v35;
          do
          {
            v51 = v50;
            v50 = *(_DWORD *)(size + 4 * v50);
          }
          while (v51 != v50);
          v52 = (int *)(size + 4 * v49);
          v53 = *v52;
          if (*v52 != v49)
          {
            do
            {
              *v52 = v51;
              v52 = (int *)(size + 4 * v53);
              v260 = v53 == *v52;
              v53 = *v52;
            }
            while (!v260);
          }
          if (v46 != v51)
          {
            v54 = *(_DWORD *)(v43 + 4 * v46);
            v55 = *(_DWORD *)(v43 + 4 * v51);
            v56 = v54 < v55;
            if (v54 >= v55)
              v57 = v46;
            else
              v57 = v51;
            if (!v56)
              v46 = v51;
            v58 = 4 * v46;
            *(_DWORD *)(size + v58) = v57;
            *(_DWORD *)(v43 + 4 * v57) += *(_DWORD *)(v43 + v58);
          }
          ++v41;
        }
        while (v41 != v42);
      }
      ++v37;
    }
    while (v37 != v32);
  }
  v663 = (int)((uint64_t)(*((_QWORD *)&v28 + 1) - v28) >> 6);
  if ((int)v33 >= 1)
  {
    v59 = 0;
    v60 = *((_QWORD *)&v706 + 1);
    v61 = v708.__r_.__value_.__l.__size_;
    do
    {
      v62 = (int **)(v60 + 56 * v59);
      v63 = *v62;
      v64 = v62[1];
      if (v63 != v64)
      {
        v65 = (int *)(v61 + 4 * (v59 + v663));
        v66 = *((_QWORD *)&v709 + 1);
        do
        {
          v67 = *v63;
          v68 = v59 + v663;
          do
          {
            v69 = v68;
            v68 = *(_DWORD *)(v61 + 4 * v68);
          }
          while (v69 != v68);
          v70 = *v65;
          if (*v65 != (_DWORD)v59 + (_DWORD)v663)
          {
            v71 = (int *)(v61 + 4 * (v59 + v663));
            do
            {
              *v71 = v69;
              v71 = (int *)(v61 + 4 * v70);
              v260 = v70 == *v71;
              v70 = *v71;
            }
            while (!v260);
          }
          v72 = v67 + v35;
          v73 = v67 + v35;
          do
          {
            v74 = v73;
            v73 = *(_DWORD *)(v61 + 4 * v73);
          }
          while (v74 != v73);
          v75 = (int *)(v61 + 4 * v72);
          v76 = *v75;
          if (*v75 != v72)
          {
            do
            {
              *v75 = v74;
              v75 = (int *)(v61 + 4 * v76);
              v260 = v76 == *v75;
              v76 = *v75;
            }
            while (!v260);
          }
          if (v69 != v74)
          {
            v77 = *(_DWORD *)(v66 + 4 * v69);
            v78 = *(_DWORD *)(v66 + 4 * v74);
            v79 = v77 < v78;
            if (v77 >= v78)
              v80 = v69;
            else
              v80 = v74;
            if (!v79)
              v69 = v74;
            v81 = 4 * v69;
            *(_DWORD *)(v61 + v81) = v80;
            *(_DWORD *)(v66 + 4 * v80) += *(_DWORD *)(v66 + v81);
          }
          ++v63;
        }
        while (v63 != v64);
      }
      ++v59;
    }
    while (v59 != v33);
  }
  v656 = v33;
  v694 = 0uLL;
  v693 = (unint64_t)&v694;
  if ((int)v32 >= 1)
  {
    v82 = 0;
    do
    {
      while (1)
      {
        v83 = v708.__r_.__value_.__l.__size_;
        v84 = v82;
        do
        {
          v85 = v84;
          v84 = *(_DWORD *)(v708.__r_.__value_.__l.__size_ + 4 * v84);
        }
        while (v85 != v84);
        v86 = (_DWORD *)(v708.__r_.__value_.__l.__size_ + 4 * v82);
        v87 = *v86;
        if (v82 != v87)
        {
          do
          {
            *v86 = v85;
            v86 = (_DWORD *)(v83 + 4 * (int)v87);
            v260 = (_DWORD)v87 == *v86;
            LODWORD(v87) = *v86;
          }
          while (!v260);
        }
        v88 = v694;
        v89 = &v694;
        v90 = &v694;
        if ((_QWORD)v694)
          break;
LABEL_99:
        v92 = operator new(0x28uLL);
        v92[7] = v85;
        v92[8] = 0;
        *(_QWORD *)v92 = 0;
        *((_QWORD *)v92 + 1) = 0;
        *((_QWORD *)v92 + 2) = v90;
        *(_QWORD *)v89 = v92;
        v93 = (uint64_t *)v92;
        if (*(_QWORD *)v693)
        {
          v693 = *(_QWORD *)v693;
          v93 = *(uint64_t **)v89;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v694, v93);
        ++*((_QWORD *)&v694 + 1);
        ++v92[8];
        if (++v82 == v32)
          goto LABEL_102;
      }
      while (1)
      {
        while (1)
        {
          v90 = (__int128 *)v88;
          v91 = *(_DWORD *)(v88 + 28);
          if (v85 >= v91)
            break;
          v88 = *(_QWORD *)v90;
          v89 = v90;
          if (!*(_QWORD *)v90)
            goto LABEL_99;
        }
        if (v91 >= v85)
          break;
        v88 = *((_QWORD *)v90 + 1);
        if (!v88)
        {
          v89 = (__int128 *)((char *)v90 + 8);
          goto LABEL_99;
        }
      }
      ++*((_DWORD *)v90 + 8);
      ++v82;
    }
    while (v82 != v32);
  }
LABEL_102:
  if (v656 >= 1)
  {
    for (i = 0; i != v656; ++i)
    {
      while (1)
      {
        v95 = i + v663;
        v96 = v708.__r_.__value_.__l.__size_;
        v97 = i + v663;
        do
        {
          v98 = v97;
          v97 = *(_DWORD *)(v708.__r_.__value_.__l.__size_ + 4 * v97);
        }
        while (v98 != v97);
        v99 = (int *)(v708.__r_.__value_.__l.__size_ + 4 * v95);
        v100 = *v99;
        if (*v99 != (_DWORD)v95)
        {
          do
          {
            *v99 = v98;
            v99 = (int *)(v96 + 4 * v100);
            v260 = v100 == *v99;
            v100 = *v99;
          }
          while (!v260);
        }
        v101 = v694;
        v102 = &v694;
        v103 = &v694;
        if ((_QWORD)v694)
          break;
LABEL_117:
        v105 = operator new(0x28uLL);
        v105[7] = v98;
        v105[8] = 0;
        *(_QWORD *)v105 = 0;
        *((_QWORD *)v105 + 1) = 0;
        *((_QWORD *)v105 + 2) = v103;
        *(_QWORD *)v102 = v105;
        v106 = (uint64_t *)v105;
        if (*(_QWORD *)v693)
        {
          v693 = *(_QWORD *)v693;
          v106 = *(uint64_t **)v102;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v694, v106);
        ++*((_QWORD *)&v694 + 1);
        ++v105[8];
        if (++i == v656)
          goto LABEL_120;
      }
      while (1)
      {
        while (1)
        {
          v103 = (__int128 *)v101;
          v104 = *(_DWORD *)(v101 + 28);
          if (v98 >= v104)
            break;
          v101 = *(_QWORD *)v103;
          v102 = v103;
          if (!*(_QWORD *)v103)
            goto LABEL_117;
        }
        if (v104 >= v98)
          break;
        v101 = *((_QWORD *)v103 + 1);
        if (!v101)
        {
          v102 = (__int128 *)((char *)v103 + 8);
          goto LABEL_117;
        }
      }
      ++*((_DWORD *)v103 + 8);
    }
  }
LABEL_120:
  v660 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)v668);
  v107 = (uint64_t *)*((_QWORD *)v662 + 15);
  v108 = &operations_research::sat::_CpObjectiveProto_default_instance_;
  if (v107)
    v108 = (uint64_t *)*((_QWORD *)v662 + 15);
  if (*((int *)v108 + 10) >= 1)
  {
    v109 = 0;
    do
    {
      v110 = *(_DWORD *)(v108[3] + 4 * v109);
      if (~v110 <= v110)
        v111 = v110;
      else
        v111 = ~v110;
      v112 = (*(_DWORD *)(*v660 + 4 * v111) ^ (v110 >> 31)) + v35;
      v113 = v708.__r_.__value_.__l.__size_;
      v114 = v112;
      do
      {
        v115 = v114;
        v114 = *(_DWORD *)(v708.__r_.__value_.__l.__size_ + 4 * v114);
      }
      while (v115 != v114);
      v116 = (int *)(v708.__r_.__value_.__l.__size_ + 4 * v112);
      v117 = *v116;
      if (*v116 != v112)
      {
        do
        {
          *v116 = v115;
          v116 = (int *)(v113 + 4 * v117);
          v260 = v117 == *v116;
          v117 = *v116;
        }
        while (!v260);
      }
      v118 = v694;
      v119 = &v694;
      v120 = &v694;
      if ((_QWORD)v694)
      {
        while (1)
        {
          while (1)
          {
            v120 = (__int128 *)v118;
            v121 = *(_DWORD *)(v118 + 28);
            if (v115 >= v121)
              break;
            v118 = *(_QWORD *)v120;
            v119 = v120;
            if (!*(_QWORD *)v120)
              goto LABEL_143;
          }
          if (v121 >= v115)
            break;
          v118 = *((_QWORD *)v120 + 1);
          if (!v118)
          {
            v119 = (__int128 *)((char *)v120 + 8);
            goto LABEL_143;
          }
        }
        v122 = v120;
      }
      else
      {
LABEL_143:
        v122 = operator new(0x28uLL);
        v122[7] = v115;
        v122[8] = 0;
        *(_QWORD *)v122 = 0;
        *((_QWORD *)v122 + 1) = 0;
        *((_QWORD *)v122 + 2) = v120;
        *(_QWORD *)v119 = v122;
        v123 = (uint64_t *)v122;
        if (*(_QWORD *)v693)
        {
          v693 = *(_QWORD *)v693;
          v123 = *(uint64_t **)v119;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v694, v123);
        ++*((_QWORD *)&v694 + 1);
        v107 = (uint64_t *)*((_QWORD *)v662 + 15);
      }
      ++v122[8];
      ++v109;
      v108 = &operations_research::sat::_CpObjectiveProto_default_instance_;
      if (v107)
        v108 = v107;
    }
    while (v109 < *((int *)v108 + 10));
  }
  v691 = 0;
  v692 = 0;
  v689 = 0;
  v690 = &v691;
  __p = 0;
  v688 = 0;
  v685 = 0;
  v686 = 0;
  v684 = &v685;
  if ((int)v32 >= 1)
  {
    for (j = 0; j != v36; ++j)
    {
      LODWORD(v699.__r_.__value_.__l.__data_) = 0;
      v125 = v708.__r_.__value_.__l.__size_;
      v126 = j;
      do
      {
        v127 = v126;
        v126 = *(_DWORD *)(v708.__r_.__value_.__l.__size_ + 4 * v126);
      }
      while (v127 != v126);
      v128 = (_DWORD *)(v708.__r_.__value_.__l.__size_ + 4 * j);
      v129 = *v128;
      if (j != v129)
      {
        do
        {
          *v128 = v127;
          v128 = (_DWORD *)(v125 + 4 * (int)v129);
          v260 = (_DWORD)v129 == *v128;
          LODWORD(v129) = *v128;
        }
        while (!v260);
      }
      LODWORD(v699.__r_.__value_.__l.__data_) = v127;
      v130 = v694;
      v131 = &v694;
      v132 = &v694;
      if ((_QWORD)v694)
      {
        while (1)
        {
          while (1)
          {
            v132 = (__int128 *)v130;
            v133 = *(_DWORD *)(v130 + 28);
            if (v127 >= v133)
              break;
            v130 = *(_QWORD *)v132;
            v131 = v132;
            if (!*(_QWORD *)v132)
              goto LABEL_161;
          }
          if (v133 >= v127)
            break;
          v130 = *((_QWORD *)v132 + 1);
          if (!v130)
          {
            v131 = (__int128 *)((char *)v132 + 8);
            goto LABEL_161;
          }
        }
        if (*((int *)v132 + 8) < 2)
          continue;
      }
      else
      {
LABEL_161:
        v134 = operator new(0x28uLL);
        v134[7] = v127;
        v134[8] = 0;
        *(_QWORD *)v134 = 0;
        *((_QWORD *)v134 + 1) = 0;
        *((_QWORD *)v134 + 2) = v132;
        *(_QWORD *)v131 = v134;
        v135 = (uint64_t *)v134;
        if (*(_QWORD *)v693)
        {
          v693 = *(_QWORD *)v693;
          v135 = *(uint64_t **)v131;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v694, v135);
        ++*((_QWORD *)&v694 + 1);
        if ((int)v134[8] < 2)
          continue;
      }
      v136 = v685;
      data = (int)v699.__r_.__value_.__l.__data_;
      v138 = &v685;
LABEL_168:
      v139 = v138;
      if (v136)
      {
        while (1)
        {
          v138 = (uint64_t **)v136;
          v140 = *((_DWORD *)v136 + 8);
          if (SLODWORD(v699.__r_.__value_.__l.__data_) < v140)
          {
            v136 = *v138;
            goto LABEL_168;
          }
          if (v140 >= SLODWORD(v699.__r_.__value_.__l.__data_))
            break;
          v136 = v138[1];
          if (!v136)
          {
            v139 = v138 + 1;
            goto LABEL_173;
          }
        }
        v141 = (operations_research::sat::LinearConstraint **)v138;
        v143 = (const operations_research::sat::LinearConstraint *)(*(_QWORD *)v705 + (j << 6));
        v146 = v138 + 6;
        v144 = (operations_research::sat::LinearConstraint *)v138[6];
        if (v144 >= (operations_research::sat::LinearConstraint *)v146[1])
        {
LABEL_178:
          v145 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint const&>(v141 + 5, v143);
          goto LABEL_179;
        }
      }
      else
      {
LABEL_173:
        v141 = (operations_research::sat::LinearConstraint **)operator new(0x40uLL);
        *((_DWORD *)v141 + 8) = data;
        v141[6] = 0;
        v141[7] = 0;
        v141[5] = 0;
        *v141 = 0;
        v141[1] = 0;
        v141[2] = (operations_research::sat::LinearConstraint *)v138;
        *v139 = (uint64_t *)v141;
        v142 = (uint64_t *)v141;
        if (*v684)
        {
          v684 = (uint64_t **)*v684;
          v142 = *v139;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v685, v142);
        ++v686;
        v143 = (const operations_research::sat::LinearConstraint *)(*(_QWORD *)v705 + (j << 6));
        v144 = v141[6];
        if (v144 >= v141[7])
          goto LABEL_178;
      }
      operations_research::sat::LinearConstraint::LinearConstraint(v144, v143);
      v145 = (char *)v144 + 64;
      v141[6] = (operations_research::sat::LinearConstraint *)((char *)v144 + 64);
LABEL_179:
      v141[6] = (operations_research::sat::LinearConstraint *)v145;
      v147 = v691;
      if (v691)
      {
        v148 = &v691;
        do
        {
          v149 = v147;
          v150 = v148;
          v151 = *((_DWORD *)v147 + 8);
          v152 = (uint64_t **)(v147 + 1);
          if (v151 >= SLODWORD(v699.__r_.__value_.__l.__data_))
          {
            v152 = (uint64_t **)v149;
            v148 = (uint64_t **)v149;
          }
          v147 = *v152;
        }
        while (v147);
        if (v148 != &v691)
        {
          if (v151 < SLODWORD(v699.__r_.__value_.__l.__data_))
            v149 = (uint64_t *)v150;
          if (SLODWORD(v699.__r_.__value_.__l.__data_) >= *((_DWORD *)v149 + 8))
            goto LABEL_224;
        }
      }
      v153 = (operations_research::sat::LinearProgrammingConstraint *)operator new();
      operations_research::sat::LinearProgrammingConstraint::LinearProgrammingConstraint(v153, v668);
      v154 = (_QWORD *)operator new();
      *v154 = &off_24F984C70;
      v154[1] = v153;
      v702.__r_.__value_.__r.__words[0] = (std::string::size_type)v154;
      v155 = (_QWORD *)*((_QWORD *)v668 + 7);
      if ((unint64_t)v155 >= *((_QWORD *)v668 + 8))
      {
        v156 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)v668 + 6, &v702);
      }
      else
      {
        *v155 = v154;
        v156 = (char *)(v155 + 1);
      }
      *((_QWORD *)v668 + 7) = v156;
      v157 = v691;
      v158 = &v691;
      v159 = &v691;
      v160 = (int)v699.__r_.__value_.__l.__data_;
      if (v691)
      {
        while (1)
        {
          while (1)
          {
            v159 = (uint64_t **)v157;
            v161 = *((_DWORD *)v157 + 8);
            if (SLODWORD(v699.__r_.__value_.__l.__data_) >= v161)
              break;
            v157 = *v159;
            v158 = v159;
            if (!*v159)
              goto LABEL_198;
          }
          if (v161 >= SLODWORD(v699.__r_.__value_.__l.__data_))
            break;
          v157 = v159[1];
          if (!v157)
          {
            v158 = v159 + 1;
            goto LABEL_198;
          }
        }
        v159[5] = (uint64_t *)v153;
        v165 = v688;
        v164 = v689;
        if (v688 < v689)
        {
LABEL_201:
          *(_QWORD *)v165 = v153;
          v166 = (uint64_t)(v165 + 8);
          v36 = ((*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 6);
          goto LABEL_223;
        }
      }
      else
      {
LABEL_198:
        v162 = operator new(0x30uLL);
        v162[8] = v160;
        *((_QWORD *)v162 + 5) = 0;
        *(_QWORD *)v162 = 0;
        *((_QWORD *)v162 + 1) = 0;
        *((_QWORD *)v162 + 2) = v159;
        *v158 = (uint64_t *)v162;
        v163 = (uint64_t *)v162;
        if (*v690)
        {
          v690 = (uint64_t **)*v690;
          v163 = *v158;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v691, v163);
        ++v692;
        *((_QWORD *)v162 + 5) = v153;
        v165 = v688;
        v164 = v689;
        if (v688 < v689)
          goto LABEL_201;
      }
      v167 = (char *)__p;
      v168 = v165 - (_BYTE *)__p;
      v169 = (v165 - (_BYTE *)__p) >> 3;
      v170 = v169 + 1;
      if ((unint64_t)(v169 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v171 = v164 - (_BYTE *)__p;
      if (v171 >> 2 > v170)
        v170 = v171 >> 2;
      if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8)
        v172 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v172 = v170;
      if (v172)
      {
        if (v172 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v173 = operator new(8 * v172);
        v174 = (operations_research::sat::LinearProgrammingConstraint **)&v173[8 * v169];
        *v174 = v153;
        v166 = (uint64_t)(v174 + 1);
        if (v165 != v167)
        {
LABEL_212:
          v175 = v165 - 8 - v167;
          if (v175 < 0x58)
            goto LABEL_1008;
          if ((unint64_t)(v165 - &v173[v168]) < 0x20)
            goto LABEL_1008;
          v176 = (v175 >> 3) + 1;
          v177 = 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
          v178 = &v165[-v177];
          v174 = (operations_research::sat::LinearProgrammingConstraint **)((char *)v174 - v177);
          v179 = &v173[8 * v169 - 16];
          v180 = v165 - 16;
          v181 = v176 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v182 = *(_OWORD *)v180;
            *(v179 - 1) = *((_OWORD *)v180 - 1);
            *v179 = v182;
            v179 -= 2;
            v180 -= 32;
            v181 -= 4;
          }
          while (v181);
          v165 = v178;
          if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1008:
            do
            {
              v183 = (operations_research::sat::LinearProgrammingConstraint *)*((_QWORD *)v165 - 1);
              v165 -= 8;
              *--v174 = v183;
            }
            while (v165 != v167);
          }
          v165 = (char *)__p;
          __p = v174;
          v688 = (char *)v166;
          v689 = &v173[8 * v172];
          v36 = ((*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 6);
          if (!v165)
            goto LABEL_223;
LABEL_222:
          operator delete(v165);
          goto LABEL_223;
        }
      }
      else
      {
        v173 = 0;
        v174 = (operations_research::sat::LinearProgrammingConstraint **)(8 * v169);
        *(_QWORD *)(8 * v169) = v153;
        v166 = 8 * v169 + 8;
        if (v165 != v167)
          goto LABEL_212;
      }
      __p = v174;
      v688 = (char *)v166;
      v689 = &v173[8 * v172];
      v36 = ((*((_QWORD *)&v28 + 1) - (_QWORD)v28) >> 6);
      if (v165)
        goto LABEL_222;
LABEL_223:
      v688 = (char *)v166;
LABEL_224:
      v184 = (operations_research::sat::LinearProgrammingConstraint **)gtl::FindOrDie<std::map<int,operations_research::sat::LinearProgrammingConstraint *>>((uint64_t)&v690, (int *)&v699);
      operations_research::sat::LinearProgrammingConstraint::AddLinearConstraint(*v184, (int **)(*(_QWORD *)v705 + (j << 6)));
    }
  }
  if (v656 >= 1)
  {
    v185 = 0;
    while (1)
    {
      v186 = v185 + v663;
      v187 = v708.__r_.__value_.__l.__size_;
      v188 = v185 + v663;
      do
      {
        v189 = v188;
        v188 = *(_DWORD *)(v708.__r_.__value_.__l.__size_ + 4 * v188);
      }
      while (v189 != v188);
      v190 = (int *)(v708.__r_.__value_.__l.__size_ + 4 * v186);
      v191 = *v190;
      if (*v190 != (_DWORD)v186)
      {
        do
        {
          *v190 = v189;
          v190 = (int *)(v187 + 4 * v191);
          v260 = v191 == *v190;
          v191 = *v190;
        }
        while (!v260);
      }
      v192 = v691;
      if (!v691)
        break;
      v193 = &v691;
      v194 = v691;
      do
      {
        v195 = v194;
        v196 = v193;
        v197 = *((_DWORD *)v194 + 8);
        if (v197 >= v189)
          v193 = (uint64_t **)v194;
        else
          ++v194;
        v194 = (uint64_t *)*v194;
      }
      while (v194);
      if (v193 == &v691)
        break;
      if (v197 < v189)
        v195 = (uint64_t *)v196;
      if (v189 < *((_DWORD *)v195 + 8))
        break;
      while (1)
      {
LABEL_282:
        while (1)
        {
          v229 = (uint64_t **)v192;
          v230 = *((_DWORD *)v192 + 8);
          if (v189 >= v230)
            break;
          v192 = *v229;
          v228 = v229;
          if (!*v229)
            goto LABEL_286;
        }
        if (v230 >= v189)
          break;
        v192 = v229[1];
        if (!v192)
        {
          v228 = v229 + 1;
          goto LABEL_286;
        }
      }
      v231 = v229;
LABEL_290:
      v233 = v231[5];
      v234 = *((_QWORD *)&v706 + 1);
      v235 = *((_QWORD *)&v706 + 1) + 56 * v185;
      memset(&v702, 0, sizeof(v702));
      v237 = *(_BYTE **)v235;
      v236 = *(_BYTE **)(v235 + 8);
      v238 = v236 - v237;
      if (v236 != v237)
      {
        if (v238 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v702.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v236 - v237);
        v702.__r_.__value_.__l.__size_ = v702.__r_.__value_.__r.__words[0];
        v239 = v702.__r_.__value_.__r.__words[0] + 4 * (v238 >> 2);
        v702.__r_.__value_.__r.__words[2] = v239;
        memcpy(v702.__r_.__value_.__l.__data_, v237, v238);
        v702.__r_.__value_.__l.__size_ = v239;
      }
      v240 = v234 + 56 * v185;
      v243 = *(_QWORD *)(v240 + 48);
      v242 = (_QWORD *)(v240 + 48);
      v241 = v243;
      if (!v243)
        goto LABEL_296;
      if (v241 != v234 + 56 * v185 + 24)
      {
        v241 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v241 + 16))(v241);
LABEL_296:
        v704 = (_QWORD *)v241;
        goto LABEL_298;
      }
      v704 = v703;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v242 + 24))(*v242, v703);
LABEL_298:
      operations_research::sat::LinearProgrammingConstraint::AddCutGenerator(v233, &v702);
      v244 = v704;
      if (v704 == v703)
      {
        v244 = v703;
        v245 = 4;
        goto LABEL_302;
      }
      if (v704)
      {
        v245 = 5;
LABEL_302:
        (*(void (**)(void))(*v244 + 8 * v245))();
      }
      if (v702.__r_.__value_.__r.__words[0])
      {
        v702.__r_.__value_.__l.__size_ = v702.__r_.__value_.__r.__words[0];
        operator delete(v702.__r_.__value_.__l.__data_);
      }
      if (++v185 == v656)
        goto LABEL_305;
    }
    v198 = (operations_research::sat::LinearProgrammingConstraint *)operator new();
    operations_research::sat::LinearProgrammingConstraint::LinearProgrammingConstraint(v198, v668);
    v199 = (_QWORD *)operator new();
    *v199 = &off_24F984C70;
    v199[1] = v198;
    v699.__r_.__value_.__r.__words[0] = (std::string::size_type)v199;
    v200 = (_QWORD *)*((_QWORD *)v668 + 7);
    if ((unint64_t)v200 >= *((_QWORD *)v668 + 8))
    {
      v201 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)v668 + 6, &v699);
    }
    else
    {
      *v200 = v199;
      v201 = (char *)(v200 + 1);
    }
    *((_QWORD *)v668 + 7) = v201;
    v202 = v691;
    v203 = &v691;
    v204 = &v691;
    if (v691)
    {
      while (1)
      {
        while (1)
        {
          v204 = (uint64_t **)v202;
          v205 = *((_DWORD *)v202 + 8);
          if (v189 >= v205)
            break;
          v202 = *v204;
          v203 = v204;
          if (!*v204)
            goto LABEL_254;
        }
        if (v205 >= v189)
          break;
        v202 = v204[1];
        if (!v202)
        {
          v203 = v204 + 1;
          goto LABEL_254;
        }
      }
      v204[5] = (uint64_t *)v198;
      v209 = v688;
      v208 = v689;
      if (v688 < v689)
        goto LABEL_257;
    }
    else
    {
LABEL_254:
      v206 = operator new(0x30uLL);
      v206[8] = v189;
      *((_QWORD *)v206 + 5) = 0;
      *(_QWORD *)v206 = 0;
      *((_QWORD *)v206 + 1) = 0;
      *((_QWORD *)v206 + 2) = v204;
      *v203 = (uint64_t *)v206;
      v207 = (uint64_t *)v206;
      if (*v690)
      {
        v690 = (uint64_t **)*v690;
        v207 = *v203;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v691, v207);
      ++v692;
      *((_QWORD *)v206 + 5) = v198;
      v209 = v688;
      v208 = v689;
      if (v688 < v689)
      {
LABEL_257:
        *(_QWORD *)v209 = v198;
        v210 = (uint64_t)(v209 + 8);
LABEL_279:
        v688 = (char *)v210;
        v192 = v691;
        v228 = &v691;
        v229 = &v691;
        if (v691)
          goto LABEL_282;
LABEL_286:
        v231 = operator new(0x30uLL);
        *((_DWORD *)v231 + 8) = v189;
        v231[5] = 0;
        *v231 = 0;
        v231[1] = 0;
        v231[2] = v229;
        *v228 = v231;
        v232 = v231;
        if (*v690)
        {
          v690 = (uint64_t **)*v690;
          v232 = *v228;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v691, v232);
        ++v692;
        goto LABEL_290;
      }
    }
    v211 = (char *)__p;
    v212 = v209 - (_BYTE *)__p;
    v213 = (v209 - (_BYTE *)__p) >> 3;
    v214 = v213 + 1;
    if ((unint64_t)(v213 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v215 = v208 - (_BYTE *)__p;
    if (v215 >> 2 > v214)
      v214 = v215 >> 2;
    if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8)
      v216 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v216 = v214;
    if (v216)
    {
      if (v216 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v217 = operator new(8 * v216);
      v218 = (operations_research::sat::LinearProgrammingConstraint **)&v217[8 * v213];
      *v218 = v198;
      v210 = (uint64_t)(v218 + 1);
      if (v209 != v211)
      {
LABEL_268:
        v219 = v209 - 8 - v211;
        if (v219 < 0x58)
          goto LABEL_1009;
        if ((unint64_t)(v209 - &v217[v212]) < 0x20)
          goto LABEL_1009;
        v220 = (v219 >> 3) + 1;
        v221 = 8 * (v220 & 0x3FFFFFFFFFFFFFFCLL);
        v222 = &v209[-v221];
        v218 = (operations_research::sat::LinearProgrammingConstraint **)((char *)v218 - v221);
        v223 = &v217[8 * v213 - 16];
        v224 = v209 - 16;
        v225 = v220 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v226 = *(_OWORD *)v224;
          *(v223 - 1) = *((_OWORD *)v224 - 1);
          *v223 = v226;
          v223 -= 2;
          v224 -= 32;
          v225 -= 4;
        }
        while (v225);
        v209 = v222;
        if (v220 != (v220 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1009:
          do
          {
            v227 = (operations_research::sat::LinearProgrammingConstraint *)*((_QWORD *)v209 - 1);
            v209 -= 8;
            *--v218 = v227;
          }
          while (v209 != v211);
        }
        v209 = (char *)__p;
        __p = v218;
        v688 = (char *)v210;
        v689 = &v217[8 * v216];
        if (!v209)
          goto LABEL_279;
        goto LABEL_278;
      }
    }
    else
    {
      v217 = 0;
      v218 = (operations_research::sat::LinearProgrammingConstraint **)(8 * v213);
      *(_QWORD *)(8 * v213) = v198;
      v210 = 8 * v213 + 8;
      if (v209 != v211)
        goto LABEL_268;
    }
    __p = v218;
    v688 = (char *)v210;
    v689 = &v217[8 * v216];
    if (!v209)
      goto LABEL_279;
LABEL_278:
    operator delete(v209);
    goto LABEL_279;
  }
LABEL_305:
  if (*((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v668)
       + 144))
  {
    v246 = v684;
    if (v684 != &v685)
    {
      while (1)
      {
        LODWORD(v681) = *((_DWORD *)v246 + 8);
        v247 = *(_QWORD *)gtl::FindOrDie<std::map<int,operations_research::sat::LinearProgrammingConstraint *>>((uint64_t)&v690, (int *)&v681);
        v248 = v685;
        v249 = &v685;
        v250 = &v685;
        v251 = (int)v681;
        if (v685)
        {
          while (1)
          {
            while (1)
            {
              v249 = (uint64_t **)v248;
              v252 = *((_DWORD *)v248 + 8);
              if ((int)v681 >= v252)
                break;
              v248 = *v249;
              v250 = v249;
              if (!*v249)
                goto LABEL_316;
            }
            if (v252 >= (int)v681)
              break;
            v248 = v249[1];
            if (!v248)
            {
              v250 = v249 + 1;
              goto LABEL_316;
            }
          }
          v253 = v249;
        }
        else
        {
LABEL_316:
          v253 = operator new(0x40uLL);
          *((_DWORD *)v253 + 8) = v251;
          *((_QWORD *)v253 + 6) = 0;
          *((_QWORD *)v253 + 7) = 0;
          *((_QWORD *)v253 + 5) = 0;
          *(_QWORD *)v253 = 0;
          *((_QWORD *)v253 + 1) = 0;
          *((_QWORD *)v253 + 2) = v249;
          *v250 = (uint64_t *)v253;
          v254 = (uint64_t *)v253;
          if (*v684)
          {
            v684 = (uint64_t **)*v684;
            v254 = *v250;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v685, v254);
          ++v686;
        }
        operations_research::sat::CreateKnapsackCoverCutGenerator((uint64_t **)v253 + 5, (char **)(v247 + 19920), (uint64_t)v668, &v699.__r_.__value_.__l.__data_);
        operations_research::sat::LinearProgrammingConstraint::AddCutGenerator(v247, &v699);
        v255 = v701;
        if (v701 == v700)
          break;
        if (v701)
        {
          v256 = 5;
LABEL_324:
          (*(void (**)(void))(*v255 + 8 * v256))();
        }
        if (v699.__r_.__value_.__r.__words[0])
        {
          v699.__r_.__value_.__l.__size_ = v699.__r_.__value_.__r.__words[0];
          operator delete(v699.__r_.__value_.__l.__data_);
        }
        v257 = v246[1];
        if (v257)
        {
          do
          {
            v258 = (uint64_t **)v257;
            v257 = (uint64_t *)*v257;
          }
          while (v257);
        }
        else
        {
          do
          {
            v258 = (uint64_t **)v246[2];
            v260 = *v258 == (uint64_t *)v246;
            v246 = v258;
          }
          while (!v260);
        }
        v246 = v258;
        if (v258 == &v685)
          goto LABEL_333;
      }
      v255 = v700;
      v256 = 4;
      goto LABEL_324;
    }
  }
LABEL_333:
  v682 = 0;
  v683 = 0;
  v680 = 0;
  v681 = &v682;
  v678 = 0;
  v679 = 0;
  v259 = (uint64_t *)*((_QWORD *)v662 + 15);
  v260 = v662 == (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_
      || v259 == 0;
  if (v260)
  {
LABEL_338:
    v664 = -1;
    v261 = (operations_research::sat::LinearProgrammingConstraint **)__p;
    v262 = (operations_research::sat::LinearProgrammingConstraint **)v688;
    if (__p != v688)
      goto LABEL_490;
    goto LABEL_501;
  }
  if (*((int *)v259 + 10) < 1)
  {
    v351 = (uint64_t)v668;
    goto LABEL_486;
  }
  v281 = 0;
  do
  {
    v284 = *(_DWORD *)(v259[3] + 4 * v281);
    if (~v284 <= v284)
      v285 = *(_DWORD *)(v259[3] + 4 * v281);
    else
      v285 = ~v284;
    v286 = *(_DWORD *)(*v660 + 4 * v285) ^ (v284 >> 31);
    v287 = *(_QWORD *)(v259[6] + 8 * v281);
    v288 = v286 + v35;
    v289 = v708.__r_.__value_.__l.__size_;
    v290 = v286 + v35;
    do
    {
      v291 = v290;
      v290 = *(_DWORD *)(v708.__r_.__value_.__l.__size_ + 4 * v290);
    }
    while (v291 != v290);
    v292 = (int *)(v708.__r_.__value_.__l.__size_ + 4 * v288);
    v293 = *v292;
    if (*v292 != v288)
    {
      do
      {
        *v292 = v291;
        v292 = (int *)(v289 + 4 * v293);
        v260 = v293 == *v292;
        v293 = *v292;
      }
      while (!v260);
    }
    v294 = v691;
    if (!v691)
      goto LABEL_393;
    v295 = &v691;
    v296 = v691;
    do
    {
      v297 = v296;
      v298 = v295;
      v299 = *((_DWORD *)v296 + 8);
      if (v299 >= v291)
        v295 = (uint64_t **)v296;
      else
        ++v296;
      v296 = (uint64_t *)*v296;
    }
    while (v296);
    if (v295 == &v691)
      goto LABEL_393;
    if (v299 < v291)
      v297 = (uint64_t *)v298;
    if (v291 < *((_DWORD *)v297 + 8))
    {
LABEL_393:
      v300 = v679;
      if (v679 < v680)
      {
        *(_QWORD *)v679 = v286;
        *((_QWORD *)v300 + 1) = v287;
        v282 = v300 + 16;
        goto LABEL_371;
      }
      v301 = (char *)v678;
      v302 = (v679 - (_BYTE *)v678) >> 4;
      v303 = v302 + 1;
      if ((unint64_t)(v302 + 1) >> 60)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v304 = v680 - (_BYTE *)v678;
      if ((v680 - (_BYTE *)v678) >> 3 > v303)
        v303 = v304 >> 3;
      if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFF0)
        v305 = 0xFFFFFFFFFFFFFFFLL;
      else
        v305 = v303;
      if (v305)
      {
        if (v305 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v306 = (char *)operator new(16 * v305);
        v307 = &v306[16 * v302];
        *(_QWORD *)v307 = v286;
        *((_QWORD *)v307 + 1) = v287;
        v308 = v307;
        if (v300 == v301)
        {
LABEL_413:
          v282 = v307 + 16;
          v678 = v308;
          v679 = v307 + 16;
          v680 = &v306[16 * v305];
          if (v300)
LABEL_414:
            operator delete(v300);
LABEL_371:
          v679 = v282;
          goto LABEL_372;
        }
      }
      else
      {
        v306 = 0;
        v307 = (char *)(16 * v302);
        *(_QWORD *)v307 = v286;
        *((_QWORD *)v307 + 1) = v287;
        v308 = (char *)(16 * v302);
        if (v300 == v301)
          goto LABEL_413;
      }
      do
      {
        *((_OWORD *)v308 - 1) = *((_OWORD *)v300 - 1);
        v308 -= 16;
        v300 -= 16;
      }
      while (v300 != v301);
      v300 = (char *)v678;
      v282 = v307 + 16;
      v678 = v308;
      v679 = v307 + 16;
      v680 = &v306[16 * v305];
      if (!v300)
        goto LABEL_371;
      goto LABEL_414;
    }
    do
    {
      while (1)
      {
        v309 = v294;
        v310 = *((_DWORD *)v294 + 8);
        if (v291 < v310)
          break;
        if (v310 >= v291)
        {
          v312 = v309;
          goto LABEL_420;
        }
        v294 = (uint64_t *)v309[1];
        if (!v294)
        {
          v311 = (uint64_t **)(v309 + 1);
          goto LABEL_416;
        }
      }
      v294 = (uint64_t *)*v309;
    }
    while (*v309);
    v311 = (uint64_t **)v309;
LABEL_416:
    v312 = operator new(0x30uLL);
    *((_DWORD *)v312 + 8) = v291;
    *((_QWORD *)v312 + 5) = 0;
    *(_QWORD *)v312 = 0;
    *((_QWORD *)v312 + 1) = 0;
    *((_QWORD *)v312 + 2) = v309;
    *v311 = (uint64_t *)v312;
    v313 = (uint64_t *)v312;
    if (*v690)
    {
      v690 = (uint64_t **)*v690;
      v313 = *v311;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v691, v313);
    ++v692;
LABEL_420:
    operations_research::sat::LinearProgrammingConstraint::SetObjectiveCoefficient(*((_QWORD *)v312 + 5), v286, v287);
    v314 = v682;
    v315 = &v682;
LABEL_422:
    v316 = v315;
    if (v314)
    {
      while (1)
      {
        v315 = (uint64_t **)v314;
        v317 = *((_DWORD *)v314 + 8);
        if (v291 < v317)
        {
          v314 = *v315;
          goto LABEL_422;
        }
        if (v317 >= v291)
          break;
        v314 = v315[1];
        if (!v314)
        {
          v316 = v315 + 1;
          goto LABEL_427;
        }
      }
      v318 = v315;
      v323 = v315 + 6;
      v321 = v315[6];
      v320 = (unint64_t)v323[1];
      if ((unint64_t)v321 < v320)
      {
LABEL_430:
        *v321 = v286;
        v321[1] = v287;
        v322 = v321 + 2;
        goto LABEL_448;
      }
    }
    else
    {
LABEL_427:
      v318 = operator new(0x40uLL);
      v318[8] = v291;
      *((_QWORD *)v318 + 6) = 0;
      *((_QWORD *)v318 + 7) = 0;
      *((_QWORD *)v318 + 5) = 0;
      *(_QWORD *)v318 = 0;
      *((_QWORD *)v318 + 1) = 0;
      *((_QWORD *)v318 + 2) = v315;
      *v316 = (uint64_t *)v318;
      v319 = (uint64_t *)v318;
      if (*v681)
      {
        v681 = (uint64_t **)*v681;
        v319 = *v316;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v682, v319);
      ++v683;
      v321 = (uint64_t *)*((_QWORD *)v318 + 6);
      v320 = *((_QWORD *)v318 + 7);
      if ((unint64_t)v321 < v320)
        goto LABEL_430;
    }
    v324 = (uint64_t *)*((_QWORD *)v318 + 5);
    v325 = ((char *)v321 - (char *)v324) >> 4;
    v326 = v325 + 1;
    if ((unint64_t)(v325 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v327 = v320 - (_QWORD)v324;
    if (v327 >> 3 > v326)
      v326 = v327 >> 3;
    if ((unint64_t)v327 >= 0x7FFFFFFFFFFFFFF0)
      v328 = 0xFFFFFFFFFFFFFFFLL;
    else
      v328 = v326;
    if (v328)
    {
      if (v328 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v329 = (char *)operator new(16 * v328);
      v330 = &v329[16 * v325];
      *(_QWORD *)v330 = v286;
      *((_QWORD *)v330 + 1) = v287;
      v331 = (uint64_t)v330;
      if (v321 != v324)
      {
        do
        {
LABEL_443:
          *(_OWORD *)(v331 - 16) = *((_OWORD *)v321 - 1);
          v331 -= 16;
          v321 -= 2;
        }
        while (v321 != v324);
        v321 = (uint64_t *)*((_QWORD *)v318 + 5);
        v322 = v330 + 16;
        *((_QWORD *)v318 + 5) = v331;
        *((_QWORD *)v318 + 6) = v330 + 16;
        *((_QWORD *)v318 + 7) = &v329[16 * v328];
        if (!v321)
          goto LABEL_448;
LABEL_447:
        operator delete(v321);
        goto LABEL_448;
      }
    }
    else
    {
      v329 = 0;
      v330 = (char *)(16 * v325);
      *(_QWORD *)v330 = v286;
      *((_QWORD *)v330 + 1) = v287;
      v331 = 16 * v325;
      if (v321 != v324)
        goto LABEL_443;
    }
    v322 = v330 + 16;
    *((_QWORD *)v318 + 5) = v331;
    *((_QWORD *)v318 + 6) = v330 + 16;
    *((_QWORD *)v318 + 7) = &v329[16 * v328];
    if (v321)
      goto LABEL_447;
LABEL_448:
    *((_QWORD *)v318 + 6) = v322;
LABEL_372:
    ++v281;
    v283 = *((_QWORD *)v662 + 15);
    v259 = &operations_research::sat::_CpObjectiveProto_default_instance_;
    if (v283)
      v259 = (uint64_t *)*((_QWORD *)v662 + 15);
  }
  while (v281 < *((int *)v259 + 10));
  v332 = v681;
  if (v681 == &v682)
  {
    v351 = (uint64_t)v668;
    if (!v283)
      goto LABEL_338;
    goto LABEL_486;
  }
  v333 = 0;
  while (2)
  {
    LODWORD(v675[0]) = *((_DWORD *)v332 + 8);
    v334 = *(_QWORD *)gtl::FindOrDie<std::map<int,operations_research::sat::LinearProgrammingConstraint *>>((uint64_t)&v690, (int *)v675);
    v336 = v335;
    v337 = v679;
    if (v679 < v680)
    {
      *(_DWORD *)v679 = v335;
      v337[1] = 1;
      v338 = (char *)(v337 + 2);
      goto LABEL_470;
    }
    v339 = v678;
    v340 = (v679 - (_BYTE *)v678) >> 4;
    v341 = v340 + 1;
    if ((unint64_t)(v340 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v342 = v680 - (_BYTE *)v678;
    if ((v680 - (_BYTE *)v678) >> 3 > v341)
      v341 = v342 >> 3;
    if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFF0)
      v343 = 0xFFFFFFFFFFFFFFFLL;
    else
      v343 = v341;
    if (v343)
    {
      if (v343 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v344 = (char *)operator new(16 * v343);
      v345 = (uint64_t)&v344[16 * v340];
      *(_DWORD *)v345 = v336;
      *(_QWORD *)(v345 + 8) = 1;
      v346 = (char *)v345;
      if (v337 == v339)
      {
LABEL_468:
        v348 = &v344[16 * v343];
        v338 = (char *)(v345 + 16);
        v678 = v346;
        v679 = (char *)(v345 + 16);
        v680 = v348;
        if (v337)
          goto LABEL_469;
        goto LABEL_470;
      }
    }
    else
    {
      v344 = 0;
      v345 = 16 * v340;
      *(_DWORD *)v345 = v336;
      *(_QWORD *)(v345 + 8) = 1;
      v346 = (char *)(16 * v340);
      if (v337 == v339)
        goto LABEL_468;
    }
    do
    {
      *((_OWORD *)v346 - 1) = *((_OWORD *)v337 - 1);
      v346 -= 16;
      v337 -= 2;
    }
    while (v337 != v339);
    v337 = v678;
    v347 = &v344[16 * v343];
    v338 = (char *)(v345 + 16);
    v678 = v346;
    v679 = (char *)(v345 + 16);
    v680 = v347;
    if (v337)
LABEL_469:
      operator delete(v337);
LABEL_470:
    v679 = v338;
    *(_DWORD *)(v334 + 19993) = v336;
    v349 = v332[1];
    if (v349)
    {
      do
      {
        v350 = (uint64_t **)v349;
        v349 = (uint64_t *)*v349;
      }
      while (v349);
    }
    else
    {
      do
      {
        v350 = (uint64_t **)v332[2];
        v260 = *v350 == (uint64_t *)v332;
        v332 = v350;
      }
      while (!v260);
    }
    ++v333;
    v332 = v350;
    if (v350 != &v682)
      continue;
    break;
  }
  v351 = (uint64_t)v668;
  if (!*((_QWORD *)v662 + 15))
    goto LABEL_338;
LABEL_486:
  v261 = (operations_research::sat::LinearProgrammingConstraint **)__p;
  v262 = (operations_research::sat::LinearProgrammingConstraint **)v688;
  if (__p != v688)
  {
    do
    {
LABEL_490:
      v352 = *v261;
      operations_research::sat::LinearProgrammingConstraint::RegisterWith(*v261, v668);
      if (*off_2540794E8[0] >= 3
        && (off_2540794E8[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_2540794E8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v677, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 845);
        v353 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v677);
        v354 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v353, (uint64_t)"LP constraint: ", 15);
        operations_research::glop::LinearProgram::GetDimensionString((operations_research::sat::LinearProgrammingConstraint *)((char *)v352 + 360), (uint64_t)v675);
        if ((v676 & 0x80u) == 0)
          v355 = v675;
        else
          v355 = (void **)v675[0];
        if ((v676 & 0x80u) == 0)
          v356 = v676;
        else
          v356 = (uint64_t)v675[1];
        v357 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v354, (uint64_t)v355, v356);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v357, (uint64_t)".", 1);
        if ((char)v676 < 0)
          operator delete(v675[0]);
        google::LogMessage::~LogMessage((google::LogMessage *)v677);
      }
      ++v261;
    }
    while (v261 != v262);
  }
LABEL_501:
  if (*off_2540794F0[0] > 2
    && (off_2540794F0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540794F0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v675, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 848);
    google::LogMessage::stream((google::LogMessage *)v675);
    v358 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v358, (uint64_t)" terms in the main objective linear equation (", 46);
    v359 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v359, (uint64_t)" from LP constraints).", 22);
    google::LogMessage::~LogMessage((google::LogMessage *)v675);
  }
  if (v678)
  {
    v679 = (char *)v678;
    operator delete(v678);
  }
  std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v681, v682);
  std::__tree<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::__map_value_compare<int,std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<operations_research::sat::LinearConstraint>>>>::destroy((uint64_t)&v684, v685);
  v360 = v664;
  if (__p)
  {
    v688 = (char *)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v690, v691);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v693, (_QWORD *)v694);
  if (*((_QWORD *)&v709 + 1))
  {
    *(_QWORD *)&v710 = *((_QWORD *)&v709 + 1);
    operator delete(*((void **)&v709 + 1));
  }
  if (v708.__r_.__value_.__l.__size_)
  {
    v708.__r_.__value_.__r.__words[2] = v708.__r_.__value_.__l.__size_;
    operator delete((void *)v708.__r_.__value_.__l.__size_);
  }
  operations_research::sat::LinearRelaxation::~LinearRelaxation((operations_research::sat::LinearRelaxation *)v705);
  v674 = v664;
LABEL_514:
  if (v360 != -1)
  {
    if (*((_QWORD *)v662 + 15))
      v361 = (uint64_t *)*((_QWORD *)v662 + 15);
    else
      v361 = &operations_research::sat::_CpObjectiveProto_default_instance_;
    v362 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>((uint64_t)v668);
    v363 = (_QWORD *)v362;
    v9.n128_u64[0] = v361[12];
    if (v9.n128_f64[0] == 0.0)
      v9.n128_f64[0] = 1.0;
    *(_QWORD *)v362 = v9.n128_u64[0];
    v9.n128_u64[0] = v361[11];
    *(_QWORD *)(v362 + 8) = v9.n128_u64[0];
    *(_DWORD *)(v362 + 16) = v674;
    v364 = *((int *)v361 + 4);
    v366 = (_QWORD *)(v362 + 24);
    v365 = *(_QWORD *)(v362 + 24);
    v367 = (*(_QWORD *)(v362 + 32) - v365) >> 2;
    if (v364 <= v367)
    {
      if (v364 < v367)
        *(_QWORD *)(v362 + 32) = v365 + 4 * v364;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)(v362 + 24), v364 - v367);
    }
    v368 = v363[6];
    v369 = (v363[7] - v368) >> 3;
    if (v364 <= v369)
    {
      if (v364 < v369)
        v363[7] = v368 + 8 * v364;
    }
    else
    {
      std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)(v363 + 6), v364 - v369);
    }
    if (*((int *)v361 + 4) >= 1)
    {
      v370 = 0;
      do
      {
        v376 = v361[3];
        v377 = *(_DWORD *)(v376 + 4 * v370);
        if (~v377 <= v377)
          v378 = *(_DWORD *)(v376 + 4 * v370);
        else
          v378 = ~v377;
        v379 = *v661;
        *(_DWORD *)(*v366 + 4 * v370) = *((_DWORD *)*v661 + v378) ^ (v377 >> 31);
        v380 = v361[6];
        *(_QWORD *)(v363[6] + 8 * v370) = *(_QWORD *)(v380 + 8 * v370);
        v381 = *(_DWORD *)(v376 + 4 * v370);
        if (~v381 <= v381)
          v382 = *(_DWORD *)(v376 + 4 * v370);
        else
          v382 = ~v381;
        v383 = v379[v382];
        if (v383 != -1)
        {
          v374 = 0;
          v384 = v383 ^ (v381 < 0) ^ (*(_QWORD *)(v380 + 8 * v370) < 1);
          v385 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v384)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v384));
          v386 = v363[9];
          v375 = (v385 >> 7) ^ (v386 >> 12);
          v387 = v363[12];
          while (1)
          {
            v371 = v375 & v387;
            v372 = *(_QWORD *)(v386 + v371);
            v373 = ((v372 ^ (0x101010101010101 * (v385 & 0x7F))) - 0x101010101010101) & ~(v372 ^ (0x101010101010101 * (v385 & 0x7F))) & 0x8080808080808080;
            if (v373)
              break;
LABEL_533:
            if ((v372 & (~v372 << 6) & 0x8080808080808080) != 0)
            {
              *(_DWORD *)(v363[10]
                        + 4
                        * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>>::prepare_insert(v363 + 9, v385)) = v384;
              goto LABEL_544;
            }
            v374 += 8;
            v375 = v374 + v371;
          }
          while (*(_DWORD *)(v363[10] + 4 * ((v371 + (__clz(__rbit64(v373)) >> 3)) & v387)) != v384)
          {
            v373 &= v373 - 1;
            if (!v373)
              goto LABEL_533;
          }
        }
LABEL_544:
        ++v370;
      }
      while (v370 < *((int *)v361 + 4));
    }
  }
LABEL_545:
  v388 = (uint64_t *)*((_QWORD *)v662 + 15);
  if (!v388)
    v388 = &operations_research::sat::_CpObjectiveProto_default_instance_;
  v389 = *((int *)v388 + 16);
  if (!(_DWORD)v389)
    goto LABEL_735;
  operations_research::Domain::FromFlatSpanOfIntervals(v388[9], v389, (unint64_t *)&v699, v9);
  v390 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v668);
  v391 = operations_research::sat::IntegerTrail::InitialVariableDomain((uint64_t)v390, v674);
  v693 = 0;
  v392 = *(_QWORD *)v391;
  if ((*(_QWORD *)v391 & 1) != 0)
  {
    v394 = *(__int128 **)(v391 + 8);
    v395 = v392 >> 1;
    if (v392 < 4)
    {
      if (v392 < 2)
      {
        v397 = 0;
        goto LABEL_559;
      }
      v396 = &v694;
    }
    else
    {
      if (v392 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v396 = (__int128 *)operator new(16 * v395);
      *(_QWORD *)&v694 = v396;
      *((_QWORD *)&v694 + 1) = v392 >> 1;
      v693 = 1;
    }
    do
    {
      v398 = *v394++;
      *v396++ = v398;
      --v395;
    }
    while (v395);
    v397 = v693;
LABEL_559:
    v693 = v397 + (v392 & 0xFFFFFFFFFFFFFFFELL);
    v393 = off_2540794C0[0];
    if (*off_2540794C0[0] >= 3)
      goto LABEL_560;
    goto LABEL_563;
  }
  v693 = *(_QWORD *)v391;
  v694 = *(_OWORD *)(v391 + 8);
  v393 = off_2540794C0[0];
  if (*off_2540794C0[0] < 3)
    goto LABEL_563;
LABEL_560:
  if (v393 != &google::kLogSiteUninitialized
    || google::InitVLOG3__((google *)off_2540794C0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3))
  {
    v399 = google::LogMessage::LogMessage((google::LogMessage *)v705, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1344);
    v400 = (_QWORD *)google::LogMessage::stream(v399);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v400, (uint64_t)"Objective offset:", 17);
    v401 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v401, (uint64_t)" scaling_factor:", 16);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v705);
  }
LABEL_563:
  if (*off_2540794C8[0] >= 3
    && (off_2540794C8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540794C8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    v402 = google::LogMessage::LogMessage((google::LogMessage *)v705, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1346);
    v403 = (_QWORD *)google::LogMessage::stream(v402);
    v404 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v403, (uint64_t)"Automatic internal objective domain: ", 37);
    operations_research::operator<<(v404, &v693);
    google::LogMessage::~LogMessage((google::LogMessage *)v705);
  }
  if (*off_2540794D0[0] >= 3
    && (off_2540794D0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540794D0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    v405 = google::LogMessage::LogMessage((google::LogMessage *)v705, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1347);
    v406 = (_QWORD *)google::LogMessage::stream(v405);
    v407 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v406, (uint64_t)"User specified internal objective domain: ", 42);
    operations_research::operator<<(v407, (unint64_t *)&v699);
    google::LogMessage::~LogMessage((google::LogMessage *)v705);
  }
  if (v674 == -1)
  {
    v708.__r_.__value_.__r.__words[0] = google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>((int)&v674, (int)&operations_research::sat::kNoIntegerVariable, "objective_var != kNoIntegerVariable");
    if (v708.__r_.__value_.__r.__words[0])
    {
      v654 = google::LogMessageFatal::LogMessageFatal((unint64_t *)v705, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1348, (uint64_t **)&v708);
      google::LogMessage::stream((google::LogMessage *)v654);
LABEL_972:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v705);
    }
  }
  v408 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v668);
  v409 = v674;
  v672 = 0;
  v410 = v699.__r_.__value_.__r.__words[0];
  if ((v699.__r_.__value_.__s.__data_[0] & 1) == 0)
  {
    v672 = v699.__r_.__value_.__r.__words[0];
    *(_OWORD *)v673 = *(_OWORD *)&v699.__r_.__value_.__r.__words[1];
    goto LABEL_583;
  }
  v411 = (__int128 *)v699.__r_.__value_.__l.__size_;
  v412 = v699.__r_.__value_.__r.__words[0] >> 1;
  if (v699.__r_.__value_.__r.__words[0] < 4)
  {
    if (v699.__r_.__value_.__r.__words[0] >= 2)
    {
      v413 = v673;
      goto LABEL_580;
    }
    v414 = 0;
  }
  else
  {
    if (v699.__r_.__value_.__r.__words[0] >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v413 = operator new(16 * v412);
    v673[0] = v413;
    v673[1] = (void *)(v410 >> 1);
    v672 = 1;
    do
    {
LABEL_580:
      v415 = *v411++;
      *v413++ = v415;
      --v412;
    }
    while (v412);
    v414 = v672;
  }
  v672 = v414 + (v410 & 0xFFFFFFFFFFFFFFFELL);
LABEL_583:
  updated = operations_research::sat::IntegerTrail::UpdateInitialDomain((uint64_t)v408, v409, (operations_research::Domain *)&v672);
  if ((v672 & 1) != 0)
    operator delete(v673[0]);
  if ((updated & 1) != 0)
  {
    if ((operations_research::Domain::IsIncludedIn((operations_research::Domain *)&v693, (const operations_research::Domain *)&v699) & 1) != 0)goto LABEL_729;
    memset(v705, 0, 24);
    memset(&v708, 0, sizeof(v708));
    if (*((_QWORD *)v662 + 15))
      v417 = (uint64_t *)*((_QWORD *)v662 + 15);
    else
      v417 = &operations_research::sat::_CpObjectiveProto_default_instance_;
    v665 = updated;
    if (*((int *)v417 + 4) <= 0)
    {
      v465 = 0;
      v464 = 0;
      v418 = 0;
      goto LABEL_663;
    }
    v418 = 0;
    v419 = 0;
    while (1)
    {
      v420 = *(_DWORD *)(v417[3] + 4 * v419);
      if (~v420 <= v420)
        v421 = *(_DWORD *)(v417[3] + 4 * v419);
      else
        v421 = ~v420;
      v422 = *((_DWORD *)*v661 + v421) ^ (v420 >> 31);
      v423 = *(char **)&v705[8];
      if (*(_QWORD *)&v705[8] < *(_QWORD *)&v705[16])
      {
        **(_DWORD **)&v705[8] = v422;
        v424 = (uint64_t)(v423 + 4);
        goto LABEL_617;
      }
      v425 = *(char **)v705;
      v426 = (uint64_t)(*(_QWORD *)&v705[8] - *(_QWORD *)v705) >> 2;
      v427 = v426 + 1;
      if ((unint64_t)(v426 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v428 = *(_QWORD *)&v705[16] - *(_QWORD *)v705;
      if ((uint64_t)(*(_QWORD *)&v705[16] - *(_QWORD *)v705) >> 1 > v427)
        v427 = v428 >> 1;
      v429 = (unint64_t)v428 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v427;
      if (v429)
        break;
      v430 = 0;
      v431 = (int *)(4 * v426);
      *(_DWORD *)(4 * v426) = v422;
      v424 = 4 * v426 + 4;
      if (v423 != v425)
        goto LABEL_609;
LABEL_615:
      *(_QWORD *)v705 = v431;
      *(_QWORD *)&v705[8] = v424;
      *(_QWORD *)&v705[16] = &v430[4 * v429];
      if (v425)
      {
        operator delete(v425);
        v418 = (char *)v708.__r_.__value_.__l.__size_;
      }
LABEL_617:
      *(_QWORD *)&v705[8] = v424;
      v441 = *(_QWORD *)(v417[6] + 8 * v419);
      if ((unint64_t)v418 < v708.__r_.__value_.__r.__words[2])
      {
        *(_QWORD *)v418 = v441;
        v418 += 8;
        v708.__r_.__value_.__l.__size_ = (std::string::size_type)v418;
        if (++v419 >= *((int *)v417 + 4))
          goto LABEL_657;
        continue;
      }
      v442 = (char *)v708.__r_.__value_.__r.__words[0];
      v443 = (uint64_t)&v418[-v708.__r_.__value_.__r.__words[0]] >> 3;
      v444 = v443 + 1;
      if ((unint64_t)(v443 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v445 = v708.__r_.__value_.__r.__words[2] - v708.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v708.__r_.__value_.__r.__words[2] - v708.__r_.__value_.__r.__words[0]) >> 2 > v444)
        v444 = v445 >> 2;
      if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFF8)
        v446 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v446 = v444;
      if (v446)
      {
        if (v446 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v447 = operator new(8 * v446);
        v448 = &v447[8 * v443];
        *v448 = v441;
        v449 = (std::string::size_type)(v448 + 1);
        if (v418 == v442)
          goto LABEL_632;
      }
      else
      {
        v447 = 0;
        v448 = (_QWORD *)(8 * v443);
        *(_QWORD *)(8 * v443) = v441;
        v449 = 8 * v443 + 8;
        if (v418 == v442)
          goto LABEL_632;
      }
      v450 = v418 - 8 - v442;
      if (v450 >= 0x168)
      {
        if (&v447[v418 - v442 - 8 - (v450 & 0xFFFFFFFFFFFFFFF8)] > &v447[v418 - v442 - 8])
        {
          v451 = v418;
        }
        else if (&v418[-(v450 & 0xFFFFFFFFFFFFFFF8) - 8] > v418 - 8)
        {
          v451 = v418;
        }
        else if ((unint64_t)(v442 - v447) >= 0x20)
        {
          v453 = (v450 >> 3) + 1;
          v454 = 8 * (v453 & 0x3FFFFFFFFFFFFFFCLL);
          v451 = &v418[-v454];
          v448 = (_QWORD *)((char *)v448 - v454);
          v455 = &v447[8 * v443 - 16];
          v456 = v418 - 16;
          v457 = v453 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v458 = *(_OWORD *)v456;
            *(v455 - 1) = *((_OWORD *)v456 - 1);
            *v455 = v458;
            v455 -= 2;
            v456 -= 32;
            v457 -= 4;
          }
          while (v457);
          if (v453 == (v453 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_632;
        }
        else
        {
          v451 = v418;
        }
      }
      else
      {
        v451 = v418;
      }
      do
      {
        v452 = *((_QWORD *)v451 - 1);
        v451 -= 8;
        *--v448 = v452;
      }
      while (v451 != v442);
LABEL_632:
      v708.__r_.__value_.__r.__words[0] = (std::string::size_type)v448;
      v708.__r_.__value_.__l.__size_ = v449;
      v708.__r_.__value_.__r.__words[2] = (std::string::size_type)&v447[8 * v446];
      if (v442)
        operator delete(v442);
      v418 = (char *)v449;
      v708.__r_.__value_.__l.__size_ = v449;
      if (++v419 >= *((int *)v417 + 4))
      {
LABEL_657:
        v464 = *(_QWORD *)&v705[16];
        v465 = *(char **)&v705[8];
        if (*(_QWORD *)&v705[8] < *(_QWORD *)&v705[16])
        {
          **(_DWORD **)&v705[8] = v674;
          v466 = v465 + 4;
          goto LABEL_695;
        }
LABEL_663:
        v468 = *(char **)v705;
        v469 = (uint64_t)&v465[-*(_QWORD *)v705] >> 2;
        v470 = v469 + 1;
        if ((unint64_t)(v469 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v471 = v464 - *(_QWORD *)v705;
        if (v471 >> 1 > v470)
          v470 = v471 >> 1;
        if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFFCLL)
          v472 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v472 = v470;
        if (v472)
        {
          if (v472 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v473 = operator new(4 * v472);
        }
        else
        {
          v473 = 0;
        }
        v475 = (int *)&v473[4 * v469];
        v476 = &v473[4 * v472];
        *v475 = v674;
        v466 = v475 + 1;
        if (v465 != v468)
        {
          v477 = v465 - v468 - 4;
          if (v477 < 0x2C)
          {
            v478 = v465;
            goto LABEL_692;
          }
          if ((unint64_t)(v468 - v473) < 0x20)
          {
            v478 = v465;
            goto LABEL_692;
          }
          v479 = (v477 >> 2) + 1;
          v480 = 4 * (v479 & 0x7FFFFFFFFFFFFFF8);
          v478 = &v465[-v480];
          v475 = (int *)((char *)v475 - v480);
          v481 = &v473[4 * v469 - 16];
          v482 = v465 - 16;
          v483 = v479 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v484 = *(_OWORD *)v482;
            *(v481 - 1) = *((_OWORD *)v482 - 1);
            *v481 = v484;
            v481 -= 2;
            v482 -= 32;
            v483 -= 8;
          }
          while (v483);
          if (v479 != (v479 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_692:
              v485 = *((_DWORD *)v478 - 1);
              v478 -= 4;
              *--v475 = v485;
            }
            while (v478 != v468);
          }
        }
        *(_QWORD *)v705 = v475;
        *(_QWORD *)&v705[8] = v466;
        *(_QWORD *)&v705[16] = v476;
        if (v468)
        {
          operator delete(v468);
          v418 = (char *)v708.__r_.__value_.__l.__size_;
        }
LABEL_695:
        *(_QWORD *)&v705[8] = v466;
        if ((unint64_t)v418 < v708.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)v418 = -1;
          v486 = (std::string::size_type)(v418 + 8);
          goto LABEL_718;
        }
        v487 = (char *)v708.__r_.__value_.__r.__words[0];
        v488 = (uint64_t)&v418[-v708.__r_.__value_.__r.__words[0]] >> 3;
        v489 = v488 + 1;
        if ((unint64_t)(v488 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v490 = v708.__r_.__value_.__r.__words[2] - v708.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v708.__r_.__value_.__r.__words[2] - v708.__r_.__value_.__r.__words[0]) >> 2 > v489)
          v489 = v490 >> 2;
        if ((unint64_t)v490 >= 0x7FFFFFFFFFFFFFF8)
          v491 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v491 = v489;
        if (v491)
        {
          if (v491 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v492 = operator new(8 * v491);
        }
        else
        {
          v492 = 0;
        }
        v493 = &v492[8 * v488];
        v494 = (std::string::size_type)&v492[8 * v491];
        *v493 = -1;
        v486 = (std::string::size_type)(v493 + 1);
        if (v418 != v487)
        {
          v495 = v418 - v487 - 8;
          if (v495 < 0x58)
          {
            v496 = v418;
            goto LABEL_715;
          }
          if ((unint64_t)(v487 - v492) < 0x20)
          {
            v496 = v418;
            goto LABEL_715;
          }
          v497 = (v495 >> 3) + 1;
          v498 = 8 * (v497 & 0x3FFFFFFFFFFFFFFCLL);
          v496 = &v418[-v498];
          v493 = (_QWORD *)((char *)v493 - v498);
          v499 = &v492[8 * v488 - 16];
          v500 = v418 - 16;
          v501 = v497 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v502 = *(_OWORD *)v500;
            *(v499 - 1) = *((_OWORD *)v500 - 1);
            *v499 = v502;
            v499 -= 2;
            v500 -= 32;
            v501 -= 4;
          }
          while (v501);
          if (v497 != (v497 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_715:
              v503 = *((_QWORD *)v496 - 1);
              v496 -= 8;
              *--v493 = v503;
            }
            while (v496 != v487);
          }
        }
        v708.__r_.__value_.__r.__words[0] = (std::string::size_type)v493;
        v708.__r_.__value_.__l.__size_ = v486;
        v708.__r_.__value_.__r.__words[2] = v494;
        if (v487)
          operator delete(v487);
LABEL_718:
        v708.__r_.__value_.__l.__size_ = v486;
        operations_research::sat::WeightedSumGreaterOrEqual<std::vector<long long>>((unsigned int **)v705, (uint64_t)&v708, 0, v697);
        v702.__r_.__value_.__r.__words[0] = (std::string::size_type)v668;
        if (!v698)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, std::string *))(*v698 + 48))(v698, &v702);
        updated = v665;
        v504 = v698;
        if (v698 == v697)
        {
          v505 = 4;
          v504 = v697;
LABEL_723:
          (*(void (**)(void))(*v504 + 8 * v505))();
        }
        else if (v698)
        {
          v505 = 5;
          goto LABEL_723;
        }
        if (v708.__r_.__value_.__r.__words[0])
        {
          v708.__r_.__value_.__l.__size_ = v708.__r_.__value_.__r.__words[0];
          operator delete(v708.__r_.__value_.__l.__data_);
        }
        v463 = *(void **)v705;
        if (*(_QWORD *)v705)
        {
          *(_QWORD *)&v705[8] = *(_QWORD *)v705;
LABEL_728:
          operator delete(v463);
        }
        goto LABEL_729;
      }
    }
    if (v429 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v430 = operator new(4 * v429);
    v431 = (int *)&v430[4 * v426];
    *v431 = v422;
    v424 = (uint64_t)(v431 + 1);
    if (v423 == v425)
      goto LABEL_615;
LABEL_609:
    v432 = v423 - 4 - v425;
    if (v432 < 0x2C)
      goto LABEL_1010;
    if ((unint64_t)(v425 - v430) < 0x20)
      goto LABEL_1010;
    v433 = (v432 >> 2) + 1;
    v434 = 4 * (v433 & 0x7FFFFFFFFFFFFFF8);
    v435 = &v423[-v434];
    v431 = (int *)((char *)v431 - v434);
    v436 = &v430[4 * v426 - 16];
    v437 = v423 - 16;
    v438 = v433 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v439 = *(_OWORD *)v437;
      *(v436 - 1) = *((_OWORD *)v437 - 1);
      *v436 = v439;
      v436 -= 2;
      v437 -= 32;
      v438 -= 8;
    }
    while (v438);
    v423 = v435;
    if (v433 != (v433 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1010:
      do
      {
        v440 = *((_DWORD *)v423 - 1);
        v423 -= 4;
        *--v431 = v440;
      }
      while (v423 != v425);
    }
    goto LABEL_615;
  }
  if (*off_2540794D8[0] >= 2
    && (off_2540794D8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540794D8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)2)))
  {
    v459 = google::LogMessage::LogMessage((google::LogMessage *)v705, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1352);
    v460 = (_QWORD *)google::LogMessage::stream(v459);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v460, (uint64_t)"UNSAT due to the objective domain.", 34);
    google::LogMessage::~LogMessage((google::LogMessage *)v705);
  }
  *((_BYTE *)v657 + 496) = 1;
  v461 = *((unsigned __int8 *)v668 + 23);
  if ((v461 & 0x80u) == 0)
    v462 = (const std::string::value_type *)v668;
  else
    v462 = *(const std::string::value_type **)v668;
  if ((v461 & 0x80u) != 0)
    v461 = *((_QWORD *)v668 + 1);
  *(_QWORD *)v705 = v462;
  *(_QWORD *)&v705[8] = v461;
  v708.__r_.__value_.__r.__words[0] = (std::string::size_type)" [loading]";
  v708.__r_.__value_.__l.__size_ = 10;
  absl::lts_2020_02_25::StrCat((uint64_t)v705, (uint64_t)&v708, &v702);
  operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v658, (absl::lts_2020_02_25::Mutex *)&v702);
  if (SHIBYTE(v702.__r_.__value_.__r.__words[2]) < 0)
  {
    v463 = (void *)v702.__r_.__value_.__r.__words[0];
    goto LABEL_728;
  }
LABEL_729:
  if ((v693 & 1) != 0)
  {
    operator delete((void *)v694);
    if ((v699.__r_.__value_.__s.__data_[0] & 1) == 0)
      goto LABEL_731;
  }
  else if ((v699.__r_.__value_.__s.__data_[0] & 1) == 0)
  {
LABEL_731:
    if ((updated & 1) == 0)
      return;
    goto LABEL_735;
  }
  operator delete((void *)v699.__r_.__value_.__l.__size_);
  if ((updated & 1) == 0)
    return;
LABEL_735:
  if ((operations_research::sat::SatSolver::FinishPropagation(v657) & 1) == 0)
  {
    *((_BYTE *)v657 + 496) = 1;
    v521 = *((unsigned __int8 *)v668 + 23);
    if ((v521 & 0x80u) == 0)
      v522 = v668;
    else
      v522 = *(operations_research::sat::Model **)v668;
    if ((v521 & 0x80u) != 0)
      v521 = *((_QWORD *)v668 + 1);
    *(_QWORD *)v705 = v522;
    *(_QWORD *)&v705[8] = v521;
    v708.__r_.__value_.__r.__words[0] = (std::string::size_type)" [loading]";
    v708.__r_.__value_.__l.__size_ = 10;
    absl::lts_2020_02_25::StrCat((uint64_t)v705, (uint64_t)&v708, &v702);
    operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v658, (absl::lts_2020_02_25::Mutex *)&v702);
    goto LABEL_760;
  }
  v506 = (uint64_t)v668;
  if (v662 != (operations_research::sat::CpModelProto *)&operations_research::sat::_CpModelProto_default_instance_
    && *((_QWORD *)v662 + 15))
  {
    v507 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v668);
    v705[23] = 4;
    strcpy(v705, "init");
    operations_research::sat::SharedResponseManager::UpdateInnerObjectiveBounds((uint64_t)v658, (absl::lts_2020_02_25::Mutex *)v705, *(_QWORD *)(*((_QWORD *)v507 + 5) + 12 * v674), -*(_QWORD *)(*((_QWORD *)v507 + 5) + 12 * (v674 ^ 1)));
    v508 = v655;
    if ((v705[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v705);
      v508 = v655;
    }
    v509 = v674;
    v510 = (_QWORD *)*v508;
    if (!*v508)
      goto LABEL_751;
    v511 = v508;
    do
    {
      v512 = v510[4];
      v513 = v512 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v512 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
        v514 = v510;
      else
        v514 = v510 + 1;
      if (v513)
        v511 = v510;
      v510 = (_QWORD *)*v514;
    }
    while (*v514);
    if (v511 != v508 && v511[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v515 = v511[5];
    else
LABEL_751:
      v515 = 0;
    v516 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)v668);
    v517 = operator new(0x28uLL);
    *(_QWORD *)v517 = &off_24F984CE0;
    *((_QWORD *)v517 + 1) = v509;
    *((_QWORD *)v517 + 2) = v515;
    *((_QWORD *)v517 + 3) = v658;
    *((_QWORD *)v517 + 4) = v668;
    *(_QWORD *)&v705[24] = v517;
    v518 = v516[66];
    if (v518 < v516[67])
    {
      v519 = (char *)operator new(0x28uLL);
      *(_QWORD *)v519 = &off_24F984CE0;
      v520 = *(_OWORD *)(v517 + 24);
      *(_OWORD *)(v519 + 8) = *(_OWORD *)(v517 + 8);
      *(_OWORD *)(v519 + 24) = v520;
      *(_QWORD *)(v518 + 24) = v519;
      v516[66] = v518 + 32;
      goto LABEL_764;
    }
    v524 = std::vector<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::__push_back_slow_path<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)> const&>(v516 + 65, v705);
    v517 = *(_BYTE **)&v705[24];
    v516[66] = v524;
    if (v517 == v705)
    {
      v525 = 4;
      v517 = v705;
LABEL_767:
      (*(void (**)(_BYTE *))(*(_QWORD *)v517 + 8 * v525))(v517);
    }
    else if (v517)
    {
LABEL_764:
      v525 = 5;
      goto LABEL_767;
    }
    v506 = (uint64_t)v668;
    if (*((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v668)
         + 426))
    {
      v526 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v668);
      v527 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v668);
      v528 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>((uint64_t)v668);
      v506 = (uint64_t)v668;
      if (*((char *)v668 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v699, *(const std::string::value_type **)v668, *((_QWORD *)v668 + 1));
        v506 = (uint64_t)v668;
        if (SHIBYTE(v699.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_773;
LABEL_771:
        *(std::string *)v705 = v699;
      }
      else
      {
        v699 = *(std::string *)v668;
        if ((SHIBYTE(v699.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_771;
LABEL_773:
        std::string::__init_copy_ctor_external((std::string *)v705, v699.__r_.__value_.__l.__data_, v699.__r_.__value_.__l.__size_);
      }
      *(_QWORD *)&v705[24] = v526;
      *(_QWORD *)&v705[32] = v527;
      *(_QWORD *)&v706 = v528;
      *((_QWORD *)&v706 + 1) = v658;
      v529 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LevelZeroCallbackHelper>(v506);
      if ((v705[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v708, *(const std::string::value_type **)v705, *(std::string::size_type *)&v705[8]);
      else
        v708 = *(std::string *)v705;
      v709 = *(_OWORD *)&v705[24];
      v710 = v706;
      v703[0] = 0;
      v530 = (char *)operator new(0x40uLL);
      *(_QWORD *)v530 = off_24F984D60;
      v531 = (std::string *)(v530 + 8);
      if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v531, v708.__r_.__value_.__l.__data_, v708.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v531->__r_.__value_.__l.__data_ = *(_OWORD *)&v708.__r_.__value_.__l.__data_;
        *((_QWORD *)v530 + 3) = *((_QWORD *)&v708.__r_.__value_.__l + 2);
      }
      v532 = v710;
      *((_OWORD *)v530 + 2) = v709;
      *((_OWORD *)v530 + 3) = v532;
      v703[0] = v530;
      v533 = v529[1];
      if (v533 < v529[2])
      {
        *(_QWORD *)(v533 + 24) = v530;
        v703[0] = 0;
        v529[1] = v533 + 32;
        goto LABEL_787;
      }
      v534 = std::vector<std::function<BOOL ()(void)>>::__push_back_slow_path<std::function<BOOL ()(void)>>(v529, &v702);
      v535 = (std::string *)v703[0];
      v529[1] = v534;
      if (v535 == &v702)
      {
        v536 = 4;
        v535 = &v702;
LABEL_786:
        (*(void (**)(void))(v535->__r_.__value_.__r.__words[0] + 8 * v536))();
      }
      else if (v535)
      {
        v536 = 5;
        goto LABEL_786;
      }
LABEL_787:
      if (SHIBYTE(v708.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v708.__r_.__value_.__l.__data_);
        if ((v705[23] & 0x80000000) != 0)
          goto LABEL_856;
LABEL_789:
        if (SHIBYTE(v699.__r_.__value_.__r.__words[2]) < 0)
LABEL_857:
          operator delete(v699.__r_.__value_.__l.__data_);
      }
      else
      {
        if ((v705[23] & 0x80000000) == 0)
          goto LABEL_789;
LABEL_856:
        operator delete(*(void **)v705);
        if (SHIBYTE(v699.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_857;
      }
    }
  }
  v537 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(v506);
  v666 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LinearProgrammingDispatcher>((uint64_t)v668);
  v538 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LPVariables>((uint64_t)v668);
  v539 = -1431655765 * ((*((_QWORD *)v537 + 6) - *((_QWORD *)v537 + 5)) >> 2);
  if ((int)v539 >= 1)
  {
    v540 = v538;
    v541 = 0;
    v542 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
    do
    {
      v545 = v661[12];
      if (v541 >= ((_BYTE *)v661[13] - (_BYTE *)v545) >> 2)
        v546 = -1;
      else
        v546 = v545[v541];
      v547 = 0;
      v548 = ((((unint64_t)v542 + v541) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                                  * ((_QWORD)v542 + v541));
      v549 = v666[1];
      v550 = (v548 >> 7) ^ (*v666 >> 12);
      v551 = v666[3];
      v552 = 0x101010101010101 * (v548 & 0x7F);
      while (1)
      {
        v553 = v550 & v551;
        v554 = *(_QWORD *)(*v666 + v553);
        v555 = ((v554 ^ v552) - 0x101010101010101) & ~(v554 ^ v552) & 0x8080808080808080;
        if (v555)
          break;
LABEL_805:
        if ((v554 & (~v554 << 6) & 0x8080808080808080) != 0)
          goto LABEL_808;
        v547 += 8;
        v550 = v547 + v553;
      }
      while (1)
      {
        v556 = (v553 + (__clz(__rbit64(v555)) >> 3)) & v551;
        if (v541 == *(_DWORD *)(v549 + 16 * v556))
          break;
        v555 &= v555 - 1;
        if (!v555)
          goto LABEL_805;
      }
      if (v556 == v551)
      {
LABEL_808:
        v557 = 0;
        if (v546 < 0)
          goto LABEL_797;
        goto LABEL_811;
      }
      v557 = *(_QWORD *)(v549 + 16 * v556 + 8);
      if (v546 < 0)
        goto LABEL_797;
LABEL_811:
      v559 = (char *)*((_QWORD *)v540 + 1);
      v558 = *((_QWORD *)v540 + 2);
      if ((unint64_t)v559 < v558)
      {
        *(_DWORD *)v559 = v541;
        *((_QWORD *)v559 + 1) = v557;
        v543 = v559 + 24;
        *((_DWORD *)v559 + 4) = v546;
      }
      else
      {
        v560 = v539;
        v561 = v542;
        v562 = *(char **)v540;
        v563 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v559[-*(_QWORD *)v540] >> 3);
        v564 = v563 + 1;
        if (v563 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v565 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v558 - (_QWORD)v562) >> 3);
        if (2 * v565 > v564)
          v564 = 2 * v565;
        if (v565 >= 0x555555555555555)
          v566 = 0xAAAAAAAAAAAAAAALL;
        else
          v566 = v564;
        if (v566)
        {
          if (v566 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v567 = (char *)operator new(24 * v566);
        }
        else
        {
          v567 = 0;
        }
        v568 = &v567[24 * v563];
        *(_DWORD *)v568 = v541;
        *((_QWORD *)v568 + 1) = v557;
        *((_DWORD *)v568 + 4) = v546;
        v569 = v568;
        v542 = v561;
        if (v559 != v562)
        {
          do
          {
            v570 = *(_OWORD *)(v559 - 24);
            *((_DWORD *)v569 - 2) = *((_DWORD *)v559 - 2);
            *(_OWORD *)(v569 - 24) = v570;
            v569 -= 24;
            v559 -= 24;
          }
          while (v559 != v562);
          v559 = *(char **)v540;
        }
        v539 = v560;
        v571 = &v567[24 * v566];
        v543 = v568 + 24;
        *(_QWORD *)v540 = v569;
        *((_QWORD *)v540 + 1) = v568 + 24;
        *((_QWORD *)v540 + 2) = v571;
        if (v559)
          operator delete(v559);
      }
      *((_QWORD *)v540 + 1) = v543;
      if (*((_DWORD *)v540 + 6) <= v546 + 1)
        v544 = v546 + 1;
      else
        v544 = *((_DWORD *)v540 + 6);
      *((_DWORD *)v540 + 6) = v544;
LABEL_797:
      v541 += 2;
    }
    while ((int)v541 < (int)v539);
  }
  v572 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SearchHeuristics>((uint64_t)v668);
  operations_research::sat::ConstructSearchStrategy((uint64_t)v662, v661, v674, (uint64_t)v668, (uint64_t)v705);
  v574 = (_QWORD *)(v572 + 80);
  v573 = *(_QWORD **)(v572 + 80);
  v575 = (_QWORD *)(v572 + 56);
  *(_QWORD *)(v572 + 80) = 0;
  if (v573 == (_QWORD *)(v572 + 56))
  {
    v576 = 4;
    v573 = (_QWORD *)(v572 + 56);
LABEL_832:
    (*(void (**)(void))(*v573 + 8 * v576))();
  }
  else if (v573)
  {
    v576 = 5;
    goto LABEL_832;
  }
  v577 = (_QWORD *)(v572 + 80);
  if (*(_QWORD *)&v705[24])
  {
    if (*(_BYTE **)&v705[24] != v705)
    {
      v577 = &v705[24];
      *v574 = *(_QWORD *)&v705[24];
      goto LABEL_836;
    }
    *v574 = v575;
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v705 + 24))(v705, v572 + 56);
  }
  else
  {
LABEL_836:
    *v577 = 0;
  }
  v578 = *(_QWORD **)&v705[24];
  if (*(_BYTE **)&v705[24] == v705)
  {
    v579 = 4;
    v578 = v705;
LABEL_842:
    (*(void (**)(void))(*v578 + 8 * v579))();
  }
  else if (*(_QWORD *)&v705[24])
  {
    v579 = 5;
    goto LABEL_842;
  }
  if (*off_2540794E0[0] > 2
    && (off_2540794E0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540794E0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    operations_research::sat::InstrumentSearchStrategy((uint64_t)v662, v661, v572 + 56, (uint64_t)v668, (uint64_t)v705);
    v580 = (_QWORD *)*v574;
    *v574 = 0;
    if (v580 == v575)
    {
      v581 = 4;
      v580 = (_QWORD *)(v572 + 56);
LABEL_850:
      (*(void (**)(void))(*v580 + 8 * v581))();
    }
    else if (v580)
    {
      v581 = 5;
      goto LABEL_850;
    }
    if (*(_QWORD *)&v705[24])
    {
      if (*(_BYTE **)&v705[24] != v705)
      {
        *v574 = *(_QWORD *)&v705[24];
        v574 = &v705[24];
        goto LABEL_854;
      }
      *v574 = v575;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v705 + 24))(v705, v572 + 56);
    }
    else
    {
LABEL_854:
      *v574 = 0;
    }
    v582 = *(_QWORD **)&v705[24];
    if (*(_BYTE **)&v705[24] == v705)
    {
      v583 = 4;
      v582 = v705;
LABEL_863:
      (*(void (**)(void))(*v582 + 8 * v583))();
    }
    else if (*(_QWORD *)&v705[24])
    {
      v583 = 5;
      goto LABEL_863;
    }
  }
  v667 = v572;
  memset(&v708, 0, sizeof(v708));
  memset(&v702, 0, sizeof(v702));
  v584 = (uint64_t *)*((_QWORD *)v662 + 16);
  if (!v584)
    v584 = &operations_research::sat::_PartialVariableAssignment_default_instance_;
  v585 = v661;
  if (*((int *)v584 + 4) >= 1)
  {
    for (k = 0; k < *((int *)v584 + 4); ++k)
    {
      v588 = *(unsigned int *)(v584[3] + 4 * k);
      if ((v588 & 0x80000000) != 0)
      {
        v650 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v705, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1436);
        v651 = (_QWORD *)google::LogMessage::stream(v650);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v651, (uint64_t)"Check failed: RefIsPositive(ref) ", 33);
        goto LABEL_972;
      }
      v589 = *((_DWORD *)v585[6] + v588);
      if (v589 == -1)
      {
        v591 = *((unsigned int *)*v585 + v588) ^ (v588 >> 31);
        v590 = -1;
        v592 = v708.__r_.__value_.__r.__words[2];
        v593 = (_QWORD *)v708.__r_.__value_.__l.__size_;
        if (v708.__r_.__value_.__l.__size_ < v708.__r_.__value_.__r.__words[2])
        {
LABEL_876:
          *v593 = v590 | (unint64_t)(v591 << 32);
          v594 = (std::string::size_type)(v593 + 1);
          goto LABEL_898;
        }
      }
      else
      {
        v590 = (2 * v589) >> 1;
        v591 = 0xFFFFFFFFLL;
        v592 = v708.__r_.__value_.__r.__words[2];
        v593 = (_QWORD *)v708.__r_.__value_.__l.__size_;
        if (v708.__r_.__value_.__l.__size_ < v708.__r_.__value_.__r.__words[2])
          goto LABEL_876;
      }
      v595 = v708.__r_.__value_.__r.__words[0];
      v596 = (uint64_t)((uint64_t)v593 - v708.__r_.__value_.__r.__words[0]) >> 3;
      v597 = v596 + 1;
      if ((unint64_t)(v596 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v598 = v592 - v708.__r_.__value_.__r.__words[0];
      if (v598 >> 2 > v597)
        v597 = v598 >> 2;
      if ((unint64_t)v598 >= 0x7FFFFFFFFFFFFFF8)
        v599 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v599 = v597;
      if (v599)
      {
        if (v599 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v600 = (char *)operator new(8 * v599);
      }
      else
      {
        v600 = 0;
      }
      v601 = (unint64_t *)&v600[8 * v596];
      *v601 = v590 | (unint64_t)(v591 << 32);
      v594 = (std::string::size_type)(v601 + 1);
      if (v593 != (_QWORD *)v595)
      {
        v602 = (unint64_t)v593 - v595 - 8;
        if (v602 < 0x58)
          goto LABEL_1011;
        if (v595 - (unint64_t)v600 < 0x20)
          goto LABEL_1011;
        v603 = (v602 >> 3) + 1;
        v604 = 8 * (v603 & 0x3FFFFFFFFFFFFFFCLL);
        v605 = &v593[v604 / 0xFFFFFFFFFFFFFFF8];
        v601 = (unint64_t *)((char *)v601 - v604);
        v606 = &v600[8 * v596 - 16];
        v607 = (__int128 *)(v593 - 2);
        v608 = v603 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v609 = *v607;
          *((_OWORD *)v606 - 1) = *(v607 - 1);
          *(_OWORD *)v606 = v609;
          v606 -= 32;
          v607 -= 2;
          v608 -= 4;
        }
        while (v608);
        v593 = v605;
        if (v603 != (v603 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1011:
          do
          {
            v610 = *--v593;
            *--v601 = v610;
          }
          while (v593 != (_QWORD *)v595);
        }
        v593 = (_QWORD *)v708.__r_.__value_.__r.__words[0];
      }
      v708.__r_.__value_.__r.__words[0] = (std::string::size_type)v601;
      v708.__r_.__value_.__l.__size_ = v594;
      v708.__r_.__value_.__r.__words[2] = (std::string::size_type)&v600[8 * v599];
      if (v593)
        operator delete(v593);
LABEL_898:
      v708.__r_.__value_.__l.__size_ = v594;
      v611 = (uint64_t *)*((_QWORD *)v662 + 16);
      if (v611)
        v612 = (uint64_t *)*((_QWORD *)v662 + 16);
      else
        v612 = &operations_research::sat::_PartialVariableAssignment_default_instance_;
      v613 = *(_QWORD *)(v612[6] + 8 * k);
      v614 = v702.__r_.__value_.__l.__size_;
      if (v702.__r_.__value_.__l.__size_ >= v702.__r_.__value_.__r.__words[2])
      {
        v615 = (void *)v702.__r_.__value_.__r.__words[0];
        v616 = v702.__r_.__value_.__l.__size_ - v702.__r_.__value_.__r.__words[0];
        v617 = (uint64_t)(v702.__r_.__value_.__l.__size_ - v702.__r_.__value_.__r.__words[0]) >> 3;
        v618 = v617 + 1;
        if ((unint64_t)(v617 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v619 = v702.__r_.__value_.__r.__words[2] - v702.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v702.__r_.__value_.__r.__words[2] - v702.__r_.__value_.__r.__words[0]) >> 2 > v618)
          v618 = v619 >> 2;
        if ((unint64_t)v619 >= 0x7FFFFFFFFFFFFFF8)
          v620 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v620 = v618;
        if (v620)
        {
          if (v620 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v621 = (char *)operator new(8 * v620);
          v622 = &v621[8 * v617];
          *(_QWORD *)v622 = v613;
          v587 = (std::string::size_type)(v622 + 8);
          if ((void *)v614 != v615)
          {
LABEL_911:
            v623 = v614 - 8 - (_QWORD)v615;
            if (v623 < 0x58)
            {
              v585 = v661;
              goto LABEL_919;
            }
            v624 = v614 - (_QWORD)&v621[v616];
            v585 = v661;
            if (v624 < 0x20)
              goto LABEL_1012;
            v625 = (v623 >> 3) + 1;
            v626 = 8 * (v625 & 0x3FFFFFFFFFFFFFFCLL);
            v627 = v614 - v626;
            v622 -= v626;
            v628 = &v621[8 * v617 - 16];
            v629 = (__int128 *)(v614 - 16);
            v630 = v625 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v631 = *v629;
              *((_OWORD *)v628 - 1) = *(v629 - 1);
              *(_OWORD *)v628 = v631;
              v628 -= 32;
              v629 -= 2;
              v630 -= 4;
            }
            while (v630);
            v614 = v627;
            if (v625 != (v625 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1012:
              do
              {
LABEL_919:
                v632 = *(_QWORD *)(v614 - 8);
                v614 -= 8;
                *((_QWORD *)v622 - 1) = v632;
                v622 -= 8;
              }
              while ((void *)v614 != v615);
            }
LABEL_920:
            v702.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
            v702.__r_.__value_.__l.__size_ = v587;
            v702.__r_.__value_.__r.__words[2] = (std::string::size_type)&v621[8 * v620];
            if (v615)
            {
              operator delete(v615);
              v611 = (uint64_t *)*((_QWORD *)v662 + 16);
            }
            goto LABEL_869;
          }
        }
        else
        {
          v621 = 0;
          v622 = (char *)(8 * v617);
          *(_QWORD *)(8 * v617) = v613;
          v587 = 8 * v617 + 8;
          if ((void *)v614 != v615)
            goto LABEL_911;
        }
        v585 = v661;
        goto LABEL_920;
      }
      *(_QWORD *)v702.__r_.__value_.__l.__size_ = v613;
      v587 = v614 + 8;
LABEL_869:
      v702.__r_.__value_.__l.__size_ = v587;
      if (v611)
        v584 = v611;
      else
        v584 = &operations_research::sat::_PartialVariableAssignment_default_instance_;
    }
  }
  operations_research::sat::FollowHint((uint64_t)&v708, (uint64_t)&v702, (uint64_t)v668, (uint64_t)v705);
  v633 = *(_QWORD **)(v667 + 112);
  v634 = v667 + 88;
  v635 = (uint64_t *)(v667 + 112);
  *(_QWORD *)(v667 + 112) = 0;
  if (v633 == (_QWORD *)(v667 + 88))
  {
    v636 = 4;
    v633 = (_QWORD *)(v667 + 88);
LABEL_926:
    (*(void (**)(void))(*v633 + 8 * v636))();
  }
  else if (v633)
  {
    v636 = 5;
    goto LABEL_926;
  }
  if (*(_QWORD *)&v705[24])
  {
    if (*(_BYTE **)&v705[24] == v705)
    {
      *v635 = v634;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v705 + 24))(v705, v634);
    }
    else
    {
      *v635 = *(_QWORD *)&v705[24];
      *(_QWORD *)&v705[24] = 0;
    }
  }
  else
  {
    *v635 = 0;
  }
  v637 = *(_QWORD **)&v705[24];
  if (*(_BYTE **)&v705[24] == v705)
  {
    v638 = 4;
    v637 = v705;
LABEL_936:
    (*(void (**)(void))(*v637 + 8 * v638))();
  }
  else if (*(_QWORD *)&v705[24])
  {
    v638 = 5;
    goto LABEL_936;
  }
  if (*((_BYTE *)v659 + 147))
  {
    if (*((char *)v668 + 23) < 0)
      std::string::__init_copy_ctor_external(&v699, *(const std::string::value_type **)v668, *((_QWORD *)v668 + 1));
    else
      v699 = *(std::string *)v668;
    *(_QWORD *)v705 = v662;
    *(_QWORD *)&v705[8] = v668;
    if (SHIBYTE(v699.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)&v705[16], v699.__r_.__value_.__l.__data_, v699.__r_.__value_.__l.__size_);
    else
      *(std::string *)&v705[16] = v699;
    *(_QWORD *)&v706 = v658;
    v639 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>((uint64_t)v668);
    v640 = (uint64_t *)operator new();
    v641 = v674;
    v669 = *(_OWORD *)v705;
    if ((v705[39] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v670, *(const std::string::value_type **)&v705[16], *(std::string::size_type *)&v705[24]);
    else
      v670 = *(std::string *)&v705[16];
    v642 = v706;
    v671 = v706;
    v696 = 0;
    v643 = (char *)operator new(0x38uLL);
    *(_QWORD *)v643 = off_24F984E88;
    *(_OWORD *)(v643 + 8) = v669;
    v644 = (std::string *)(v643 + 24);
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v644, v670.__r_.__value_.__l.__data_, v670.__r_.__value_.__l.__size_);
      v642 = v671;
    }
    else
    {
      *(_OWORD *)&v644->__r_.__value_.__l.__data_ = *(_OWORD *)&v670.__r_.__value_.__l.__data_;
      *((_QWORD *)v643 + 5) = *((_QWORD *)&v670.__r_.__value_.__l + 2);
    }
    *((_QWORD *)v643 + 6) = v642;
    v696 = v643;
    operations_research::sat::CoreBasedOptimizer::CoreBasedOptimizer((uint64_t)v640, v641, (uint64_t *)(v639 + 24), (_QWORD *)(v639 + 48), (uint64_t)v695, (uint64_t)v668);
    v645 = v696;
    if (v696 == v695)
    {
      v646 = 4;
      v645 = v695;
LABEL_954:
      (*(void (**)(void))(*v645 + 8 * v646))();
    }
    else if (v696)
    {
      v646 = 5;
      goto LABEL_954;
    }
    if (SHIBYTE(v670.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v670.__r_.__value_.__l.__data_);
    operations_research::sat::Model::Register<operations_research::sat::CoreBasedOptimizer>((uint64_t *)v668, v640);
    v647 = (_QWORD *)operator new();
    *v647 = &off_24F984F88;
    v647[1] = v640;
    v693 = (unint64_t)v647;
    v648 = (_QWORD *)*((_QWORD *)v668 + 7);
    if ((unint64_t)v648 >= *((_QWORD *)v668 + 8))
    {
      v649 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)v668 + 6, &v693);
    }
    else
    {
      *v648 = v647;
      v649 = (char *)(v648 + 1);
    }
    *((_QWORD *)v668 + 7) = v649;
    if ((v705[39] & 0x80000000) != 0)
      operator delete(*(void **)&v705[16]);
    if (SHIBYTE(v699.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v699.__r_.__value_.__l.__data_);
  }
  if (v702.__r_.__value_.__r.__words[0])
  {
    v702.__r_.__value_.__l.__size_ = v702.__r_.__value_.__r.__words[0];
    operator delete(v702.__r_.__value_.__l.__data_);
  }
  v523 = (void *)v708.__r_.__value_.__r.__words[0];
  if (v708.__r_.__value_.__r.__words[0])
  {
    v708.__r_.__value_.__l.__size_ = v708.__r_.__value_.__r.__words[0];
LABEL_968:
    operator delete(v523);
  }
}

void sub_22DB0287C()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 240));
}

void sub_22DB02884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,void *__p,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *a68;

  if ((a56 & 1) != 0)
    operator delete(__p);
  if ((a67 & 1) != 0)
  {
    operator delete(a68);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::Get<operations_research::sat::SatSolver>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v12;

  v12 = 0;
  v3 = *(_QWORD **)(a1 + 32);
  v1 = (_QWORD *)(a1 + 32);
  v2 = v3;
  if (!v3)
    return 0;
  v4 = v1;
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == v1)
    return 0;
  v8 = v4[4];
  v9 = v4 + 5;
  v10 = &v12;
  if (v8 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
    v10 = v9;
  return *v10;
}

void operations_research::sat::`anonymous namespace'::QuickSolveWithHint(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::SharedResponseManager *a3, operations_research::sat::Model *a4)
{
  BOOL v4;
  int8x8_t *v8;
  operations_research::sat::Model *v9;
  uint64_t v10;
  int v11;
  operations_research::sat::CpSolverResponse *v12;
  uint64_t v13;
  operations_research::sat::SharedResponseManager *v14;
  google::protobuf::Arena *v15;
  std::string *v16;
  int v17;
  operations_research::sat::SatSolver *v18;
  operations_research::sat::IntegerTrail *v19;
  absl::lts_2020_02_25::Mutex *v20;
  uint64_t InnerObjectiveUpperBound;
  uint64_t v22;
  uint64_t v23;
  operations_research::sat::SharedResponseManager *v24;
  _QWORD *v25;
  uint64_t v26;
  std::string __str;
  void *__p;
  _QWORD v29[16];
  std::string *v30;
  char v31;
  operations_research::sat::SatParameters *v32;
  _BYTE v33[576];
  _BYTE v34[576];
  _QWORD v35[3];
  _QWORD *v36;
  const char *v37;
  uint64_t v38;
  _OWORD v39[3];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = this == (operations_research::sat::_anonymous_namespace_ *)&operations_research::sat::_CpModelProto_default_instance_
    || *((_QWORD *)this + 16) == 0;
  if (v4 || operations_research::sat::SharedResponseManager::ProblemIsSolved(a2, a2))
    return;
  v8 = (int8x8_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v34, (const operations_research::sat::SatParameters *)v8);
  v8[36] = (int8x8_t)v8[68].i32[1];
  v8[15].i32[1] = 6;
  v8[2] = vorr_s8(v8[2], (int8x8_t)0x4000000080040000);
  v8[18].i8[3] = 0;
  __p = v8;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v29, (const operations_research::sat::SatParameters *)v34);
  v31 = 1;
  v32 = (operations_research::sat::SatParameters *)v8;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v33, (const operations_research::sat::SatParameters *)v29);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v29);
  operations_research::sat::ConfigureSearchHeuristics(a3, v9);
  v10 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a3);
  operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v10, (int *)this + 22, (char **)&__p);
  v11 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&__p, a3);
  if (__p)
  {
    v29[0] = __p;
    operator delete(__p);
  }
  if (v11 == 2)
  {
    operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)&__p, 0);
    v13 = *((unsigned __int8 *)a3 + 23);
    if ((v13 & 0x80u) == 0)
      v14 = a3;
    else
      v14 = *(operations_research::sat::SharedResponseManager **)a3;
    if ((v13 & 0x80u) != 0)
      v13 = *((_QWORD *)a3 + 1);
    *(_QWORD *)&v39[0] = v14;
    *((_QWORD *)&v39[0] + 1) = v13;
    v37 = " [hint]";
    v38 = 7;
    absl::lts_2020_02_25::StrCat((uint64_t)v39, (uint64_t)&v37, &__str);
    v15 = (google::protobuf::Arena *)(v29[0] & 0xFFFFFFFFFFFFFFFELL);
    if ((v29[0] & 1) != 0)
    {
      v15 = *(google::protobuf::Arena **)v15;
      v16 = v30;
      if (v30 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_16;
    }
    else
    {
      v16 = v30;
      if (v30 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_16:
        std::string::operator=(v16, &__str);
        goto LABEL_19;
      }
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(&v30, v15, (__int128 *)&__str);
LABEL_19:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    operations_research::sat::SharedResponseManager::NewSolution(a2, (const operations_research::sat::CpSolverResponse *)&__p, a3);
    if (*((_QWORD *)this + 15))
    {
      v17 = *(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>((uint64_t)a3)
                      + 16);
      v18 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
      operations_research::sat::SatSolver::Backtrack(v18, 0);
      v19 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
      InnerObjectiveUpperBound = operations_research::sat::SharedResponseManager::GetInnerObjectiveUpperBound(a2, v20);
      v22 = 0x7FFFFFFFFFFFFFFFLL;
      if (InnerObjectiveUpperBound >= (uint64_t)0x8000000000000002)
        v22 = -InnerObjectiveUpperBound;
      LODWORD(v39[0]) = v17 ^ 1;
      *(_QWORD *)((char *)v39 + 4) = v22;
      if ((operations_research::sat::IntegerTrail::Enqueue((uint64_t)v19, *(uint64_t *)&v39[0], SHIDWORD(v22), 0, 0, 0, 0) & 1) == 0)
      {
        v23 = *((unsigned __int8 *)a3 + 23);
        if ((v23 & 0x80u) == 0)
          v24 = a3;
        else
          v24 = *(operations_research::sat::SharedResponseManager **)a3;
        if ((v23 & 0x80u) != 0)
          v23 = *((_QWORD *)a3 + 1);
        *(_QWORD *)&v39[0] = v24;
        *((_QWORD *)&v39[0] + 1) = v23;
        v37 = " [hint]";
        v38 = 7;
        absl::lts_2020_02_25::StrCat((uint64_t)v39, (uint64_t)&v37, &__str);
        operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)a2, (absl::lts_2020_02_25::Mutex *)&__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        operations_research::sat::SharedResponseManager::SetStatsFromModel(a2, a3);
      }
      goto LABEL_40;
    }
    if (v8[16].i8[1])
    {
      operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(v35);
      *(_QWORD *)&v39[0] = a3;
      if (!v36)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, _OWORD *))(*v36 + 48))(v36, v39);
      v25 = v36;
      if (v36 == v35)
      {
        v26 = 4;
        v25 = v35;
        goto LABEL_39;
      }
      if (v36)
      {
        v26 = 5;
LABEL_39:
        (*(void (**)(void))(*v25 + 8 * v26))();
      }
    }
LABEL_40:
    operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)&__p);
  }
  if (v31)
  {
    v31 = 0;
    operations_research::sat::SatParameters::CopyFrom(v32, (const operations_research::sat::SatParameters *)v33);
  }
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v33);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v34);
}

void sub_22DB032C4(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, ...)
{
  va_list va;

  va_start(va, a8);
  if (a8 < 0)
    operator delete(__p);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&STACK[0x4B8]);
  _Unwind_Resume(a1);
}

void operations_research::sat::`anonymous namespace'::SolveLoadedCpModel(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::SharedResponseManager *a3, operations_research::sat::Model *a4)
{
  operations_research::sat::Model *v6;
  uint64_t v7;
  operations_research::sat::SatParameters *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  operations_research::sat *v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  void **v20;
  uint64_t v21;
  operations_research::sat::SatSolver *v22;
  int *v23;
  int *v24;
  int *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int *v30;
  int *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  int *v38;
  uint64_t v39;
  unint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  int *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  operations_research::sat::CoreBasedOptimizer *v54;
  char *v55;
  __int128 v56;
  int v57;
  void **p_p;
  int *v59;
  unsigned int v60;
  void *v61;
  uint64_t v62;
  int *v63;
  __int128 v64;
  __int128 v65;
  operations_research::sat *v66;
  operations_research::sat::SharedResponseManager *v67;
  void *__p;
  int *v69;
  void **v70;
  _QWORD v71[3];
  _QWORD *v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v66 = a3;
  v67 = a2;
  if (!operations_research::sat::SharedResponseManager::ProblemIsSolved(a2, a2))
  {
    *(_QWORD *)&v64 = this;
    *((_QWORD *)&v64 + 1) = &v66;
    *(_QWORD *)&v65 = a3;
    *((_QWORD *)&v65 + 1) = &v67;
    operations_research::sat::ConfigureSearchHeuristics(a3, v6);
    v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)v66);
    v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v66);
    if (this != (operations_research::sat::_anonymous_namespace_ *)&operations_research::sat::_CpModelProto_default_instance_
      && *((_QWORD *)this + 15))
    {
      v60 = *(_DWORD *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::ObjectiveDefinition>((uint64_t)v66)
                      + 16);
      if (v60 == -1)
      {
        v61 = (void *)google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>((int)&v60, (int)&operations_research::sat::kNoIntegerVariable, "objective_var != kNoIntegerVariable");
        if (v61)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1531, (uint64_t **)&v61);
          google::LogMessage::stream((google::LogMessage *)&__p);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
        }
      }
      if (*((_BYTE *)v8 + 147))
      {
        if (*((_BYTE *)v8 + 128))
        {
          v9 = (char *)operator new(0x28uLL);
          *(_QWORD *)v9 = &off_24F984FC0;
          v10 = v65;
          *(_OWORD *)(v9 + 8) = v64;
          *(_OWORD *)(v9 + 24) = v10;
          v70 = (void **)v9;
          operations_research::sat::MinimizeWithHittingSetAndLazyEncoding();
        }
        v49 = (_QWORD *)*((_QWORD *)v66 + 4);
        if (!v49)
          goto LABEL_80;
        v50 = (_QWORD *)((char *)v66 + 32);
        do
        {
          v51 = v49[4];
          v52 = v51 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d;
          if (v51 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d)
            v53 = v49;
          else
            v53 = v49 + 1;
          if (v52)
            v50 = v49;
          v49 = (_QWORD *)*v53;
        }
        while (*v53);
        if (v50 != (_QWORD *)((char *)v66 + 32)
          && v50[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::CoreBasedOptimizer>(void)::d)
        {
          v54 = (operations_research::sat::CoreBasedOptimizer *)v50[5];
        }
        else
        {
LABEL_80:
          v54 = 0;
        }
        if (operations_research::sat::CoreBasedOptimizer::Optimize(v54) - 1 > 1)
          goto LABEL_91;
LABEL_90:
        operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v67, a3);
        goto LABEL_91;
      }
      v17 = v60;
      if ((*((_DWORD *)v8 + 103) & 0x80000000) != 0)
      {
LABEL_86:
        v55 = (char *)operator new(0x28uLL);
        *(_QWORD *)v55 = &off_24F984FC0;
        v56 = v65;
        *(_OWORD *)(v55 + 8) = v64;
        *(_OWORD *)(v55 + 24) = v56;
        v70 = (void **)v55;
        v57 = operations_research::sat::MinimizeIntegerVariableWithLinearScanAndLazyEncoding(v17, (uint64_t)&__p, v66);
        p_p = v70;
        if (v70 == &__p)
        {
          v11 = 4;
          p_p = &__p;
        }
        else
        {
          if (!v70)
            goto LABEL_89;
          v11 = 5;
        }
        (*((void (**)(void))*p_p + v11))();
LABEL_89:
        if ((v57 - 1) > 1)
          goto LABEL_91;
        goto LABEL_90;
      }
      v18 = (char *)operator new(0x28uLL);
      *(_QWORD *)v18 = &off_24F984FC0;
      v19 = v65;
      *(_OWORD *)(v18 + 8) = v64;
      *(_OWORD *)(v18 + 24) = v19;
      v70 = (void **)v18;
      operations_research::sat::RestrictObjectiveDomainWithBinarySearch(v17, (uint64_t)&__p, v66);
      v20 = v70;
      if (v70 == &__p)
      {
        v21 = 4;
        v20 = &__p;
      }
      else
      {
        if (!v70)
        {
LABEL_85:
          LODWORD(v17) = v60;
          goto LABEL_86;
        }
        v21 = 5;
      }
      (*((void (**)(void))*v20 + v21))();
      goto LABEL_85;
    }
    v12 = (int *)((char *)this + 88);
    while (1)
    {
      operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>(v7, v12, (char **)&__p);
      v15 = operations_research::sat::ResetAndSolveIntegerProblem((int **)&__p, v66);
      if (__p)
      {
        v69 = (int *)__p;
        operator delete(__p);
      }
      if (v15 != 2)
        break;
      if (!*((_BYTE *)v8 + 129))
        goto LABEL_91;
      v16 = v66;
      operations_research::sat::ExcludeCurrentSolutionWithoutIgnoredVariableAndBacktrack(v71);
      __p = v16;
      if (!v72)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, void **))(*v72 + 48))(v72, &__p);
      v13 = v72;
      if (v72 == v71)
      {
        v13 = v71;
        v14 = 4;
        goto LABEL_12;
      }
      if (v72)
      {
        v14 = 5;
LABEL_12:
        (*(void (**)(void))(*v13 + 8 * v14))();
      }
    }
    if (v15)
    {
      if (v15 == 1)
        operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v67, a3);
      goto LABEL_91;
    }
    operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v67, a3);
    v22 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v66);
    operations_research::sat::SatSolver::GetLastIncompatibleDecisions(v22, &__p);
    operations_research::sat::MinimizeCoreWithPropagation(v22, (const void **)&__p);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v24 = (int *)__p;
    v23 = v69;
    if (__p != v69)
    {
      v25 = 0;
      v59 = v69;
      do
      {
        v26 = *v24;
        v27 = (uint64_t)*v24 >> 1;
        v28 = *(_QWORD *)(v7 + 72);
        if (v27 >= (*(_QWORD *)(v7 + 80) - v28) >> 2)
        {
          v29 = -1;
          v30 = v63;
          if (v25 < v63)
          {
LABEL_45:
            *v25++ = v29;
            v62 = (uint64_t)v25;
            if ((v26 & 1) == 0)
              goto LABEL_31;
            goto LABEL_30;
          }
        }
        else
        {
          v29 = *(_DWORD *)(v28 + 4 * v27);
          v30 = v63;
          if (v25 < v63)
            goto LABEL_45;
        }
        v31 = (int *)v61;
        v32 = (char *)v25 - (_BYTE *)v61;
        v33 = ((char *)v25 - (_BYTE *)v61) >> 2;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v35 = (char *)v30 - (_BYTE *)v61;
        if (v35 >> 1 > v34)
          v34 = v35 >> 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
          v36 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          if (v36 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v37 = operator new(4 * v36);
          v38 = (int *)&v37[4 * v33];
          *v38 = v29;
          v39 = (uint64_t)(v38 + 1);
          if (v25 == v31)
            goto LABEL_51;
        }
        else
        {
          v37 = 0;
          v38 = (int *)(4 * v33);
          *(_DWORD *)(4 * v33) = v29;
          v39 = 4 * v33 + 4;
          if (v25 == v31)
            goto LABEL_51;
        }
        v40 = (char *)(v25 - 1) - (char *)v31;
        if (v40 < 0xBC)
        {
          v41 = v25;
          goto LABEL_50;
        }
        if (&v37[v32 - 4 - (v40 & 0xFFFFFFFFFFFFFFFCLL)] > &v37[v32 - 4])
        {
          v41 = v25;
          do
          {
LABEL_50:
            v42 = *--v41;
            *--v38 = v42;
          }
          while (v41 != v31);
          goto LABEL_51;
        }
        if ((int *)((char *)v25 - (v40 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v25 - 1)
        {
          v41 = v25;
          goto LABEL_50;
        }
        if ((unint64_t)((char *)v25 - v37 - v32) < 0x20)
        {
          v41 = v25;
          goto LABEL_50;
        }
        v43 = (v40 >> 2) + 1;
        v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
        v41 = &v25[v44 / 0xFFFFFFFFFFFFFFFCLL];
        v38 = (int *)((char *)v38 - v44);
        v45 = &v37[4 * v33 - 16];
        v46 = v25 - 4;
        v47 = v43 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v48 = *(_OWORD *)v46;
          *(v45 - 1) = *((_OWORD *)v46 - 1);
          *v45 = v48;
          v45 -= 2;
          v46 -= 8;
          v47 -= 8;
        }
        while (v47);
        if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_50;
LABEL_51:
        v61 = v38;
        v62 = v39;
        v63 = (int *)&v37[4 * v36];
        if (v31)
          operator delete(v31);
        v25 = (int *)v39;
        v23 = v59;
        v62 = v39;
        if ((v26 & 1) == 0)
          goto LABEL_31;
LABEL_30:
        *(v25 - 1) = ~*(v25 - 1);
LABEL_31:
        ++v24;
      }
      while (v24 != v23);
    }
    operations_research::sat::SharedResponseManager::AddUnsatCore((uint64_t)v67, (absl::lts_2020_02_25::Mutex *)&v61);
    if (v61)
    {
      v62 = (uint64_t)v61;
      operator delete(v61);
    }
    if (__p)
    {
      v69 = (int *)__p;
      operator delete(__p);
    }
LABEL_91:
    operations_research::sat::SharedResponseManager::SetStatsFromModel(v67, v66);
  }
}

void sub_22DB03A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DB03A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void (**a21)(void),uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (a24 == v25)
  {
    a21[4]();
    _Unwind_Resume(exception_object);
  }
  if (a24)
  {
    (*(void (**)(void))(*(_QWORD *)a24 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::vector<long long const*,0>(_QWORD *a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v4;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(a3 - a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v4 >> 3)];
    a1[2] = v7;
    memcpy(v6, a2, v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_22DB03B7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SharedResponseManager::~SharedResponseManager(operations_research::sat::SharedResponseManager *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;

  if ((*((char *)this + 519) & 0x80000000) == 0)
  {
    v2 = (char *)*((_QWORD *)this + 59);
    if (!v2)
      goto LABEL_15;
LABEL_5:
    v3 = (char *)*((_QWORD *)this + 60);
    v4 = v2;
    if (v3 == v2)
    {
LABEL_14:
      *((_QWORD *)this + 60) = v2;
      operator delete(v4);
      goto LABEL_15;
    }
    while (1)
    {
      v5 = (char *)*((_QWORD *)v3 - 1);
      if (v3 - 32 == v5)
      {
        v5 = v3 - 32;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_9;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_9:
      v3 -= 40;
      if (v3 == v2)
      {
        v4 = (char *)*((_QWORD *)this + 59);
        goto LABEL_14;
      }
    }
  }
  operator delete(*((void **)this + 62));
  v2 = (char *)*((_QWORD *)this + 59);
  if (v2)
    goto LABEL_5;
LABEL_15:
  operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository((_QWORD *)this + 38);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::SharedResponseManager *)((char *)this + 56));
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SharedResponseManager *)((char *)this + 32));
}

void ***std::unique_ptr<operations_research::sat::PresolveContext>::~unique_ptr[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::PresolveContext::~PresolveContext(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::SolveWithParameters(operations_research::sat *this@<X0>, const operations_research::sat::CpModelProto *a2@<X1>, std::string::size_type a3@<X8>)
{
  char *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[72];
  void *v15[2];
  uint64_t v16;
  _QWORD **v17;
  _QWORD *v18[2];
  void *__p;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[72];
  _BYTE v23[24];
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v15[1] = 0;
  v15[0] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v16 = 0;
  v17 = v18;
  v21 = 0;
  __p = 0;
  v20 = 0;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v22, a2);
  v24 = 0;
  v6 = (char *)operator new(0x248uLL);
  *(_QWORD *)v6 = &off_24F985078;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v6 + 8), (const operations_research::sat::SatParameters *)v22);
  v24 = v6;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v22);
  v22[0] = v15;
  (*(void (**)(void **__return_ptr, char *, _QWORD *))(*(_QWORD *)v6 + 48))(v14, v6, v22);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v14);
  v7 = v24;
  if (v24 == v23)
  {
    v8 = 4;
    v7 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_6:
  operations_research::sat::SolveCpModel(this, (const operations_research::sat::CpModelProto *)v15, a3);
  v9 = __p;
  if (__p)
  {
    v10 = v20;
    v11 = __p;
    if (v20 != __p)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      while (v10 != v9);
      v11 = __p;
    }
    v20 = v9;
    operator delete(v11);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v17, v18[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_22DB03E38(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 64);
  if (v3 == (_QWORD *)(v1 - 88))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 88);
  }
  else
  {
    if (!v3)
    {
      operations_research::sat::Model::~Model((operations_research::sat::Model *)&STACK[0x240]);
      _Unwind_Resume(a1);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  operations_research::sat::Model::~Model((operations_research::sat::Model *)&STACK[0x240]);
  _Unwind_Resume(a1);
}

uint64_t absl::cleanup_internal::Storage<std::function<void ()(void)>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)a2 = 0;
  v5 = *(_QWORD *)(a2 + 32);
  if (v5)
  {
    if (v5 == a2 + 8)
    {
      v13[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, v12);
    }
    else
    {
      v13[0] = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    v13[0] = 0;
  }
  v7 = (_QWORD *)(a1 + 32);
  v6 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v6 == (_QWORD *)(a1 + 8))
  {
    v8 = 4;
    v6 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v6)
      goto LABEL_14;
    v8 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v8))();
LABEL_14:
  if (!v13[0])
  {
LABEL_17:
    *v7 = 0;
    goto LABEL_19;
  }
  if ((_QWORD *)v13[0] != v12)
  {
    *v7 = v13[0];
    v7 = v13;
    goto LABEL_17;
  }
  *v7 = a1 + 8;
  (*(void (**)(_QWORD *, uint64_t))(v12[0] + 24))(v12, a1 + 8);
LABEL_19:
  v9 = (_QWORD *)v13[0];
  if ((_QWORD *)v13[0] == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_23;
  }
  if (v13[0])
  {
    v10 = 5;
LABEL_23:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

void sub_22DB04034(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

operations_research::sat::DratProofHandler **std::unique_ptr<operations_research::sat::DratProofHandler>::~unique_ptr[abi:ne180100](operations_research::sat::DratProofHandler **a1)
{
  operations_research::sat::DratProofHandler *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::DratProofHandler::~DratProofHandler(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

operations_research::sat::SatSolver **std::unique_ptr<operations_research::sat::SatSolver>::~unique_ptr[abi:ne180100](operations_research::sat::SatSolver **a1)
{
  operations_research::sat::SatSolver *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::SatSolver::~SatSolver(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::DratProofHandler::~DratProofHandler(operations_research::sat::DratProofHandler *this)
{
  operations_research::sat::DratWriter *v2;
  operations_research::sat::DratChecker *v3;
  void *v4;
  void *v5;

  v2 = (operations_research::sat::DratWriter *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
  {
    operations_research::sat::DratWriter::~DratWriter(v2);
    MEMORY[0x22E31DF78]();
  }
  v3 = (operations_research::sat::DratChecker *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    operations_research::sat::DratChecker::~DratChecker(v3);
    MEMORY[0x22E31DF78]();
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

void operations_research::sat::DratChecker::~DratChecker(operations_research::sat::DratChecker *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;

  v2 = (void *)*((_QWORD *)this + 45);
  if (v2)
  {
    *((_QWORD *)this + 46) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 41);
  if (v3)
  {
    *((_QWORD *)this + 42) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 39) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 35);
  if (v5)
  {
    v6 = *((_QWORD *)this + 36);
    v7 = (void *)*((_QWORD *)this + 35);
    if (v6 != v5)
    {
      v8 = *((_QWORD *)this + 36);
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v5;
    operator delete(v7);
  }
  v11 = (void *)*((_QWORD *)this + 32);
  if (v11)
  {
    *((_QWORD *)this + 33) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 29);
  if (v12)
  {
    *((_QWORD *)this + 30) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 26);
  if (v13)
  {
    *((_QWORD *)this + 27) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 20);
  if (v14)
  {
    *((_QWORD *)this + 21) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 16);
  if (v15)
  {
    *((_QWORD *)this + 17) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 12);
  if (v16)
  {
    *((_QWORD *)this + 13) = v16;
    operator delete(v16);
  }
  if (*((_QWORD *)this + 7))
  {
    operator delete(*((void **)this + 4));
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 4) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  v17 = (_QWORD *)*((_QWORD *)this + 8);
  if (v17)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v17);
  v18 = *((_QWORD *)this + 1);
  if (v18)
  {
    v19 = *((_QWORD *)this + 2);
    v20 = (void *)*((_QWORD *)this + 1);
    if (v19 != v18)
    {
      do
      {
        v21 = *(void **)(v19 - 32);
        if (v21)
        {
          *(_QWORD *)(v19 - 24) = v21;
          operator delete(v21);
        }
        v19 -= 56;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v18;
    operator delete(v20);
  }
}

operations_research::sat::SharedBoundsManager **std::unique_ptr<operations_research::sat::SharedBoundsManager>::~unique_ptr[abi:ne180100](operations_research::sat::SharedBoundsManager **a1)
{
  operations_research::sat::SharedBoundsManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    operations_research::sat::SharedBoundsManager::~SharedBoundsManager(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

_QWORD **std::unique_ptr<operations_research::sat::SharedRelaxationSolutionRepository>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository(v2);
    MEMORY[0x22E31DF78](v3, 0x1030C408E1DFBA0);
  }
  return a1;
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::SharedRelaxationSolutionRepository>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE v17[16];

  v3 = result;
  v5 = (uint64_t **)(result + 4);
  v4 = (uint64_t *)result[4];
  if (v4)
  {
    v6 = result + 4;
    v7 = (_QWORD *)result[4];
    do
    {
      v8 = v7[4];
      v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        v6 = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v4;
        v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
          break;
        v4 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_19;
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d)
        break;
      v4 = v12[1];
      if (!v4)
      {
        v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v12 = (uint64_t **)(result + 4);
LABEL_19:
    v14 = (uint64_t *)v12;
    v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::SharedRelaxationSolutionRepository>(void)::d;
    v12[5] = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v5 = (uint64_t *)v12;
    v15 = *(_QWORD *)v3[3];
    v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      v16 = *v5;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_22DB0449C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::SharedLPSolutionRepository>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE v17[16];

  v3 = result;
  v5 = (uint64_t **)(result + 4);
  v4 = (uint64_t *)result[4];
  if (v4)
  {
    v6 = result + 4;
    v7 = (_QWORD *)result[4];
    do
    {
      v8 = v7[4];
      v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        v6 = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v4;
        v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d)
          break;
        v4 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_19;
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d)
        break;
      v4 = v12[1];
      if (!v4)
      {
        v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v12 = (uint64_t **)(result + 4);
LABEL_19:
    v14 = (uint64_t *)v12;
    v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d;
    v12[5] = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v5 = (uint64_t *)v12;
    v15 = *(_QWORD *)v3[3];
    v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      v16 = *v5;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_22DB045E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void ***std::unique_ptr<operations_research::sat::SharedIncompleteSolutionManager>::~unique_ptr[abi:ne180100](void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)(v2 + 3));
    v3 = (char *)*v2;
    if (*v2)
    {
      v4 = (char *)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        v6 = (char *)v2[1];
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *((_QWORD *)v4 - 2) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x22E31DF78](v2, 0x1020C4016EE4530);
  }
  return a1;
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::SharedIncompleteSolutionManager>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _BYTE v17[16];

  v3 = result;
  v5 = (uint64_t **)(result + 4);
  v4 = (uint64_t *)result[4];
  if (v4)
  {
    v6 = result + 4;
    v7 = (_QWORD *)result[4];
    do
    {
      v8 = v7[4];
      v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        v6 = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      v11 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v4;
        v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d)
          break;
        v4 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_19;
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d)
        break;
      v4 = v12[1];
      if (!v4)
      {
        v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v12 = (uint64_t **)(result + 4);
LABEL_19:
    v14 = (uint64_t *)v12;
    v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::SharedIncompleteSolutionManager>(void)::d;
    v12[5] = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v5 = (uint64_t *)v12;
    v15 = *(_QWORD *)v3[3];
    v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      v16 = *v5;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_22DB047C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

_QWORD *std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::~vector[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::SharedBoundsManager::~SharedBoundsManager(operations_research::sat::SharedBoundsManager *this)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = (void **)((char *)this + 200);
  std::deque<operations_research::SparseBitset<long long>>::clear((_QWORD *)this + 25);
  v3 = (void **)*((_QWORD *)this + 26);
  v4 = (void **)*((_QWORD *)this + 27);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = *((_QWORD *)this + 26);
    v6 = *((_QWORD *)this + 27);
    if (v6 != v7)
      *((_QWORD *)this + 27) = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  v8 = (void *)*((_QWORD *)this + 22);
  if (v8)
  {
    *((_QWORD *)this + 23) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 19);
  if (v9)
  {
    *((_QWORD *)this + 20) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 16);
  if (v10)
  {
    *((_QWORD *)this + 17) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 10);
  if (v11)
  {
    *((_QWORD *)this + 11) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 6);
  if (v12)
  {
    *((_QWORD *)this + 7) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 3);
  if (v13)
  {
    *((_QWORD *)this + 4) = v13;
    operator delete(v13);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::SharedBoundsManager *)((char *)this + 16));
}

void std::deque<operations_research::SparseBitset<long long>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 < 0x11)
      goto LABEL_14;
    goto LABEL_13;
  }
  v4 = a1[4];
  v5 = &v2[v4 / 0x33];
  v6 = (char *)*v5 + 80 * (v4 % 0x33);
  v7 = (unint64_t)v2[(a1[5] + v4) / 0x33] + 80 * ((a1[5] + v4) % 0x33);
  if (v6 != (char *)v7)
  {
    do
    {
      v8 = (void *)*((_QWORD *)v6 + 7);
      if (v8)
      {
        *((_QWORD *)v6 + 8) = v8;
        operator delete(v8);
      }
      v9 = (void *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        *((_QWORD *)v6 + 2) = v9;
        operator delete(v9);
      }
      v6 += 80;
      if (v6 - (_BYTE *)*v5 == 4080)
      {
        v10 = (char *)v5[1];
        ++v5;
        v6 = v10;
      }
    }
    while (v6 != (char *)v7);
    v2 = (void **)a1[1];
    v3 = (void **)a1[2];
  }
  a1[5] = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v2);
      v12 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = v12 - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
LABEL_14:
  if (v11 >> 3 == 1)
  {
    v13 = 25;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 51;
  }
  a1[4] = v13;
}

uint64_t operations_research::sat::SharedSolutionRepository<long long>::SharedSolutionRepository(uint64_t a1, int a2)
{
  unint64_t v4[2];
  uint64_t *v5;
  int v6;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  LODWORD(v4[0]) = a2;
  v6 = 1;
  if (a2 < 1)
  {
    v5 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v4, (int)&v6, "num_solutions_to_keep_ >= 1");
    if (v5)
    {
      google::LogMessageFatal::LogMessageFatal(v4, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.h", 47, &v5);
      google::LogMessage::stream((google::LogMessage *)v4);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v4);
    }
  }
  return a1;
}

void sub_22DB04B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB04B30(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::Mutex *v1;
  uint64_t v2;
  void **v3;
  void *v5;

  std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::~vector[abi:ne180100](v3);
  std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::~vector[abi:ne180100]((void **)(v2 + 48));
  v5 = *(void **)(v2 + 24);
  if (v5)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  absl::lts_2020_02_25::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

void **std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *operations_research::sat::SharedSolutionRepository<long long>::~SharedSolutionRepository(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = a1[9];
  if (v2)
  {
    v3 = a1[10];
    v4 = (void *)a1[9];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  v6 = a1[6];
  if (v6)
  {
    v7 = a1[7];
    v8 = (void *)a1[6];
    if (v7 != v6)
    {
      do
      {
        v9 = *(void **)(v7 - 32);
        if (v9)
        {
          *(_QWORD *)(v7 - 24) = v9;
          operator delete(v9);
        }
        v7 -= 40;
      }
      while (v7 != v6);
      v8 = (void *)a1[6];
    }
    a1[7] = v6;
    operator delete(v8);
  }
  v10 = (void *)a1[3];
  if (v10)
  {
    a1[4] = v10;
    operator delete(v10);
  }
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)(a1 + 1));
  return a1;
}

uint64_t operations_research::sat::SharedSolutionRepository<double>::SharedSolutionRepository(uint64_t a1, int a2)
{
  unint64_t v4[2];
  uint64_t *v5;
  int v6;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  LODWORD(v4[0]) = a2;
  v6 = 1;
  if (a2 < 1)
  {
    v5 = (uint64_t *)google::MakeCheckOpString<int,int>((int)v4, (int)&v6, "num_solutions_to_keep_ >= 1");
    if (v5)
    {
      google::LogMessageFatal::LogMessageFatal(v4, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.h", 47, &v5);
      google::LogMessage::stream((google::LogMessage *)v4);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v4);
    }
  }
  return a1;
}

void sub_22DB04D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DB04D6C(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::Mutex *v1;
  uint64_t v2;
  void **v3;
  void *v5;

  std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::~vector[abi:ne180100](v3);
  std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::~vector[abi:ne180100]((void **)(v2 + 48));
  v5 = *(void **)(v2 + 24);
  if (v5)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  absl::lts_2020_02_25::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::__push_back_slow_path<std::unique_ptr<operations_research::sat::SubSolver>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_34;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F984620;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F984620;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::operator()(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  absl::lts_2020_02_25::Mutex *v4;
  operations_research::sat::SharedBoundsManager *v5;
  int *v6;
  int *v7;

  operations_research::sat::SharedResponseManager::Synchronize(*(operations_research::sat::SharedResponseManager **)(a1 + 8), a2);
  operations_research::sat::SharedSolutionRepository<long long>::Synchronize((int *)(*(_QWORD *)(a1 + 8) + 304), v3);
  v5 = **(operations_research::sat::SharedBoundsManager ***)(a1 + 16);
  if (v5)
    operations_research::sat::SharedBoundsManager::Synchronize(v5, v4);
  v6 = **(int ***)(a1 + 24);
  if (v6)
    operations_research::sat::SharedSolutionRepository<long long>::Synchronize(v6, v4);
  v7 = **(int ***)(a1 + 32);
  if (v7)
    operations_research::sat::SharedSolutionRepository<double>::Synchronize(v7, v4);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedR"
                     "esponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS"
                                "0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_120SolveCpModelParallelERKNS0_12CpModelProtoEPNS0_21SharedResponseManagerEPNS_15SharedTimeLimitEP9WallTimerPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::SolveCpModelParallel(operations_research::sat::CpModelProto const&,operations_research::sat::SharedResponseManager *,operations_research::SharedTimeLimit *,WallTimer *,operations_research::sat::Model *)::$_0>,void ()(void)>::target_type()
{
}

void operations_research::sat::SharedSolutionRepository<long long>::Synchronize(int *a1, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  absl::lts_2020_02_25::Mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;

  v3 = (absl::lts_2020_02_25::Mutex *)(a1 + 2);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 2), a2);
  std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution*>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution*>>((void **)a1 + 6, *((_QWORD *)a1 + 7), *((_QWORD *)a1 + 9), *((_QWORD *)a1 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 3));
  v4 = *((_QWORD *)a1 + 9);
  for (i = *((_QWORD *)a1 + 10); i != v4; i -= 40)
  {
    v6 = *(void **)(i - 32);
    if (v6)
    {
      *(_QWORD *)(i - 24) = v6;
      operator delete(v6);
    }
  }
  *((_QWORD *)a1 + 10) = v4;
  gtl::STLStableSortAndRemoveDuplicates<std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>>((uint64_t **)a1 + 6);
  v14 = *((_QWORD *)a1 + 6);
  v15 = *((_QWORD *)a1 + 7);
  v16 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v14) >> 3) > v16)
  {
    v17 = v14 + 40 * (int)v16;
    while (v15 != v17)
    {
      v18 = *(void **)(v15 - 32);
      if (v18)
      {
        *(_QWORD *)(v15 - 24) = v18;
        operator delete(v18);
      }
      v15 -= 40;
    }
    *((_QWORD *)a1 + 7) = v17;
  }
  ++*((_QWORD *)a1 + 2);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v7, v8, v9, v10, v11, v12, v13);
}

void sub_22DB051BC(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedSolutionRepository<double>::Synchronize(int *a1, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  absl::lts_2020_02_25::Mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (absl::lts_2020_02_25::Mutex *)(a1 + 2);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 2), a2);
  std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution*>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution*>>((void **)a1 + 6, *((_QWORD *)a1 + 7), *((_QWORD *)a1 + 9), *((_QWORD *)a1 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 3));
  v5 = *((_QWORD *)a1 + 9);
  for (i = *((_QWORD *)a1 + 10); i != v5; i -= 40)
  {
    v7 = *(void **)(i - 32);
    if (v7)
    {
      *(_QWORD *)(i - 24) = v7;
      operator delete(v7);
    }
  }
  *((_QWORD *)a1 + 10) = v5;
  gtl::STLStableSortAndRemoveDuplicates<std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>>((uint64_t *)a1 + 6, v4);
  v15 = *((_QWORD *)a1 + 6);
  v16 = *((_QWORD *)a1 + 7);
  v17 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v15) >> 3) > v17)
  {
    v18 = v15 + 40 * (int)v17;
    while (v16 != v18)
    {
      v19 = *(void **)(v16 - 32);
      if (v19)
      {
        *(_QWORD *)(v16 - 24) = v19;
        operator delete(v19);
      }
      v16 -= 40;
    }
    *((_QWORD *)a1 + 7) = v18;
  }
  ++*((_QWORD *)a1 + 2);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v8, v9, v10, v11, v12, v13, v14);
}

void sub_22DB052D8(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void gtl::STLStableSortAndRemoveDuplicates<std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>>(uint64_t **a1)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  const std::nothrow_t *v6;
  unint64_t v7;
  void *v8;
  BOOL v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  char v15;

  v2 = *a1;
  v3 = (char *)a1[1];
  v4 = v3 - (char *)*a1;
  v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
  if (v4 < 1)
  {
LABEL_5:
    v10 = 0;
    v7 = 0;
  }
  else
  {
    v6 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
    while (1)
    {
      v8 = operator new(40 * v7, v6);
      if (v8)
        break;
      v9 = v7 > 1;
      v7 >>= 1;
      if (!v9)
        goto LABEL_5;
    }
    v10 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>((uint64_t)v2, v3, (uint64_t)&v15, v5, (uint64_t)v10, v7);
  if (v10)
    operator delete(v10);
  v11 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__equal_to &>(*a1, a1[1]);
  v12 = a1[1];
  if (v12 != v11)
  {
    v13 = v11;
    while (v12 != v13)
    {
      v14 = (void *)*(v12 - 4);
      if (v14)
      {
        *(v12 - 3) = (uint64_t)v14;
        operator delete(v14);
      }
      v12 -= 5;
    }
    a1[1] = v13;
  }
}

void sub_22DB05484(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution*>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution*>>(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  void *v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  void *v51;
  void *v52;
  void *v53;
  char *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;

  v5 = (char *)*a1;
  v6 = (a2 - (uint64_t)*a1) / 40;
  v7 = (uint64_t)*a1 + 40 * v6;
  if (a5 < 1)
    return v7;
  v12 = a1[2];
  v10 = (uint64_t)(a1 + 2);
  v11 = v12;
  v13 = *(_QWORD *)(v10 - 8);
  v57 = v6;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v13] >> 3)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v7) >> 3)) >= a5)
    {
      v18 = a3 + 40 * a5;
      v19 = *(_QWORD *)(v10 - 8);
    }
    else
    {
      v18 = a3 + 8 * ((uint64_t)(v13 - v7) >> 3);
      v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>,operations_research::sat::SharedSolutionRepository<long long>::Solution*,operations_research::sat::SharedSolutionRepository<long long>::Solution*,operations_research::sat::SharedSolutionRepository<long long>::Solution*>(v10, v18, a4, v13);
      a1[1] = (void *)v19;
      if ((uint64_t)(v13 - v7) < 1)
        return v7;
    }
    v20 = v7 + 40 * a5;
    v21 = v19 - 40 * a5;
    v22 = v19;
    if (v21 < v13)
    {
      v22 = v19;
      do
      {
        *(_QWORD *)v22 = *(_QWORD *)v21;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)(v22 + 24) = 0;
        *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
        *(_QWORD *)(v22 + 24) = *(_QWORD *)(v21 + 24);
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        *(_DWORD *)(v22 + 32) = *(_DWORD *)(v21 + 32);
        v22 += 40;
        v21 += 40;
      }
      while (v21 < v13);
    }
    a1[1] = (void *)v22;
    if (v19 != v20)
    {
      v23 = 0;
      v24 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - v20) >> 3);
      v25 = &v5[40 * v6 + 40 * v24];
      v26 = -40 * v24;
      do
      {
        v27 = &v25[v23];
        v28 = v19 + v23;
        v30 = (void **)(v19 + v23 - 32);
        v29 = *v30;
        *(_QWORD *)(v19 + v23 - 40) = *(_QWORD *)&v25[v23 - 40];
        if (v29)
        {
          *(_QWORD *)(v28 - 24) = v29;
          operator delete(v29);
          *v30 = 0;
          *(_QWORD *)(v19 + v23 - 24) = 0;
          *(_QWORD *)(v19 + v23 - 16) = 0;
        }
        *(_OWORD *)v30 = *((_OWORD *)v27 - 2);
        *(_QWORD *)(v28 - 16) = *((_QWORD *)v27 - 2);
        *((_QWORD *)v27 - 4) = 0;
        *((_QWORD *)v27 - 3) = 0;
        *((_QWORD *)v27 - 2) = 0;
        *(_DWORD *)(v28 - 8) = *((_DWORD *)v27 - 2);
        v23 -= 40;
      }
      while (v26 != v23);
    }
    if (v18 != a3)
    {
      v31 = (uint64_t)&v5[40 * v57 + 8];
      v32 = a3 + 16;
      do
      {
        v33 = v32 - 16;
        *(_QWORD *)(v31 - 8) = *(_QWORD *)(v32 - 16);
        if (v31 - 8 != v32 - 16)
          std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)v31, *(char **)(v32 - 8), *(char **)v32, (uint64_t)(*(_QWORD *)v32 - *(_QWORD *)(v32 - 8)) >> 3);
        *(_DWORD *)(v31 + 24) = *(_DWORD *)(v32 + 16);
        v31 += 40;
        v32 += 40;
      }
      while (v33 + 40 != v18);
    }
    return v7;
  }
  v14 = a5 - 0x3333333333333333 * ((uint64_t)(v13 - (_QWORD)v5) >> 3);
  if (v14 > 0x666666666666666)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v15 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v5) >> 3);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0x333333333333333)
    v16 = 0x666666666666666;
  else
    v16 = v14;
  v55 = v5;
  v56 = a1;
  if (v16)
  {
    if (v16 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = (char *)operator new(40 * v16);
  }
  else
  {
    v17 = 0;
  }
  v35 = 0;
  v34 = &v17[40 * v6];
  v60 = &v17[40 * v16];
  v58 = 40 * a5;
  v36 = &v34[40 * a5];
  do
  {
    v38 = v34;
    v39 = &v34[v35];
    v40 = *(_QWORD *)(a3 + v35);
    *((_QWORD *)v39 + 1) = 0;
    *(_QWORD *)v39 = v40;
    *((_QWORD *)v39 + 2) = 0;
    *((_QWORD *)v39 + 3) = 0;
    v42 = *(_BYTE **)(a3 + v35 + 8);
    v41 = *(_BYTE **)(a3 + v35 + 16);
    v43 = v41 - v42;
    if (v41 != v42)
    {
      if (v43 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v44 = (char *)operator new(v41 - v42);
      *((_QWORD *)v39 + 1) = v44;
      v37 = &v44[8 * (v43 >> 3)];
      *((_QWORD *)v39 + 2) = v44;
      *((_QWORD *)v39 + 3) = v37;
      memcpy(v44, v42, v43);
      *((_QWORD *)v39 + 2) = v37;
    }
    *((_DWORD *)v39 + 8) = *(_DWORD *)(a3 + v35 + 32);
    v35 += 40;
    v34 = v38;
  }
  while (v58 != v35);
  v45 = (char *)*v56;
  v46 = v38;
  if (*v56 != (void *)v7)
  {
    v47 = 40 * v6;
    v48 = v55;
    do
    {
      v49 = &v17[v47];
      v50 = &v48[v47];
      *((_QWORD *)v49 - 5) = *(_QWORD *)&v48[v47 - 40];
      *((_OWORD *)v49 - 2) = *(_OWORD *)&v48[v47 - 32];
      *((_QWORD *)v49 - 2) = *(_QWORD *)&v48[v47 - 16];
      *((_QWORD *)v50 - 4) = 0;
      *((_QWORD *)v50 - 3) = 0;
      *((_QWORD *)v50 - 2) = 0;
      *((_DWORD *)v49 - 2) = *(_DWORD *)&v48[v47 - 8];
      v17 -= 40;
      v48 -= 40;
    }
    while (&v48[v47] != v45);
    v46 = &v17[40 * v6];
  }
  v51 = v56[1];
  if (v51 != (void *)v7)
  {
    do
    {
      *(_QWORD *)v36 = *(_QWORD *)v7;
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v36 + 2) = 0;
      *((_QWORD *)v36 + 3) = 0;
      *(_OWORD *)(v36 + 8) = *(_OWORD *)(v7 + 8);
      *((_QWORD *)v36 + 3) = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *((_DWORD *)v36 + 8) = *(_DWORD *)(v7 + 32);
      v36 += 40;
      v7 += 40;
    }
    while ((void *)v7 != v51);
    v7 = (uint64_t)v56[1];
  }
  v52 = *v56;
  *v56 = v46;
  v56[1] = v36;
  v56[2] = v60;
  while ((void *)v7 != v52)
  {
    v53 = *(void **)(v7 - 32);
    if (v53)
    {
      *(_QWORD *)(v7 - 24) = v53;
      operator delete(v53);
    }
    v7 -= 40;
  }
  if (v52)
    operator delete(v52);
  return (uint64_t)v34;
}

void sub_22DB05954(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_22DB0595C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  void *v19;

  v19 = *(void **)(v16 + v17 + 8);
  if (v19)
  {
    *(_QWORD *)(v16 + v17 + 16) = v19;
    operator delete(v19);
  }
  a16 = v16 + v17;
  std::__split_buffer<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution> &>::~__split_buffer((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 40;
        *(_QWORD *)(a1 + 16) = v2 - 40;
        v5 = *(void **)(v2 - 32);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 40;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>,operations_research::sat::SharedSolutionRepository<long long>::Solution*,operations_research::sat::SharedSolutionRepository<long long>::Solution*,operations_research::sat::SharedSolutionRepository<long long>::Solution*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)a4 = *(_QWORD *)v6;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      v9 = *(_BYTE **)(v6 + 8);
      v8 = *(_BYTE **)(v6 + 16);
      v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v11 = (char *)operator new(v8 - v9);
        *(_QWORD *)(a4 + 8) = v11;
        *(_QWORD *)(a4 + 16) = v11;
        v7 = &v11[8 * (v10 >> 3)];
        *(_QWORD *)(a4 + 24) = v7;
        memcpy(v11, v9, v10);
        *(_QWORD *)(a4 + 16) = v7;
      }
      *(_DWORD *)(a4 + 32) = *(_DWORD *)(v6 + 32);
      a4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_22DB05ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>,operations_research::sat::SharedSolutionRepository<long long>::Solution*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>,operations_research::sat::SharedSolutionRepository<long long>::Solution*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 32);
      if (v5)
      {
        *(_QWORD *)(v3 - 24) = v5;
        operator delete(v5);
      }
      v3 -= 40;
    }
  }
  return a1;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v8 = *(a2 - 5);
      v9 = *(_QWORD *)a1;
      if (v8 == *(_QWORD *)a1)
      {
        v10 = *(_QWORD *)(a1 + 8);
        v11 = *(_QWORD *)(a1 + 16);
        if (v10 == v11)
          return;
        v12 = 0;
        v13 = *(a2 - 4);
        while (v13 + v12 != *(a2 - 3))
        {
          v14 = *(_QWORD *)(v13 + v12);
          v15 = *(_QWORD *)(v10 + v12);
          if (v14 < v15)
            break;
          v12 += 8;
          if (v15 < v14 || v12 + v10 == v11)
            return;
        }
      }
      else
      {
        if (v8 >= *(_QWORD *)a1)
          return;
        v10 = *(_QWORD *)(a1 + 8);
        v11 = *(_QWORD *)(a1 + 16);
      }
      v24 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      v25 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)a1 = *(a2 - 5);
      *(_OWORD *)(a1 + 8) = *((_OWORD *)a2 - 2);
      *(_QWORD *)(a1 + 24) = *(a2 - 2);
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 2);
      *(a2 - 5) = v9;
      *(a2 - 4) = v10;
      *(a2 - 3) = v11;
      *(a2 - 2) = v24;
      *((_DWORD *)a2 - 2) = v25;
      return;
    }
    if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>((_QWORD *)a1, a2);
    }
    else
    {
      v21 = a4 >> 1;
      v22 = a1 + 40 * (a4 >> 1);
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, (__int8 *)(a1 + 40 * (a4 >> 1)), a3, a4 >> 1, a5);
        v26 = a4 - v21;
        v27 = a5 + 40 * v21;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1 + 40 * (a4 >> 1), (__int8 *)a2, a3, v26, v27);
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<long long>::Solution *,operations_research::sat::SharedSolutionRepository<long long>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a5, v27, v27, a5 + 40 * a4, a1);
        if (a5)
        {
          v28 = a4;
          v29 = 0;
          v30 = (_QWORD *)(a5 + 16);
          do
          {
            v31 = (void *)*(v30 - 1);
            if (v31)
            {
              *v30 = v31;
              operator delete(v31);
              v28 = a4;
            }
            ++v29;
            v30 += 5;
          }
          while (v29 < v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, a1 + 40 * (a4 >> 1), a3, a4 >> 1, a5, a6);
        v23 = a4 - v21;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(v22, a2, a3, v23, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, v22, (uint64_t)a2, a3, v21, v23, a5, a6);
      }
    }
  }
}

void sub_22DB05DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;

  if (a1 != a2)
  {
    v4 = a1 + 5;
    if (a1 + 5 != a2)
    {
      v5 = a1;
      do
      {
        v7 = v5;
        v5 = v4;
        v8 = *v4;
        v9 = *v7;
        if (v8 == *v7)
        {
          v10 = v7[1];
          v11 = v7[2];
          if (v10 != v11)
          {
            v12 = 0;
            v14 = (uint64_t *)v7[6];
            v13 = (uint64_t *)v7[7];
            while (&v14[v12] != v13)
            {
              v15 = v14[v12];
              v16 = *(_QWORD *)(v10 + v12 * 8);
              if (v15 < v16)
                break;
              ++v12;
              if (v16 < v15 || v12 * 8 + v10 == v11)
                goto LABEL_6;
            }
            goto LABEL_20;
          }
        }
        else if (v8 < *v7)
        {
          v14 = (uint64_t *)v7[6];
          v13 = (uint64_t *)v7[7];
LABEL_20:
          v18 = v7[8];
          v7[6] = 0;
          v7[7] = 0;
          v7[8] = 0;
          v19 = *((_DWORD *)v7 + 18);
          v20 = v5;
          v21 = (void *)v5[1];
          v22 = v7;
          *v5 = v9;
          if (v21)
          {
            v5[2] = v21;
            operator delete(v21);
            v5[2] = 0;
            v5[3] = 0;
          }
          while (1)
          {
            *(_OWORD *)(v20 + 1) = *(_OWORD *)(v22 + 1);
            v20[3] = v22[3];
            v22[1] = 0;
            v22[2] = 0;
            v22[3] = 0;
            *((_DWORD *)v20 + 8) = *((_DWORD *)v22 + 8);
            if (v22 == a1)
              break;
            v23 = *(v22 - 5);
            if (v8 == v23)
            {
              v25 = *(v22 - 4);
              v24 = *(v22 - 3);
              if (v25 == v24)
              {
LABEL_4:
                v6 = v22;
                goto LABEL_5;
              }
              v26 = v25 + 8;
              v27 = v14;
              while (v27 != v13)
              {
                v28 = *v27;
                v29 = *(_QWORD *)(v26 - 8);
                if (*v27 < v29)
                  break;
                ++v27;
                v30 = v29 < v28 || v26 == v24;
                v26 += 8;
                if (v30)
                  goto LABEL_4;
              }
              v20 = v22;
              v22 -= 5;
              *v20 = v23;
            }
            else
            {
              v20 = v22;
              if (v8 >= v23)
                goto LABEL_4;
              v22 -= 5;
              *v20 = v23;
            }
          }
          v6 = a1;
LABEL_5:
          *v6 = v8;
          v22[1] = v14;
          v6[2] = v13;
          v6[3] = v18;
          *((_DWORD *)v6 + 8) = v19;
        }
LABEL_6:
        v4 = v5 + 5;
      }
      while (v5 + 5 != a2);
    }
  }
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, __int8 *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  if (a4)
  {
    if (a4 != 2)
    {
      if (a4 == 1)
      {
        *(_QWORD *)a5 = *(_QWORD *)a1;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
        v9 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a5 + 8) = v9;
        *(_QWORD *)(a5 + 24) = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      }
      else if ((uint64_t)a4 > 8)
      {
        v22 = a4 >> 1;
        v23 = 40 * (a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, a1 + v23, a3, a4 >> 1, a5, a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1 + v23, a2, a3, a4 - v22, a5 + v23, a4 - v22);
        *(_QWORD *)&v9 = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, (_QWORD *)(a1 + v23), a1 + v23, (uint64_t)a2, a5).n128_u64[0];
      }
      else
      {
        *(_QWORD *)&v9 = std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, a2, a5).n128_u64[0];
      }
      return *(double *)&v9;
    }
    v10 = *((_QWORD *)a2 - 5);
    if (v10 == *(_QWORD *)a1)
    {
      v12 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      if (v12 != v11)
      {
        v13 = (uint64_t *)*((_QWORD *)a2 - 4);
        v14 = v12 + 8;
        while (v13 != *((uint64_t **)a2 - 3))
        {
          v15 = *v13;
          v16 = *(_QWORD *)(v14 - 8);
          if (*v13 < v16)
            break;
          ++v13;
          v17 = v16 < v15 || v14 == v11;
          v14 += 8;
          if (v17)
            goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    else if (v10 < *(_QWORD *)a1)
    {
LABEL_20:
      *(_QWORD *)a5 = v10;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      *(_OWORD *)(a5 + 8) = *((_OWORD *)a2 - 2);
      *(_QWORD *)(a5 + 24) = *((_QWORD *)a2 - 2);
      *((_QWORD *)a2 - 3) = 0;
      *((_QWORD *)a2 - 2) = 0;
      *((_QWORD *)a2 - 4) = 0;
      *(_DWORD *)(a5 + 32) = *((_DWORD *)a2 - 2);
      v19 = *(_QWORD *)a1;
      *(_QWORD *)(a5 + 56) = 0;
      *(_QWORD *)(a5 + 64) = 0;
      *(_QWORD *)(a5 + 40) = v19;
      *(_QWORD *)(a5 + 48) = 0;
      v9 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a5 + 48) = v9;
      *(_QWORD *)(a5 + 64) = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      v20 = *(_DWORD *)(a1 + 32);
LABEL_22:
      *(_DWORD *)(a5 + 72) = v20;
      return *(double *)&v9;
    }
LABEL_21:
    *(_QWORD *)a5 = *(_QWORD *)a1;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a5 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
    v21 = *((_QWORD *)a2 - 5);
    *(_QWORD *)(a5 + 56) = 0;
    *(_QWORD *)(a5 + 64) = 0;
    *(_QWORD *)(a5 + 40) = v21;
    *(_QWORD *)(a5 + 48) = 0;
    v9 = *((_OWORD *)a2 - 2);
    *(_OWORD *)(a5 + 48) = v9;
    *(_QWORD *)(a5 + 64) = *((_QWORD *)a2 - 2);
    *((_QWORD *)a2 - 4) = 0;
    *((_QWORD *)a2 - 3) = 0;
    *((_QWORD *)a2 - 2) = 0;
    v20 = *((_DWORD *)a2 - 2);
    goto LABEL_22;
  }
  return *(double *)&v9;
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<long long>::Solution *,operations_research::sat::SharedSolutionRepository<long long>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void **v26;

  if (a1 == a2)
  {
LABEL_23:
    if (a3 != a4)
    {
      v20 = a5 + 16;
      do
      {
        v21 = *(void **)(v20 - 8);
        *(_QWORD *)(v20 - 16) = *(_QWORD *)a3;
        if (v21)
        {
          *(_QWORD *)v20 = v21;
          operator delete(v21);
          *(_QWORD *)(v20 - 8) = 0;
          *(_QWORD *)v20 = 0;
          *(_QWORD *)(v20 + 8) = 0;
        }
        result = *(__n128 *)(a3 + 8);
        *(__n128 *)(v20 - 8) = result;
        *(_QWORD *)(v20 + 8) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_DWORD *)(v20 + 16) = *(_DWORD *)(a3 + 32);
        v20 += 40;
        a3 += 40;
      }
      while (a3 != a4);
    }
    return result;
  }
  v9 = a1;
  while (a3 != a4)
  {
    if (*(_QWORD *)a3 == *(_QWORD *)v9)
    {
      v12 = *(_QWORD *)(v9 + 8);
      v11 = *(_QWORD *)(v9 + 16);
      if (v12 != v11)
      {
        v13 = *(uint64_t **)(a3 + 8);
        v14 = v12 + 8;
        while (v13 != *(uint64_t **)(a3 + 16))
        {
          v15 = *v13;
          v16 = *(_QWORD *)(v14 - 8);
          if (*v13 < v16)
            break;
          ++v13;
          v17 = v16 < v15 || v14 == v11;
          v14 += 8;
          if (v17)
            goto LABEL_21;
        }
        goto LABEL_17;
      }
LABEL_21:
      *(_QWORD *)a5 = *(_QWORD *)v9;
      v19 = *(void **)(a5 + 8);
      if (v19)
      {
        *(_QWORD *)(a5 + 16) = v19;
        operator delete(v19);
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
      }
      result = *(__n128 *)(v9 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(v9 + 32);
      v9 += 40;
      a5 += 40;
      if (v9 == a2)
        goto LABEL_23;
    }
    else
    {
      if (*(_QWORD *)a3 >= *(_QWORD *)v9)
        goto LABEL_21;
LABEL_17:
      *(_QWORD *)a5 = *(_QWORD *)a3;
      v18 = *(void **)(a5 + 8);
      if (v18)
      {
        *(_QWORD *)(a5 + 16) = v18;
        operator delete(v18);
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
      }
      result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if (v9 == a2)
        goto LABEL_23;
    }
  }
  if (v9 != a2)
  {
    v22 = 0;
    do
    {
      v23 = v9 + v22;
      v24 = a5 + v22;
      *(_QWORD *)(a5 + v22) = *(_QWORD *)(v9 + v22);
      v26 = (void **)(a5 + v22 + 8);
      v25 = *v26;
      if (*v26)
      {
        *(_QWORD *)(v24 + 16) = v25;
        operator delete(v25);
        *v26 = 0;
        *(_QWORD *)(a5 + v22 + 16) = 0;
        *(_QWORD *)(a5 + v22 + 24) = 0;
      }
      result = *(__n128 *)(v23 + 8);
      *(__n128 *)v26 = result;
      *(_QWORD *)(v24 + 24) = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)(v23 + 24) = 0;
      *(_DWORD *)(v24 + 32) = *(_DWORD *)(v23 + 32);
      v22 += 40;
    }
    while (v23 + 40 != a2);
  }
  return result;
}

uint64_t *std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  void *v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    v4 = *v3;
    if (*v3)
    {
      v5 = 0;
      v6 = (_QWORD *)(v2 + 16);
      do
      {
        v7 = (void *)*(v6 - 1);
        if (v7)
        {
          *v6 = v7;
          operator delete(v7);
          v4 = *v3;
        }
        ++v5;
        v6 += 5;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  int v61;

  if (!a6)
    return result;
  v8 = a8;
  v9 = a6;
  do
  {
    while (2)
    {
      if (v9 <= v8 || a5 <= v8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, a2, a3, a4, a5, v9, a7);
        return result;
      }
      if (!a5)
        return result;
      v15 = *(_QWORD *)a2;
      while (v15 != *(_QWORD *)a1)
      {
        if (v15 < *(_QWORD *)a1)
        {
          v15 = *(_QWORD *)a1;
          goto LABEL_23;
        }
LABEL_20:
        a1 += 40;
        if (!--a5)
          return result;
      }
      v17 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 16);
      if (v17 == v16)
        goto LABEL_20;
      v18 = *(uint64_t **)(a2 + 8);
      v19 = v17 + 8;
      while (v18 != *(uint64_t **)(a2 + 16))
      {
        v20 = *v18;
        v21 = *(_QWORD *)(v19 - 8);
        if (*v18 < v21)
          break;
        ++v18;
        v22 = v21 < v20 || v19 == v16;
        v19 += 8;
        if (v22)
          goto LABEL_20;
      }
LABEL_23:
      if (a5 < v9)
      {
        if (v9 >= 0)
          v23 = v9;
        else
          v23 = v9 + 1;
        v24 = v23 >> 1;
        v25 = (uint64_t *)(a2 + 40 * (v23 >> 1));
        v26 = (uint64_t *)a1;
        if (a2 == a1)
        {
LABEL_28:
          v27 = a3;
          v28 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v26 - a1) >> 3);
          goto LABEL_41;
        }
        v40 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
        v41 = *v25;
        v26 = (uint64_t *)a1;
        while (2)
        {
          v42 = v40 >> 1;
          v43 = &v26[5 * (v40 >> 1)];
          if (v41 == *v43)
          {
            v44 = &v26[5 * v42];
            v46 = v44[1];
            v45 = v44[2];
            if (v46 != v45)
            {
              v47 = v46 + 8;
              v48 = *(uint64_t **)(a2 + 40 * v24 + 8);
              while (v48 != *(uint64_t **)(a2 + 40 * v24 + 16))
              {
                v49 = *v48;
                v50 = *(_QWORD *)(v47 - 8);
                if (*v48 < v50)
                  break;
                ++v48;
                v51 = v50 < v49 || v47 == v45;
                v47 += 8;
                if (v51)
                  goto LABEL_45;
              }
LABEL_46:
              v40 = v42;
              if (!v42)
                goto LABEL_28;
              continue;
            }
          }
          else if (v41 < *v43)
          {
            goto LABEL_46;
          }
          break;
        }
LABEL_45:
        v26 = v43 + 5;
        v42 = v40 + ~v42;
        goto LABEL_46;
      }
      if (a5 == 1)
      {
        v60 = *(_QWORD *)(a1 + 24);
        result = *(__n128 *)(a1 + 8);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v61 = *(_DWORD *)(a1 + 32);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_QWORD *)a2 = v15;
        *(__n128 *)(a2 + 8) = result;
        *(_QWORD *)(a2 + 24) = v60;
        *(_DWORD *)(a2 + 32) = v61;
        return result;
      }
      if (a5 >= 0)
        v29 = a5;
      else
        v29 = a5 + 1;
      v28 = v29 >> 1;
      v26 = (uint64_t *)(a1 + 40 * (v29 >> 1));
      v25 = (uint64_t *)a2;
      if (a2 != a3)
      {
        v30 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
        v31 = *v26;
        v32 = a1 + 40 * v28;
        v34 = *(_QWORD *)(v32 + 8);
        v33 = *(_QWORD *)(v32 + 16);
        if (v34 == v33)
        {
          v25 = (uint64_t *)a2;
          do
          {
            v35 = v30 >> 1;
            v36 = &v25[5 * (v30 >> 1)];
            v38 = *v36;
            v37 = v36 + 5;
            v30 += ~(v30 >> 1);
            if (v38 < v31)
              v25 = v37;
            else
              v30 = v35;
          }
          while (v30);
          goto LABEL_40;
        }
        v52 = v34 + 8;
        v25 = (uint64_t *)a2;
        while (2)
        {
          v53 = v30 >> 1;
          v54 = &v25[5 * (v30 >> 1)];
          if (*v54 == v31)
          {
            v55 = (uint64_t *)v25[5 * v53 + 1];
            v56 = v52;
            while (v55 != (uint64_t *)v25[5 * v53 + 2])
            {
              v57 = *v55;
              v58 = *(_QWORD *)(v56 - 8);
              if (*v55 < v58)
                break;
              ++v55;
              v59 = v58 < v57 || v56 == v33;
              v56 += 8;
              if (v59)
                goto LABEL_62;
            }
LABEL_61:
            v25 = v54 + 5;
            v53 = v30 + ~v53;
          }
          else if (*v54 < v31)
          {
            goto LABEL_61;
          }
LABEL_62:
          v30 = v53;
          if (!v53)
            break;
          continue;
        }
      }
LABEL_40:
      v27 = a3;
      v24 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v25 - a2) >> 3);
LABEL_41:
      a5 -= v28;
      v9 -= v24;
      v39 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(v26, (uint64_t *)a2, v25);
      a3 = (uint64_t)v39;
      if (v28 + v24 >= a5 + v9)
      {
        v13 = v27;
        v8 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(v39, v25, v13, a4, a5, v9, a7, a8);
        v9 = v24;
        a5 = v28;
        a2 = (uint64_t)v26;
        if (!v24)
          return result;
        continue;
      }
      break;
    }
    std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a1, v26, v39, a4, v28, v24, a7, a8);
    a1 = a3;
    a3 = v27;
    v8 = a8;
    a2 = (uint64_t)v25;
  }
  while (v9);
  return result;
}

__n128 std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, __int8 *a2, uint64_t a3)
{
  __n128 *v5;
  __n128 result;
  __n128 *v7;
  int64_t *v8;
  int64_t *v9;
  __n128 *v10;
  int64_t v11;
  int64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int64_t *v22;
  int64_t *v23;
  int64_t v24;
  int64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  void *v34;
  void *v35;
  _QWORD *v36;

  if ((__int8 *)a1 != a2)
  {
    v5 = (__n128 *)a1;
    *(_QWORD *)a3 = *(_QWORD *)a1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    result = *(__n128 *)(a1 + 8);
    *(__n128 *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 32);
    v7 = (__n128 *)(a1 + 40);
    if ((__int8 *)(a1 + 40) != a2)
    {
      v8 = (int64_t *)a3;
      v9 = (int64_t *)a3;
      do
      {
        while (1)
        {
          v10 = v7;
          v12 = *v9;
          v9 += 5;
          v11 = v12;
          v13 = (int64_t)v10->n128_u64[0] < v12;
          if (v10->n128_u64[0] == v12)
            break;
          if (v13)
          {
            v14 = v8[1];
            v15 = v8[2];
            goto LABEL_19;
          }
LABEL_4:
          v8[5] = v10->n128_u64[0];
          v8[6] = 0;
          v8[7] = 0;
          v8[8] = 0;
          result = v5[3];
          *((__n128 *)v8 + 3) = result;
          v8[8] = v5[4].n128_i64[0];
          v5[3].n128_u64[0] = 0;
          v5[3].n128_u64[1] = 0;
          v5[4].n128_u64[0] = 0;
          *((_DWORD *)v8 + 18) = v5[4].n128_u32[2];
          v7 = (__n128 *)((char *)v10 + 40);
          v8 = v9;
          v5 = v10;
          if (&v10[2].n128_i8[8] == a2)
            return result;
        }
        v14 = v8[1];
        v15 = v8[2];
        if (v14 == v15)
          goto LABEL_4;
        v16 = 0;
        v17 = v5[3].n128_u64[0];
        while (v17 + v16 != v5[3].n128_u64[1])
        {
          v18 = *(_QWORD *)(v17 + v16);
          v19 = *(_QWORD *)(v14 + v16);
          if (v18 < v19)
            break;
          v16 += 8;
          if (v19 < v18 || v16 + v14 == v15)
            goto LABEL_4;
        }
LABEL_19:
        v8[5] = v11;
        v8[6] = v14;
        v21 = v8[3];
        v8[7] = v15;
        v8[8] = v21;
        v8[1] = 0;
        v8[2] = 0;
        v8[3] = 0;
        *((_DWORD *)v8 + 18) = *((_DWORD *)v8 + 8);
        v22 = (int64_t *)a3;
        if (v8 != (int64_t *)a3)
        {
          v23 = v8;
          do
          {
            v25 = *(v23 - 5);
            v23 -= 5;
            v24 = v25;
            v26 = (int64_t)v10->n128_u64[0] < v25;
            if (v10->n128_u64[0] == v25)
            {
              v28 = *(v8 - 4);
              v27 = *(v8 - 3);
              if (v28 == v27)
                goto LABEL_37;
              v29 = (uint64_t *)v5[3].n128_u64[0];
              v30 = v28 + 8;
              while (v29 != (uint64_t *)v5[3].n128_u64[1])
              {
                v31 = *v29;
                v32 = *(_QWORD *)(v30 - 8);
                if (*v29 < v32)
                  break;
                ++v29;
                v33 = v32 < v31 || v30 == v27;
                v30 += 8;
                if (v33)
                  goto LABEL_37;
              }
            }
            else if (!v26)
            {
LABEL_37:
              v22 = v8;
              goto LABEL_38;
            }
            *v8 = v24;
            v34 = (void *)v8[1];
            if (v34)
            {
              v8[2] = (int64_t)v34;
              operator delete(v34);
            }
            *(_OWORD *)(v8 + 1) = *((_OWORD *)v8 - 2);
            v8[3] = *(v8 - 2);
            *(v8 - 3) = 0;
            *(v8 - 2) = 0;
            *(v8 - 4) = 0;
            *((_DWORD *)v8 + 8) = *((_DWORD *)v8 - 2);
            v8 = v23;
          }
          while (v23 != (int64_t *)a3);
          v22 = (int64_t *)a3;
          *(_QWORD *)a3 = v10->n128_u64[0];
          v36 = (_QWORD *)(a3 + 8);
          v35 = *(void **)(a3 + 8);
          if (!v35)
            goto LABEL_40;
LABEL_39:
          v22[2] = (int64_t)v35;
          operator delete(v35);
          *v36 = 0;
          v36[1] = 0;
          v36[2] = 0;
          goto LABEL_40;
        }
LABEL_38:
        *v22 = v10->n128_u64[0];
        v36 = v22 + 1;
        v35 = (void *)v22[1];
        if (v35)
          goto LABEL_39;
LABEL_40:
        result = v5[3];
        *(__n128 *)(v22 + 1) = result;
        v22[3] = v5[4].n128_i64[0];
        v5[3].n128_u64[0] = 0;
        v5[3].n128_u64[1] = 0;
        v5[4].n128_u64[0] = 0;
        *((_DWORD *)v22 + 8) = v5[4].n128_u32[2];
        v7 = (__n128 *)((char *)v10 + 40);
        v8 = v9;
        v5 = v10;
      }
      while (&v10[2].n128_i8[8] != a2);
    }
  }
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if ((_QWORD *)a1 == a2)
  {
LABEL_20:
    while (a3 != a4)
    {
      *(_QWORD *)a5 = *(_QWORD *)a3;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
    }
    return result;
  }
  while (a3 != a4)
  {
    if (*(_QWORD *)a3 == *(_QWORD *)a1)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v6 = *(_QWORD *)(a1 + 16);
      if (v7 != v6)
      {
        v8 = *(uint64_t **)(a3 + 8);
        v9 = v7 + 8;
        while (v8 != *(uint64_t **)(a3 + 16))
        {
          v10 = *v8;
          v11 = *(_QWORD *)(v9 - 8);
          if (*v8 < v11)
            break;
          ++v8;
          v12 = v11 < v10 || v9 == v6;
          v9 += 8;
          if (v12)
            goto LABEL_3;
        }
        goto LABEL_17;
      }
LABEL_3:
      *(_QWORD *)a5 = *(_QWORD *)a1;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      result = *(__n128 *)(a1 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      a1 += 40;
      a5 += 40;
      if ((_QWORD *)a1 == a2)
        goto LABEL_20;
    }
    else
    {
      if (*(_QWORD *)a3 >= *(_QWORD *)a1)
        goto LABEL_3;
LABEL_17:
      *(_QWORD *)a5 = *(_QWORD *)a3;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if ((_QWORD *)a1 == a2)
        goto LABEL_20;
    }
  }
  if ((_QWORD *)a1 != a2)
  {
    v13 = 0;
    do
    {
      v14 = a5 + v13;
      v15 = (_QWORD *)(a1 + v13);
      *(_QWORD *)v14 = *(_QWORD *)(a1 + v13);
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      result = *(__n128 *)(a1 + v13 + 8);
      *(__n128 *)(v14 + 8) = result;
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(a1 + v13 + 24);
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = 0;
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a1 + v13 + 32);
      v13 += 40;
    }
    while (v15 + 5 != a2);
  }
  return result;
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  unint64_t v20;

  v20 = 0;
  if (a5 > a6)
  {
    v10 = a7;
    if (a2 != a3)
    {
      v11 = 0;
      v10 = a7;
      v12 = a2;
      do
      {
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)(v10 + 24) = 0;
        *(_OWORD *)(v10 + 8) = *(_OWORD *)(v12 + 8);
        *(_QWORD *)(v10 + 24) = *(_QWORD *)(v12 + 24);
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 24) = 0;
        *(_DWORD *)(v10 + 32) = *(_DWORD *)(v12 + 32);
        ++v11;
        v10 += 40;
        v12 += 40;
      }
      while (v12 != a3);
      v20 = v11;
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>>(v10, v10, a7, a7, a2, a2, a1, a1, a3, a3);
    if (!a7)
      return;
LABEL_13:
    v16 = v20;
    if (v20)
    {
      v17 = 0;
      v18 = (_QWORD *)(a7 + 16);
      do
      {
        v19 = (void *)*(v18 - 1);
        if (v19)
        {
          *v18 = v19;
          operator delete(v19);
          v16 = v20;
        }
        ++v17;
        v18 += 5;
      }
      while (v17 < v16);
    }
    return;
  }
  v13 = a7;
  if (a1 != a2)
  {
    v14 = 0;
    v13 = a7;
    v15 = a1;
    do
    {
      *(_QWORD *)v13 = *(_QWORD *)v15;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v15 + 8);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)(v15 + 24) = 0;
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v15 + 32);
      ++v14;
      v13 += 40;
      v15 += 40;
    }
    while (v15 != a2);
    v20 = v14;
  }
  std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<long long>::Solution *,operations_research::sat::SharedSolutionRepository<long long>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(a7, v13, a2, a3, a1);
  if (a7)
    goto LABEL_13;
}

void sub_22DB06DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DB06DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  result = a3;
  if (a1 != a2)
  {
    if (a2 == a3)
    {
      return a1;
    }
    else
    {
      result = a1 + 5;
      v5 = a1 + 5;
      v6 = a2;
      while (1)
      {
        v7 = *(v5 - 5);
        v8 = *(v5 - 2);
        v9 = *((_OWORD *)v5 - 2);
        *(v5 - 3) = 0;
        *(v5 - 2) = 0;
        *(v5 - 4) = 0;
        v10 = *((_DWORD *)v5 - 2);
        *(v5 - 5) = *v6;
        *((_OWORD *)v5 - 2) = *(_OWORD *)(v6 + 1);
        *(v5 - 2) = v6[3];
        *((_DWORD *)v5 - 2) = *((_DWORD *)v6 + 8);
        *v6 = v7;
        *(_OWORD *)(v6 + 1) = v9;
        v6[3] = v8;
        *((_DWORD *)v6 + 8) = v10;
        v6 += 5;
        if (v6 == a3)
          break;
        if (v5 == a2)
          a2 = v6;
        v5 += 5;
        result += 5;
      }
      if (v5 != a2)
      {
        v11 = a2;
        while (1)
        {
          v12 = *v5;
          v13 = v5[3];
          v14 = *(_OWORD *)(v5 + 1);
          v5[2] = 0;
          v5[3] = 0;
          v5[1] = 0;
          v15 = *((_DWORD *)v5 + 8);
          *v5 = *v11;
          *(_OWORD *)(v5 + 1) = *(_OWORD *)(v11 + 1);
          v5[3] = v11[3];
          *((_DWORD *)v5 + 8) = *((_DWORD *)v11 + 8);
          *v11 = v12;
          *(_OWORD *)(v11 + 1) = v14;
          v11[3] = v13;
          *((_DWORD *)v11 + 8) = v15;
          v5 += 5;
          v11 += 5;
          v16 = v5 == a2;
          if (v11 == a3)
          {
            if (v5 == a2)
              return result;
            v11 = a2 + 5;
            while (1)
            {
              v17 = *v5;
              v18 = v5[3];
              v19 = *(_OWORD *)(v5 + 1);
              v5[2] = 0;
              v5[3] = 0;
              v5[1] = 0;
              v20 = *((_DWORD *)v5 + 8);
              *v5 = *a2;
              *(_OWORD *)(v5 + 1) = *(_OWORD *)(a2 + 1);
              v5[3] = a2[3];
              *((_DWORD *)v5 + 8) = *((_DWORD *)a2 + 8);
              *a2 = v17;
              *(_OWORD *)(a2 + 1) = v19;
              a2[3] = v18;
              *((_DWORD *)a2 + 8) = v20;
              v5 += 5;
              v16 = v5 == a2;
              if (v11 != a3)
                break;
              if (v5 == a2)
                return result;
            }
          }
          if (v16)
            a2 = v11;
        }
      }
    }
  }
  return result;
}

__n128 std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<long long>::Solution *,operations_research::sat::SharedSolutionRepository<long long>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void **v24;

  if (a1 == a2)
    return result;
  v9 = a1;
  while (a3 != a4)
  {
    if (*(_QWORD *)a3 == *(_QWORD *)v9)
    {
      v12 = *(_QWORD *)(v9 + 8);
      v11 = *(_QWORD *)(v9 + 16);
      if (v12 != v11)
      {
        v13 = *(uint64_t **)(a3 + 8);
        v14 = v12 + 8;
        while (v13 != *(uint64_t **)(a3 + 16))
        {
          v15 = *v13;
          v16 = *(_QWORD *)(v14 - 8);
          if (*v13 < v16)
            break;
          ++v13;
          v17 = v16 < v15 || v14 == v11;
          v14 += 8;
          if (v17)
            goto LABEL_21;
        }
        goto LABEL_17;
      }
LABEL_21:
      *(_QWORD *)a5 = *(_QWORD *)v9;
      v19 = *(void **)(a5 + 8);
      if (v19)
      {
        *(_QWORD *)(a5 + 16) = v19;
        operator delete(v19);
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
      }
      result = *(__n128 *)(v9 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(v9 + 32);
      v9 += 40;
      a5 += 40;
      if (v9 == a2)
        return result;
    }
    else
    {
      if (*(_QWORD *)a3 >= *(_QWORD *)v9)
        goto LABEL_21;
LABEL_17:
      *(_QWORD *)a5 = *(_QWORD *)a3;
      v18 = *(void **)(a5 + 8);
      if (v18)
      {
        *(_QWORD *)(a5 + 16) = v18;
        operator delete(v18);
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
      }
      result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if (v9 == a2)
        return result;
    }
  }
  v20 = 0;
  do
  {
    v21 = v9 + v20;
    v22 = a5 + v20;
    *(_QWORD *)(a5 + v20) = *(_QWORD *)(v9 + v20);
    v24 = (void **)(a5 + v20 + 8);
    v23 = *v24;
    if (*v24)
    {
      *(_QWORD *)(v22 + 16) = v23;
      operator delete(v23);
      *v24 = 0;
      *(_QWORD *)(a5 + v20 + 16) = 0;
      *(_QWORD *)(a5 + v20 + 24) = 0;
    }
    result = *(__n128 *)(v21 + 8);
    *(__n128 *)v24 = result;
    *(_QWORD *)(v22 + 24) = *(_QWORD *)(v21 + 24);
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_DWORD *)(v22 + 32) = *(_DWORD *)(v21 + 32);
    v20 += 40;
  }
  while (v21 + 40 != a2);
  return result;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void **v32;

  if (a2 == a4)
    return;
  v12 = a2;
  while (a6 != a8)
  {
    v17 = a6 - 40;
    v19 = *(_QWORD *)(a6 - 40);
    v20 = *(_QWORD *)(v12 - 40);
    if (v20 == v19)
    {
      v22 = *(_QWORD *)(a6 - 32);
      v21 = *(_QWORD *)(a6 - 24);
      if (v22 != v21)
      {
        v23 = *(uint64_t **)(v12 - 32);
        v24 = v22 + 8;
        while (v23 != *(uint64_t **)(v12 - 24))
        {
          v25 = *v23;
          v26 = *(_QWORD *)(v24 - 8);
          if (*v23 < v26)
            break;
          ++v23;
          v27 = v26 < v25 || v24 == v21;
          v24 += 8;
          if (v27)
            goto LABEL_3;
        }
LABEL_19:
        v15 = (_QWORD *)(a10 - 32);
        v14 = *(void **)(a10 - 32);
        *(_QWORD *)(a10 - 40) = v19;
        v16 = a6;
        if (!v14)
          goto LABEL_5;
LABEL_4:
        *(_QWORD *)(a10 - 24) = v14;
        operator delete(v14);
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        goto LABEL_5;
      }
    }
    else if (v20 < v19)
    {
      goto LABEL_19;
    }
LABEL_3:
    v15 = (_QWORD *)(a10 - 32);
    v14 = *(void **)(a10 - 32);
    *(_QWORD *)(a10 - 40) = v20;
    v16 = v12;
    v17 = a6;
    v12 -= 40;
    if (v14)
      goto LABEL_4;
LABEL_5:
    v18 = *(_QWORD *)(v16 - 24);
    *(_QWORD *)(a10 - 32) = *(_QWORD *)(v16 - 32);
    *(_QWORD *)(a10 - 24) = v18;
    *(_QWORD *)(a10 - 16) = *(_QWORD *)(v16 - 16);
    *(_QWORD *)(v16 - 32) = 0;
    *(_QWORD *)(v16 - 24) = 0;
    *(_QWORD *)(v16 - 16) = 0;
    *(_DWORD *)(a10 - 8) = *(_DWORD *)(v16 - 8);
    a10 -= 40;
    a6 = v17;
    if (v12 == a4)
      return;
  }
  v28 = 0;
  do
  {
    v29 = v12 + v28;
    v30 = a10 + v28;
    v32 = (void **)(a10 + v28 - 32);
    v31 = *v32;
    *(_QWORD *)(a10 + v28 - 40) = *(_QWORD *)(v12 + v28 - 40);
    if (v31)
    {
      *(_QWORD *)(v30 - 24) = v31;
      operator delete(v31);
      *v32 = 0;
      *(_QWORD *)(a10 + v28 - 24) = 0;
      *(_QWORD *)(a10 + v28 - 16) = 0;
    }
    *(_OWORD *)v32 = *(_OWORD *)(v29 - 32);
    *(_QWORD *)(v30 - 16) = *(_QWORD *)(v29 - 16);
    *(_QWORD *)(v29 - 32) = 0;
    *(_QWORD *)(v29 - 24) = 0;
    *(_QWORD *)(v29 - 16) = 0;
    *(_DWORD *)(v30 - 8) = *(_DWORD *)(v29 - 8);
    v28 -= 40;
  }
  while (v12 + v28 != a4);
}

uint64_t *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__equal_to &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  const void *v8;
  size_t v9;
  const void *v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  const void *v16;
  void *v17;
  uint64_t *v18;

  if (a1 == a2 || a1 + 5 == a2)
    return a2;
  v4 = 0;
  v5 = *a1;
  while (1)
  {
    v6 = v5;
    v7 = &a1[v4];
    v5 = a1[v4 + 5];
    if (v6 == v5)
    {
      v8 = (const void *)v7[1];
      v9 = v7[2] - (_QWORD)v8;
      v10 = (const void *)v7[6];
      if (v9 == v7[7] - (_QWORD)v10 && !memcmp(v8, v10, v9))
        break;
    }
    v4 += 5;
    if (&a1[v4 + 5] == a2)
      return a2;
  }
  v11 = &a1[v4];
  if (v11 != a2)
  {
    if (v11 + 10 != a2)
    {
      v12 = v11 + 14;
      do
      {
        v13 = *((_QWORD *)v12 - 4);
        if (*v11 != v13
          || (v14 = (const void *)v11[1],
              v15 = v11[2] - (_QWORD)v14,
              v16 = (const void *)*((_QWORD *)v12 - 3),
              v15 != *((_QWORD *)v12 - 2) - (_QWORD)v16)
          || memcmp(v14, v16, v15))
        {
          v11[5] = v13;
          v17 = (void *)v11[6];
          if (v17)
          {
            v11[7] = (uint64_t)v17;
            operator delete(v17);
            v11[6] = 0;
            v11[7] = 0;
            v11[8] = 0;
          }
          *((_OWORD *)v11 + 3) = *(_OWORD *)(v12 - 6);
          v11[8] = *((_QWORD *)v12 - 1);
          *((_QWORD *)v12 - 3) = 0;
          *((_QWORD *)v12 - 2) = 0;
          *((_QWORD *)v12 - 1) = 0;
          *((_DWORD *)v11 + 18) = *v12;
          v11 += 5;
        }
        v18 = (uint64_t *)(v12 + 2);
        v12 += 10;
      }
      while (v18 != a2);
    }
    v11 += 5;
  }
  return v11;
}

void gtl::STLStableSortAndRemoveDuplicates<std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>>(uint64_t *a1, __n128 a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  const std::nothrow_t *v7;
  unint64_t v8;
  void *v9;
  BOOL v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  char v16;

  v3 = *a1;
  v4 = (_QWORD *)a1[1];
  v5 = (uint64_t)v4 - *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
  if (v5 < 1)
  {
LABEL_5:
    v11 = 0;
    v8 = 0;
  }
  else
  {
    v7 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v8 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
    while (1)
    {
      v9 = operator new(40 * v8, v7);
      if (v9)
        break;
      v10 = v8 > 1;
      v8 >>= 1;
      if (!v10)
        goto LABEL_5;
    }
    v11 = v9;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(v3, v4, (uint64_t)&v16, v6, (uint64_t)v11, v8, a2);
  if (v11)
    operator delete(v11);
  v12 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__equal_to &>((_QWORD *)*a1, (_QWORD *)a1[1]);
  v13 = (_QWORD *)a1[1];
  if (v13 != v12)
  {
    v14 = v12;
    while (v13 != v14)
    {
      v15 = (void *)*(v13 - 4);
      if (v15)
      {
        *(v13 - 3) = v15;
        operator delete(v15);
      }
      v13 -= 5;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_22DB075C0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution*>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution*>>(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  void *v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  void *v51;
  void *v52;
  void *v53;
  char *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;

  v5 = (char *)*a1;
  v6 = (a2 - (uint64_t)*a1) / 40;
  v7 = (uint64_t)*a1 + 40 * v6;
  if (a5 < 1)
    return v7;
  v12 = a1[2];
  v10 = (uint64_t)(a1 + 2);
  v11 = v12;
  v13 = *(_QWORD *)(v10 - 8);
  v57 = v6;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v13] >> 3)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v7) >> 3)) >= a5)
    {
      v18 = a3 + 40 * a5;
      v19 = *(_QWORD *)(v10 - 8);
    }
    else
    {
      v18 = a3 + 8 * ((uint64_t)(v13 - v7) >> 3);
      v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>,operations_research::sat::SharedSolutionRepository<double>::Solution*,operations_research::sat::SharedSolutionRepository<double>::Solution*,operations_research::sat::SharedSolutionRepository<double>::Solution*>(v10, v18, a4, v13);
      a1[1] = (void *)v19;
      if ((uint64_t)(v13 - v7) < 1)
        return v7;
    }
    v20 = v7 + 40 * a5;
    v21 = v19 - 40 * a5;
    v22 = v19;
    if (v21 < v13)
    {
      v22 = v19;
      do
      {
        *(_QWORD *)v22 = *(_QWORD *)v21;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)(v22 + 24) = 0;
        *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
        *(_QWORD *)(v22 + 24) = *(_QWORD *)(v21 + 24);
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        *(_DWORD *)(v22 + 32) = *(_DWORD *)(v21 + 32);
        v22 += 40;
        v21 += 40;
      }
      while (v21 < v13);
    }
    a1[1] = (void *)v22;
    if (v19 != v20)
    {
      v23 = 0;
      v24 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - v20) >> 3);
      v25 = &v5[40 * v6 + 40 * v24];
      v26 = -40 * v24;
      do
      {
        v27 = &v25[v23];
        v28 = v19 + v23;
        v30 = (void **)(v19 + v23 - 32);
        v29 = *v30;
        *(_QWORD *)(v19 + v23 - 40) = *(_QWORD *)&v25[v23 - 40];
        if (v29)
        {
          *(_QWORD *)(v28 - 24) = v29;
          operator delete(v29);
          *v30 = 0;
          *(_QWORD *)(v19 + v23 - 24) = 0;
          *(_QWORD *)(v19 + v23 - 16) = 0;
        }
        *(_OWORD *)v30 = *((_OWORD *)v27 - 2);
        *(_QWORD *)(v28 - 16) = *((_QWORD *)v27 - 2);
        *((_QWORD *)v27 - 4) = 0;
        *((_QWORD *)v27 - 3) = 0;
        *((_QWORD *)v27 - 2) = 0;
        *(_DWORD *)(v28 - 8) = *((_DWORD *)v27 - 2);
        v23 -= 40;
      }
      while (v26 != v23);
    }
    if (v18 != a3)
    {
      v31 = (uint64_t)&v5[40 * v57 + 8];
      v32 = a3 + 16;
      do
      {
        v33 = v32 - 16;
        *(_QWORD *)(v31 - 8) = *(_QWORD *)(v32 - 16);
        if (v31 - 8 != v32 - 16)
          std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((_QWORD *)v31, *(char **)(v32 - 8), *(char **)v32, (uint64_t)(*(_QWORD *)v32 - *(_QWORD *)(v32 - 8)) >> 3);
        *(_DWORD *)(v31 + 24) = *(_DWORD *)(v32 + 16);
        v31 += 40;
        v32 += 40;
      }
      while (v33 + 40 != v18);
    }
    return v7;
  }
  v14 = a5 - 0x3333333333333333 * ((uint64_t)(v13 - (_QWORD)v5) >> 3);
  if (v14 > 0x666666666666666)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v15 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v5) >> 3);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0x333333333333333)
    v16 = 0x666666666666666;
  else
    v16 = v14;
  v55 = v5;
  v56 = a1;
  if (v16)
  {
    if (v16 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = (char *)operator new(40 * v16);
  }
  else
  {
    v17 = 0;
  }
  v35 = 0;
  v34 = &v17[40 * v6];
  v60 = &v17[40 * v16];
  v58 = 40 * a5;
  v36 = &v34[40 * a5];
  do
  {
    v38 = v34;
    v39 = &v34[v35];
    v40 = *(_QWORD *)(a3 + v35);
    *((_QWORD *)v39 + 1) = 0;
    *(_QWORD *)v39 = v40;
    *((_QWORD *)v39 + 2) = 0;
    *((_QWORD *)v39 + 3) = 0;
    v42 = *(_BYTE **)(a3 + v35 + 8);
    v41 = *(_BYTE **)(a3 + v35 + 16);
    v43 = v41 - v42;
    if (v41 != v42)
    {
      if (v43 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v44 = (char *)operator new(v41 - v42);
      *((_QWORD *)v39 + 1) = v44;
      v37 = &v44[8 * (v43 >> 3)];
      *((_QWORD *)v39 + 2) = v44;
      *((_QWORD *)v39 + 3) = v37;
      memcpy(v44, v42, v43);
      *((_QWORD *)v39 + 2) = v37;
    }
    *((_DWORD *)v39 + 8) = *(_DWORD *)(a3 + v35 + 32);
    v35 += 40;
    v34 = v38;
  }
  while (v58 != v35);
  v45 = (char *)*v56;
  v46 = v38;
  if (*v56 != (void *)v7)
  {
    v47 = 40 * v6;
    v48 = v55;
    do
    {
      v49 = &v17[v47];
      v50 = &v48[v47];
      *((_QWORD *)v49 - 5) = *(_QWORD *)&v48[v47 - 40];
      *((_OWORD *)v49 - 2) = *(_OWORD *)&v48[v47 - 32];
      *((_QWORD *)v49 - 2) = *(_QWORD *)&v48[v47 - 16];
      *((_QWORD *)v50 - 4) = 0;
      *((_QWORD *)v50 - 3) = 0;
      *((_QWORD *)v50 - 2) = 0;
      *((_DWORD *)v49 - 2) = *(_DWORD *)&v48[v47 - 8];
      v17 -= 40;
      v48 -= 40;
    }
    while (&v48[v47] != v45);
    v46 = &v17[40 * v6];
  }
  v51 = v56[1];
  if (v51 != (void *)v7)
  {
    do
    {
      *(_QWORD *)v36 = *(_QWORD *)v7;
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v36 + 2) = 0;
      *((_QWORD *)v36 + 3) = 0;
      *(_OWORD *)(v36 + 8) = *(_OWORD *)(v7 + 8);
      *((_QWORD *)v36 + 3) = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *((_DWORD *)v36 + 8) = *(_DWORD *)(v7 + 32);
      v36 += 40;
      v7 += 40;
    }
    while ((void *)v7 != v51);
    v7 = (uint64_t)v56[1];
  }
  v52 = *v56;
  *v56 = v46;
  v56[1] = v36;
  v56[2] = v60;
  while ((void *)v7 != v52)
  {
    v53 = *(void **)(v7 - 32);
    if (v53)
    {
      *(_QWORD *)(v7 - 24) = v53;
      operator delete(v53);
    }
    v7 -= 40;
  }
  if (v52)
    operator delete(v52);
  return (uint64_t)v34;
}

void sub_22DB07A90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_22DB07A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  void *v19;

  v19 = *(void **)(v16 + v17 + 8);
  if (v19)
  {
    *(_QWORD *)(v16 + v17 + 16) = v19;
    operator delete(v19);
  }
  a16 = v16 + v17;
  std::__split_buffer<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution> &>::~__split_buffer((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>,operations_research::sat::SharedSolutionRepository<double>::Solution*,operations_research::sat::SharedSolutionRepository<double>::Solution*,operations_research::sat::SharedSolutionRepository<double>::Solution*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)a4 = *(_QWORD *)v6;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      v9 = *(_BYTE **)(v6 + 8);
      v8 = *(_BYTE **)(v6 + 16);
      v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v11 = (char *)operator new(v8 - v9);
        *(_QWORD *)(a4 + 8) = v11;
        *(_QWORD *)(a4 + 16) = v11;
        v7 = &v11[8 * (v10 >> 3)];
        *(_QWORD *)(a4 + 24) = v7;
        memcpy(v11, v9, v10);
        *(_QWORD *)(a4 + 16) = v7;
      }
      *(_DWORD *)(a4 + 32) = *(_DWORD *)(v6 + 32);
      a4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_22DB07B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>,operations_research::sat::SharedSolutionRepository<long long>::Solution*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  int v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v9 = *(a2 - 5);
      v10 = *(_QWORD *)a1;
      if (v9 == *(_QWORD *)a1)
      {
        v11 = *(_QWORD *)(a1 + 8);
        v12 = *(_QWORD *)(a1 + 16);
        if (v11 == v12)
          return;
        v13 = 0;
        v14 = *(a2 - 4);
        while (1)
        {
          v15 = (double *)(v14 + v13);
          if (v14 + v13 == *(a2 - 3))
            break;
          v16 = *(double *)(v11 + v13);
          if (*v15 < v16)
            break;
          v13 += 8;
          if (v16 < *v15 || v13 + v11 == v12)
            return;
        }
      }
      else
      {
        if (v9 >= *(_QWORD *)a1)
          return;
        v11 = *(_QWORD *)(a1 + 8);
        v12 = *(_QWORD *)(a1 + 16);
      }
      v26 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      v27 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)a1 = *(a2 - 5);
      *(_OWORD *)(a1 + 8) = *((_OWORD *)a2 - 2);
      *(_QWORD *)(a1 + 24) = *(a2 - 2);
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 2);
      *(a2 - 5) = v10;
      *(a2 - 4) = v11;
      *(a2 - 3) = v12;
      *(a2 - 2) = v26;
      *((_DWORD *)a2 - 2) = v27;
      return;
    }
    if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>((_QWORD *)a1, a2);
    }
    else
    {
      v22 = a4 >> 1;
      v23 = a1 + 40 * (a4 >> 1);
      if ((uint64_t)a4 <= a6)
      {
        v28.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, (__int8 *)(a1 + 40 * (a4 >> 1)), a3, a4 >> 1, a5, a7);
        v29 = a4 - v22;
        v30 = a5 + 40 * v22;
        v31.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1 + 40 * (a4 >> 1), (__int8 *)a2, a3, v29, v30, v28);
        std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<double>::Solution *,operations_research::sat::SharedSolutionRepository<double>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a5, v30, v30, a5 + 40 * a4, a1, v31);
        if (a5)
        {
          v32 = a4;
          v33 = 0;
          v34 = (_QWORD *)(a5 + 16);
          do
          {
            v35 = (void *)*(v34 - 1);
            if (v35)
            {
              *v34 = v35;
              operator delete(v35);
              v32 = a4;
            }
            ++v33;
            v34 += 5;
          }
          while (v33 < v32);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, a1 + 40 * (a4 >> 1), a3, a4 >> 1, a5, a6);
        v24 = a4 - v22;
        v25.n128_f64[0] = std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(v23, a2, a3, v24, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, v23, (uint64_t)a2, a3, v22, v24, a5, a6, v25);
      }
    }
  }
}

void sub_22DB07E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  double *v15;
  double v16;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  BOOL v30;

  if (a1 != a2)
  {
    v4 = a1 + 5;
    if (a1 + 5 != a2)
    {
      v5 = a1;
      do
      {
        v7 = v5;
        v5 = v4;
        v8 = *v4;
        v9 = *v7;
        if (v8 == *v7)
        {
          v10 = v7[1];
          v11 = v7[2];
          if (v10 != v11)
          {
            v12 = 0;
            v14 = (double *)v7[6];
            v13 = (double *)v7[7];
            do
            {
              v15 = &v14[v12];
              if (&v14[v12] == v13)
                goto LABEL_20;
              v16 = *(double *)(v10 + v12 * 8);
              if (*v15 < v16)
                goto LABEL_20;
              ++v12;
            }
            while (v16 >= *v15 && v12 * 8 + v10 != v11);
          }
        }
        else if (v8 < *v7)
        {
          v14 = (double *)v7[6];
          v13 = (double *)v7[7];
LABEL_20:
          v18 = v7[8];
          v7[6] = 0;
          v7[7] = 0;
          v7[8] = 0;
          v19 = *((_DWORD *)v7 + 18);
          v20 = v5;
          v21 = (void *)v5[1];
          v22 = v7;
          *v5 = v9;
          if (v21)
          {
            v5[2] = v21;
            operator delete(v21);
            v5[2] = 0;
            v5[3] = 0;
          }
          while (1)
          {
            *(_OWORD *)(v20 + 1) = *(_OWORD *)(v22 + 1);
            v20[3] = v22[3];
            v22[1] = 0;
            v22[2] = 0;
            v22[3] = 0;
            *((_DWORD *)v20 + 8) = *((_DWORD *)v22 + 8);
            if (v22 == a1)
              break;
            v23 = *(v22 - 5);
            if (v8 == v23)
            {
              v25 = *(v22 - 4);
              v24 = *(v22 - 3);
              if (v25 == v24)
              {
LABEL_4:
                v6 = v22;
                goto LABEL_5;
              }
              v26 = v25 + 8;
              v27 = v14;
              while (v27 != v13)
              {
                v28 = *v27;
                v29 = *(double *)(v26 - 8);
                if (*v27 < v29)
                  break;
                ++v27;
                v30 = v29 < v28 || v26 == v24;
                v26 += 8;
                if (v30)
                  goto LABEL_4;
              }
              v20 = v22;
              v22 -= 5;
              *v20 = v23;
            }
            else
            {
              v20 = v22;
              if (v8 >= v23)
                goto LABEL_4;
              v22 -= 5;
              *v20 = v23;
            }
          }
          v6 = a1;
LABEL_5:
          *v6 = v8;
          v22[1] = v14;
          v6[2] = v13;
          v6[3] = v18;
          *((_DWORD *)v6 + 8) = v19;
        }
        v4 = v5 + 5;
      }
      while (v5 + 5 != a2);
    }
  }
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, __int8 *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  BOOL v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __n128 v24;

  if (a4)
  {
    if (a4 != 2)
    {
      if (a4 == 1)
      {
        *(_QWORD *)a5 = *(_QWORD *)a1;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
        a6 = *(__n128 *)(a1 + 8);
        *(__n128 *)(a5 + 8) = a6;
        *(_QWORD *)(a5 + 24) = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      }
      else if ((uint64_t)a4 > 8)
      {
        v22 = a4 >> 1;
        v23 = 40 * (a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, a1 + v23, a3, a4 >> 1, a5, a4 >> 1);
        v24.n128_f64[0] = std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1 + v23, a2, a3, a4 - v22, a5 + v23, a4 - v22);
        a6.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, (_QWORD *)(a1 + v23), a1 + v23, (uint64_t)a2, a5, v24).n128_u64[0];
      }
      else
      {
        a6.n128_u64[0] = std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, a2, a5, a6).n128_u64[0];
      }
      return a6.n128_f64[0];
    }
    v10 = *((_QWORD *)a2 - 5);
    if (v10 == *(_QWORD *)a1)
    {
      v12 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      if (v12 != v11)
      {
        v13 = (double *)*((_QWORD *)a2 - 4);
        v14 = v12 + 8;
        while (v13 != *((double **)a2 - 3))
        {
          v15 = *v13;
          v16 = *(double *)(v14 - 8);
          if (*v13 < v16)
            break;
          ++v13;
          v17 = v16 < v15 || v14 == v11;
          v14 += 8;
          if (v17)
            goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    else if (v10 < *(_QWORD *)a1)
    {
LABEL_20:
      *(_QWORD *)a5 = v10;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      *(_OWORD *)(a5 + 8) = *((_OWORD *)a2 - 2);
      *(_QWORD *)(a5 + 24) = *((_QWORD *)a2 - 2);
      *((_QWORD *)a2 - 3) = 0;
      *((_QWORD *)a2 - 2) = 0;
      *((_QWORD *)a2 - 4) = 0;
      *(_DWORD *)(a5 + 32) = *((_DWORD *)a2 - 2);
      v19 = *(_QWORD *)a1;
      *(_QWORD *)(a5 + 56) = 0;
      *(_QWORD *)(a5 + 64) = 0;
      *(_QWORD *)(a5 + 40) = v19;
      *(_QWORD *)(a5 + 48) = 0;
      a6 = *(__n128 *)(a1 + 8);
      *(__n128 *)(a5 + 48) = a6;
      *(_QWORD *)(a5 + 64) = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      v20 = *(_DWORD *)(a1 + 32);
LABEL_22:
      *(_DWORD *)(a5 + 72) = v20;
      return a6.n128_f64[0];
    }
LABEL_21:
    *(_QWORD *)a5 = *(_QWORD *)a1;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a5 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
    v21 = *((_QWORD *)a2 - 5);
    *(_QWORD *)(a5 + 56) = 0;
    *(_QWORD *)(a5 + 64) = 0;
    *(_QWORD *)(a5 + 40) = v21;
    *(_QWORD *)(a5 + 48) = 0;
    a6 = *((__n128 *)a2 - 2);
    *(__n128 *)(a5 + 48) = a6;
    *(_QWORD *)(a5 + 64) = *((_QWORD *)a2 - 2);
    *((_QWORD *)a2 - 4) = 0;
    *((_QWORD *)a2 - 3) = 0;
    *((_QWORD *)a2 - 2) = 0;
    v20 = *((_DWORD *)a2 - 2);
    goto LABEL_22;
  }
  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<double>::Solution *,operations_research::sat::SharedSolutionRepository<double>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  BOOL v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void **v26;

  if (a1 == a2)
  {
LABEL_23:
    if (a3 != a4)
    {
      v20 = a5 + 16;
      do
      {
        v21 = *(void **)(v20 - 8);
        *(_QWORD *)(v20 - 16) = *(_QWORD *)a3;
        if (v21)
        {
          *(_QWORD *)v20 = v21;
          operator delete(v21);
          *(_QWORD *)(v20 - 8) = 0;
          *(_QWORD *)v20 = 0;
          *(_QWORD *)(v20 + 8) = 0;
        }
        result = *(__n128 *)(a3 + 8);
        *(__n128 *)(v20 - 8) = result;
        *(_QWORD *)(v20 + 8) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_DWORD *)(v20 + 16) = *(_DWORD *)(a3 + 32);
        v20 += 40;
        a3 += 40;
      }
      while (a3 != a4);
    }
    return result;
  }
  v10 = a1;
  while (a3 != a4)
  {
    if (*(_QWORD *)a3 == *(_QWORD *)v10)
    {
      v12 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      if (v12 != v11)
      {
        v13 = *(double **)(a3 + 8);
        v14 = v12 + 8;
        while (v13 != *(double **)(a3 + 16))
        {
          v15 = *v13;
          v16 = *(double *)(v14 - 8);
          if (*v13 < v16)
            break;
          ++v13;
          v17 = v16 < v15 || v14 == v11;
          v14 += 8;
          if (v17)
            goto LABEL_21;
        }
        goto LABEL_17;
      }
LABEL_21:
      *(_QWORD *)a5 = *(_QWORD *)v10;
      v19 = *(void **)(a5 + 8);
      if (v19)
      {
        *(_QWORD *)(a5 + 16) = v19;
        operator delete(v19);
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
      }
      result = *(__n128 *)(v10 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(v10 + 32);
      v10 += 40;
      a5 += 40;
      if (v10 == a2)
        goto LABEL_23;
    }
    else
    {
      if (*(_QWORD *)a3 >= *(_QWORD *)v10)
        goto LABEL_21;
LABEL_17:
      *(_QWORD *)a5 = *(_QWORD *)a3;
      v18 = *(void **)(a5 + 8);
      if (v18)
      {
        *(_QWORD *)(a5 + 16) = v18;
        operator delete(v18);
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
      }
      result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if (v10 == a2)
        goto LABEL_23;
    }
  }
  if (v10 != a2)
  {
    v22 = 0;
    do
    {
      v23 = v10 + v22;
      v24 = a5 + v22;
      *(_QWORD *)(a5 + v22) = *(_QWORD *)(v10 + v22);
      v26 = (void **)(a5 + v22 + 8);
      v25 = *v26;
      if (*v26)
      {
        *(_QWORD *)(v24 + 16) = v25;
        operator delete(v25);
        *v26 = 0;
        *(_QWORD *)(a5 + v22 + 16) = 0;
        *(_QWORD *)(a5 + v22 + 24) = 0;
      }
      result = *(__n128 *)(v23 + 8);
      *(__n128 *)v26 = result;
      *(_QWORD *)(v24 + 24) = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)(v23 + 24) = 0;
      *(_DWORD *)(v24 + 32) = *(_DWORD *)(v23 + 32);
      v22 += 40;
    }
    while (v23 + 40 != a2);
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 result)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  double v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  double v48;
  double v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  double *v54;
  uint64_t v55;
  double v56;
  double v57;
  BOOL v58;
  uint64_t v59;
  int v60;

  if (!a6)
    return result;
  v9 = a8;
  v10 = a6;
  do
  {
    while (2)
    {
      if (v10 <= v9 || a5 <= v9)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, a2, a3, result, a4, a5, v10, a7);
        return result;
      }
      if (!a5)
        return result;
      v15 = *(_QWORD *)a2;
      while (v15 != *(_QWORD *)a1)
      {
        if (v15 < *(_QWORD *)a1)
        {
          v15 = *(_QWORD *)a1;
          goto LABEL_23;
        }
LABEL_20:
        a1 += 40;
        if (!--a5)
          return result;
      }
      v17 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 16);
      if (v17 == v16)
        goto LABEL_20;
      v18 = *(unint64_t **)(a2 + 8);
      v19 = v17 + 8;
      while (v18 != *(unint64_t **)(a2 + 16))
      {
        result.n128_u64[0] = *v18;
        v20 = *(double *)(v19 - 8);
        if (*(double *)v18 < v20)
          break;
        ++v18;
        v21 = v20 < result.n128_f64[0] || v19 == v16;
        v19 += 8;
        if (v21)
          goto LABEL_20;
      }
LABEL_23:
      if (a5 < v10)
      {
        if (v10 >= 0)
          v22 = v10;
        else
          v22 = v10 + 1;
        v23 = v22 >> 1;
        v24 = (uint64_t *)(a2 + 40 * (v22 >> 1));
        v25 = (uint64_t *)a1;
        if (a2 == a1)
        {
LABEL_28:
          v26 = a3;
          v27 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v25 - a1) >> 3);
          goto LABEL_41;
        }
        v39 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
        v40 = *v24;
        v25 = (uint64_t *)a1;
        while (2)
        {
          v41 = v39 >> 1;
          v42 = &v25[5 * (v39 >> 1)];
          if (v40 == *v42)
          {
            v43 = &v25[5 * v41];
            v45 = v43[1];
            v44 = v43[2];
            if (v45 != v44)
            {
              v46 = v45 + 8;
              v47 = *(double **)(a2 + 40 * v23 + 8);
              while (v47 != *(double **)(a2 + 40 * v23 + 16))
              {
                v48 = *v47;
                v49 = *(double *)(v46 - 8);
                if (*v47 < v49)
                  break;
                ++v47;
                v50 = v49 < v48 || v46 == v44;
                v46 += 8;
                if (v50)
                  goto LABEL_45;
              }
LABEL_46:
              v39 = v41;
              if (!v41)
                goto LABEL_28;
              continue;
            }
          }
          else if (v40 < *v42)
          {
            goto LABEL_46;
          }
          break;
        }
LABEL_45:
        v25 = v42 + 5;
        v41 = v39 + ~v41;
        goto LABEL_46;
      }
      if (a5 == 1)
      {
        v59 = *(_QWORD *)(a1 + 24);
        result = *(__n128 *)(a1 + 8);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v60 = *(_DWORD *)(a1 + 32);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_QWORD *)a2 = v15;
        *(__n128 *)(a2 + 8) = result;
        *(_QWORD *)(a2 + 24) = v59;
        *(_DWORD *)(a2 + 32) = v60;
        return result;
      }
      if (a5 >= 0)
        v28 = a5;
      else
        v28 = a5 + 1;
      v27 = v28 >> 1;
      v25 = (uint64_t *)(a1 + 40 * (v28 >> 1));
      v24 = (uint64_t *)a2;
      if (a2 != a3)
      {
        v29 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
        v30 = *v25;
        v31 = a1 + 40 * v27;
        v33 = *(_QWORD *)(v31 + 8);
        v32 = *(_QWORD *)(v31 + 16);
        if (v33 == v32)
        {
          v24 = (uint64_t *)a2;
          do
          {
            v34 = v29 >> 1;
            v35 = &v24[5 * (v29 >> 1)];
            v37 = *v35;
            v36 = v35 + 5;
            v29 += ~(v29 >> 1);
            if (v37 < v30)
              v24 = v36;
            else
              v29 = v34;
          }
          while (v29);
          goto LABEL_40;
        }
        v51 = v33 + 8;
        v24 = (uint64_t *)a2;
        while (2)
        {
          v52 = v29 >> 1;
          v53 = &v24[5 * (v29 >> 1)];
          if (*v53 == v30)
          {
            v54 = (double *)v24[5 * v52 + 1];
            v55 = v51;
            while (v54 != (double *)v24[5 * v52 + 2])
            {
              v56 = *v54;
              v57 = *(double *)(v55 - 8);
              if (*v54 < v57)
                break;
              ++v54;
              v58 = v57 < v56 || v55 == v32;
              v55 += 8;
              if (v58)
                goto LABEL_62;
            }
LABEL_61:
            v24 = v53 + 5;
            v52 = v29 + ~v52;
          }
          else if (*v53 < v30)
          {
            goto LABEL_61;
          }
LABEL_62:
          v29 = v52;
          if (!v52)
            break;
          continue;
        }
      }
LABEL_40:
      v26 = a3;
      v23 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v24 - a2) >> 3);
LABEL_41:
      a5 -= v27;
      v10 -= v23;
      v38 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<long long>::Solution *>>(v25, (uint64_t *)a2, v24);
      a3 = (uint64_t)v38;
      if (v27 + v23 >= a5 + v10)
      {
        v14 = v26;
        v9 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(v38, v24, v14, a4, a5, v10, a7, a8);
        v10 = v23;
        a5 = v27;
        a2 = (uint64_t)v25;
        if (!v23)
          return result;
        continue;
      }
      break;
    }
    std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a1, v25, v38, a4, v27, v23, a7, a8);
    a1 = a3;
    a3 = v26;
    v9 = a8;
    a2 = (uint64_t)v24;
  }
  while (v10);
  return result;
}

__n128 std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, __int8 *a2, uint64_t a3, __n128 result)
{
  __n128 *v6;
  __n128 *v7;
  int64_t *v8;
  int64_t *v9;
  __n128 *v10;
  int64_t v11;
  int64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double *v18;
  double v19;
  uint64_t v21;
  int64_t *v22;
  int64_t *v23;
  int64_t v24;
  int64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  double v31;
  double v32;
  BOOL v33;
  void *v34;
  void *v35;
  _QWORD *v36;

  if ((__int8 *)a1 != a2)
  {
    v6 = (__n128 *)a1;
    *(_QWORD *)a3 = *(_QWORD *)a1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    result = *(__n128 *)(a1 + 8);
    *(__n128 *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 32);
    v7 = (__n128 *)(a1 + 40);
    if ((__int8 *)(a1 + 40) != a2)
    {
      v8 = (int64_t *)a3;
      v9 = (int64_t *)a3;
      do
      {
        while (1)
        {
          v10 = v7;
          v12 = *v9;
          v9 += 5;
          v11 = v12;
          v13 = (int64_t)v10->n128_u64[0] < v12;
          if (v10->n128_u64[0] == v12)
            break;
          if (v13)
          {
            v14 = v8[1];
            v15 = v8[2];
            goto LABEL_19;
          }
LABEL_4:
          v8[5] = v10->n128_u64[0];
          v8[6] = 0;
          v8[7] = 0;
          v8[8] = 0;
          result = v6[3];
          *((__n128 *)v8 + 3) = result;
          v8[8] = v6[4].n128_i64[0];
          v6[3].n128_u64[0] = 0;
          v6[3].n128_u64[1] = 0;
          v6[4].n128_u64[0] = 0;
          *((_DWORD *)v8 + 18) = v6[4].n128_u32[2];
          v7 = (__n128 *)((char *)v10 + 40);
          v8 = v9;
          v6 = v10;
          if (&v10[2].n128_i8[8] == a2)
            return result;
        }
        v14 = v8[1];
        v15 = v8[2];
        if (v14 == v15)
          goto LABEL_4;
        v16 = 0;
        v17 = v6[3].n128_u64[0];
        while (1)
        {
          v18 = (double *)(v17 + v16);
          if (v17 + v16 == v6[3].n128_u64[1])
            break;
          v19 = *(double *)(v14 + v16);
          if (*v18 < v19)
            break;
          v16 += 8;
          if (v19 < *v18 || v16 + v14 == v15)
            goto LABEL_4;
        }
LABEL_19:
        v8[5] = v11;
        v8[6] = v14;
        v21 = v8[3];
        v8[7] = v15;
        v8[8] = v21;
        v8[1] = 0;
        v8[2] = 0;
        v8[3] = 0;
        *((_DWORD *)v8 + 18) = *((_DWORD *)v8 + 8);
        v22 = (int64_t *)a3;
        if (v8 != (int64_t *)a3)
        {
          v23 = v8;
          do
          {
            v25 = *(v23 - 5);
            v23 -= 5;
            v24 = v25;
            v26 = (int64_t)v10->n128_u64[0] < v25;
            if (v10->n128_u64[0] == v25)
            {
              v28 = *(v8 - 4);
              v27 = *(v8 - 3);
              if (v28 == v27)
                goto LABEL_37;
              v29 = (double *)v6[3].n128_u64[0];
              v30 = v28 + 8;
              while (v29 != (double *)v6[3].n128_u64[1])
              {
                v31 = *v29;
                v32 = *(double *)(v30 - 8);
                if (*v29 < v32)
                  break;
                ++v29;
                v33 = v32 < v31 || v30 == v27;
                v30 += 8;
                if (v33)
                  goto LABEL_37;
              }
            }
            else if (!v26)
            {
LABEL_37:
              v22 = v8;
              goto LABEL_38;
            }
            *v8 = v24;
            v34 = (void *)v8[1];
            if (v34)
            {
              v8[2] = (int64_t)v34;
              operator delete(v34);
            }
            *(_OWORD *)(v8 + 1) = *((_OWORD *)v8 - 2);
            v8[3] = *(v8 - 2);
            *(v8 - 3) = 0;
            *(v8 - 2) = 0;
            *(v8 - 4) = 0;
            *((_DWORD *)v8 + 8) = *((_DWORD *)v8 - 2);
            v8 = v23;
          }
          while (v23 != (int64_t *)a3);
          v22 = (int64_t *)a3;
          *(_QWORD *)a3 = v10->n128_u64[0];
          v36 = (_QWORD *)(a3 + 8);
          v35 = *(void **)(a3 + 8);
          if (!v35)
            goto LABEL_40;
LABEL_39:
          v22[2] = (int64_t)v35;
          operator delete(v35);
          *v36 = 0;
          v36[1] = 0;
          v36[2] = 0;
          goto LABEL_40;
        }
LABEL_38:
        *v22 = v10->n128_u64[0];
        v36 = v22 + 1;
        v35 = (void *)v22[1];
        if (v35)
          goto LABEL_39;
LABEL_40:
        result = v6[3];
        *(__n128 *)(v22 + 1) = result;
        v22[3] = v6[4].n128_i64[0];
        v6[3].n128_u64[0] = 0;
        v6[3].n128_u64[1] = 0;
        v6[4].n128_u64[0] = 0;
        *((_DWORD *)v22 + 8) = v6[4].n128_u32[2];
        v7 = (__n128 *)((char *)v10 + 40);
        v8 = v9;
        v6 = v10;
      }
      while (&v10[2].n128_i8[8] != a2);
    }
  }
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if ((_QWORD *)a1 == a2)
  {
LABEL_20:
    while (a3 != a4)
    {
      *(_QWORD *)a5 = *(_QWORD *)a3;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
    }
    return result;
  }
  while (a3 != a4)
  {
    if (*(_QWORD *)a3 == *(_QWORD *)a1)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v6 = *(_QWORD *)(a1 + 16);
      if (v7 != v6)
      {
        v8 = *(double **)(a3 + 8);
        v9 = v7 + 8;
        while (v8 != *(double **)(a3 + 16))
        {
          v10 = *v8;
          v11 = *(double *)(v9 - 8);
          if (*v8 < v11)
            break;
          ++v8;
          v12 = v11 < v10 || v9 == v6;
          v9 += 8;
          if (v12)
            goto LABEL_3;
        }
        goto LABEL_17;
      }
LABEL_3:
      *(_QWORD *)a5 = *(_QWORD *)a1;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      result = *(__n128 *)(a1 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
      a1 += 40;
      a5 += 40;
      if ((_QWORD *)a1 == a2)
        goto LABEL_20;
    }
    else
    {
      if (*(_QWORD *)a3 >= *(_QWORD *)a1)
        goto LABEL_3;
LABEL_17:
      *(_QWORD *)a5 = *(_QWORD *)a3;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if ((_QWORD *)a1 == a2)
        goto LABEL_20;
    }
  }
  if ((_QWORD *)a1 != a2)
  {
    v13 = 0;
    do
    {
      v14 = a5 + v13;
      v15 = (_QWORD *)(a1 + v13);
      *(_QWORD *)v14 = *(_QWORD *)(a1 + v13);
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      result = *(__n128 *)(a1 + v13 + 8);
      *(__n128 *)(v14 + 8) = result;
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(a1 + v13 + 24);
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = 0;
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a1 + v13 + 32);
      v13 += 40;
    }
    while (v15 + 5 != a2);
  }
  return result;
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  unint64_t v21;

  v21 = 0;
  if (a6 > a7)
  {
    v11 = a8;
    if (a2 != a3)
    {
      v12 = 0;
      v11 = a8;
      v13 = a2;
      do
      {
        *(_QWORD *)v11 = *(_QWORD *)v13;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)(v11 + 24) = 0;
        *(_OWORD *)(v11 + 8) = *(_OWORD *)(v13 + 8);
        *(_QWORD *)(v11 + 24) = *(_QWORD *)(v13 + 24);
        *(_QWORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_DWORD *)(v11 + 32) = *(_DWORD *)(v13 + 32);
        ++v12;
        v11 += 40;
        v13 += 40;
      }
      while (v13 != a3);
      v21 = v12;
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>>(v11, v11, a8, a8, a2, a2, a1, a1, a3, a3);
    if (!a8)
      return;
LABEL_13:
    v17 = v21;
    if (v21)
    {
      v18 = 0;
      v19 = (_QWORD *)(a8 + 16);
      do
      {
        v20 = (void *)*(v19 - 1);
        if (v20)
        {
          *v19 = v20;
          operator delete(v20);
          v17 = v21;
        }
        ++v18;
        v19 += 5;
      }
      while (v18 < v17);
    }
    return;
  }
  v14 = a8;
  if (a1 != a2)
  {
    v15 = 0;
    v14 = a8;
    v16 = a1;
    do
    {
      *(_QWORD *)v14 = *(_QWORD *)v16;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      a4 = *(__n128 *)(v16 + 8);
      *(__n128 *)(v14 + 8) = a4;
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v16 + 32);
      ++v15;
      v14 += 40;
      v16 += 40;
    }
    while (v16 != a2);
    v21 = v15;
  }
  std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<double>::Solution *,operations_research::sat::SharedSolutionRepository<double>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(a8, v14, a2, a3, a1, a4);
  if (a8)
    goto LABEL_13;
}

void sub_22DB08DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DB08DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::__destruct_n &>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::SharedSolutionRepository<double>::Solution *,operations_research::sat::SharedSolutionRepository<double>::Solution *,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  BOOL v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void **v24;

  if (a1 == a2)
    return result;
  v10 = a1;
  while (a3 != a4)
  {
    if (*(_QWORD *)a3 == *(_QWORD *)v10)
    {
      v12 = *(_QWORD *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 16);
      if (v12 != v11)
      {
        v13 = *(double **)(a3 + 8);
        v14 = v12 + 8;
        while (v13 != *(double **)(a3 + 16))
        {
          v15 = *v13;
          v16 = *(double *)(v14 - 8);
          if (*v13 < v16)
            break;
          ++v13;
          v17 = v16 < v15 || v14 == v11;
          v14 += 8;
          if (v17)
            goto LABEL_21;
        }
        goto LABEL_17;
      }
LABEL_21:
      *(_QWORD *)a5 = *(_QWORD *)v10;
      v19 = *(void **)(a5 + 8);
      if (v19)
      {
        *(_QWORD *)(a5 + 16) = v19;
        operator delete(v19);
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
      }
      result = *(__n128 *)(v10 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(v10 + 32);
      v10 += 40;
      a5 += 40;
      if (v10 == a2)
        return result;
    }
    else
    {
      if (*(_QWORD *)a3 >= *(_QWORD *)v10)
        goto LABEL_21;
LABEL_17:
      *(_QWORD *)a5 = *(_QWORD *)a3;
      v18 = *(void **)(a5 + 8);
      if (v18)
      {
        *(_QWORD *)(a5 + 16) = v18;
        operator delete(v18);
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
      }
      result = *(__n128 *)(a3 + 8);
      *(__n128 *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)(a5 + 32) = *(_DWORD *)(a3 + 32);
      a3 += 40;
      a5 += 40;
      if (v10 == a2)
        return result;
    }
  }
  v20 = 0;
  do
  {
    v21 = v10 + v20;
    v22 = a5 + v20;
    *(_QWORD *)(a5 + v20) = *(_QWORD *)(v10 + v20);
    v24 = (void **)(a5 + v20 + 8);
    v23 = *v24;
    if (*v24)
    {
      *(_QWORD *)(v22 + 16) = v23;
      operator delete(v23);
      *v24 = 0;
      *(_QWORD *)(a5 + v20 + 16) = 0;
      *(_QWORD *)(a5 + v20 + 24) = 0;
    }
    result = *(__n128 *)(v21 + 8);
    *(__n128 *)v24 = result;
    *(_QWORD *)(v22 + 24) = *(_QWORD *)(v21 + 24);
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_DWORD *)(v22 + 32) = *(_DWORD *)(v21 + 32);
    v20 += 40;
  }
  while (v21 + 40 != a2);
  return result;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::reverse_iterator<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>,std::reverse_iterator<std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void **v32;

  if (a2 == a4)
    return;
  v12 = a2;
  while (a6 != a8)
  {
    v17 = a6 - 40;
    v19 = *(_QWORD *)(a6 - 40);
    v20 = *(_QWORD *)(v12 - 40);
    if (v20 == v19)
    {
      v22 = *(_QWORD *)(a6 - 32);
      v21 = *(_QWORD *)(a6 - 24);
      if (v22 != v21)
      {
        v23 = *(double **)(v12 - 32);
        v24 = v22 + 8;
        while (v23 != *(double **)(v12 - 24))
        {
          v25 = *v23;
          v26 = *(double *)(v24 - 8);
          if (*v23 < v26)
            break;
          ++v23;
          v27 = v26 < v25 || v24 == v21;
          v24 += 8;
          if (v27)
            goto LABEL_3;
        }
LABEL_19:
        v15 = (_QWORD *)(a10 - 32);
        v14 = *(void **)(a10 - 32);
        *(_QWORD *)(a10 - 40) = v19;
        v16 = a6;
        if (!v14)
          goto LABEL_5;
LABEL_4:
        *(_QWORD *)(a10 - 24) = v14;
        operator delete(v14);
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        goto LABEL_5;
      }
    }
    else if (v20 < v19)
    {
      goto LABEL_19;
    }
LABEL_3:
    v15 = (_QWORD *)(a10 - 32);
    v14 = *(void **)(a10 - 32);
    *(_QWORD *)(a10 - 40) = v20;
    v16 = v12;
    v17 = a6;
    v12 -= 40;
    if (v14)
      goto LABEL_4;
LABEL_5:
    v18 = *(_QWORD *)(v16 - 24);
    *(_QWORD *)(a10 - 32) = *(_QWORD *)(v16 - 32);
    *(_QWORD *)(a10 - 24) = v18;
    *(_QWORD *)(a10 - 16) = *(_QWORD *)(v16 - 16);
    *(_QWORD *)(v16 - 32) = 0;
    *(_QWORD *)(v16 - 24) = 0;
    *(_QWORD *)(v16 - 16) = 0;
    *(_DWORD *)(a10 - 8) = *(_DWORD *)(v16 - 8);
    a10 -= 40;
    a6 = v17;
    if (v12 == a4)
      return;
  }
  v28 = 0;
  do
  {
    v29 = v12 + v28;
    v30 = a10 + v28;
    v32 = (void **)(a10 + v28 - 32);
    v31 = *v32;
    *(_QWORD *)(a10 + v28 - 40) = *(_QWORD *)(v12 + v28 - 40);
    if (v31)
    {
      *(_QWORD *)(v30 - 24) = v31;
      operator delete(v31);
      *v32 = 0;
      *(_QWORD *)(a10 + v28 - 24) = 0;
      *(_QWORD *)(a10 + v28 - 16) = 0;
    }
    *(_OWORD *)v32 = *(_OWORD *)(v29 - 32);
    *(_QWORD *)(v30 - 16) = *(_QWORD *)(v29 - 16);
    *(_QWORD *)(v29 - 32) = 0;
    *(_QWORD *)(v29 - 24) = 0;
    *(_QWORD *)(v29 - 16) = 0;
    *(_DWORD *)(v30 - 8) = *(_DWORD *)(v29 - 8);
    v28 -= 40;
  }
  while (v12 + v28 != a4);
}

_QWORD *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__wrap_iter<operations_research::sat::SharedSolutionRepository<double>::Solution *>,std::__equal_to &>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  double *v7;
  double *v8;
  double *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  void *v17;

  if (a1 == a2)
    return a2;
  v3 = a1 + 5;
  if (a1 + 5 == a2)
    return a2;
  v4 = *a1;
  while (1)
  {
    v5 = a1;
    a1 = v3;
    v6 = v4;
    v4 = *a1;
    if (v6 == *a1)
    {
      v8 = (double *)v5[1];
      v7 = (double *)v5[2];
      v9 = (double *)v5[6];
      if ((char *)v7 - (char *)v8 == v5[7] - (_QWORD)v9)
        break;
    }
LABEL_4:
    v3 = a1 + 5;
    if (a1 + 5 == a2)
      return a2;
  }
  if (v8 != v7)
  {
    while (*v8 == *v9)
    {
      ++v8;
      ++v9;
      if (v8 == v7)
        goto LABEL_10;
    }
    goto LABEL_4;
  }
LABEL_10:
  if (v5 != a2)
  {
    v10 = v5 + 10;
    if (v5 + 10 != a2)
    {
      v11 = v5 + 5;
      while (1)
      {
        v12 = v11;
        v11 = v10;
        v13 = *v10;
        if (*v5 != v13)
          goto LABEL_21;
        v15 = (double *)v5[1];
        v14 = (double *)v5[2];
        v16 = (double *)v12[6];
        if ((char *)v14 - (char *)v15 != v12[7] - (_QWORD)v16)
          goto LABEL_21;
        if (v15 != v14)
          break;
LABEL_14:
        v10 = v11 + 5;
        if (v11 + 5 == a2)
          goto LABEL_24;
      }
      while (*v15 == *v16)
      {
        ++v15;
        ++v16;
        if (v15 == v14)
          goto LABEL_14;
      }
LABEL_21:
      v5[5] = v13;
      v17 = (void *)v5[6];
      if (v17)
      {
        v5[7] = v17;
        operator delete(v17);
        v5[6] = 0;
        v5[7] = 0;
        v5[8] = 0;
      }
      *((_OWORD *)v5 + 3) = *((_OWORD *)v12 + 3);
      v5[8] = v12[8];
      v12[6] = 0;
      v12[7] = 0;
      v12[8] = 0;
      *((_DWORD *)v5 + 18) = *((_DWORD *)v12 + 18);
      v5 += 5;
      goto LABEL_14;
    }
LABEL_24:
    v5 += 5;
  }
  return v5;
}

void operations_research::sat::SynchronizationPoint::~SynchronizationPoint(operations_research::sat::SynchronizationPoint *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24F9846A0;
  v2 = (char *)this + 48;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)this = off_24F982B08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24F9846A0;
  v2 = (char *)this + 48;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)this = off_24F982B08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::SynchronizationPoint::TaskIsAvailable(operations_research::sat::SynchronizationPoint *this)
{
  return 0;
}

void operations_research::sat::SynchronizationPoint::GenerateTask(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t operations_research::sat::SynchronizationPoint::Synchronize(operations_research::sat::SynchronizationPoint *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t operations_research::sat::`anonymous namespace'::FullProblemSolver::FullProblemSolver(uint64_t a1, uint64_t a2, const operations_research::sat::SatParameters *a3, char a4, _QWORD *a5)
{
  __int128 v10;
  uint64_t **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  absl::lts_2020_02_25::Mutex *v18;
  absl::lts_2020_02_25::Mutex *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  operations_research::sat::Model *v40;
  uint64_t v41;
  _QWORD v43[72];
  _BYTE v44[24];
  _BYTE *v45;
  _QWORD v46[3];
  _QWORD *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24F982B08;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v10 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 8) = v10;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_24F9846F0;
  *(_QWORD *)(a1 + 48) = a5;
  *(_BYTE *)(a1 + 56) = a4;
  v11 = (uint64_t **)(a1 + 64);
  std::make_unique[abi:ne180100]<operations_research::sat::Model,std::string const&>(a2, (std::string **)(a1 + 64));
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  v12 = *(_QWORD *)(a1 + 64);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v43, a3);
  v45 = 0;
  v13 = operator new(0x248uLL);
  *v13 = &off_24F985078;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(v13 + 1), (const operations_research::sat::SatParameters *)v43);
  v45 = v13;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v43);
  v46[0] = v12;
  if (!v45)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *__return_ptr, _BYTE *, _QWORD *))(*(_QWORD *)v45 + 48))(v43, v45, v46);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v43);
  v14 = v45;
  if (v45 == v44)
  {
    v15 = 4;
    v14 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_10;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_10:
  v16 = *(uint64_t **)(*(_QWORD *)(a1 + 48) + 16);
  v17 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(_QWORD *)(a1 + 64));
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v16, v18);
  operations_research::TimeLimit::MergeWithGlobalTimeLimit((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v17, v16[1]);
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v16, v19, v20, v21, v22, v23, v24, v25);
  v26 = (uint64_t *)a5[4];
  if (v26)
    operations_research::sat::Model::Register<operations_research::sat::SharedResponseManager>(*v11, v26);
  v27 = (uint64_t *)a5[5];
  if (v27)
    operations_research::sat::Model::Register<operations_research::sat::SharedRelaxationSolutionRepository>(*v11, v27);
  v28 = (uint64_t *)a5[6];
  if (v28)
    operations_research::sat::Model::Register<operations_research::sat::SharedLPSolutionRepository>(*v11, v28);
  v29 = (uint64_t *)a5[7];
  if (v29)
    operations_research::sat::Model::Register<operations_research::sat::SharedIncompleteSolutionManager>(*v11, v29);
  v30 = *(uint64_t **)(a1 + 48);
  v31 = v30[3];
  if (v31)
  {
    v32 = *v30;
    v33 = *v11;
    v34 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::GenericLiteralWatcher>((uint64_t)*v11);
    v35 = operator new(0x28uLL);
    *v35 = &off_24F984740;
    v35[1] = v32;
    *((_DWORD *)v35 + 4) = 0;
    v35[3] = v33;
    v35[4] = v31;
    v47 = v35;
    v36 = v34[66];
    if (v36 >= v34[67])
    {
      v39 = std::vector<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::__push_back_slow_path<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)> const&>(v34 + 65, v46);
      v35 = v47;
      v34[66] = v39;
      if (v35 == v46)
      {
        v41 = 4;
        v35 = v46;
        goto LABEL_25;
      }
      if (!v35)
      {
LABEL_26:
        return a1;
      }
    }
    else
    {
      v37 = (char *)operator new(0x28uLL);
      *(_QWORD *)v37 = &off_24F984740;
      v38 = *(_OWORD *)(v35 + 3);
      *(_OWORD *)(v37 + 8) = *(_OWORD *)(v35 + 1);
      *(_OWORD *)(v37 + 24) = v38;
      *(_QWORD *)(v36 + 24) = v37;
      v34[66] = v36 + 32;
    }
    v41 = 5;
LABEL_25:
    (*(void (**)(_QWORD *))(*v35 + 8 * v41))(v35);
    goto LABEL_26;
  }
  return a1;
}

void sub_22DB09714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  absl::lts_2020_02_25::Mutex *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v17 = *(_QWORD **)(v15 - 104);
  if (v17 == v12)
  {
    v18 = 4;
    v17 = (_QWORD *)(v15 - 128);
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v18))(v17);
LABEL_6:
  absl::lts_2020_02_25::Mutex::~Mutex(v14);
  std::unique_ptr<operations_research::sat::Model>::~unique_ptr[abi:ne180100](v13);
  *(_QWORD *)v11 = off_24F982B08;
  if (*(char *)(v11 + 31) < 0)
    operator delete(*a10);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<operations_research::sat::Model,std::string const&>(uint64_t a1@<X0>, std::string **a2@<X8>)
{
  std::string *v4;
  std::string::size_type v5;
  int v6;
  std::string __p;

  v4 = (std::string *)operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v6 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v4[1].__r_.__value_.__r.__words[2] = 0;
    v4[2].__r_.__value_.__r.__words[0] = 0;
    v4[1].__r_.__value_.__l.__size_ = 0;
    v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v4[1].__r_.__value_.__l.__size_;
    v4[2].__r_.__value_.__l.__size_ = 0;
    v4[2].__r_.__value_.__r.__words[2] = 0;
    *a2 = v4;
    if (v6 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v5 = __p.__r_.__value_.__r.__words[2];
    v4[1].__r_.__value_.__l.__size_ = 0;
    v4[1].__r_.__value_.__r.__words[2] = 0;
    v4[2].__r_.__value_.__r.__words[0] = 0;
    v4->__r_.__value_.__r.__words[2] = v5;
    v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v4[1].__r_.__value_.__l.__size_;
    v4[2].__r_.__value_.__l.__size_ = 0;
    v4[2].__r_.__value_.__r.__words[2] = 0;
    *a2 = v4;
  }
}

void sub_22DB09904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x22E31DF78](v14, 0x1032C402B90307BLL);
  _Unwind_Resume(a1);
}

_QWORD *operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::SharedBoundsManager *a3, operations_research::sat::Model *a4)
{
  operations_research::sat::IntegerTrail *v7;
  uint64_t v8;
  absl::lts_2020_02_25::Mutex *v9;
  int v10;
  uint64_t *v11;
  _QWORD *result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 984);
    v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: shared_bounds_manager != nullptr ", 47);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
  }
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a3);
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a3);
  v10 = operations_research::sat::SharedBoundsManager::RegisterNewId(a2, v9);
  v11 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LevelZeroCallbackHelper>((uint64_t)a3);
  result = operator new(0x38uLL);
  *result = &off_24F984808;
  result[1] = this;
  result[2] = a2;
  result[3] = a3;
  result[4] = v7;
  *((_DWORD *)result + 10) = v10;
  result[6] = v8;
  v18 = (uint64_t)result;
  v13 = v11[1];
  if (v13 < v11[2])
  {
    *(_QWORD *)(v13 + 24) = result;
    v11[1] = v13 + 32;
    return result;
  }
  v14 = std::vector<std::function<BOOL ()(void)>>::__push_back_slow_path<std::function<BOOL ()(void)>>(v11, v17);
  result = (_QWORD *)v18;
  v11[1] = v14;
  if (result == v17)
  {
    v15 = 4;
    result = v17;
  }
  else
  {
    if (!result)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_22DB09AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::`anonymous namespace'::FullProblemSolver::~FullProblemSolver(operations_research::sat::_anonymous_namespace_::FullProblemSolver *this)
{
  *(_QWORD *)this = off_24F9846F0;
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80));
  std::unique_ptr<operations_research::sat::Model>::~unique_ptr[abi:ne180100]((uint64_t *)this + 8);
  *(_QWORD *)this = off_24F982B08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_24F9846F0;
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80));
  std::unique_ptr<operations_research::sat::Model>::~unique_ptr[abi:ne180100]((uint64_t *)this + 8);
  *(_QWORD *)this = off_24F982B08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

BOOL operations_research::sat::`anonymous namespace'::FullProblemSolver::TaskIsAvailable(operations_research::sat::_anonymous_namespace_::FullProblemSolver *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v3;
  absl::lts_2020_02_25::Mutex *v4;
  _BOOL8 v5;
  absl::lts_2020_02_25::Mutex *v7;
  absl::lts_2020_02_25::Mutex *v8;
  absl::lts_2020_02_25::Mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 6);
  if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v3 + 32), a2))
  {
    return 0;
  }
  if ((operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v3 + 16), v4) & 1) == 0)
  {
    v8 = (operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80);
    absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80), v7);
    v5 = *((_BYTE *)this + 96) != 0;
    absl::lts_2020_02_25::Mutex::Unlock(v8, v9, v10, v11, v12, v13, v14, v15);
    return v5;
  }
  return 0;
}

void operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(operations_research::sat::_anonymous_namespace_::FullProblemSolver *this@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, _QWORD *a3@<X8>)
{
  absl::lts_2020_02_25::Mutex *v5;
  absl::lts_2020_02_25::Mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80), a2);
  *((_BYTE *)this + 96) = 0;
  absl::lts_2020_02_25::Mutex::Unlock(v5, v6, v7, v8, v9, v10, v11, v12);
  *a3 = &off_24F984898;
  a3[1] = this;
  a3[3] = a3;
}

void operations_research::sat::`anonymous namespace'::FullProblemSolver::Synchronize(operations_research::sat::_anonymous_namespace_::FullProblemSolver *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  double v4;
  absl::lts_2020_02_25::Mutex *v5;
  absl::lts_2020_02_25::Mutex *v6;
  absl::lts_2020_02_25::Mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  absl::lts_2020_02_25::Mutex *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = (operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::_anonymous_namespace_::FullProblemSolver *)((char *)this + 80), a2);
  v4 = *((double *)this + 11);
  *((double *)this + 5) = v4 + *((double *)this + 5);
  v5 = *(absl::lts_2020_02_25::Mutex **)(*((_QWORD *)this + 6) + 16);
  absl::lts_2020_02_25::Mutex::Lock(v5, v6);
  *(double *)(*((_QWORD *)v5 + 1) + 112) = v4 + *(double *)(*((_QWORD *)v5 + 1) + 112);
  absl::lts_2020_02_25::Mutex::Unlock(v5, v7, v8, v9, v10, v11, v12, v13);
  *((_QWORD *)this + 11) = 0;
  absl::lts_2020_02_25::Mutex::Unlock(v3, v14, v15, v16, v17, v18, v19, v20);
}

void sub_22DB09D18(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::__push_back_slow_path<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)> const&>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char **v14;
  char **v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (char *)operator new(32 * v7);
    v9 = (uint64_t)&v8[32 * v3];
    v24 = v9;
    v25 = v9;
    v27 = &v8[32 * v7];
    v10 = (_QWORD *)a2[3];
    if (v10)
      goto LABEL_10;
LABEL_13:
    *(_QWORD *)(v9 + 24) = 0;
    goto LABEL_14;
  }
  v9 = 32 * v3;
  v24 = v9;
  v25 = v9;
  v27 = 0;
  v10 = (_QWORD *)a2[3];
  if (!v10)
    goto LABEL_13;
LABEL_10:
  if (v10 == a2)
  {
    *(_QWORD *)(v9 + 24) = v9;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v9);
    v9 = v24;
    v11 = v25 + 32;
    v26 = v25 + 32;
    v13 = (char *)*a1;
    v12 = (char *)a1[1];
    if (v12 != (char *)*a1)
      goto LABEL_15;
LABEL_25:
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v27;
    goto LABEL_33;
  }
  *(_QWORD *)(v9 + 24) = (*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
LABEL_14:
  v11 = v9 + 32;
  v26 = v9 + 32;
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
    goto LABEL_25;
LABEL_15:
  v14 = (char **)(v9 - 8);
  do
  {
    v16 = (char *)*((_QWORD *)v12 - 1);
    v17 = v12 - 32;
    v15 = v14;
    if (!v16)
      goto LABEL_17;
    if (v17 != v16)
    {
      *v14 = v16;
      v15 = (char **)(v12 - 8);
LABEL_17:
      *v15 = 0;
      goto LABEL_18;
    }
    *v14 = (char *)(v14 - 3);
    (*(void (**)(_QWORD))(**((_QWORD **)v12 - 1) + 24))(*((_QWORD *)v12 - 1));
LABEL_18:
    v14 -= 4;
    v12 = v17;
  }
  while (v17 != v13);
  v18 = (char *)*a1;
  v12 = (char *)a1[1];
  v19 = v14 + 1;
  v11 = v26;
  *a1 = (uint64_t)v19;
  a1[1] = v26;
  a1[2] = (uint64_t)v27;
  if (v12 != v18)
  {
    while (1)
    {
      v22 = v12 - 32;
      v20 = (char *)*((_QWORD *)v12 - 1);
      if (v22 == v20)
      {
        v20 = v22;
        v21 = 4;
      }
      else
      {
        if (!v20)
          goto LABEL_28;
        v21 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_28:
      v12 = v22;
      if (v22 == v18)
      {
        v12 = v18;
        break;
      }
    }
  }
LABEL_33:
  if (v12)
    operator delete(v12);
  return v11;
}

void sub_22DB09F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::function<void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>>::~__split_buffer(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v6 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      v7 = (_QWORD *)*(v2 - 1);
      if (v7 == v6)
      {
        v5 = 4;
      }
      else
      {
        if (!v7)
          goto LABEL_7;
        v6 = v7;
        v5 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v5))();
      v6 = *(_QWORD **)(a1 + 16);
LABEL_7:
      v2 = v6;
    }
    while (v6 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F984740;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F984740;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::operator()(uint64_t a1, int **a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t j;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  BOOL v97;
  _QWORD *v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t k;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t m;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  _OWORD *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  int v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  int64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  int64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  char *v167;
  char *v168;
  int64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  char *v185;
  int64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  unint64_t v211;
  BOOL v212;
  _QWORD *v213;
  uint64_t v214;
  int *v215;
  uint64_t v216;
  void *__p;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  void *v221;
  char *v222;
  char *v223;
  void *v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;

  v3 = a1;
  v5 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>(*(_QWORD *)(a1 + 24));
  v227 = 0;
  v228 = 0;
  v229 = 0;
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v221 = 0;
  v222 = 0;
  v223 = 0;
  __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v220 = 0;
  v219 = 0u;
  v218 = 0u;
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD **)(v6 + 32);
  if (!v7)
    goto LABEL_12;
  v8 = v6 + 32;
  v9 = *(_QWORD **)(v6 + 32);
  do
  {
    v10 = v9[4];
    v11 = v10 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v10 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
      v12 = v9;
    else
      v12 = v9 + 1;
    if (v11)
      v8 = (uint64_t)v9;
    v9 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v8 != v6 + 32
    && *(_QWORD *)(v8 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
  {
    v216 = *(_QWORD *)(v8 + 40);
  }
  else
  {
LABEL_12:
    v216 = 0;
  }
  v14 = *a2;
  v13 = a2[1];
  v214 = v3;
  if (*a2 != v13)
  {
    v215 = a2[1];
    while (1)
    {
      v16 = *v14 & 0xFFFFFFFFFFFFFFFELL;
      v17 = v5[12];
      if (v16 >= (v5[13] - v17) >> 2)
        goto LABEL_17;
      v18 = *(_DWORD *)(v17 + 4 * v16);
      if (v18 == -1)
        goto LABEL_17;
      v19 = 0;
      v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v18)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + v18));
      v20 = ((unint64_t)__p >> 12) ^ (v4 >> 7);
      v21 = 0x101010101010101 * (v4 & 0x7F);
      for (i = v20; ; i = v19 + v23)
      {
        v23 = i & v219;
        v24 = *(_QWORD *)((char *)__p + v23);
        v25 = ((v24 ^ v21) - 0x101010101010101) & ~(v24 ^ v21) & 0x8080808080808080;
        if (v25)
          break;
LABEL_24:
        if ((v24 & (~v24 << 6) & 0x8080808080808080) != 0)
          goto LABEL_27;
        v19 += 8;
      }
      while (1)
      {
        v26 = (v23 + (__clz(__rbit64(v25)) >> 3)) & v219;
        if (*(_DWORD *)(v218 + 4 * v26) == v18)
          break;
        v25 &= v25 - 1;
        if (!v25)
          goto LABEL_24;
      }
      if (v26 != (_QWORD)v219)
        goto LABEL_17;
LABEL_27:
      for (j = 0; ; v20 = j + v28)
      {
        v28 = v20 & v219;
        v29 = *(_QWORD *)((char *)__p + v28);
        v30 = ((v29 ^ v21) - 0x101010101010101) & ~(v29 ^ v21) & 0x8080808080808080;
        if (v30)
          break;
LABEL_31:
        if ((v29 & (~v29 << 6) & 0x8080808080808080) != 0)
        {
          v31 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&__p, v4);
          *(_DWORD *)(v218 + 4 * v31) = v18;
          goto LABEL_34;
        }
        j += 8;
      }
      while (*(_DWORD *)(v218 + 4 * ((v28 + (__clz(__rbit64(v30)) >> 3)) & v219)) != v18)
      {
        v30 &= v30 - 1;
        if (!v30)
          goto LABEL_31;
      }
LABEL_34:
      v32 = *(_QWORD *)(v216 + 144);
      v33 = *(_QWORD *)(v32 + 20 * (int)v16);
      v34 = *(_QWORD *)(v32 + 20 * (int)(v16 | 1));
      v35 = v228;
      if (v228 < v229)
      {
        *(_DWORD *)v228 = v18;
        v36 = (uint64_t)(v35 + 4);
        goto LABEL_55;
      }
      v37 = v227;
      v38 = (v228 - v227) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v40 = v229 - v227;
      if ((v229 - v227) >> 1 > v39)
        v39 = v40 >> 1;
      v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v39;
      if (v41)
        break;
      v43 = 0;
      v44 = (char *)(4 * v38);
      *(_DWORD *)(4 * v38) = v18;
      v36 = 4 * v38 + 4;
      if (v35 != v37)
        goto LABEL_47;
LABEL_53:
      v227 = v44;
      v228 = (char *)v36;
      v229 = &v43[4 * v41];
      if (v37)
      {
        v54 = v37;
        v55 = v33;
        operator delete(v54);
        v33 = v55;
      }
LABEL_55:
      v228 = (char *)v36;
      v56 = v225;
      if (v225 < v226)
      {
        *(_QWORD *)v225 = v33;
        v57 = (uint64_t)(v56 + 8);
        goto LABEL_76;
      }
      v58 = (char *)v224;
      v59 = v225 - (_BYTE *)v224;
      v60 = (v225 - (_BYTE *)v224) >> 3;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61)
        goto LABEL_264;
      v62 = v226 - (_BYTE *)v224;
      if ((v226 - (_BYTE *)v224) >> 2 > v61)
        v61 = v62 >> 2;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        if (v63 >> 61)
          goto LABEL_262;
        v64 = v33;
        v65 = (char *)operator new(8 * v63);
        v66 = &v65[8 * v60];
        *(_QWORD *)v66 = v64;
        v57 = (uint64_t)(v66 + 8);
        if (v56 == v58)
          goto LABEL_74;
LABEL_68:
        v67 = v56 - 8 - v58;
        if (v67 < 0x58)
          goto LABEL_277;
        if ((unint64_t)(v56 - &v65[v59]) < 0x20)
          goto LABEL_277;
        v68 = (v67 >> 3) + 1;
        v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        v70 = &v56[-v69];
        v66 -= v69;
        v71 = &v65[8 * v60 - 16];
        v72 = v56 - 16;
        v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v74 = *(_OWORD *)v72;
          *((_OWORD *)v71 - 1) = *((_OWORD *)v72 - 1);
          *(_OWORD *)v71 = v74;
          v71 -= 32;
          v72 -= 32;
          v73 -= 4;
        }
        while (v73);
        v56 = v70;
        if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_277:
          do
          {
            v75 = *((_QWORD *)v56 - 1);
            v56 -= 8;
            *((_QWORD *)v66 - 1) = v75;
            v66 -= 8;
          }
          while (v56 != v58);
        }
        goto LABEL_74;
      }
      v65 = 0;
      v66 = (char *)(8 * v60);
      *(_QWORD *)(8 * v60) = v33;
      v57 = 8 * v60 + 8;
      if (v56 != v58)
        goto LABEL_68;
LABEL_74:
      v224 = v66;
      v225 = (char *)v57;
      v226 = &v65[8 * v63];
      if (v58)
        operator delete(v58);
LABEL_76:
      v76 = -v34;
      v225 = (char *)v57;
      v77 = v222;
      if (v222 >= v223)
      {
        v78 = (char *)v221;
        v79 = v222 - (_BYTE *)v221;
        v80 = (v222 - (_BYTE *)v221) >> 3;
        v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 61)
LABEL_264:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v82 = v223 - (_BYTE *)v221;
        if ((v223 - (_BYTE *)v221) >> 2 > v81)
          v81 = v82 >> 2;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v81;
        if (v83)
        {
          if (v83 >> 61)
LABEL_262:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v84 = (char *)operator new(8 * v83);
          v85 = &v84[8 * v80];
          *(_QWORD *)v85 = v76;
          v15 = (uint64_t)(v85 + 8);
          if (v77 == v78)
            goto LABEL_94;
LABEL_88:
          v86 = v77 - 8 - v78;
          if (v86 < 0x58)
            goto LABEL_278;
          if ((unint64_t)(v77 - &v84[v79]) < 0x20)
            goto LABEL_278;
          v87 = (v86 >> 3) + 1;
          v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          v89 = &v77[-v88];
          v85 -= v88;
          v90 = &v84[8 * v80 - 16];
          v91 = v77 - 16;
          v92 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v93 = *(_OWORD *)v91;
            *((_OWORD *)v90 - 1) = *((_OWORD *)v91 - 1);
            *(_OWORD *)v90 = v93;
            v90 -= 32;
            v91 -= 32;
            v92 -= 4;
          }
          while (v92);
          v77 = v89;
          if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_278:
            do
            {
              v94 = *((_QWORD *)v77 - 1);
              v77 -= 8;
              *((_QWORD *)v85 - 1) = v94;
              v85 -= 8;
            }
            while (v77 != v78);
          }
        }
        else
        {
          v84 = 0;
          v85 = (char *)(8 * v80);
          *(_QWORD *)(8 * v80) = v76;
          v15 = 8 * v80 + 8;
          if (v77 != v78)
            goto LABEL_88;
        }
LABEL_94:
        v221 = v85;
        v222 = (char *)v15;
        v223 = &v84[8 * v83];
        if (v78)
          operator delete(v78);
        goto LABEL_16;
      }
      *(_QWORD *)v222 = v76;
      v15 = (uint64_t)(v77 + 8);
LABEL_16:
      v222 = (char *)v15;
      v13 = v215;
LABEL_17:
      if (++v14 == v13)
      {
        v3 = v214;
        v6 = *(_QWORD *)(v214 + 24);
        v7 = *(_QWORD **)(v6 + 32);
        goto LABEL_97;
      }
    }
    if (v41 >> 62)
      goto LABEL_262;
    v42 = v33;
    v43 = operator new(4 * v41);
    v33 = v42;
    v44 = &v43[4 * v38];
    *(_DWORD *)v44 = v18;
    v36 = (uint64_t)(v44 + 4);
    if (v35 == v37)
      goto LABEL_53;
LABEL_47:
    v45 = v35 - 4 - v37;
    if (v45 < 0x2C)
      goto LABEL_279;
    if ((unint64_t)(v37 - v43) < 0x20)
      goto LABEL_279;
    v46 = (v45 >> 2) + 1;
    v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
    v48 = &v35[-v47];
    v44 -= v47;
    v49 = &v43[4 * v38 - 16];
    v50 = v35 - 16;
    v51 = v46 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *v49 = v52;
      v49 -= 2;
      v50 -= 32;
      v51 -= 8;
    }
    while (v51);
    v35 = v48;
    if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_279:
      do
      {
        v53 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v44 - 1) = v53;
        v44 -= 4;
      }
      while (v35 != v37);
    }
    goto LABEL_53;
  }
LABEL_97:
  if (v7)
  {
    v95 = v6 + 32;
    do
    {
      v96 = v7[4];
      v97 = v96 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
      if (v96 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
        v98 = v7;
      else
        v98 = v7 + 1;
      if (v97)
        v95 = (uint64_t)v7;
      v7 = (_QWORD *)*v98;
    }
    while (*v98);
    if (v95 != v6 + 32
      && *(_QWORD *)(v95 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
    {
      v99 = *(_QWORD *)(v95 + 40);
      v100 = *(_DWORD *)(v3 + 16);
      v101 = *(_DWORD *)(v99 + 12);
      if (v100 >= v101)
        goto LABEL_236;
LABEL_114:
      while (1)
      {
        v104 = *(_DWORD *)(*(_QWORD *)(v99 + 72) + 4 * v100);
        v105 = (uint64_t)v104 >> 1;
        v106 = v5[9];
        if (v105 < (v5[10] - v106) >> 2)
        {
          v107 = *(_DWORD *)(v106 + 4 * v105);
          if (v107 != -1)
          {
            v108 = 0;
            v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v107)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v107));
            v109 = ((unint64_t)__p >> 12) ^ (v4 >> 7);
            v110 = 0x101010101010101 * (v4 & 0x7F);
            for (k = v109; ; k = v108 + v112)
            {
              v112 = k & v219;
              v113 = *(_QWORD *)((char *)__p + v112);
              v114 = ((v113 ^ v110) - 0x101010101010101) & ~(v113 ^ v110) & 0x8080808080808080;
              if (v114)
                break;
LABEL_120:
              if ((v113 & (~v113 << 6) & 0x8080808080808080) != 0)
                goto LABEL_123;
              v108 += 8;
            }
            while (1)
            {
              v115 = (v112 + (__clz(__rbit64(v114)) >> 3)) & v219;
              if (*(_DWORD *)(v218 + 4 * v115) == v107)
                break;
              v114 &= v114 - 1;
              if (!v114)
                goto LABEL_120;
            }
            if (v115 == (_QWORD)v219)
              break;
          }
        }
LABEL_113:
        *(_DWORD *)(v3 + 16) = ++v100;
        if (v100 >= v101)
        {
          v6 = *(_QWORD *)(v3 + 24);
          goto LABEL_236;
        }
      }
LABEL_123:
      for (m = 0; ; v109 = m + v117)
      {
        v117 = v109 & v219;
        v118 = *(_QWORD *)((char *)__p + (v109 & v219));
        v119 = ((v118 ^ v110) - 0x101010101010101) & ~(v118 ^ v110) & 0x8080808080808080;
        if (v119)
          break;
LABEL_127:
        if ((v118 & (~v118 << 6) & 0x8080808080808080) != 0)
        {
          v120 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)&__p, v4);
          *(_DWORD *)(v218 + 4 * v120) = v107;
          goto LABEL_130;
        }
        m += 8;
      }
      while (*(_DWORD *)(v218 + 4 * ((v117 + (__clz(__rbit64(v119)) >> 3)) & v219)) != v107)
      {
        v119 &= v119 - 1;
        if (!v119)
          goto LABEL_127;
      }
LABEL_130:
      v121 = v228;
      if (v228 < v229)
      {
        *(_DWORD *)v228 = v107;
        v122 = (uint64_t)(v121 + 4);
        goto LABEL_152;
      }
      v123 = v227;
      v124 = (v228 - v227) >> 2;
      v125 = v124 + 1;
      if ((unint64_t)(v124 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v126 = v229 - v227;
      if ((v229 - v227) >> 1 > v125)
        v125 = v126 >> 1;
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL)
        v127 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v127 = v125;
      if (v127)
      {
        if (v127 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v128 = operator new(4 * v127);
        v129 = &v128[4 * v124];
        *(_DWORD *)v129 = v107;
        v122 = (uint64_t)(v129 + 4);
        if (v121 != v123)
        {
LABEL_141:
          v130 = v121 - 4 - v123;
          if (v130 >= 0x2C)
          {
            v3 = v214;
            if ((unint64_t)(v123 - v128) >= 0x20)
            {
              v131 = (v130 >> 2) + 1;
              v132 = 4 * (v131 & 0x7FFFFFFFFFFFFFF8);
              v133 = &v121[-v132];
              v129 -= v132;
              v134 = &v128[4 * v124 - 16];
              v135 = v121 - 16;
              v136 = v131 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v137 = *(_OWORD *)v135;
                *(v134 - 1) = *((_OWORD *)v135 - 1);
                *v134 = v137;
                v134 -= 2;
                v135 -= 32;
                v136 -= 8;
              }
              while (v136);
              v121 = v133;
              if (v131 == (v131 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_150:
                v227 = v129;
                v228 = (char *)v122;
                v229 = &v128[4 * v127];
                if (v123)
                  operator delete(v123);
LABEL_152:
                v228 = (char *)v122;
                v139 = v225;
                if ((v104 & 1) == 0)
                {
                  if (v225 < v226)
                  {
                    *(_QWORD *)v225 = 1;
                    v140 = (uint64_t)(v139 + 8);
LABEL_186:
                    v225 = (char *)v140;
                    v167 = v222;
                    if (v222 >= v223)
                    {
                      v168 = (char *)v221;
                      v169 = v222 - (_BYTE *)v221;
                      v170 = (v222 - (_BYTE *)v221) >> 3;
                      v171 = v170 + 1;
                      if ((unint64_t)(v170 + 1) >> 61)
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      v172 = v223 - (_BYTE *)v221;
                      if ((v223 - (_BYTE *)v221) >> 2 > v171)
                        v171 = v172 >> 2;
                      if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
                        v173 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v173 = v171;
                      if (v173)
                      {
                        if (v173 >> 61)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v174 = (char *)operator new(8 * v173);
                        v175 = &v174[8 * v170];
                        *(_QWORD *)v175 = 1;
                        v103 = (uint64_t)(v175 + 8);
                        if (v167 == v168)
                          goto LABEL_233;
                        goto LABEL_219;
                      }
                      v174 = 0;
                      v175 = (char *)(8 * v170);
                      *(_QWORD *)(8 * v170) = 1;
                      v103 = 8 * v170 + 8;
                      if (v167 != v168)
                      {
LABEL_219:
                        v190 = v167 - 8 - v168;
                        if (v190 < 0x58)
                          goto LABEL_280;
                        if ((unint64_t)(v167 - &v174[v169]) < 0x20)
                          goto LABEL_280;
                        v191 = (v190 >> 3) + 1;
                        v192 = 8 * (v191 & 0x3FFFFFFFFFFFFFFCLL);
                        v193 = &v167[-v192];
                        v175 -= v192;
                        v194 = &v174[8 * v170 - 16];
                        v195 = v167 - 16;
                        v196 = v191 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v197 = *(_OWORD *)v195;
                          *((_OWORD *)v194 - 1) = *((_OWORD *)v195 - 1);
                          *(_OWORD *)v194 = v197;
                          v194 -= 32;
                          v195 -= 32;
                          v196 -= 4;
                        }
                        while (v196);
                        v167 = v193;
                        if (v191 != (v191 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_280:
                          do
                          {
                            v198 = *((_QWORD *)v167 - 1);
                            v167 -= 8;
                            *((_QWORD *)v175 - 1) = v198;
                            v175 -= 8;
                          }
                          while (v167 != v168);
                        }
                      }
LABEL_233:
                      v221 = v175;
                      v222 = (char *)v103;
                      v223 = &v174[8 * v173];
                      if (v168)
                        operator delete(v168);
                      goto LABEL_112;
                    }
                    *(_QWORD *)v222 = 1;
                    v102 = (uint64_t)(v167 + 8);
                    goto LABEL_111;
                  }
                  v142 = (char *)v224;
                  v143 = v225 - (_BYTE *)v224;
                  v144 = (v225 - (_BYTE *)v224) >> 3;
                  v145 = v144 + 1;
                  if ((unint64_t)(v144 + 1) >> 61)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v146 = v226 - (_BYTE *)v224;
                  if ((v226 - (_BYTE *)v224) >> 2 > v145)
                    v145 = v146 >> 2;
                  if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
                    v147 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v147 = v145;
                  if (v147)
                  {
                    if (v147 >> 61)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v148 = (char *)operator new(8 * v147);
                    v149 = &v148[8 * v144];
                    *(_QWORD *)v149 = 1;
                    v140 = (uint64_t)(v149 + 8);
                    if (v139 == v142)
                      goto LABEL_184;
                  }
                  else
                  {
                    v148 = 0;
                    v149 = (char *)(8 * v144);
                    *(_QWORD *)(8 * v144) = 1;
                    v140 = 8 * v144 + 8;
                    if (v139 == v142)
                    {
LABEL_184:
                      v224 = v149;
                      v225 = (char *)v140;
                      v226 = &v148[8 * v147];
                      if (v142)
                        operator delete(v142);
                      goto LABEL_186;
                    }
                  }
                  v158 = v139 - 8 - v142;
                  if (v158 < 0x58)
                    goto LABEL_281;
                  if ((unint64_t)(v139 - &v148[v143]) < 0x20)
                    goto LABEL_281;
                  v159 = (v158 >> 3) + 1;
                  v160 = 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
                  v161 = &v139[-v160];
                  v149 -= v160;
                  v162 = &v148[8 * v144 - 16];
                  v163 = v139 - 16;
                  v164 = v159 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v165 = *(_OWORD *)v163;
                    *((_OWORD *)v162 - 1) = *((_OWORD *)v163 - 1);
                    *(_OWORD *)v162 = v165;
                    v162 -= 32;
                    v163 -= 32;
                    v164 -= 4;
                  }
                  while (v164);
                  v139 = v161;
                  if (v159 != (v159 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_281:
                    do
                    {
                      v166 = *((_QWORD *)v139 - 1);
                      v139 -= 8;
                      *((_QWORD *)v149 - 1) = v166;
                      v149 -= 8;
                    }
                    while (v139 != v142);
                  }
                  goto LABEL_184;
                }
                if (v225 < v226)
                {
                  *(_QWORD *)v225 = 0;
                  v141 = (uint64_t)(v139 + 8);
LABEL_206:
                  v225 = (char *)v141;
                  v185 = v222;
                  if (v222 >= v223)
                  {
                    v168 = (char *)v221;
                    v186 = v222 - (_BYTE *)v221;
                    v187 = (v222 - (_BYTE *)v221) >> 3;
                    v188 = v187 + 1;
                    if ((unint64_t)(v187 + 1) >> 61)
                      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                    v189 = v223 - (_BYTE *)v221;
                    if ((v223 - (_BYTE *)v221) >> 2 > v188)
                      v188 = v189 >> 2;
                    if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8)
                      v173 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v173 = v188;
                    if (v173)
                    {
                      if (v173 >> 61)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v174 = (char *)operator new(8 * v173);
                      v175 = &v174[8 * v187];
                      *(_QWORD *)v175 = 0;
                      v103 = (uint64_t)(v175 + 8);
                      if (v185 == v168)
                        goto LABEL_233;
                    }
                    else
                    {
                      v174 = 0;
                      v175 = (char *)(8 * v187);
                      *(_QWORD *)(8 * v187) = 0;
                      v103 = 8 * v187 + 8;
                      if (v185 == v168)
                        goto LABEL_233;
                    }
                    v199 = v185 - 8 - v168;
                    if (v199 < 0x58)
                      goto LABEL_282;
                    if ((unint64_t)(v185 - &v174[v186]) < 0x20)
                      goto LABEL_282;
                    v200 = (v199 >> 3) + 1;
                    v201 = 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
                    v202 = &v185[-v201];
                    v175 -= v201;
                    v203 = &v174[8 * v187 - 16];
                    v204 = v185 - 16;
                    v205 = v200 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v206 = *(_OWORD *)v204;
                      *((_OWORD *)v203 - 1) = *((_OWORD *)v204 - 1);
                      *(_OWORD *)v203 = v206;
                      v203 -= 32;
                      v204 -= 32;
                      v205 -= 4;
                    }
                    while (v205);
                    v185 = v202;
                    if (v200 != (v200 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_282:
                      do
                      {
                        v207 = *((_QWORD *)v185 - 1);
                        v185 -= 8;
                        *((_QWORD *)v175 - 1) = v207;
                        v175 -= 8;
                      }
                      while (v185 != v168);
                    }
                    goto LABEL_233;
                  }
                  *(_QWORD *)v222 = 0;
                  v102 = (uint64_t)(v185 + 8);
LABEL_111:
                  v103 = v102;
LABEL_112:
                  v222 = (char *)v103;
                  v100 = *(_DWORD *)(v3 + 16);
                  v101 = *(_DWORD *)(v99 + 12);
                  goto LABEL_113;
                }
                v150 = (char *)v224;
                v151 = v225 - (_BYTE *)v224;
                v152 = (v225 - (_BYTE *)v224) >> 3;
                v153 = v152 + 1;
                if ((unint64_t)(v152 + 1) >> 61)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v154 = v226 - (_BYTE *)v224;
                if ((v226 - (_BYTE *)v224) >> 2 > v153)
                  v153 = v154 >> 2;
                if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8)
                  v155 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v155 = v153;
                if (v155)
                {
                  if (v155 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v156 = (char *)operator new(8 * v155);
                  v157 = &v156[8 * v152];
                  *(_QWORD *)v157 = 0;
                  v141 = (uint64_t)(v157 + 8);
                  if (v139 == v150)
                    goto LABEL_204;
                }
                else
                {
                  v156 = 0;
                  v157 = (char *)(8 * v152);
                  *(_QWORD *)(8 * v152) = 0;
                  v141 = 8 * v152 + 8;
                  if (v139 == v150)
                  {
LABEL_204:
                    v224 = v157;
                    v225 = (char *)v141;
                    v226 = &v156[8 * v155];
                    if (v150)
                      operator delete(v150);
                    goto LABEL_206;
                  }
                }
                v176 = v139 - 8 - v150;
                if (v176 < 0x58)
                  goto LABEL_283;
                if ((unint64_t)(v139 - &v156[v151]) < 0x20)
                  goto LABEL_283;
                v177 = (v176 >> 3) + 1;
                v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                v179 = &v139[-v178];
                v157 -= v178;
                v180 = &v156[8 * v152 - 16];
                v181 = v139 - 16;
                v182 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v183 = *(_OWORD *)v181;
                  *((_OWORD *)v180 - 1) = *((_OWORD *)v181 - 1);
                  *(_OWORD *)v180 = v183;
                  v180 -= 32;
                  v181 -= 32;
                  v182 -= 4;
                }
                while (v182);
                v139 = v179;
                if (v177 != (v177 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_283:
                  do
                  {
                    v184 = *((_QWORD *)v139 - 1);
                    v139 -= 8;
                    *((_QWORD *)v157 - 1) = v184;
                    v157 -= 8;
                  }
                  while (v139 != v150);
                }
                goto LABEL_204;
              }
            }
          }
          else
          {
            v3 = v214;
          }
          do
          {
            v138 = *((_DWORD *)v121 - 1);
            v121 -= 4;
            *((_DWORD *)v129 - 1) = v138;
            v129 -= 4;
          }
          while (v121 != v123);
          goto LABEL_150;
        }
      }
      else
      {
        v128 = 0;
        v129 = (char *)(4 * v124);
        *(_DWORD *)(4 * v124) = v107;
        v122 = 4 * v124 + 4;
        if (v121 != v123)
          goto LABEL_141;
      }
      v3 = v214;
      goto LABEL_150;
    }
  }
  v99 = 0;
  v100 = *(_DWORD *)(v3 + 16);
  v101 = MEMORY[0xC];
  if (v100 < MEMORY[0xC])
    goto LABEL_114;
LABEL_236:
  if (v227 != v228)
  {
    operations_research::sat::SharedBoundsManager::ReportPotentialNewBounds(*(_QWORD *)(v3 + 32), *(absl::lts_2020_02_25::Mutex **)(v3 + 8), v6, (uint64_t *)&v227, &v224, &v221);
    v6 = *(_QWORD *)(v3 + 24);
  }
  v210 = *(_QWORD **)(v6 + 32);
  v208 = v6 + 32;
  v209 = v210;
  do
  {
    v211 = v209[4];
    v212 = v211 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d;
    if (v211 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatParameters>(void)::d)
      v213 = v209;
    else
      v213 = v209 + 1;
    if (v212)
      v208 = (uint64_t)v209;
    v209 = (_QWORD *)*v213;
  }
  while (*v213);
  if (!*(_BYTE *)(*(_QWORD *)(v208 + 40) + 153))
    operations_research::sat::SharedBoundsManager::Synchronize(*(operations_research::sat::SharedBoundsManager **)(v3 + 32), (absl::lts_2020_02_25::Mutex *)v4);
  if ((_QWORD)v219)
  {
    operator delete(__p);
    __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v220 = 0;
    *(_QWORD *)&v219 = 0;
    v218 = 0uLL;
  }
  if (*((_QWORD *)&v219 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v219 + 1));
  if (v221)
  {
    v222 = (char *)v221;
    operator delete(v221);
  }
  if (v224)
  {
    v225 = (char *)v224;
    operator delete(v224);
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
}

void sub_22DB0B008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *__p, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (a18)
  {
    operator delete(__p);
    __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    a20 = 0;
    a10[1] = 0;
    a10[2] = 0;
    *a10 = 0;
  }
  if (a19)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(a19);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroExportERKNS0_12CpModelPro"
                     "toEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroExportERKNS0_1"
                                "2CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroExportERKNS0_12CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroExportERKNS0_12CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroExport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,void ()(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&)>::target_type()
{
}

_QWORD *operations_research::sat::Model::GetOrCreate<operations_research::sat::LevelZeroCallbackHelper>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LevelZeroCallbackHelper>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LevelZeroCallbackHelper>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3
    && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LevelZeroCallbackHelper>(void)::d)
  {
    return (_QWORD *)v4[5];
  }
LABEL_12:
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::LevelZeroCallbackHelper>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::LevelZeroCallbackHelper>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::LevelZeroCallbackHelper>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F9847D0;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::LevelZeroCallbackHelper>::~Delete(_QWORD *a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v2 = (void **)a1[1];
  *a1 = &off_24F9847D0;
  a1[1] = 0;
  if (v2)
  {
    v3 = (char *)*v2;
    if (!*v2)
    {
LABEL_13:
      MEMORY[0x22E31DF78](v2, 0x20C40960023A9);
      return a1;
    }
    v4 = (char *)v2[1];
    v5 = *v2;
    if (v4 == v3)
    {
LABEL_12:
      v2[1] = v3;
      operator delete(v5);
      goto LABEL_13;
    }
    while (1)
    {
      v8 = v4 - 32;
      v6 = (char *)*((_QWORD *)v4 - 1);
      if (v4 - 32 == v6)
      {
        v6 = v4 - 32;
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_7;
        v7 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_7:
      v4 = v8;
      if (v8 == v3)
      {
        v5 = *v2;
        goto LABEL_12;
      }
    }
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::LevelZeroCallbackHelper>::~Delete(_QWORD *a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v1 = (void **)a1[1];
  *a1 = &off_24F9847D0;
  a1[1] = 0;
  if (!v1)
LABEL_14:
    JUMPOUT(0x22E31DF78);
  v2 = (char *)*v1;
  if (!*v1)
  {
LABEL_13:
    MEMORY[0x22E31DF78](v1, 0x20C40960023A9);
    goto LABEL_14;
  }
  v3 = (char *)v1[1];
  v4 = *v1;
  if (v3 == v2)
  {
LABEL_12:
    v1[1] = v2;
    operator delete(v4);
    goto LABEL_13;
  }
  while (1)
  {
    v7 = v3 - 32;
    v5 = (char *)*((_QWORD *)v3 - 1);
    if (v3 - 32 == v5)
    {
      v5 = v3 - 32;
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_7;
      v6 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_7:
    v3 = v7;
    if (v7 == v2)
    {
      v4 = *v1;
      goto LABEL_12;
    }
  }
}

uint64_t std::vector<std::function<BOOL ()(void)>>::__push_back_slow_path<std::function<BOOL ()(void)>>(uint64_t *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (uint64_t)&v3[-*a1] >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v8 = a1[2] - (_QWORD)v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(32 * v9);
    v11 = (uint64_t)&v10[32 * v5];
    v12 = a2 + 3;
    v13 = (_QWORD *)a2[3];
    if (v13)
    {
LABEL_10:
      if (v13 == a2)
      {
        *(_QWORD *)(v11 + 24) = v11;
        (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v11);
        v4 = (char *)*a1;
        v3 = (char *)a1[1];
        v14 = v11;
        if (v3 == (char *)*a1)
          goto LABEL_26;
      }
      else
      {
        *(_QWORD *)(v11 + 24) = v13;
        *v12 = 0;
        v14 = v11;
        if (v3 == v4)
          goto LABEL_26;
      }
      goto LABEL_17;
    }
  }
  else
  {
    v10 = 0;
    v11 = 32 * v5;
    v12 = a2 + 3;
    v13 = (_QWORD *)a2[3];
    if (v13)
      goto LABEL_10;
  }
  *(_QWORD *)(v11 + 24) = 0;
  v14 = v11;
  if (v3 != v4)
  {
LABEL_17:
    v15 = 0;
    v16 = v3;
    while (1)
    {
      v18 = v11 + v15;
      v19 = &v3[v15];
      v20 = *(char **)&v3[v15 - 8];
      if (v20)
      {
        if (v19 - 32 == v20)
        {
          *(_QWORD *)(v18 - 8) = v18 - 32;
          (*(void (**)(_QWORD))(**((_QWORD **)v19 - 1) + 24))(*((_QWORD *)v19 - 1));
          goto LABEL_20;
        }
        v17 = v16 - 8;
        *(_QWORD *)(v18 - 8) = v20;
      }
      else
      {
        v17 = (char *)(v18 - 8);
      }
      *(_QWORD *)v17 = 0;
LABEL_20:
      v16 -= 32;
      v15 -= 32;
      if (&v3[v15] == v4)
      {
        v14 = v11 + v15;
        break;
      }
    }
  }
LABEL_26:
  v22 = (char *)*a1;
  v21 = (char *)a1[1];
  *a1 = v14;
  a1[1] = v11 + 32;
  a1[2] = (uint64_t)&v10[32 * v9];
  if (v21 != v22)
  {
    do
    {
      v26 = v21 - 32;
      v24 = (char *)*((_QWORD *)v21 - 1);
      if (v21 - 32 == v24)
      {
        v24 = v21 - 32;
        v25 = 4;
      }
      else
      {
        if (!v24)
          goto LABEL_32;
        v25 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_32:
      v21 = v26;
    }
    while (v26 != v22);
  }
  if (v22)
    operator delete(v22);
  return v11 + 32;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24F984808;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24F984808;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  unint64_t v1;
  char *v3;
  int *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  signed int v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  __int128 *v17;
  __int128 v18;
  _BYTE *v19;
  google::LogMessage *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  std::string *v29;
  std::string::size_type size;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  operations_research::sat::SatSolver *v39;
  uint64_t v40;
  void *v41;
  unint64_t v43;
  std::string v44;
  void *__p;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  _BYTE *v52;
  uint64_t v53;
  _QWORD v54[6];
  _QWORD v55[2];
  _BYTE v56[32];
  _OWORD v57[3];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  __p = 0;
  v46 = 0;
  v47 = 0;
  operations_research::sat::SharedBoundsManager::GetChangedBounds(*(_QWORD **)(a1 + 16), (absl::lts_2020_02_25::Mutex *)*(unsigned int *)(a1 + 40), &v51, &v48, &__p);
  v4 = (int *)v51;
  if (v52 == v51)
  {
LABEL_47:
    v40 = 1;
    v41 = __p;
    if (__p)
    {
LABEL_48:
      v46 = v41;
      operator delete(v41);
    }
    goto LABEL_49;
  }
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = v4[v5];
    if (~(_DWORD)v7 <= (int)v7)
      v8 = v4[v5];
    else
      v8 = ~(_DWORD)v7;
    v9 = *(_DWORD *)(**(_QWORD **)(a1 + 48) + 4 * v8);
    if (v9 == -1)
      goto LABEL_4;
    v10 = v9 ^ (v7 >> 31);
    v11 = *((_QWORD *)v48 + v5);
    v12 = *((_QWORD *)__p + v5);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
    v14 = *(_QWORD *)(v13 + 12 * v10);
    v15 = -*(_QWORD *)(v13 + 12 * (v10 ^ 1));
    if (v11 <= v14 && v12 >= v15)
      goto LABEL_4;
    {
LABEL_36:
      if (v11 > v14)
        goto LABEL_37;
      goto LABEL_38;
    }
    v17 = *(__int128 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 8 * v7 + 8) + 40);
    if (*((char *)v17 + 23) < 0)
    {
      v3 = (char *)*((_QWORD *)v17 + 1);
      if (v3)
      {
        std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v17, (std::string::size_type)v3);
        goto LABEL_23;
      }
    }
    else if (*((_BYTE *)v17 + 23))
    {
      v18 = *v17;
      v44.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v18;
      goto LABEL_23;
    }
    *(_QWORD *)&v57[0] = "anonymous_var(";
    *((_QWORD *)&v57[0] + 1) = 14;
    v19 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v7, v56, v3);
    v55[0] = v56;
    v55[1] = v19 - v56;
    v54[0] = ")";
    v54[1] = 1;
    absl::lts_2020_02_25::StrCat((uint64_t)v57, (uint64_t)v55, (uint64_t)v54, &v44);
LABEL_23:
    v20 = google::LogMessage::LogMessage((google::LogMessage *)v57, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1019);
    v21 = (_QWORD *)google::LogMessage::stream(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  '", 3);
    v23 = *(_QWORD *)(a1 + 24);
    v24 = *(char *)(v23 + 23);
    if (v24 >= 0)
      v25 = *(_QWORD *)(a1 + 24);
    else
      v25 = *(_QWORD *)v23;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(v23 + 23);
    else
      v26 = *(_QWORD *)(v23 + 8);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v25, v26);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' imports new bounds for ", 25);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v44;
    else
      v29 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      size = v44.__r_.__value_.__l.__size_;
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)": from [", 8);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"] to [", 6);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", ", 2);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"]", 1);
    google::LogMessage::~LogMessage((google::LogMessage *)v57);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
    operator delete(v44.__r_.__value_.__l.__data_);
    if (v11 > v14)
    {
LABEL_37:
      v36 = *(_QWORD *)(a1 + 32);
      LODWORD(v57[0]) = v10;
      *(_QWORD *)((char *)v57 + 4) = v11;
      v1 = v1 & 0xFFFFFFFF00000000 | HIDWORD(v11);
      if (!operations_research::sat::IntegerTrail::Enqueue(v36, *(uint64_t *)&v57[0], v1, 0, 0, 0, 0))goto LABEL_54;
    }
LABEL_38:
    if (v12 < v15)
    {
      v37 = *(_QWORD *)(a1 + 32);
      v38 = 0x7FFFFFFFFFFFFFFFLL;
      if (v12 >= (uint64_t)0x8000000000000002)
        v38 = -v12;
      LODWORD(v57[0]) = v10 ^ 1;
      *(_QWORD *)((char *)v57 + 4) = v38;
      v43 = v43 & 0xFFFFFFFF00000000 | HIDWORD(v38);
      if (!operations_research::sat::IntegerTrail::Enqueue(v37, *(uint64_t *)&v57[0], SHIDWORD(v38), 0, 0, 0, 0))goto LABEL_54;
    }
    v6 = 1;
LABEL_4:
    ++v5;
    v4 = (int *)v51;
  }
  while (v5 < (v52 - (_BYTE *)v51) >> 2);
  if ((v6 & 1) == 0)
    goto LABEL_47;
  v39 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(*(_QWORD *)(a1 + 24));
  if ((operations_research::sat::SatSolver::FinishPropagation(v39) & 1) != 0)
    goto LABEL_47;
LABEL_54:
  v40 = 0;
  v41 = __p;
  if (__p)
    goto LABEL_48;
LABEL_49:
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  return v40;
}

void sub_22DB0BAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (a21)
      goto LABEL_3;
  }
  else
  {
    v26 = a21;
    if (a21)
    {
LABEL_3:
      operator delete(v26);
      v27 = a24;
      if (a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  v27 = a24;
  if (a24)
  {
LABEL_4:
    operator delete(v27);
    _Unwind_Resume(a1);
  }
LABEL_7:
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroImportERKNS0_12CpModelPro"
                     "toEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroImportERKNS0_1"
                                "2CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroImportERKNS0_12CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_137RegisterVariableBoundsLevelZeroImportERKNS0_12CpModelProtoEPNS0_19SharedBoundsManagerEPNS0_5ModelEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0,std::allocator<operations_research::sat::`anonymous namespace'::RegisterVariableBoundsLevelZeroImport(operations_research::sat::CpModelProto const&,operations_research::sat::SharedBoundsManager *,operations_research::sat::Model *)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t *std::unique_ptr<operations_research::sat::Model>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 48);
    if (v3)
    {
      v4 = *(_QWORD **)(v2 + 56);
      v5 = *(void **)(v2 + 48);
      if (v4 != v3)
      {
        do
        {
          v7 = *--v4;
          v6 = v7;
          *v4 = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        while (v4 != v3);
        v5 = *(void **)(v2 + 48);
      }
      *(_QWORD *)(v2 + 56) = v3;
      operator delete(v5);
    }
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v2 + 24, *(_QWORD **)(v2 + 32));
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E31DF78](v2, 0x1032C402B90307BLL);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F984898;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F984898;
  a2[1] = v2;
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, operations_research::sat::Model *a4)
{
  uint64_t v4;
  operations_research::sat::Model *v5;
  absl::lts_2020_02_25::Mutex *v6;
  absl::lts_2020_02_25::Mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  operations_research::sat::Model *v14;
  _QWORD *v15;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos;
  double v17;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v18;
  absl::lts_2020_02_25::Mutex *v19;
  uint64_t v20;
  uint64_t *v21;
  absl::lts_2020_02_25::Mutex *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  absl::lts_2020_02_25::Mutex *v30;
  absl::lts_2020_02_25::Mutex *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  absl::lts_2020_02_25::Mutex *v39;
  unsigned __int8 **v40;
  absl::lts_2020_02_25::Mutex *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 72))
  {
    *(_BYTE *)(v4 + 72) = 0;
    if (*(_BYTE *)(v4 + 56))
      goto LABEL_3;
  }
  v15 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(_QWORD *)(v4 + 64));
  if (*(_BYTE *)(v4 + 56))
  {
    CurrentTimeNanos = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(*(_QWORD *)(v4 + 64));
    *(_DWORD *)(CurrentTimeNanos + 24) |= 0x8000u;
    *(_QWORD *)(CurrentTimeNanos + 368) = 0x3FF0000000000000;
    v17 = *(double *)(CurrentTimeNanos + 280);
    *(_OWORD *)(v15 + 13) = xmmword_22DCEE4D0;
    v15[16] = 0x7FF0000000000000;
    if (FLAGS_time_limit_use_usertime)
    {
      *((_BYTE *)v15 + 72) = 1;
      CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
      v15[10] = CurrentTimeNanos;
      *((double *)v15 + 12) = v17;
    }
    v18 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
    *v15 = v18;
    v15[1] = v18;
    v20 = v18 + (uint64_t)(v17 * 1000000000.0);
    if ((double)(v18 ^ 0x7FFFFFFFFFFFFFFFLL) * 0.000000001 <= v17)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    v15[2] = v20;
    v21 = *(uint64_t **)(*(_QWORD *)(v4 + 48) + 16);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v21, v19);
    operations_research::TimeLimit::MergeWithGlobalTimeLimit((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v15, v21[1]);
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v21, v22, v23, v24, v25, v26, v27, v28);
  }
  v29 = *((double *)v15 + 14);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v4 + 80), v30);
  *(double *)(v4 + 88) = *(double *)(v4 + 88) + *((double *)v15 + 14) - v29;
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(v4 + 80), v31, v32, v33, v34, v35, v36, v37);
  v38 = *(_QWORD *)(v4 + 48);
  if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v38 + 32), v39)|| operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v38 + 16), v6))
  {
    v40 = *(unsigned __int8 ***)(*(_QWORD *)(v4 + 48) + 16);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v40, v6);
    atomic_store(1u, v40[3]);
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v40, v41, v42, v43, v44, v45, v46, v47);
  }
  else
  {
    if (*(_BYTE *)(v4 + 56))
    {
LABEL_3:
      absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v4 + 80), v6);
      *(_BYTE *)(v4 + 96) = 1;
      absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(v4 + 80), v7, v8, v9, v10, v11, v12, v13);
      return;
    }
    v48 = *(_QWORD *)(v4 + 64);
    *(_QWORD *)(v4 + 64) = 0;
    if (v48)
    {
      v49 = *(_QWORD **)(v48 + 48);
      if (v49)
      {
        v50 = *(_QWORD **)(v48 + 56);
        v51 = *(void **)(v48 + 48);
        if (v50 != v49)
        {
          do
          {
            v53 = *--v50;
            v52 = v53;
            *v50 = 0;
            if (v53)
              (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
          }
          while (v50 != v49);
          v51 = *(void **)(v48 + 48);
        }
        *(_QWORD *)(v48 + 56) = v49;
        operator delete(v51);
      }
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v48 + 24, *(_QWORD **)(v48 + 32));
      if (*(char *)(v48 + 23) < 0)
        operator delete(*(void **)v48);
      JUMPOUT(0x22E31DF78);
    }
  }
}

void sub_22DB0BFAC(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_117FullProblemSolver12GenerateTaskExEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_117FullProblemSolver12GenerateTaskExEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_117FullProblemSolver12GenerateTaskExEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_117FullProblemSolver12GenerateTaskExEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FullProblemSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::~FeasibilityPumpSolver(operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *this)
{
  *(_QWORD *)this = off_24F984918;
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *)((char *)this + 64));
  std::unique_ptr<operations_research::sat::Model>::~unique_ptr[abi:ne180100]((uint64_t *)this + 7);
  *(_QWORD *)this = off_24F982B08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_24F984918;
  absl::lts_2020_02_25::Mutex::~Mutex((operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *)((char *)this + 64));
  std::unique_ptr<operations_research::sat::Model>::~unique_ptr[abi:ne180100]((uint64_t *)this + 7);
  *(_QWORD *)this = off_24F982B08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

BOOL operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::TaskIsAvailable(operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v3;
  absl::lts_2020_02_25::Mutex *v4;
  _BOOL8 v5;
  absl::lts_2020_02_25::Mutex *v7;
  absl::lts_2020_02_25::Mutex *v8;
  absl::lts_2020_02_25::Mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 6);
  if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v3 + 32), a2))
  {
    return 0;
  }
  if ((operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v3 + 16), v4) & 1) == 0)
  {
    v8 = (operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *)((char *)this + 64);
    absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *)((char *)this + 64), v7);
    v5 = *((_BYTE *)this + 88) != 0;
    absl::lts_2020_02_25::Mutex::Unlock(v8, v9, v10, v11, v12, v13, v14, v15);
    return v5;
  }
  return 0;
}

uint64_t operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = &off_24F984968;
  a2[1] = this;
  a2[3] = a2;
  return this;
}

void operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::Synchronize(operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  double v4;
  absl::lts_2020_02_25::Mutex *v5;
  absl::lts_2020_02_25::Mutex *v6;
  absl::lts_2020_02_25::Mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  absl::lts_2020_02_25::Mutex *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = (operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *)((char *)this + 64);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::_anonymous_namespace_::FeasibilityPumpSolver *)((char *)this + 64), a2);
  v4 = *((double *)this + 10);
  *((double *)this + 5) = v4 + *((double *)this + 5);
  v5 = *(absl::lts_2020_02_25::Mutex **)(*((_QWORD *)this + 6) + 16);
  absl::lts_2020_02_25::Mutex::Lock(v5, v6);
  *(double *)(*((_QWORD *)v5 + 1) + 112) = v4 + *(double *)(*((_QWORD *)v5 + 1) + 112);
  absl::lts_2020_02_25::Mutex::Unlock(v5, v7, v8, v9, v10, v11, v12, v13);
  *((_QWORD *)this + 10) = 0;
  absl::lts_2020_02_25::Mutex::Unlock(v3, v14, v15, v16, v17, v18, v19, v20);
}

void sub_22DB0C224(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F984968;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F984968;
  a2[1] = v2;
  return result;
}

void std::__function::__func<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v2;
  absl::lts_2020_02_25::Mutex *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  absl::lts_2020_02_25::Mutex *v11;
  absl::lts_2020_02_25::Mutex *v12;
  uint64_t v13;
  operations_research::sat::Model *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  operations_research::sat::_anonymous_namespace_ **v20;
  const operations_research::sat::CpModelProto *v21;
  operations_research::sat::_anonymous_namespace_ *v22;
  operations_research::sat::SharedResponseManager *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  operations_research::sat::FeasibilityPump *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  BOOL v41;
  _QWORD *v42;
  double *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  BOOL v50;
  _QWORD *v51;
  double v52;
  absl::lts_2020_02_25::Mutex *v53;
  absl::lts_2020_02_25::Mutex *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  absl::lts_2020_02_25::Mutex *v62;
  absl::lts_2020_02_25::Mutex *v63;
  unsigned __int8 **v64;
  absl::lts_2020_02_25::Mutex *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  absl::lts_2020_02_25::Mutex *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;

  v2 = *(_QWORD *)(a1 + 8);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v2 + 64), a2);
  v10 = *(unsigned __int8 *)(v2 + 88);
  if (*(_BYTE *)(v2 + 88))
    *(_BYTE *)(v2 + 88) = 0;
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(v2 + 64), v3, v4, v5, v6, v7, v8, v9);
  if (v10)
  {
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v2 + 64), v11);
    v19 = *(unsigned __int8 *)(v2 + 72);
    if (*(_BYTE *)(v2 + 72))
    {
      v20 = *(operations_research::sat::_anonymous_namespace_ ***)(v2 + 48);
      v21 = v20[4];
      if (!v21)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v80, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1210);
        v79 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Check failed: shared_response_manager != nullptr ", 49);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v80);
      }
      v22 = *v20;
      v23 = *(operations_research::sat::SharedResponseManager **)(v2 + 56);
      v24 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)v23);
      v13 = *((unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v23)
            + 99);
      if ((_DWORD)v13)
      {
        v25 = v81 - v80;
        v26 = (unint64_t)(v81 - v80) >> 6;
        if ((_DWORD)v26)
        {
          v27 = operations_research::sat::Model::GetOrCreate<operations_research::sat::FeasibilityPump>((uint64_t)v23);
          if ((int)v26 >= 1)
          {
            v28 = 0;
            v29 = v25 & 0x3FFFFFFFC0;
            do
            {
              operations_research::sat::FeasibilityPump::AddLinearConstraint(v27, (int **)(v80 + v28));
              v28 += 64;
            }
            while (v29 != v28);
          }
          v30 = (uint64_t *)*((_QWORD *)v22 + 15);
          v31 = v22 == (operations_research::sat::_anonymous_namespace_ *)&operations_research::sat::_CpModelProto_default_instance_
             || v30 == 0;
          if (!v31 && *((int *)v30 + 10) >= 1)
          {
            v32 = 0;
            do
            {
              v33 = *(_DWORD *)(v30[3] + 4 * v32);
              if (~v33 <= v33)
                v34 = *(_DWORD *)(v30[3] + 4 * v32);
              else
                v34 = ~v33;
              operations_research::sat::FeasibilityPump::SetObjectiveCoefficient((uint64_t)v27, *(_DWORD *)(*v24 + 4 * v34) ^ (v33 >> 31), *(_QWORD *)(v30[6] + 8 * v32++));
              v30 = (uint64_t *)*((_QWORD *)v22 + 15);
              if (!v30)
                v30 = &operations_research::sat::_CpObjectiveProto_default_instance_;
            }
            while (v32 < *((int *)v30 + 10));
          }
        }
        operations_research::sat::LinearRelaxation::~LinearRelaxation((operations_research::sat::LinearRelaxation *)&v80);
      }
      v35 = *(_QWORD *)(v2 + 56);
      v38 = *(_QWORD **)(v35 + 32);
      v36 = (_QWORD *)(v35 + 32);
      v37 = v38;
      if (v38)
      {
        v39 = v36;
        do
        {
          v40 = v37[4];
          v41 = v40 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d;
          if (v40 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d)
            v42 = v37;
          else
            v42 = v37 + 1;
          if (v41)
            v39 = v37;
          v37 = (_QWORD *)*v42;
        }
        while (*v42);
        if (v39 != v36
          && v39[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d
          && v39[5])
        {
          *(_BYTE *)(v2 + 72) = 0;
          *(_BYTE *)(v2 + 88) = 1;
        }
      }
    }
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(v2 + 64), v12, v13, (uint64_t)v14, v15, v16, v17, v18);
    if (!v19)
    {
      v43 = (double *)operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(*(_QWORD *)(v2 + 56));
      v44 = *(_QWORD *)(v2 + 56);
      v47 = *(_QWORD **)(v44 + 32);
      v45 = (_QWORD *)(v44 + 32);
      v46 = v47;
      if (!v47)
        goto LABEL_49;
      v48 = v45;
      do
      {
        v49 = v46[4];
        v50 = v49 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d;
        if (v49 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d)
          v51 = v46;
        else
          v51 = v46 + 1;
        if (v50)
          v48 = v46;
        v46 = (_QWORD *)*v51;
      }
      while (*v51);
      if (v48 != v45
        && v48[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d)
      {
        v52 = v43[14];
        if (operations_research::sat::FeasibilityPump::Solve((operations_research::sat::FeasibilityPump *)v48[5]))
          goto LABEL_51;
      }
      else
      {
LABEL_49:
        v52 = v43[14];
        if (operations_research::sat::FeasibilityPump::Solve(0))
        {
LABEL_51:
          absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v2 + 64), v53);
          *(double *)(v2 + 80) = *(double *)(v2 + 80) + v43[14] - v52;
          absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(v2 + 64), v54, v55, v56, v57, v58, v59, v60);
          v61 = *(_QWORD *)(v2 + 48);
          if (operations_research::sat::SharedResponseManager::ProblemIsSolved(*(operations_research::sat::SharedResponseManager **)(v61 + 32), v62)|| operations_research::SharedTimeLimit::LimitReached(*(operations_research::SharedTimeLimit **)(v61 + 16), v63))
          {
            v64 = *(unsigned __int8 ***)(*(_QWORD *)(v2 + 48) + 16);
            absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v64, v63);
            atomic_store(1u, v64[3]);
            absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)v64, v65, v66, v67, v68, v69, v70, v71);
          }
          else
          {
            absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(v2 + 64), v63);
            *(_BYTE *)(v2 + 88) = 1;
            absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25::Mutex *)(v2 + 64), v72, v73, v74, v75, v76, v77, v78);
          }
          return;
        }
      }
      operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 32), (absl::lts_2020_02_25::Mutex *)(v2 + 8));
      goto LABEL_51;
    }
  }
}

void sub_22DB0C5DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  absl::lts_2020_02_25::Mutex *v2;
  absl::lts_2020_02_25::Mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  operations_research::sat::LinearRelaxation::~LinearRelaxation((operations_research::sat::LinearRelaxation *)va);
  absl::lts_2020_02_25::Mutex::Unlock(v2, v4, v5, v6, v7, v8, v9, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat12_GLOBAL__N_121FeasibilityPumpSolver12GenerateTaskExEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat12_GLOBAL__N_121FeasibilityPumpSolver12GenerateTaskExEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat12_GLOBAL__N_121FeasibilityPumpSolver12GenerateTaskExEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat12_GLOBAL__N_121FeasibilityPumpSolver12GenerateTaskExEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1},std::allocator<operations_research::sat::`anonymous namespace'::FeasibilityPumpSolver::GenerateTask(long long)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void operations_research::sat::`anonymous namespace'::LoadBaseModel(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, operations_research::sat::SharedResponseManager *a3, operations_research::sat::Model *a4)
{
  const operations_research::sat::CpModelProto *v5;
  operations_research::sat::SatSolver *v7;
  std::vector<int> *v8;
  operations_research::sat::SatParameters *v9;
  char v10;
  operations_research::sat::Model *v11;
  uint64_t v12;
  operations_research::sat::SharedResponseManager *v13;
  operations_research::sat::Model *v14;
  uint64_t v15;
  operations_research::sat **v16;
  uint64_t v17;
  int v18;
  operations_research::sat **v19;
  uint64_t v20;
  operations_research::sat *v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<int>::pointer begin;
  unint64_t v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;
  int *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char **v50;
  BOOL v51;
  uint64_t v52;
  operations_research::sat::SharedResponseManager *v53;
  char *v54;
  char **v55;
  uint64_t *v56;
  _QWORD *v57;
  const operations_research::sat::CpModelProto *v58;
  char **v59;
  char *v60;
  uint64_t v61;
  std::string __p;
  void *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void *v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v66, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1125);
    v57 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Check failed: shared_response_manager != nullptr ", 49);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v66);
  }
  v5 = a2;
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)a3);
  *(_BYTE *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3) + 16) = 0;
  v8 = (std::vector<int> *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a3);
  v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a3);
  v10 = *((int *)v9 + 99) > 1 || *((_DWORD *)v9 + 31) == 1 && *((_DWORD *)this + 18) == 0;
  operations_research::sat::CpModelMapping::CreateVariables(v8, this, v10, a3);
  operations_research::sat::CpModelMapping::DetectOptionalVariables((operations_research::sat::CpModelMapping *)v8, this, a3);
  operations_research::sat::CpModelMapping::ExtractEncoding((operations_research::sat::CpModelMapping *)v8, (unint64_t)this, a3);
  operations_research::sat::CpModelMapping::PropagateEncodingFromEquivalenceRelations((operations_research::sat::CpModelMapping *)v8, this, a3);
  if (*((_BYTE *)v7 + 496))
  {
    *((_BYTE *)v7 + 496) = 1;
    v12 = *((unsigned __int8 *)a3 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = a3;
    else
      v13 = *(operations_research::sat::SharedResponseManager **)a3;
    if ((v12 & 0x80u) != 0)
      v12 = *((_QWORD *)a3 + 1);
    v66 = v13;
    v67 = v12;
    v63 = " [loading]";
    v64 = 10;
    absl::lts_2020_02_25::StrCat((uint64_t)&v66, (uint64_t)&v63, &__p);
    operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v5, (absl::lts_2020_02_25::Mutex *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operations_research::sat::MaybeFullyEncodeMoreVariables(this, a3, v11);
  v60 = 0;
  v61 = 0;
  v59 = &v60;
  v15 = *((_QWORD *)this + 7);
  if (v15)
    v16 = (operations_research::sat **)(v15 + 8);
  else
    v16 = 0;
  v17 = *((int *)this + 12);
  if (!(_DWORD)v17)
    goto LABEL_58;
  v58 = v5;
  v18 = 0;
  v19 = &v16[v17];
  while (1)
  {
    v20 = 0;
    v21 = *v16;
    v22 = (unint64_t)*v16
        + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)*v16)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + (_QWORD)*v16)));
    v23 = ((v22 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v22);
    begin = v8[5].__begin_;
    v25 = (v23 >> 7) ^ ((unint64_t)begin >> 12);
    v26 = v8[6].__begin_;
    v27 = 0x101010101010101 * (v23 & 0x7F);
    while (1)
    {
      v28 = v25 & (unint64_t)v26;
      v29 = *(_QWORD *)((char *)begin + v28);
      v30 = ((v29 ^ v27) - 0x101010101010101) & ~(v29 ^ v27) & 0x8080808080808080;
      if (v30)
        break;
LABEL_26:
      if ((v29 & (~v29 << 6) & 0x8080808080808080) != 0)
        goto LABEL_29;
      v20 += 8;
      v25 = v20 + v28;
    }
    while (1)
    {
      v31 = (v28 + (__clz(__rbit64(v30)) >> 3)) & (unint64_t)v26;
      if (*(operations_research::sat **)&v8[5].__end_[2 * v31] == v21)
        break;
      v30 &= v30 - 1;
      if (!v30)
        goto LABEL_26;
    }
    if ((std::vector<int>::pointer)v31 == v26)
      break;
    ++v18;
LABEL_21:
    if (++v16 == v19)
      goto LABEL_53;
  }
LABEL_29:
  if ((operations_research::sat::LoadConstraint(*v16, a3, v14) & 1) == 0)
  {
    operations_research::sat::ConstraintCaseName(*((_DWORD *)v21 + 15));
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v59, (const void **)&v66, (uint64_t)&v66);
    if ((char)v68 < 0)
      operator delete(v66);
    goto LABEL_21;
  }
  if (!*((_BYTE *)v7 + 496))
    goto LABEL_21;
  if (*_MergedGlobals_8[0] > 1
    && (_MergedGlobals_8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)_MergedGlobals_8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)2)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1185);
    v32 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"UNSAT during extraction (after adding '", 39);
    operations_research::sat::ConstraintCaseName(*((_DWORD *)v21 + 15));
    if ((v68 & 0x80u) == 0)
      v34 = &v66;
    else
      v34 = v66;
    if ((v68 & 0x80u) == 0)
      v35 = v68;
    else
      v35 = v67;
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"'). ", 4);
    google::protobuf::Message::DebugString(v21, &v63);
    if ((v65 & 0x80u) == 0)
      v38 = &v63;
    else
      v38 = v63;
    if ((v65 & 0x80u) == 0)
      v39 = v65;
    else
      v39 = v64;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
    if ((char)v65 < 0)
      operator delete(v63);
    if ((char)v68 < 0)
      operator delete(v66);
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
  }
LABEL_53:
  v5 = v58;
  if (v18 >= 1
    && *off_254079478[0] >= 3
    && (off_254079478[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079478, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v66, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1192);
    google::LogMessage::stream((google::LogMessage *)&v66);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" constraints were skipped.", 26);
    google::LogMessage::~LogMessage((google::LogMessage *)&v66);
  }
LABEL_58:
  if (v61)
  {
    if (*off_254079480[0] >= 1
      && (off_254079480[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_254079480, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v66, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1195);
      v41 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"There is unsuported constraints types in this model: ", 53);
      google::LogMessage::~LogMessage((google::LogMessage *)&v66);
    }
    v42 = (uint64_t *)v59;
    if (v59 != &v60)
    {
      v43 = off_254079488[0];
      if (*off_254079488[0] <= 0)
      {
        do
        {
          v54 = (char *)v42[1];
          if (v54)
          {
            do
            {
              v55 = (char **)v54;
              v54 = *(char **)v54;
            }
            while (v54);
          }
          else
          {
            do
            {
              v55 = (char **)v42[2];
              v51 = *v55 == (char *)v42;
              v42 = (uint64_t *)v55;
            }
            while (!v51);
          }
          v42 = (uint64_t *)v55;
        }
        while (v55 != &v60);
      }
      else
      {
        if (*off_254079488[0] >= 1)
          goto LABEL_68;
        while (1)
        {
          v49 = (char *)v42[1];
          if (v49)
          {
            do
            {
              v50 = (char **)v49;
              v49 = *(char **)v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              v50 = (char **)v42[2];
              v51 = *v50 == (char *)v42;
              v42 = (uint64_t *)v50;
            }
            while (!v51);
          }
          if (v50 == &v60)
            break;
          v43 = off_254079488[0];
          v42 = (uint64_t *)v50;
          if (*off_254079488[0] >= 1)
          {
LABEL_68:
            if (v43 != &google::kLogSiteUninitialized
              || google::InitVLOG3__((google *)off_254079488, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)1))
            {
              google::LogMessage::LogMessage((google::LogMessage *)&v66, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 1197);
              v44 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v66);
              v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" - ", 3);
              v46 = *((char *)v42 + 55);
              if (v46 >= 0)
                v47 = (uint64_t)(v42 + 4);
              else
                v47 = v42[4];
              if (v46 >= 0)
                v48 = *((unsigned __int8 *)v42 + 55);
              else
                v48 = v42[5];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
              google::LogMessage::~LogMessage((google::LogMessage *)&v66);
            }
          }
        }
      }
    }
    *((_BYTE *)v7 + 496) = 1;
    v52 = *((unsigned __int8 *)a3 + 23);
    if ((v52 & 0x80u) == 0)
      v53 = a3;
    else
      v53 = *(operations_research::sat::SharedResponseManager **)a3;
    if ((v52 & 0x80u) != 0)
      v52 = *((_QWORD *)a3 + 1);
LABEL_102:
    v66 = v53;
    v67 = v52;
    v63 = " [loading]";
    v64 = 10;
    absl::lts_2020_02_25::StrCat((uint64_t)&v66, (uint64_t)&v63, &__p);
    operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible((uint64_t)v5, (absl::lts_2020_02_25::Mutex *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v56 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)a3);
    operations_research::sat::IntegerEncoder::AddAllImplicationsBetweenAssociatedLiterals(v56);
    if ((operations_research::sat::SatSolver::FinishPropagation(v7) & 1) == 0)
    {
      *((_BYTE *)v7 + 496) = 1;
      v52 = *((unsigned __int8 *)a3 + 23);
      if ((v52 & 0x80u) == 0)
        v53 = a3;
      else
        v53 = *(operations_research::sat::SharedResponseManager **)a3;
      if ((v52 & 0x80u) != 0)
        v52 = *((_QWORD *)a3 + 1);
      goto LABEL_102;
    }
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v59, v60);
}

void sub_22DB0CE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_22DB0CE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a24 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_22DB0CEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_22DB0CED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_22DB0CEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
  {
    operator delete(__p);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a13, a14);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_22DB0D014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::`anonymous namespace'::ComputeLinearRelaxation(operations_research::sat::_anonymous_namespace_ *this, const operations_research::sat::CpModelProto *a2, unsigned int a3, operations_research::sat::Model *a4)
{
  const operations_research::sat::ConstraintProto *v4;
  operations_research::sat::_anonymous_namespace_ *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  operations_research::sat **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t i;
  uint64_t (***v17)();
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  operations_research::sat::LinearRelaxation *v25;
  int *v26;
  int *v27;
  uint64_t (***v28)();
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  operations_research::sat *v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  size_t v42;
  char *v43;
  char *v44;
  const void *v45;
  uint64_t v46;
  size_t v47;
  char *v48;
  char *v49;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  void **v53;
  uint64_t v54;
  _QWORD *v55;
  BOOL v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  size_t v60;
  char *v61;
  const void *v62;
  uint64_t v63;
  size_t v64;
  char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int32x4_t *v69;
  int32x4_t *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int32x4_t *v74;
  int32x4_t *v75;
  int32x4_t v76;
  uint64_t v77;
  int32x4_t v78;
  int32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  __int32 *v82;
  __int32 *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t *v90;
  int32x4_t *v91;
  int32x4_t *v92;
  int32x4_t v93;
  uint64_t v94;
  int32x4_t v95;
  int32x4_t v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  int *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int *v106;
  unint64_t v107;
  int *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _OWORD *v112;
  unint64_t v113;
  int *v114;
  _QWORD *v115;
  uint64_t v116;
  _OWORD *v117;
  int *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  void **v131;
  uint64_t v132;
  void **v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  void *v137;
  _QWORD *v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  int *v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  operations_research::sat::IntegerTrail *v151;
  unsigned int v152;
  signed int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  void *v168;
  _QWORD *v169;
  int v170;
  int v171;
  operations_research::sat *v172;
  uint64_t *v173;
  _QWORD *v174;
  _QWORD *v175;
  void **v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t *v179;
  uint64_t *v180;
  int v181;
  int v182;
  _QWORD *v183;
  _QWORD *v184;
  operations_research::sat *v185;
  void **v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t *v189;
  uint64_t *v190;
  int v191;
  int v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t *v196;
  char *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  void **v202;
  uint64_t v203;
  char *v204;
  char *v205;
  void *v206;
  void *v207;
  void *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t (**v211)();
  signed int v212;
  _QWORD *v213;
  _QWORD *v214;
  unint64_t v215;
  BOOL v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t (**v220)();
  char *v221;
  uint64_t v222;
  int v223;
  const operations_research::sat::ConstraintProto *v224;
  int v225;
  operations_research::sat::BinaryImplicationGraph *v226;
  int **v227;
  int **v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  unint64_t v232;
  BOOL v233;
  _QWORD *v234;
  void *v235;
  int *v236;
  int *v237;
  unint64_t v238;
  char *v239;
  void *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  int v245;
  unint64_t v246;
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  char *v255;
  void *v256;
  void *v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  const operations_research::sat::ConstraintProto *v262;
  void **v263;
  operations_research::sat::Model *v265;
  uint64_t v266;
  operations_research::sat **v268;
  operations_research::sat::CpModelMapping *v269;
  int v270;
  int v271;
  operations_research::sat *v272;
  int v273;
  void *v274[3];
  void *v275;
  int *v276;
  void *v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  void *v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  void *v285;
  void *v286;
  char *v287;
  void *v288;
  void *v289;
  void *v290;
  char *v291;
  char *v292;
  void *__p[2];
  void *v294[3];
  __int128 v295;
  uint64_t v296;
  uint64_t (**v297)();
  signed int v298;
  uint64_t (***v299)();
  uint64_t (**v300)();
  unsigned int v301[4];
  uint64_t (***v302)();
  uint64_t (**v303)();
  unsigned int v304[4];
  uint64_t (***v305)();
  uint64_t v306;

  v4 = a4;
  v5 = this;
  v306 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v277 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v278 = 0u;
  v279 = 0u;
  v280 = 0;
  v6 = (_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a4);
  v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>((uint64_t)v4);
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)v4);
  v9 = *((_QWORD *)a2 + 7);
  if (v9)
    v10 = (operations_research::sat **)(v9 + 8);
  else
    v10 = 0;
  v11 = *((int *)a2 + 12);
  v266 = (uint64_t)v5;
  if ((_DWORD)v11)
  {
    v12 = v8;
    v263 = (void **)((char *)v5 + 48);
    v265 = (operations_research::sat::Model *)&v10[v11];
    v262 = v4;
    do
    {
      v268 = v10;
      v272 = *v10;
      if (*((_DWORD *)*v10 + 15) == 15)
      {
        v13 = *((_QWORD *)v272 + 6);
        v14 = *(int *)(v13 + 64);
        if ((_DWORD)v14)
        {
          v15 = *(int **)(v13 + 72);
          for (i = 4 * v14; i; i -= 4)
          {
            if (~*v15 <= *v15)
              v19 = *v15;
            else
              v19 = ~*v15;
            HIDWORD(v21) = *(_DWORD *)(v6[6] + 4 * v19);
            LODWORD(v21) = *v15;
            v20 = v21 >> 31;
            v22 = *(_QWORD *)(v7 + 160);
            v23 = (unint64_t)(*(_QWORD *)(v7 + 168) - v22) >> 2;
            if (v20 < (int)v23 && *(_DWORD *)(v22 + 4 * v20) != -1)
              goto LABEL_12;
            v24 = v20 ^ 1;
            if ((int)v24 < (int)v23 && *(_DWORD *)(v22 + 4 * v24) != -1)
              goto LABEL_12;
            v303 = &off_24F9849D8;
            v304[0] = v20;
            v305 = &v303;
            operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(v304, (uint64_t)v4);
            v17 = v305;
            if (v305 == &v303)
            {
              v17 = &v303;
              v18 = 4;
            }
            else
            {
              if (!v305)
                goto LABEL_12;
              v18 = 5;
            }
            (*v17)[v18]();
LABEL_12:
            ++v15;
          }
        }
      }
      operations_research::sat::GetReferencesUsedByConstraint(v272, (uint64_t)v274);
      v26 = (int *)v275;
      v27 = v276;
      while (v26 != v27)
      {
        if (~*v26 <= *v26)
          v30 = *v26;
        else
          v30 = ~*v26;
        HIDWORD(v32) = *(_DWORD *)(v6[6] + 4 * v30);
        LODWORD(v32) = *v26;
        v31 = v32 >> 31;
        if (((*(_QWORD *)(*(_QWORD *)(v12 + 24) + (((unint64_t)v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v32 >> 31) & 0x3E)) & 3) != 0)
        {
          v300 = &off_24F9849D8;
          v301[0] = v31;
          v302 = &v300;
          operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(v301, (uint64_t)v4);
          v28 = v302;
          if (v302 == &v300)
          {
            v28 = &v300;
            v29 = 4;
LABEL_25:
            (*v28)[v29]();
            goto LABEL_26;
          }
          if (v302)
          {
            v29 = 5;
            goto LABEL_25;
          }
        }
        else
        {
          v33 = *(_QWORD *)(v7 + 160);
          v34 = (unint64_t)(*(_QWORD *)(v7 + 168) - v33) >> 2;
          if (v31 >= (int)v34 || *(_DWORD *)(v33 + 4 * v31) == -1)
          {
            v35 = v31 ^ 1;
            if ((int)v35 >= (int)v34 || *(_DWORD *)(v33 + 4 * v35) == -1)
              goto LABEL_335;
          }
        }
LABEL_26:
        ++v26;
      }
      operations_research::sat::TryToLinearizeConstraint(a2, v272, v4, (operations_research::sat::Model *)a3, (uint64_t)v5, v25);
      v270 = *((_DWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v4)
             + 99);
      v269 = (operations_research::sat::CpModelMapping *)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)v4);
      v36 = v272;
      v37 = *((_DWORD *)v272 + 15);
      v38 = v37 != 15 || v270 < 2;
      if (!v38)
      {
        v39 = *((_QWORD *)v272 + 6);
        v40 = *(const void **)(v39 + 24);
        v41 = *(int *)(v39 + 16);
        v281 = 0;
        v282 = 0uLL;
        if ((_DWORD)v41)
        {
          if ((v41 & 0x80000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v42 = 4 * v41;
          v43 = (char *)operator new(4 * v41);
          v44 = &v43[4 * v41];
          v281 = v43;
          *((_QWORD *)&v282 + 1) = v44;
          memcpy(v43, v40, v42);
          *(_QWORD *)&v282 = v44;
        }
        v45 = *(const void **)(v39 + 48);
        v46 = *(int *)(v39 + 40);
        v291 = 0;
        v292 = 0;
        v290 = 0;
        if ((_DWORD)v46)
        {
          if ((v46 & 0x80000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v47 = 4 * v46;
          v48 = (char *)operator new(4 * v46);
          v49 = &v48[4 * v46];
          v290 = v48;
          v292 = v49;
          memcpy(v48, v45, v47);
          v291 = v49;
        }
        operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v269, (int *)(v39 + 64), (char **)&v288);
        v50 = operations_research::sat::ReindexArcs((int **)&v281, (int **)&v290);
        operations_research::sat::CreateStronglyConnectedGraphCutGenerator(v50, (uint64_t)&v281, (uint64_t)&v290, (uint64_t)&v288, (uint64_t)v4, __p);
        v51 = *(_QWORD **)(v266 + 56);
        if ((unint64_t)v51 >= *(_QWORD *)(v266 + 64))
        {
          v36 = v272;
          *(_QWORD *)(v266 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v263, (uint64_t)__p);
          v53 = (void **)*((_QWORD *)&v295 + 1);
          if (*((void ***)&v295 + 1) == &v294[1])
            goto LABEL_59;
        }
        else
        {
          *v51 = 0;
          v51[1] = 0;
          v51[2] = 0;
          *(_OWORD *)v51 = *(_OWORD *)__p;
          v51[2] = v294[0];
          __p[0] = 0;
          __p[1] = 0;
          v294[0] = 0;
          if (*((_QWORD *)&v295 + 1))
          {
            if (*((void ***)&v295 + 1) != &v294[1])
            {
              v51[6] = *((_QWORD *)&v295 + 1);
              v52 = (_QWORD *)&v295 + 1;
              goto LABEL_58;
            }
            v51[6] = v51 + 3;
            (*(void (**)(_QWORD))(**((_QWORD **)&v295 + 1) + 24))(*((_QWORD *)&v295 + 1));
            v135 = v51 + 7;
            v36 = v272;
            *(_QWORD *)(v266 + 56) = v135;
            v53 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
            {
LABEL_59:
              v53 = &v294[1];
              v54 = 4;
LABEL_60:
              (*((void (**)(void))*v53 + v54))();
              goto LABEL_61;
            }
          }
          else
          {
            v52 = v51 + 6;
LABEL_58:
            *v52 = 0;
            v55 = v51 + 7;
            v36 = v272;
            *(_QWORD *)(v266 + 56) = v55;
            v53 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
              goto LABEL_59;
          }
        }
        if (v53)
        {
          v54 = 5;
          goto LABEL_60;
        }
LABEL_61:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v288)
        {
          v289 = v288;
          operator delete(v288);
        }
        if (v290)
        {
          v291 = (char *)v290;
          operator delete(v290);
        }
        if (v281)
        {
          *(_QWORD *)&v282 = v281;
          operator delete(v281);
        }
        v37 = *((_DWORD *)v36 + 15);
      }
      v56 = v37 != 23 || v270 < 2;
      v5 = (operations_research::sat::_anonymous_namespace_ *)v266;
      if (!v56)
      {
        v57 = *((_QWORD *)v36 + 6);
        v58 = *(const void **)(v57 + 24);
        v59 = *(int *)(v57 + 16);
        v281 = 0;
        v282 = 0uLL;
        if ((_DWORD)v59)
        {
          if ((v59 & 0x80000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v60 = 4 * v59;
          v281 = operator new(4 * v59);
          *(_QWORD *)&v282 = v281;
          v61 = (char *)v281 + 4 * v59;
          *((_QWORD *)&v282 + 1) = v61;
          memcpy(v281, v58, v60);
          *(_QWORD *)&v282 = v61;
        }
        v62 = *(const void **)(v57 + 48);
        v63 = *(int *)(v57 + 40);
        v291 = 0;
        v292 = 0;
        v290 = 0;
        if ((_DWORD)v63)
        {
          if ((v63 & 0x80000000) != 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v64 = 4 * v63;
          v290 = operator new(4 * v63);
          v291 = (char *)v290;
          v65 = (char *)v290 + 4 * v63;
          v292 = v65;
          memcpy(v290, v62, v64);
          v291 = v65;
        }
        operations_research::sat::CpModelMapping::Literals<google::protobuf::RepeatedField<int>>((uint64_t)v269, (int *)(v57 + 64), (char **)&v288);
        v66 = *((_DWORD *)v272 + 15);
        v67 = *((_QWORD *)v272 + 6);
        if (v66 == 23)
        {
          v68 = *(unsigned int *)(v67 + 16);
          if ((int)v68 < 1)
          {
            v72 = 0;
          }
          else
          {
            v69 = *(int32x4_t **)(v67 + 24);
            v70 = *(int32x4_t **)(v67 + 48);
            if (v68 >= 8)
            {
              v71 = v68 & 0x7FFFFFF8;
              v74 = v69 + 1;
              v75 = v70 + 1;
              v76 = 0uLL;
              v77 = v68 & 0xFFFFFFF8;
              v78 = 0uLL;
              v79.i64[0] = 0x100000001;
              v79.i64[1] = 0x100000001;
              do
              {
                v76 = vmaxq_s32(vmaxq_s32(v76, vaddq_s32(v74[-1], v79)), vaddq_s32(v75[-1], v79));
                v78 = vmaxq_s32(vmaxq_s32(v78, vaddq_s32(*v74, v79)), vaddq_s32(*v75, v79));
                v74 += 2;
                v75 += 2;
                v77 -= 8;
              }
              while (v77);
              v72 = vmaxvq_s32(vmaxq_s32(v76, v78));
              if (v71 != v68)
                goto LABEL_92;
            }
            else
            {
              v71 = 0;
              v72 = 0;
LABEL_92:
              v80 = v68 - v71;
              v81 = v71;
              v82 = &v70->i32[v81];
              v83 = &v69->i32[v81];
              do
              {
                v85 = *v83++;
                v84 = v85;
                if (v72 <= v85 + 1)
                  v86 = v84 + 1;
                else
                  v86 = v72;
                v88 = *v82++;
                v87 = v88;
                if (v86 <= v88 + 1)
                  v72 = v87 + 1;
                else
                  v72 = v86;
                --v80;
              }
              while (v80);
            }
          }
          v89 = *(_DWORD *)(v67 + 88);
          if (v89 && *(_QWORD *)(v67 + 112))
          {
            v90 = (uint64_t *)*((_QWORD *)v272 + 6);
            goto LABEL_117;
          }
LABEL_131:
          operations_research::sat::CreateStronglyConnectedGraphCutGenerator(v72, (uint64_t)&v281, (uint64_t)&v290, (uint64_t)&v288, (uint64_t)v4, __p);
          v129 = *(_QWORD **)(v266 + 56);
          if ((unint64_t)v129 >= *(_QWORD *)(v266 + 64))
          {
            v36 = v272;
            *(_QWORD *)(v266 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v263, (uint64_t)__p);
            v131 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
              goto LABEL_145;
          }
          else
          {
            *v129 = 0;
            v129[1] = 0;
            v129[2] = 0;
            *(_OWORD *)v129 = *(_OWORD *)__p;
            v129[2] = v294[0];
            __p[0] = 0;
            __p[1] = 0;
            v294[0] = 0;
            if (*((_QWORD *)&v295 + 1))
            {
              if (*((void ***)&v295 + 1) != &v294[1])
              {
                v129[6] = *((_QWORD *)&v295 + 1);
                v130 = (_QWORD *)&v295 + 1;
                goto LABEL_144;
              }
              v129[6] = v129 + 3;
              (*(void (**)(_QWORD))(**((_QWORD **)&v295 + 1) + 24))(*((_QWORD *)&v295 + 1));
              v162 = v129 + 7;
              v36 = v272;
              *(_QWORD *)(v266 + 56) = v162;
              v131 = (void **)*((_QWORD *)&v295 + 1);
              if (*((void ***)&v295 + 1) == &v294[1])
              {
LABEL_145:
                v131 = &v294[1];
                v132 = 4;
LABEL_146:
                (*((void (**)(void))*v131 + v132))();
                goto LABEL_147;
              }
            }
            else
            {
              v130 = v129 + 6;
LABEL_144:
              *v130 = 0;
              v136 = v129 + 7;
              v36 = v272;
              *(_QWORD *)(v266 + 56) = v136;
              v131 = (void **)*((_QWORD *)&v295 + 1);
              if (*((void ***)&v295 + 1) == &v294[1])
                goto LABEL_145;
            }
          }
          if (v131)
          {
            v132 = 5;
            goto LABEL_146;
          }
LABEL_147:
          v137 = __p[0];
          if (__p[0])
          {
            __p[1] = __p[0];
            goto LABEL_157;
          }
          goto LABEL_158;
        }
        if ((int)qword_25408AD08 < 1)
        {
          v72 = 0;
        }
        else if (qword_25408AD08 >= 8)
        {
          v73 = qword_25408AD08 & 0xFFFFFFF8;
          v91 = (int32x4_t *)(qword_25408AD10 + 16);
          v92 = (int32x4_t *)(qword_25408AD28 + 16);
          v93 = 0uLL;
          v94 = v73;
          v95 = 0uLL;
          v96.i64[0] = 0x100000001;
          v96.i64[1] = 0x100000001;
          do
          {
            v93 = vmaxq_s32(vmaxq_s32(v93, vaddq_s32(v91[-1], v96)), vaddq_s32(v92[-1], v96));
            v95 = vmaxq_s32(vmaxq_s32(v95, vaddq_s32(*v91, v96)), vaddq_s32(*v92, v96));
            v91 += 2;
            v92 += 2;
            v94 -= 8;
          }
          while (v94);
          v72 = vmaxvq_s32(vmaxq_s32(v93, v95));
          if (v73 != qword_25408AD08)
            goto LABEL_106;
        }
        else
        {
          v73 = 0;
          v72 = 0;
LABEL_106:
          v97 = qword_25408AD08 - v73;
          v98 = 4 * v73;
          v99 = (int *)(qword_25408AD28 + v98);
          v100 = (int *)(qword_25408AD10 + v98);
          do
          {
            v102 = *v100++;
            v101 = v102;
            if (v72 <= v102 + 1)
              v103 = v101 + 1;
            else
              v103 = v72;
            v105 = *v99++;
            v104 = v105;
            if (v103 <= v105 + 1)
              v72 = v104 + 1;
            else
              v72 = v103;
            --v97;
          }
          while (v97);
        }
        v89 = qword_25408AD50;
        if (!(_DWORD)qword_25408AD50 || !qword_25408AD68)
          goto LABEL_131;
        v90 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
LABEL_117:
        v106 = (int *)v90[12];
        v107 = 4 * v89;
        v108 = &v106[v107 / 4];
        v286 = 0;
        v287 = 0;
        v285 = 0;
        if (&v106[v107 / 4] != v106)
        {
          if (v107 >= 0x7FFFFFFFFFFFFFFDLL)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v109 = v12;
          v110 = v67;
          v111 = v66;
          v112 = operator new(8 * v89);
          v285 = v112;
          v287 = (char *)v112 + 8 * v89;
          v113 = 4 * v89 - 4;
          v114 = v106;
          v115 = v112;
          v66 = v111;
          v5 = (operations_research::sat::_anonymous_namespace_ *)v266;
          v67 = v110;
          v12 = v109;
          v4 = v262;
          if (v113 < 0x1C)
            goto LABEL_432;
          v116 = (v113 >> 2) + 1;
          v114 = &v106[v116 & 0x7FFFFFFFFFFFFFF8];
          v115 = (_QWORD *)v112 + (v116 & 0x7FFFFFFFFFFFFFF8);
          v117 = v112 + 2;
          v118 = v106 + 4;
          v119 = v116 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v120 = *((_OWORD *)v118 - 1);
            *(_QWORD *)&v121 = (int)v120;
            *((_QWORD *)&v121 + 1) = SDWORD1(v120);
            v122 = v121;
            *(_QWORD *)&v121 = SDWORD2(v120);
            *((_QWORD *)&v121 + 1) = SHIDWORD(v120);
            v123 = v121;
            *(_QWORD *)&v121 = (int)*(_OWORD *)v118;
            *((_QWORD *)&v121 + 1) = (int)HIDWORD(*(_QWORD *)v118);
            v124 = v121;
            *(_QWORD *)&v121 = (int)*((_QWORD *)v118 + 1);
            *((_QWORD *)&v121 + 1) = (int)HIDWORD(*(_OWORD *)v118);
            *(v117 - 2) = v122;
            *(v117 - 1) = v123;
            *v117 = v124;
            v117[1] = v121;
            v117 += 4;
            v118 += 8;
            v119 -= 8;
          }
          while (v119);
          if (v116 != (v116 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_432:
            do
            {
              v125 = *v114++;
              *v115++ = v125;
            }
            while (v114 != v108);
          }
          v286 = v115;
        }
        v126 = &operations_research::sat::_RoutesConstraintProto_default_instance_;
        if (v66 == 23)
          v126 = (uint64_t *)v67;
        operations_research::sat::CreateCVRPCutGenerator(v72, (uint64_t)&v281, (uint64_t)&v290, (uint64_t)&v288, (uint64_t)&v285, v126[14], (uint64_t)v4, __p);
        v127 = (_QWORD *)*((_QWORD *)v5 + 7);
        if ((unint64_t)v127 >= *((_QWORD *)v5 + 8))
        {
          v36 = v272;
          *((_QWORD *)v5 + 7) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v263, (uint64_t)__p);
          v133 = (void **)*((_QWORD *)&v295 + 1);
          if (*((void ***)&v295 + 1) == &v294[1])
            goto LABEL_151;
        }
        else
        {
          *v127 = 0;
          v127[1] = 0;
          v127[2] = 0;
          *(_OWORD *)v127 = *(_OWORD *)__p;
          v127[2] = v294[0];
          __p[0] = 0;
          __p[1] = 0;
          v294[0] = 0;
          if (*((_QWORD *)&v295 + 1))
          {
            if (*((void ***)&v295 + 1) != &v294[1])
            {
              v127[6] = *((_QWORD *)&v295 + 1);
              v128 = (_QWORD *)&v295 + 1;
              goto LABEL_150;
            }
            v127[6] = v127 + 3;
            (*(void (**)(_QWORD))(**((_QWORD **)&v295 + 1) + 24))(*((_QWORD *)&v295 + 1));
            v163 = v127 + 7;
            v36 = v272;
            *((_QWORD *)v5 + 7) = v163;
            v133 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
            {
LABEL_151:
              v133 = &v294[1];
              v134 = 4;
LABEL_152:
              (*((void (**)(void))*v133 + v134))();
              goto LABEL_153;
            }
          }
          else
          {
            v128 = v127 + 6;
LABEL_150:
            *v128 = 0;
            v138 = v127 + 7;
            v36 = v272;
            *((_QWORD *)v5 + 7) = v138;
            v133 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
              goto LABEL_151;
          }
        }
        if (v133)
        {
          v134 = 5;
          goto LABEL_152;
        }
LABEL_153:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v137 = v285;
        if (v285)
        {
          v286 = v285;
LABEL_157:
          operator delete(v137);
        }
LABEL_158:
        if (v288)
        {
          v289 = v288;
          operator delete(v288);
        }
        if (v290)
        {
          v291 = (char *)v290;
          operator delete(v290);
        }
        if (v281)
        {
          *(_QWORD *)&v282 = v281;
          operator delete(v281);
        }
        v37 = *((_DWORD *)v36 + 15);
      }
      if (v37 != 11)
        goto LABEL_217;
      if (*((_DWORD *)v36 + 4))
        goto LABEL_335;
      v139 = *((_QWORD *)v272 + 6);
      if (*(_DWORD *)(v139 + 16) != 2)
        goto LABEL_335;
      v140 = *(_DWORD *)(v139 + 36);
      if (~v140 <= v140)
        v141 = *(_DWORD *)(v139 + 36);
      else
        v141 = ~v140;
      v142 = *(_QWORD *)v269;
      v143 = *(_DWORD *)(*(_QWORD *)v269 + 4 * v141);
      v144 = *(int **)(v139 + 24);
      v145 = *v144;
      v146 = v144[1];
      if (~*v144 <= *v144)
        v147 = *v144;
      else
        v147 = ~v145;
      v148 = *(_DWORD *)(v142 + 4 * v147);
      if (~v146 <= v146)
        v149 = v146;
      else
        v149 = ~v146;
      v150 = *(_DWORD *)(v142 + 4 * v149);
      v151 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)v4);
      v152 = v143 ^ (v140 >> 31);
      v153 = v148 ^ (v145 >> 31);
      v154 = v150 ^ (v146 >> 31);
      v155 = *((_QWORD *)v151 + 5);
      v156 = *(_QWORD *)(v155 + 12 * v153);
      v157 = *(_QWORD *)(v155 + 12 * (v153 ^ 1));
      if (v153 == v154)
      {
        if (v156 < 0)
        {
          v5 = (operations_research::sat::_anonymous_namespace_ *)v266;
          if ((v157 & 0x8000000000000000) != 0)
            goto LABEL_335;
        }
        else if ((v157 & 0x8000000000000000) != 0)
        {
LABEL_195:
          operations_research::sat::CreateSquareCutGenerator(v152, v153, (uint64_t)v4, __p);
          v5 = (operations_research::sat::_anonymous_namespace_ *)v266;
          v164 = *(_QWORD **)(v266 + 56);
          if ((unint64_t)v164 >= *(_QWORD *)(v266 + 64))
          {
            v36 = v272;
            *(_QWORD *)(v266 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v263, (uint64_t)__p);
            v166 = *((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) != &v294[1])
              goto LABEL_207;
          }
          else
          {
            *v164 = 0;
            v164[1] = 0;
            v164[2] = 0;
            *(_OWORD *)v164 = *(_OWORD *)__p;
            v164[2] = v294[0];
            __p[0] = 0;
            __p[1] = 0;
            v294[0] = 0;
            if (*((_QWORD *)&v295 + 1))
            {
              if (*((void ***)&v295 + 1) != &v294[1])
              {
                v164[6] = *((_QWORD *)&v295 + 1);
                v165 = (_QWORD *)&v295 + 1;
                goto LABEL_202;
              }
              v164[6] = v164 + 3;
              (*(void (**)(_QWORD))(**((_QWORD **)&v295 + 1) + 24))(*((_QWORD *)&v295 + 1));
            }
            else
            {
              v165 = v164 + 6;
LABEL_202:
              *v165 = 0;
            }
            v167 = v164 + 7;
            v36 = v272;
            *(_QWORD *)(v266 + 56) = v167;
            v166 = *((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) != &v294[1])
            {
LABEL_207:
              if (v166)
                goto LABEL_208;
LABEL_215:
              v168 = __p[0];
              if (__p[0])
                goto LABEL_216;
              goto LABEL_217;
            }
          }
LABEL_231:
          (*((void (**)(void **))v294[1] + 4))(&v294[1]);
          v168 = __p[0];
          if (__p[0])
            goto LABEL_216;
          goto LABEL_217;
        }
        v153 ^= 1u;
        goto LABEL_195;
      }
      v158 = *(_QWORD *)(v155 + 12 * v154);
      v159 = *(_QWORD *)(v155 + 12 * (v154 ^ 1));
      v5 = (operations_research::sat::_anonymous_namespace_ *)v266;
      if (v156 < 0 && (v157 & 0x8000000000000000) != 0 || v158 < 0 && (v159 & 0x8000000000000000) != 0)
        goto LABEL_335;
      operations_research::sat::CreatePositiveMultiplicationCutGenerator(v152 ^ ((v157 & 0x8000000000000000) == 0) ^ ((v159 & 0x8000000000000000) == 0), (v157 >> 63) ^ v153 ^ 1, (v159 >> 63) ^ v154 ^ 1, (uint64_t)v4, __p);
      v5 = (operations_research::sat::_anonymous_namespace_ *)v266;
      v160 = *(_QWORD **)(v266 + 56);
      if ((unint64_t)v160 >= *(_QWORD *)(v266 + 64))
      {
        v36 = v272;
        *(_QWORD *)(v266 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v263, (uint64_t)__p);
        v166 = *((_QWORD *)&v295 + 1);
        if (*((void ***)&v295 + 1) == &v294[1])
          goto LABEL_231;
      }
      else
      {
        *v160 = 0;
        v160[1] = 0;
        v160[2] = 0;
        *(_OWORD *)v160 = *(_OWORD *)__p;
        v160[2] = v294[0];
        __p[0] = 0;
        __p[1] = 0;
        v294[0] = 0;
        if (*((_QWORD *)&v295 + 1))
        {
          if (*((void ***)&v295 + 1) != &v294[1])
          {
            v160[6] = *((_QWORD *)&v295 + 1);
            v161 = (_QWORD *)&v295 + 1;
            goto LABEL_211;
          }
          v160[6] = v160 + 3;
          (*(void (**)(_QWORD))(**((_QWORD **)&v295 + 1) + 24))(*((_QWORD *)&v295 + 1));
        }
        else
        {
          v161 = v160 + 6;
LABEL_211:
          *v161 = 0;
        }
        v169 = v160 + 7;
        v36 = v272;
        *(_QWORD *)(v266 + 56) = v169;
        v166 = *((_QWORD *)&v295 + 1);
        if (*((void ***)&v295 + 1) == &v294[1])
          goto LABEL_231;
      }
      if (!v166)
        goto LABEL_215;
LABEL_208:
      (*(void (**)(uint64_t))(*(_QWORD *)v166 + 40))(v166);
      v168 = __p[0];
      if (__p[0])
      {
LABEL_216:
        __p[1] = v168;
        operator delete(v168);
      }
LABEL_217:
      v170 = *((_DWORD *)v36 + 15);
      if (v170 == 13)
      {
        if (v270 < 2 || *((_DWORD *)v272 + 4))
          goto LABEL_335;
        v171 = *(_DWORD *)(*((_QWORD *)v272 + 6) + 16);
        v38 = v171 <= *((_DWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v4)
                      + 135);
        v172 = v272;
        if (!v38)
        {
LABEL_241:
          v170 = *((_DWORD *)v172 + 15);
          v5 = (operations_research::sat::_anonymous_namespace_ *)v266;
          goto LABEL_242;
        }
        v173 = &operations_research::sat::_AllDifferentConstraintProto_default_instance_;
        if (*((_DWORD *)v272 + 15) == 13)
          v173 = (uint64_t *)*((_QWORD *)v272 + 6);
        operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v269, (int *)v173 + 4, (int **)&v281);
        operations_research::sat::CreateAllDifferentCutGenerator((char **)&v281, (uint64_t)v4, (char **)__p);
        v174 = *(_QWORD **)(v266 + 56);
        if ((unint64_t)v174 >= *(_QWORD *)(v266 + 64))
        {
          v172 = v272;
          *(_QWORD *)(v266 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v263, (uint64_t)__p);
          v176 = (void **)*((_QWORD *)&v295 + 1);
          if (*((void ***)&v295 + 1) == &v294[1])
            goto LABEL_235;
        }
        else
        {
          *v174 = 0;
          v174[1] = 0;
          v174[2] = 0;
          *(_OWORD *)v174 = *(_OWORD *)__p;
          v174[2] = v294[0];
          __p[0] = 0;
          __p[1] = 0;
          v294[0] = 0;
          if (*((_QWORD *)&v295 + 1))
          {
            if (*((void ***)&v295 + 1) != &v294[1])
            {
              v174[6] = *((_QWORD *)&v295 + 1);
              v175 = (_QWORD *)&v295 + 1;
              goto LABEL_234;
            }
            v174[6] = v174 + 3;
            (*(void (**)(_QWORD))(**((_QWORD **)&v295 + 1) + 24))(*((_QWORD *)&v295 + 1));
            v201 = v174 + 7;
            v172 = v272;
            *(_QWORD *)(v266 + 56) = v201;
            v176 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
            {
LABEL_235:
              v176 = &v294[1];
              v177 = 4;
LABEL_236:
              (*((void (**)(void))*v176 + v177))();
              goto LABEL_237;
            }
          }
          else
          {
            v175 = v174 + 6;
LABEL_234:
            *v175 = 0;
            v178 = v174 + 7;
            v172 = v272;
            *(_QWORD *)(v266 + 56) = v178;
            v176 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
              goto LABEL_235;
          }
        }
        if (v176)
        {
          v177 = 5;
          goto LABEL_236;
        }
LABEL_237:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v281)
        {
          *(_QWORD *)&v282 = v281;
          operator delete(v281);
        }
        goto LABEL_241;
      }
LABEL_242:
      if (v170 == 22)
      {
        if (v270 < 2 || *((_DWORD *)v272 + 4))
          goto LABEL_335;
        operations_research::sat::CpModelMapping::Integers<google::protobuf::RepeatedField<int>>(v269, (int *)(*((_QWORD *)v272 + 6) + 40), (int **)&v281);
        if (*((_DWORD *)v272 + 15) == 22)
          v179 = (uint64_t *)*((_QWORD *)v272 + 6);
        else
          v179 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
        operations_research::sat::CpModelMapping::Intervals<google::protobuf::RepeatedField<int>>(v269, (int *)v179 + 4, (char **)&v290);
        if (*((_DWORD *)v272 + 15) == 22)
          v180 = (uint64_t *)*((_QWORD *)v272 + 6);
        else
          v180 = &operations_research::sat::_CumulativeConstraintProto_default_instance_;
        v181 = *((_DWORD *)v180 + 15);
        if (~v181 <= v181)
          v182 = v181;
        else
          v182 = ~v181;
        v5 = (operations_research::sat::_anonymous_namespace_ *)v266;
        operations_research::sat::CreateCumulativeCutGenerator((int **)&v290, *(_DWORD *)(*(_QWORD *)v269 + 4 * v182) ^ (v181 >> 31), (char **)&v281, (uint64_t)v4, (char **)__p);
        v183 = *(_QWORD **)(v266 + 56);
        if ((unint64_t)v183 >= *(_QWORD *)(v266 + 64))
        {
          v185 = v272;
          *(_QWORD *)(v266 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v263, (uint64_t)__p);
          v186 = (void **)*((_QWORD *)&v295 + 1);
          if (*((void ***)&v295 + 1) == &v294[1])
            goto LABEL_263;
        }
        else
        {
          *v183 = 0;
          v183[1] = 0;
          v183[2] = 0;
          *(_OWORD *)v183 = *(_OWORD *)__p;
          v183[2] = v294[0];
          __p[0] = 0;
          __p[1] = 0;
          v294[0] = 0;
          if (*((_QWORD *)&v295 + 1))
          {
            if (*((void ***)&v295 + 1) != &v294[1])
            {
              v183[6] = *((_QWORD *)&v295 + 1);
              v184 = (_QWORD *)&v295 + 1;
              goto LABEL_262;
            }
            v183[6] = v183 + 3;
            (*(void (**)(_QWORD))(**((_QWORD **)&v295 + 1) + 24))(*((_QWORD *)&v295 + 1));
            v200 = v183 + 7;
            v185 = v272;
            *(_QWORD *)(v266 + 56) = v200;
            v186 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
            {
LABEL_263:
              v186 = &v294[1];
              v187 = 4;
LABEL_264:
              (*((void (**)(void))*v186 + v187))();
              goto LABEL_265;
            }
          }
          else
          {
            v184 = v183 + 6;
LABEL_262:
            *v184 = 0;
            v188 = v183 + 7;
            v185 = v272;
            *(_QWORD *)(v266 + 56) = v188;
            v186 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
              goto LABEL_263;
          }
        }
        if (v186)
        {
          v187 = 5;
          goto LABEL_264;
        }
LABEL_265:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v290)
        {
          v291 = (char *)v290;
          operator delete(v290);
        }
        if (v281)
        {
          *(_QWORD *)&v282 = v281;
          operator delete(v281);
        }
        v170 = *((_DWORD *)v185 + 15);
      }
      if (v170 != 27)
        goto LABEL_335;
      v5 = (operations_research::sat::_anonymous_namespace_ *)v266;
      if (!*((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v4)
            + 447)
        || *((_DWORD *)v272 + 4))
      {
        goto LABEL_335;
      }
      if (*((_DWORD *)v272 + 15) == 27)
      {
        v189 = (uint64_t *)*((_QWORD *)v272 + 6);
        v190 = (uint64_t *)v189[5];
        if (!v190)
          v190 = &operations_research::sat::_LinearExpressionProto_default_instance_;
        if (*((_DWORD *)v190 + 4) != 1 || *(_QWORD *)v190[6] != 1)
          goto LABEL_335;
      }
      else
      {
        v190 = &operations_research::sat::_LinearExpressionProto_default_instance_;
        if (qword_25408AAD8)
          v190 = (uint64_t *)qword_25408AAD8;
        if (*((_DWORD *)v190 + 4) != 1)
          goto LABEL_335;
        v189 = &operations_research::sat::_LinearArgumentProto_default_instance_;
        if (*(_QWORD *)v190[6] != 1)
          goto LABEL_335;
      }
      v191 = *(_DWORD *)v190[3];
      if (~v191 <= v191)
        v192 = *(_DWORD *)v190[3];
      else
        v192 = ~v191;
      v193 = *(_DWORD *)(*(_QWORD *)v269 + 4 * v192);
      v290 = 0;
      v291 = 0;
      v292 = 0;
      std::vector<operations_research::sat::LinearExpression>::reserve((char **)&v290, *((int *)v189 + 6));
      v194 = 0;
      v195 = v193 ^ (v191 >> 31);
      while (2)
      {
        if (*((_DWORD *)v272 + 15) == 27)
        {
          v196 = (uint64_t *)*((_QWORD *)v272 + 6);
          if (v194 >= *((int *)v196 + 6))
            break;
          goto LABEL_295;
        }
        if (v194 < (int)qword_25408AAC8)
        {
          v196 = &operations_research::sat::_LinearArgumentProto_default_instance_;
LABEL_295:
          operations_research::sat::GetExprFromProto(*(_QWORD *)(v196[4] + 8 * v194 + 8), v269, (uint64_t)&v281);
          operations_research::sat::PositiveVarExpr((uint64_t *)&v281, (uint64_t)__p);
          v197 = v291;
          if (v291 >= v292)
          {
            v291 = std::vector<operations_research::sat::LinearExpression>::__push_back_slow_path<operations_research::sat::LinearExpression>(&v290, (uint64_t)__p);
            if (v294[1])
            {
              v294[2] = v294[1];
              operator delete(v294[1]);
            }
          }
          else
          {
            *((_QWORD *)v291 + 2) = 0;
            *((_QWORD *)v197 + 3) = 0;
            *(_QWORD *)v197 = 0;
            *((_QWORD *)v197 + 1) = 0;
            *(_OWORD *)v197 = *(_OWORD *)__p;
            *((void **)v197 + 2) = v294[0];
            __p[0] = 0;
            __p[1] = 0;
            v294[0] = 0;
            *((_QWORD *)v197 + 4) = 0;
            *((_QWORD *)v197 + 5) = 0;
            *(_OWORD *)(v197 + 24) = *(_OWORD *)&v294[1];
            *((_QWORD *)v197 + 5) = v295;
            v294[1] = 0;
            v294[2] = 0;
            *(_QWORD *)&v295 = 0;
            *((_QWORD *)v197 + 6) = *((_QWORD *)&v295 + 1);
            v291 = v197 + 56;
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if ((_QWORD)v283)
          {
            *((_QWORD *)&v283 + 1) = v283;
            operator delete((void *)v283);
          }
          if (v281)
          {
            *(_QWORD *)&v282 = v281;
            operator delete(v281);
          }
          ++v194;
          continue;
        }
        break;
      }
      operations_research::sat::AppendLinMaxRelaxation(v195, (uint64_t **)&v290, (uint64_t)v4, v266, (int **)&v281);
      if (v270 >= 2)
      {
        operations_research::sat::CreateLinMaxCutGenerator(v195, (uint64_t *)&v290, &v281, (uint64_t)v4, __p);
        v198 = *(_QWORD **)(v266 + 56);
        if ((unint64_t)v198 >= *(_QWORD *)(v266 + 64))
        {
          *(_QWORD *)(v266 + 56) = std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(v263, (uint64_t)__p);
          v202 = (void **)*((_QWORD *)&v295 + 1);
          if (*((void ***)&v295 + 1) == &v294[1])
            goto LABEL_319;
        }
        else
        {
          *v198 = 0;
          v198[1] = 0;
          v198[2] = 0;
          *(_OWORD *)v198 = *(_OWORD *)__p;
          v198[2] = v294[0];
          __p[0] = 0;
          __p[1] = 0;
          v294[0] = 0;
          if (*((_QWORD *)&v295 + 1))
          {
            if (*((void ***)&v295 + 1) != &v294[1])
            {
              v198[6] = *((_QWORD *)&v295 + 1);
              v199 = (_QWORD *)&v295 + 1;
              goto LABEL_318;
            }
            v198[6] = v198 + 3;
            (*(void (**)(_QWORD))(**((_QWORD **)&v295 + 1) + 24))(*((_QWORD *)&v295 + 1));
            *(_QWORD *)(v266 + 56) = v198 + 7;
            v202 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
            {
LABEL_319:
              v202 = &v294[1];
              v203 = 4;
LABEL_320:
              (*((void (**)(void))*v202 + v203))();
              goto LABEL_321;
            }
          }
          else
          {
            v199 = v198 + 6;
LABEL_318:
            *v199 = 0;
            *(_QWORD *)(v266 + 56) = v198 + 7;
            v202 = (void **)*((_QWORD *)&v295 + 1);
            if (*((void ***)&v295 + 1) == &v294[1])
              goto LABEL_319;
          }
        }
        if (v202)
        {
          v203 = 5;
          goto LABEL_320;
        }
LABEL_321:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v281)
      {
        *(_QWORD *)&v282 = v281;
        operator delete(v281);
      }
      v204 = (char *)v290;
      if (v290)
      {
        v205 = v291;
        v206 = v290;
        if (v291 != v290)
        {
          do
          {
            v207 = (void *)*((_QWORD *)v205 - 4);
            if (v207)
            {
              *((_QWORD *)v205 - 3) = v207;
              operator delete(v207);
            }
            v208 = (void *)*((_QWORD *)v205 - 7);
            if (v208)
            {
              *((_QWORD *)v205 - 6) = v208;
              operator delete(v208);
            }
            v205 -= 56;
          }
          while (v205 != v204);
          v206 = v290;
        }
        v291 = v204;
        operator delete(v206);
      }
LABEL_335:
      if (v275)
      {
        v276 = (int *)v275;
        operator delete(v275);
      }
      if (v274[0])
      {
        v274[1] = v274[0];
        operator delete(v274[0]);
      }
      v10 = v268 + 1;
    }
    while (v268 + 1 != (operations_research::sat **)v265);
  }
  if (*((int *)a2 + 6) >= 1)
  {
    v209 = 0;
    v271 = 0;
    v273 = 0;
    v210 = (_QWORD *)((char *)v4 + 32);
    v211 = &off_24F983188;
    do
    {
      if (*(_DWORD *)(v6[6] + 4 * v209) == -1)
      {
        v212 = *(_DWORD *)(*v6 + 4 * v209);
        v297 = v211;
        v298 = v212;
        v299 = &v297;
        v213 = (_QWORD *)*v210;
        v214 = v210;
        do
        {
          v215 = v213[4];
          v216 = v215 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
          if (v215 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
            v217 = v213;
          else
            v217 = v213 + 1;
          if (v216)
            v214 = v213;
          v213 = (_QWORD *)*v217;
        }
        while (*v217);
        if (*(_QWORD *)(*(_QWORD *)(v214[5] + 40) + 12 * v212)
           + *(_QWORD *)(*(_QWORD *)(v214[5] + 40) + 12 * (v212 ^ 1)))
        {
          if (operations_research::sat::IntegerEncoder::VariableIsFullyEncoded(v7, v212)
            && operations_research::sat::AppendFullEncodingRelaxation(v212, (uint64_t)v4, (uint64_t)v5))
          {
            ++v271;
          }
          else
          {
            v218 = (uint64_t)v4;
            v219 = v210;
            v220 = v211;
            v221 = *(char **)v5;
            v222 = *((_QWORD *)v5 + 1);
            v223 = v212;
            v224 = (const operations_research::sat::ConstraintProto *)v218;
            operations_research::sat::AppendPartialGreaterThanEncodingRelaxation(v223, v218, (uint64_t)v5);
            v225 = v273;
            if ((uint64_t)(*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 6 > (unint64_t)(int)((unint64_t)(v222 - (_QWORD)v221) >> 6))
              v225 = v273 + 1;
            v273 = v225;
            v211 = v220;
            v210 = v219;
            v4 = v224;
          }
        }
      }
      ++v209;
    }
    while (v209 < *((int *)a2 + 6));
  }
  v226 = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)v4);
  operations_research::sat::BinaryImplicationGraph::TransformIntoMaxCliques(v226, (uint64_t **)v5 + 3, 100000000);
  v227 = (int **)*((_QWORD *)v5 + 3);
  v228 = (int **)*((_QWORD *)v5 + 4);
  if (v227 != v228)
  {
    v229 = (_QWORD *)((char *)v4 + 32);
    do
    {
      if (*v227 != v227[1])
      {
        v230 = (_QWORD *)*v229;
        if (!*v229)
          goto LABEL_375;
        v231 = v229;
        do
        {
          v232 = v230[4];
          v233 = v232 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d;
          if (v232 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
            v234 = v230;
          else
            v234 = v230 + 1;
          if (v233)
            v231 = v230;
          v230 = (_QWORD *)*v234;
        }
        while (*v234);
        if (v231 != v229
          && v231[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerEncoder>(void)::d)
        {
          v235 = (void *)v231[5];
        }
        else
        {
LABEL_375:
          v235 = 0;
        }
        v281 = v235;
        v282 = xmmword_22DCEE4E0;
        v283 = 0u;
        v284 = 0u;
        v236 = *v227;
        v237 = v227[1];
        if (*v227 != v237)
        {
          do
            operations_research::sat::LinearConstraintBuilder::AddLiteralTerm(&v281, *v236++, 1);
          while (v236 != v237);
        }
        operations_research::sat::LinearConstraintBuilder::Build((operations_research::sat::LinearConstraintBuilder *)&v281, (uint64_t)__p);
        v238 = *((_QWORD *)v5 + 1);
        if (v238 >= *((_QWORD *)v5 + 2))
        {
          v239 = std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>((void **)v5, (uint64_t)__p);
          v240 = (void *)v295;
          *((_QWORD *)v5 + 1) = v239;
          if (v240)
          {
            *((_QWORD *)&v295 + 1) = v240;
            operator delete(v240);
          }
        }
        else
        {
          *(_OWORD *)v238 = *(_OWORD *)__p;
          *(_QWORD *)(v238 + 16) = 0;
          *(_QWORD *)(v238 + 24) = 0;
          *(_QWORD *)(v238 + 32) = 0;
          *(_QWORD *)(v238 + 40) = 0;
          *(_OWORD *)(v238 + 16) = *(_OWORD *)v294;
          *(void **)(v238 + 32) = v294[2];
          memset(v294, 0, sizeof(v294));
          *(_QWORD *)(v238 + 48) = 0;
          *(_QWORD *)(v238 + 56) = 0;
          *(_OWORD *)(v238 + 40) = v295;
          *(_QWORD *)(v238 + 56) = v296;
          v295 = 0uLL;
          v296 = 0;
          *((_QWORD *)v5 + 1) = v238 + 64;
        }
        if (v294[0])
        {
          v294[1] = v294[0];
          operator delete(v294[0]);
        }
        if (*((_QWORD *)&v283 + 1))
        {
          *(_QWORD *)&v284 = *((_QWORD *)&v283 + 1);
          operator delete(*((void **)&v283 + 1));
        }
      }
      v227 += 3;
    }
    while (v227 != v228);
  }
  v241 = *(char **)v5;
  v242 = (char *)*((_QWORD *)v5 + 1);
  if (v242 == *(char **)v5)
  {
    v245 = 0;
    v246 = (uint64_t)&v242[-*(_QWORD *)v5] >> 6;
    v241 = (char *)*((_QWORD *)v5 + 1);
  }
  else
  {
    v243 = 0;
    v244 = 0;
    v245 = 0;
    do
    {
      v247 = &v241[v243];
      if (*(_QWORD *)&v241[v243 + 24] - *(_QWORD *)&v241[v243 + 16] >= 8uLL)
      {
        v248 = v245++;
        v249 = &v241[64 * v248];
        *(_OWORD *)__p = *(_OWORD *)v249;
        v250 = *((_QWORD *)v249 + 4);
        v251 = *((_OWORD *)v249 + 1);
        *((_QWORD *)v249 + 2) = 0;
        *((_QWORD *)v249 + 3) = 0;
        v252 = *((_QWORD *)v249 + 7);
        v253 = *(_OWORD *)(v249 + 40);
        *((_QWORD *)v249 + 6) = 0;
        *((_QWORD *)v249 + 7) = 0;
        *((_QWORD *)v249 + 4) = 0;
        *((_QWORD *)v249 + 5) = 0;
        *(_OWORD *)v249 = *(_OWORD *)v247;
        *((_OWORD *)v249 + 1) = *((_OWORD *)v247 + 1);
        *((_QWORD *)v249 + 4) = *((_QWORD *)v247 + 4);
        *((_QWORD *)v247 + 3) = 0;
        *((_QWORD *)v247 + 4) = 0;
        v254 = *((_QWORD *)v247 + 7);
        *(_OWORD *)(v249 + 40) = *(_OWORD *)(v247 + 40);
        *((_QWORD *)v249 + 7) = v254;
        *((_QWORD *)v247 + 5) = 0;
        *((_QWORD *)v247 + 6) = 0;
        *((_QWORD *)v247 + 7) = 0;
        *(_OWORD *)v247 = *(_OWORD *)__p;
        *((_OWORD *)v247 + 1) = v251;
        *((_QWORD *)v247 + 4) = v250;
        *(_OWORD *)(v247 + 40) = v253;
        *((_QWORD *)v247 + 7) = v252;
        v241 = *(char **)v5;
        v242 = (char *)*((_QWORD *)v5 + 1);
      }
      ++v244;
      v246 = (v242 - v241) >> 6;
      v243 += 64;
    }
    while (v246 > v244);
  }
  if (v245 <= v246)
  {
    if (v245 < v246)
    {
      v255 = &v241[64 * (uint64_t)v245];
      while (v242 != v255)
      {
        v256 = (void *)*((_QWORD *)v242 - 3);
        if (v256)
        {
          *((_QWORD *)v242 - 2) = v256;
          operator delete(v256);
        }
        v257 = (void *)*((_QWORD *)v242 - 6);
        if (v257)
        {
          *((_QWORD *)v242 - 5) = v257;
          operator delete(v257);
        }
        v242 -= 64;
      }
      *((_QWORD *)v5 + 1) = v255;
    }
  }
  else
  {
    std::vector<operations_research::sat::LinearConstraint>::__append((uint64_t)v5, v245 - v246);
  }
  if (*off_254079490[0] >= 3
    && (off_254079490[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079490, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 686);
    v258 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, (uint64_t)"num_full_encoding_relaxations: ", 31);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)__p);
  }
  if (*off_254079498[0] >= 3
    && (off_254079498[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079498, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 687);
    v259 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v259, (uint64_t)"num_partial_encoding_relaxations: ", 34);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)__p);
  }
  if (*off_2540794A0[0] >= 3
    && (off_2540794A0[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540794A0, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 689);
    google::LogMessage::stream((google::LogMessage *)__p);
    v260 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v260, (uint64_t)" constraints in the LP relaxation.", 34);
    google::LogMessage::~LogMessage((google::LogMessage *)__p);
  }
  if (*off_2540794A8[0] >= 3
    && (off_2540794A8[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_2540794A8, (int **)&fLI::FLAGS_v, "./ortools/sat/cp_model_solver.cc", (const char *)3)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/cp_model_solver.cc", 691);
    google::LogMessage::stream((google::LogMessage *)__p);
    v261 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v261, (uint64_t)" cuts generators.", 17);
    google::LogMessage::~LogMessage((google::LogMessage *)__p);
  }
  if ((_QWORD)v279)
  {
    operator delete(v277);
    v277 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v280 = 0;
    *(_QWORD *)&v279 = 0;
    v278 = 0uLL;
  }
  if (*((_QWORD *)&v279 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v279 + 1));
}

void sub_22DB0EC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

operations_research::sat::FeasibilityPump *operations_research::sat::Model::GetOrCreate<operations_research::sat::FeasibilityPump>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  operations_research::sat::FeasibilityPump *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v19;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    goto LABEL_12;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v2[4];
    v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d;
    if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != v3 && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d)
    return (operations_research::sat::FeasibilityPump *)v4[5];
LABEL_12:
  v8 = (operations_research::sat::FeasibilityPump *)operator new();
  operations_research::sat::FeasibilityPump::FeasibilityPump(v8, (operations_research::sat::Model *)a1);
  v9 = (_QWORD *)*v3;
  v10 = v3;
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v10 = v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d)
          break;
        v9 = (_QWORD *)*v10;
        v3 = v10;
        if (!*v10)
          goto LABEL_19;
      }
      if (v11 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d)
        break;
      v9 = (_QWORD *)v10[1];
      if (!v9)
      {
        v3 = v10 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v12 = v10;
    v10 = operator new(0x30uLL);
    v10[4] = &gtl::FastTypeId<operations_research::sat::FeasibilityPump>(void)::d;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v3 = v10;
    v13 = **(_QWORD **)(a1 + 24);
    v14 = v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 24) = v13;
      v14 = (uint64_t *)*v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v14);
    ++*(_QWORD *)(a1 + 40);
  }
  v10[5] = v8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24F984AD8;
  v15[1] = v8;
  v19 = v15;
  v16 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v16 >= *(_QWORD *)(a1 + 64))
  {
    v17 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(a1 + 48), &v19);
  }
  else
  {
    *v16 = v15;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v8;
}

void sub_22DB0F184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10F2C40545DF5CBLL);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_27;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        break;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_27:
    v22 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    v10[6] = *(uint64_t **)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v22;
    *v6 = (uint64_t *)v10;
    v23 = (uint64_t *)**a1;
    v24 = (uint64_t *)v10;
    if (v23)
    {
      *a1 = v23;
      v24 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v24);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

void operations_research::sat::LinearConstraint::~LinearConstraint(operations_research::sat::LinearConstraint *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

void std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_DWORD *std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24F9849D8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24F9849D8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()((unsigned int *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat29NewIntegerVariableFromLiteralENS0_7LiteralEEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat29NewIntegerVariableFromLiteralENS0_7LiteralEEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat29NewIntegerVariableFromLiteralENS0_7LiteralEEUlPNS0_5ModelEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat29NewIntegerVariableFromLiteralENS0_7LiteralEEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t operations_research::sat::NewIntegerVariableFromLiteral(operations_research::sat::Literal)::{lambda(operations_research::sat::Model *)#1}::operator()(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ConstantIntegerVariable;
  unint64_t v8;
  operations_research::sat::IntegerTrail *v9;
  uint64_t (***v10)();
  uint64_t v11;
  operations_research::sat::IntegerTrail *v12;
  operations_research::sat::IntegerTrail *v13;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t (***v17)();
  uint64_t (**v18)();
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
  v5 = (int)*a1;
  v6 = *(_QWORD *)(v4 + 160);
  if ((int)v5 >= (int)((unint64_t)(*(_QWORD *)(v4 + 168) - v6) >> 2)
    || (ConstantIntegerVariable = *(unsigned int *)(v6 + 4 * v5), (_DWORD)ConstantIntegerVariable == -1))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2)
                                 + 26)
                               + 24)
                   + (((unint64_t)(int)*a1 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v8 >> *a1) & 1) != 0)
    {
      v21 = &off_24F984A48;
      v22 = 1;
      v23 = &v21;
      v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
      ConstantIntegerVariable = operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(v9, v22);
      v10 = v23;
      if (v23 == &v21)
      {
        v11 = 4;
        v10 = &v21;
        goto LABEL_12;
      }
    }
    else if (((v8 >> (*a1 & 0x3F ^ 1)) & 1) != 0)
    {
      v18 = &off_24F984A48;
      v19 = 0;
      v20 = &v18;
      v12 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
      ConstantIntegerVariable = operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(v12, v19);
      v10 = v20;
      if (v20 == &v18)
      {
        v11 = 4;
        v10 = &v18;
        goto LABEL_12;
      }
    }
    else
    {
      v15 = &off_24F984000;
      v16 = xmmword_22DCE6500;
      v17 = &v15;
      v13 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
      ConstantIntegerVariable = operations_research::sat::IntegerTrail::AddIntegerVariable((uint64_t)v13, v16, *((uint64_t *)&v16 + 1));
      v10 = v17;
      if (v17 == &v15)
      {
        v11 = 4;
        v10 = &v15;
        goto LABEL_12;
      }
    }
    if (!v10)
    {
LABEL_13:
      operations_research::sat::IntegerEncoder::AssociateToIntegerEqualValue(v4, (const char *)*a1, ConstantIntegerVariable, 1);
      return ConstantIntegerVariable;
    }
    v11 = 5;
LABEL_12:
    (*v10)[v11]();
    goto LABEL_13;
  }
  return ConstantIntegerVariable;
}

void sub_22DB0F624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  if (a13 == v21)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*(_QWORD *)a13 + 40))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::~__func()
{
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F984A48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F984A48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  operations_research::sat::IntegerTrail *v3;

  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(*a2);
  return operations_research::sat::IntegerTrail::GetOrCreateConstantIntegerVariable(v3, *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat23ConstantIntegerVariableExEUlPNS0_5ModelEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat23ConstantIntegerVariableExEUlPNS0_5ModelEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat23ConstantIntegerVariableExEUlPNS0_5ModelEE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat23ConstantIntegerVariableExEUlPNS0_5ModelEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1},std::allocator<operations_research::sat::ConstantIntegerVariable(long long)::{lambda(operations_research::sat::Model *)#1}>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> ()(operations_research::sat::Model *)>::target_type()
{
}

uint64_t google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>(int a1, int a2, char *a3)
{
  uint64_t v3;
  uint64_t v5;

  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5, a3);
  std::ostream::operator<<();
  google::base::CheckOpMessageBuilder::ForVar2((google::base::CheckOpMessageBuilder *)&v5);
  std::ostream::operator<<();
  v3 = google::base::CheckOpMessageBuilder::NewString((google::base::CheckOpMessageBuilder *)&v5);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v5);
  return v3;
}

void sub_22DB0F840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::CutGenerator::~CutGenerator(operations_research::sat::CutGenerator *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;

  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

char *std::vector<operations_research::sat::CutGenerator>::__push_back_slow_path<operations_research::sat::CutGenerator>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x492492492492492)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(56 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[56 * v3];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = (char *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 48);
  if (!v9)
  {
    v10 = &v7[56 * v3 + 48];
    goto LABEL_15;
  }
  v11 = &v7[56 * v3 + 48];
  if (v9 != a2 + 24)
  {
    *(_QWORD *)v11 = v9;
LABEL_15:
    *(_QWORD *)v10 = 0;
    goto LABEL_17;
  }
  *(_QWORD *)v11 = v8 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
LABEL_17:
  v12 = &v7[56 * v6];
  v13 = v8 + 56;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 != *a1)
  {
    v16 = 0;
    v17 = (char *)a1[1];
    while (1)
    {
      v19 = &v8[v16];
      v20 = &v14[v16];
      *((_QWORD *)v19 - 7) = 0;
      *((_QWORD *)v19 - 6) = 0;
      *((_QWORD *)v19 - 5) = 0;
      *(_OWORD *)(v19 - 56) = *(_OWORD *)&v14[v16 - 56];
      *((_QWORD *)v19 - 5) = *(_QWORD *)&v14[v16 - 40];
      *((_QWORD *)v20 - 7) = 0;
      *((_QWORD *)v20 - 6) = 0;
      *((_QWORD *)v20 - 5) = 0;
      v21 = *(char **)&v14[v16 - 8];
      if (v21)
      {
        if (v20 - 32 == v21)
        {
          *((_QWORD *)v19 - 1) = v19 - 32;
          (*(void (**)(_QWORD))(**((_QWORD **)v20 - 1) + 24))(*((_QWORD *)v20 - 1));
          goto LABEL_21;
        }
        v18 = v17 - 8;
        *((_QWORD *)v19 - 1) = v21;
      }
      else
      {
        v18 = v19 - 8;
      }
      *(_QWORD *)v18 = 0;
LABEL_21:
      v17 -= 56;
      v16 -= 56;
      if (&v14[v16] == v15)
      {
        v22 = (char *)*a1;
        v14 = (char *)a1[1];
        *a1 = &v8[v16];
        a1[1] = v13;
        a1[2] = v12;
        if (v14 == v22)
        {
LABEL_37:
          if (v14)
            goto LABEL_38;
          return v8 + 56;
        }
        while (2)
        {
          v23 = (char *)*((_QWORD *)v14 - 1);
          if (v14 - 32 == v23)
          {
            v23 = v14 - 32;
            v24 = 4;
LABEL_33:
            (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
          }
          else if (v23)
          {
            v24 = 5;
            goto LABEL_33;
          }
          v25 = (void *)*((_QWORD *)v14 - 7);
          if (v25)
          {
            *((_QWORD *)v14 - 6) = v25;
            operator delete(v25);
          }
          v14 -= 56;
          if (v14 == v22)
          {
            v14 = v22;
            goto LABEL_37;
          }
          continue;
        }
      }
    }
  }
  *a1 = v8;
  a1[1] = v13;
  a1[2] = v12;
  if (v14)
LABEL_38:
    operator delete(v14);
  return v8 + 56;
}

char *std::vector<operations_research::sat::LinearConstraint>::__push_back_slow_path<operations_research::sat::LinearConstraint>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 5 > v4)
    v4 = v5 >> 5;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = v7 << 6;
  v10 = (char *)operator new(v7 << 6);
  v11 = *(_OWORD *)(a2 + 16);
  v12 = &v10[64 * v3];
  v13 = &v10[v9];
  *(_OWORD *)v12 = *(_OWORD *)a2;
  *((_OWORD *)v12 + 1) = v11;
  *((_QWORD *)v12 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v12 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v14 = v12 + 64;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (!v16)
      return v14;
    goto LABEL_19;
  }
  v17 = 0;
  do
  {
    v18 = &v12[v17];
    v19 = &v16[v17];
    *((_OWORD *)v18 - 4) = *(_OWORD *)&v16[v17 - 64];
    *((_OWORD *)v18 - 3) = *(_OWORD *)&v16[v17 - 48];
    *((_QWORD *)v18 - 4) = *(_QWORD *)&v16[v17 - 32];
    *((_QWORD *)v19 - 6) = 0;
    *((_QWORD *)v19 - 5) = 0;
    *((_QWORD *)v19 - 4) = 0;
    *(_OWORD *)(v18 - 24) = *(_OWORD *)&v16[v17 - 24];
    *((_QWORD *)v18 - 1) = *(_QWORD *)&v16[v17 - 8];
    *((_QWORD *)v19 - 3) = 0;
    *((_QWORD *)v19 - 2) = 0;
    *((_QWORD *)v19 - 1) = 0;
    v17 -= 64;
  }
  while (&v16[v17] != v15);
  v20 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = &v12[v17];
  a1[1] = v14;
  a1[2] = v13;
  if (v16 != v20)
  {
    do
    {
      v21 = (void *)*((_QWORD *)v16 - 3);
      if (v21)
      {
        *((_QWORD *)v16 - 2) = v21;
        operator delete(v21);
      }
      v22 = (void *)*((_QWORD *)v16 - 6);
      if (v22)
      {
        *((_QWORD *)v16 - 5) = v22;
        operator delete(v22);
      }
      v16 -= 64;
    }
    while (v16 != v20);
    v16 = v20;
  }
  if (v16)
LABEL_19:
    operator delete(v16);
  return v14;
}

uint64_t std::__split_buffer<operations_research::sat::LinearConstraint>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 48);
    if (v5)
    {
      *(_QWORD *)(i - 40) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<operations_research::sat::LinearConstraint>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2 << 6);
      v5 += 64 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(char **)a1;
    v7 = (uint64_t)&v5[-*(_QWORD *)a1] >> 6;
    v8 = v7 + a2;
    if ((v7 + a2) >> 58)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 5 > v8)
      v8 = v9 >> 5;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v10 = 0x3FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 58)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(v10 << 6);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[64 * v7];
    v13 = a2 << 6;
    v14 = &v11[64 * v10];
    bzero(v12, v13);
    v15 = &v12[v13];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_27:
        operator delete(v5);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = &v12[v16];
        v18 = &v5[v16];
        *((_OWORD *)v17 - 4) = *(_OWORD *)&v5[v16 - 64];
        *((_QWORD *)v17 - 5) = 0;
        *((_QWORD *)v17 - 4) = 0;
        *((_OWORD *)v17 - 3) = *(_OWORD *)&v5[v16 - 48];
        *((_QWORD *)v17 - 4) = *(_QWORD *)&v5[v16 - 32];
        *((_QWORD *)v18 - 6) = 0;
        *((_QWORD *)v18 - 5) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *((_QWORD *)v17 - 2) = 0;
        *((_QWORD *)v17 - 1) = 0;
        *(_OWORD *)(v17 - 24) = *(_OWORD *)&v5[v16 - 24];
        *((_QWORD *)v17 - 1) = *(_QWORD *)&v5[v16 - 8];
        *((_QWORD *)v18 - 3) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        v16 -= 64;
      }
      while (&v5[v16] != v6);
      v19 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v12[v16];
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        do
        {
          v20 = (void *)*((_QWORD *)v5 - 3);
          if (v20)
          {
            *((_QWORD *)v5 - 2) = v20;
            operator delete(v20);
          }
          v21 = (void *)*((_QWORD *)v5 - 6);
          if (v21)
          {
            *((_QWORD *)v5 - 5) = v21;
            operator delete(v21);
          }
          v5 -= 64;
        }
        while (v5 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_27;
    }
  }
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::FeasibilityPump>::~Delete(_QWORD *a1)
{
  operations_research::sat::FeasibilityPump *v2;

  v2 = (operations_research::sat::FeasibilityPump *)a1[1];
  *a1 = &off_24F984AD8;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::FeasibilityPump::~FeasibilityPump(v2);
    MEMORY[0x22E31DF78]();
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::FeasibilityPump>::~Delete(_QWORD *a1)
{
  operations_research::sat::FeasibilityPump *v2;

  v2 = (operations_research::sat::FeasibilityPump *)a1[1];
  *a1 = &off_24F984AD8;
  a1[1] = 0;
  if (v2)
  {
    operations_research::sat::FeasibilityPump::~FeasibilityPump(v2);
    MEMORY[0x22E31DF78]();
  }
  JUMPOUT(0x22E31DF78);
}

void operations_research::sat::LinearRelaxation::~LinearRelaxation(operations_research::sat::LinearRelaxation *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = (void *)*((_QWORD *)this + 6);
    if (v3 == v2)
    {
LABEL_13:
      *((_QWORD *)this + 7) = v2;
      operator delete(v4);
      goto LABEL_14;
    }
    while (1)
    {
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
        break;
      if (v5)
      {
        v6 = 5;
LABEL_9:
        (*(void (**)(void))(*v5 + 8 * v6))();
      }
      v7 = *(void **)(v3 - 56);
      if (v7)
      {
        *(_QWORD *)(v3 - 48) = v7;
        operator delete(v7);
      }
      v3 -= 56;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 6);
        goto LABEL_13;
      }
    }
    v5 = (_QWORD *)(v3 - 32);
    v6 = 4;
    goto LABEL_9;
  }
LABEL_14:
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (void *)*((_QWORD *)this + 3);
    if (v9 != v8)
    {
      v11 = *((_QWORD *)this + 4);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
  }
  v14 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v15 = *((_QWORD *)this + 1);
    v16 = *(void **)this;
    if (v15 != v14)
    {
      do
      {
        v17 = *(void **)(v15 - 24);
        if (v17)
        {
          *(_QWORD *)(v15 - 16) = v17;
          operator delete(v17);
        }
        v18 = *(void **)(v15 - 48);
        if (v18)
        {
          *(_QWORD *)(v15 - 40) = v18;
          operator delete(v18);
        }
        v15 -= 64;
      }
      while (v15 != v14);
      v16 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v14;
    operator delete(v16);
  }
}

_QWORD *operations_research::sat::`anonymous namespace'::LnsSolver::LnsSolver(_QWORD *a1, uint64_t *a2, const operations_research::sat::SatParameters *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v11;
  std::string *v12;
  int v13;
  uint64_t v14;
  std::string __p;

  v10 = *a2;
  if (*(char *)(*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 8), *(_QWORD *)(v10 + 16));
    *a1 = off_24F982B08;
    v12 = (std::string *)(a1 + 1);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v11 = *(_OWORD *)(v10 + 8);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    *a1 = off_24F982B08;
    v12 = (std::string *)(a1 + 1);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      *v12 = __p;
      a1[4] = 0;
      a1[5] = 0;
      goto LABEL_7;
    }
  }
  std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  a1[4] = 0;
  a1[5] = 0;
  if (v13 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  *a1 = off_24F984B20;
  v14 = *a2;
  *a2 = 0;
  a1[6] = v14;
  a1[7] = a4;
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)(a1 + 8), a3);
  a1[80] = a5;
  return a1;
}

void sub_22DB101F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::`anonymous namespace'::LnsSolver::~LnsSolver(operations_research::sat::_anonymous_namespace_::LnsSolver *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24F984B20;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::_anonymous_namespace_::LnsSolver *)((char *)this + 64));
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_24F982B08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24F984B20;
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::_anonymous_namespace_::LnsSolver *)((char *)this + 64));
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_24F982B08;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x22E31DF78);
}

